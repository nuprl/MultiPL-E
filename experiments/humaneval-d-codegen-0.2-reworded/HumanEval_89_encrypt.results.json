{
  "name": "HumanEval_89_encrypt",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n",
  "tests": "unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu81gtguj.d(22): Error: no property `length` for type `string`\n/tmp/tmpu81gtguj.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu81gtguj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpkhrw2jx3.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhrw2jx3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i];\n        ret += s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp2u90_s6f.d(21): Error: no property `length` for type `string`\n/tmp/tmp2u90_s6f.d(25): Error: slice `ret` is not mutable\n/tmp/tmp2u90_s6f.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u90_s6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index >= 26)\n            index = index - 26;\n        else if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpe4kwuokk.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpe4kwuokk.d(29): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4kwuokk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg3b_7am1.d(22): Error: no property `length` for type `string`\n/tmp/tmpg3b_7am1.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3b_7am1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i;\n    string res = \"\";\n    for(i = 0; i < len; i++)\n    {\n        res += s[i];\n    }\n    for(i = 0; i < len; i++)\n    {\n        res[i] = res[(i+2)%len];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmptbchbfkj.d(21): Error: no property `length` for type `string`\n/tmp/tmptbchbfkj.d(26): Error: slice `res` is not mutable\n/tmp/tmptbchbfkj.d(30): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbchbfkj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqfkx1ytc.d(22): Error: no property `length` for type `string`\n/tmp/tmpqfkx1ytc.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkx1ytc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string result = \"\";\n    while (i < len) {\n        result += s[i];\n        i++;\n        if (i % 2 == 0) {\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0jmrjohf.d(21): Error: no property `length` for type `string`\n/tmp/tmp0jmrjohf.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jmrjohf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2;\n        if(index > 25)\n            index -= 26;\n        result += (char)(index);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpq21ionpy.d(27): Error: C style cast illegal, use `cast(char)index`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq21ionpy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2 * (i % 2);\n        if(index > 25)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpy3j3md0z.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3j3md0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        result += s[(i+2)%len];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp_0zp9gq6.d(21): Error: no property `length` for type `string`\n/tmp/tmp_0zp9gq6.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0zp9gq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmplq_7716o.d(22): Error: no property `length` for type `string`\n/tmp/tmplq_7716o.d(23): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplq_7716o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqfkx1ytc.d(22): Error: no property `length` for type `string`\n/tmp/tmpqfkx1ytc.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkx1ytc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while(i < len)\n    {\n        ret += s[i];\n        i++;\n        if(i % 2 == 0)\n        {\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpjb498a3u.d(21): Error: no property `length` for type `string`\n/tmp/tmpjb498a3u.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjb498a3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2 * (i % 2);\n        if(index > 25)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpy3j3md0z.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3j3md0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string res = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        res += s[i] + s[i] + s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpd3vqe9zc.d(22): Error: no property `length` for type `string`\n/tmp/tmpd3vqe9zc.d(24): Error: incompatible types for `(res) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3vqe9zc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp60la625p.d(22): Error: no property `length` for type `string`\n/tmp/tmp60la625p.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60la625p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu81gtguj.d(22): Error: no property `length` for type `string`\n/tmp/tmpu81gtguj.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu81gtguj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string result = \"\";\n    while (i < len) {\n        result += s[i];\n        i++;\n        i = i % len;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp_ytsh1sp.d(21): Error: no property `length` for type `string`\n/tmp/tmp_ytsh1sp.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ytsh1sp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len)\n    {\n        ret += s[i];\n        i++;\n        i = i % len;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp9wvat7th.d(21): Error: no property `length` for type `string`\n/tmp/tmp9wvat7th.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wvat7th.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4cpvb1z7.d(22): Error: no property `length` for type `string`\n/tmp/tmp4cpvb1z7.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cpvb1z7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        result += s[(i + 2) % len];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpprslnei0.d(21): Error: no property `length` for type `string`\n/tmp/tmpprslnei0.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprslnei0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            ret += (char)((s[i] - 'a' + 2) % 26 + 'a');\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            ret += (char)((s[i] - 'A' + 2) % 26 + 'A');\n        }\n        else\n        {\n            ret += s[i];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpyj80vw6j.d(26): Error: C style cast illegal, use `cast(char)((s[i] - 'a' + 2) % 26 + 'a')`\n/tmp/tmpyj80vw6j.d(30): Error: C style cast illegal, use `cast(char)((s[i] - 'A' + 2) % 26 + 'A')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyj80vw6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2;\n        if(index > 25)\n            index -= 26;\n        result += (char)(index);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpq21ionpy.d(27): Error: C style cast illegal, use `cast(char)index`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq21ionpy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpjauh29v4.d(27): Error: C style cast illegal, use `cast(char)(index + 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjauh29v4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        result += s[i];\n        i++;\n        j++;\n        if(j == 2)\n        {\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpak41uch2.d(21): Error: no property `length` for type `string`\n/tmp/tmpak41uch2.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak41uch2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2;\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqjbw7yfr.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjbw7yfr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len) {\n        ret += s[i];\n        i++;\n    }\n    i = 0;\n    while (i < len) {\n        ret[i] = ret[i] + ret[i+2];\n        i++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcasm1185.d(21): Error: no property `length` for type `string`\n/tmp/tmpcasm1185.d(25): Error: slice `ret` is not mutable\n/tmp/tmpcasm1185.d(30): Error: cannot modify `immutable` expression `ret[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcasm1185.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpesqcx8n2.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesqcx8n2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqfkx1ytc.d(22): Error: no property `length` for type `string`\n/tmp/tmpqfkx1ytc.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkx1ytc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqfkx1ytc.d(22): Error: no property `length` for type `string`\n/tmp/tmpqfkx1ytc.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkx1ytc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index < 0)\n            index = 26 + index;\n        else\n            index = index % 26;\n        res += (char)(index + 97);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqji0ppxo.d(26): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmpqji0ppxo.d(31): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqji0ppxo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ovl2xox.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmp4ovl2xox.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ovl2xox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmprdg2dtkm.d(22): Error: no property `length` for type `string`\n/tmp/tmprdg2dtkm.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdg2dtkm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu81gtguj.d(22): Error: no property `length` for type `string`\n/tmp/tmpu81gtguj.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu81gtguj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] + s[i] + s[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp8kyr5ebf.d(22): Error: no property `length` for type `string`\n/tmp/tmp8kyr5ebf.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kyr5ebf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpvr2pux5n.d(22): Error: no property `length` for type `string`\n/tmp/tmpvr2pux5n.d(24): Error: incompatible types for `(res) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvr2pux5n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu81gtguj.d(22): Error: no property `length` for type `string`\n/tmp/tmpu81gtguj.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu81gtguj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp5ag3ptoe.d(21): Error: no property `length` for type `string`\n/tmp/tmp5ag3ptoe.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ag3ptoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        result += s[i] - 'a' + (i % 2) * 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpfra8ex2n.d(21): Error: no property `length` for type `string`\n/tmp/tmpfra8ex2n.d(25): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 97 + i % 2 * 2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfra8ex2n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = index + 2 * (index / 2);\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpniwjm9xy.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpniwjm9xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index >= 26)\n            index -= 26;\n        ret += (char)(index + 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp35y2gvtk.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35y2gvtk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[(i + 2) % len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpylfgdq4g.d(21): Error: no property `length` for type `string`\n/tmp/tmpylfgdq4g.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpylfgdq4g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] + s[i] + s[i] + s[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp9_br03qs.d(22): Error: no property `length` for type `string`\n/tmp/tmp9_br03qs.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_br03qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        res += s[i] - 2 * (s[i] - 'a');\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpjdxfm1j8.d(21): Error: no property `length` for type `string`\n/tmp/tmpjdxfm1j8.d(25): Error: incompatible types for `(res) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdxfm1j8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len) {\n        ret += s[i];\n        i++;\n        i = i % len;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp91p2bflx.d(21): Error: no property `length` for type `string`\n/tmp/tmp91p2bflx.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91p2bflx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpej15ps6w.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmpej15ps6w.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej15ps6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + (s[i] - 'a' + 'a' - 2) % 26;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp24rdvah3.d(22): Error: no property `length` for type `string`\n/tmp/tmp24rdvah3.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + (cast(int)s[cast(ulong)i] - 97 + 97 - 2) % 26)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24rdvah3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpbjkw5y6k.d(22): Error: no property `length` for type `string`\n/tmp/tmpbjkw5y6k.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjkw5y6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len) {\n        ret += s[i];\n        i++;\n        if (i < len) {\n            ret += s[i];\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpys1nx8ro.d(21): Error: no property `length` for type `string`\n/tmp/tmpys1nx8ro.d(25): Error: slice `ret` is not mutable\n/tmp/tmpys1nx8ro.d(28): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpys1nx8ro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        if(index == -1)\n            index = alphabet.length() - 1;\n        encrypted += alphabet[(index + 2) % alphabet.length()];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqgcuoz0g.d(23): Error: no property `length` for type `string`\n/tmp/tmpqgcuoz0g.d(25): Error: no property `find` for type `string`\n/tmp/tmpqgcuoz0g.d(27): Error: no property `length` for type `string`\n/tmp/tmpqgcuoz0g.d(28): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgcuoz0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpbjkw5y6k.d(22): Error: no property `length` for type `string`\n/tmp/tmpbjkw5y6k.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjkw5y6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = index + 2 * (index / 2);\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpniwjm9xy.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpniwjm9xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[(i+2)%len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpeedl2zz8.d(21): Error: no property `length` for type `string`\n/tmp/tmpeedl2zz8.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeedl2zz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqfkx1ytc.d(22): Error: no property `length` for type `string`\n/tmp/tmpqfkx1ytc.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkx1ytc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu81gtguj.d(22): Error: no property `length` for type `string`\n/tmp/tmpu81gtguj.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu81gtguj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] + s[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcbd39qj3.d(22): Error: no property `length` for type `string`\n/tmp/tmpcbd39qj3.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbd39qj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] + s[(i+2)%len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpnnzkesmm.d(21): Error: no property `length` for type `string`\n/tmp/tmpnnzkesmm.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)((i + 2) % len)])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnnzkesmm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int alphabet_size = 26;\n    int alphabet_index = 0;\n    string encrypted_string = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int ascii_value = s[i] - 'a';\n        int alphabet_index_temp = alphabet_index + 2 * ascii_value;\n        if(alphabet_index_temp >= alphabet_size)\n        {\n            alphabet_index_temp -= alphabet_size;\n        }\n        encrypted_string += alphabet[alphabet_index_temp];\n        alphabet_index = alphabet_index_temp;\n    }\n    return encrypted_string;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp7frq24fw.d(21): Error: no property `length` for type `string`\n/tmp/tmp7frq24fw.d(33): Error: undefined identifier `alphabet`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7frq24fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string result = \"\";\n    while (i < len) {\n        result += s[i];\n        i++;\n        if (i % 2 == 0) {\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0jmrjohf.d(21): Error: no property `length` for type `string`\n/tmp/tmp0jmrjohf.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jmrjohf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if (index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp54hov46p.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp54hov46p.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54hov46p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + (len - i) * 2;\n        if(index >= 26)\n            index -= 26;\n        res += (char)(index + 'a');\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpbxf2b1jk.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbxf2b1jk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = (index + 2) % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpi7exbp42.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7exbp42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpk8quiutn.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8quiutn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if (index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp54hov46p.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp54hov46p.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54hov46p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpbjkw5y6k.d(22): Error: no property `length` for type `string`\n/tmp/tmpbjkw5y6k.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjkw5y6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string out = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        out += s[i] + (i % 2);\n    }\n    return out;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpta0qmz6f.d(22): Error: found `out` when expecting `;` following statement\n/tmp/tmpta0qmz6f.d(22): Error: found `=` instead of statement\n/tmp/tmpta0qmz6f.d(25): Error: found `out` instead of statement\n/tmp/tmpta0qmz6f.d(27): Error: expression expected, not `out`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpta0qmz6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp3ebgj277.d(26): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmp3ebgj277.d(29): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ebgj277.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = index + 2 * (index / 2);\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpniwjm9xy.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpniwjm9xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if (index > 'z')\n            index = index - 26;\n        ret += (char)(index + 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp9cxcxo52.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cxcxo52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len)\n    {\n        ret += s[i];\n        i++;\n        i = i % len;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp9wvat7th.d(21): Error: no property `length` for type `string`\n/tmp/tmp9wvat7th.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wvat7th.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = (index + 2) % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpi7exbp42.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7exbp42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        int c = s[i] - 'a';\n        c = (c + 2) % 26;\n        ret += (char)(c + 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpjyjhnnp7.d(27): Error: C style cast illegal, use `cast(char)(c + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyjhnnp7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            res += (char)((s[i] - 'a' + 2) % 26 + 'a');\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            res += (char)((s[i] - 'A' + 2) % 26 + 'A');\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpp_tchetp.d(26): Error: C style cast illegal, use `cast(char)((s[i] - 'a' + 2) % 26 + 'a')`\n/tmp/tmpp_tchetp.d(30): Error: C style cast illegal, use `cast(char)((s[i] - 'A' + 2) % 26 + 'A')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_tchetp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while(i < len)\n    {\n        ret += s[i];\n        i++;\n        if(i % 2 == 0)\n            i++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqr7mr1gn.d(21): Error: no property `length` for type `string`\n/tmp/tmpqr7mr1gn.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqr7mr1gn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if (index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp2zn8wht3.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp2zn8wht3.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zn8wht3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpscfu15si.d(22): Error: no property `length` for type `string`\n/tmp/tmpscfu15si.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscfu15si.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ovl2xox.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmp4ovl2xox.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ovl2xox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpej15ps6w.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmpej15ps6w.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej15ps6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len)\n    {\n        ret += s[i];\n        i++;\n        if (i % 2 == 0)\n        {\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpk0uxom6y.d(21): Error: no property `length` for type `string`\n/tmp/tmpk0uxom6y.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0uxom6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2 * (i % 2);\n        if(index > 25)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpy3j3md0z.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3j3md0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len) {\n        ret += s[i];\n        i++;\n        if (i % 2 == 0) {\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0hapbgt4.d(21): Error: no property `length` for type `string`\n/tmp/tmp0hapbgt4.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hapbgt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2;\n        if(index > 25)\n            index -= 26;\n        result += alphabet[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp5jq93o21.d(22): Error: no property `length` for type `string`\n/tmp/tmp5jq93o21.d(27): Error: undefined identifier `alphabet`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jq93o21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[(i + 2) % s.length()];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmplslw_9wh.d(22): Error: no property `length` for type `string`\n/tmp/tmplslw_9wh.d(24): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplslw_9wh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string res = \"\";\n    while (i < len)\n    {\n        res += s[i];\n        i++;\n        if (i % 2 == 0)\n        {\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcb9e07q6.d(21): Error: no property `length` for type `string`\n/tmp/tmpcb9e07q6.d(26): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcb9e07q6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i;\n    string ret = \"\";\n    for (i = 0; i < len; i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpoky6uumh.d(21): Error: no property `length` for type `string`\n/tmp/tmpoky6uumh.d(26): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoky6uumh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2;\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqjbw7yfr.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjbw7yfr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqfkx1ytc.d(22): Error: no property `length` for type `string`\n/tmp/tmpqfkx1ytc.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkx1ytc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index > 'z')\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp6iggnnm4.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6iggnnm4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            ret += (char)(((s[i] - 'a') + 2) % 26 + 'a');\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            ret += (char)(((s[i] - 'A') + 2) % 26 + 'A');\n        }\n        else\n        {\n            ret += s[i];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu3mmhev0.d(26): Error: C style cast illegal, use `cast(char)((s[i] - 'a' + 2) % 26 + 'a')`\n/tmp/tmpu3mmhev0.d(30): Error: C style cast illegal, use `cast(char)((s[i] - 'A' + 2) % 26 + 'A')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3mmhev0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmps8khytuw.d(22): Error: no property `length` for type `string`\n/tmp/tmps8khytuw.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8khytuw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[(i+2)%s.length()];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpwb5b9vdj.d(22): Error: no property `length` for type `string`\n/tmp/tmpwb5b9vdj.d(24): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb5b9vdj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index > 'z')\n            index -= 26;\n        ret += (char)(index + 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp746nmbjx.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp746nmbjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpscfu15si.d(22): Error: no property `length` for type `string`\n/tmp/tmpscfu15si.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscfu15si.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpusx3sjmg.d(21): Error: no property `length` for type `string`\n/tmp/tmpusx3sjmg.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpusx3sjmg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        index = index + 2 * (index / 2);\n        index = index % 26;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmptdgtw7ua.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmptdgtw7ua.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptdgtw7ua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2 * (i % 2);\n        if (index >= 26)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpww6kb7dg.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww6kb7dg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i];\n        ret += s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp2u90_s6f.d(21): Error: no property `length` for type `string`\n/tmp/tmp2u90_s6f.d(25): Error: slice `ret` is not mutable\n/tmp/tmp2u90_s6f.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u90_s6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        result += s[i];\n        i++;\n        i = i % len;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp86vyu1x_.d(21): Error: no property `length` for type `string`\n/tmp/tmp86vyu1x_.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86vyu1x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpidepxnmx.d(22): Error: no property `length` for type `string`\n/tmp/tmpidepxnmx.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidepxnmx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ovl2xox.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmp4ovl2xox.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ovl2xox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        res += s[(i+2)%len];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpexymzn4t.d(21): Error: no property `length` for type `string`\n/tmp/tmpexymzn4t.d(25): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexymzn4t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] + s[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcbd39qj3.d(22): Error: no property `length` for type `string`\n/tmp/tmpcbd39qj3.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbd39qj3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index >= 26)\n            index = index - 26;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpowinp9h6.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmpowinp9h6.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowinp9h6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = (index + 2) % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpi7exbp42.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7exbp42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpkiurmx50.d(22): Error: no property `length` for type `string`\n/tmp/tmpkiurmx50.d(24): Error: incompatible types for `(res) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkiurmx50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpidepxnmx.d(22): Error: no property `length` for type `string`\n/tmp/tmpidepxnmx.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidepxnmx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp5ag3ptoe.d(21): Error: no property `length` for type `string`\n/tmp/tmp5ag3ptoe.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ag3ptoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpmxmrl8en.d(25): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxmrl8en.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i];\n        ret += s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp2u90_s6f.d(21): Error: no property `length` for type `string`\n/tmp/tmp2u90_s6f.d(25): Error: slice `ret` is not mutable\n/tmp/tmp2u90_s6f.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u90_s6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string out = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        out += s[(i + 2) % len];\n    }\n    return out;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpvp7_5jic.d(22): Error: found `out` when expecting `;` following statement\n/tmp/tmpvp7_5jic.d(22): Error: found `=` instead of statement\n/tmp/tmpvp7_5jic.d(25): Error: found `out` instead of statement\n/tmp/tmpvp7_5jic.d(27): Error: expression expected, not `out`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp7_5jic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string res = \"\";\n    while(i < len)\n    {\n        res += s[i];\n        i++;\n        i = i % len;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpck05_826.d(21): Error: no property `length` for type `string`\n/tmp/tmpck05_826.d(26): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck05_826.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpdxwecqri.d(22): Error: no property `length` for type `string`\n/tmp/tmpdxwecqri.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxwecqri.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len)\n    {\n        ret += s[i];\n        i++;\n        if (i % 2 == 0)\n        {\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpk0uxom6y.d(21): Error: no property `length` for type `string`\n/tmp/tmpk0uxom6y.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0uxom6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + 2;\n        if(index > 25)\n            index = index - 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsus7k2dv.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsus7k2dv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if (index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp2zn8wht3.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp2zn8wht3.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zn8wht3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[(i+2)%len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpeedl2zz8.d(21): Error: no property `length` for type `string`\n/tmp/tmpeedl2zz8.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeedl2zz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg3b_7am1.d(22): Error: no property `length` for type `string`\n/tmp/tmpg3b_7am1.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3b_7am1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while(i < len)\n    {\n        ret += s[i];\n        i++;\n        i = i % len;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpfrvu715w.d(21): Error: no property `length` for type `string`\n/tmp/tmpfrvu715w.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrvu715w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp60la625p.d(22): Error: no property `length` for type `string`\n/tmp/tmp60la625p.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60la625p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] + s[(i+2)%len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpnnzkesmm.d(21): Error: no property `length` for type `string`\n/tmp/tmpnnzkesmm.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)((i + 2) % len)])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnnzkesmm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    int j = len - 1;\n    string result = \"\";\n    while (i < len)\n    {\n        result += s[i];\n        i++;\n        j--;\n        if (i == len)\n        {\n            result += s[j];\n        }\n        else\n        {\n            result += s[j];\n        }\n        i++;\n        j--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg49u8xpk.d(21): Error: no property `length` for type `string`\n/tmp/tmpg49u8xpk.d(27): Error: slice `result` is not mutable\n/tmp/tmpg49u8xpk.d(32): Error: slice `result` is not mutable\n/tmp/tmpg49u8xpk.d(36): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg49u8xpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpu81gtguj.d(22): Error: no property `length` for type `string`\n/tmp/tmpu81gtguj.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu81gtguj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        int index = (s[i] - 'a') + 2 * (s[i] - 'a');\n        if (index >= 26) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp5zj5nkqq.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zj5nkqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)(s[i] - 'a');\n        index = (index + 2) % 26;\n        res += (char)(index + 'a');\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg05f1yre.d(25): Error: C style cast illegal, use `cast(int)(s[i] - 'a')`\n/tmp/tmpg05f1yre.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg05f1yre.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        if(index == -1)\n            index = alphabet.length() - 1;\n        encrypted += alphabet[(index + 2) % alphabet.length()];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpqgcuoz0g.d(23): Error: no property `length` for type `string`\n/tmp/tmpqgcuoz0g.d(25): Error: no property `find` for type `string`\n/tmp/tmpqgcuoz0g.d(27): Error: no property `length` for type `string`\n/tmp/tmpqgcuoz0g.d(28): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgcuoz0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    int j = len - 1;\n    string result = \"\";\n    while (i < len)\n    {\n        result += s[i];\n        i++;\n        j--;\n        if (i == len)\n            break;\n        if (j == -1)\n            j = len - 1;\n        result += s[j];\n        j--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp5hk2l1no.d(21): Error: no property `length` for type `string`\n/tmp/tmp5hk2l1no.d(27): Error: slice `result` is not mutable\n/tmp/tmp5hk2l1no.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hk2l1no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len) {\n        ret += s[i];\n        i++;\n        if (i % 2 == 0) {\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0hapbgt4.d(21): Error: no property `length` for type `string`\n/tmp/tmp0hapbgt4.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hapbgt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] + s[(i+2)%len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpnnzkesmm.d(21): Error: no property `length` for type `string`\n/tmp/tmpnnzkesmm.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)((i + 2) % len)])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnnzkesmm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpdxwecqri.d(22): Error: no property `length` for type `string`\n/tmp/tmpdxwecqri.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxwecqri.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        index = index % 26;\n        index = index + 2;\n        index = index % 26;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpvv9_ox4r.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpvv9_ox4r.d(29): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvv9_ox4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp60la625p.d(22): Error: no property `length` for type `string`\n/tmp/tmp60la625p.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60la625p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ovl2xox.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmp4ovl2xox.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ovl2xox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp0ltser_0.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp0ltser_0.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ltser_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmprdg2dtkm.d(22): Error: no property `length` for type `string`\n/tmp/tmprdg2dtkm.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdg2dtkm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        result += s[(i + 2) % len];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpprslnei0.d(21): Error: no property `length` for type `string`\n/tmp/tmpprslnei0.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprslnei0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpscfu15si.d(22): Error: no property `length` for type `string`\n/tmp/tmpscfu15si.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscfu15si.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = alphabet.index(c);\n        index = (index + 2) % alphabet.length();\n        result += alphabet[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp643pab_b.d(22): Error: no property `length` for type `string`\n/tmp/tmp643pab_b.d(25): Error: undefined identifier `alphabet`\n/tmp/tmp643pab_b.d(26): Error: undefined identifier `alphabet`\n/tmp/tmp643pab_b.d(27): Error: undefined identifier `alphabet`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp643pab_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg3b_7am1.d(22): Error: no property `length` for type `string`\n/tmp/tmpg3b_7am1.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3b_7am1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i];\n        if(i % 2 == 0)\n            ret += s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpp443sly5.d(21): Error: no property `length` for type `string`\n/tmp/tmpp443sly5.d(25): Error: slice `ret` is not mutable\n/tmp/tmpp443sly5.d(27): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp443sly5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpcoms2b6b.d(22): Error: no property `length` for type `string`\n/tmp/tmpcoms2b6b.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoms2b6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        index = (index + 2) % alphabet.length();\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp4ou5qvqq.d(23): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(25): Error: no property `find` for type `string`\n/tmp/tmp4ou5qvqq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4ou5qvqq.d(27): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ou5qvqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp5ag3ptoe.d(21): Error: no property `length` for type `string`\n/tmp/tmp5ag3ptoe.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ag3ptoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while(i < len)\n    {\n        ret += s[i];\n        i++;\n        if(i % 2 == 0)\n        {\n            ret += s[i];\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp572od6g3.d(21): Error: no property `length` for type `string`\n/tmp/tmp572od6g3.d(26): Error: slice `ret` is not mutable\n/tmp/tmp572od6g3.d(30): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp572od6g3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if (index < 0)\n            index = 26 + index;\n        else\n            index = index % 26;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmph8umsgjv.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmph8umsgjv.d(30): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8umsgjv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp60la625p.d(22): Error: no property `length` for type `string`\n/tmp/tmp60la625p.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97 + 1))`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60la625p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') % 26;\n        ret += s[index];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp8wxmzxuv.d(21): Error: no property `length` for type `string`\n/tmp/tmp8wxmzxuv.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wxmzxuv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i] + s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp8m6uvzsu.d(21): Error: no property `length` for type `string`\n/tmp/tmp8m6uvzsu.d(25): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m6uvzsu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        if(index == -1)\n        {\n            encrypted += s[i];\n        }\n        else\n        {\n            encrypted += alphabet[(index + 2) % 26];\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpvy018woc.d(23): Error: no property `length` for type `string`\n/tmp/tmpvy018woc.d(25): Error: no property `find` for type `string`\n/tmp/tmpvy018woc.d(28): Error: slice `encrypted` is not mutable\n/tmp/tmpvy018woc.d(32): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy018woc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpbnn6q7u3.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpbnn6q7u3.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnn6q7u3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = alphabet.find(s[i]);\n        if(index == -1)\n        {\n            index = alphabet.find(s[i]);\n        }\n        encrypted += alphabet[(index + 2) % 26];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmppm3wwcuw.d(23): Error: no property `length` for type `string`\n/tmp/tmppm3wwcuw.d(25): Error: no property `find` for type `string`\n/tmp/tmppm3wwcuw.d(28): Error: no property `find` for type `string`\n/tmp/tmppm3wwcuw.d(30): Error: slice `encrypted` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm3wwcuw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string out = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        out += s[i] - 2 * (s[i] - 'a');\n    }\n    return out;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp86n2dt0g.d(22): Error: found `out` when expecting `;` following statement\n/tmp/tmp86n2dt0g.d(22): Error: found `=` instead of statement\n/tmp/tmp86n2dt0g.d(25): Error: found `out` instead of statement\n/tmp/tmp86n2dt0g.d(27): Error: expression expected, not `out`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86n2dt0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2 * (s[i] - 'a');\n        if(index > 25)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp461d18xw.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp461d18xw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index > 'z')\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp6iggnnm4.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6iggnnm4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        result += s[i] + s[i] + s[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpkc6vcib7.d(22): Error: no property `length` for type `string`\n/tmp/tmpkc6vcib7.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkc6vcib7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292976,
      "stdout": "",
      "stderr": "/tmp/tmpwgzrxaki.d(22): Error: no property `length` for type `string`\n/tmp/tmpwgzrxaki.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwgzrxaki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (s[i] - 'a') + 2 * (i % 2);\n        if(index >= 26)\n            index -= 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpoa9zoqap.d(27): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoa9zoqap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg3b_7am1.d(22): Error: no property `length` for type `string`\n/tmp/tmpg3b_7am1.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3b_7am1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpsafn03e1.d(24): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmpsafn03e1.d(27): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsafn03e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string res = \"\";\n    while(i < len)\n    {\n        res += s[i];\n        i++;\n        i = i % len;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpck05_826.d(21): Error: no property `length` for type `string`\n/tmp/tmpck05_826.d(26): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck05_826.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        ret += s[i] + s[i] + s[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292976,
      "stdout": "",
      "stderr": "/tmp/tmpwgzrxaki.d(22): Error: no property `length` for type `string`\n/tmp/tmpwgzrxaki.d(24): Error: incompatible types for `(ret) += (cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i] + cast(int)s[cast(ulong)i])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwgzrxaki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[(i+2)%len];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpeedl2zz8.d(21): Error: no property `length` for type `string`\n/tmp/tmpeedl2zz8.d(25): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeedl2zz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int index = (int)c - 97;\n        if (index < 0)\n            index = 26 + index;\n        result += (char)(index + 97);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp43cv2da6.d(25): Error: C style cast illegal, use `cast(int)c`\n/tmp/tmp43cv2da6.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43cv2da6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpg3b_7am1.d(22): Error: no property `length` for type `string`\n/tmp/tmpg3b_7am1.d(24): Error: incompatible types for `(result) += (cast(int)s[cast(ulong)i] - 2 * (cast(int)s[cast(ulong)i] - 97) + 97)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3b_7am1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int index = s[i] - 'a';\n        index = (index + 2) % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpi7exbp42.d(26): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7exbp42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    int i = 0;\n    string ret = \"\";\n    while (i < len)\n    {\n        ret += s[i];\n        i++;\n        if (i % 2 == 0)\n        {\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmpk0uxom6y.d(21): Error: no property `length` for type `string`\n/tmp/tmpk0uxom6y.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0uxom6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        ret += s[i];\n        ret += s[i+2];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292976,
      "stdout": "",
      "stderr": "/tmp/tmp7nwbbu2o.d(21): Error: no property `length` for type `string`\n/tmp/tmp7nwbbu2o.d(25): Error: slice `ret` is not mutable\n/tmp/tmp7nwbbu2o.d(26): Error: slice `ret` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nwbbu2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (s[i] - 'a') + (26 * 2);\n        if(index > 'z')\n            index -= 26;\n        ret += (char)(index + 'a');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp746nmbjx.d(28): Error: C style cast illegal, use `cast(char)(index + 'a')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp746nmbjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length();\n    string ret = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        int index = (int)s[i] - 97;\n        if(index < 0)\n            index = 26 + index;\n        ret += (char)(index + 97);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "/tmp/tmp2utqpgfv.d(25): Error: C style cast illegal, use `cast(int)s[i]`\n/tmp/tmp2utqpgfv.d(28): Error: C style cast illegal, use `cast(char)(index + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2utqpgfv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}