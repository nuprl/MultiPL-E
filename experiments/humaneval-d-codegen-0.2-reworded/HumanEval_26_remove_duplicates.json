{
  "name": "HumanEval_26_remove_duplicates",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n",
  "tests": "unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
  "completions": [
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n\tint len = numbers.length;\n\tlong[] result = new long[len];\n\tint j = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (j < i) {\n\t\t\tif (numbers[i] == numbers[j]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tresult[j] = numbers[i];\n\t\tj++;\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, count;\n    long[] result = new long[numbers.length];\n    for (i = 0, count = 0; i < numbers.length; i++) {\n        for (j = 0; j < count; j++) {\n            if (numbers[i] == result[j]) {\n                break;\n            }\n        }\n        if (j == count) {\n            result[count++] = numbers[i];\n        }\n    }\n    return result;\n}",
    "{\n    int len = numbers.length;\n    long[] result = new long[len];\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        result[j++] = numbers[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, count;\n    long temp;\n    long[] result = new long[numbers.length];\n    for (i = 0, count = 0; i < numbers.length; i++) {\n        temp = numbers[i];\n        for (j = i + 1; j < numbers.length; j++) {\n            if (temp == numbers[j]) {\n                count++;\n                break;\n            }\n        }\n        if (count == 0) {\n            result[count] = temp;\n            count++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number: numbers)\n    {\n        if(i == 0 || number != result[i-1])\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] output = new long[numbers.length];\n\tint index = 0;\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] != numbers[index]) {\n\t\t\toutput[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn output;\n}",
    "{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[i] = -1;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] != -1) {\n            result[i] = numbers[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (j < i && numbers[i] == numbers[j]) {\n            continue;\n        }\n        result[i] = numbers[i];\n        j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i == 0 || n != result[i - 1]) {\n\t\t\tresult[i++] = n;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        if (i < j) {\n            while (i < j && numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[j];\n        i++;\n    }\n    return result;\n}",
    "{\n\tint i, j, k;\n\tlong[] result = new long[numbers.length];\n\tfor (i = 0; i < numbers.length; i++) {\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (j < numbers.length && numbers[j] == numbers[i]) {\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t\tresult[i] = numbers[i];\n\t\tif (k > 0) {\n\t\t\tfor (int l = i + 1; l < i + k; l++) {\n\t\t\t\tresult[l] = numbers[l + k];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(int j = 0; j < numbers.length; j++)\n\t{\n\t\tif(numbers[j] != result[i])\n\t\t{\n\t\t\tresult[i] = numbers[j];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i - 1]) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                break;\n            }\n        }\n        if (j == numbers.length) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i < result.length && result[i] == number)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long num : numbers) {\n        if(i < numbers.length && num == numbers[i]) {\n            i++;\n        } else {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int len = numbers.length;\n    int i = 0;\n    long[] result = new long[len];\n    for (int j = 0; j < len; j++) {\n        if (i < j) {\n            if (numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[j];\n        i++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    int len = numbers.length;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < len - 1; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (result[i] == result[j]) {\n                for (k = j; k < len - 1; k++) {\n                    result[k] = result[k + 1];\n                }\n                len--;\n                j--;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i++] = number;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j, count;\n    long[] result = new long[numbers.length];\n    for (i = 0, count = 0; i < numbers.length; i++) {\n        for (j = 0; j < count; j++) {\n            if (numbers[i] == result[j]) {\n                break;\n            }\n        }\n        if (j == count) {\n            result[count++] = numbers[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] output = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++) {\n        if(numbers[i] != numbers[index]) {\n            output[index] = numbers[i];\n            index++;\n        }\n    }\n    return output;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = numbers[i];\n    }\n    return result;\n}",
    "{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = 0;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] != 0) {\n            result[i] = numbers[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = 0;\n    }\n    return result;\n}",
    "{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    long[] result = new long[len];\n    while (i < len) {\n        if (j < i) {\n            while (j < i && numbers[j] == numbers[i]) {\n                j++;\n            }\n        }\n        result[i] = numbers[i];\n        i++;\n    }\n    return result;\n}",
    "{\n    int i, j, n = numbers.length;\n    long[] result = new long[n];\n    for (i = 0; i < n; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = numbers[j];\n                n--;\n                j--;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < numbers.length && n == numbers[i]) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = numbers[i];\n    }\n    return result;\n}",
    "{\n    int i, j, k;\n    long[] new_numbers = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (new_numbers[i] == new_numbers[j]) {\n                for (k = j; k < numbers.length - 1; k++) {\n                    new_numbers[k] = numbers[k + 1];\n                }\n                numbers.length--;\n                j--;\n            }\n        }\n    }\n    return new_numbers;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        if (i < j) {\n            if (numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[j];\n        i++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers)\n    {\n        if (i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (j < i && numbers[i] == numbers[j]) {\n            continue;\n        }\n        result[j++] = numbers[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            if(result[i] == n)\n                i++;\n            else\n                result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long n : numbers)\n\t{\n\t\tif(i < result.length)\n\t\t{\n\t\t\tif(result[i] == n)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[i] = n;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    int i, j, count;\n    long temp;\n    \n    for (i = 0; i < numbers.length; i++) {\n        count = 0;\n        for (j = 0; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            for (j = i; j < numbers.length - 1; j++) {\n                temp = numbers[j + 1];\n                numbers[j + 1] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    return numbers;\n}",
    "{\n\tint i, j, n = numbers.length;\n\tlong[] result = new long[n];\n\tfor (i = 0; i < n; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t\tif (result[i] == result[j]) {\n\t\t\t\tresult[j] = -1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tif (result[i] > 0) {\n\t\t\tresult[i] = result[i] - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers) {\n        if(i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i++] = number;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i < result.length && result[i] == n) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i-1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            if (result[i] != n) {\n                result[i] = n;\n                i++;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for(int i = index; i < result.length; i++)\n    {\n        result[i] = numbers[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int len = numbers.length;\n    long[] new_numbers = new long[len];\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        new_numbers[j] = numbers[i];\n        j++;\n    }\n    return new_numbers;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < numbers.length && n == numbers[i]) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && number == result[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (int j = 0; j < numbers.length; j++) {\n\t\tif (i < j) {\n\t\t\tif (numbers[i] == numbers[j]) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult[i] = numbers[j];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i == 0 || n != result[i - 1]) {\n\t\t\tresult[i++] = n;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number: numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tint i, j, n = numbers.length;\n\tlong[] result = new long[n];\n\tfor (i = 0; i < n; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tif (result[i] == result[i - 1]) {\n\t\t\tfor (j = i; j < n - 1; j++) {\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t}\n\t\t\tn--;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers) {\n        if(i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i < numbers.length && number == numbers[i])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for(int i = index; i < result.length; i++)\n    {\n        result[i] = numbers[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i-1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = numbers[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (numbers[i] != numbers[j]) {\n            numbers[++j] = numbers[i];\n        }\n        i++;\n    }\n    return numbers;\n}",
    "{\n    int i, j, n = numbers.length;\n    long[] result = new long[n];\n    for (i = 0; i < n; i++) {\n        result[i] = numbers[i];\n        for (j = i + 1; j < n; j++) {\n            if (numbers[i] == numbers[j]) {\n                numbers[j] = -1;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (numbers[i] > 0) {\n            result[i] = numbers[i];\n        }\n    }\n    return result;\n}",
    "{\n\tint i, j, k;\n\tint len = numbers.length;\n\tint[] count = new int[len];\n\tfor (i = 0; i < len; i++)\n\t\tcount[i] = 0;\n\tfor (i = 0; i < len; i++)\n\t\tcount[numbers[i] - 1]++;\n\tfor (i = 0, j = 0; i < len; i++)\n\t\tif (count[i] == 1)\n\t\t\tnumbers[j++] = numbers[i];\n\treturn numbers;\n}",
    "{\n    int len = numbers.length;\n    long[] result = new long[len];\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        result[j] = numbers[i];\n        j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && numbers[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i++] = number;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor(int i = 0; i < numbers.length; i++)\n\t{\n\t\tif(numbers[i] != numbers[index])\n\t\t{\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    long[] result = new long[len];\n    while (i < len) {\n        if (j < i) {\n            while (j < i && numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[i];\n        i++;\n        j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] != numbers[index]) {\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor (int i = index; i < numbers.length; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers)\n\t{\n\t\tif (i < result.length && result[i] == n)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i == 0 || number != result[i-1])\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long num : numbers)\n    {\n        if(i < numbers.length && num == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i - 1]) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0)\n        {\n            result[i] = n;\n            i++;\n        }\n        else if(n != result[i-1])\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tint i, j;\n\tint len = numbers.length;\n\tlong[] result = new long[len];\n\tfor (i = 0; i < len; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tfor (j = i + 1; j < len; j++) {\n\t\t\tif (result[i] == result[j]) {\n\t\t\t\tresult[j] = -1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (result[i] > 0) {\n\t\t\tresult[i] = result[i] - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long num : numbers)\n    {\n        if(i == 0)\n        {\n            result[i] = num;\n            i++;\n        }\n        else if(num != result[i-1])\n        {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers)\n\t{\n\t\tif (i < result.length && result[i] == n)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] != numbers[index]) {\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor (int i = index; i < result.length; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\treturn result;\n}",
    "{\n    long[] output = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && numbers[i] == number)\n        {\n            i++;\n        }\n        else\n        {\n            output[i] = number;\n            i++;\n        }\n    }\n    return output;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i - 1]) {\n            result[i++] = number;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            if(result[i] == n)\n            {\n                i++;\n            }\n            else\n            {\n                result[i] = n;\n                i++;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            if(n != result[i])\n            {\n                result[i] = n;\n                i++;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long num : numbers) {\n        if (i == 0 || num != result[i-1]) {\n            result[i++] = num;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != result[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long num : numbers) {\n        if (i < result.length && result[i] == num) {\n            i++;\n        } else {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long n : numbers)\n\t{\n\t\tif(i < result.length)\n\t\t{\n\t\t\tif(n != result[i])\n\t\t\t{\n\t\t\t\tresult[i] = n;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    long[] result = new long[len];\n    while (i < len) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                i++;\n            } else {\n                result[result.length - 1] = numbers[j];\n                j++;\n            }\n        } else {\n            result[result.length - 1] = numbers[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length)\n        {\n            if(number != result[i])\n            {\n                result[i] = number;\n                i++;\n            }\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i == 0 || number != result[i-1])\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && numbers[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i-1]) {\n            result[i++] = number;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor(int i = 0; i < numbers.length; i++)\n\t{\n\t\tif(numbers[i] != numbers[index])\n\t\t{\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor(int i = index; i < result.length; i++)\n\t{\n\t\tresult[i] = numbers[i];\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i == 0 || number != result[i-1])\n            result[i++] = number;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && number == result[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length - 1; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = -1;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] > 0) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long num : numbers) {\n        if (i < result.length && result[i] == num) {\n            i++;\n        } else {\n            result[i++] = num;\n        }\n    }\n    return result;\n}",
    "{\n    int i = 0;\n    int j = 0;\n    int len = numbers.length;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        result[i] = numbers[i];\n        j++;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length - 1; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = -1;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] > 0) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && numbers[i] == number)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers) {\n        if(i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i < numbers.length && numbers[i] == number)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for(int i = index; i < result.length; i++)\n    {\n        result[i] = numbers[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i < numbers.length && n == numbers[i]) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n            result[i++] = n;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] output = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            output[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < output.length; i++) {\n        output[i] = numbers[i];\n    }\n    return output;\n}",
    "{\n    long[] output = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (j < i && numbers[i] == numbers[j]) {\n            continue;\n        }\n        output[j] = numbers[i];\n        j++;\n    }\n    return output;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i == 0)\n        {\n            result[i] = number;\n            i++;\n        }\n        else if(number != result[i-1])\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && numbers[i] == number)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}