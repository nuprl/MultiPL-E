{
  "name": "HumanEval_147_get_max_triples",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n",
  "tests": "unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpowwi2ctb.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpowwi2ctb.__unittest_L37_C1() [0x427ae0]\n??:? void tmpowwi2ctb.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp8apc6hcd.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp8apc6hcd.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8apc6hcd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpkg2i2g3m.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkg2i2g3m.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkg2i2g3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpi_0jn24f.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpi_0jn24f.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_0jn24f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    long sum;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                sum = i * i - i + 1;\n                sum += j * j - j + 1;\n                sum += k * k - k + 1;\n                if (sum % 3 == 0) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i < n; i++) {\n        for(j = i + 1; j < n; j++) {\n            for(k = j + 1; k < n; k++) {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2e5s9miu.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp2e5s9miu.__unittest_L33_C1() [0x427ae0]\n??:? void tmp2e5s9miu.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp2bmn69iu.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp2bmn69iu.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bmn69iu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpanvdd3f8.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpanvdd3f8.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanvdd3f8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long max = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        sum[i] = a[i];\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(sum[i] + sum[j] + sum[k] == 3 * n)\n                    max = max > 3 ? max : 3;\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmprjiheg2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmprjiheg2e.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmprjiheg2e.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmprjiheg2e.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjiheg2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        a[i-1] = i*i - i + 1;\n        sum += a[i-1];\n    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n            for(long k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n                {\n                    max = max > a[i] + a[j] + a[k] ? max : a[i] + a[j] + a[k];\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp78alxni1.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp78alxni1.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78alxni1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long result = 0;\n    for (long i = 0; i < n - 1; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp9ngqjexs.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp9ngqjexs.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ngqjexs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long max = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp7p5a815w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7p5a815w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7p5a815w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp524jqurz.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp524jqurz.__unittest_L33_C1() [0x427ae0]\n??:? void tmp524jqurz.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoy1f92wl.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpoy1f92wl.__unittest_L37_C1() [0x427ae0]\n??:? void tmpoy1f92wl.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, sum, max_triples = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                sum = a[i] + a[j] + a[k];\n                if(sum % 3 == 0)\n                    max_triples++;\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvtv6mjua.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvtv6mjua.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtv6mjua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n        {\n            for(k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpzjh6c93z.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzjh6c93z.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjh6c93z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    long i, j, k;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n                    max = max > (i - j) * (j - k) * (k - i) ? max : (i - j) * (j - k) * (k - i);\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp8qvryf9y.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp8qvryf9y.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qvryf9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i-1] = i*i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpfpn_vwl6.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpfpn_vwl6.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpn_vwl6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpsc_r92bk.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpsc_r92bk.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc_r92bk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > sum)\n                    sum = a[i] + a[j] + a[k];\n    return sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpmdaajlcg.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpmdaajlcg.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdaajlcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpj71m16u3.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpj71m16u3.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj71m16u3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpa3_5q7p3.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa3_5q7p3.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3_5q7p3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwvfdohot.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwvfdohot.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvfdohot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long max = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum[i] = a[i];\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * sum[i] + 3 * sum[j] + 3 * sum[k])\n                {\n                    max = max > 3 ? max : 3;\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp3zc6ewaw.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp3zc6ewaw.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmp3zc6ewaw.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmp3zc6ewaw.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zc6ewaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 1; i <= n-1; i++)\n        for(j = i+1; j <= n; j++)\n            for(k = j+1; k <= n; k++)\n                if(a[i-1] + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpoeqfxcpf.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpoeqfxcpf.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoeqfxcpf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    \n    long result = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp2zccsvb5.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp2zccsvb5.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zccsvb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpkg2i2g3m.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkg2i2g3m.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkg2i2g3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j == k * k + i * i + j * j) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz417qa62.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpz417qa62.__unittest_L33_C1() [0x427acc]\n??:? void tmpz417qa62.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpxrepk2xm.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpxrepk2xm.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrepk2xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n        {\n            for(k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpzjh6c93z.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzjh6c93z.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjh6c93z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7ni0hbbu.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7ni0hbbu.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ni0hbbu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7og23o9e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7og23o9e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7og23o9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpsc_r92bk.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpsc_r92bk.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc_r92bk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpppmzftpe.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpppmzftpe.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpppmzftpe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && i * i - i + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0v3ckhi.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpi0v3ckhi.__unittest_L33_C1() [0x427ae0]\n??:? void tmpi0v3ckhi.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0qd2gkv7.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp0qd2gkv7.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qd2gkv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max++;\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1h8ej44f.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp1h8ej44f.__unittest_L33_C1() [0x427ae0]\n??:? void tmp1h8ej44f.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, sum, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                sum = a[i] + a[j] + a[k];\n                if(sum % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpsl1hhbf_.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpsl1hhbf_.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl1hhbf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpazbfifeu.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpazbfifeu.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazbfifeu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp58q6wze0.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp58q6wze0.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58q6wze0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpanvdd3f8.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpanvdd3f8.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanvdd3f8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmprczhwala.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmprczhwala.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprczhwala.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpxq5sp0up.d(22): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpxq5sp0up.d(22): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxq5sp0up.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * i * j * k) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaiz2uo1y.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpaiz2uo1y.__unittest_L33_C1() [0x427b01]\n??:? void tmpaiz2uo1y.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long i, j, k;\n    for(i = 1; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                    if(i + j + k == 3 * n)\n                    {\n                        max++;\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptfjmjxa9.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmptfjmjxa9.__unittest_L40_C1() [0x427b00]\n??:? void tmptfjmjxa9.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long i, j, k;\n    long sum;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                sum = i * i - i + 1;\n                sum += j * j - j + 1;\n                sum += k * k - k + 1;\n                if (sum % 3 == 0) {\n                    max = std.math.max(max, 1);\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp2nk6kj3k.d(30): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nk6kj3k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpfw74zqg4.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpfw74zqg4.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw74zqg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (i * i + j * j + k * k == 3 * n) {\n                    max++;\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb_o3uzl.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpsb_o3uzl.__unittest_L33_C1() [0x427ad4]\n??:? void tmpsb_o3uzl.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for (long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (long i = 0; i < n; i++)\n        for (long j = i + 1; j < n; j++)\n            for (long k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp0txb3q5v.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp0txb3q5v.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0txb3q5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpfw74zqg4.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpfw74zqg4.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw74zqg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum[i] = 0;\n    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * sum[i] + 3 * sum[j] + 3 * sum[k])\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpdqqw4clv.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpdqqw4clv.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmpdqqw4clv.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmpdqqw4clv.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqqw4clv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprss9crlb.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmprss9crlb.__unittest_L33_C1() [0x427ae0]\n??:? void tmprss9crlb.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max++;\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj7rktlkc.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpj7rktlkc.__unittest_L33_C1() [0x427af9]\n??:? void tmpj7rktlkc.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpowwi2ctb.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpowwi2ctb.__unittest_L37_C1() [0x427ae0]\n??:? void tmpowwi2ctb.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7j0hbctz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7j0hbctz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7j0hbctz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwi_7bmf_.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwi_7bmf_.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwi_7bmf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpbcjf19w1.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpbcjf19w1.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcjf19w1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp8apc6hcd.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp8apc6hcd.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8apc6hcd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7j0hbctz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7j0hbctz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7j0hbctz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwvfdohot.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwvfdohot.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvfdohot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkwif2r4l.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkwif2r4l.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwif2r4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp4dpj65t5.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp4dpj65t5.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dpj65t5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5i5kjv9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpl5i5kjv9.__unittest_L33_C1() [0x427af9]\n??:? void tmpl5i5kjv9.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpbseifu45.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpbseifu45.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbseifu45.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpzrge930m.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzrge930m.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrge930m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i-1] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpc8h75mu6.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpc8h75mu6.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8h75mu6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i * i - i + 1;\n    for(i = 1; i <= n - 2; i++)\n        for(j = i + 1; j <= n - 1; j++)\n            for(k = j + 1; k <= n; k++)\n                if(a[i-1] + a[j-1] + a[k-1] == 3 * (a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpmfcxu37f.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpmfcxu37f.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfcxu37f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        a[i-1] = i*i - i + 1;\n    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n            for(long k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]))\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpq83yauxl.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpq83yauxl.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq83yauxl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp58q6wze0.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp58q6wze0.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58q6wze0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && i < j && j < k)\n                    sum++;\n    return sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp1er78jep.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp1er78jep.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1er78jep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]))\n                    max++;\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp_kn2slwp.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp_kn2slwp.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kn2slwp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmposdkjf3v.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmposdkjf3v.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposdkjf3v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7ylkii4l.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7ylkii4l.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ylkii4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long max = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    max++;\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp2bkpvh3i.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp2bkpvh3i.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bkpvh3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long max_triples = 0;\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum[i] = 0;\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * sum[i] + 3 * sum[j] + 3 * sum[k])\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwqz551u0.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwqz551u0.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmpwqz551u0.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmpwqz551u0.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqz551u0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpa6lqgenb.d(22): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa6lqgenb.d(22): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6lqgenb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7og23o9e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7og23o9e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7og23o9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7r8k2yj1.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7r8k2yj1.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r8k2yj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long result = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkfenolcg.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkfenolcg.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfenolcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpkg2i2g3m.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkg2i2g3m.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkg2i2g3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n - 1; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpzo45asbb.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzo45asbb.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzo45asbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7og23o9e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7og23o9e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7og23o9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkfb9ythl.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkfb9ythl.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfb9ythl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp8a2nmlay.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp8a2nmlay.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8a2nmlay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpb1rkq_wz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpb1rkq_wz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1rkq_wz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && i * i - i + 1 == k * k - k + 1)\n                {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpycxequ8d.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpycxequ8d.__unittest_L37_C1() [0x427ae0]\n??:? void tmpycxequ8d.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n                    max = std.math.max(max, a[i] * a[j] * a[k]);\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7eanna8_.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7eanna8_.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmp7eanna8_.d(31): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7eanna8_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkfb9ythl.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkfb9ythl.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfb9ythl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmps5h40dbn.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmps5h40dbn.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5h40dbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum = 0;\n    long count = 0;\n    while(i < n)\n    {\n        j = i + 1;\n        while(j < n)\n        {\n            k = j + 1;\n            while(k < n)\n            {\n                sum = i * i - i + 1;\n                sum += j * j - j + 1;\n                sum += k * k - k + 1;\n                if(sum % 3 == 0)\n                {\n                    count++;\n                }\n                k++;\n            }\n            j++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3_3jeupf.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmp3_3jeupf.__unittest_L49_C1() [0x427af4]\n??:? void tmp3_3jeupf.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 1; i <= n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 1; i <= n; i++)\n        for(j = i + 1; j <= n; j++)\n            for(k = j + 1; k <= n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpanpulk63.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpanpulk63.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanpulk63.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * i * j * k) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaiz2uo1y.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpaiz2uo1y.__unittest_L33_C1() [0x427b01]\n??:? void tmpaiz2uo1y.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i-1] = i*i - i + 1;\n    }\n    for (i = 1; i <= n-2; i++) {\n        for (j = i+1; j <= n-1; j++) {\n            for (k = j+1; k <= n; k++) {\n                if (a[i-1] + a[j-1] + a[k-1] == 3 * (a[i-1] + a[j-1] + a[k-1])) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmprghzdib4.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmprghzdib4.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprghzdib4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n                    max = std.math.max(max, a[i] * a[j] * a[k]);\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpmj7dd1z7.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpmj7dd1z7.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmpmj7dd1z7.d(31): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj7dd1z7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max) {\n                    max = a[i] + a[j] + a[k];\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpf5yjsehy.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpf5yjsehy.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5yjsehy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * i * j * k) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaiz2uo1y.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpaiz2uo1y.__unittest_L33_C1() [0x427b01]\n??:? void tmpaiz2uo1y.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpb1rkq_wz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpb1rkq_wz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1rkq_wz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long result = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpmso19mbm.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpmso19mbm.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmso19mbm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmp2bmn69iu.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp2bmn69iu.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bmn69iu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpa6lqgenb.d(22): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa6lqgenb.d(22): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6lqgenb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprss9crlb.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmprss9crlb.__unittest_L33_C1() [0x427ae0]\n??:? void tmprss9crlb.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i+1; j < n; j++)\n            for(k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp9li9igeg.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp9li9igeg.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9li9igeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpanvdd3f8.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpanvdd3f8.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanvdd3f8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpp7pwfgcl.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpp7pwfgcl.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7pwfgcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp1bxc_yr4.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp1bxc_yr4.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxc_yr4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++)\n        a[i-1] = i * i - i + 1;\n    for (i = 1; i <= n - 2; i++)\n        for (j = i + 1; j <= n - 1; j++)\n            for (k = j + 1; k <= n; k++)\n                if (a[i-1] + a[j-1] + a[k-1] == 3 * (a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpsfu75mlv.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpsfu75mlv.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfu75mlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpa3_5q7p3.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa3_5q7p3.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3_5q7p3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpl7qhqtuj.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpl7qhqtuj.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7qhqtuj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp524jqurz.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp524jqurz.__unittest_L33_C1() [0x427ae0]\n??:? void tmp524jqurz.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && i * i - i + 1 == k * k - k + 1)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprftv_itb.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmprftv_itb.__unittest_L37_C1() [0x427ae0]\n??:? void tmprftv_itb.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpi_0jn24f.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpi_0jn24f.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_0jn24f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i+1; j <= n; j++)\n        {\n            for(k = j+1; k <= n; k++)\n            {\n                if(a[i-1] + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp63y07pjh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp63y07pjh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp63y07pjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n - 1; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp5hr6q5_b.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp5hr6q5_b.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hr6q5_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo20pqf6.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpfo20pqf6.__unittest_L33_C1() [0x427ae0]\n??:? void tmpfo20pqf6.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 1; i <= n-2; i++)\n        for(j = i+1; j <= n-1; j++)\n            for(k = j+1; k <= n; k++)\n                if(a[i-1] + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpzrgzaosy.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzrgzaosy.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrgzaosy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp524jqurz.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp524jqurz.__unittest_L33_C1() [0x427ae0]\n??:? void tmp524jqurz.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i+1; j < n; j++)\n            for(k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpqqnjorvj.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpqqnjorvj.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqnjorvj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkwif2r4l.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkwif2r4l.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwif2r4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpa6lqgenb.d(22): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa6lqgenb.d(22): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6lqgenb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpae310ti1.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpae310ti1.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae310ti1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n        {\n            for(k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpa7vfial5.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa7vfial5.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7vfial5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5i5kjv9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpl5i5kjv9.__unittest_L33_C1() [0x427af9]\n??:? void tmpl5i5kjv9.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl5i5kjv9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpl5i5kjv9.__unittest_L33_C1() [0x427af9]\n??:? void tmpl5i5kjv9.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum * 3)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpxsemsg7j.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpxsemsg7j.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxsemsg7j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpa3_5q7p3.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa3_5q7p3.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3_5q7p3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i+1; j < n; j++)\n            for(k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp2ofwkhfv.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp2ofwkhfv.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ofwkhfv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long max = 0;\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum[i] = 0;\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                {\n                    max = a[i] + a[j] + a[k];\n                    count = 1;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpulitokk0.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpulitokk0.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmpulitokk0.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmpulitokk0.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulitokk0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkb62b_cr.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpkb62b_cr.__unittest_L37_C1() [0x427ae0]\n??:? void tmpkb62b_cr.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long max = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        sum[i] = a[i];\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(sum[i] + sum[j] + sum[k] == 3 * (sum[i] + sum[j] + sum[k]))\n                    max++;\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpdlg6hdz6.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpdlg6hdz6.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmpdlg6hdz6.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmpdlg6hdz6.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdlg6hdz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmprczhwala.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmprczhwala.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprczhwala.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpzrge930m.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzrge930m.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrge930m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n        {\n            for(k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp9a9bccxy.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp9a9bccxy.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a9bccxy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i < n; i++) {\n        for(j = i + 1; j < n; j++) {\n            for(k = j + 1; k < n; k++) {\n                if(i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqbvsva4d.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpqbvsva4d.__unittest_L33_C1() [0x427af9]\n??:? void tmpqbvsva4d.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwvfdohot.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwvfdohot.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvfdohot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpb1rkq_wz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpb1rkq_wz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1rkq_wz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp8a2nmlay.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp8a2nmlay.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8a2nmlay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwvfdohot.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwvfdohot.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvfdohot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpb1rkq_wz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpb1rkq_wz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1rkq_wz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpb1rkq_wz.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpb1rkq_wz.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1rkq_wz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkfb9ythl.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkfb9ythl.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfb9ythl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpkh3u1lw_.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkh3u1lw_.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkh3u1lw_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpzmnhbe41.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzmnhbe41.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmnhbe41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples) {\n                    max_triples = a[i] + a[j] + a[k];\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmphbc5o15v.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmphbc5o15v.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbc5o15v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && i * i - i + 1 == k * k - k + 1)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_fanpoi1.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp_fanpoi1.__unittest_L37_C1() [0x427ae0]\n??:? void tmp_fanpoi1.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpw4oc0gqh.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpw4oc0gqh.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4oc0gqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpfw74zqg4.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpfw74zqg4.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw74zqg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp35i7j9pk.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp35i7j9pk.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35i7j9pk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmp7ni0hbbu.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp7ni0hbbu.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ni0hbbu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoy1f92wl.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpoy1f92wl.__unittest_L37_C1() [0x427ae0]\n??:? void tmpoy1f92wl.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpwvfdohot.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwvfdohot.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvfdohot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && i * i - i + 1 == k * k - k + 1) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0v3ckhi.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpi0v3ckhi.__unittest_L33_C1() [0x427ae0]\n??:? void tmpi0v3ckhi.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++)\n        a[i-1] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpa0zi0smd.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpa0zi0smd.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0zi0smd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 1; i <= n; i++)\n    {\n        a[i-1] = i*i - i + 1;\n    }\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i+1; j <= n; j++)\n        {\n            for(k = j+1; k <= n; k++)\n            {\n                if(a[i-1] + a[j-1] + a[k-1] == 3*(i+j+k))\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpaq88vt8u.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpaq88vt8u.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaq88vt8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzl0ywa3i.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzl0ywa3i.__unittest_L33_C1() [0x427af9]\n??:? void tmpzl0ywa3i.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpvsq1jk4w.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpvsq1jk4w.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsq1jk4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i-1] = i*i - i + 1;\n    }\n    for (i = 1; i <= n; i++) {\n        for (j = i+1; j <= n; j++) {\n            for (k = j+1; k <= n; k++) {\n                if (a[i-1] + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1])) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpbrbcumo_.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpbrbcumo_.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrbcumo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j == k * k + i * i + j * j) {\n                    max_triples += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz417qa62.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpz417qa62.__unittest_L33_C1() [0x427acc]\n??:? void tmpz417qa62.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        a[i-1] = i*i - i + 1;\n    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpox00n02p.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpox00n02p.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox00n02p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpe8z4_t1b.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpe8z4_t1b.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8z4_t1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum[n];\n    long count = 0;\n    long max = 0;\n    long i, j, k;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum[i] = 0;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max) {\n                    max = a[i] + a[j] + a[k];\n                    count = 1;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp3q2ura1h.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp3q2ura1h.d(21): Deprecation: instead of C-style syntax, use D-style syntax `long[n] sum`\n/tmp/tmp3q2ura1h.d(20): Error: variable `n` cannot be read at compile time\n/tmp/tmp3q2ura1h.d(21): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q2ura1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n - 2; i++) {\n        for (j = i + 1; j < n - 1; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpkf36xzn4.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpkf36xzn4.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf36xzn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long sum = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > sum)\n                    sum = a[i] + a[j] + a[k];\n    return sum;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpmdaajlcg.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpmdaajlcg.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdaajlcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long count = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293470,
      "stdout": "",
      "stderr": "/tmp/tmpsc_r92bk.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpsc_r92bk.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc_r92bk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpyfxmb_2e.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpyfxmb_2e.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmb_2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n - 1; i++)\n        for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpzo45asbb.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzo45asbb.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzo45asbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            for (k = j + 1; k < n; k++)\n            {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp5moaur72.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp5moaur72.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5moaur72.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmpwea4e4ar.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpwea4e4ar.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwea4e4ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max) {\n                    max = a[i] + a[j] + a[k];\n                }\n            }\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "/tmp/tmp05ommzi_.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmp05ommzi_.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05ommzi_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "/tmp/tmpzrge930m.d(20): Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\n/tmp/tmpzrge930m.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrge930m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}