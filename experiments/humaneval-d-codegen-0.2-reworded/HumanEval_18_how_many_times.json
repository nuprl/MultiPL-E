{
  "name": "HumanEval_18_how_many_times",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring) \n",
  "tests": "unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}",
  "completions": [
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(string.substr(j, len)) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    \n    if (sublen > len)\n        return 0L;\n    \n    for (long i = 0; i < len - sublen + 1; i++)\n    {\n        if (string.substr(i, sublen) == substring)\n            count++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length() - len + 1)\n    {\n        int j = 0;\n        while (j < len && string[i + j] == substring[j])\n        {\n            j++;\n        }\n        if (j == len)\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += substring_length;\n        }\n        else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < len_substring) {\n            if (string[i + j] == substring[j]) {\n                j++;\n            } else {\n                break;\n            }\n        }\n        if (j == len_substring) {\n            count++;\n            i += len_substring;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            count++;\n            j += len;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) {\n        while (j < string_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n                if (j == substring_length) {\n                    j = 0;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = substring.length();\n    long len_string = string.length();\n    \n    for (long i = 0; i < len_string - len + 1; i++)\n    {\n        if (string.substr(i, len) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_len) {\n        while (j < substring_len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            count++;\n            j += len;\n        }\n        i = j + 1;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n            i++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_substring_max = len_substring;\n    long len_string_max = len_string;\n    long len_substring_min = len_substring;\n    long len_string_min = len_string;\n    \n    if (len_substring > len_string)\n    {\n        len_substring_max = len_string;\n        len_string_max = len_substring;\n    }\n    if (len_substring < len_string)\n    {\n        len_substring_min = len_string;\n        len_string_min = len_substring;\n    }\n    \n    for (long i = len_string_min; i <= len_string_max; i++)\n    {\n        for (long j = len_substring_min; j <= len_substring_max; j++)\n        {\n            if (string.substr(i - len_substring, len_substring) == substring)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i == len)\n            {\n                count++;\n                i = j;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length()) {\n        if (string[start] == substring[0]) {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[end]) {\n                count++;\n                start++;\n                end++;\n            }\n        } else {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else if(j > 0)\n        {\n            j = 0;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length() - len + 1) {\n        int j = 0;\n        while (j < len) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == len) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n            i++;\n        }\n        if (j == sublen) {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        while(j < sublen && i < len)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                i++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n                i++;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length && string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    \n    for (long i = 0; i < len_string_substring; i++)\n    {\n        if (string.substr(i, len_substring) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring.compare(string, j, len) == 0)\n        {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0, j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length())\n    {\n        if (string[start] == substring[0])\n        {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[0])\n            {\n                count++;\n                start++;\n                end++;\n            }\n        }\n        else\n        {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j + 1;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < len_substring && string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length && string[i + j] == substring[j]) {\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += j;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    \n    for(long i = 0; i < len - sublen + 1; i++)\n    {\n        if(string.substr(i, sublen) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_string = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n                i++;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length && j < substring_length)\n    {\n        if (string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length() - len + 1)\n    {\n        int j = 0;\n        while (j < len && string[i + j] == substring[j])\n        {\n            j++;\n        }\n        if (j == len)\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    while(i < string_length)\n    {\n        long j = 0;\n        while(j < substring_length)\n        {\n            if(string[i+j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n                break;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    if (sublen == 0)\n        return 0;\n    for (long i = 0; i < len - sublen + 1; i++) {\n        if (string.substr(i, sublen) == substring)\n            count++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    long len_string_substring_overlap = len_string_substring - len_substring;\n    \n    for (long i = 0; i < len_string_substring_overlap; i++) {\n        if (string.substr(i, len_substring) == substring) {\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length())\n    {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if (j - i == len)\n                count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    int substring_length = substring.length();\n    while (i < string.length() && j < substring_length) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length())\n    {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if (j - i == len)\n                count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string) {\n        while (j < len_substring && string[i] == substring[j]) {\n            j++;\n            i++;\n        }\n        if (j == len_substring) {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                j++;\n            } else {\n                break;\n            }\n        }\n        if (j == sublen) {\n            count++;\n            i += sublen;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_len)\n    {\n        while(j < substring_len)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len && i + j < string_len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len - sublen + 1)\n    {\n        if (string.substr(i, sublen) == substring)\n        {\n            count++;\n            i += sublen;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    \n    for (long i = 0; i < string_length - substring_length + 1; i++)\n    {\n        if (string.substr(i, substring_length) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n            count++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while(i < string_length)\n    {\n        if(j < substring_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else if(j < substring_length)\n        {\n            j++;\n        }\n        else if(i < string_length)\n        {\n            i++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    long len_string_substring_overlap = len_string_substring - len_substring;\n    for (long i = 0; i < len_string_substring_overlap; i++) {\n        if (string.substr(i, len_substring) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_length) {\n                count++;\n                break;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    \n    for (long i = 0; i < string_length - substring_length + 1; i++)\n    {\n        if (string.substr(i, substring_length) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    int substring_length = substring.length();\n    while (i < string.length() && j < substring_length) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                break;\n            }\n        }\n        i += j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n            count++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n                i++;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) {\n        while (j < string_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n                if (j == substring_length) {\n                    j = 0;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    int j = 0;\n    while(i < string_len)\n    {\n        j = 0;\n        while(j < substring_len)\n        {\n            if(string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n                j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        j = 0;\n        while (j < substring_length)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j < substring.length(); j++) {\n            if(string[i] == substring[j]) {\n                count++;\n                if(i + j == substring.length()) {\n                    return count;\n                }\n            }\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < sublen && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                break;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < substring_len && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    \n    for(long i = 0; i < len - len_substring + 1; i++)\n    {\n        if(string.substr(i, len_substring) == substring)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i >= len)\n                count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) \n    {\n        if (j < substring_length && string[i] == substring[j]) \n        {\n            i++;\n            j++;\n        }\n        else \n        {\n            j = 0;\n        }\n        if (j == substring_length) \n        {\n            count++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length()) {\n        if (string[start] == substring[0]) {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[end]) {\n                count++;\n                start++;\n                end++;\n            }\n        } else {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length && string[i + j] == substring[j]) {\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += j;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_string = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len_string)\n    {\n        j = 0;\n        while (j < len_substring)\n        {\n            if (string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        while(j < sublen && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while(i < string.length() && j < substring.length())\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length && j < substring_length)\n    {\n        if (string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while(i < len)\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else if(j > 0)\n        {\n            j = 0;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            i++;\n            j++;\n        }\n        if (j == len_substring)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while(i < string_length)\n    {\n        if(j < substring_length)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        else\n        {\n            break;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length)\n    {\n        while (j < string_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            i++;\n            j++;\n        }\n        if (j == len_substring)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    while (i < len - sublen + 1)\n    {\n        long j = 0;\n        while (j < sublen && string[i + j] == substring[j])\n        {\n            j++;\n        }\n        if (j == sublen)\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    for (long i = 0; i < len_string_substring; i++) {\n        long j = i;\n        while (j < len_string_substring && string[j] == substring[i]) {\n            count++;\n            j++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        while (j < substring_length && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_length) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int sub_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_len) {\n        while (j < string_len && string[j] == substring[j]) {\n            j += 1;\n            if (j == sub_len) {\n                count += 1;\n                j = 0;\n            }\n        }\n        i += 1;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < len_substring && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                break;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    while(i < len)\n    {\n        long j = 0;\n        while(j < substring_len && i + j < len)\n        {\n            if(string[i + j] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n                break;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length)\n        {\n            if(string[i] == substring[j])\n            {\n                count++;\n                j++;\n            }\n            else\n            {\n                j = 0;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < substring.length()) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i >= len) {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length() - substring.length() + 1; i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    while (i < len) {\n        long j = 0;\n        while (j < len_substring) {\n            if (string[i+j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < substring_len && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i >= len)\n            {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_len = substring.length();\n    int string_len = string.length();\n    int i = 0;\n    while (i < string_len - substring_len + 1)\n    {\n        if (string.substr(i, substring_len) == substring)\n        {\n            count++;\n            i += substring_len;\n        }\n        else\n            i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && i < len) {\n            if (string[i] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n            i++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_len && j < substring_len)\n    {\n        if(string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        else\n        {\n            j = 0;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while(i < string_length)\n    {\n        while(j < substring_length && string[i] == substring[j])\n        {\n            count++;\n            i++;\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long substring_len = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        j = 0;\n        while (j < substring_len && i + j < len) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            }\n            else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    while (start < string.length() && end < string.length()) {\n        if (string[start] == substring[0]) {\n            count++;\n            start++;\n            end++;\n            while (start < string.length() && end < string.length() && string[start] == substring[end]) {\n                count++;\n                start++;\n                end++;\n            }\n        } else {\n            start++;\n            end++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len_substring = substring.length();\n    long len_string = string.length();\n    long len_string_substring = len_string - len_substring + 1;\n    long len_string_substring_overlap = len_string - len_substring;\n    for(long i = 0; i < len_string_substring_overlap; i++)\n    {\n        if(string.substr(i, len_substring) == substring)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    while (i < string_length) {\n        long j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                count++;\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        i += substring_length;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length())\n    {\n        int j = i;\n        while (j < string.length() && substring.compare(string, j, len) == 0)\n        {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == substring_length) {\n            count++;\n            i += substring_length;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring[0] == string[j]) {\n            j++;\n            if (j - i == len) {\n                count++;\n                i = j;\n            }\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, j, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len_substring = substring.length();\n    int len_string = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_string)\n    {\n        while (j < len_substring && string[i] == substring[j])\n        {\n            count++;\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        while (j < substring_len && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == string_len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long len_substring = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < len_substring && string[i] == substring[j]) {\n            j++;\n            i++;\n            count++;\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    if (sublen > len) return 0;\n    for (int i = 0; i < len - sublen + 1; i++) {\n        if (string.substr(i, sublen) == substring) {\n            count++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_len = substring.length();\n    long string_len = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_len) {\n        j = 0;\n        while (j < substring_len) {\n            if (string[i + j] != substring[j]) {\n                break;\n            }\n            j++;\n        }\n        if (j == substring_len) {\n            count++;\n            i += substring_len;\n        }\n        else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length) {\n        j = 0;\n        while (j < substring_length) {\n            if (string[i + j] == substring[j]) {\n                j++;\n            } else {\n                j = 0;\n            }\n        }\n        if (j == substring_length) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring.compare(j, len, string, j, len) == 0)\n        {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen && string[i] == substring[j]) {\n            j++;\n            i++;\n            if (i == len) {\n                count++;\n                break;\n            }\n        }\n        j = 0;\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long substring_length = substring.length();\n    long string_length = string.length();\n    long i = 0;\n    long j = 0;\n    while (i < string_length)\n    {\n        while (j < substring_length && string[i] == substring[j])\n        {\n            j++;\n            i++;\n        }\n        if (j == substring_length)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while(i < string.length())\n    {\n        int j = i;\n        while(j < string.length() && substring[0] == string[j])\n        {\n            j++;\n            if(j - i >= len)\n            {\n                count++;\n                i = j - len + 1;\n            }\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            j += len;\n            count++;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int substring_length = substring.length();\n    int string_length = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < string_length)\n    {\n        while (j < string_length && i + j < string_length && string[i+j] == substring[j])\n        {\n            j++;\n        }\n        if (j == substring_length)\n        {\n            count++;\n            j = 0;\n        }\n        i++;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    while (i < string.length()) {\n        int j = i;\n        while (j < string.length() && substring.compare(j, len, string, i, len) == 0) {\n            count++;\n            j += len;\n        }\n        i = j;\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    int len = substring.length();\n    int i = 0;\n    int j = 0;\n    while (i < string.length() && j < len) {\n        if (string[i] == substring[j]) {\n            count++;\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}",
    "{\n    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n    \n    if (sublen == 0)\n        return len;\n    \n    for (long i = 0; i < len - sublen + 1; i++)\n    {\n        if (string.substr(i, sublen) == substring)\n            count++;\n    }\n    return count;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}