{
  "name": "HumanEval_163_generate_integers",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n",
  "tests": "unittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            ret[i] = j;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdvv16i1v.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpdvv16i1v.__unittest_L29_C1() [0x427f34]\n??:? void tmpdvv16i1v.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_6v6rd0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpg_6v6rd0.__unittest_L25_C1() [0x427f0c]\n??:? void tmpg_6v6rd0.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqotq5g9.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpaqotq5g9.__unittest_L31_C1() [0x427f34]\n??:? void tmpaqotq5g9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while(i<a)\n    {\n        result[k] = i;\n        i++;\n        k++;\n    }\n    while(j<b)\n    {\n        result[k] = j;\n        j++;\n        k++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpaqear63o.d(31): Range violation\n----------------\n??:? _d_arrayboundsp [0x42847e]\n??:? long[] tmpaqear63o.generate_integers(long, long) [0x427ea6]\n??:? void tmpaqear63o.__unittest_L37_C1() [0x427eee]\n??:? void tmpaqear63o.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430531]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++)\n    {\n        if (j % 2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3f965vd5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp3f965vd5.__unittest_L28_C1() [0x427f34]\n??:? void tmp3f965vd5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n            ret[j++] = i;\n        i++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxpyv4_bb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpxpyv4_bb.__unittest_L30_C1() [0x427f34]\n??:? void tmpxpyv4_bb.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwp6zq80y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpwp6zq80y.__unittest_L28_C1() [0x427f34]\n??:? void tmpwp6zq80y.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1wk51e9z.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp1wk51e9z.__unittest_L31_C1() [0x427f34]\n??:? void tmp1wk51e9z.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptdl6gv_p.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmptdl6gv_p.__unittest_L29_C1() [0x427f30]\n??:? void tmptdl6gv_p.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i=a; i<=b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0noz0lx6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp0noz0lx6.__unittest_L26_C1() [0x427f14]\n??:? void tmp0noz0lx6.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            res[i] = j;\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa4lhd0kd.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpa4lhd0kd.__unittest_L29_C1() [0x427f34]\n??:? void tmpa4lhd0kd.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i=0; i<result.length; i++)\n        result[i] = i+a;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp72ix7rgy.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmp72ix7rgy.__unittest_L24_C1() [0x427f0c]\n??:? void tmp72ix7rgy.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_6v6rd0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpg_6v6rd0.__unittest_L25_C1() [0x427f0c]\n??:? void tmpg_6v6rd0.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j - a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnj_amlhs.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpnj_amlhs.__unittest_L31_C1() [0x427f34]\n??:? void tmpnj_amlhs.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j%2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszk521bg.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpszk521bg.__unittest_L28_C1() [0x427f34]\n??:? void tmpszk521bg.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i=a; i<=b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0noz0lx6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp0noz0lx6.__unittest_L26_C1() [0x427f14]\n??:? void tmp0noz0lx6.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = a; i <= b; i++) {\n        result[i - a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmp8b5tq9mn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8b5tq9mn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_6v6rd0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpg_6v6rd0.__unittest_L25_C1() [0x427f0c]\n??:? void tmpg_6v6rd0.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        result[i] = j;\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyc4jtq77.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpyc4jtq77.__unittest_L28_C1() [0x427f1c]\n??:? void tmpyc4jtq77.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c447]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430565]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b1]\n??:? runModuleUnitTests [0x42c21d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j%2 == 0)\n            ret[i++] = j;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgltqql07.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpgltqql07.__unittest_L28_C1() [0x427f34]\n??:? void tmpgltqql07.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b - a + 1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long m = 0;\n    long n = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AA1 = 0;\n    long BB\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpyt0o1q9c.d(90): Error: semicolon expected, not `unittest`\n/tmp/tmpyt0o1q9c.d(90): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyt0o1q9c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    while(i<b-a+1)\n    {\n        if(j<a)\n        {\n            result[i] = j;\n            i++;\n            j++;\n        }\n        else if(j>=a && j<=b)\n        {\n            result[i] = j;\n            i++;\n            j++;\n        }\n        else\n        {\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxtafocyr.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmpxtafocyr.__unittest_L43_C1() [0x427f80]\n??:? void tmpxtafocyr.__modtest() [0x428170]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx54xwe0r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpx54xwe0r.__unittest_L26_C1() [0x427f0c]\n??:? void tmpx54xwe0r.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j%2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbjyonb0q.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpbjyonb0q.__unittest_L31_C1() [0x427f34]\n??:? void tmpbjyonb0q.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3yzf20sz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmp3yzf20sz.__unittest_L26_C1() [0x427f0c]\n??:? void tmp3yzf20sz.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            ret[i] = j;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdvv16i1v.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpdvv16i1v.__unittest_L29_C1() [0x427f34]\n??:? void tmpdvv16i1v.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = i+a;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0huz1ywl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmp0huz1ywl.__unittest_L24_C1() [0x427f0c]\n??:? void tmp0huz1ywl.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptdl6gv_p.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmptdl6gv_p.__unittest_L29_C1() [0x427f30]\n??:? void tmptdl6gv_p.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcj8xw4bj.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpcj8xw4bj.__unittest_L34_C1() [0x427f34]\n??:? void tmpcj8xw4bj.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            ret[i] = j;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7m0a_as7.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp7m0a_as7.__unittest_L29_C1() [0x427f34]\n??:? void tmp7m0a_as7.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j - a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnj_amlhs.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpnj_amlhs.__unittest_L31_C1() [0x427f34]\n??:? void tmpnj_amlhs.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (long i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4vasmob0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp4vasmob0.__unittest_L25_C1() [0x427f14]\n??:? void tmp4vasmob0.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i=a; i<=b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi79f6ua9.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpi79f6ua9.__unittest_L24_C1() [0x427f14]\n??:? void tmpi79f6ua9.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdupgxgq9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpdupgxgq9.__unittest_L32_C1() [0x427f34]\n??:? void tmpdupgxgq9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdupgxgq9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpdupgxgq9.__unittest_L32_C1() [0x427f34]\n??:? void tmpdupgxgq9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = 0; i < result.length; i++)\n        result[i] = i+a;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn5smparh.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpn5smparh.__unittest_L24_C1() [0x427f0c]\n??:? void tmpn5smparh.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5yw5aowz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5yw5aowz.__unittest_L24_C1() [0x427f14]\n??:? void tmp5yw5aowz.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = a; i <= b; i++) {\n        result[i - a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmp8b5tq9mn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8b5tq9mn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ =\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpuloqk54d.d(90): Error: expression expected, not `unittest`\n/tmp/tmpuloqk54d.d(91): Error: semicolon expected, not `{`\n/tmp/tmpuloqk54d.d(99): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuloqk54d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwp6zq80y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpwp6zq80y.__unittest_L28_C1() [0x427f34]\n??:? void tmpwp6zq80y.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoz3974xh.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpoz3974xh.__unittest_L31_C1() [0x427f30]\n??:? void tmpoz3974xh.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j - a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnj_amlhs.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpnj_amlhs.__unittest_L31_C1() [0x427f34]\n??:? void tmpnj_amlhs.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpp3kysao0.d(91): Error: semicolon expected, not `unittest`\n/tmp/tmpp3kysao0.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3kysao0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpq0bpm79o.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0bpm79o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    int i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg0ore99u.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpg0ore99u.__unittest_L29_C1() [0x427f30]\n??:? void tmpg0ore99u.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i=a; i<=b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0noz0lx6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp0noz0lx6.__unittest_L26_C1() [0x427f14]\n??:? void tmp0noz0lx6.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = i + a;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmdvkqm6g.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpmdvkqm6g.__unittest_L24_C1() [0x427f0c]\n??:? void tmpmdvkqm6g.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = 0; i < result.length; i++)\n        result[i] = i+a;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn5smparh.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpn5smparh.__unittest_L24_C1() [0x427f0c]\n??:? void tmpn5smparh.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i<=b)\n    {\n        if(i%2==0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpndbez2rk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpndbez2rk.__unittest_L33_C1() [0x427f34]\n??:? void tmpndbez2rk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while(i <= b)\n    {\n        if(i % 2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq6gdqwfs.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpq6gdqwfs.__unittest_L34_C1() [0x427f34]\n??:? void tmpq6gdqwfs.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx54xwe0r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpx54xwe0r.__unittest_L26_C1() [0x427f0c]\n??:? void tmpx54xwe0r.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i=a; i<=b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0noz0lx6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp0noz0lx6.__unittest_L26_C1() [0x427f14]\n??:? void tmp0noz0lx6.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1wk51e9z.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp1wk51e9z.__unittest_L31_C1() [0x427f34]\n??:? void tmp1wk51e9z.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    while(i<=b)\n    {\n        result[i-a] = i;\n        i = i + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpijcj78ti.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmpijcj78ti.__unittest_L28_C1() [0x427f18]\n??:? void tmpijcj78ti.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzn40vr00.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpzn40vr00.__unittest_L32_C1() [0x427f34]\n??:? void tmpzn40vr00.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1wk51e9z.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp1wk51e9z.__unittest_L31_C1() [0x427f34]\n??:? void tmp1wk51e9z.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = a; i <= b; i++) {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpwu1pjfsn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu1pjfsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_6v6rd0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpg_6v6rd0.__unittest_L25_C1() [0x427f0c]\n??:? void tmpg_6v6rd0.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = a; i <= b; i++) {\n        result[i - a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmp8b5tq9mn.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8b5tq9mn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcj8xw4bj.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpcj8xw4bj.__unittest_L34_C1() [0x427f34]\n??:? void tmpcj8xw4bj.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5yw5aowz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5yw5aowz.__unittest_L24_C1() [0x427f14]\n??:? void tmp5yw5aowz.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    int i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg0ore99u.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpg0ore99u.__unittest_L29_C1() [0x427f30]\n??:? void tmpg0ore99u.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpqyr5s8a8.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqyr5s8a8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_6v6rd0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpg_6v6rd0.__unittest_L25_C1() [0x427f0c]\n??:? void tmpg_6v6rd0.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j%2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszk521bg.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpszk521bg.__unittest_L28_C1() [0x427f34]\n??:? void tmpszk521bg.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while (i <= b)\n    {\n        if (i % 2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiogbled5.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpiogbled5.__unittest_L34_C1() [0x427f34]\n??:? void tmpiogbled5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcj8xw4bj.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpcj8xw4bj.__unittest_L34_C1() [0x427f34]\n??:? void tmpcj8xw4bj.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while (i <= b)\n    {\n        if (i % 2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiogbled5.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpiogbled5.__unittest_L34_C1() [0x427f34]\n??:? void tmpiogbled5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5yw5aowz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5yw5aowz.__unittest_L24_C1() [0x427f14]\n??:? void tmp5yw5aowz.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqotq5g9.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpaqotq5g9.__unittest_L31_C1() [0x427f34]\n??:? void tmpaqotq5g9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i=0; i<result.length; i++)\n    {\n        result[i] = i*2+a;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdwxjzkdr.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpdwxjzkdr.__unittest_L26_C1() [0x427f10]\n??:? void tmpdwxjzkdr.__modtest() [0x428100]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for (long x = a; x <= b; x++) {\n        if (x % 2 == 0) {\n            result[i] = x;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeadnbb0c.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpeadnbb0c.__unittest_L29_C1() [0x427f30]\n??:? void tmpeadnbb0c.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n            ret[i++] = j;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfc6g23m9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpfc6g23m9.__unittest_L28_C1() [0x427f34]\n??:? void tmpfc6g23m9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b - a + 1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            ret[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd_6lhdr4.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpd_6lhdr4.__unittest_L31_C1() [0x427f34]\n??:? void tmpd_6lhdr4.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "/tmp/tmp0rp0kybu.d(89): Error: semicolon expected, not `unittest`\n/tmp/tmp0rp0kybu.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rp0kybu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcj8xw4bj.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpcj8xw4bj.__unittest_L34_C1() [0x427f34]\n??:? void tmpcj8xw4bj.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpq0bpm79o.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0bpm79o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            ret[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvwcb6vls.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpvwcb6vls.__unittest_L33_C1() [0x427f34]\n??:? void tmpvwcb6vls.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i=0; i<result.length; i++)\n        result[i] = i+a;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp72ix7rgy.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmp72ix7rgy.__unittest_L24_C1() [0x427f0c]\n??:? void tmp72ix7rgy.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5yw5aowz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5yw5aowz.__unittest_L24_C1() [0x427f14]\n??:? void tmp5yw5aowz.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            res[i] = j;\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa4lhd0kd.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpa4lhd0kd.__unittest_L29_C1() [0x427f34]\n??:? void tmpa4lhd0kd.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j%2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszk521bg.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpszk521bg.__unittest_L28_C1() [0x427f34]\n??:? void tmpszk521bg.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j - a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnj_amlhs.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpnj_amlhs.__unittest_L31_C1() [0x427f34]\n??:? void tmpnj_amlhs.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < a) {\n        result[k] = i;\n        i++;\n        k++;\n    }\n    while (j < b) {\n        result[k] = j;\n        j++;\n        k++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8mkwlbmj.d(29): Range violation\n----------------\n??:? _d_arrayboundsp [0x42847e]\n??:? long[] tmp8mkwlbmj.generate_integers(long, long) [0x427ea6]\n??:? void tmp8mkwlbmj.__unittest_L35_C1() [0x427eee]\n??:? void tmp8mkwlbmj.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c487]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b31a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430531]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2f1]\n??:? runModuleUnitTests [0x42c25d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long n = 0;\n    long m = 0;\n    long l = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long Aa = 0;\n    \nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "/tmp/tmpcd_o24jf.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcd_o24jf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5yw5aowz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5yw5aowz.__unittest_L24_C1() [0x427f14]\n??:? void tmp5yw5aowz.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (long i = a; i <= b; i++) {\n        result[i - a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9puu35ev.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9puu35ev.__unittest_L25_C1() [0x427f14]\n??:? void tmp9puu35ev.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqotq5g9.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpaqotq5g9.__unittest_L31_C1() [0x427f34]\n??:? void tmpaqotq5g9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i % 2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3dv9hsp3.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp3dv9hsp3.__unittest_L33_C1() [0x427f34]\n??:? void tmp3dv9hsp3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long n = 0;\n    long m = 0;\n    long l = 0;\n    long m1 = 0;\n    long m2 = 0;\n    long m3 = 0;\n    long m4 = 0;\n    long m5 = 0;\n    long m6 = 0;\n    long m7 = 0;\n    long m8 = 0;\n    long m9 = 0;\n    long m10 = 0;\n    long m11 = 0;\n    long m12 = 0;\n    long m13 = 0;\n    long m14 = 0;\n    long m15 = 0;\n    long m16 = 0;\n    long m17 = 0;\n    long m18 = 0;\n    long m19 = 0;\n    long m20 = 0;\n    long m21 = 0;\n    long m22 = 0;\n    long m23 = 0;\n    long m24 = 0;\n    long m25 = 0;\n    long m26 = 0;\n    long m27 = 0;\n    long m28 = 0;\n    long m29 = 0;\n    long m30 = 0;\n    long m31 = 0;\n    long m32 = 0;\n    long m33 = 0;\n    long m34 = 0;\n    long m35 = 0;\n    long m36 = 0;\n    long m37 = 0;\n    long m38 = 0;\n    long m39 = 0;\n    long m40 = 0;\n    long m41 = 0;\n    long m42 = 0;\n    long m43 = 0;\n    long m44 = 0;\n    long m45 = 0;\n    long m46 = 0;\n    long m47 = 0;\n    long m48 = 0;\n    long m49 = 0;\n    long m50 = 0;\n    long m51 = 0;\n    long m52 = 0;\n    long m53 = 0;\n    long m54 = 0;\n    long m55 = 0;\n    long m56 = 0;\n    long m57 =\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "/tmp/tmp_w3_yzgl.d(83): Error: expression expected, not `unittest`\n/tmp/tmp_w3_yzgl.d(84): Error: semicolon expected, not `{`\n/tmp/tmp_w3_yzgl.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_w3_yzgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptdl6gv_p.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmptdl6gv_p.__unittest_L29_C1() [0x427f30]\n??:? void tmptdl6gv_p.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            res[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt8m0g6gv.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpt8m0g6gv.__unittest_L33_C1() [0x427f34]\n??:? void tmpt8m0g6gv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "/tmp/tmp0rp0kybu.d(89): Error: semicolon expected, not `unittest`\n/tmp/tmp0rp0kybu.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rp0kybu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            ret[i] = j;\n            i++;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7m0a_as7.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp7m0a_as7.__unittest_L29_C1() [0x427f34]\n??:? void tmp7m0a_as7.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    for (int i = a; i <= b; i++)\n        ret[i-a] = i;\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "/tmp/tmpv8qkrhwm.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8qkrhwm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "/tmp/tmpebvy5e4n.d(89): Error: semicolon expected, not `unittest`\n/tmp/tmpebvy5e4n.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebvy5e4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    while (i <= b)\n    {\n        if (i % 2 == 0)\n        {\n            result[j - a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuvg6swvx.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpuvg6swvx.__unittest_L33_C1() [0x427f34]\n??:? void tmpuvg6swvx.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpq0bpm79o.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0bpm79o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl50do1w3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpl50do1w3.__unittest_L29_C1() [0x427f34]\n??:? void tmpl50do1w3.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            res[j++] = i;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6akeprbt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp6akeprbt.__unittest_L30_C1() [0x427f34]\n??:? void tmp6akeprbt.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_6v6rd0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpg_6v6rd0.__unittest_L25_C1() [0x427f0c]\n??:? void tmpg_6v6rd0.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = i*2 + a;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsvc6pp5m.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpsvc6pp5m.__unittest_L26_C1() [0x427f10]\n??:? void tmpsvc6pp5m.__modtest() [0x428100]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            res[j++] = i;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6akeprbt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp6akeprbt.__unittest_L30_C1() [0x427f34]\n??:? void tmp6akeprbt.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            res[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5cv8v0h7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp5cv8v0h7.__unittest_L33_C1() [0x427f34]\n??:? void tmp5cv8v0h7.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpq0bpm79o.d(20): Error: cannot implicitly convert expression `a` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0bpm79o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            res[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt8m0g6gv.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpt8m0g6gv.__unittest_L33_C1() [0x427f34]\n??:? void tmpt8m0g6gv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n        result[i-a] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5yw5aowz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5yw5aowz.__unittest_L24_C1() [0x427f14]\n??:? void tmp5yw5aowz.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n            result[i++] = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwp6zq80y.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpwp6zq80y.__unittest_L28_C1() [0x427f34]\n??:? void tmpwp6zq80y.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptdl6gv_p.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmptdl6gv_p.__unittest_L29_C1() [0x427f30]\n??:? void tmptdl6gv_p.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i<=b)\n    {\n        if(i%2==0)\n        {\n            ret[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9n27e5pj.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp9n27e5pj.__unittest_L33_C1() [0x427f34]\n??:? void tmp9n27e5pj.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpma8_dsmk.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpma8_dsmk.__unittest_L31_C1() [0x427f34]\n??:? void tmpma8_dsmk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = 0;\n    for (long j = a; j <= b; j++)\n    {\n        if (j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmkz0sx3v.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpmkz0sx3v.__unittest_L31_C1() [0x427f34]\n??:? void tmpmkz0sx3v.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++)\n    {\n        if (j % 2 == 0)\n        {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa3019yv_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpa3019yv_.__unittest_L31_C1() [0x427f34]\n??:? void tmpa3019yv_.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    int i = 0;\n    for(long x = a; x <= b; x++)\n    {\n        if(x % 2 == 0)\n            result[i++] = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfepk5hy4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpfepk5hy4.__unittest_L28_C1() [0x427f30]\n??:? void tmpfepk5hy4.__modtest() [0x428120]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = 0;\n    while (i <= b) {\n        if (i % 2 == 0) {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqotq5g9.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpaqotq5g9.__unittest_L31_C1() [0x427f34]\n??:? void tmpaqotq5g9.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpojts0n0w.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpojts0n0w.__unittest_L33_C1() [0x427f34]\n??:? void tmpojts0n0w.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = a;\n    while(i<=b)\n    {\n        if(i%2==0)\n        {\n            result[j-a] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpndbez2rk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpndbez2rk.__unittest_L33_C1() [0x427f34]\n??:? void tmpndbez2rk.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i%2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp21wtvst5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmp21wtvst5.__unittest_L33_C1() [0x427f34]\n??:? void tmp21wtvst5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        result[i-a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9juct9sa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9juct9sa.__unittest_L26_C1() [0x427f14]\n??:? void tmp9juct9sa.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    long i = a;\n    long j = a;\n    long k = 0;\n    while (i <= b)\n    {\n        if (i % 2 == 0)\n        {\n            result[k] = i;\n            k++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiogbled5.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpiogbled5.__unittest_L34_C1() [0x427f34]\n??:? void tmpiogbled5.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = a;\n    long j = 0;\n    while(i <= b)\n    {\n        if(i % 2 == 0)\n        {\n            result[j] = i;\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcc_6njfr.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpcc_6njfr.__unittest_L33_C1() [0x427f34]\n??:? void tmpcc_6njfr.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] ret = new long[b-a+1];\n    for(long i = a; i <= b; i++)\n    {\n        ret[i-a] = i;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5m62p07l.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5m62p07l.__unittest_L26_C1() [0x427f14]\n??:? void tmp5m62p07l.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    long i = 0;\n    for (long j = a; j <= b; j++) {\n        if (j % 2 == 0) {\n            result[i] = j;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsb8d9zmv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpsb8d9zmv.__unittest_L29_C1() [0x427f34]\n??:? void tmpsb8d9zmv.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b-a+1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = a+i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe4zvlrzg.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpe4zvlrzg.__unittest_L26_C1() [0x427f0c]\n??:? void tmpe4zvlrzg.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] res = new long[b - a + 1];\n    long i = 0;\n    for(long j = a; j <= b; j++)\n    {\n        if(j % 2 == 0)\n            res[i++] = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpks01q82i.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpks01q82i.__unittest_L28_C1() [0x427f34]\n??:? void tmpks01q82i.__modtest() [0x428124]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43057d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430509]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = a + i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpscfhww58.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpscfhww58.__unittest_L25_C1() [0x427f0c]\n??:? void tmpscfhww58.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    >>> generate_integers(2L, 8L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(8L, 2L)\n    [2L, 4L, 6L, 8L]\n    >>> generate_integers(10L, 14L)\n    []\n    \n*/\nlong[] generate_integers(long a, long b) \n{\n    long[] result = new long[b - a + 1];\n    for (long i = a; i <= b; i++) {\n        result[i - a] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9puu35ev.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp9puu35ev.__unittest_L25_C1() [0x427f14]\n??:? void tmp9puu35ev.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43055d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]\n??:? runModuleUnitTests [0x42c215]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}