{
  "name": "HumanEval_143_words_in_sentence",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n",
  "tests": "unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            i++;\n            continue;\n        }\n        while (j < len && sentence[j] != ' ') {\n            j++;\n        }\n        if (j == len) {\n            break;\n        }\n        k = j;\n        while (k < len && sentence[k] != ' ') {\n            k++;\n        }\n        if (k == len) {\n            break;\n        }\n        if (math.is_prime(k - j)) {\n            count++;\n            result += sentence.substr(j, k - j);\n        }\n        j = k;\n        i = j + 1;\n    }\n    if (count == 0) {\n        return \"\";\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp4mk73ql9.d(26): Error: no property `length` for type `string`\n/tmp/tmp4mk73ql9.d(50): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp4mk73ql9.d(52): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mk73ql9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < n) {\n        if (sentence[i] == ' ') {\n            if (count == 0) {\n                count = 1;\n                k = i + 1;\n            }\n            else {\n                count = 0;\n                l = i + 1;\n                while (l < n && sentence[l] != ' ') {\n                    l++;\n                }\n                m = l;\n                while (k < m) {\n                    result += sentence[k];\n                    k++;\n                }\n                k = l;\n            }\n        }\n        else {\n            count = 0;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp_f_lhfrm.d(26): Error: no property `length` for type `string`\n/tmp/tmp_f_lhfrm.d(48): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_f_lhfrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                {\n                    res += sentence[i];\n                }\n            }\n            else\n            {\n                res += sentence[i];\n            }\n        }\n        else\n        {\n            if(math.is_prime(len - i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmptap25nca.d(27): Error: no property `length` for type `string`\n/tmp/tmptap25nca.d(32): Error: no property `length` for type `string`\n/tmp/tmptap25nca.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmptap25nca.d(36): Error: slice `res` is not mutable\n/tmp/tmptap25nca.d(41): Error: slice `res` is not mutable\n/tmp/tmptap25nca.d(46): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmptap25nca.d(48): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptap25nca.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            res += sentence[i];\n        }\n    }\n    \n    for (int i = 0; i < res.size(); i++) {\n        if (math.is_prime(res[i])) {\n            res[i] = ' ';\n        }\n    }\n    \n    for (int i = 0; i < res.size(); i++) {\n        if (res[i] == ' ') {\n            res.erase(i, 1);\n            i--;\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp9vzj9kj1.d(27): Error: no property `size` for type `string`\n/tmp/tmp9vzj9kj1.d(29): Error: no property `size` for type `string`\n/tmp/tmp9vzj9kj1.d(30): Error: slice `res` is not mutable\n/tmp/tmp9vzj9kj1.d(33): Error: slice `res` is not mutable\n/tmp/tmp9vzj9kj1.d(37): Error: no property `size` for type `string`\n/tmp/tmp9vzj9kj1.d(38): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp9vzj9kj1.d(39): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmp9vzj9kj1.d(43): Error: no property `size` for type `string`\n/tmp/tmp9vzj9kj1.d(45): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vzj9kj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\n')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\t')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\r')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\f')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\v')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\b')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\a')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x0B')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x0C')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x0E')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x0F')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x10')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x11')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\x12')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpzkh7o6am.d(114): Error: expression expected, not `unittest`\n/tmp/tmpzkh7o6am.d(115): Error: found `{` when expecting `,`\n/tmp/tmpzkh7o6am.d(116): Error: expression expected, not `alias`\n/tmp/tmpzkh7o6am.d(116): Error: found `candidate` when expecting `,`\n/tmp/tmpzkh7o6am.d(116): Error: expression expected, not `=`\n/tmp/tmpzkh7o6am.d(116): Error: found `words_in_sentence` when expecting `,`\n/tmp/tmpzkh7o6am.d(116): Error: expression expected, not `;`\n/tmp/tmpzkh7o6am.d(118): Error: found `assert` when expecting `,`\n/tmp/tmpzkh7o6am.d(118): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(119): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(120): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(121): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(122): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(123): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(124): Error: found `;` when expecting `,`\n/tmp/tmpzkh7o6am.d(125): Error: expression expected, not `}`\n/tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpzpwkerhv.d(27): Error: no property `length` for type `string`\n/tmp/tmpzpwkerhv.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpzpwkerhv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpwkerhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    while(i < sentence.size())\n    {\n        int j = i;\n        while(j < sentence.size() && sentence[j] != ' ')\n            j++;\n        if(math.is_prime(j - i))\n            res += sentence.substr(i, j - i);\n        i = j + 1;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpcq2fesht.d(28): Error: no property `size` for type `string`\n/tmp/tmpcq2fesht.d(31): Error: no property `size` for type `string`\n/tmp/tmpcq2fesht.d(33): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpcq2fesht.d(34): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcq2fesht.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    int count2 = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            count = 0;\n            count2 = 0;\n            while (j < len) {\n                if (sentence[j] == ' ') {\n                    count++;\n                    if (count == 2) {\n                        count2++;\n                        if (count2 == 2) {\n                            result += sentence[j];\n                            count2 = 0;\n                        }\n                    }\n                }\n                j++;\n            }\n            count2 = 0;\n            count = 0;\n            i++;\n        } else {\n            count = 0;\n            count2 = 0;\n            while (j < len) {\n                if (sentence[j] == ' ') {\n                    count++;\n                    if (count == 2) {\n                        count2++;\n                        if (count2 == 2) {\n                            result += sentence[j];\n                            count2 = 0;\n                        }\n                    }\n                }\n                j++;\n            }\n            count2 = 0;\n            count = 0;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp46umewdz.d(26): Error: no property `length` for type `string`\n/tmp/tmp46umewdz.d(42): Error: slice `result` is not mutable\n/tmp/tmp46umewdz.d(61): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46umewdz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpat2tp4od.d(100): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat2tp4od.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len)\n    {\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1)\n        {\n            res += sentence.substr(i, j - i);\n            res += \" \";\n        }\n        i = j + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpcd3zbuvq.d(27): Error: no property `length` for type `string`\n/tmp/tmpcd3zbuvq.d(36): Error: no property `substr` for type `string`\n/tmp/tmpcd3zbuvq.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcd3zbuvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result.push_back(' ');\n            continue;\n        }\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n        {\n            j++;\n        }\n        if(j - i > 1)\n        {\n            result.push_back(sentence[i]);\n            result.push_back(sentence[j - 1]);\n        }\n        i = j - 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpb4u85eyv.d(27): Error: no property `length` for type `string`\n/tmp/tmpb4u85eyv.d(32): Error: no property `push_back` for type `string`\n/tmp/tmpb4u85eyv.d(42): Error: no property `push_back` for type `string`\n/tmp/tmpb4u85eyv.d(43): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4u85eyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.length(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpqbiy5ddw.d(27): Error: no property `length` for type `string`\n/tmp/tmpqbiy5ddw.d(31): Error: slice `res` is not mutable\n/tmp/tmpqbiy5ddw.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqbiy5ddw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            count++;\n            i++;\n        }\n    }\n    if (count > 0) {\n        result += \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmplkisbvdr.d(26): Error: no property `length` for type `string`\n/tmp/tmplkisbvdr.d(34): Error: slice `result` is not mutable\n/tmp/tmplkisbvdr.d(44): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkisbvdr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int len = res.size();\n    for(int i = 0; i < len; i++)\n    {\n        if(math.is_prime(len - i))\n        {\n            res.erase(i, 1);\n            len -= 1;\n        }\n    }\n    \n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpph0pm3l3.d(27): Error: no property `size` for type `string`\n/tmp/tmpph0pm3l3.d(31): Error: no property `size` for type `string`\n/tmp/tmpph0pm3l3.d(33): Error: slice `res` is not mutable\n/tmp/tmpph0pm3l3.d(38): Error: slice `res` is not mutable\n/tmp/tmpph0pm3l3.d(42): Error: no property `size` for type `string`\n/tmp/tmpph0pm3l3.d(45): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpph0pm3l3.d(47): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpph0pm3l3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpuqberzsn.d(27): Error: no property `length` for type `string`\n/tmp/tmpuqberzsn.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpuqberzsn.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqberzsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(sentence[i] - 'a' + 1))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp2xslfyg3.d(27): Error: no property `length` for type `string`\n/tmp/tmp2xslfyg3.d(32): Error: no property `length` for type `string`\n/tmp/tmp2xslfyg3.d(34): Error: slice `res` is not mutable\n/tmp/tmp2xslfyg3.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp2xslfyg3.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xslfyg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp5_rkmwtd.d(27): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(32): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(34): Error: slice `res` is not mutable\n/tmp/tmp5_rkmwtd.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp5_rkmwtd.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_rkmwtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(result.length() > 0)\n            {\n                result += \" \";\n            }\n        }\n        else\n        {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpnoxo6heg.d(27): Error: no property `length` for type `string`\n/tmp/tmpnoxo6heg.d(32): Error: no property `length` for type `string`\n/tmp/tmpnoxo6heg.d(34): Error: slice `result` is not mutable\n/tmp/tmpnoxo6heg.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnoxo6heg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    while(i < sentence.size()) {\n        if(sentence[i] == ' ') {\n            i++;\n            continue;\n        }\n        int j = i;\n        while(j < sentence.size() && sentence[j] != ' ') {\n            j++;\n        }\n        if(j - i > 1) {\n            res.push_back(sentence.substr(i, j - i));\n        }\n        i = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpaz062gmd.d(28): Error: no property `size` for type `string`\n/tmp/tmpaz062gmd.d(34): Error: no property `size` for type `string`\n/tmp/tmpaz062gmd.d(38): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaz062gmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp5_rkmwtd.d(27): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(32): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(34): Error: slice `res` is not mutable\n/tmp/tmp5_rkmwtd.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp5_rkmwtd.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_rkmwtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len) {\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1) {\n            res += sentence.substr(i, j - i);\n            i = j;\n        }\n        else\n            i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpjul2x06_.d(27): Error: no property `length` for type `string`\n/tmp/tmpjul2x06_.d(34): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjul2x06_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(sentence.substr(i, 2)))\n            {\n                res += sentence.substr(i, 2);\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpk9xnihbn.d(27): Error: no property `size` for type `string`\n/tmp/tmpk9xnihbn.d(31): Error: no property `size` for type `string`\n/tmp/tmpk9xnihbn.d(33): Error: slice `res` is not mutable\n/tmp/tmpk9xnihbn.d(38): Error: undefined identifier `is_prime`\n/tmp/tmpk9xnihbn.d(40): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9xnihbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len)\n    {\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1)\n        {\n            res += sentence.substr(i, j - i);\n            i = j;\n        }\n        else\n            i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpcrmme2oz.d(27): Error: no property `length` for type `string`\n/tmp/tmpcrmme2oz.d(36): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrmme2oz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.length(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int len = res.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(math.is_prime(len - i))\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpm34n0q9x.d(27): Error: no property `length` for type `string`\n/tmp/tmpm34n0q9x.d(31): Error: no property `length` for type `string`\n/tmp/tmpm34n0q9x.d(33): Error: slice `res` is not mutable\n/tmp/tmpm34n0q9x.d(38): Error: slice `res` is not mutable\n/tmp/tmpm34n0q9x.d(42): Error: no property `length` for type `string`\n/tmp/tmpm34n0q9x.d(45): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpm34n0q9x.d(47): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm34n0q9x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(i))\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpj9btl0sk.d(27): Error: no property `length` for type `string`\n/tmp/tmpj9btl0sk.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpj9btl0sk.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9btl0sk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int i = 0;\n    while (i < sentence.size()) {\n        int j = i;\n        while (j < sentence.size() && sentence[j] != ' ')\n            j++;\n        if (math.is_prime(j - i))\n            result += sentence.substr(i, j - i);\n        i = j + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpk43uwdhp.d(28): Error: no property `size` for type `string`\n/tmp/tmpk43uwdhp.d(30): Error: no property `size` for type `string`\n/tmp/tmpk43uwdhp.d(32): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpk43uwdhp.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk43uwdhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpzpwkerhv.d(27): Error: no property `length` for type `string`\n/tmp/tmpzpwkerhv.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpzpwkerhv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpwkerhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpyxka4e0w.d(27): Error: no property `length` for type `string`\n/tmp/tmpyxka4e0w.d(32): Error: slice `result` is not mutable\n/tmp/tmpyxka4e0w.d(36): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxka4e0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    while(i < sentence.length()) {\n        int j = i;\n        while(j < sentence.length() && sentence[j] != ' ') {\n            j++;\n        }\n        if(j - i > 1) {\n            res.append(sentence.substr(i, j - i));\n        }\n        i = j + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp9gcfexkr.d(28): Error: no property `length` for type `string`\n/tmp/tmp9gcfexkr.d(30): Error: no property `length` for type `string`\n/tmp/tmp9gcfexkr.d(34): Error: no property `append` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gcfexkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(i))\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpj9btl0sk.d(27): Error: no property `length` for type `string`\n/tmp/tmpj9btl0sk.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpj9btl0sk.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9btl0sk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string res = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                res += \" \";\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            if(count == 0)\n            {\n                res += sentence[i];\n                count++;\n                i++;\n            }\n            else\n            {\n                j = i;\n                while(j < len && sentence[j] != ' ')\n                {\n                    j++;\n                }\n                k = j - i;\n                if(math.is_prime(k))\n                {\n                    res += sentence[i];\n                    i = j;\n                    count++;\n                }\n                else\n                {\n                    i = j;\n                }\n            }\n        }\n    }\n    if(count > 0)\n    {\n        res += \" \";\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp0afd60ht.d(26): Error: no property `length` for type `string`\n/tmp/tmp0afd60ht.d(38): Error: slice `res` is not mutable\n/tmp/tmp0afd60ht.d(47): Error: slice `res` is not mutable\n/tmp/tmp0afd60ht.d(59): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp0afd60ht.d(61): Error: slice `res` is not mutable\n/tmp/tmp0afd60ht.d(74): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0afd60ht.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            if (math.is_prime(res.size() + 1)) {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmplxn3l0lp.d(27): Error: no property `size` for type `string`\n/tmp/tmplxn3l0lp.d(29): Error: no property `size` for type `string`\n/tmp/tmplxn3l0lp.d(30): Error: slice `res` is not mutable\n/tmp/tmplxn3l0lp.d(33): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmplxn3l0lp.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxn3l0lp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n            continue;\n        if(is_prime(i))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpt5gh9y1q.d(27): Error: no property `size` for type `string`\n/tmp/tmpt5gh9y1q.d(31): Error: undefined identifier `is_prime`\n/tmp/tmpt5gh9y1q.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5gh9y1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            i++;\n            continue;\n        }\n        while (i < len && sentence[i] != ' ') {\n            i++;\n        }\n        if (i == len) {\n            break;\n        }\n        j = i;\n        while (j < len && sentence[j] != ' ') {\n            j++;\n        }\n        if (j - i > 1) {\n            count++;\n            result += sentence.substr(i, j - i);\n        }\n        i = j;\n    }\n    if (count == 0) {\n        return \"\";\n    }\n    if (count == 1) {\n        return result;\n    }\n    int count2 = 0;\n    for (int i = 0; i < len; i++) {\n        if (sentence[i] == ' ') {\n            continue;\n        }\n        count2++;\n    }\n    if (count2 == 0) {\n        return \"\";\n    }\n    if (count2 == 1) {\n        return result;\n    }\n    int count3 = 0;\n    for (int i = 0; i < len; i++) {\n        if (sentence[i] == ' ') {\n            continue;\n        }\n        count3++;\n    }\n    if (count3 == 0) {\n        return \"\";\n    }\n    if (count3 == 1) {\n        return result;\n    }\n    int count4 = 0;\n    for (int i = 0; i < len; i++) {\n        if (sentence[i] == ' ') {\n            continue;\n        }\n        count4++;\n    }\n    if (count4 == 0) {\n        return \"\";\n    }\n    if (count4 == 1) {\n        return result;\n    }\n    int count5 = 0;\n    for (int i = 0; i < len; i++) {\n        if\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp9fe15fl8.d(100): Error: found `unittest` when expecting `(`\n/tmp/tmp9fe15fl8.d(112): Error: found `void` when expecting `)`\n/tmp/tmp9fe15fl8.d(112): Error: found `{` when expecting `;` following statement\n/tmp/tmp9fe15fl8.d(112): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fe15fl8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result = \"\";\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            if (is_prime(len - i)) {\n                result += sentence[i];\n                count++;\n            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpt_kbx0ow.d(27): Error: no property `length` for type `string`\n/tmp/tmpt_kbx0ow.d(34): Error: slice `result` is not mutable\n/tmp/tmpt_kbx0ow.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpt_kbx0ow.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_kbx0ow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                    res += sentence[i];\n            }\n            else\n                res += sentence[i];\n        }\n        else\n        {\n            if(math.is_prime(i))\n                res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpthw84yy0.d(27): Error: no property `length` for type `string`\n/tmp/tmpthw84yy0.d(32): Error: no property `length` for type `string`\n/tmp/tmpthw84yy0.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpthw84yy0.d(35): Error: slice `res` is not mutable\n/tmp/tmpthw84yy0.d(38): Error: slice `res` is not mutable\n/tmp/tmpthw84yy0.d(42): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpthw84yy0.d(43): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthw84yy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(sentence.size() - i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpruya4cfo.d(27): Error: no property `size` for type `string`\n/tmp/tmpruya4cfo.d(31): Error: no property `size` for type `string`\n/tmp/tmpruya4cfo.d(33): Error: slice `res` is not mutable\n/tmp/tmpruya4cfo.d(38): Error: undefined identifier `is_prime`\n/tmp/tmpruya4cfo.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpruya4cfo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1)\n        {\n            res += sentence.substr(i, j - i);\n            i = j - 1;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpvc09jy31.d(27): Error: no property `length` for type `string`\n/tmp/tmpvc09jy31.d(32): Error: slice `res` is not mutable\n/tmp/tmpvc09jy31.d(40): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvc09jy31.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for (int i = 0; i < sentence.length(); ++i) {\n        if (sentence[i] == ' ') {\n            res += ' ';\n        }\n        else {\n            res += sentence[i];\n        }\n    }\n    \n    for (int i = 0; i < res.length(); ++i) {\n        if (math.is_prime(res[i])) {\n            res[i] = ' ';\n        }\n    }\n    \n    for (int i = 0; i < res.length(); ++i) {\n        if (res[i] == ' ') {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpbd3de8e4.d(27): Error: no property `length` for type `string`\n/tmp/tmpbd3de8e4.d(29): Error: slice `res` is not mutable\n/tmp/tmpbd3de8e4.d(32): Error: slice `res` is not mutable\n/tmp/tmpbd3de8e4.d(36): Error: no property `length` for type `string`\n/tmp/tmpbd3de8e4.d(37): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpbd3de8e4.d(38): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmpbd3de8e4.d(42): Error: no property `length` for type `string`\n/tmp/tmpbd3de8e4.d(44): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbd3de8e4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpsbw3xisq.d(27): Error: no property `length` for type `string`\n/tmp/tmpsbw3xisq.d(32): Error: no property `length` for type `string`\n/tmp/tmpsbw3xisq.d(34): Error: slice `res` is not mutable\n/tmp/tmpsbw3xisq.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbw3xisq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len) {\n        int j = i + 1;\n        while(j < len && sentence[j] != ' ') {\n            j++;\n        }\n        if(is_prime(j - i)) {\n            res += sentence.substr(i, j - i);\n        }\n        i = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpzjg5s779.d(27): Error: no property `length` for type `string`\n/tmp/tmpzjg5s779.d(34): Error: undefined identifier `is_prime`\n/tmp/tmpzjg5s779.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjg5s779.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.size();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result += sentence[i];\n            continue;\n        }\n        int j = i + 1;\n        while(j < len && sentence[j] != ' ')\n        {\n            j++;\n        }\n        if(math.is_prime(j - i))\n        {\n            result += sentence[i];\n        }\n        i = j - 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp0v1hescr.d(27): Error: no property `size` for type `string`\n/tmp/tmp0v1hescr.d(32): Error: slice `result` is not mutable\n/tmp/tmp0v1hescr.d(40): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp0v1hescr.d(42): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v1hescr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        while(i < len && sentence[i] != ' ')\n        {\n            i++;\n        }\n        if(i == len)\n        {\n            break;\n        }\n        j = i;\n        while(j < len && sentence[j] != ' ')\n        {\n            j++;\n        }\n        if(j - i < 2)\n        {\n            i++;\n            continue;\n        }\n        count++;\n        i = j;\n    }\n    if(count == 0)\n    {\n        return \"\";\n    }\n    for(int k = 0; k < count; k++)\n    {\n        result += sentence.substr(i, j - i);\n        i = j + 1;\n        while(i < len && sentence[i] != ' ')\n        {\n            i++;\n        }\n        if(i == len)\n        {\n            break;\n        }\n        j = i;\n        while(j < len && sentence[j] != ' ')\n        {\n            j++;\n        }\n        if(j - i < 2)\n        {\n            i++;\n            continue;\n        }\n        result += sentence.substr(i, j - i);\n        i = j + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpsy8ew2e9.d(27): Error: no property `length` for type `string`\n/tmp/tmpsy8ew2e9.d(65): Error: no property `substr` for type `string`\n/tmp/tmpsy8ew2e9.d(85): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy8ew2e9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.size();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp2_wsyrwk.d(27): Error: no property `size` for type `string`\n/tmp/tmp2_wsyrwk.d(29): Error: undefined identifier `is_prime`\n/tmp/tmp2_wsyrwk.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_wsyrwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++) {\n        if(sentence[i] == ' ') {\n            if(res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            if(is_prime(res.size())) {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmphbgub954.d(27): Error: no property `size` for type `string`\n/tmp/tmphbgub954.d(29): Error: no property `size` for type `string`\n/tmp/tmphbgub954.d(30): Error: slice `res` is not mutable\n/tmp/tmphbgub954.d(33): Error: undefined identifier `is_prime`\n/tmp/tmphbgub954.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbgub954.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(i))\n        {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpeck27wob.d(27): Error: no property `length` for type `string`\n/tmp/tmpeck27wob.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpeck27wob.d(32): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeck27wob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result = \"\";\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        while(j < len && sentence[j] != ' ')\n        {\n            j++;\n        }\n        if(j - i > 1)\n        {\n            result += sentence.substr(i, j - i);\n        }\n        i = j + 1;\n        j = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp49xrqk3w.d(27): Error: no property `length` for type `string`\n/tmp/tmp49xrqk3w.d(43): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49xrqk3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(i)) {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpa7vdmphi.d(27): Error: no property `length` for type `string`\n/tmp/tmpa7vdmphi.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpa7vdmphi.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7vdmphi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    int count = 0;\n    while(i < len) {\n        if(sentence[i] == ' ') {\n            if(count > 0) {\n                res += sentence[j];\n                count = 0;\n                j++;\n            }\n        }\n        else {\n            count++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp0w8uhuro.d(29): Error: no property `length` for type `string`\n/tmp/tmp0w8uhuro.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0w8uhuro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(result.length() > 0)\n            {\n                result += ' ';\n            }\n        }\n        else\n        {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp7vtkauzf.d(27): Error: no property `length` for type `string`\n/tmp/tmp7vtkauzf.d(32): Error: no property `length` for type `string`\n/tmp/tmp7vtkauzf.d(34): Error: slice `result` is not mutable\n/tmp/tmp7vtkauzf.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vtkauzf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            res += sentence[i];\n        }\n    }\n    \n    int len = res.size();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res.insert(i, ' ');\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmphmbykhzo.d(27): Error: no property `size` for type `string`\n/tmp/tmphmbykhzo.d(29): Error: no property `size` for type `string`\n/tmp/tmphmbykhzo.d(30): Error: slice `res` is not mutable\n/tmp/tmphmbykhzo.d(33): Error: slice `res` is not mutable\n/tmp/tmphmbykhzo.d(37): Error: no property `size` for type `string`\n/tmp/tmphmbykhzo.d(39): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmphmbykhzo.d(40): Error: no property `insert` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmbykhzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(count))\n        {\n            count++;\n        }\n        else\n        {\n            count = 0;\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmptl_pevp4.d(27): Error: no property `length` for type `string`\n/tmp/tmptl_pevp4.d(32): Error: no property `length` for type `string`\n/tmp/tmptl_pevp4.d(34): Error: slice `res` is not mutable\n/tmp/tmptl_pevp4.d(39): Error: slice `res` is not mutable\n/tmp/tmptl_pevp4.d(44): Error: no property `length` for type `string`\n/tmp/tmptl_pevp4.d(46): Error: undefined identifier `is_prime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptl_pevp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpsdhiiwqm.d(100): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdhiiwqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            count++;\n            result += sentence[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpneyq57gf.d(26): Error: no property `length` for type `string`\n/tmp/tmpneyq57gf.d(34): Error: slice `result` is not mutable\n/tmp/tmpneyq57gf.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneyq57gf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += sentence[j];\n                result += sentence[k];\n                count = 0;\n            }\n            j = i + 1;\n            k = i + 1;\n        } else {\n            if (is_prime(sentence[i])) {\n                result += sentence[i];\n                count++;\n            }\n            k++;\n        }\n        i++;\n    }\n    if (count > 0) {\n        result += sentence[j];\n        result += sentence[k];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpfzac6b79.d(26): Error: no property `length` for type `string`\n/tmp/tmpfzac6b79.d(35): Error: slice `result` is not mutable\n/tmp/tmpfzac6b79.d(36): Error: slice `result` is not mutable\n/tmp/tmpfzac6b79.d(42): Error: undefined identifier `is_prime`\n/tmp/tmpfzac6b79.d(43): Error: slice `result` is not mutable\n/tmp/tmpfzac6b79.d(51): Error: slice `result` is not mutable\n/tmp/tmpfzac6b79.d(52): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfzac6b79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len) {\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1) {\n            res += sentence.substr(i, j - i);\n            res += \" \";\n        }\n        i = j + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpxozxlbcg.d(27): Error: no property `length` for type `string`\n/tmp/tmpxozxlbcg.d(34): Error: no property `substr` for type `string`\n/tmp/tmpxozxlbcg.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxozxlbcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        if(is_prime(sentence.substr(i, 2)))\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpid0xttpw.d(27): Error: no property `size` for type `string`\n/tmp/tmpid0xttpw.d(31): Error: slice `res` is not mutable\n/tmp/tmpid0xttpw.d(34): Error: undefined identifier `is_prime`\n/tmp/tmpid0xttpw.d(36): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid0xttpw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpzpwkerhv.d(27): Error: no property `length` for type `string`\n/tmp/tmpzpwkerhv.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpzpwkerhv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpwkerhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpw_lni5tj.d(26): Error: no property `length` for type `string`\n/tmp/tmpw_lni5tj.d(32): Error: no property `length` for type `string`\n/tmp/tmpw_lni5tj.d(34): Error: slice `res` is not mutable\n/tmp/tmpw_lni5tj.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpw_lni5tj.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_lni5tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    string res;\n    for(int i = 0; i < n; i++) {\n        if(sentence[i] == ' ') {\n            res += ' ';\n            continue;\n        }\n        int j = i;\n        while(j < n && sentence[j] != ' ') {\n            j++;\n        }\n        if(j - i > 1) {\n            res += sentence.substr(i, j - i);\n        }\n        i = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp07ambseq.d(26): Error: no property `length` for type `string`\n/tmp/tmp07ambseq.d(30): Error: slice `res` is not mutable\n/tmp/tmp07ambseq.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07ambseq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(sentence.substr(i, sentence.size() - i)))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpipmw47na.d(27): Error: no property `size` for type `string`\n/tmp/tmpipmw47na.d(31): Error: no property `size` for type `string`\n/tmp/tmpipmw47na.d(33): Error: slice `res` is not mutable\n/tmp/tmpipmw47na.d(38): Error: undefined identifier `is_prime`\n/tmp/tmpipmw47na.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipmw47na.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                {\n                    res += sentence[i];\n                }\n            }\n        }\n        else\n        {\n            if(math.is_prime(i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp5y717coy.d(26): Error: no property `length` for type `string`\n/tmp/tmp5y717coy.d(32): Error: no property `length` for type `string`\n/tmp/tmp5y717coy.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp5y717coy.d(36): Error: slice `res` is not mutable\n/tmp/tmp5y717coy.d(42): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp5y717coy.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5y717coy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                    res += sentence[i];\n            }\n        }\n        else\n        {\n            if(math.is_prime(i))\n                res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpvxrxxnxh.d(27): Error: no property `length` for type `string`\n/tmp/tmpvxrxxnxh.d(32): Error: no property `length` for type `string`\n/tmp/tmpvxrxxnxh.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpvxrxxnxh.d(35): Error: slice `res` is not mutable\n/tmp/tmpvxrxxnxh.d(40): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpvxrxxnxh.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxrxxnxh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string res = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count == 0)\n            {\n                res += sentence[j];\n                j++;\n            }\n            count = 0;\n        }\n        else\n        {\n            count++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpvv5pgs0f.d(26): Error: no property `length` for type `string`\n/tmp/tmpvv5pgs0f.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvv5pgs0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            if (math.is_prime(res.size() + 1)) {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmprg49z_2u.d(27): Error: no property `size` for type `string`\n/tmp/tmprg49z_2u.d(29): Error: no property `size` for type `string`\n/tmp/tmprg49z_2u.d(30): Error: slice `res` is not mutable\n/tmp/tmprg49z_2u.d(33): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmprg49z_2u.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprg49z_2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpp465m4sx.d(27): Error: no property `length` for type `string`\n/tmp/tmpp465m4sx.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpp465m4sx.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp465m4sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            result += ' ';\n        } else {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp3h9e1pt4.d(27): Error: no property `size` for type `string`\n/tmp/tmp3h9e1pt4.d(29): Error: slice `result` is not mutable\n/tmp/tmp3h9e1pt4.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3h9e1pt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        while(i < len && !is_prime(sentence[i]))\n            i++;\n        if(i < len)\n        {\n            res += sentence[i];\n            i++;\n        }\n        while(i < len && is_prime(sentence[i]))\n            i++;\n        if(i < len)\n        {\n            res += sentence[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp248jyj3l.d(27): Error: no property `length` for type `string`\n/tmp/tmp248jyj3l.d(32): Error: undefined identifier `is_prime`\n/tmp/tmp248jyj3l.d(36): Error: slice `res` is not mutable\n/tmp/tmp248jyj3l.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp248jyj3l.d(43): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp248jyj3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            count++;\n            if (count == 2) {\n                result += sentence[j];\n                j++;\n                count = 0;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpwuafumni.d(26): Error: no property `length` for type `string`\n/tmp/tmpwuafumni.d(34): Error: slice `result` is not mutable\n/tmp/tmpwuafumni.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuafumni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmptmkfc0w3.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmkfc0w3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count == 0)\n            {\n                result += sentence[j];\n                j++;\n                count++;\n            }\n            else\n            {\n                result += \" \";\n                count++;\n            }\n        }\n        else\n        {\n            count = 0;\n            j = i;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpb4fltj6h.d(26): Error: no property `length` for type `string`\n/tmp/tmpb4fltj6h.d(38): Error: slice `result` is not mutable\n/tmp/tmpb4fltj6h.d(44): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4fltj6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(is_prime(res.length()))\n                    res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(i))\n                res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpmg09wvzw.d(27): Error: no property `length` for type `string`\n/tmp/tmpmg09wvzw.d(32): Error: no property `length` for type `string`\n/tmp/tmpmg09wvzw.d(34): Error: undefined identifier `is_prime`\n/tmp/tmpmg09wvzw.d(35): Error: slice `res` is not mutable\n/tmp/tmpmg09wvzw.d(40): Error: undefined identifier `is_prime`\n/tmp/tmpmg09wvzw.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg09wvzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpw_lni5tj.d(26): Error: no property `length` for type `string`\n/tmp/tmpw_lni5tj.d(32): Error: no property `length` for type `string`\n/tmp/tmpw_lni5tj.d(34): Error: slice `res` is not mutable\n/tmp/tmpw_lni5tj.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpw_lni5tj.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_lni5tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int len_res = res.length();\n    for(int i = 0; i < len_res; i++)\n    {\n        if(math.is_prime(len_res - i))\n        {\n            res.erase(i, 1);\n            len_res -= 1;\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpx9oqswdx.d(27): Error: no property `length` for type `string`\n/tmp/tmpx9oqswdx.d(32): Error: no property `length` for type `string`\n/tmp/tmpx9oqswdx.d(34): Error: slice `res` is not mutable\n/tmp/tmpx9oqswdx.d(39): Error: slice `res` is not mutable\n/tmp/tmpx9oqswdx.d(43): Error: no property `length` for type `string`\n/tmp/tmpx9oqswdx.d(46): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpx9oqswdx.d(48): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9oqswdx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(math.is_prime(res.size() + 1))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpu6zshcw8.d(27): Error: no property `size` for type `string`\n/tmp/tmpu6zshcw8.d(31): Error: no property `size` for type `string`\n/tmp/tmpu6zshcw8.d(33): Error: slice `res` is not mutable\n/tmp/tmpu6zshcw8.d(38): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpu6zshcw8.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6zshcw8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n            res += ' ';\n        }\n        else {\n            res += sentence[i];\n        }\n    }\n    \n    int len = res.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpx4oq4_8x.d(27): Error: no property `length` for type `string`\n/tmp/tmpx4oq4_8x.d(29): Error: slice `res` is not mutable\n/tmp/tmpx4oq4_8x.d(32): Error: slice `res` is not mutable\n/tmp/tmpx4oq4_8x.d(36): Error: no property `length` for type `string`\n/tmp/tmpx4oq4_8x.d(38): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpx4oq4_8x.d(39): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4oq4_8x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n        {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmph9i30x3e.d(27): Error: no property `length` for type `string`\n/tmp/tmph9i30x3e.d(30): Error: undefined identifier `is_prime`\n/tmp/tmph9i30x3e.d(32): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9i30x3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result = \"\";\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\n')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\r')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\t')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\v')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\f')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\b')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\a')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if(sentence[i] == '\\0')\n        \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp_rdovc5q.d(115): Error: found `unittest` instead of statement\n/tmp/tmp_rdovc5q.d(127): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rdovc5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpf05_xoty.d(27): Error: no property `length` for type `string`\n/tmp/tmpf05_xoty.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpf05_xoty.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf05_xoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += sentence[j];\n                j++;\n                count = 0;\n            }\n            i++;\n        }\n        else {\n            count++;\n            i++;\n        }\n    }\n    if (count > 0) {\n        result += sentence[j];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpt9_tpb6y.d(26): Error: no property `length` for type `string`\n/tmp/tmpt9_tpb6y.d(35): Error: slice `result` is not mutable\n/tmp/tmpt9_tpb6y.d(47): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9_tpb6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            if (count == 0) {\n                result += sentence[i];\n                count++;\n                i++;\n            } else {\n                j = i;\n                while (j < len && sentence[j] != ' ') {\n                    j++;\n                }\n                if (j - i > 1) {\n                    k = j - i;\n                    while (k > 0 && is_prime(k)) {\n                        result += sentence[i];\n                        i++;\n                        k--;\n                    }\n                }\n                count = 0;\n                i = j;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmppy3suz52.d(26): Error: no property `length` for type `string`\n/tmp/tmppy3suz52.d(35): Error: slice `result` is not mutable\n/tmp/tmppy3suz52.d(41): Error: slice `result` is not mutable\n/tmp/tmppy3suz52.d(51): Error: undefined identifier `is_prime`\n/tmp/tmppy3suz52.d(52): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy3suz52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.size();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.size(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            count++;\n        }\n    }\n    \n    if(count == 0)\n    {\n        return \"\";\n    }\n    \n    for(int i = 0; i < res.size(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp_6_m4i2x.d(27): Error: no property `size` for type `string`\n/tmp/tmp_6_m4i2x.d(32): Error: no property `size` for type `string`\n/tmp/tmp_6_m4i2x.d(34): Error: slice `res` is not mutable\n/tmp/tmp_6_m4i2x.d(39): Error: slice `res` is not mutable\n/tmp/tmp_6_m4i2x.d(44): Error: no property `size` for type `string`\n/tmp/tmp_6_m4i2x.d(46): Error: undefined identifier `is_prime`\n/tmp/tmp_6_m4i2x.d(57): Error: no property `size` for type `string`\n/tmp/tmp_6_m4i2x.d(59): Error: undefined identifier `is_prime`\n/tmp/tmp_6_m4i2x.d(61): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6_m4i2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n        {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpbm3b6kr0.d(27): Error: no property `length` for type `string`\n/tmp/tmpbm3b6kr0.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpbm3b6kr0.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbm3b6kr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpuqberzsn.d(27): Error: no property `length` for type `string`\n/tmp/tmpuqberzsn.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpuqberzsn.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqberzsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    int i = 0, j = 0;\n    string result = \"\";\n    while (i < n) {\n        while (i < n && sentence[i] != ' ') {\n            i++;\n        }\n        if (i < n) {\n            j = i + 1;\n            while (j < n && sentence[j] != ' ') {\n                j++;\n            }\n            if (math.is_prime(j - i)) {\n                result += sentence.substr(i, j - i);\n            }\n            i = j;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpn503qj5t.d(26): Error: no property `length` for type `string`\n/tmp/tmpn503qj5t.d(38): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpn503qj5t.d(39): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn503qj5t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < sentence.length())\n    {\n        if(sentence[i] == ' ')\n        {\n            if(j != 0)\n            {\n                res.push_back(sentence[j]);\n                j = 0;\n            }\n            k++;\n        }\n        else\n        {\n            if(k == 0)\n            {\n                res.push_back(sentence[i]);\n                j = i;\n            }\n            else\n            {\n                j++;\n            }\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpxw3atfk_.d(30): Error: no property `length` for type `string`\n/tmp/tmpxw3atfk_.d(36): Error: no property `push_back` for type `string`\n/tmp/tmpxw3atfk_.d(45): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxw3atfk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len) {\n        int j = i;\n        while(j < len && sentence[j] != ' ') {\n            j++;\n        }\n        if(j - i > 1) {\n            result += sentence.substr(i, j - i);\n        }\n        i = j + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp_jzpzdfg.d(27): Error: no property `length` for type `string`\n/tmp/tmp_jzpzdfg.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_jzpzdfg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len)\n    {\n        while(i < len && !is_prime(sentence[i]))\n            i++;\n        if(i < len)\n        {\n            while(j < len && !is_prime(sentence[j]))\n                j++;\n            if(i < j)\n                res += sentence[i++];\n            else\n                res += sentence[j++];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpk3125id3.d(29): Error: no property `length` for type `string`\n/tmp/tmpk3125id3.d(32): Error: undefined identifier `is_prime`\n/tmp/tmpk3125id3.d(36): Error: undefined identifier `is_prime`\n/tmp/tmpk3125id3.d(39): Error: slice `res` is not mutable\n/tmp/tmpk3125id3.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3125id3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmps_bc5atv.d(27): Error: no property `length` for type `string`\n/tmp/tmps_bc5atv.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmps_bc5atv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_bc5atv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            count++;\n            while (i < len && sentence[i] != ' ') {\n                result += sentence[i];\n                i++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp16u3ci7_.d(26): Error: no property `length` for type `string`\n/tmp/tmp16u3ci7_.d(34): Error: slice `result` is not mutable\n/tmp/tmp16u3ci7_.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16u3ci7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.size();\n    int i = 0, j = 0;\n    string result = \"\";\n    while (i < len) {\n        while (i < len && !is_prime(sentence[i])) {\n            i++;\n        }\n        if (i < len) {\n            result += sentence[i];\n            i++;\n        }\n        while (i < len && is_prime(sentence[i])) {\n            i++;\n        }\n        if (i < len) {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpt2qdk7tz.d(26): Error: no property `size` for type `string`\n/tmp/tmpt2qdk7tz.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpt2qdk7tz.d(34): Error: slice `result` is not mutable\n/tmp/tmpt2qdk7tz.d(37): Error: undefined identifier `is_prime`\n/tmp/tmpt2qdk7tz.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2qdk7tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpw_lni5tj.d(26): Error: no property `length` for type `string`\n/tmp/tmpw_lni5tj.d(32): Error: no property `length` for type `string`\n/tmp/tmpw_lni5tj.d(34): Error: slice `res` is not mutable\n/tmp/tmpw_lni5tj.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpw_lni5tj.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_lni5tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n            continue;\n        if(math.is_prime(i))\n            res.push_back(sentence[i]);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpgsjmwznk.d(27): Error: no property `size` for type `string`\n/tmp/tmpgsjmwznk.d(31): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpgsjmwznk.d(32): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsjmwznk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    int i = 0;\n    while (i < len) {\n        int j = i;\n        while (j < len && sentence[j] != ' ') {\n            j++;\n        }\n        if (j - i > 1) {\n            result += sentence.substr(i, j - i);\n        }\n        i = j + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpk4vumt92.d(27): Error: no property `length` for type `string`\n/tmp/tmpk4vumt92.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4vumt92.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string res = \"\";\n    while (i < n) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                res += sentence[j];\n                j++;\n                count = 0;\n            }\n            i++;\n        } else {\n            count++;\n            i++;\n        }\n    }\n    if (count > 0) {\n        res += sentence[j];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpoe1qagc8.d(26): Error: no property `length` for type `string`\n/tmp/tmpoe1qagc8.d(35): Error: slice `res` is not mutable\n/tmp/tmpoe1qagc8.d(46): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe1qagc8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i]-'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp56ax_blm.d(27): Error: no property `length` for type `string`\n/tmp/tmp56ax_blm.d(30): Error: undefined identifier `is_prime`\n/tmp/tmp56ax_blm.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56ax_blm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result.push_back(' ');\n        }\n        else\n        {\n            result.push_back(sentence[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpdzor5j6s.d(27): Error: no property `length` for type `string`\n/tmp/tmpdzor5j6s.d(32): Error: no property `push_back` for type `string`\n/tmp/tmpdzor5j6s.d(36): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzor5j6s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            count++;\n        }\n    }\n    \n    if(count == 0)\n    {\n        return \"\";\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpxs43xftt.d(27): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(32): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(34): Error: slice `res` is not mutable\n/tmp/tmpxs43xftt.d(39): Error: slice `res` is not mutable\n/tmp/tmpxs43xftt.d(44): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(46): Error: undefined identifier `is_prime`\n/tmp/tmpxs43xftt.d(57): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(59): Error: undefined identifier `is_prime`\n/tmp/tmpxs43xftt.d(61): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs43xftt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                res += sentence[j];\n                count = 0;\n                j = i + 1;\n            }\n        } else {\n            if (count == 0) {\n                res += sentence[i];\n                count = 1;\n                i++;\n            } else {\n                count++;\n            }\n        }\n    }\n    if (count > 0) {\n        res += sentence[j];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp_v48_eqs.d(27): Error: no property `length` for type `string`\n/tmp/tmp_v48_eqs.d(35): Error: slice `res` is not mutable\n/tmp/tmp_v48_eqs.d(41): Error: slice `res` is not mutable\n/tmp/tmp_v48_eqs.d(50): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_v48_eqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            count++;\n        }\n    }\n    \n    if(count == 0)\n    {\n        return \"\";\n    }\n    \n    int start = 0;\n    int end = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            end = i;\n            break;\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = res[i] - 'a' + 'A';\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = res[i] - 'A' + 'a';\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = res[i] - '0' + '9';\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = res[i] - '9' + '0';\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpol1o9iky.d(102): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpol1o9iky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0, j = 0;\n    string res = \"\";\n    while (i < len) {\n        while (i < len && !is_prime(sentence[i]))\n            i++;\n        if (i < len) {\n            res += sentence[i];\n            i++;\n        }\n        while (i < len && is_prime(sentence[i]))\n            i++;\n        j = i;\n        while (j < len && !is_prime(sentence[j]))\n            j++;\n        if (j < len) {\n            res += sentence[j];\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpj0xy0_vq.d(26): Error: no property `length` for type `string`\n/tmp/tmpj0xy0_vq.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpj0xy0_vq.d(33): Error: slice `res` is not mutable\n/tmp/tmpj0xy0_vq.d(36): Error: undefined identifier `is_prime`\n/tmp/tmpj0xy0_vq.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpj0xy0_vq.d(42): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0xy0_vq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        } else {\n            if (math.is_prime(j)) {\n                result += sentence[i];\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n                j++;\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpwiw0_7dd.d(26): Error: no property `length` for type `string`\n/tmp/tmpwiw0_7dd.d(34): Error: slice `result` is not mutable\n/tmp/tmpwiw0_7dd.d(39): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpwiw0_7dd.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiw0_7dd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpa0rvkr6_.d(27): Error: no property `size` for type `string`\n/tmp/tmpa0rvkr6_.d(31): Error: no property `size` for type `string`\n/tmp/tmpa0rvkr6_.d(33): Error: slice `res` is not mutable\n/tmp/tmpa0rvkr6_.d(38): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0rvkr6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmps_bc5atv.d(27): Error: no property `length` for type `string`\n/tmp/tmps_bc5atv.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmps_bc5atv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_bc5atv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(result.length() > 0)\n            {\n                if(math.is_prime(result.length()))\n                    result += sentence[i];\n            }\n        }\n        else\n        {\n            if(math.is_prime(len - i))\n                result += sentence[i];\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp7g919d7t.d(27): Error: no property `length` for type `string`\n/tmp/tmp7g919d7t.d(32): Error: no property `length` for type `string`\n/tmp/tmp7g919d7t.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp7g919d7t.d(35): Error: slice `result` is not mutable\n/tmp/tmp7g919d7t.d(40): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp7g919d7t.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g919d7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            count++;\n            i++;\n        }\n    }\n    if(count > 0)\n    {\n        result += \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp9202vv54.d(26): Error: no property `length` for type `string`\n/tmp/tmp9202vv54.d(37): Error: slice `result` is not mutable\n/tmp/tmp9202vv54.d(50): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9202vv54.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int count = 0;\n    int prime = 0;\n    string result = \"\";\n    while(i < n)\n    {\n        if(sentence[i] == ' ')\n        {\n            prime = 0;\n            count = 0;\n            while(j < n)\n            {\n                if(sentence[j] == ' ')\n                {\n                    j++;\n                    continue;\n                }\n                if(prime == 0)\n                {\n                    prime = math.prime(count);\n                    count++;\n                }\n                if(prime == 1)\n                {\n                    result += sentence[k];\n                    k++;\n                }\n                j++;\n            }\n            result += \" \";\n            i++;\n        }\n        else\n        {\n            prime = math.prime(count);\n            count++;\n            result += sentence[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp6q2oogd2.d(26): Error: no property `length` for type `string`\n/tmp/tmp6q2oogd2.d(50): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp6q2oogd2.d(55): Error: slice `result` is not mutable\n/tmp/tmp6q2oogd2.d(60): Error: slice `result` is not mutable\n/tmp/tmp6q2oogd2.d(65): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp6q2oogd2.d(67): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6q2oogd2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpp465m4sx.d(27): Error: no property `length` for type `string`\n/tmp/tmpp465m4sx.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpp465m4sx.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp465m4sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpadilzoov.d(26): Error: no property `length` for type `string`\n/tmp/tmpadilzoov.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpadilzoov.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadilzoov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpc2rf33lo.d(27): Error: no property `length` for type `string`\n/tmp/tmpc2rf33lo.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpc2rf33lo.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2rf33lo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp7lyh6tnt.d(27): Error: no property `length` for type `string`\n/tmp/tmp7lyh6tnt.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp7lyh6tnt.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lyh6tnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.size();\n    string res = \"\";\n    for (int i = 0; i < n; i++) {\n        if (math.is_prime(i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpuqx3deku.d(26): Error: no property `size` for type `string`\n/tmp/tmpuqx3deku.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpuqx3deku.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqx3deku.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            res.push_back(' ');\n            continue;\n        }\n        if(is_prime(sentence.substr(i, 2)))\n        {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp8_eaq6js.d(27): Error: no property `size` for type `string`\n/tmp/tmp8_eaq6js.d(31): Error: no property `push_back` for type `string`\n/tmp/tmp8_eaq6js.d(34): Error: undefined identifier `is_prime`\n/tmp/tmp8_eaq6js.d(36): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_eaq6js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len)\n    {\n        while(i < len && !is_prime(sentence[i]))\n            i++;\n        if(i < len)\n        {\n            while(j < len && !is_prime(sentence[j]))\n                j++;\n            if(i < j)\n                res += sentence[i];\n            i++;\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmps632_7o7.d(29): Error: no property `length` for type `string`\n/tmp/tmps632_7o7.d(32): Error: undefined identifier `is_prime`\n/tmp/tmps632_7o7.d(36): Error: undefined identifier `is_prime`\n/tmp/tmps632_7o7.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps632_7o7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < n; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpghtwzhjb.d(26): Error: no property `length` for type `string`\n/tmp/tmpghtwzhjb.d(32): Error: no property `length` for type `string`\n/tmp/tmpghtwzhjb.d(34): Error: slice `res` is not mutable\n/tmp/tmpghtwzhjb.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpghtwzhjb.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghtwzhjb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d =\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpzrtt5lyz.d(99): Error: expression expected, not `unittest`\n/tmp/tmpzrtt5lyz.d(100): Error: semicolon expected, not `{`\n/tmp/tmpzrtt5lyz.d(111): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrtt5lyz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res.append(\" \");\n            }\n        }\n        else\n        {\n            if(is_prime(sentence.substr(i, 1)))\n            {\n                res.append(sentence.substr(i, 1));\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpkcupjzmw.d(27): Error: no property `size` for type `string`\n/tmp/tmpkcupjzmw.d(31): Error: no property `size` for type `string`\n/tmp/tmpkcupjzmw.d(33): Error: no property `append` for type `string`\n/tmp/tmpkcupjzmw.d(38): Error: undefined identifier `is_prime`\n/tmp/tmpkcupjzmw.d(40): Error: no property `append` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkcupjzmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            count++;\n        }\n    }\n    \n    if(count == 0)\n    {\n        return \"\";\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpxs43xftt.d(27): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(32): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(34): Error: slice `res` is not mutable\n/tmp/tmpxs43xftt.d(39): Error: slice `res` is not mutable\n/tmp/tmpxs43xftt.d(44): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(46): Error: undefined identifier `is_prime`\n/tmp/tmpxs43xftt.d(57): Error: no property `length` for type `string`\n/tmp/tmpxs43xftt.d(59): Error: undefined identifier `is_prime`\n/tmp/tmpxs43xftt.d(61): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs43xftt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.size();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b =\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpzl_5ti5v.d(99): Error: expression expected, not `unittest`\n/tmp/tmpzl_5ti5v.d(100): Error: semicolon expected, not `{`\n/tmp/tmpzl_5ti5v.d(111): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzl_5ti5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string res = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                res += \" \";\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            count++;\n            while(i < len && sentence[i] != ' ')\n            {\n                res += sentence[i];\n                i++;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpz4z8wl2f.d(26): Error: no property `length` for type `string`\n/tmp/tmpz4z8wl2f.d(37): Error: slice `res` is not mutable\n/tmp/tmpz4z8wl2f.d(47): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4z8wl2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    for(int i = 0; i < res.size(); i++)\n    {\n        if(is_prime(res[i]))\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpq90ipuil.d(27): Error: no property `size` for type `string`\n/tmp/tmpq90ipuil.d(31): Error: no property `size` for type `string`\n/tmp/tmpq90ipuil.d(33): Error: slice `res` is not mutable\n/tmp/tmpq90ipuil.d(38): Error: slice `res` is not mutable\n/tmp/tmpq90ipuil.d(42): Error: no property `size` for type `string`\n/tmp/tmpq90ipuil.d(44): Error: undefined identifier `is_prime`\n/tmp/tmpq90ipuil.d(46): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq90ipuil.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpgc5t0_yk.d(26): Error: no property `length` for type `string`\n/tmp/tmpgc5t0_yk.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpgc5t0_yk.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgc5t0_yk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1)\n        {\n            res += sentence.substr(i, j - i);\n            res += \" \";\n        }\n        i = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpyofam_ep.d(27): Error: no property `length` for type `string`\n/tmp/tmpyofam_ep.d(42): Error: no property `substr` for type `string`\n/tmp/tmpyofam_ep.d(43): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyofam_ep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int i = 0;\n    while (i < sentence.size()) {\n        int j = i;\n        while (j < sentence.size() && sentence[j] != ' ') {\n            j++;\n        }\n        if (math.is_prime(j - i)) {\n            result += sentence.substr(i, j - i);\n        }\n        i = j + 1;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp9y_k3swk.d(28): Error: no property `size` for type `string`\n/tmp/tmp9y_k3swk.d(30): Error: no property `size` for type `string`\n/tmp/tmp9y_k3swk.d(33): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp9y_k3swk.d(34): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9y_k3swk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpvux71026.d(27): Error: no property `length` for type `string`\n/tmp/tmpvux71026.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpvux71026.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvux71026.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(math.is_prime(res[i]))\n        {\n            count++;\n        }\n    }\n    \n    if(count == 0)\n    {\n        return \"\";\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(math.is_prime(res[i]))\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(res[i] == ' ')\n        {\n            res[i] = ' ';\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmppnx5w7cu.d(27): Error: no property `length` for type `string`\n/tmp/tmppnx5w7cu.d(32): Error: no property `length` for type `string`\n/tmp/tmppnx5w7cu.d(34): Error: slice `res` is not mutable\n/tmp/tmppnx5w7cu.d(39): Error: slice `res` is not mutable\n/tmp/tmppnx5w7cu.d(44): Error: no property `length` for type `string`\n/tmp/tmppnx5w7cu.d(46): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmppnx5w7cu.d(57): Error: no property `length` for type `string`\n/tmp/tmppnx5w7cu.d(59): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmppnx5w7cu.d(61): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmppnx5w7cu.d(65): Error: no property `length` for type `string`\n/tmp/tmppnx5w7cu.d(69): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnx5w7cu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        if(is_prime(sentence.substr(i, 2)))\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpid0xttpw.d(27): Error: no property `size` for type `string`\n/tmp/tmpid0xttpw.d(31): Error: slice `res` is not mutable\n/tmp/tmpid0xttpw.d(34): Error: undefined identifier `is_prime`\n/tmp/tmpid0xttpw.d(36): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid0xttpw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmps_bc5atv.d(27): Error: no property `length` for type `string`\n/tmp/tmps_bc5atv.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmps_bc5atv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_bc5atv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.length(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        if(math.is_prime(res.length() - i))\n        {\n            res.erase(i, 1);\n        }\n    }\n    \n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmph0miw6cn.d(27): Error: no property `length` for type `string`\n/tmp/tmph0miw6cn.d(31): Error: no property `length` for type `string`\n/tmp/tmph0miw6cn.d(33): Error: slice `res` is not mutable\n/tmp/tmph0miw6cn.d(38): Error: slice `res` is not mutable\n/tmp/tmph0miw6cn.d(42): Error: no property `length` for type `string`\n/tmp/tmph0miw6cn.d(44): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmph0miw6cn.d(46): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0miw6cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(result.length() > 0)\n            {\n                if(math.is_prime(result.length()))\n                {\n                    result += sentence[i];\n                }\n            }\n            else\n            {\n                result += sentence[i];\n            }\n        }\n        else\n        {\n            if(result.length() > 0)\n            {\n                if(math.is_prime(result.length()))\n                {\n                    result += sentence[i];\n                }\n            }\n            else\n            {\n                result += sentence[i];\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmporqy0b15.d(27): Error: no property `length` for type `string`\n/tmp/tmporqy0b15.d(32): Error: no property `length` for type `string`\n/tmp/tmporqy0b15.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmporqy0b15.d(36): Error: slice `result` is not mutable\n/tmp/tmporqy0b15.d(41): Error: slice `result` is not mutable\n/tmp/tmporqy0b15.d(46): Error: no property `length` for type `string`\n/tmp/tmporqy0b15.d(48): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmporqy0b15.d(50): Error: slice `result` is not mutable\n/tmp/tmporqy0b15.d(55): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporqy0b15.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp5_rkmwtd.d(27): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(32): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(34): Error: slice `res` is not mutable\n/tmp/tmp5_rkmwtd.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp5_rkmwtd.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_rkmwtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(i))\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpj9btl0sk.d(27): Error: no property `length` for type `string`\n/tmp/tmpj9btl0sk.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpj9btl0sk.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9btl0sk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.size()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp95v2ddzo.d(27): Error: no property `size` for type `string`\n/tmp/tmp95v2ddzo.d(31): Error: no property `size` for type `string`\n/tmp/tmp95v2ddzo.d(33): Error: slice `res` is not mutable\n/tmp/tmp95v2ddzo.d(38): Error: undefined identifier `is_prime`\n/tmp/tmp95v2ddzo.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95v2ddzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            if(is_prime(len - i))\n            {\n                result += sentence[i];\n                count++;\n            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpj3mflbj9.d(26): Error: no property `length` for type `string`\n/tmp/tmpj3mflbj9.d(37): Error: slice `result` is not mutable\n/tmp/tmpj3mflbj9.d(44): Error: undefined identifier `is_prime`\n/tmp/tmpj3mflbj9.d(46): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3mflbj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                    res += sentence[i];\n            }\n        }\n        else\n        {\n            if(math.is_prime(i))\n                res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp6z4jf_el.d(26): Error: no property `length` for type `string`\n/tmp/tmp6z4jf_el.d(32): Error: no property `length` for type `string`\n/tmp/tmp6z4jf_el.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp6z4jf_el.d(35): Error: slice `res` is not mutable\n/tmp/tmp6z4jf_el.d(40): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp6z4jf_el.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6z4jf_el.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpuqberzsn.d(27): Error: no property `length` for type `string`\n/tmp/tmpuqberzsn.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpuqberzsn.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqberzsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp5qu5mj7_.d(26): Error: no property `length` for type `string`\n/tmp/tmp5qu5mj7_.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp5qu5mj7_.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qu5mj7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                result += sentence[j];\n                count = 0;\n            }\n            j = i + 1;\n        }\n        else\n        {\n            count++;\n            i++;\n        }\n    }\n    if(count > 0)\n    {\n        result += sentence[j];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpy95o5fet.d(27): Error: no property `length` for type `string`\n/tmp/tmpy95o5fet.d(37): Error: slice `result` is not mutable\n/tmp/tmpy95o5fet.d(50): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy95o5fet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(count))\n        {\n            count++;\n        }\n        else\n        {\n            count = 0;\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmptl_pevp4.d(27): Error: no property `length` for type `string`\n/tmp/tmptl_pevp4.d(32): Error: no property `length` for type `string`\n/tmp/tmptl_pevp4.d(34): Error: slice `res` is not mutable\n/tmp/tmptl_pevp4.d(39): Error: slice `res` is not mutable\n/tmp/tmptl_pevp4.d(44): Error: no property `length` for type `string`\n/tmp/tmptl_pevp4.d(46): Error: undefined identifier `is_prime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptl_pevp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(sentence[i] - 'a'))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpj11g6bbw.d(27): Error: no property `length` for type `string`\n/tmp/tmpj11g6bbw.d(32): Error: no property `length` for type `string`\n/tmp/tmpj11g6bbw.d(34): Error: slice `res` is not mutable\n/tmp/tmpj11g6bbw.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpj11g6bbw.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj11g6bbw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    int i = 0;\n    int j = 0;\n    string res = \"\";\n    while (i < n) {\n        while (i < n && sentence[i] != ' ') {\n            i++;\n        }\n        if (i < n) {\n            i++;\n            while (i < n && sentence[i] != ' ') {\n                i++;\n            }\n        }\n        if (i < n) {\n            res += sentence[j++];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmphaq28ic5.d(26): Error: no property `length` for type `string`\n/tmp/tmphaq28ic5.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphaq28ic5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0, j = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            i++;\n            continue;\n        }\n        count = 0;\n        while (i < len && sentence[i] != ' ') {\n            count++;\n            i++;\n        }\n        if (count % 2 == 0) {\n            result += sentence[j];\n            j = i;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpyu3rh2jd.d(26): Error: no property `length` for type `string`\n/tmp/tmpyu3rh2jd.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyu3rh2jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < n; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpghtwzhjb.d(26): Error: no property `length` for type `string`\n/tmp/tmpghtwzhjb.d(32): Error: no property `length` for type `string`\n/tmp/tmpghtwzhjb.d(34): Error: slice `res` is not mutable\n/tmp/tmpghtwzhjb.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpghtwzhjb.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghtwzhjb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(result.length() > 0)\n            {\n                if(math.is_prime(result.length()))\n                {\n                    result += sentence[i];\n                }\n            }\n        }\n        else\n        {\n            if(math.is_prime(len - i))\n            {\n                result += sentence[i];\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp82fqk2k2.d(26): Error: no property `length` for type `string`\n/tmp/tmp82fqk2k2.d(32): Error: no property `length` for type `string`\n/tmp/tmp82fqk2k2.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp82fqk2k2.d(36): Error: slice `result` is not mutable\n/tmp/tmp82fqk2k2.d(42): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp82fqk2k2.d(44): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82fqk2k2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len)\n    {\n        while(i < len && !is_prime(sentence[i]))\n            i++;\n        if(i < len)\n        {\n            res += sentence[i];\n            i++;\n        }\n        while(i < len && is_prime(sentence[i]))\n            i++;\n        if(i < len)\n        {\n            res += sentence[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpw3vmgiul.d(29): Error: no property `length` for type `string`\n/tmp/tmpw3vmgiul.d(32): Error: undefined identifier `is_prime`\n/tmp/tmpw3vmgiul.d(36): Error: slice `res` is not mutable\n/tmp/tmpw3vmgiul.d(39): Error: undefined identifier `is_prime`\n/tmp/tmpw3vmgiul.d(43): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3vmgiul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res;\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(math.is_prime(res.length() + 1))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpxm3a9xeb.d(26): Error: no property `length` for type `string`\n/tmp/tmpxm3a9xeb.d(32): Error: no property `length` for type `string`\n/tmp/tmpxm3a9xeb.d(34): Error: slice `res` is not mutable\n/tmp/tmpxm3a9xeb.d(39): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpxm3a9xeb.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxm3a9xeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.size();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpl2530obq.d(27): Error: no property `size` for type `string`\n/tmp/tmpl2530obq.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpl2530obq.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2530obq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpuqberzsn.d(27): Error: no property `length` for type `string`\n/tmp/tmpuqberzsn.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpuqberzsn.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqberzsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < n; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpo6ejrfvr.d(26): Error: no property `length` for type `string`\n/tmp/tmpo6ejrfvr.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpo6ejrfvr.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6ejrfvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    for(int i = 0; i < sentence.length(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpa0vsza88.d(27): Error: no property `length` for type `string`\n/tmp/tmpa0vsza88.d(31): Error: slice `result` is not mutable\n/tmp/tmpa0vsza88.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0vsza88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i] - 'a'))\n        {\n            count++;\n        }\n    }\n    \n    if(count == 0)\n    {\n        return \"\";\n    }\n    \n    int index = 0;\n    for(int i = 0; i < res.length(); i++)\n    {\n        if(is_prime(res[i] - 'a'))\n        {\n            res[index] = res[i];\n            index++;\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpug8j3f1g.d(27): Error: no property `length` for type `string`\n/tmp/tmpug8j3f1g.d(32): Error: no property `length` for type `string`\n/tmp/tmpug8j3f1g.d(34): Error: slice `res` is not mutable\n/tmp/tmpug8j3f1g.d(39): Error: slice `res` is not mutable\n/tmp/tmpug8j3f1g.d(44): Error: no property `length` for type `string`\n/tmp/tmpug8j3f1g.d(46): Error: undefined identifier `is_prime`\n/tmp/tmpug8j3f1g.d(58): Error: no property `length` for type `string`\n/tmp/tmpug8j3f1g.d(60): Error: undefined identifier `is_prime`\n/tmp/tmpug8j3f1g.d(62): Error: cannot modify `immutable` expression `res[cast(ulong)index]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpug8j3f1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                    res += sentence[i];\n            }\n            else\n                res += sentence[i];\n        }\n        else\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmplgdncoqd.d(27): Error: no property `length` for type `string`\n/tmp/tmplgdncoqd.d(32): Error: no property `length` for type `string`\n/tmp/tmplgdncoqd.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmplgdncoqd.d(35): Error: slice `res` is not mutable\n/tmp/tmplgdncoqd.d(38): Error: slice `res` is not mutable\n/tmp/tmplgdncoqd.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgdncoqd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpf05_xoty.d(27): Error: no property `length` for type `string`\n/tmp/tmpf05_xoty.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpf05_xoty.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf05_xoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp5_rkmwtd.d(27): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(32): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(34): Error: slice `res` is not mutable\n/tmp/tmp5_rkmwtd.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp5_rkmwtd.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_rkmwtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpan7h7yfg.d(26): Error: no property `length` for type `string`\n/tmp/tmpan7h7yfg.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpan7h7yfg.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan7h7yfg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            if(is_prime(i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpsi73mjc2.d(27): Error: no property `length` for type `string`\n/tmp/tmpsi73mjc2.d(32): Error: slice `res` is not mutable\n/tmp/tmpsi73mjc2.d(36): Error: undefined identifier `is_prime`\n/tmp/tmpsi73mjc2.d(38): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsi73mjc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(sentence.substr(i, sentence.size() - i)))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpipmw47na.d(27): Error: no property `size` for type `string`\n/tmp/tmpipmw47na.d(31): Error: no property `size` for type `string`\n/tmp/tmpipmw47na.d(33): Error: slice `res` is not mutable\n/tmp/tmpipmw47na.d(38): Error: undefined identifier `is_prime`\n/tmp/tmpipmw47na.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipmw47na.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpat2tp4od.d(100): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat2tp4od.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpfgiebufz.d(99): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgiebufz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmp5_rkmwtd.d(27): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(32): Error: no property `length` for type `string`\n/tmp/tmp5_rkmwtd.d(34): Error: slice `res` is not mutable\n/tmp/tmp5_rkmwtd.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp5_rkmwtd.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_rkmwtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpq0pgfcb3.d(27): Error: no property `length` for type `string`\n/tmp/tmpq0pgfcb3.d(32): Error: no property `length` for type `string`\n/tmp/tmpq0pgfcb3.d(34): Error: slice `res` is not mutable\n/tmp/tmpq0pgfcb3.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0pgfcb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp5qu5mj7_.d(26): Error: no property `length` for type `string`\n/tmp/tmp5qu5mj7_.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp5qu5mj7_.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qu5mj7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.size() > 0)\n            {\n                if(math.is_prime(res.size()))\n                {\n                    res += \" \";\n                }\n                else\n                {\n                    res = \"\";\n                }\n            }\n        }\n        else\n        {\n            if(math.is_prime(i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpnoussf11.d(27): Error: no property `size` for type `string`\n/tmp/tmpnoussf11.d(31): Error: no property `size` for type `string`\n/tmp/tmpnoussf11.d(33): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpnoussf11.d(35): Error: slice `res` is not mutable\n/tmp/tmpnoussf11.d(45): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpnoussf11.d(47): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnoussf11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    string res = \"\";\n    for(int i = 0; i < n; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                {\n                    res += sentence[i];\n                }\n            }\n        }\n        else\n        {\n            if(math.is_prime(i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpsf0cp2qp.d(26): Error: no property `length` for type `string`\n/tmp/tmpsf0cp2qp.d(32): Error: no property `length` for type `string`\n/tmp/tmpsf0cp2qp.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpsf0cp2qp.d(36): Error: slice `res` is not mutable\n/tmp/tmpsf0cp2qp.d(42): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpsf0cp2qp.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsf0cp2qp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            if (math.is_prime(res.size() + 1)) {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpudo8o01b.d(27): Error: no property `size` for type `string`\n/tmp/tmpudo8o01b.d(29): Error: no property `size` for type `string`\n/tmp/tmpudo8o01b.d(30): Error: slice `res` is not mutable\n/tmp/tmpudo8o01b.d(33): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpudo8o01b.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudo8o01b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                result += sentence[j];\n                result += sentence[k];\n                count = 0;\n            }\n            j++;\n            k++;\n        }\n        else\n        {\n            if(is_prime(sentence[i] - 'a'))\n            {\n                result += sentence[i];\n                count++;\n            }\n            i++;\n        }\n    }\n    if(count > 0)\n    {\n        result += sentence[j];\n        result += sentence[k];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpncvf8vbm.d(26): Error: no property `length` for type `string`\n/tmp/tmpncvf8vbm.d(38): Error: slice `result` is not mutable\n/tmp/tmpncvf8vbm.d(39): Error: slice `result` is not mutable\n/tmp/tmpncvf8vbm.d(47): Error: undefined identifier `is_prime`\n/tmp/tmpncvf8vbm.d(49): Error: slice `result` is not mutable\n/tmp/tmpncvf8vbm.d(57): Error: slice `result` is not mutable\n/tmp/tmpncvf8vbm.d(58): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncvf8vbm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < n; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpo6ejrfvr.d(26): Error: no property `length` for type `string`\n/tmp/tmpo6ejrfvr.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpo6ejrfvr.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6ejrfvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len) {\n        while(i < len && !is_prime(sentence[i]))\n            i++;\n        if(i < len) {\n            res += sentence[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpplk3nzbv.d(29): Error: no property `length` for type `string`\n/tmp/tmpplk3nzbv.d(31): Error: undefined identifier `is_prime`\n/tmp/tmpplk3nzbv.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpplk3nzbv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res;\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += ' ';\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpseokudtn.d(26): Error: no property `length` for type `string`\n/tmp/tmpseokudtn.d(32): Error: no property `length` for type `string`\n/tmp/tmpseokudtn.d(34): Error: slice `res` is not mutable\n/tmp/tmpseokudtn.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseokudtn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp6ndtvfko.d(27): Error: no property `length` for type `string`\n/tmp/tmp6ndtvfko.d(32): Error: no property `length` for type `string`\n/tmp/tmp6ndtvfko.d(34): Error: slice `res` is not mutable\n/tmp/tmp6ndtvfko.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp6ndtvfko.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ndtvfko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len)\n    {\n        while(i < len && !isprime(sentence[i]))\n        {\n            i++;\n        }\n        if(i < len)\n        {\n            res += sentence[i];\n            i++;\n        }\n        while(i < len && isprime(sentence[i]))\n        {\n            i++;\n        }\n        if(i < len)\n        {\n            res += \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp31qcbb5x.d(29): Error: no property `length` for type `string`\n/tmp/tmp31qcbb5x.d(32): Error: undefined identifier `isprime`\n/tmp/tmp31qcbb5x.d(38): Error: slice `res` is not mutable\n/tmp/tmp31qcbb5x.d(41): Error: undefined identifier `isprime`\n/tmp/tmp31qcbb5x.d(47): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31qcbb5x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpuqberzsn.d(27): Error: no property `length` for type `string`\n/tmp/tmpuqberzsn.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpuqberzsn.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqberzsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result.append(\" \");\n        }\n        else\n        {\n            result.append(sentence[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmp1cdkb5_p.d(27): Error: no property `length` for type `string`\n/tmp/tmp1cdkb5_p.d(32): Error: no property `append` for type `string`\n/tmp/tmp1cdkb5_p.d(36): Error: no property `append` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cdkb5_p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (math.is_prime(len - i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpp465m4sx.d(27): Error: no property `length` for type `string`\n/tmp/tmpp465m4sx.d(29): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpp465m4sx.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp465m4sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    for(int i = 0; i < sentence.size(); i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += sentence[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmpcicenwmo.d(27): Error: no property `size` for type `string`\n/tmp/tmpcicenwmo.d(31): Error: slice `result` is not mutable\n/tmp/tmpcicenwmo.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcicenwmo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    int k = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpkw54zz1o.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkw54zz1o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmppoacujzk.d(27): Error: no property `length` for type `string`\n/tmp/tmppoacujzk.d(32): Error: no property `length` for type `string`\n/tmp/tmppoacujzk.d(34): Error: slice `res` is not mutable\n/tmp/tmppoacujzk.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppoacujzk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmpdw1kuip3.d(27): Error: no property `length` for type `string`\n/tmp/tmpdw1kuip3.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpdw1kuip3.d(30): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdw1kuip3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = sentence.length();\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(j != 0)\n            {\n                res += sentence[j];\n                j = 0;\n            }\n            k++;\n        }\n        else\n        {\n            if(k == 0)\n            {\n                res += sentence[i];\n                j = i;\n            }\n            else\n            {\n                j++;\n            }\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmptss2lj2s.d(30): Error: no property `length` for type `string`\n/tmp/tmptss2lj2s.d(37): Error: slice `res` is not mutable\n/tmp/tmptss2lj2s.d(46): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptss2lj2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmptmkfc0w3.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmkfc0w3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpzpwkerhv.d(27): Error: no property `length` for type `string`\n/tmp/tmpzpwkerhv.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpzpwkerhv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpwkerhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpf05_xoty.d(27): Error: no property `length` for type `string`\n/tmp/tmpf05_xoty.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpf05_xoty.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf05_xoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmptmkfc0w3.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmkfc0w3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    string res = \"\";\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpan7h7yfg.d(26): Error: no property `length` for type `string`\n/tmp/tmpan7h7yfg.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpan7h7yfg.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan7h7yfg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpsdhiiwqm.d(100): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdhiiwqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpf05_xoty.d(27): Error: no property `length` for type `string`\n/tmp/tmpf05_xoty.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpf05_xoty.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf05_xoty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                res += \" \";\n            }\n        }\n        else\n        {\n            if(is_prime(res.length()))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp6ndtvfko.d(27): Error: no property `length` for type `string`\n/tmp/tmp6ndtvfko.d(32): Error: no property `length` for type `string`\n/tmp/tmp6ndtvfko.d(34): Error: slice `res` is not mutable\n/tmp/tmp6ndtvfko.d(39): Error: undefined identifier `is_prime`\n/tmp/tmp6ndtvfko.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ndtvfko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    for(int i = 0; i < sentence.size(); i++) {\n        if(sentence[i] == ' ') {\n            if(res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            if(is_prime(res.size())) {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmphbgub954.d(27): Error: no property `size` for type `string`\n/tmp/tmphbgub954.d(29): Error: no property `size` for type `string`\n/tmp/tmphbgub954.d(30): Error: slice `res` is not mutable\n/tmp/tmphbgub954.d(33): Error: undefined identifier `is_prime`\n/tmp/tmphbgub954.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbgub954.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (is_prime(i)) {\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpzpwkerhv.d(27): Error: no property `length` for type `string`\n/tmp/tmpzpwkerhv.d(29): Error: undefined identifier `is_prime`\n/tmp/tmpzpwkerhv.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpwkerhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.size();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d =\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpefs4y9ut.d(99): Error: expression expected, not `unittest`\n/tmp/tmpefs4y9ut.d(100): Error: semicolon expected, not `{`\n/tmp/tmpefs4y9ut.d(111): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefs4y9ut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string result = \"\";\n    while(i < len)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(count > 0)\n            {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            if(count == 0)\n            {\n                result += sentence[i];\n                i++;\n                count++;\n            }\n            else\n            {\n                count++;\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmpjfeerqib.d(26): Error: no property `length` for type `string`\n/tmp/tmpjfeerqib.d(37): Error: slice `result` is not mutable\n/tmp/tmpjfeerqib.d(46): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjfeerqib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(is_prime(res.length()))\n                {\n                    res += sentence[i];\n                }\n            }\n            else\n            {\n                res += sentence[i];\n            }\n        }\n        else\n        {\n            if(is_prime(i))\n            {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmps3a12as5.d(27): Error: no property `length` for type `string`\n/tmp/tmps3a12as5.d(32): Error: no property `length` for type `string`\n/tmp/tmps3a12as5.d(34): Error: undefined identifier `is_prime`\n/tmp/tmps3a12as5.d(36): Error: slice `res` is not mutable\n/tmp/tmps3a12as5.d(41): Error: slice `res` is not mutable\n/tmp/tmps3a12as5.d(46): Error: undefined identifier `is_prime`\n/tmp/tmps3a12as5.d(48): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3a12as5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.size();\n    for(int i = 0; i < len; i++)\n    {\n        if(is_prime(sentence[i] - 'a'))\n            res += sentence[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpl2530obq.d(27): Error: no property `size` for type `string`\n/tmp/tmpl2530obq.d(30): Error: undefined identifier `is_prime`\n/tmp/tmpl2530obq.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2530obq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count == 0) {\n                result += sentence[j];\n                j++;\n            }\n            count++;\n        }\n        else {\n            count = 0;\n            j = i;\n        }\n        i++;\n    }\n    if (count == 0) {\n        result += sentence[j];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmpzdpjh1jl.d(26): Error: no property `length` for type `string`\n/tmp/tmpzdpjh1jl.d(35): Error: slice `result` is not mutable\n/tmp/tmpzdpjh1jl.d(47): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdpjh1jl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += \" \";\n                count = 0;\n            }\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\n') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\t') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\r') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\b') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\f') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\v') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i++;\n            continue;\n        }\n        if (sentence[i] == '\\0') {\n            i\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmp2ii6l796.d(103): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp2ii6l796.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2ii6l796.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2ii6l796.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ii6l796.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int n = sentence.size();\n    string res;\n    for (int i = 0; i < n; i++) {\n        if (is_prime(sentence[i] - 'a')) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmp224lpdvp.d(26): Error: no property `size` for type `string`\n/tmp/tmp224lpdvp.d(29): Error: undefined identifier `is_prime`\n/tmp/tmp224lpdvp.d(30): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp224lpdvp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    int len = sentence.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count2 = 0;\n    string result = \"\";\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count > 0) {\n                result += sentence[j];\n                count = 0;\n                j = i + 1;\n            }\n        }\n        else {\n            count++;\n        }\n        i++;\n    }\n    if (count > 0) {\n        result += sentence[j];\n    }\n    i = 0;\n    while (i < len) {\n        if (sentence[i] == ' ') {\n            if (count2 > 0) {\n                result += sentence[k];\n                count2 = 0;\n                k = i + 1;\n            }\n        }\n        else {\n            count2++;\n        }\n        i++;\n    }\n    if (count2 > 0) {\n        result += sentence[k];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmphwh3e0pr.d(26): Error: no property `length` for type `string`\n/tmp/tmphwh3e0pr.d(36): Error: slice `result` is not mutable\n/tmp/tmphwh3e0pr.d(47): Error: slice `result` is not mutable\n/tmp/tmphwh3e0pr.d(53): Error: slice `result` is not mutable\n/tmp/tmphwh3e0pr.d(64): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwh3e0pr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len)\n    {\n        int j = i;\n        while(j < len && sentence[j] != ' ')\n            j++;\n        if(j - i > 1)\n        {\n            res += sentence.substr(i, j - i);\n            i = j;\n        }\n        else\n            i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "/tmp/tmpcrmme2oz.d(27): Error: no property `length` for type `string`\n/tmp/tmpcrmme2oz.d(36): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrmme2oz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(sentence[i] == ' ')\n        {\n            if(res.length() > 0)\n            {\n                if(math.is_prime(res.length()))\n                    res += sentence[i];\n            }\n        }\n        else\n        {\n            if(math.is_prime(i))\n                res += sentence[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "/tmp/tmpvxrxxnxh.d(27): Error: no property `length` for type `string`\n/tmp/tmpvxrxxnxh.d(32): Error: no property `length` for type `string`\n/tmp/tmpvxrxxnxh.d(34): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpvxrxxnxh.d(35): Error: slice `res` is not mutable\n/tmp/tmpvxrxxnxh.d(40): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpvxrxxnxh.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxrxxnxh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string sentence) \n{\n    string res;\n    int i = 0;\n    while(i < sentence.size()) {\n        int j = i;\n        while(j < sentence.size() && sentence[j] != ' ') {\n            j++;\n        }\n        if(j - i > 1) {\n            res += sentence.substr(i, j - i);\n            res += \" \";\n        }\n        i = j + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "/tmp/tmp41dj2sfh.d(28): Error: no property `size` for type `string`\n/tmp/tmp41dj2sfh.d(30): Error: no property `size` for type `string`\n/tmp/tmp41dj2sfh.d(34): Error: no property `substr` for type `string`\n/tmp/tmp41dj2sfh.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41dj2sfh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}