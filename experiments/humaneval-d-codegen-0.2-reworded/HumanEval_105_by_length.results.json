{
  "name": "HumanEval_105_by_length",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n",
  "tests": "unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpvkavatyu.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpvkavatyu.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpvkavatyu.d(32): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvkavatyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        ret[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        ret[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp1_h459mu.d(30): Error: no property `format` for type `string`\n/tmp/tmp1_h459mu.d(35): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_h459mu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 10 && arr[i] <= 19) {\n            result[i] = \"Two\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 20 && arr[i] <= 29) {\n            result[i] = \"Three\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 30 && arr[i] <= 39) {\n            result[i] = \"Four\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 40 && arr[i] <= 49) {\n            result[i] = \"Five\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 50 && arr[i] <= 59) {\n            result[i] = \"Six\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 60 && arr[i] <= 69) {\n            result[i] = \"Seven\" + arr[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 70 && arr[i] <= 79) {\n            result[i] = \"Eight\" + arr[i];\n        }\n    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpnbjmhvzj.d(75): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbjmhvzj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int diff = max - min + 1;\n    \n    string[] result = new string[diff];\n    \n    for (int i = 0; i < diff; i++) {\n        result[i] = String.valueOf(i + min);\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[arr[i] - min] = String.valueOf(arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp97vsd6_a.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp97vsd6_a.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmp97vsd6_a.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp97vsd6_a.d(32): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp97vsd6_a.d(32): Error: found `}` when expecting `;` following statement\n/tmp/tmp97vsd6_a.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97vsd6_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        if (arr_sorted[i] < 1) continue;\n        ret[i] = get_digit_name(arr_sorted[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp61dah2u_.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp61dah2u_.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp61dah2u_.d(34): Error: undefined identifier `get_digit_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61dah2u_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[0];\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int diff = max - min + 1;\n    \n    string[] result = new string[diff];\n    \n    for (int i = 0; i < diff; i++) {\n        result[i] = get_digit(i + min);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpt9e9jiye.d(33): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpt9e9jiye.d(34): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpt9e9jiye.d(42): Error: undefined identifier `get_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9e9jiye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int start = 0;\n    int end = arr.length - 1;\n    \n    while (start < end)\n    {\n        if (arr[start] > 9 || arr[end] > 9)\n        {\n            start++;\n            end--;\n            continue;\n        }\n        \n        if (arr[start] < 1 || arr[end] < 1)\n        {\n            start++;\n            end--;\n            continue;\n        }\n        \n        if (arr[start] == arr[end])\n        {\n            start++;\n            end--;\n            continue;\n        }\n        \n        break;\n    }\n    \n    if (start == end)\n    {\n        return new string[] { \"\" + arr[start] };\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = start; i <= end; i++)\n    {\n        result[i] = \"One\" + arr[i];\n    }\n    \n    for (int i = start + 1; i <= end; i++)\n    {\n        result[i] = \"Two\" + arr[i];\n    }\n    \n    for (int i = start + 2; i <= end; i++)\n    {\n        result[i] = \"Three\" + arr[i];\n    }\n    \n    for (int i = start + 3; i <= end; i++)\n    {\n        result[i] = \"Four\" + arr[i];\n    }\n    \n    for (int i = start + 4; i <= end; i++)\n    {\n        result[i] = \"Five\" + arr[i];\n    }\n    \n    for (int i = start + 5; i <= end; i++)\n    {\n        result[i] = \"Six\" + arr[i];\n    }\n    \n    for (int i = start + 6; i <= end; i++)\n    {\n        result[i] = \"Seven\" + arr[i];\n    }\n    \n    for (int i = start + 7; i <= end; i++)\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp1b6bzv3w.d(57): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp1b6bzv3w.d(57): Error: found `}` when expecting `;` following statement\n/tmp/tmp1b6bzv3w.d(57): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp1b6bzv3w.d(99): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1b6bzv3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\";\n        }\n        else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\";\n        }\n        else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\";\n        }\n        else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\";\n        }\n        else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\";\n        }\n        else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\";\n        }\n        else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\";\n        }\n        else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\";\n        }\n        else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"Nine\";\n        }\n        else {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpdn86slz_.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpdn86slz_.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdn86slz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr1 = new long[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        arr1[i] = arr[i];\n    \n    arr1.sort();\n    \n    string[] ret = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        ret[i] = get_digit(arr1[i]);\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpvem81myb.d(31): Error: no property `sort` for type `long[]`\n/tmp/tmpvem81myb.d(35): Error: undefined identifier `get_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvem81myb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n            max = arr[i];\n        if (arr[i] < min)\n            min = arr[i];\n    }\n    \n    if (max - min > 9)\n        return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > 9)\n            result[i] = \"Nine\";\n        else if (arr[i] > 5)\n            result[i] = \"Eight\";\n        else if (arr[i] > 3)\n            result[i] = \"Seven\";\n        else if (arr[i] > 2)\n            result[i] = \"Six\";\n        else if (arr[i] > 1)\n            result[i] = \"Five\";\n        else if (arr[i] > 0)\n            result[i] = \"Four\";\n        else if (arr[i] > -1)\n            result[i] = \"Three\";\n        else if (arr[i] > -3)\n            result[i] = \"Two\";\n        else if (arr[i] > -5)\n            result[i] = \"One\";\n        else\n            result[i] = \"Zero\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi4c4rd79.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42974d]\n??:? void tmpi4c4rd79.__unittest_L67_C1() [0x42859f]\n??:? void tmpi4c4rd79.__modtest() [0x4289b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e323]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4294a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42947d]\n??:? runModuleUnitTests [0x42e0f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429c10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] arr_int = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        arr_int[i] = (int)arr[i];\n    }\n    \n    int[] sorted_arr_int = sort(arr_int);\n    \n    string[] sorted_arr = new string[arr.length];\n    for (int i = 0; i < sorted_arr_int.length; i++) {\n        sorted_arr[i] = get_digit(sorted_arr_int[i]);\n    }\n    \n    return sorted_arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpiscreqff.d(28): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiscreqff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    string[] ret = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        ret[i] = digit_to_name(arr[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpfkcu_njc.d(37): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkcu_njc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] % 10];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_order[digit_count[i]] = i;\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] % 10];\n        arr[i] = digit_order[digit];\n    }\n    \n    return new string[arr.length];\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpihwxkhyz.d(27): Error: a struct is not a valid initializer for a `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihwxkhyz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9)\n        {\n            result[i] = \"One\" + arr_copy[i];\n        }\n        else\n        {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpthjsef5q.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpthjsef5q.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpthjsef5q.d(36): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthjsef5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        result[i] = arr[i] == 1 ? \"One\" : arr[i] == 2 ? \"Two\" : arr[i] == 3 ? \"Three\" : arr[i] == 4 ? \"Four\" : arr[i] == 5 ? \"Five\" : arr[i] == 6 ? \"Six\" : arr[i] == 7 ? \"Seven\" : arr[i] == 8 ? \"Eight\" : arr[i] == 9 ? \"Nine\" : \"\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = result[i].substring(0, 1).toUpperCase() + result[i].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpt_33yrt3.d(34): Error: no property `substring` for type `string`\n/tmp/tmpt_33yrt3.d(34): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_33yrt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n            result[i] = \"One\" + arr_sorted[i];\n        else\n            result[i] = \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpt5jjyeg8.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpt5jjyeg8.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpt5jjyeg8.d(34): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5jjyeg8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp5x7_ge6h.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp5x7_ge6h.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5x7_ge6h.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmp5x7_ge6h.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5x7_ge6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0], max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        min = std.math.min(min, arr[i]);\n        max = std.math.max(max, arr[i]);\n    }\n    \n    if (min != 1 || max != 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_to_name(arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpf7ihtn1s.d(28): Error: undefined identifier `min` in module `std.math`, did you mean function `sin`?\n/tmp/tmpf7ihtn1s.d(29): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\n/tmp/tmpf7ihtn1s.d(36): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7ihtn1s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > 9)\n        {\n            ret[i] = \"Nine\";\n        }\n        else if (arr[i] > 5)\n        {\n            ret[i] = \"Eight\";\n        }\n        else if (arr[i] > 3)\n        {\n            ret[i] = \"Seven\";\n        }\n        else if (arr[i] > 2)\n        {\n            ret[i] = \"Six\";\n        }\n        else if (arr[i] > 1)\n        {\n            ret[i] = \"Five\";\n        }\n        else if (arr[i] > 0)\n        {\n            ret[i] = \"Four\";\n        }\n        else if (arr[i] > -1)\n        {\n            ret[i] = \"Three\";\n        }\n        else if (arr[i] > -3)\n        {\n            ret[i] = \"Two\";\n        }\n        else if (arr[i] > -5)\n        {\n            ret[i] = \"One\";\n        }\n        else\n        {\n            ret[i] = \"Zero\";\n        }\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1n335k2w.d(89): unittest failure\n----------------\n??:? _d_unittestp [0x42974d]\n??:? void tmp1n335k2w.__unittest_L85_C1() [0x42859f]\n??:? void tmp1n335k2w.__modtest() [0x4289b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e323]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4294a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42947d]\n??:? runModuleUnitTests [0x42e0f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429c10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr1 = new long[arr.length];\n    long[] arr2 = new long[arr.length];\n    long[] arr3 = new long[arr.length];\n    long[] arr4 = new long[arr.length];\n    long[] arr5 = new long[arr.length];\n    long[] arr6 = new long[arr.length];\n    long[] arr7 = new long[arr.length];\n    long[] arr8 = new long[arr.length];\n    long[] arr9 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        arr1[i] = arr[i];\n        arr2[i] = arr[i];\n        arr3[i] = arr[i];\n        arr4[i] = arr[i];\n        arr5[i] = arr[i];\n        arr6[i] = arr[i];\n        arr7[i] = arr[i];\n        arr8[i] = arr[i];\n        arr9[i] = arr[i];\n    }\n    \n    sort(arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr1[i] == 1 && arr2[i] == 1 && arr3[i] == 1 && arr4[i] == 1 && arr5[i] == 1 && arr6[i] == 1 && arr7[i] == 1 && arr8[i] == 1 && arr9[i] == 1) {\n            result[i] = \"One\";\n        } else if (arr1[i] == 2 && arr2[i] == 2 && arr3[i] == 2 && arr4[i] == 2 && arr5[i] == 2 && arr6[i] == 2 && arr7[i] == 2 && arr8[i] == 2 && arr9[i] == 2) {\n            result[\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpxp25t7jd.d(56): Error: expression expected, not `unittest`\n/tmp/tmpxp25t7jd.d(57): Error: found `{` when expecting `,`\n/tmp/tmpxp25t7jd.d(58): Error: expression expected, not `alias`\n/tmp/tmpxp25t7jd.d(58): Error: found `candidate` when expecting `,`\n/tmp/tmpxp25t7jd.d(58): Error: expression expected, not `=`\n/tmp/tmpxp25t7jd.d(58): Error: found `by_length` when expecting `,`\n/tmp/tmpxp25t7jd.d(58): Error: expression expected, not `;`\n/tmp/tmpxp25t7jd.d(60): Error: found `assert` when expecting `,`\n/tmp/tmpxp25t7jd.d(60): Error: found `;` when expecting `,`\n/tmp/tmpxp25t7jd.d(61): Error: found `;` when expecting `,`\n/tmp/tmpxp25t7jd.d(62): Error: found `;` when expecting `,`\n/tmp/tmpxp25t7jd.d(63): Error: found `;` when expecting `,`\n/tmp/tmpxp25t7jd.d(64): Error: found `;` when expecting `,`\n/tmp/tmpxp25t7jd.d(65): Error: expression expected, not `}`\n/tmp/tmpxp25t7jd.d(66): Error: found `void` when expecting `,`\n/tmp/tmpxp25t7jd.d(66): Error: found `{` when expecting `,`\n/tmp/tmpxp25t7jd.d(66): Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\" + arr_sorted[i] - 20;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\" + arr_sorted[i] - 30;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\" + arr_sorted[i] - 40;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\" + arr_sorted[i] - 50;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_s\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmprkhs30h5.d(69): Error: found `unittest` when expecting `)`\n/tmp/tmprkhs30h5.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprkhs30h5.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkhs30h5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] count = new int[10];\n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i] - 1]++;\n    }\n    \n    int[] index = new int[10];\n    for (int i = 0; i < 10; i++)\n    {\n        index[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 10)\n            index[arr[i] - 1]++;\n    }\n    \n    for (int i = 0; i < 10; i++)\n    {\n        if (count[i] > 0)\n            index[i] = index[i] / count[i];\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 10)\n            result[i] = String.valueOf(index[arr[i] - 1]);\n        else\n            result[i] = String.valueOf(arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpjm4sc55d.d(55): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpjm4sc55d.d(57): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjm4sc55d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    // sort the array\n    sort(arr);\n    \n    // reverse the array\n    reverse(arr);\n    \n    // convert the array to string\n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_map[arr[i]];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpou_0tepf.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpou_0tepf.d(29): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpou_0tepf.d(32): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpou_0tepf.d(37): Error: cannot implicitly convert expression `digit_map[cast(ulong)arr[cast(ulong)i]]` of type `int` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpou_0tepf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) {\n            arr[i] = 0;\n        }\n        else {\n            arr[i] = digit_map[arr[i] - 1];\n        }\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = arr[i] == 0 ? \"\" : arr[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpit3vxtfi.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpit3vxtfi.d(39): Error: incompatible types for `(\"\") : (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpit3vxtfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n        {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n        else\n        {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpf_hbhpi1.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpf_hbhpi1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpf_hbhpi1.d(35): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_hbhpi1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++)\n    {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        ret[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp7sjoaflg.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp7sjoaflg.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7sjoaflg.d(33): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sjoaflg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\";\n        } else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\";\n        } else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\";\n        } else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\";\n        } else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\";\n        } else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\";\n        } else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\";\n        } else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"Nine\";\n        } else {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpp8zjeovf.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpp8zjeovf.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8zjeovf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n        {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n        else if (arr_sorted[i] == 10)\n        {\n            result[i] = \"Ten\";\n        }\n        else if (arr_sorted[i] == 11)\n        {\n            result[i] = \"Eleven\";\n        }\n        else if (arr_sorted[i] == 12)\n        {\n            result[i] = \"Twelve\";\n        }\n        else if (arr_sorted[i] == 13)\n        {\n            result[i] = \"Thirteen\";\n        }\n        else if (arr_sorted[i] == 14)\n        {\n            result[i] = \"Fourteen\";\n        }\n        else if (arr_sorted[i] == 15)\n        {\n            result[i] = \"Fifteen\";\n        }\n        else if (arr_sorted[i] == 16)\n        {\n            result[i] = \"Sixteen\";\n        }\n        else if (arr_sorted[i] == 17)\n        {\n            result[i] = \"Seventeen\";\n        }\n        else if (arr_sorted[i] == 18)\n        {\n            result[i] = \"Eighteen\";\n        }\n        else if (arr_sorted[i] == 19)\n        {\n            result[i] = \"Nineteen\";\n        }\n        else if (arr_sorted[i] == 20)\n        {\n            result[i] = \"Twenty\";\n        }\n        else if (arr_sorted[i] == 21)\n        {\n            result[i] = \"Twenty-One\";\n        \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp0fflch_5.d(85): Error: found `unittest` instead of statement\n/tmp/tmp0fflch_5.d(95): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0fflch_5.d(95): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0fflch_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min != 1 || max != 9) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[sorted.length];\n    for (int i = 0; i < sorted.length; i++) {\n        if (sorted[i] < 10) result[i] = \"One\";\n        else if (sorted[i] < 100) result[i] = \"Two\";\n        else if (sorted[i] < 1000) result[i] = \"Three\";\n        else if (sorted[i] < 10000) result[i] = \"Four\";\n        else if (sorted[i] < 100000) result[i] = \"Five\";\n        else if (sorted[i] < 1000000) result[i] = \"Six\";\n        else if (sorted[i] < 10000000) result[i] = \"Seven\";\n        else if (sorted[i] < 100000000) result[i] = \"Eight\";\n        else if (sorted[i] < 1000000000) result[i] = \"Nine\";\n        else result[i] = \"Ten\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpvuenuj44.d(35): Error: no property `clone` for type `long[]`\n/tmp/tmpvuenuj44.d(36): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvuenuj44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 0 && arr_copy[i] <= 9)\n            result[i] = \"One\";\n        else if (arr_copy[i] > 9 && arr_copy[i] <= 18)\n            result[i] = \"Two\";\n        else if (arr_copy[i] > 18 && arr_copy[i] <= 27)\n            result[i] = \"Three\";\n        else if (arr_copy[i] > 27 && arr_copy[i] <= 36)\n            result[i] = \"Four\";\n        else if (arr_copy[i] > 36 && arr_copy[i] <= 45)\n            result[i] = \"Five\";\n        else if (arr_copy[i] > 45 && arr_copy[i] <= 54)\n            result[i] = \"Six\";\n        else if (arr_copy[i] > 54 && arr_copy[i] <= 63)\n            result[i] = \"Seven\";\n        else if (arr_copy[i] > 63 && arr_copy[i] <= 72)\n            result[i] = \"Eight\";\n        else if (arr_copy[i] > 72 && arr_copy[i] <= 81)\n            result[i] = \"Nine\";\n        else\n            result[i] = \"\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp48v799wl.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmp48v799wl.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48v799wl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 1 || arr[i] > 9)\n            continue;\n        \n        ret[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 1 || arr[i] > 9)\n            continue;\n        \n        ret[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp8ilpvd8e.d(34): Error: no property `format` for type `string`\n/tmp/tmp8ilpvd8e.d(42): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ilpvd8e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n        else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n        else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\" + arr_sorted[i] - 20;\n        }\n        else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\" + arr_sorted[i] - 30;\n        }\n        else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\" + arr_sorted[i] - 40;\n        }\n        else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\" + arr_sorted[i] - 50;\n        }\n        else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\" + arr_sorted[i] - 60;\n        }\n        else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\" + arr_sorted[i] - 70;\n        }\n        else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpswy5h15d.d(62): Error: found `Eight` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `Five` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `Four` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `Three` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `Two` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `Two` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `One` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(62): Error: found `One` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(64): Error: found `One` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(65): Error: found `Three` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(65): Error: found `Two` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(65): Error: found `One` when expecting `;` following statement\n/tmp/tmpswy5h15d.d(66): Error: f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        if (arr_sorted[i] < 1) continue;\n        result[i] = String.valueOf(arr_sorted[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpcjbm115h.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpcjbm115h.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpcjbm115h.d(33): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjbm115h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n        {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n        else if (arr_sorted[i] == 10)\n        {\n            result[i] = \"Ten\";\n        }\n        else if (arr_sorted[i] == 11)\n        {\n            result[i] = \"Eleven\";\n        }\n        else if (arr_sorted[i] == 12)\n        {\n            result[i] = \"Twelve\";\n        }\n        else if (arr_sorted[i] == 13)\n        {\n            result[i] = \"Thirteen\";\n        }\n        else if (arr_sorted[i] == 14)\n        {\n            result[i] = \"Fourteen\";\n        }\n        else if (arr_sorted[i] == 15)\n        {\n            result[i] = \"Fifteen\";\n        }\n        else if (arr_sorted[i] == 16)\n        {\n            result[i] = \"Sixteen\";\n        }\n        else if (arr_sorted[i] == 17)\n        {\n            result[i] = \"Seventeen\";\n        }\n        else if (arr_sorted[i] == 18)\n        {\n            result[i] = \"Eighteen\";\n        }\n        else if (arr_sorted[i] == 19)\n        {\n            result[i] = \"Nineteen\";\n        }\n        else if (arr_sorted[i] == 20)\n        {\n            result[i] = \"Twenty\";\n        }\n        else if (arr_sorted[i] == 21)\n        {\n            result[i] = \"Twenty-One\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpa0elr4iz.d(88): Error: found `Eight` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `Five` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `Four` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `Three` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `Two` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `Two` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `One` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(88): Error: found `One` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(90): Error: found `One` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(91): Error: found `Three` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(91): Error: found `Two` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(91): Error: found `One` when expecting `;` following statement\n/tmp/tmpa0elr4iz.d(92): Error: f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    long[] sorted = arr.clone();\n    \n    sort(sorted);\n    \n    string[] result = new string[sorted.length];\n    \n    for (int i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 9) continue;\n        \n        result[i] = string.format(\"%s\", sorted[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp35v4dcl0.d(36): Error: no property `clone` for type `long[]`\n/tmp/tmp35v4dcl0.d(38): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp35v4dcl0.d(45): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35v4dcl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_order[digit_count[i]] = i;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        result[i] = digit_order[digit] + \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmptkqcxnzw.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmptkqcxnzw.d(45): Error: incompatible types for `(digit_order[cast(ulong)digit]) + (\"\")`: `int` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkqcxnzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] >= 1 && arr[i] <= 9)\n        {\n            result[i] = \"One\" + arr[i];\n        }\n        else if (arr[i] >= 10 && arr[i] <= 19)\n        {\n            result[i] = \"Two\" + arr[i];\n        }\n        else if (arr[i] >= 20 && arr[i] <= 29)\n        {\n            result[i] = \"Three\" + arr[i];\n        }\n        else if (arr[i] >= 30 && arr[i] <= 39)\n        {\n            result[i] = \"Four\" + arr[i];\n        }\n        else if (arr[i] >= 40 && arr[i] <= 49)\n        {\n            result[i] = \"Five\" + arr[i];\n        }\n        else if (arr[i] >= 50 && arr[i] <= 59)\n        {\n            result[i] = \"Six\" + arr[i];\n        }\n        else if (arr[i] >= 60 && arr[i] <= 69)\n        {\n            result[i] = \"Seven\" + arr[i];\n        }\n        else if (arr[i] >= 70 && arr[i] <= 79)\n        {\n            result[i] = \"Eight\" + arr[i];\n        }\n        else if (arr[i] >= 80 && arr[i] <= 89)\n        {\n            result[i] = \"Nine\" + arr[i];\n        }\n        else\n        {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp34lrgvs4.d(32): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(36): Error: incompatible types for `(\"Two\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(40): Error: incompatible types for `(\"Three\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(44): Error: incompatible types for `(\"Four\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(48): Error: incompatible types for `(\"Five\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(52): Error: incompatible types for `(\"Six\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(56): Error: incompatible types for `(\"Seven\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(60): Error: incompatible types for `(\"Eight\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmp34lrgvs4.d(64): Error: incompatible types for `(\"Nine\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = 1, max = 9;\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        min = Math.min(min, arr[i]);\n        max = Math.max(max, arr[i]);\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_to_name(arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpc8yk1ibw.d(30): Error: undefined identifier `Math`\n/tmp/tmpc8yk1ibw.d(31): Error: undefined identifier `Math`\n/tmp/tmpc8yk1ibw.d(37): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8yk1ibw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\";\n        }\n        else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\";\n        }\n        else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\";\n        }\n        else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\";\n        }\n        else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\";\n        }\n        else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\";\n        }\n        else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\";\n        }\n        else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\";\n        }\n        else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"Nine\";\n        }\n        else {\n            result[i] = \"\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpsiijwdsi.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpsiijwdsi.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsiijwdsi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = new int[10];\n    for (int i = 0; i < 10; i++) digit_map[i] = -1;\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        digit_map[arr[i]] = i;\n    }\n    \n    int[] sorted_arr = digit_map.clone();\n    sort(sorted_arr);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_map[sorted_arr[i]];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp1upxfbyl.d(34): Error: no property `clone` for type `int[]`\n/tmp/tmp1upxfbyl.d(35): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp1upxfbyl.d(39): Error: cannot implicitly convert expression `digit_map[cast(ulong)sorted_arr[cast(ulong)i]]` of type `int` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1upxfbyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr1 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        arr1[i] = arr[i];\n    }\n    \n    sort(arr1);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr1[i] > 0 && arr1[i] <= 9)\n        {\n            result[i] = \"One\";\n        }\n        else if (arr1[i] > 9 && arr1[i] <= 18)\n        {\n            result[i] = \"Two\";\n        }\n        else if (arr1[i] > 18 && arr1[i] <= 27)\n        {\n            result[i] = \"Three\";\n        }\n        else if (arr1[i] > 27 && arr1[i] <= 36)\n        {\n            result[i] = \"Four\";\n        }\n        else if (arr1[i] > 36 && arr1[i] <= 45)\n        {\n            result[i] = \"Five\";\n        }\n        else if (arr1[i] > 45 && arr1[i] <= 54)\n        {\n            result[i] = \"Six\";\n        }\n        else if (arr1[i] > 54 && arr1[i] <= 63)\n        {\n            result[i] = \"Seven\";\n        }\n        else if (arr1[i] > 63 && arr1[i] <= 72)\n        {\n            result[i] = \"Eight\";\n        }\n        else if (arr1[i] > 72 && arr1[i] <= 81)\n        {\n            result[i] = \"Nine\";\n        }\n        else\n        {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpeplevql1.d(33): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeplevql1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] > 9 || sorted[i] < 1) continue;\n        result[i] = String.valueOf(sorted[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpcshot20j.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpcshot20j.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpcshot20j.d(32): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcshot20j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9) {\n            result[i] = \"One\" + arr_copy[i];\n        }\n        else if (arr_copy[i] == 10) {\n            result[i] = \"Ten\";\n        }\n        else if (arr_copy[i] == 11) {\n            result[i] = \"Eleven\";\n        }\n        else if (arr_copy[i] == 12) {\n            result[i] = \"Twelve\";\n        }\n        else if (arr_copy[i] == 13) {\n            result[i] = \"Thirteen\";\n        }\n        else if (arr_copy[i] == 14) {\n            result[i] = \"Fourteen\";\n        }\n        else if (arr_copy[i] == 15) {\n            result[i] = \"Fifteen\";\n        }\n        else if (arr_copy[i] == 16) {\n            result[i] = \"Sixteen\";\n        }\n        else if (arr_copy[i] == 17) {\n            result[i] = \"Seventeen\";\n        }\n        else if (arr_copy[i] == 18) {\n            result[i] = \"Eighteen\";\n        }\n        else if (arr_copy[i] == 19) {\n            result[i] = \"Nineteen\";\n        }\n        else if (arr_copy[i] == 20) {\n            result[i] = \"Twenty\";\n        }\n        else if (arr_copy[i] == 21) {\n            result[i] = \"Twenty-One\";\n        }\n        else if (arr_copy[i] == 22) {\n            result[i] = \"Twenty-Two\";\n        }\n        else if (arr_copy[i] == 23\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp0hrzhz89.d(75): Error: found `unittest` when expecting `)`\n/tmp/tmp0hrzhz89.d(85): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0hrzhz89.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hrzhz89.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int len = max - min + 1;\n    \n    string[] result = new string[len];\n    \n    for (int i = 0; i < len; i++) {\n        result[i] = get_digit(i + min);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp8ejxam4a.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp8ejxam4a.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmp8ejxam4a.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp8ejxam4a.d(32): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp8ejxam4a.d(32): Error: found `}` when expecting `;` following statement\n/tmp/tmp8ejxam4a.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ejxam4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\";\n        } else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\";\n        } else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\";\n        } else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\";\n        } else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\";\n        } else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\";\n        } else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\";\n        } else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"Nine\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpo8m88yft.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpo8m88yft.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8m88yft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"One\" + arr_sorted[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpoin__x8m.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpoin__x8m.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpoin__x8m.d(33): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoin__x8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    int min = 1;\n    int max = 9;\n    int len = max - min + 1;\n    int[] count = new int[len];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            count[arr[i] - min]++;\n        }\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < len; i++) {\n        int c = count[i];\n        if (c > 0) {\n            result[i] = String.valueOf(c);\n        }\n    }\n    \n    for (int i = 0; i < len; i++) {\n        if (result[i].length() > 0) {\n            result[i] = result[i] + \" \";\n        }\n    }\n    \n    for (int i = 0; i < len; i++) {\n        if (result[i].length() > 0) {\n            result[i] = result[i] + String.valueOf(i + min);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmplm5voac0.d(39): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmplm5voac0.d(44): Error: no property `length` for type `string`\n/tmp/tmplm5voac0.d(45): Error: invalid array operation `result[cast(ulong)i] + \" \"` (possible missing [])\n/tmp/tmplm5voac0.d(50): Error: no property `length` for type `string`\n/tmp/tmplm5voac0.d(51): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm5voac0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] > 0 && sorted[i] <= 9) {\n            result[i] = \"One\" + sorted[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpg6rhnonv.d(35): Error: no property `clone` for type `long[]`\n/tmp/tmpg6rhnonv.d(36): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpg6rhnonv.d(41): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg6rhnonv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_order[digit_count[i]] = i;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_order[arr[i] - 1] + \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpqoj5cxgv.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpqoj5cxgv.d(44): Error: incompatible types for `(digit_order[cast(ulong)(arr[cast(ulong)i] - 1L)]) + (\"\")`: `int` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqoj5cxgv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[sorted.length];\n    for (int i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 9) continue;\n        if (sorted[i] < 1) continue;\n        result[i] = string.fromCharCode(sorted[i] + 48);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpi5avguq5.d(35): Error: no property `clone` for type `long[]`\n/tmp/tmpi5avguq5.d(36): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpi5avguq5.d(42): Error: no property `fromCharCode` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5avguq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    int min = 1, max = 9;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        min = Math.min(min, arr[i]);\n        max = Math.max(max, arr[i]);\n    }\n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(arr[i] - min + 1);\n    }\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = result[i].substring(0, 1) + result[i].substring(1).toLowerCase();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp3nnoryss.d(28): Error: undefined identifier `Math`\n/tmp/tmp3nnoryss.d(29): Error: undefined identifier `Math`\n/tmp/tmp3nnoryss.d(33): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmp3nnoryss.d(36): Error: no property `substring` for type `string`\n/tmp/tmp3nnoryss.d(36): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nnoryss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    if (arr.length == 1) return new string[] { \"One\" };\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        result[i] = \"One\" + arr_sorted[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp5pm_stf2.d(25): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp5pm_stf2.d(25): Error: found `}` when expecting `;` following statement\n/tmp/tmp5pm_stf2.d(25): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5pm_stf2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > 9 || arr[i] < 1)\n            continue;\n        \n        ret[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > 9 || arr[i] < 1)\n            continue;\n        \n        ret[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpugdmfgsv.d(34): Error: no property `format` for type `string`\n/tmp/tmpugdmfgsv.d(42): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugdmfgsv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        if (arr_sorted[i] < 1) continue;\n        result[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpbtpturhx.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpbtpturhx.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpbtpturhx.d(33): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtpturhx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n        {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n        else if (arr_sorted[i] == 10)\n        {\n            result[i] = \"Ten\";\n        }\n        else if (arr_sorted[i] == 11)\n        {\n            result[i] = \"Eleven\";\n        }\n        else if (arr_sorted[i] == 12)\n        {\n            result[i] = \"Twelve\";\n        }\n        else if (arr_sorted[i] == 13)\n        {\n            result[i] = \"Thirteen\";\n        }\n        else if (arr_sorted[i] == 14)\n        {\n            result[i] = \"Fourteen\";\n        }\n        else if (arr_sorted[i] == 15)\n        {\n            result[i] = \"Fifteen\";\n        }\n        else if (arr_sorted[i] == 16)\n        {\n            result[i] = \"Sixteen\";\n        }\n        else if (arr_sorted[i] == 17)\n        {\n            result[i] = \"Seventeen\";\n        }\n        else if (arr_sorted[i] == 18)\n        {\n            result[i] = \"Eighteen\";\n        }\n        else if (arr_sorted[i] == 19)\n        {\n            result[i] = \"Nineteen\";\n        }\n        else if (arr_sorted[i] == 20)\n        {\n            result[i] = \"Twenty\";\n        }\n        else if (arr_sorted[i] == 21)\n        {\n            result[i] = \"Twenty-One\";\n        }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpqbdcvdw0.d(86): Error: found `unittest` instead of statement\n/tmp/tmpqbdcvdw0.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqbdcvdw0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\" + arr_sorted[i] - 20;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\" + arr_sorted[i] - 30;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\" + arr_sorted[i] - 40;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\" + arr_sorted[i] - 50;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length;\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp2ivxu9l8.d(61): Error: expression expected, not `unittest`\n/tmp/tmp2ivxu9l8.d(62): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ivxu9l8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] > 9) continue;\n        result[i] = \"One\" + sorted[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpnfwj7fwq.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpnfwj7fwq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpnfwj7fwq.d(32): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfwj7fwq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++)\n    {\n        for (int j = 0; j < digit_count[i]; j++)\n        {\n            digit_order[i]++;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = digit_map[arr[i] - 1];\n        arr[i] = digit_order[digit];\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i] = digit_map[arr[i] - 1] + \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp9pyqvn39.d(27): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmp9pyqvn39.d(57): Error: incompatible types for `(digit_map[cast(ulong)(arr[cast(ulong)i] - 1L)]) + (\"\")`: `int` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pyqvn39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpmi4zgkdm.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpmi4zgkdm.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmi4zgkdm.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmpmi4zgkdm.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi4zgkdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr1 = new long[arr.length];\n    long[] arr2 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] >= 1 && arr[i] <= 9)\n        {\n            arr1[arr1.length - 1 - i] = arr[i];\n        }\n        else\n        {\n            arr2[arr2.length - 1 - i] = arr[i];\n        }\n    }\n    \n    arr1 = by_length(arr1);\n    arr2 = by_length(arr2);\n    \n    string[] res = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr1[i] >= 1 && arr1[i] <= 9)\n        {\n            res[i] = \"One\";\n        }\n        else if (arr1[i] >= 10 && arr1[i] <= 19)\n        {\n            res[i] = \"Two\";\n        }\n        else if (arr1[i] >= 20 && arr1[i] <= 29)\n        {\n            res[i] = \"Three\";\n        }\n        else if (arr1[i] >= 30 && arr1[i] <= 39)\n        {\n            res[i] = \"Four\";\n        }\n        else if (arr1[i] >= 40 && arr1[i] <= 49)\n        {\n            res[i] = \"Five\";\n        }\n        else if (arr1[i] >= 50 && arr1[i] <= 59)\n        {\n            res[i] = \"Six\";\n        }\n        else if (arr1[i] >= 60 && arr1[i] <= 69)\n        {\n            res[i] = \"Seven\";\n        }\n        else if (arr1[i] >= 70 && arr1[i] <= 79)\n        {\n            res[i] = \"Eight\";\n        }\n        else if (arr1[i] >= 80 &&\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp_mrjkvlr.d(80): Error: expression expected, not `unittest`\n/tmp/tmp_mrjkvlr.d(81): Error: found `{` when expecting `)`\n/tmp/tmp_mrjkvlr.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_mrjkvlr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp5x7_ge6h.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp5x7_ge6h.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5x7_ge6h.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmp5x7_ge6h.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5x7_ge6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9) {\n            result[i] = \"One\" + arr_copy[i];\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp8l8mazac.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp8l8mazac.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8l8mazac.d(32): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8l8mazac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\n            arr2[i] = arr[i];\n        else\n            arr2[i] = 0;\n    }\n    \n    arr2 = sort(arr2);\n    \n    string[] ret = new string[arr2.length];\n    \n    for (int i = 0; i < arr2.length; i++) {\n        if (arr2[i] != 0)\n            ret[i] = string.format(\"%s\", arr2[i]);\n    }\n    \n    return ret;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpm1q1obv8.d(36): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpm1q1obv8.d(42): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1q1obv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] >= 1 && arr[i] <= 9)\n        {\n            arr2[arr2.length - 1 - i] = arr[i];\n        }\n    }\n    \n    arr2 = reverse(arr2);\n    \n    string[] result = new string[arr2.length];\n    \n    for (int i = 0; i < arr2.length; i++)\n    {\n        if (arr2[i] >= 1 && arr2[i] <= 9)\n        {\n            result[i] = \"One\" + arr2[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp740sgtko.d(36): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmp740sgtko.d(44): Error: incompatible types for `(\"One\") + (arr2[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp740sgtko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n        {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n        else if (arr_sorted[i] >= 10 && arr_sorted[i] <= 19)\n        {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n        else if (arr_sorted[i] >= 20 && arr_sorted[i] <= 29)\n        {\n            result[i] = \"Three\" + arr_sorted[i] - 20;\n        }\n        else if (arr_sorted[i] >= 30 && arr_sorted[i] <= 39)\n        {\n            result[i] = \"Four\" + arr_sorted[i] - 30;\n        }\n        else if (arr_sorted[i] >= 40 && arr_sorted[i] <= 49)\n        {\n            result[i] = \"Five\" + arr_sorted[i] - 40;\n        }\n        else if (arr_sorted[i] >= 50 && arr_sorted[i] <= 59)\n        {\n            result[i] = \"Six\" + arr_sorted[i] - 50;\n        }\n        else if (arr_sorted[i] >= 60 && arr_sorted[i] <= 69)\n        {\n            result[i] = \"Seven\" + arr_sorted[i] - 60;\n        }\n        else if (arr_sorted[i] >= 70 && arr_sorted[i] <= 79)\n        {\n            result[i] = \"Eight\" + arr_sorted[i] - 70;\n        }\n        else if (arr_sorted[i] >= 80 && arr_sorted[i]\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpg1llwhph.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpg1llwhph.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpg1llwhph.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1llwhph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 0 && arr_copy[i] <= 9)\n            result[i] = \"One\" + arr_copy[i];\n        else if (arr_copy[i] > 9 && arr_copy[i] <= 18)\n            result[i] = \"Two\" + arr_copy[i] - 10;\n        else if (arr_copy[i] > 18 && arr_copy[i] <= 27)\n            result[i] = \"Three\" + arr_copy[i] - 20;\n        else if (arr_copy[i] > 27 && arr_copy[i] <= 36)\n            result[i] = \"Four\" + arr_copy[i] - 30;\n        else if (arr_copy[i] > 36 && arr_copy[i] <= 45)\n            result[i] = \"Five\" + arr_copy[i] - 40;\n        else if (arr_copy[i] > 45 && arr_copy[i] <= 54)\n            result[i] = \"Six\" + arr_copy[i] - 50;\n        else if (arr_copy[i] > 54 && arr_copy[i] <= 63)\n            result[i] = \"Seven\" + arr_copy[i] - 60;\n        else if (arr_copy[i] > 63 && arr_copy[i] <= 72)\n            result[i] = \"Eight\" + arr_copy[i] - 70;\n        else if (arr_copy[i] > 72 && arr_copy[i] <= 81)\n            result[i] = \"Nine\" + arr_copy[i] - 80;\n        else\n            result[i] = \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpibt7zjlc.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpibt7zjlc.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpibt7zjlc.d(35): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(37): Error: incompatible types for `(\"Two\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(39): Error: incompatible types for `(\"Three\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(41): Error: incompatible types for `(\"Four\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(43): Error: incompatible types for `(\"Five\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(45): Error: incompatible types for `(\"Six\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(47): Error: incompatible types for `(\"Seven\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmpibt7zjlc.d(49): Error: incompatible types for `(\"Eight\") + (arr_cop",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = 1, max = 9;\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min == 1 && max == 9) return by_length_1_9(arr);\n    \n    return by_length_1_9(arr);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpqeos7m4q.d(33): Error: undefined identifier `by_length_1_9`\n/tmp/tmpqeos7m4q.d(35): Error: undefined identifier `by_length_1_9`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqeos7m4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] > 0 && arr_copy[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr_copy[i] > 9 && arr_copy[i] <= 18) {\n            result[i] = \"Two\";\n        } else if (arr_copy[i] > 18 && arr_copy[i] <= 27) {\n            result[i] = \"Three\";\n        } else if (arr_copy[i] > 27 && arr_copy[i] <= 36) {\n            result[i] = \"Four\";\n        } else if (arr_copy[i] > 36 && arr_copy[i] <= 45) {\n            result[i] = \"Five\";\n        } else if (arr_copy[i] > 45 && arr_copy[i] <= 54) {\n            result[i] = \"Six\";\n        } else if (arr_copy[i] > 54 && arr_copy[i] <= 63) {\n            result[i] = \"Seven\";\n        } else if (arr_copy[i] > 63 && arr_copy[i] <= 72) {\n            result[i] = \"Eight\";\n        } else if (arr_copy[i] > 72 && arr_copy[i] <= 81) {\n            result[i] = \"Nine\";\n        } else {\n            result[i] = \"\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpcgs30lj1.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpcgs30lj1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgs30lj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n        {\n            result[i] = \"One\";\n        }\n        else if (arr_sorted[i] == 10)\n        {\n            result[i] = \"Ten\";\n        }\n        else if (arr_sorted[i] == 11)\n        {\n            result[i] = \"Eleven\";\n        }\n        else if (arr_sorted[i] == 12)\n        {\n            result[i] = \"Twelve\";\n        }\n        else if (arr_sorted[i] == 13)\n        {\n            result[i] = \"Thirteen\";\n        }\n        else if (arr_sorted[i] == 14)\n        {\n            result[i] = \"Fourteen\";\n        }\n        else if (arr_sorted[i] == 15)\n        {\n            result[i] = \"Fifteen\";\n        }\n        else if (arr_sorted[i] == 16)\n        {\n            result[i] = \"Sixteen\";\n        }\n        else if (arr_sorted[i] == 17)\n        {\n            result[i] = \"Seventeen\";\n        }\n        else if (arr_sorted[i] == 18)\n        {\n            result[i] = \"Eighteen\";\n        }\n        else if (arr_sorted[i] == 19)\n        {\n            result[i] = \"Nineteen\";\n        }\n        else if (arr_sorted[i] == 20)\n        {\n            result[i] = \"Twenty\";\n        }\n        else if (arr_sorted[i] == 30)\n        {\n            result[i] = \"Thirty\";\n        }\n        else if (arr\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpgzalu7tz.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpgzalu7tz.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgzalu7tz.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzalu7tz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max)\n        return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max)\n            return new string[]{\"One\"};\n        \n        if (arr[i] < min)\n            min = arr[i];\n        \n        if (arr[i] > max)\n            max = arr[i];\n    }\n    \n    int len = max - min + 1;\n    \n    string[] ret = new string[len];\n    \n    for (int i = 0; i < len; i++)\n    {\n        ret[i] = get_digit(i + min);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpy84cvx13.d(31): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpy84cvx13.d(31): Error: found `}` when expecting `;` following statement\n/tmp/tmpy84cvx13.d(31): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpy84cvx13.d(36): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpy84cvx13.d(36): Error: found `}` when expecting `;` following statement\n/tmp/tmpy84cvx13.d(36): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy84cvx13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_index = new int[10];\n    for (int i = 0; i < 10; i++) {\n        digit_index[i] = 0;\n    }\n    \n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < digit_count[i]; j++) {\n            arr[digit_index[i]++] = i + 1;\n        }\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = arr[i] < 10 ? \"One\" : arr[i] < 100 ? \"Two\" : arr[i] < 1000 ? \"Three\" : arr[i] < 10000 ? \"Four\" : arr[i] < 100000 ? \"Five\" : arr[i] < 1000000 ? \"Six\" : arr[i] < 10000000 ? \"Seven\" : arr[i] < 100000000 ? \"Eight\" : arr[i] < 1000000000 ? \"Nine\" : \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpn4vqr7mx.d(27): Error: a struct is not a valid initializer for a `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4vqr7mx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        min = Math.min(min, arr[i]);\n        max = Math.max(max, arr[i]);\n    }\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_map[arr[i] - 1];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpocba9ctc.d(31): Error: undefined identifier `Math`\n/tmp/tmpocba9ctc.d(32): Error: undefined identifier `Math`\n/tmp/tmpocba9ctc.d(35): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpocba9ctc.d(40): Error: cannot implicitly convert expression `digit_map[cast(ulong)(arr[cast(ulong)i] - 1L)]` of type `int` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocba9ctc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 10 && arr[i] > 0)\n        {\n            result[i] = \"One\";\n        }\n        else if (arr[i] < 100 && arr[i] > 10)\n        {\n            result[i] = \"Two\";\n        }\n        else if (arr[i] < 1000 && arr[i] > 100)\n        {\n            result[i] = \"Three\";\n        }\n        else if (arr[i] < 10000 && arr[i] > 1000)\n        {\n            result[i] = \"Four\";\n        }\n        else if (arr[i] < 100000 && arr[i] > 10000)\n        {\n            result[i] = \"Five\";\n        }\n        else if (arr[i] < 1000000 && arr[i] > 100000)\n        {\n            result[i] = \"Six\";\n        }\n        else if (arr[i] < 10000000 && arr[i] > 1000000)\n        {\n            result[i] = \"Seven\";\n        }\n        else if (arr[i] < 100000000 && arr[i] > 10000000)\n        {\n            result[i] = \"Eight\";\n        }\n        else if (arr[i] < 1000000000 && arr[i] > 100000000)\n        {\n            result[i] = \"Nine\";\n        }\n        else\n        {\n            result[i] = \"\";\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (result[i] == \"\")\n        {\n            result[i] = \"0\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16jznv8p.d(86): unittest failure\n----------------\n??:? _d_unittestp [0x429855]\n??:? void tmp16jznv8p.__unittest_L82_C1() [0x4286a7]\n??:? void tmp16jznv8p.__modtest() [0x428ac0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e42b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4295ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b0d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b160]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b05d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429585]\n??:? runModuleUnitTests [0x42e201]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429d18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0], max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min != 1 || max != 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(arr[i]);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n        if (result[i].length() == 1) {\n            result[i] = result[i] + result[i];\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].substring(0, 1) + result[i].substring(1, 2);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].substring(0, 2);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].substring(0, 1) + result[i].substring(1, 2);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].substring(0, 2);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].substring(0, 1) + result[i].substring(1, 2);\n    }\n    \n    for (int i = 0; i < result.length; i++)\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp8cucw40v.d(69): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cucw40v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] > 0 && arr_copy[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr_copy[i] > 9 && arr_copy[i] <= 18) {\n            result[i] = \"Two\";\n        } else if (arr_copy[i] > 18 && arr_copy[i] <= 27) {\n            result[i] = \"Three\";\n        } else if (arr_copy[i] > 27 && arr_copy[i] <= 36) {\n            result[i] = \"Four\";\n        } else if (arr_copy[i] > 36 && arr_copy[i] <= 45) {\n            result[i] = \"Five\";\n        } else if (arr_copy[i] > 45 && arr_copy[i] <= 54) {\n            result[i] = \"Six\";\n        } else if (arr_copy[i] > 54 && arr_copy[i] <= 63) {\n            result[i] = \"Seven\";\n        } else if (arr_copy[i] > 63 && arr_copy[i] <= 72) {\n            result[i] = \"Eight\";\n        } else if (arr_copy[i] > 72 && arr_copy[i] <= 81) {\n            result[i] = \"Nine\";\n        } else {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpm6xho9xl.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpm6xho9xl.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6xho9xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result[i] = \"One\" + (sorted[i] - 1);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 10 && sorted[i] <= 19) {\n            result[i] = \"Two\" + (sorted[i] - 10);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 20 && sorted[i] <= 29) {\n            result[i] = \"Three\" + (sorted[i] - 20);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 30 && sorted[i] <= 39) {\n            result[i] = \"Four\" + (sorted[i] - 30);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 40 && sorted[i] <= 49) {\n            result[i] = \"Five\" + (sorted[i] - 40);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 50 && sorted[i] <= 59) {\n            result[i] = \"Six\" + (sorted[i] - 50);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 60 && sorted[i] <= 69) {\n            result[i] = \"Seven\" + (sorted[i] - 60);\n        }\n    }\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmprhyv736i.d(72): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhyv736i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9 && arr_sorted[i] <= 99) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 99 && arr_sorted[i] <= 999) {\n            result[i] = \"Three\" + arr_sorted[i] - 100;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 999 && arr_sorted[i] <= 9999) {\n            result[i] = \"Four\" + arr_sorted[i] - 1000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9999 && arr_sorted[i] <= 99999) {\n            result[i] = \"Five\" + arr_sorted[i] - 10000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 99999 && arr_sorted[i] <= 999999) {\n            result[i] = \"Six\" + arr_sorted[i] - 100000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpk0nlp1re.d(68): Error: found `unittest` when expecting `(`\n/tmp/tmpk0nlp1re.d(78): Error: found `void` when expecting `)`\n/tmp/tmpk0nlp1re.d(78): Error: found `{` when expecting `;` following statement\n/tmp/tmpk0nlp1re.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0nlp1re.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 && arr_sorted[i] <= 99) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 99 && arr_sorted[i] <= 999) {\n            result[i] = \"Three\" + arr_sorted[i] - 100;\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 999 && arr_sorted[i] <= 9999) {\n            result[i] = \"Four\" + arr_sorted[i] - 1000;\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9999 && arr_sorted[i] <= 99999) {\n            result[i] = \"Five\" + arr_sorted[i] - 10000;\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 99999 && arr_sorted[i] <= 999999) {\n            result[i] = \"Six\" + arr_sorted[i] - 100000;\n        }\n    }\n    \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp204t8wvb.d(66): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp204t8wvb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 0 && arr_copy[i] <= 9)\n            result[i] = \"One\" + arr_copy[i];\n        else if (arr_copy[i] > 9 && arr_copy[i] <= 18)\n            result[i] = \"Two\" + arr_copy[i] - 10;\n        else if (arr_copy[i] > 18 && arr_copy[i] <= 27)\n            result[i] = \"Three\" + arr_copy[i] - 20;\n        else if (arr_copy[i] > 27 && arr_copy[i] <= 36)\n            result[i] = \"Four\" + arr_copy[i] - 30;\n        else if (arr_copy[i] > 36 && arr_copy[i] <= 45)\n            result[i] = \"Five\" + arr_copy[i] - 40;\n        else if (arr_copy[i] > 45 && arr_copy[i] <= 54)\n            result[i] = \"Six\" + arr_copy[i] - 50;\n        else if (arr_copy[i] > 54 && arr_copy[i] <= 63)\n            result[i] = \"Seven\" + arr_copy[i] - 60;\n        else if (arr_copy[i] > 63 && arr_copy[i] <= 72)\n            result[i] = \"Eight\" + arr_copy[i] - 70;\n        else if (arr_copy[i] > 72 && arr_copy[i] <= 81)\n            result[i] = \"Nine\" + arr_copy[i] - 80;\n        else\n            result[i] = \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp0ihm0_vn.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp0ihm0_vn.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp0ihm0_vn.d(35): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(37): Error: incompatible types for `(\"Two\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(39): Error: incompatible types for `(\"Three\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(41): Error: incompatible types for `(\"Four\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(43): Error: incompatible types for `(\"Five\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(45): Error: incompatible types for `(\"Six\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(47): Error: incompatible types for `(\"Seven\") + (arr_copy[cast(ulong)i])`: `string` and `long`\n/tmp/tmp0ihm0_vn.d(49): Error: incompatible types for `(\"Eight\") + (arr_cop",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        result[i] = String.valueOf(arr_sorted[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmprn0nu1ff.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmprn0nu1ff.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmprn0nu1ff.d(32): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprn0nu1ff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_count_sorted = digit_count.clone();\n    \n    sort(digit_count_sorted);\n    \n    int[] digit_count_sorted_rev = new int[10];\n    \n    for (int i = 0; i < digit_count_sorted.length; i++) {\n        digit_count_sorted_rev[digit_count_sorted[i]] = i;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        result[i] = digit_count_sorted_rev[digit] + \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpm3uxyygw.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpm3uxyygw.d(35): Error: no property `clone` for type `int[]`\n/tmp/tmpm3uxyygw.d(37): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpm3uxyygw.d(49): Error: incompatible types for `(digit_count_sorted_rev[cast(ulong)digit]) + (\"\")`: `int` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3uxyygw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min)\n            min = arr[i];\n        if (arr[i] > max)\n            max = arr[i];\n    }\n    \n    if (min < 1 || max > 9)\n        return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10)\n            result[i] = \"One\";\n        else if (arr[i] < 100)\n            result[i] = \"Two\";\n        else if (arr[i] < 1000)\n            result[i] = \"Three\";\n        else if (arr[i] < 10000)\n            result[i] = \"Four\";\n        else if (arr[i] < 100000)\n            result[i] = \"Five\";\n        else if (arr[i] < 1000000)\n            result[i] = \"Six\";\n        else if (arr[i] < 10000000)\n            result[i] = \"Seven\";\n        else if (arr[i] < 100000000)\n            result[i] = \"Eight\";\n        else if (arr[i] < 1000000000)\n            result[i] = \"Nine\";\n        else\n            result[i] = \"\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (result[i].length() > max - min + 1)\n            result[i] = result[i].substring(0, max - min + 1);\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (result[i].length() < max - min + 1)\n            result[i] = result[i] + \" \" + result[i].substring(0, max - min + 1 - result[i].length());\n    }\n    \n    \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpo704ypqw.d(74): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo704ypqw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp5x7_ge6h.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp5x7_ge6h.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5x7_ge6h.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmp5x7_ge6h.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5x7_ge6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < 10) result[i] = \"One\";\n        else if (arr[i] < 20) result[i] = \"Two\";\n        else if (arr[i] < 30) result[i] = \"Three\";\n        else if (arr[i] < 40) result[i] = \"Four\";\n        else if (arr[i] < 50) result[i] = \"Five\";\n        else if (arr[i] < 60) result[i] = \"Six\";\n        else if (arr[i] < 70) result[i] = \"Seven\";\n        else if (arr[i] < 80) result[i] = \"Eight\";\n        else if (arr[i] < 90) result[i] = \"Nine\";\n        else result[i] = \"\";\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (result[i] == \"\") result[i] = \"\";\n        else result[i] = result[i].substring(0, 1).toUpperCase() + result[i].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpiu70mmz_.d(56): Error: no property `substring` for type `string`\n/tmp/tmpiu70mmz_.d(56): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu70mmz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        ret[i] = String.valueOf(arr_sorted[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmptlj52h6w.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmptlj52h6w.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmptlj52h6w.d(33): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlj52h6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) {\n            ret[i] = \"\";\n        } else {\n            ret[i] = arr[i] - 1 + \"\";\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (ret[i].length() > 1) {\n            ret[i] = ret[i].substring(0, 1) + ret[i].substring(1, ret[i].length() - 1) + ret[i].substring(ret[i].length() - 1, ret[i].length());\n        }\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpeggymcm0.d(32): Error: incompatible types for `(arr[cast(ulong)i] - cast(long)1) + (\"\")`: `long` and `string`\n/tmp/tmpeggymcm0.d(37): Error: no property `length` for type `string`\n/tmp/tmpeggymcm0.d(38): Error: no property `substring` for type `string`\n/tmp/tmpeggymcm0.d(38): Error: no property `substring` for type `string`\n/tmp/tmpeggymcm0.d(38): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeggymcm0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_to_name = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_to_name_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_to_name_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5, 4, 3, 2, 1};\n    \n    int[] digit_to_name_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {9, 8, 7, 6, 5\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp77trbr91.d(49): Error: comma expected separating field initializers\n/tmp/tmp77trbr91.d(49): Error: expression expected, not `unittest`\n/tmp/tmp77trbr91.d(50): Error: comma expected separating field initializers\n/tmp/tmp77trbr91.d(59): Error: comma expected separating field initializers\n/tmp/tmp77trbr91.d(59): Error: found `main` when expecting `.` following void\n/tmp/tmp77trbr91.d(59): Error: found `(` when expecting identifier following `void`.\n/tmp/tmp77trbr91.d(59): Error: comma expected separating field initializers\n/tmp/tmp77trbr91.d(59): Error: expression expected, not `)`\n/tmp/tmp77trbr91.d(59): Error: comma expected separating field initializers\n/tmp/tmp77trbr91.d(59): Error: found end of file instead of initializer\n/tmp/tmp77trbr91.d(59): Error: semicolon expected, not `End of File`\n/tmp/tmp77trbr91.d(59): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77trbr91.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    int len = max - min + 1;\n    \n    string[] result = new string[len];\n    \n    for (int i = 0; i < len; i++) {\n        result[i] = \"\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            result[arr[i] - min] = \"One\";\n        }\n    }\n    \n    for (int i = 0; i < len; i++) {\n        if (result[i].length() == 0) continue;\n        result[i] = result[i].substring(0, 1) + result[i].substring(1).toLowerCase();\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpshf4jpug.d(43): Error: no property `length` for type `string`\n/tmp/tmpshf4jpug.d(44): Error: no property `substring` for type `string`\n/tmp/tmpshf4jpug.d(44): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshf4jpug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    string[] ret = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        ret[i] = string.format(\"%s\", arr[i]);\n        if (ret[i].length() > 1) ret[i] = ret[i].substring(0, 1);\n        if (ret[i].length() > 2) ret[i] = ret[i].substring(0, 2);\n        if (ret[i].length() > 3) ret[i] = ret[i].substring(0, 3);\n        if (ret[i].length() > 4) ret[i] = ret[i].substring(0, 4);\n        if (ret[i].length() > 5) ret[i] = ret[i].substring(0, 5);\n        if (ret[i].length() > 6) ret[i] = ret[i].substring(0, 6);\n        if (ret[i].length() > 7) ret[i] = ret[i].substring(0, 7);\n        if (ret[i].length() > 8) ret[i] = ret[i].substring(0, 8);\n        if (ret[i].length() > 9) ret[i] = ret[i].substring(0, 9);\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (ret[i].length() > 1) ret[i] = ret[i].substring(0, 1);\n        if (ret[i].length() > 2) ret[i] = ret[i].substring(0, 2);\n        if (ret[i\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpqfc_f2al.d(53): Error: found `unittest` when expecting `,`\n/tmp/tmpqfc_f2al.d(63): Error: found `void` when expecting `,`\n/tmp/tmpqfc_f2al.d(63): Error: found `{` when expecting `,`\n/tmp/tmpqfc_f2al.d(63): Error: expression expected, not `}`\n/tmp/tmpqfc_f2al.d(63): Error: found `End of File` when expecting `,`\n/tmp/tmpqfc_f2al.d(63): Error: found `End of File` when expecting `]`\n/tmp/tmpqfc_f2al.d(63): Error: found `End of File` when expecting `)`\n/tmp/tmpqfc_f2al.d(63): Error: found `End of File` instead of statement\n/tmp/tmpqfc_f2al.d(63): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqfc_f2al.d(63): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfc_f2al.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9) {\n            result[i] = \"One\" + arr_copy[i];\n        }\n        else if (arr_copy[i] == 10) {\n            result[i] = \"Ten\";\n        }\n        else if (arr_copy[i] == 11) {\n            result[i] = \"Eleven\";\n        }\n        else if (arr_copy[i] == 12) {\n            result[i] = \"Twelve\";\n        }\n        else if (arr_copy[i] == 13) {\n            result[i] = \"Thirteen\";\n        }\n        else if (arr_copy[i] == 14) {\n            result[i] = \"Fourteen\";\n        }\n        else if (arr_copy[i] == 15) {\n            result[i] = \"Fifteen\";\n        }\n        else if (arr_copy[i] == 16) {\n            result[i] = \"Sixteen\";\n        }\n        else if (arr_copy[i] == 17) {\n            result[i] = \"Seventeen\";\n        }\n        else if (arr_copy[i] == 18) {\n            result[i] = \"Eighteen\";\n        }\n        else if (arr_copy[i] == 19) {\n            result[i] = \"Nineteen\";\n        }\n        else if (arr_copy[i] == 20) {\n            result[i] = \"Twenty\";\n        }\n        else if (arr_copy[i] == 21) {\n            result[i] = \"Twenty-One\";\n        }\n        else if (arr_copy[i] == 22) {\n            result[i] = \"Twenty-Two\";\n        }\n        else if (arr_copy[i]\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpp5f0qywv.d(76): Error: found `unittest` when expecting `)`\n/tmp/tmpp5f0qywv.d(86): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp5f0qywv.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5f0qywv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] arr_int = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        arr_int[i] = (int)arr[i];\n    \n    int[] sorted_arr_int = sort(arr_int);\n    \n    string[] sorted_arr = new string[arr.length];\n    for (int i = 0; i < sorted_arr_int.length; i++)\n        sorted_arr[i] = get_digit(sorted_arr_int[i]);\n    \n    return sorted_arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpuixarwja.d(28): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuixarwja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n            max = arr[i];\n        if (arr[i] < min)\n            min = arr[i];\n    }\n    \n    if (max - min > 9)\n        return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        arr2[i] = arr[i] - min;\n    }\n    \n    arr2 = sort(arr2);\n    \n    string[] arr3 = new string[arr2.length];\n    \n    for (int i = 0; i < arr2.length; i++)\n    {\n        arr3[i] = get_name(arr2[i]);\n    }\n    \n    return arr3;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpjjm5zg7d.d(48): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpjjm5zg7d.d(54): Error: undefined identifier `get_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjm5zg7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result[i] = \"One\" + (sorted[i] - 1);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmphjwwgng6.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmphjwwgng6.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphjwwgng6.d(32): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i] - cast(long)1)`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjwwgng6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++)\n    {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1)\n            continue;\n        \n        result[i] = \"One\" + arr_sorted[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpdks9n_ag.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpdks9n_ag.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdks9n_ag.d(37): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdks9n_ag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result[i] = \"One\" + (sorted[i] - 1);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmphjwwgng6.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmphjwwgng6.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphjwwgng6.d(32): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i] - cast(long)1)`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjwwgng6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        result[i] = \"One\" + arr_sorted[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp905g1vg1.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp905g1vg1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp905g1vg1.d(33): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp905g1vg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] ret = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"One\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Two\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Three\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Four\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Five\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Six\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Seven\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 || arr[i] > 9) continue;\n        ret[i] = \"Eight\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpdstabdky.d(69): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmpdstabdky.d(79): Error: found `void` when expecting `)`\n/tmp/tmpdstabdky.d(79): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdstabdky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr1 = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        arr1[i] = arr[i];\n    }\n    \n    arr1 = sort(arr1);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr1[i] >= 1 && arr1[i] <= 9) {\n            result[i] = \"One\" + arr1[i];\n        }\n        else {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpiddwx9v7.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpiddwx9v7.d(36): Error: incompatible types for `(\"One\") + (arr1[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiddwx9v7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min)\n            min = arr[i];\n        if (arr[i] > max)\n            max = arr[i];\n    }\n    \n    if (min != 1 || max != 9)\n        return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(arr[i]);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() == 1)\n            result[i] = \"One\";\n        else if (result[i].length() == 2)\n            result[i] = \"Two\";\n        else if (result[i].length() == 3)\n            result[i] = \"Three\";\n        else if (result[i].length() == 4)\n            result[i] = \"Four\";\n        else if (result[i].length() == 5)\n            result[i] = \"Five\";\n        else if (result[i].length() == 6)\n            result[i] = \"Six\";\n        else if (result[i].length() == 7)\n            result[i] = \"Seven\";\n        else if (result[i].length() == 8)\n            result[i] = \"Eight\";\n        else if (result[i].length() == 9)\n            result[i] = \"Nine\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpgtr2nzhb.d(41): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpgtr2nzhb.d(45): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(47): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(49): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(51): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(53): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(55): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(57): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(59): Error: no property `length` for type `string`\n/tmp/tmpgtr2nzhb.d(61): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgtr2nzhb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"One\" + arr_sorted[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmps72e3f43.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmps72e3f43.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmps72e3f43.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps72e3f43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] res = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"One\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Two\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Three\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Four\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Five\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Six\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Seven\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        res[i] = \"Eight\" + arr[i];\n    }\n    \n    for (int i = 0; i < arr.length\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp6n4o_ps1.d(69): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmp6n4o_ps1.d(79): Error: found `void` when expecting `)`\n/tmp/tmp6n4o_ps1.d(79): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6n4o_ps1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = (int)arr[i];\n        digit_count[digit]++;\n    }\n    \n    int[] sorted_digit_count = digit_count.clone();\n    \n    sort(sorted_digit_count);\n    \n    int[] sorted_digit_map = digit_map.clone();\n    \n    for (int i = 0; i < sorted_digit_count.length; i++) {\n        int digit = sorted_digit_count[i];\n        sorted_digit_map[digit] = i + 1;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = (int)arr[i];\n        result[i] = digit_map[sorted_digit_map[digit]];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp6_2exnak.d(32): Error: C style cast illegal, use `cast(int)arr[i]`\n/tmp/tmp6_2exnak.d(50): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_2exnak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9)\n            result[i] = \"One\" + arr_copy[i];\n        else if (arr_copy[i] == 10)\n            result[i] = \"Ten\";\n        else if (arr_copy[i] == 11)\n            result[i] = \"Eleven\";\n        else if (arr_copy[i] == 12)\n            result[i] = \"Twelve\";\n        else if (arr_copy[i] == 13)\n            result[i] = \"Thirteen\";\n        else if (arr_copy[i] == 14)\n            result[i] = \"Fourteen\";\n        else if (arr_copy[i] == 15)\n            result[i] = \"Fifteen\";\n        else if (arr_copy[i] == 16)\n            result[i] = \"Sixteen\";\n        else if (arr_copy[i] == 17)\n            result[i] = \"Seventeen\";\n        else if (arr_copy[i] == 18)\n            result[i] = \"Eighteen\";\n        else if (arr_copy[i] == 19)\n            result[i] = \"Nineteen\";\n        else if (arr_copy[i] == 20)\n            result[i] = \"Twenty\";\n        else if (arr_copy[i] == 30)\n            result[i] = \"Thirty\";\n        else if (arr_copy[i] == 40)\n            result[i] = \"Forty\";\n        else if (arr_copy[i] == 50)\n            result[i] = \"Fifty\";\n        else if (arr_copy[i] == 60)\n            result[i] = \"Sixty\";\n        else if (arr_copy[i] == 70)\n            result[\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp2w0aym6o.d(68): Error: expression expected, not `unittest`\n/tmp/tmp2w0aym6o.d(69): Error: found `{` when expecting `,`\n/tmp/tmp2w0aym6o.d(70): Error: expression expected, not `alias`\n/tmp/tmp2w0aym6o.d(70): Error: found `candidate` when expecting `,`\n/tmp/tmp2w0aym6o.d(70): Error: expression expected, not `=`\n/tmp/tmp2w0aym6o.d(70): Error: found `by_length` when expecting `,`\n/tmp/tmp2w0aym6o.d(70): Error: expression expected, not `;`\n/tmp/tmp2w0aym6o.d(72): Error: found `assert` when expecting `,`\n/tmp/tmp2w0aym6o.d(72): Error: found `;` when expecting `,`\n/tmp/tmp2w0aym6o.d(73): Error: found `;` when expecting `,`\n/tmp/tmp2w0aym6o.d(74): Error: found `;` when expecting `,`\n/tmp/tmp2w0aym6o.d(75): Error: found `;` when expecting `,`\n/tmp/tmp2w0aym6o.d(76): Error: found `;` when expecting `,`\n/tmp/tmp2w0aym6o.d(77): Error: expression expected, not `}`\n/tmp/tmp2w0aym6o.d(78): Error: found `void` when expecting `,`\n/tmp/tmp2w0aym6o.d(78): Error: found `{` when expecting `,`\n/tmp/tmp2w0aym6o.d(78): Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int step = (max - min + 1) / 9;\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = arr[i] - min;\n        result[i] = digit < 9 ? \"One\" + digit : \"Nine\" + (digit - 9);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        int digit = result[i].length() - 1;\n        result[i] = digit < 9 ? result[i] + digit : result[i] + (digit - 9);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        int digit = result[i].length() - 1;\n        result[i] = digit < 9 ? result[i] + digit : result[i] + (digit - 9);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp2s0busev.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp2s0busev.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmp2s0busev.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp2s0busev.d(33): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp2s0busev.d(33): Error: found `}` when expecting `;` following statement\n/tmp/tmp2s0busev.d(33): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s0busev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        \n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int len = max - min + 1;\n    \n    string[] ret = new string[len];\n    \n    for (int i = 0; i < len; i++)\n    {\n        ret[i] = \"One\";\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        ret[arr[i] - min] = \"Nine\";\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpkd5tkjhq.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpkd5tkjhq.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmpkd5tkjhq.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpkd5tkjhq.d(33): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpkd5tkjhq.d(33): Error: found `}` when expecting `;` following statement\n/tmp/tmpkd5tkjhq.d(33): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd5tkjhq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr[i] >= 10 && arr[i] <= 19) {\n            result[i] = \"Two\";\n        } else if (arr[i] >= 20 && arr[i] <= 29) {\n            result[i] = \"Three\";\n        } else if (arr[i] >= 30 && arr[i] <= 39) {\n            result[i] = \"Four\";\n        } else if (arr[i] >= 40 && arr[i] <= 49) {\n            result[i] = \"Five\";\n        } else if (arr[i] >= 50 && arr[i] <= 59) {\n            result[i] = \"Six\";\n        } else if (arr[i] >= 60 && arr[i] <= 69) {\n            result[i] = \"Seven\";\n        } else if (arr[i] >= 70 && arr[i] <= 79) {\n            result[i] = \"Eight\";\n        } else if (arr[i] >= 80 && arr[i] <= 89) {\n            result[i] = \"Nine\";\n        } else {\n            result[i] = \"\";\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = result[i].substring(0, 1).toUpperCase() + result[i].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpert9rcr9.d(61): Error: no property `substring` for type `string`\n/tmp/tmpert9rcr9.d(61): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpert9rcr9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int i = 0;\n    while (i < arr.length && arr[i] < 1) i++;\n    \n    if (i == arr.length) return new string[0];\n    \n    int j = arr.length - 1;\n    while (j >= 0 && arr[j] > 9) j--;\n    \n    if (j == -1) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int k = i; k <= j; k++) {\n        result[k] = num_to_name[arr[k]];\n    }\n    \n    for (int k = 0; k < i; k++) {\n        result[k] = num_to_name[arr[k]];\n    }\n    \n    for (int k = j + 1; k < arr.length; k++) {\n        result[k] = num_to_name[arr[k]];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpgl46ce1t.d(31): Error: cannot implicitly convert expression `arr.length - 1LU` of type `ulong` to `int`\n/tmp/tmpgl46ce1t.d(39): Error: undefined identifier `num_to_name`\n/tmp/tmpgl46ce1t.d(43): Error: undefined identifier `num_to_name`\n/tmp/tmpgl46ce1t.d(47): Error: undefined identifier `num_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl46ce1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] > max)\n            max = arr[i];\n        if (arr[i] < min)\n            min = arr[i];\n    }\n    \n    if (max - min > 9)\n        return new string[0];\n    \n    string[] ret = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > 9)\n            ret[i] = \"Nine\";\n        else if (arr[i] > 5)\n            ret[i] = \"Eight\";\n        else if (arr[i] > 3)\n            ret[i] = \"Seven\";\n        else if (arr[i] > 2)\n            ret[i] = \"Six\";\n        else if (arr[i] > 1)\n            ret[i] = \"Five\";\n        else if (arr[i] > 0)\n            ret[i] = \"Four\";\n        else if (arr[i] > -1)\n            ret[i] = \"Three\";\n        else if (arr[i] > -3)\n            ret[i] = \"Two\";\n        else if (arr[i] > -5)\n            ret[i] = \"One\";\n        else\n            ret[i] = \"Zero\";\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo4zxss55.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42974d]\n??:? void tmpo4zxss55.__unittest_L67_C1() [0x42859f]\n??:? void tmpo4zxss55.__modtest() [0x4289b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e323]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4294a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42947d]\n??:? runModuleUnitTests [0x42e0f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429c10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"One\" + arr_copy[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpm3oza9r9.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpm3oza9r9.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpm3oza9r9.d(32): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3oza9r9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[0];\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int len = max - min + 1;\n    \n    string[] result = new string[len];\n    \n    for (int i = 0; i < len; i++) {\n        result[i] = get_digit(i + min);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpikbaetph.d(33): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpikbaetph.d(34): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpikbaetph.d(42): Error: undefined identifier `get_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikbaetph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] arr_int = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        arr_int[i] = (int)arr[i];\n    \n    sort(arr_int);\n    \n    string[] result = new string[arr_int.length];\n    for (int i = 0; i < arr_int.length; i++)\n        result[i] = digit_name(arr_int[i]);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmphzlfyne1.d(28): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzlfyne1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] sorted = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        sorted[i] = digit_map[arr[i] - 1];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        result[i] = digit_map[sorted[i]];\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp277vdb7p.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmp277vdb7p.d(34): Error: cannot implicitly convert expression `digit_map[cast(ulong)sorted[cast(ulong)i]]` of type `int` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp277vdb7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max)\n        return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max)\n            return new string[]{\"One\"};\n        \n        if (arr[i] < min)\n            min = arr[i];\n        \n        if (arr[i] > max)\n            max = arr[i];\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = arr[i] - 1;\n        \n        if (digit < 0 || digit > 9)\n            result[i] = \"One\";\n        else\n            result[i] = string.format(\"%s\", digit);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        if (result[i] == \"One\")\n            result[i] = \"One\";\n        else if (result[i] == \"Two\")\n            result[i] = \"Two\";\n        else if (result[i] == \"Three\")\n            result[i] = \"Three\";\n        else if (result[i] == \"Four\")\n            result[i] = \"Four\";\n        else if (result[i] == \"Five\")\n            result[i] = \"Five\";\n        else if (result[i] == \"Six\")\n            result[i] = \"Six\";\n        else if (result[i] == \"Seven\")\n            result[i] = \"Seven\";\n        else if (result[i] == \"Eight\")\n            result[i] = \"Eight\";\n        else if (result[i] == \"Nine\")\n            result[i] = \"Nine\";\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp0qqi4a6c.d(31): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp0qqi4a6c.d(31): Error: found `}` when expecting `;` following statement\n/tmp/tmp0qqi4a6c.d(31): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp0qqi4a6c.d(36): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp0qqi4a6c.d(36): Error: found `}` when expecting `;` following statement\n/tmp/tmp0qqi4a6c.d(36): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qqi4a6c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] count = new int[10];\n    for (int i = 0; i < arr.length; i++) {\n        count[arr[i] - 1]++;\n    }\n    \n    int[] index = new int[10];\n    for (int i = 0; i < 10; i++) {\n        index[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (count[arr[i] - 1] > 0) {\n            index[arr[i] - 1] = i;\n        }\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(arr[index[arr[i] - 1]]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpm6jnfrzz.d(44): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6jnfrzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] arr_int = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) arr_int[i] = arr[i];\n    \n    sort(arr_int);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_int[i] > 9) continue;\n        result[i] = string.format(\"%s\", arr_int[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp5xm8my64.d(27): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp5xm8my64.d(29): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5xm8my64.d(34): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xm8my64.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_order[digit_count[i]] = i;\n    }\n    \n    int[] digit_reversed = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_reversed[digit_order[i]] = i;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_reversed[arr[i] - 1] + \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp40m3kw7k.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmp40m3kw7k.d(50): Error: incompatible types for `(digit_reversed[cast(ulong)(arr[cast(ulong)i] - 1L)]) + (\"\")`: `int` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40m3kw7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_index = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_index[i] = 0;\n    }\n    \n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < digit_count[i]; j++) {\n            arr[digit_index[i]++] = i + 1;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        arr[i] = arr[i] - 1;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(arr[i]);\n    }\n    \n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < digit_count[i]; j++) {\n            result[digit_index[i] + j] = String.valueOf(i + 1);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpbwba0n4f.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpbwba0n4f.d(54): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpbwba0n4f.d(59): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwba0n4f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    int min = 1;\n    int max = 9;\n    int mid = (min + max) / 2;\n    while (min <= max) {\n        if (arr.length < mid) {\n            max = mid - 1;\n        } else if (arr.length > mid) {\n            min = mid + 1;\n        } else {\n            break;\n        }\n        mid = (min + max) / 2;\n    }\n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            result[i] = String.valueOf(arr[i]);\n        }\n    }\n    for (int i = 0; i < result.length; i++) {\n        if (result[i].equals(\"One\")) {\n            result[i] = \"One\";\n        } else if (result[i].equals(\"Two\")) {\n            result[i] = \"Two\";\n        } else if (result[i].equals(\"Three\")) {\n            result[i] = \"Three\";\n        } else if (result[i].equals(\"Four\")) {\n            result[i] = \"Four\";\n        } else if (result[i].equals(\"Five\")) {\n            result[i] = \"Five\";\n        } else if (result[i].equals(\"Six\")) {\n            result[i] = \"Six\";\n        } else if (result[i].equals(\"Seven\")) {\n            result[i] = \"Seven\";\n        } else if (result[i].equals(\"Eight\")) {\n            result[i] = \"Eight\";\n        } else if (result[i].equals(\"Nine\")) {\n            result[i] = \"Nine\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpffrqs__j.d(41): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpffrqs__j.d(45): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(47): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(49): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(51): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(53): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(55): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(57): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(59): Error: no property `equals` for type `string`\n/tmp/tmpffrqs__j.d(61): Error: no property `equals` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffrqs__j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\";\n        }\n        else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\";\n        }\n        else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\";\n        }\n        else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\";\n        }\n        else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\";\n        }\n        else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\";\n        }\n        else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\";\n        }\n        else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\";\n        }\n        else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"Nine\";\n        }\n        else {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmprp6y_wp3.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmprp6y_wp3.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprp6y_wp3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result[i] = \"One\" + (sorted[i] - 1);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 10 && sorted[i] <= 19) {\n            result[i] = \"Two\" + (sorted[i] - 10);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 20 && sorted[i] <= 29) {\n            result[i] = \"Three\" + (sorted[i] - 20);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 30 && sorted[i] <= 39) {\n            result[i] = \"Four\" + (sorted[i] - 30);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 40 && sorted[i] <= 49) {\n            result[i] = \"Five\" + (sorted[i] - 40);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 50 && sorted[i] <= 59) {\n            result[i] = \"Six\" + (sorted[i] - 50);\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 60 && sorted[i] <= 69) {\n            result[i] = \"Seven\" + (sorted[i] - 60);\n        }\n    \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp3264kza_.d(72): Error: found `unittest` instead of statement\n/tmp/tmp3264kza_.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3264kza_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] sorted = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        sorted[i] = arr[i];\n    \n    sort(sorted, 0, sorted.length - 1);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        result[i] = digit_name(sorted[i]);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpbdjzhgwc.d(28): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpbdjzhgwc.d(30): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpbdjzhgwc.d(34): Error: undefined identifier `digit_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdjzhgwc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[0];\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int diff = max - min + 1;\n    \n    string[] result = new string[diff];\n    \n    for (int i = 0; i < diff; i++) {\n        result[i] = get_digit(i + min);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpt9e9jiye.d(33): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpt9e9jiye.d(34): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpt9e9jiye.d(42): Error: undefined identifier `get_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9e9jiye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[sorted.length];\n    for (int i = 0; i < sorted.length; i++) {\n        if (sorted[i] < 10) result[i] = \"One\";\n        else if (sorted[i] < 100) result[i] = \"Two\";\n        else if (sorted[i] < 1000) result[i] = \"Three\";\n        else if (sorted[i] < 10000) result[i] = \"Four\";\n        else if (sorted[i] < 100000) result[i] = \"Five\";\n        else if (sorted[i] < 1000000) result[i] = \"Six\";\n        else if (sorted[i] < 10000000) result[i] = \"Seven\";\n        else if (sorted[i] < 100000000) result[i] = \"Eight\";\n        else if (sorted[i] < 1000000000) result[i] = \"Nine\";\n        else result[i] = \"Ten\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp1oyx9ea7.d(35): Error: no property `clone` for type `long[]`\n/tmp/tmp1oyx9ea7.d(36): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1oyx9ea7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) {\n            arr[i] = 0;\n        } else {\n            arr[i] = digit_map[arr[i] - 1];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        arr[i] = arr[i] + \"\";\n    }\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp5gojla4y.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmp5gojla4y.d(37): Error: incompatible types for `(arr[cast(ulong)i]) + (\"\")`: `long` and `string`\n/tmp/tmp5gojla4y.d(40): Error: cannot implicitly convert expression `arr` of type `long[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gojla4y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr1 = new long[arr.length];\n    long[] arr2 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\n            arr1[i] = arr[i];\n        else\n            arr1[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr1[i] != 0)\n            arr2[i] = arr1[i];\n        else\n            arr2[i] = 0;\n    }\n    \n    string[] arr3 = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr2[i] != 0)\n            arr3[i] = get_digit(arr2[i]);\n        else\n            arr3[i] = \"\";\n    }\n    \n    return arr3;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpuq_v85a3.d(48): Error: undefined identifier `get_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq_v85a3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        ret[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp9yb8zk4d.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp9yb8zk4d.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp9yb8zk4d.d(32): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yb8zk4d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] digits = new int[10];\n    for (int i = 0; i < 10; i++)\n        digits[i] = 0;\n    \n    for (int i = 0; i < arr.length; i++)\n        if (arr[i] >= 1 && arr[i] <= 9)\n            digits[arr[i]]++;\n    \n    for (int i = 1; i < 10; i++)\n        if (digits[i] > 0)\n            for (int j = 0; j < digits[i]; j++)\n                arr[j + i - 1] = i;\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        result[i] = arr[i] < 10 ? \"One\" : \"Nine\";\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjgq7x62j.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x4296fd]\n??:? void tmpjgq7x62j.__unittest_L46_C1() [0x42854b]\n??:? void tmpjgq7x62j.__modtest() [0x428964]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e4b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429456]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42942d]\n??:? runModuleUnitTests [0x42e28d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429bc0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        arr2[i] = arr[i];\n    }\n    \n    sort(arr2);\n    \n    string[] res = new string[arr2.length];\n    for (int i = 0; i < arr2.length; i++) {\n        if (arr2[i] > 9 || arr2[i] < 1) continue;\n        res[i] = String.valueOf(arr2[i]);\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpj7cvjdne.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpj7cvjdne.d(36): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj7cvjdne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) {\n            arr[i] = 0;\n        } else {\n            arr[i] = digit_map[arr[i] - 1];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        arr[i] = arr[i] + \"\";\n    }\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp5gojla4y.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmp5gojla4y.d(37): Error: incompatible types for `(arr[cast(ulong)i]) + (\"\")`: `long` and `string`\n/tmp/tmp5gojla4y.d(40): Error: cannot implicitly convert expression `arr` of type `long[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gojla4y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] sorted_arr = arr.clone();\n    sort(sorted_arr);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = digit_map[arr[i] - 1];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpk66bw38g.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpk66bw38g.d(28): Error: no property `clone` for type `long[]`\n/tmp/tmpk66bw38g.d(29): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk66bw38g.d(34): Error: cannot implicitly convert expression `digit_map[cast(ulong)(arr[cast(ulong)i] - 1L)]` of type `int` to `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk66bw38g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr_sorted[i] > 9) continue;\n        \n        result[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpr5pmssyu.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpr5pmssyu.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpr5pmssyu.d(35): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5pmssyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 10 && arr_sorted[i] <= 99) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 100 && arr_sorted[i] <= 999) {\n            result[i] = \"Three\" + arr_sorted[i] - 100;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1000 && arr_sorted[i] <= 9999) {\n            result[i] = \"Four\" + arr_sorted[i] - 1000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 10000 && arr_sorted[i] <= 99999) {\n            result[i] = \"Five\" + arr_sorted[i] - 10000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 100000 && arr_sorted[i] <= 999999) {\n            result[i] = \"Six\" + arr_sorted[i] - 100000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpy72ei34g.d(68): Error: expression expected, not `unittest`\n/tmp/tmpy72ei34g.d(69): Error: found `{` when expecting `)`\n/tmp/tmpy72ei34g.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy72ei34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digits = new int[10];\n    for (int i = 0; i < 10; i++) {\n        digits[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            digits[arr[i]]++;\n        }\n    }\n    \n    int[] sorted = new int[10];\n    for (int i = 0; i < 10; i++) {\n        sorted[i] = digits[i];\n    }\n    \n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = String.valueOf(arr[i]);\n        }\n    }\n    \n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < sorted[i]; j++) {\n            result[j] = result[j] + \" \" + String.valueOf(i);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmppwoigjcb.d(42): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmppwoigjcb.d(47): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmppwoigjcb.d(53): Error: invalid array operation `result[cast(ulong)j] + \" \"` (possible missing [])\n/tmp/tmppwoigjcb.d(53): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwoigjcb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp5x7_ge6h.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp5x7_ge6h.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5x7_ge6h.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmp5x7_ge6h.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5x7_ge6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\";\n        } else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\";\n        } else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\";\n        } else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\";\n        } else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\";\n        } else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            result[i] = \"Seven\";\n        } else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            result[i] = \"Eight\";\n        } else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            result[i] = \"Nine\";\n        } else {\n            result[i] = \"\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpvbs4nceo.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpvbs4nceo.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbs4nceo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] count = new int[10];\n    for (int i = 0; i < arr.length; i++) {\n        count[arr[i]]++;\n    }\n    \n    int[] sorted = sort(count);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit(sorted[arr[i] - 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp5uqwdxj1.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5uqwdxj1.d(35): Error: undefined identifier `digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uqwdxj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 10 && arr_sorted[i] <= 99) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 100 && arr_sorted[i] <= 999) {\n            result[i] = \"Three\" + arr_sorted[i] - 100;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1000 && arr_sorted[i] <= 9999) {\n            result[i] = \"Four\" + arr_sorted[i] - 1000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 10000 && arr_sorted[i] <= 99999) {\n            result[i] = \"Five\" + arr_sorted[i] - 10000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 100000 && arr_sorted[i] <= 999999) {\n            result[i] = \"Six\" + arr_sorted[i] - 100000;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpy72ei34g.d(68): Error: expression expected, not `unittest`\n/tmp/tmpy72ei34g.d(69): Error: found `{` when expecting `)`\n/tmp/tmpy72ei34g.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy72ei34g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        arr2[i] = arr[i] - min;\n    }\n    \n    sort(arr2);\n    \n    string[] ret = new string[arr2.length];\n    for (int i = 0; i < arr2.length; i++) {\n        ret[i] = digit_name(arr2[i]);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpsy425hv1.d(40): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpsy425hv1.d(44): Error: undefined identifier `digit_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy425hv1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr1 = arr;\n    long[] arr2 = new long[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] >= 1 && arr[i] <= 9)\n            arr2[i] = arr[i];\n        else\n            arr2[i] = 0;\n    }\n    \n    arr = arr2;\n    \n    arr = arr.sort(std.math.less);\n    \n    arr = arr.reverse();\n    \n    arr = arr.map(std.typecons.intToStr);\n    \n    return arr;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpc708olaz.d(40): Error: no property `sort` for type `long[]`\n/tmp/tmpc708olaz.d(42): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpc708olaz.d(44): Error: no property `map` for type `long[]`\n/tmp/tmpc708olaz.d(46): Error: cannot implicitly convert expression `arr` of type `long[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc708olaz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] res = new string[arr.length];\n    \n    int i = 0;\n    int j = 0;\n    \n    while (i < arr.length)\n    {\n        if (arr[i] >= 1 && arr[i] <= 9)\n        {\n            res[j] = \"One\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 10 && arr[i] <= 19)\n        {\n            res[j] = \"Two\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 20 && arr[i] <= 29)\n        {\n            res[j] = \"Three\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 30 && arr[i] <= 39)\n        {\n            res[j] = \"Four\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 40 && arr[i] <= 49)\n        {\n            res[j] = \"Five\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 50 && arr[i] <= 59)\n        {\n            res[j] = \"Six\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 60 && arr[i] <= 69)\n        {\n            res[j] = \"Seven\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 70 && arr[i] <= 79)\n        {\n            res[j] = \"Eight\" + arr[i];\n            j++;\n        }\n        else if (arr[i] >= 80 && arr[i] <= 89)\n        {\n            res[j] = \"Nine\" + arr[i];\n            j++;\n        }\n        i++;\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpjs4a_u6_.d(35): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(40): Error: incompatible types for `(\"Two\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(45): Error: incompatible types for `(\"Three\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(50): Error: incompatible types for `(\"Four\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(55): Error: incompatible types for `(\"Five\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(60): Error: incompatible types for `(\"Six\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(65): Error: incompatible types for `(\"Seven\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(70): Error: incompatible types for `(\"Eight\") + (arr[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjs4a_u6_.d(75): Error: incompatible types for `(\"Nine\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    int min = 1;\n    int max = 9;\n    int mid = (min + max) / 2;\n    while (min <= max) {\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= min && arr[i] <= max) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            max = mid - 1;\n        } else if (count > 0) {\n            min = mid + 1;\n        } else {\n            mid = (min + max) / 2;\n        }\n    }\n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            result[i] = String.valueOf(mid);\n        } else {\n            result[i] = String.valueOf(arr[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpwclfwjg3.d(46): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpwclfwjg3.d(48): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwclfwjg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_order[digit_count[i]] = i;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_order[arr[i] - 1];\n        result[i] = digit == 0 ? \"Zero\" : digit == 1 ? \"One\" : digit == 2 ? \"Two\" : digit == 3 ? \"Three\" : digit == 4 ? \"Four\" : digit == 5 ? \"Five\" : digit == 6 ? \"Six\" : digit == 7 ? \"Seven\" : digit == 8 ? \"Eight\" : digit == 9 ? \"Nine\" : \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpda1h28ra.d(26): Error: a struct is not a valid initializer for a `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpda1h28ra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] arr_int = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        arr_int[i] = (int)arr[i];\n    \n    int[] arr_int_sorted = arr_int.clone();\n    Arrays.sort(arr_int_sorted);\n    \n    int[] arr_int_sorted_rev = arr_int_sorted.clone();\n    for (int i = 0; i < arr_int_sorted_rev.length; i++)\n        arr_int_sorted_rev[i] = arr_int_sorted_rev[i] - 1;\n    \n    string[] arr_str = new string[arr_int_sorted_rev.length];\n    for (int i = 0; i < arr_int_sorted_rev.length; i++)\n        arr_str[i] = String.valueOf(arr_int_sorted_rev[i]);\n    \n    return arr_str;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp1cmpihw8.d(28): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmpihw8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr;\n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Nine\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"One\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Two\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Three\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Four\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Five\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Six\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result[i] = \"Seven\";\n    }\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] > 9) continue;\n        result\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp3hzm6hs8.d(83): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp3hzm6hs8.d(93): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3hzm6hs8.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hzm6hs8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        min = Math.min(min, arr[i]);\n        max = Math.max(max, arr[i]);\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            result[i] = String.valueOf(arr[i]);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].equals(\"One\")) {\n            result[i] = \"One\";\n        } else if (result[i].equals(\"Two\")) {\n            result[i] = \"Two\";\n        } else if (result[i].equals(\"Three\")) {\n            result[i] = \"Three\";\n        } else if (result[i].equals(\"Four\")) {\n            result[i] = \"Four\";\n        } else if (result[i].equals(\"Five\")) {\n            result[i] = \"Five\";\n        } else if (result[i].equals(\"Six\")) {\n            result[i] = \"Six\";\n        } else if (result[i].equals(\"Seven\")) {\n            result[i] = \"Seven\";\n        } else if (result[i].equals(\"Eight\")) {\n            result[i] = \"Eight\";\n        } else if (result[i].equals(\"Nine\")) {\n            result[i] = \"Nine\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp0xkk0yjh.d(31): Error: undefined identifier `Math`\n/tmp/tmp0xkk0yjh.d(32): Error: undefined identifier `Math`\n/tmp/tmp0xkk0yjh.d(39): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmp0xkk0yjh.d(44): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(46): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(48): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(50): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(52): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(54): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(56): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(58): Error: no property `equals` for type `string`\n/tmp/tmp0xkk0yjh.d(60): Error: no property `equals` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xkk0yjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    int[] count = new int[10];\n    for (int i = 0; i < arr.length; i++) {\n        count[arr[i]]++;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (count[i] > 0) {\n            count[i] = count[i] * arr.length / count[i];\n        }\n    }\n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_to_name(arr[i]);\n    }\n    for (int i = 0; i < 10; i++) {\n        if (count[i] > 0) {\n            for (int j = 0; j < count[i]; j++) {\n                result[j] = result[j] + digit_to_name(i);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmplkraam49.d(31): Error: cannot implicitly convert expression `cast(ulong)count[cast(ulong)i] * arr.length / cast(ulong)count[cast(ulong)i]` of type `ulong` to `int`\n/tmp/tmplkraam49.d(36): Error: undefined identifier `digit_to_name`\n/tmp/tmplkraam49.d(41): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkraam49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] arr_int = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) arr_int[i] = (int)arr[i];\n    \n    int[] arr_int_sorted = arr_int.clone();\n    Arrays.sort(arr_int_sorted);\n    \n    string[] arr_str = new string[arr_int_sorted.length];\n    for (int i = 0; i < arr_int_sorted.length; i++) {\n        arr_str[i] = get_digit_name(arr_int_sorted[i]);\n    }\n    \n    return arr_str;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpbeptid4p.d(27): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbeptid4p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = digit_map[arr[i] - 1];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_order = new int[10];\n    \n    for (int i = 0; i < 10; i++)\n    {\n        digit_order[digit_count[i]] = i;\n        digit_count[i] = 0;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = digit_order[arr[i] - 1];\n        result[i] = digit == 0 ? \"\" : digit_map[digit - 1];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpgakn3g_t.d(27): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpgakn3g_t.d(50): Error: incompatible types for `(\"\") : (digit_map[cast(ulong)(digit - 1)])`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgakn3g_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int start = 0;\n    int end = arr.length - 1;\n    \n    while (start < end) {\n        if (arr[start] < 1 || arr[start] > 9) {\n            start++;\n            continue;\n        }\n        if (arr[end] < 1 || arr[end] > 9) {\n            end--;\n            continue;\n        }\n        \n        if (arr[start] < arr[end]) {\n            swap(arr, start, end);\n            start++;\n            end--;\n        }\n        else {\n            start++;\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9)\n            continue;\n        arr[i] = String.valueOf(arr[i]);\n    }\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp1qetzx1z.d(28): Error: cannot implicitly convert expression `arr.length - 1LU` of type `ulong` to `int`\n/tmp/tmp1qetzx1z.d(41): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmp1qetzx1z.d(53): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmp1qetzx1z.d(56): Error: cannot implicitly convert expression `arr` of type `long[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qetzx1z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int len = max - min + 1;\n    \n    string[] ret = new string[len];\n    \n    for (int i = 0; i < len; i++) {\n        ret[i] = \"One\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        int idx = arr[i] - min;\n        ret[idx] = \"Nine\";\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmptgfqubt7.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmptgfqubt7.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmptgfqubt7.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmptgfqubt7.d(32): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmptgfqubt7.d(32): Error: found `}` when expecting `;` following statement\n/tmp/tmptgfqubt7.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgfqubt7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min != 1 || max != 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = digit_to_name(arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp0bi38rj7.d(37): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0bi38rj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (sorted[i] >= 1 && sorted[i] <= 9)\n            result[i] = \"One\" + (sorted[i] - 1);\n        else\n            result[i] = \"\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpya17w_dz.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpya17w_dz.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpya17w_dz.d(34): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i] - cast(long)1)`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpya17w_dz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 10 && arr_sorted[i] <= 19) {\n            result[i] = \"Two\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 20 && arr_sorted[i] <= 29) {\n            result[i] = \"Three\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 30 && arr_sorted[i] <= 39) {\n            result[i] = \"Four\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 40 && arr_sorted[i] <= 49) {\n            result[i] = \"Five\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 50 && arr_sorted[i] <= 59) {\n            result[i] = \"Six\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpp4yof18_.d(67): Error: found `unittest` instead of statement\n/tmp/tmpp4yof18_.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4yof18_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[] { \"One\" };\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[] { \"One\" };\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = arr[i] - min;\n        result[i] = String.valueOf(digit);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].toUpperCase();\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpszdprpr2.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpszdprpr2.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmpszdprpr2.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpszdprpr2.d(32): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpszdprpr2.d(32): Error: found `}` when expecting `;` following statement\n/tmp/tmpszdprpr2.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszdprpr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[] { \"One\" };\n    \n    int mid = (min + max) / 2;\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) result[i] = \"One\";\n        else if (arr[i] < mid) result[i] = \"One\";\n        else if (arr[i] == mid) result[i] = \"Two\";\n        else if (arr[i] == mid + 1) result[i] = \"Three\";\n        else if (arr[i] == mid + 2) result[i] = \"Four\";\n        else if (arr[i] == mid + 3) result[i] = \"Five\";\n        else if (arr[i] == mid + 4) result[i] = \"Six\";\n        else if (arr[i] == mid + 5) result[i] = \"Seven\";\n        else if (arr[i] == mid + 6) result[i] = \"Eight\";\n        else if (arr[i] == mid + 7) result[i] = \"Nine\";\n        else result[i] = \"One\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpfk8zu20s.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpfk8zu20s.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmpfk8zu20s.d(29): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfk8zu20s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int len = max - min + 1;\n    \n    string[] ret = new string[len];\n    \n    for (int i = 0; i < len; i++) {\n        ret[i] = get_digit(i + min);\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp_3zatgpm.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp_3zatgpm.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmp_3zatgpm.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp_3zatgpm.d(32): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp_3zatgpm.d(32): Error: found `}` when expecting `;` following statement\n/tmp/tmp_3zatgpm.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_3zatgpm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        if (arr[i] < 1) continue;\n        result[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpltdpx7hj.d(74): Error: found `unittest` when expecting `)`\n/tmp/tmpltdpx7hj.d(84): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpltdpx7hj.d(84): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltdpx7hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            ret[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 10 && arr_sorted[i] <= 99) {\n            ret[i] = \"Two\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 100 && arr_sorted[i] <= 999) {\n            ret[i] = \"Three\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 1000 && arr_sorted[i] <= 9999) {\n            ret[i] = \"Four\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 10000 && arr_sorted[i] <= 99999) {\n            ret[i] = \"Five\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 100000 && arr_sorted[i] <= 999999) {\n            ret[i] = \"Six\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpjt6sp9zl.d(67): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmpjt6sp9zl.d(77): Error: found `void` when expecting `)`\n/tmp/tmpjt6sp9zl.d(77): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt6sp9zl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] count = new int[10];\n    for (int i = 0; i < arr.length; i++) {\n        count[arr[i] - 1]++;\n    }\n    \n    for (int i = 0; i < 10; i++) {\n        if (count[i] > 0) {\n            count[i] = count[i] * arr.length / count[i];\n        }\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(count[arr[i] - 1]);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i].substring(0, 1).toUpperCase() + result[i].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpy8b4x9qs.d(33): Error: cannot implicitly convert expression `cast(ulong)count[cast(ulong)i] * arr.length / cast(ulong)count[cast(ulong)i]` of type `ulong` to `int`\n/tmp/tmpy8b4x9qs.d(39): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpy8b4x9qs.d(43): Error: no property `substring` for type `string`\n/tmp/tmpy8b4x9qs.d(43): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8b4x9qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpmi4zgkdm.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpmi4zgkdm.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmi4zgkdm.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmpmi4zgkdm.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi4zgkdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n        \n        if (arr[i] == min) min++;\n        if (arr[i] == max) max--;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) result[i] = \"One\";\n        else result[i] = string.format(\"%s\", arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpe10g7o0i.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpe10g7o0i.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmpe10g7o0i.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpe10g7o0i.d(33): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpe10g7o0i.d(33): Error: found `}` when expecting `;` following statement\n/tmp/tmpe10g7o0i.d(33): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe10g7o0i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9)\n        {\n            result[i] = \"One\" + arr_copy[i];\n        }\n        else if (arr_copy[i] >= 10 && arr_copy[i] <= 19)\n        {\n            result[i] = \"Two\" + arr_copy[i] - 10;\n        }\n        else if (arr_copy[i] >= 20 && arr_copy[i] <= 29)\n        {\n            result[i] = \"Three\" + arr_copy[i] - 20;\n        }\n        else if (arr_copy[i] >= 30 && arr_copy[i] <= 39)\n        {\n            result[i] = \"Four\" + arr_copy[i] - 30;\n        }\n        else if (arr_copy[i] >= 40 && arr_copy[i] <= 49)\n        {\n            result[i] = \"Five\" + arr_copy[i] - 40;\n        }\n        else if (arr_copy[i] >= 50 && arr_copy[i] <= 59)\n        {\n            result[i] = \"Six\" + arr_copy[i] - 50;\n        }\n        else if (arr_copy[i] >= 60 && arr_copy[i] <= 69)\n        {\n            result[i] = \"Seven\" + arr_copy[i] - 60;\n        }\n        else if (arr_copy[i] >= 70 && arr_copy[i] <= 79)\n        {\n            result[i] = \"Eight\" + arr_copy[i] - 70;\n        }\n        else if (arr_copy[i] >= 80 && arr_copy[i] <= 89)\n        {\n            result[i] = \"Nine\" + arr_copy[i\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpnp2w4bs4.d(69): Error: found `unittest` when expecting `,`\n/tmp/tmpnp2w4bs4.d(79): Error: found `void` when expecting `,`\n/tmp/tmpnp2w4bs4.d(79): Error: found `{` when expecting `,`\n/tmp/tmpnp2w4bs4.d(79): Error: expression expected, not `}`\n/tmp/tmpnp2w4bs4.d(79): Error: found `End of File` when expecting `,`\n/tmp/tmpnp2w4bs4.d(79): Error: found `End of File` when expecting `]`\n/tmp/tmpnp2w4bs4.d(79): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpnp2w4bs4.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnp2w4bs4.d(79): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnp2w4bs4.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp2w4bs4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[]{\"One\"};\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) return new string[]{\"One\"};\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) result[i] = \"One\";\n        else result[i] = to_string(arr[i]);\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min || arr[i] > max) result[i] = \"One\";\n        else result[i] = to_string(arr[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpmswfsk3d.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpmswfsk3d.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmpmswfsk3d.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpmswfsk3d.d(32): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpmswfsk3d.d(32): Error: found `}` when expecting `;` following statement\n/tmp/tmpmswfsk3d.d(32): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmswfsk3d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    long diff = max - min + 1;\n    \n    string[] result = new string[diff];\n    \n    for (int i = 0; i < diff; i++) {\n        result[i] = \"One\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[i] - 1] = \"Nine\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[i] - 1] = \"Two\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[i] - 1] = \"Three\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[i] - 1] = \"Four\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[i] - 1] = \"Five\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[i] - 1] = \"Six\";\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        result[arr[\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpxt3bsv6f.d(76): Error: expression expected, not `unittest`\n/tmp/tmpxt3bsv6f.d(77): Error: found `{` when expecting `,`\n/tmp/tmpxt3bsv6f.d(78): Error: expression expected, not `alias`\n/tmp/tmpxt3bsv6f.d(78): Error: found `candidate` when expecting `,`\n/tmp/tmpxt3bsv6f.d(78): Error: expression expected, not `=`\n/tmp/tmpxt3bsv6f.d(78): Error: found `by_length` when expecting `,`\n/tmp/tmpxt3bsv6f.d(78): Error: expression expected, not `;`\n/tmp/tmpxt3bsv6f.d(80): Error: found `assert` when expecting `,`\n/tmp/tmpxt3bsv6f.d(80): Error: found `;` when expecting `,`\n/tmp/tmpxt3bsv6f.d(81): Error: found `;` when expecting `,`\n/tmp/tmpxt3bsv6f.d(82): Error: found `;` when expecting `,`\n/tmp/tmpxt3bsv6f.d(83): Error: found `;` when expecting `,`\n/tmp/tmpxt3bsv6f.d(84): Error: found `;` when expecting `,`\n/tmp/tmpxt3bsv6f.d(85): Error: expression expected, not `}`\n/tmp/tmpxt3bsv6f.d(86): Error: found `void` when expecting `,`\n/tmp/tmpxt3bsv6f.d(86): Error: found `{` when expecting `,`\n/tmp/tmpxt3bsv6f.d(86): Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > 9 || arr[i] < 1) continue;\n        result[i] = String.valueOf(arr[i]);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        if (result[i].length() > 1)\n        {\n            result[i] = result[i].substring(0, 1);\n        }\n        else\n        {\n            result[i] = result[i].substring(0, 1);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        if (result[i].equals(\"0\"))\n        {\n            result[i] = \"Zero\";\n        }\n        else if (result[i].equals(\"1\"))\n        {\n            result[i] = \"One\";\n        }\n        else if (result[i].equals(\"2\"))\n        {\n            result[i] = \"Two\";\n        }\n        else if (result[i].equals(\"3\"))\n        {\n            result[i] = \"Three\";\n        }\n        else if (result[i].equals(\"4\"))\n        {\n            result[i] = \"Four\";\n        }\n        else if (result[i].equals(\"5\"))\n        {\n            result[i] = \"Five\";\n        }\n        else if (result[i].equals(\"6\"))\n        {\n            result[i] = \"Six\";\n        }\n        else if (result[i].equals(\"7\"))\n        {\n            result[i] = \"Seven\";\n        }\n        else if (result[i].equals(\"8\"))\n        {\n            result[i] = \"Eight\";\n        }\n        else if (result[i].equals(\"9\"))\n        {\n            result[i] = \"Nine\";\n        }\n    }\n    \n    return result\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpuqxjvvyn.d(91): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpuqxjvvyn.d(101): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqxjvvyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result[i] = \"One\" + (sorted[i] - 1);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmphjwwgng6.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmphjwwgng6.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphjwwgng6.d(32): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i] - cast(long)1)`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjwwgng6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = 1, max = 9;\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        min = Math.min(min, arr[i]);\n        max = Math.max(max, arr[i]);\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) return new string[0];\n        result[i] = String.valueOf(arr[i] - min + 1);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = result[i].substring(0, 1).toUpperCase() + result[i].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpyy5i7p0i.d(31): Error: undefined identifier `Math`\n/tmp/tmpyy5i7p0i.d(32): Error: undefined identifier `Math`\n/tmp/tmpyy5i7p0i.d(40): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpyy5i7p0i.d(45): Error: no property `substring` for type `string`\n/tmp/tmpyy5i7p0i.d(45): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyy5i7p0i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    if (min < 1 || max > 9) return new string[0];\n    \n    long diff = max - min + 1;\n    \n    string[] result = new string[diff];\n    \n    for (int i = 0; i < diff; i++) {\n        result[i] = get_digit(i + min);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmppfey45lh.d(41): Error: undefined identifier `get_digit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfey45lh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++)\n    {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9)\n            result[i] = \"One\" + arr_sorted[i];\n        else\n            result[i] = \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmptc8z15e5.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmptc8z15e5.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmptc8z15e5.d(35): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptc8z15e5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] sorted = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        sorted[i] = arr[i];\n    \n    sort(sorted, 0, sorted.length - 1);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        result[i] = digit_to_name(sorted[i]);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpz1p3kup_.d(28): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpz1p3kup_.d(30): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpz1p3kup_.d(34): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1p3kup_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1)\n            continue;\n        result[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpn7unftm2.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpn7unftm2.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpn7unftm2.d(34): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7unftm2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"One\" + arr_sorted[i];\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"Two\" + arr_sorted[i];\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"Three\" + arr_sorted[i];\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"Four\" + arr_sorted[i];\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"Five\" + arr_sorted[i];\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        result[i] = \"Six\" + arr_sorted[i];\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpwxf52c_o.d(63): Error: found `unittest` when expecting `,`\n/tmp/tmpwxf52c_o.d(73): Error: found `void` when expecting `,`\n/tmp/tmpwxf52c_o.d(73): Error: found `{` when expecting `,`\n/tmp/tmpwxf52c_o.d(73): Error: expression expected, not `}`\n/tmp/tmpwxf52c_o.d(73): Error: found `End of File` when expecting `,`\n/tmp/tmpwxf52c_o.d(73): Error: found `End of File` when expecting `]`\n/tmp/tmpwxf52c_o.d(73): Error: found `End of File` when expecting `)`\n/tmp/tmpwxf52c_o.d(73): Error: found `End of File` instead of statement\n/tmp/tmpwxf52c_o.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwxf52c_o.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxf52c_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max)\n        return new string[]{\"One\"};\n    \n    int len = arr.length;\n    int mid = len / 2;\n    \n    long[] left = new long[mid];\n    long[] right = new long[len - mid];\n    \n    for (int i = 0; i < len; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            left[i] = arr[i];\n        } else {\n            right[i] = arr[i];\n        }\n    }\n    \n    string[] left_s = by_length(left);\n    string[] right_s = by_length(right);\n    \n    string[] result = new string[len];\n    \n    for (int i = 0; i < len; i++) {\n        result[i] = left_s[i] + \" \" + right_s[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpop3jupgt.d(31): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpop3jupgt.d(31): Error: found `}` when expecting `;` following statement\n/tmp/tmpop3jupgt.d(31): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpop3jupgt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        arr2[i] = arr[i];\n    \n    sort(arr2);\n    \n    string[] result = new string[arr2.length];\n    for (int i = 0; i < arr2.length; i++)\n        result[i] = digit_name(arr2[i]);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpy4u1__9t.d(30): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpy4u1__9t.d(34): Error: undefined identifier `digit_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4u1__9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            result[i] = \"Two\" + arr_sorted[i] - 10;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            result[i] = \"Three\" + arr_sorted[i] - 20;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            result[i] = \"Four\" + arr_sorted[i] - 30;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            result[i] = \"Five\" + arr_sorted[i] - 40;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            result[i] = \"Six\" + arr_sorted[i] - 50;\n        }\n    }\n    for (int i = 0; i < arr_sorted.length;\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp2ivxu9l8.d(61): Error: expression expected, not `unittest`\n/tmp/tmp2ivxu9l8.d(62): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ivxu9l8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9)\n        {\n            result[i] = \"One\" + arr_copy[i];\n        }\n        else\n        {\n            result[i] = \"\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpch7w8taq.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpch7w8taq.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpch7w8taq.d(36): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpch7w8taq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = (int)arr[i];\n        if (digit >= 1 && digit <= 9) {\n            digit_count[digit]++;\n        }\n    }\n    \n    int[] sorted_digit_count = digit_count.clone();\n    \n    sort(sorted_digit_count);\n    \n    int[] sorted_digit_map = digit_map.clone();\n    \n    sort(sorted_digit_map);\n    \n    int[] sorted_arr = arr.clone();\n    \n    sort(sorted_arr);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = (int)arr[i];\n        if (digit >= 1 && digit <= 9) {\n            result[i] = digit_map[sorted_digit_map[sorted_digit_count[digit] - 1]];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpzpceg12c.d(31): Error: C style cast illegal, use `cast(int)arr[i]`\n/tmp/tmpzpceg12c.d(52): Error: C style cast illegal, use `cast(int)arr[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpceg12c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1)\n            continue;\n        ret[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return ret;\n}\n\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpd3q1xmgf.d(27): Error: no property `clone` for type `long[]`\n/tmp/tmpd3q1xmgf.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpd3q1xmgf.d(35): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3q1xmgf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        result[i] = String.valueOf(arr_sorted[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp65jdl_bi.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp65jdl_bi.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp65jdl_bi.d(32): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65jdl_bi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    \n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 9) continue;\n        if (arr[i] < 1) continue;\n        \n        result[i] = String.valueOf(arr[i]);\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() > 1) {\n            result[i] = result[i].substring(0, 1);\n        }\n        \n        if (result[i].length() < 2) {\n            result[i] = result[i] + result[i];\n        }\n        \n        if (result[i].length() > 2) {\n            result[i] = result[i].substring(0, 2);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        result[i] = String.valueOf(result[i].charAt(0)) + result[i].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpq0fehw1p.d(42): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpq0fehw1p.d(46): Error: no property `length` for type `string`\n/tmp/tmpq0fehw1p.d(47): Error: no property `substring` for type `string`\n/tmp/tmpq0fehw1p.d(50): Error: no property `length` for type `string`\n/tmp/tmpq0fehw1p.d(51): Error: invalid array operation `result[cast(ulong)i] + result[cast(ulong)i]` (possible missing [])\n/tmp/tmpq0fehw1p.d(54): Error: no property `length` for type `string`\n/tmp/tmpq0fehw1p.d(55): Error: no property `substring` for type `string`\n/tmp/tmpq0fehw1p.d(60): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpq0fehw1p.d(60): Error: no property `substring` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0fehw1p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] <= 9) {\n            ret[i] = \"One\";\n        } else if (arr_sorted[i] > 9 && arr_sorted[i] <= 18) {\n            ret[i] = \"Two\";\n        } else if (arr_sorted[i] > 18 && arr_sorted[i] <= 27) {\n            ret[i] = \"Three\";\n        } else if (arr_sorted[i] > 27 && arr_sorted[i] <= 36) {\n            ret[i] = \"Four\";\n        } else if (arr_sorted[i] > 36 && arr_sorted[i] <= 45) {\n            ret[i] = \"Five\";\n        } else if (arr_sorted[i] > 45 && arr_sorted[i] <= 54) {\n            ret[i] = \"Six\";\n        } else if (arr_sorted[i] > 54 && arr_sorted[i] <= 63) {\n            ret[i] = \"Seven\";\n        } else if (arr_sorted[i] > 63 && arr_sorted[i] <= 72) {\n            ret[i] = \"Eight\";\n        } else if (arr_sorted[i] > 72 && arr_sorted[i] <= 81) {\n            ret[i] = \"Nine\";\n        } else {\n            ret[i] = \"\";\n        }\n    }\n    \n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpo3bzji68.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpo3bzji68.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3bzji68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr1 = arr.clone();\n    \n    sort(arr1);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr1[i] >= 1 && arr1[i] <= 9) {\n            result[i] = \"One\" + arr1[i];\n        }\n        else if (arr1[i] >= 10 && arr1[i] <= 99) {\n            result[i] = \"Two\" + arr1[i];\n        }\n        else if (arr1[i] >= 100 && arr1[i] <= 999) {\n            result[i] = \"Three\" + arr1[i];\n        }\n        else if (arr1[i] >= 1000 && arr1[i] <= 9999) {\n            result[i] = \"Four\" + arr1[i];\n        }\n        else if (arr1[i] >= 10000 && arr1[i] <= 99999) {\n            result[i] = \"Five\" + arr1[i];\n        }\n        else if (arr1[i] >= 100000 && arr1[i] <= 999999) {\n            result[i] = \"Six\" + arr1[i];\n        }\n        else if (arr1[i] >= 1000000 && arr1[i] <= 9999999) {\n            result[i] = \"Seven\" + arr1[i];\n        }\n        else if (arr1[i] >= 10000000 && arr1[i] <= 99999999) {\n            result[i] = \"Eight\" + arr1[i];\n        }\n        else if (arr1[i] >= 100000000 && arr1[i] <= 999999999) {\n            result[i] = \"Nine\" + arr1[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpjg8vf6bf.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpjg8vf6bf.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpjg8vf6bf.d(34): Error: incompatible types for `(\"One\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(37): Error: incompatible types for `(\"Two\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(40): Error: incompatible types for `(\"Three\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(43): Error: incompatible types for `(\"Four\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(46): Error: incompatible types for `(\"Five\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(49): Error: incompatible types for `(\"Six\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(52): Error: incompatible types for `(\"Seven\") + (arr1[cast(ulong)i])`: `string` and `long`\n/tmp/tmpjg8vf6bf.d(55): Error: incompatible types for `(\"Eight\") + (arr1[cast(ulong)i])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max)\n        return new string[]{\"One\"};\n    \n    int[] count = new int[max - min + 1];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max)\n            continue;\n        count[arr[i] - min]++;\n    }\n    \n    int[] index = new int[max - min + 1];\n    \n    for (int i = 0; i < count.length; i++)\n    {\n        index[count[i] - 1] = i + min;\n    }\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i] = String.valueOf(index[arr[i] - min]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpwyvmx2dt.d(31): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpwyvmx2dt.d(31): Error: found `}` when expecting `;` following statement\n/tmp/tmpwyvmx2dt.d(31): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwyvmx2dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] sorted = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        sorted[i] = arr[i];\n    \n    sort(sorted, 0, sorted.length - 1);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        result[i] = digit_to_name(sorted[i]);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpz1p3kup_.d(28): Error: cannot implicitly convert expression `arr[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpz1p3kup_.d(30): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpz1p3kup_.d(34): Error: undefined identifier `digit_to_name`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1p3kup_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    int[] digit_count = new int[10];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] % 10];\n        digit_count[digit]++;\n    }\n    \n    int[] digit_sort = new int[10];\n    \n    for (int i = 0; i < 10; i++) {\n        digit_sort[i] = digit_count[i];\n    }\n    \n    sort(digit_sort);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        int digit = digit_map[arr[i] % 10];\n        result[i] = digit_count[digit] == 1 ? \"One\" : digit_count[digit] == 2 ? \"Two\" : digit_count[digit] == 3 ? \"Three\" : digit_count[digit] == 4 ? \"Four\" : digit_count[digit] == 5 ? \"Five\" : digit_count[digit] == 6 ? \"Six\" : digit_count[digit] == 7 ? \"Seven\" : digit_count[digit] == 8 ? \"Eight\" : digit_count[digit] == 9 ? \"Nine\" : \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpdf6k6qxp.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpdf6k6qxp.d(41): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdf6k6qxp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digits = new int[10];\n    for (int i = 0; i < 10; i++) {\n        digits[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        digits[arr[i]]++;\n    }\n    \n    int[] sorted = new int[10];\n    for (int i = 0; i < 10; i++) {\n        sorted[i] = 0;\n    }\n    \n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < digits[i]; j++) {\n            sorted[i]++;\n        }\n    }\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = String.valueOf(sorted[arr[i]]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpmd6a576j.d(48): Error: undefined identifier `String`, did you mean alias `string`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmd6a576j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    // sort the array\n    sort(arr_copy);\n    \n    // reverse the array\n    reverse(arr_copy);\n    \n    // replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    for (int i = 0; i < arr_copy.length; i++)\n    {\n        if (arr_copy[i] >= 1 && arr_copy[i] <= 9)\n        {\n            arr_copy[i] = \"One\" + arr_copy[i];\n        }\n        else if (arr_copy[i] == 10)\n        {\n            arr_copy[i] = \"Ten\";\n        }\n        else if (arr_copy[i] == 11)\n        {\n            arr_copy[i] = \"Eleven\";\n        }\n        else if (arr_copy[i] == 12)\n        {\n            arr_copy[i] = \"Twelve\";\n        }\n        else if (arr_copy[i] == 13)\n        {\n            arr_copy[i] = \"Thirteen\";\n        }\n        else if (arr_copy[i] == 14)\n        {\n            arr_copy[i] = \"Fourteen\";\n        }\n        else if (arr_copy[i] == 15)\n        {\n            arr_copy[i] = \"Fifteen\";\n        }\n        else if (arr_copy[i] == 16)\n        {\n            arr_copy[i] = \"Sixteen\";\n        }\n        else if (arr_copy[i] == 17)\n        {\n            arr_copy[i] = \"Seventeen\";\n        }\n        else if (arr_copy[i] == 18)\n        {\n            arr_copy[i] = \"Eighteen\";\n        }\n        else if (arr_copy[i] == 19)\n        {\n            arr_copy[i] = \"Nineteen\";\n        }\n        else if (arr_copy[i\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpc6lh4848.d(82): Error: found `unittest` when expecting `,`\n/tmp/tmpc6lh4848.d(92): Error: found `void` when expecting `,`\n/tmp/tmpc6lh4848.d(92): Error: found `{` when expecting `,`\n/tmp/tmpc6lh4848.d(92): Error: expression expected, not `}`\n/tmp/tmpc6lh4848.d(92): Error: found `End of File` when expecting `,`\n/tmp/tmpc6lh4848.d(92): Error: found `End of File` when expecting `]`\n/tmp/tmpc6lh4848.d(92): Error: found `End of File` when expecting `)`\n/tmp/tmpc6lh4848.d(92): Error: found `End of File` instead of statement\n/tmp/tmpc6lh4848.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc6lh4848.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6lh4848.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    while (min <= max) {\n        int mid = (min + max) / 2;\n        if (arr.length < mid) {\n            max = mid - 1;\n        } else if (arr.length > mid) {\n            min = mid + 1;\n        } else {\n            break;\n        }\n    }\n    \n    if (min > max) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= min && arr[i] <= max) {\n            result[i] = String.valueOf(arr[i]);\n        }\n    }\n    \n    for (int i = 0; i < result.length; i++) {\n        if (result[i].length() == 1) {\n            result[i] = \"One\";\n        } else if (result[i].length() == 2) {\n            result[i] = \"Two\";\n        } else if (result[i].length() == 3) {\n            result[i] = \"Three\";\n        } else if (result[i].length() == 4) {\n            result[i] = \"Four\";\n        } else if (result[i].length() == 5) {\n            result[i] = \"Five\";\n        } else if (result[i].length() == 6) {\n            result[i] = \"Six\";\n        } else if (result[i].length() == 7) {\n            result[i] = \"Seven\";\n        } else if (result[i].length() == 8) {\n            result[i] = \"Eight\";\n        } else if (result[i].length() == 9) {\n            result[i] = \"Nine\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpy9jjw4e4.d(45): Error: undefined identifier `String`, did you mean alias `string`?\n/tmp/tmpy9jjw4e4.d(50): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(52): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(54): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(56): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(58): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(60): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(62): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(64): Error: no property `length` for type `string`\n/tmp/tmpy9jjw4e4.d(66): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9jjw4e4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_copy = arr.clone();\n    \n    sort(arr_copy);\n    \n    string[] result = new string[arr_copy.length];\n    \n    for (int i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] > 9 || arr_copy[i] < 1) continue;\n        \n        result[i] = \"One\" + arr_copy[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpl_zmf73n.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpl_zmf73n.d(28): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpl_zmf73n.d(35): Error: incompatible types for `(\"One\") + (arr_copy[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_zmf73n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int[] digit_map = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i] > 9) continue;\n        arr[i] = digit_map[arr[i] - 1];\n    }\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpaettvpig.d(26): Error: a struct is not a valid initializer for a `int[]`\n/tmp/tmpaettvpig.d(33): Error: cannot implicitly convert expression `arr` of type `long[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaettvpig.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n        return new string[0];\n    \n    long min = arr[0];\n    long max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min)\n            min = arr[i];\n        if (arr[i] > max)\n            max = arr[i];\n    }\n    \n    if (min < 1 || max > 9)\n        return new string[0];\n    \n    int n = (int) (max - min + 1);\n    \n    string[] result = new string[n];\n    for (int i = 0; i < n; i++)\n        result[i] = \"One\";\n    \n    for (int i = 0; i < arr.length; i++) {\n        int index = (int) (arr[i] - min);\n        result[index] = result[index].substring(0, 1) + result[index].substring(1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp15koyf7r.d(39): Error: C style cast illegal, use `cast(int)(max - min + 1)`\n/tmp/tmp15koyf7r.d(46): Error: C style cast illegal, use `cast(int)(arr[i] - min)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15koyf7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] sorted = arr.clone();\n    sort(sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result[i] = \"One\" + (sorted[i] - 1);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmphjwwgng6.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmphjwwgng6.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphjwwgng6.d(32): Error: incompatible types for `(\"One\") + (sorted[cast(ulong)i] - cast(long)1)`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjwwgng6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        if (arr_sorted[i] < 1) continue;\n        \n        result[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmppn6wbd7a.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmppn6wbd7a.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmppn6wbd7a.d(35): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppn6wbd7a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    int min = 1;\n    int max = 9;\n    \n    if (arr[0] < min || arr[0] > max) return new string[] {\"\"};\n    \n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] < min || arr[i] > max) return new string[] {\"\"};\n        \n        if (arr[i] < min) min = arr[i];\n        if (arr[i] > max) max = arr[i];\n    }\n    \n    int step = (max - min) / 9;\n    \n    string[] result = new string[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        int digit = arr[i] - min;\n        \n        if (digit < 0 || digit > 9) return new string[] {\"\"};\n        \n        result[i] = String.valueOf(digit);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        int digit = result[i].charAt(0) - '0';\n        \n        if (digit < 1 || digit > 9) return new string[] {\"\"};\n        \n        result[i] = String.valueOf(digit);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        int digit = result[i].charAt(0) - '0';\n        \n        if (digit < 1 || digit > 9) return new string[] {\"\"};\n        \n        result[i] = String.valueOf(digit);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\n        int digit = result[i].charAt(0) - '0';\n        \n        if (digit < 1 || digit > 9) return new string[] {\"\"};\n        \n        result[i] = String.valueOf(digit);\n    }\n    \n    for (int i = 0; i < result.length; i++)\n    {\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpi519av8r.d(29): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpi519av8r.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmpi519av8r.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpi519av8r.d(33): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpi519av8r.d(33): Error: found `}` when expecting `;` following statement\n/tmp/tmpi519av8r.d(33): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpi519av8r.d(47): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpi519av8r.d(47): Error: found `}` when expecting `;` following statement\n/tmp/tmpi519av8r.d(47): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpi519av8r.d(56): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpi519av8r.d(56): Error: found `}` when expecting `;` following statement\n/tmp/tmpi519av8r.d(56): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpi519av8r.d(65): Error: f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\" + arr[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp5x7_ge6h.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp5x7_ge6h.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5x7_ge6h.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\n/tmp/tmp5x7_ge6h.d(38): Error: incompatible types for `(\"One\") + (arr[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5x7_ge6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 1 && arr_sorted[i] <= 9) {\n            result[i] = \"One\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 10 && arr_sorted[i] <= 99) {\n            result[i] = \"Two\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 100 && arr_sorted[i] <= 999) {\n            result[i] = \"Three\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 1000 && arr_sorted[i] <= 9999) {\n            result[i] = \"Four\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 10000 && arr_sorted[i] <= 99999) {\n            result[i] = \"Five\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] >= 100000 && arr_sorted[i] <= 999999) {\n            result[i] = \"Six\" + arr_sorted[i];\n        }\n    }\n    \n    for (int i = 0; i < arr_sorted.length\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp1q_tla6k.d(67): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmp1q_tla6k.d(77): Error: found `void` when expecting `)`\n/tmp/tmp1q_tla6k.d(77): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1q_tla6k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr_sorted[i] > 9) continue;\n        result[i] = \"One\" + arr_sorted[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpvsmxuill.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmpvsmxuill.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpvsmxuill.d(32): Error: incompatible types for `(\"One\") + (arr_sorted[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsmxuill.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr2 = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        arr2[i] = arr[i];\n    }\n    \n    sort(arr2);\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr2[i] >= 1 && arr2[i] <= 9) {\n            result[i] = \"One\" + arr2[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp2428oom8.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp2428oom8.d(36): Error: incompatible types for `(\"One\") + (arr2[cast(ulong)i])`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2428oom8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long[] arr_sorted = arr.clone();\n    sort(arr_sorted);\n    \n    string[] ret = new string[arr_sorted.length];\n    for (int i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 9 || arr_sorted[i] < 1) continue;\n        ret[i] = string.format(\"%s\", arr_sorted[i]);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp9yb8zk4d.d(26): Error: no property `clone` for type `long[]`\n/tmp/tmp9yb8zk4d.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp9yb8zk4d.d(32): Error: no property `format` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yb8zk4d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L, -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return new string[0];\n    \n    long max = arr[0];\n    long min = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) max = arr[i];\n        if (arr[i] < min) min = arr[i];\n    }\n    \n    if (max - min > 9) return new string[0];\n    \n    string[] result = new string[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result[i] = \"One\";\n        } else if (arr[i] >= 10 && arr[i] <= 19) {\n            result[i] = \"Two\";\n        } else if (arr[i] >= 20 && arr[i] <= 29) {\n            result[i] = \"Three\";\n        } else if (arr[i] >= 30 && arr[i] <= 39) {\n            result[i] = \"Four\";\n        } else if (arr[i] >= 40 && arr[i] <= 49) {\n            result[i] = \"Five\";\n        } else if (arr[i] >= 50 && arr[i] <= 59) {\n            result[i] = \"Six\";\n        } else if (arr[i] >= 60 && arr[i] <= 69) {\n            result[i] = \"Seven\";\n        } else if (arr[i] >= 70 && arr[i] <= 79) {\n            result[i] = \"Eight\";\n        } else if (arr[i] >= 80 && arr[i] <= 89) {\n            result[i] = \"Nine\";\n        } else {\n            result[i] = \"\";\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if (result[i].length() == 0) {\n            result[i] = \"\";\n        }\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        if\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp3lxs19s8.d(68): Error: found `unittest` when expecting `(`\n/tmp/tmp3lxs19s8.d(78): Error: found `void` when expecting `)`\n/tmp/tmp3lxs19s8.d(78): Error: found `{` when expecting `;` following statement\n/tmp/tmp3lxs19s8.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lxs19s8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}