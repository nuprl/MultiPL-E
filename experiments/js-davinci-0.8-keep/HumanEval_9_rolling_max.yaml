name: HumanEval_9_rolling_max
language: js
prompt: "//From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4,\
  \ 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
  }\n\ntest();"
completions: ["  if(!numbers || numbers.length==0)\n    return [];\n  var max = numbers[0];\n\
    \  var result = [];\n  result.push(max);\n  for(var i=1;i<numbers.length;i++){\n\
    \    if(numbers[i]>max)\n      max = numbers[i];\n    result.push(max);\n  }\n\
    \  return result;\n}", "  var result = [];\n  var max = numbers[0];\n  result.push(max);\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n     \
    \ max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}",
  "    var _numbers = numbers.slice();\n    var max = _numbers[0];\n    var max_index\
    \ = 0;\n    for(var i = 1; i < _numbers.length; i++){\n        if(_numbers[i]\
    \ > max){\n            max = _numbers[i];\n            max_index = i;\n      \
    \  }\n        _numbers[i] = max;\n    }\n    return _numbers;\n}\n\n", "\tlet\
    \ max_so_far = numbers[0];\n\tlet res = [max_so_far];\n\tfor(let i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > max_so_far){\n\t\t\tmax_so_far = numbers[i];\n\t\t\
    }\n\t\tres.push(max_so_far);\n\t}\n\treturn res;\n}\n\nlet input = [1, 2, 3, 2,\
    \ 3, 4, 2];\nlet expected = [1, 2, 3, 3, 3, 4, 4];\nlet actual = rolling_max(input);",
  "  return [...(function*(){\n    var rollingMax = numbers[0];\n    yield rollingMax;\n\
    \    for(var n of numbers.slice(1)){\n      rollingMax = Math.max(rollingMax,\
    \ n);\n      yield rollingMax;\n    }\n  })()];\n}\n", "  return numbers.map(function(number,\
    \ index){\n    var sublist = numbers.slice(0, index + 1);\n    return Math.max.apply(Math,\
    \ sublist);\n  });\n}\n", "    var result = [];\n    if(numbers.length > 0){\n\
    \        result.push(numbers[0]);\n        for(var i = 1; i < numbers.length;\
    \ i++){\n            if(numbers[i] > result[i-1]){\n                result.push(numbers[i]);\n\
    \            }\n            else{\n                result.push(result[i-1]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "  var result = [];\n\
    \  var max = null;\n  for(var i = 0; i < numbers.length; i++){\n    max = Math.max(max,\
    \ numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "    let max\
    \ = numbers[0];\n    return numbers.map(n => {\n        if(n > max){\n       \
    \     max = n;\n        }\n        return max;\n    });\n}\n", "\tvar max_list\
    \ = [];\n\tvar max = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tmax_list.push(max);\n\t}\n\treturn\
    \ max_list;\n}\n", "    var temp = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        temp.push(Math.max.apply(Math, numbers.slice(0, i+1)));\n   \
    \ }\n    return temp;\n}\n", "    var max = [];\n    for(i=0; i< numbers.length;\
    \ i++){\n        max[i] = Math.max.apply(null, numbers.slice(0,i+1));\n    }\n\
    \    return max;\n}\n", "    return numbers.map((number, index) => {\n       \
    \ const slice = numbers.slice(0, index+1);\n        return Math.max(...slice);\n\
    \    });\n}\n", "    var sequence = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        var currentMax = 0;\n        for(var j = 0; j <= i; j++){\n \
    \           if(numbers[j] > currentMax){\n                currentMax = numbers[j];\n\
    \            }\n        }\n        sequence.push(currentMax);\n    }\n    return\
    \ sequence;\n}", "\tlet result = [];\n\tlet currentMax = numbers[0];\n\tresult.push(currentMax);\n\
    \tfor(i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > currentMax){\n\t\t\
    \tcurrentMax = numbers[i];\n\t\t}\n\t\tresult.push(currentMax);\n\t}\n\treturn\
    \ result;\n}\n", "    var arr = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        arr.push(Math.max.apply(null, numbers.slice(0, i+1)));\n    }\n    return\
    \ arr;\n}", "    if(numbers == null || numbers.length == 0)\n        return [];\n\
    \    var res = [];\n    var index = 0;\n    var max = numbers[0];\n    while(index\
    \ < numbers.length){\n        if(numbers[index] > max)\n            max = numbers[index];\n\
    \        res.push(max);\n        index++;\n    }\n    return res;\n}\n", "   \
    \ let max_array = [];\n    let i;\n    let len = numbers.length;\n    let current_max\
    \ = 0;\n    for(i = 0; i < len; i++){\n        current_max = Math.max(current_max,\
    \ numbers[i]);\n        max_array.push(current_max);\n    }\n    return max_array;\n\
    }\n", "    var res = [];\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   var max = numbers[i];\n        for(var j = 0; j <= i; j++){\n            if(numbers[j]\
    \ > max){\n                max = numbers[j];\n            }\n        }\n     \
    \   res.push(max);\n    }\n    return res;\n}\n", "  let max = [];\n  let maxx\
    \ = numbers[0];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i]\
    \ > maxx){\n      maxx = numbers[i];\n    }\n    max.push(maxx);\n  }\n  return\
    \ max;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
