name: HumanEval_49_modp
language: js
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["\tvar ans = 1;\n\tvar bin = Math.abs(n).toString(2);\n\t\n\tfor(var\
    \ i = 0; i < bin.length; i++){\n\t\tif(bin[i] == 1){\n\t\t\tans = (ans * Math.pow(2,\
    \ i)) % p;\n\t\t}\n\t}\n\t\n\treturn ans;\n}\n", "\tvar res = 1;\n\tvar two =\
    \ 2;\n\twhile(n>0){\n\t\tif(n%2==1){\n\t\t\tres = (res*two)%p;\n\t\t}\n\t\ttwo\
    \ = (two*two)%p;\n\t\tn = parseInt(n/2);\n\t}\n\treturn res;\n}\n", "    return\
    \  BigInt(2).pow(n) % p;\n}\n", "  var res = 1;\n  for(var i = 0; i < n; i++){\n\
    \    res = (res * 2) % p;\n  }\n  return res;\n}\n", "\tif(n == 0)\n\t\treturn\
    \ 1;\n\tif(n == 1)\n\t\treturn 2 % p;\n\telse if(n % 2 == 0)\n\t\treturn (modp(n/2,\
    \ p) * modp(n/2, p)) % p;\n\telse\n\t\treturn (2 * modp(n/2, p) * modp(n/2, p))\
    \ % p;\n}", "    // return Math.pow(2, n) % p;\n    if (n === 0) return 1;\n \
    \   if (n === 1) return 2 % p;\n    if (n % 2 === 0) {\n        return Math.pow(modp(n\
    \ / 2, p), 2) % p;\n    } else {\n        return (2 * modp(n - 1, p)) % p;\n \
    \   }\n}\n", "    if(n==0){\n        return 1;\n    }else if(n%2==0){\n      \
    \  return (modp(n/2, p) * modp(n/2, p)) % p;\n    }else{\n        return (modp(n/2,\
    \ p) * modp(n/2, p) * 2) % p;\n    }\n}\n", "\tvar res = 1;\n\tfor(var i = 0;\
    \ i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\treturn res;\n}\n\nvar crc8 =\
    \ new CRC8();\n", "  if(n === 0){\n    return 1;\n  }\n  if(n === 1){\n    return\
    \ 2;\n  }\n  if(n % 2 === 0){\n    return (2 * modp(n / 2, p)) % p;\n  }\n  else{\n\
    \    return (2 * modp(n / 2, p) * 2) % p;\n  }\n}\n", "  var res = 1;\n  for(var\
    \ i = 0; i < n; i++){\n    res = (res * 2) % p;\n  }\n  return res;\n}\n", " \
    \ return (p <= 1) ? 0 : (n < 1) ? 1 : Math.pow(2, n % (p - 1)) % p;\n}\n", " \
    \   if(n<0)\n        return modp(-n, p);\n    if(n==0)\n        return 1;\n  \
    \  var aux = modp(n/2, p);\n    aux = (aux*aux)%p;\n    if(n%2==1)\n        aux=(aux*2)%p;\n\
    \    return aux;\n}\n", "    if(n == 0){\n        return 1;\n    }\n    var x\
    \ = modp(n/2, p);\n    if(n % 2 == 0){\n        return (x * x) % p;\n    }\n \
    \   else{\n        return (x * x * 2) % p;\n    }\n}\n", "\tvar n = n.toString(2);\n\
    \tvar y = 1;\n\tfor(var i = 0; i < n.length; i++){\n\t\ty = (y*y) % p;\n\t\tif(n[i]\
    \ == '1'){\n\t\t\ty = (y*2) % p;\n\t\t}\n\t}\n\treturn y;\n}\n", "    var m =\
    \ n % p;\n    return ((n%p)+p)%p;\n}\n", "\tvar result = 1;\n\tfor(var i = 1;\
    \ i <= n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n}\n\n",
  "  // O(log n)\n  var base = 1,\n      j = 1;\n  while(j <= n){\n    if(j & n){\n\
    \      base = (base * 2) % p;\n    }\n    j = j << 1;\n  }\n  return base;\n}\n",
  "  var sum=1;\n  for(var i=0; i<n; i++){\n    sum = (sum*2)%p;\n  }\n  return sum;\n\
    }\n", "\tvar m = n % p;\n\tif (m < 0) {\n\t\tm += p;\n\t}\n\treturn m;\n}\n",
  "    var res = 1,\n        p_inv = p - 2;\n    while (p_inv > 0) {\n        if (p_inv\
    \ % 2 == 1) {\n            res = (res * n) % p;\n        }\n        n = (n * n)\
    \ % p;\n        p_inv = Math.floor(p_inv / 2);\n    }\n    return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
