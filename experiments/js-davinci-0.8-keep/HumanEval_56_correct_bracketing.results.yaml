name: HumanEval_56_correct_bracketing
language: js
results:
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"<\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \">\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count > 0){\n  \
    \      return false;\n    }\n    return true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    if(brackets === null){\n        return false;\n    }\n    if(brackets.length\
    \ % 2 !== 0){\n        return false;\n    }\n    var arr = brackets.split(\"\"\
    );\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === \"<\"){\n            count++;\n        }else{\n            count--;\n  \
    \      }\n        if(count < 0){\n            return false;\n        }\n    }\n\
    \    if(count === 0){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tif(brackets.length === 0){\n\t\treturn true;\n\t}\n\tif(brackets.length ===\
    \ 1){\n\t\treturn false;\n\t}\n\tif(brackets[0] === '>'){\n\t\treturn false;\n\
    \t}\n\tif(brackets[brackets.length - 1] === '<'){\n\t\treturn false;\n\t}\n\t\
    var count = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ === '<'){\n\t\t\tcount += 1;\n\t\t}\n\t\tif(brackets[i] === '>'){\n\t\t\tcount\
    \ -= 1;\n\t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count\
    \ === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var i;\n  var j;\n  for (i = 0; i < brackets.length; i += 1){\n    if (brackets[i]\
    \ === \"<\"){\n      for (j = i; j < brackets.length; j += 1){\n        if (brackets[j]\
    \ === \">\"){\n          break;\n        }\n      }\n      if (j === brackets.length){\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpts1914oy.js:37:10)\n    at Object.<anonymous> (/tmp/tmpts1914oy.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var brace = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"<\") {\n      brace += 1;\n    }\n    else if (brackets[i] == \">\") {\n\
    \      brace -= 1;\n    }\n    if (brace < 0) {\n      return false;\n    }\n\
    \  }\n  if (brace == 0) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\ntrue\n    at\
    \ test (/tmp/tmpc88_4yi3.js:20:10)\n    at Object.<anonymous> (/tmp/tmpc88_4yi3.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var counter = 0;\n    for (var i = 0; i < brackets.length; i++){\n      \
    \  if (brackets[i] == \"<\"){\n            counter += 1;\n        } else if (brackets[i]\
    \ == \">\"){\n            counter -= 1;\n        }\n        if (counter < 0){\n\
    \            return false;\n        }\n    }\n    if (counter == 0){\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"<\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \">\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    if (open == 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening = [];\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"<\") {\n\t\t\topening.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (opening.length\
    \ != 0) {\n\t\t\t\topening.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (opening.length == 0) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var correct=false;\n    var open=brackets.split(\"<\").length-1;\n    var\
    \ close=brackets.split(\">\").length-1;\n    if(open==close){\n        correct=true;\n\
    \    }\n    return correct;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp63ncd5fk.js:30:10)\n    at Object.<anonymous> (/tmp/tmp63ncd5fk.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tif(brackets.length == 0) return false;\n\tif(brackets.length == 1) return false;\n\
    \tif(brackets.length == 2) {\n\t\tif(brackets[0] == \"<\" && brackets[1] == \"\
    >\") return true;\n\t\telse return false;\n\t}\n\tvar c = 0;\n\tvar d = 0;\n\t\
    var o = [];\n\tvar c = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\t\
    if(brackets[i] == \"<\"){\n\t\t\to.push(i);\n\t\t}\n\t\tif(brackets[i] == \">\"\
    ){\n\t\t\tc.push(i);\n\t\t}\n\t}\n\tif(o.length != c.length) return false;\n\t\
    while(o.length != 0){\n\t\tif(o[0] > c[0]) return false;\n\t\to.shift();\n\t\t\
    c.shift();\n\t}\n\treturn true;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"<\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \">\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    // create a counter that increment if it's \"<\" and decrement if it's \"\
    >\"\n    var counter = 0;\n    // iterate through the string\n    for (var i =\
    \ 0; i < brackets.length; i++){\n        // if bracket is \"<\" increment\n  \
    \      if (brackets[i] === \"<\"){\n            counter++;\n        } else {\n\
    \            // if bracket is \">\" decrement\n            counter--;\n      \
    \  }\n        // if counter gets negative, there is a \">\" without a \"<\" before\
    \ it\n        if (counter < 0){\n            return false;\n        }\n    }\n\
    \    // if all the brackets have corresponding pairs, the counter will be 0 at\
    \ the end.\n    return counter === 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"<\") {\n      count++;\n    }\n    else if (brackets[i] === \">\") {\n\
    \      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  if (count === 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var counter = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"<\") {\n      counter += 1;\n    }\n    else if (brackets[i] == \">\")\
    \ {\n      counter -= 1;\n    }\n    if (counter < 0) {\n      return false;\n\
    \    }\n  }\n  if (counter != 0) {\n    return false;\n  }\n  return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening = 0;\n    var closing = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            opening += 1;\n   \
    \     }\n        else if (brackets[i] == \">\") {\n            closing += 1;\n\
    \        }\n    }\n    if (opening == closing) {\n        return true;\n    }\n\
    \    else {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwzss8da.js:40:10)\n    at Object.<anonymous> (/tmp/tmpdwzss8da.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  //Assume brackets is a string of \"<\" and \">\"\n  //Create a counter to count\
    \ how many left brackets there are.\n  //Loop over the brackets\n    //If we hit\
    \ a \"<\", increment the counter.\n    //If we hit a \">\", decrement the counter.\n\
    \    //If we hit a \">\" and the counter is 0, return False.\n  //If the counter\
    \ is not 0, return False.\n  //If the counter is 0, return True.\n  var counter\
    \ = 0;\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"\
    <\"){\n      counter += 1;\n    } else if(brackets[i] === \">\"){\n      counter\
    \ -= 1;\n      if(counter < 0){\n        return false;\n      }\n    }\n  }\n\
    \  if(counter === 0){\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ === \"<\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length\
    \ === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\t\
    if(stack.length !== 0){\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var position = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket\
    \ = brackets[i];\n    if (bracket === \"<\") {\n      position += 1;\n    } else\
    \ if (bracket === \">\") {\n      position -= 1;\n    }\n    if (position < 0)\
    \ {\n      return false;\n    }\n  }\n  return position === 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\ntrue\n    at\
    \ test (/tmp/tmph9rj2m54.js:20:10)\n    at Object.<anonymous> (/tmp/tmph9rj2m54.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
