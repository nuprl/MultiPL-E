name: HumanEval_26_remove_duplicates
language: js
prompt: "//From a list of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1,\
  \ 4, 5]);\n}\n\ntest();"
completions: ["    let result = []\n    numbers.forEach(num => {\n        if(result.indexOf(num)\
    \ === -1){\n            result.push(num)\n        }\n    })\n    return result\n\
    }", "    for(i=0; i<=numbers.length; i++){\n        for(j=0; j<=numbers.length;\
    \ j++){\n            if(numbers[i] === numbers[j] && i !== j){\n             \
    \   numbers.splice(j, 1);\n            }\n        }\n    }\n    return numbers;\n\
    }\n", "    var number_string = numbers.join('');\n    var dict = {};\n    var\
    \ result = [];\n    for (var i = 0; i < number_string.length; i++){\n        var\
    \ n = number_string[i];\n        if (!dict[n]){\n            dict[n] = 1;\n  \
    \      }\n        else {\n            dict[n] += 1;\n        }\n    }\n    for\
    \ (var key in dict){\n        if (dict[key] === 1){\n            result.push(key);\n\
    \        }\n    }\n    return result;\n}\n", "    let arr = []\n    for(let i\
    \ = 0; i < numbers.length; i++){\n        if(arr.indexOf(numbers[i]) == -1){\n\
    \            arr.push(numbers[i])\n        }\n    }\n    return arr\n}", "   \
    \ let obj = {};\n    let temp = [];\n    numbers.forEach(function(number){\n \
    \       if(obj[number] === undefined){\n            obj[number] = number;\n  \
    \          temp.push(number);\n        }\n    });\n    return temp;\n}", "   \
    \ return numbers.filter((element, index) => numbers.indexOf(element) === index);\n\
    }\n", "    if(!Array.isArray(numbers)){\n        throw \"Input is not an array\"\
    ;\n    }\n    let found = [];\n    return numbers.filter(function(number){\n \
    \       if(found.indexOf(number) === -1){\n            found.push(number);\n \
    \           return true;\n        }\n        return false;\n    });\n}\n", " \
    \   var output = [];\n    for (var i = 0; i < numbers.length; i++){\n        for\
    \ (var j = 0; j < numbers.length; j++){\n            if (numbers[i] == numbers[j]\
    \ && i != j){\n                if (output.indexOf(numbers[i]) == -1){\n      \
    \              output.push(numbers[i]);\n                }\n            }\n  \
    \      }\n    }\n    return output;\n}", "    var result = [];\n    var hash =\
    \ {};\n    for(var i=0; i<numbers.length; i++){\n        if(hash[numbers[i]] ==\
    \ undefined){\n            hash[numbers[i]] = 1;\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}", "  var new_array = [];\n  for (var\
    \ i = 0; i < numbers.length; i++) {\n    if (new_array.indexOf(numbers[i]) ===\
    \ -1) {\n      new_array.push(numbers[i]);\n    }\n  }\n  return new_array;\n}",
  "    var exists = {},\n        outArr = [],\n        elm;\n\n    for(var i =0; i<numbers.length;\
    \ i++)\n    {\n        elm = numbers[i];\n        if(!exists[elm])\n        {\n\
    \            outArr.push(elm);\n            exists[elm] = true;\n        }\n \
    \   }\n    return outArr;\n}\n", "    let newNumbers = [];\n    for(let i = 0;\
    \ i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === i){\n\
    \            newNumbers.push(numbers[i]);\n        }\n    }\n    return newNumbers;\n\
    }", "    for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j <\
    \ numbers.length; j++){\n            if(numbers[i] === numbers[j] && i !== j){\n\
    \                numbers.splice(j, 1);\n            }\n        }\n    }\n    return\
    \ numbers;\n}\n", "    let unique_numbers = [];\n    let unique_count = 0;\n \
    \   let unique_set = new Set();\n    for(let num of numbers){\n        if(!unique_set.has(num)){\n\
    \            unique_numbers[unique_count] = num;\n            unique_count++;\n\
    \            unique_set.add(num);\n        }\n    }\n    return unique_numbers;\n\
    }", "    var new_numbers = [];\n    for (var i = 0; i < numbers.length; i++){\n\
    \        if (new_numbers.indexOf(numbers[i]) < 0){\n            new_numbers.push(numbers[i]);\n\
    \        }\n    }\n    return new_numbers;\n}\n\nvar numbers = [1, 2, 3, 2, 4];",
  "    let output = [];\n    for(let i = 0; i < numbers.length; i++){\n        let\
    \ found = false;\n        for(let j = 0; j < output.length; j++){\n          \
    \  if(numbers[i] === output[j]){\n                found = true;\n            }\n\
    \        }\n        if(!found){\n            output.push(numbers[i]);\n      \
    \  }\n    }\n    return output;\n}", "    var result = [];\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        var num = numbers[i];\n        if (result.indexOf(num)\
    \ === -1){\n            result.push(num);\n        }\n    }\n    return result;\n\
    }", "    const uniques = new Set();\n    return numbers.filter(number => {\n \
    \       if(uniques.has(number)){\n            return false;\n        }\n     \
    \   uniques.add(number);\n        return true;\n    });\n}\n", "    const set\
    \ = new Set(numbers);\n    return [...set];\n}\n", "    var unique = [];\n   \
    \ for (var i = 0; i < numbers.length; i++) {\n        var n = numbers[i];\n  \
    \      if (unique.indexOf(n) == -1) {\n            unique.push(n);\n        }\n\
    \    }\n    return unique;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
