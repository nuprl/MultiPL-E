name: HumanEval_103_rounded_avg
language: js
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
  \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\
  \nfunction rounded_avg(n, m){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
  \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
  \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
  \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
  );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
  \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
  );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
  \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["\n}\n", "    if(n > m) return -1;\n    var sum = 0;\n    for(var i\
    \ = n; i <= m; i++){\n        sum += i;\n    }\n    return \"0b\" + Math.round(sum\
    \ / (m - n + 1)).toString(2);\n}", "\tvar sum = 0;\n\tvar count = 0;\n\tvar round;\n\
    \tvar binary;\n\tif(n > m){\n\t\treturn -1;\n\t}\n\telse{\n\t\tfor(var i = n;\
    \ i <= m; i++){\n\t\t\tsum += i;\n\t\t\tcount++;\n\t\t}\n\t\tvar avg = sum / count;\n\
    \t\tvar avg2 = Math.round(avg);\n\t\tbinary = avg2.toString(2);\n\t\tbinary =\
    \ \"0b\" + binary;\n\t\treturn binary;\n\t}\n}\n", "    let average = (m+n)/2;\n\
    \    if(n>m){\n      return -1;\n    }else{\n      return '0b' + Math.round(average).toString(2);\n\
    \    }\n}\n", "  if (n > m) {\n    return -1;\n  } else {\n    return (n + m)\
    \ / 2;\n  }\n}\n", "\tif (n>m) {return -1}\n\telse {\n\t\tvar num = Math.round((n+m)/2);\n\
    \t\tvar toBinary = num.toString(2);\n\t\tvar toBinaryString = \"0b\" + toBinary;\n\
    \t\treturn toBinaryString;\n\t}\n}", "  var sum=0;\n  if(n>m){\n    return -1;\n\
    \  }\n  for(var i=n;i<=m;i++){\n    sum+=i;\n  }\n  return (Math.round(sum/(m-n+1))).toString(2);\n\
    }", "  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n\
    \  return '0b' + avg.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\
    \ else {\n    return Math.round((n + m) / 2).toString(2);\n  }\n}", "    if(n>m){\n\
    \        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i<=m; i++){\n\
    \        sum+=i;\n    }\n    return (Math.round(sum/(m-n+1))).toString(2);\n}",
  "\tif(n>m){\n\t\treturn -1;\n\t}\n\tlet avg = Math.round((n+m)/2);\n\treturn `0b${avg.toString(2)}`;\n\
    }\n", "   if(n > m){\n      return -1;\n   }\n   var i = n;\n   var sum = 0;\n\
    \   while(i <= m){\n      sum += i;\n      i++;\n   }\n   var rounded = Math.round(sum/(m-n+1));\n\
    \   return rounded.toString(2);\n}", "  var sum = 0;\n  var count = 0;\n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  var rounded_avg =\
    \ Math.round(sum/count);\n  return \"0b\" + rounded_avg.toString(2);\n}", "  if\
    \ (n > m) {\n    return -1;\n  }\n  return Math.round((n + m) / 2).toString(2);\n\
    }\n", "    let avg = Math.round((n + m) / 2);\n    return (n <= m) ? avg.toString(2)\
    \ : -1;\n}", "    if(n>m){\n      return -1;\n    }\n    var total = 0;\n    var\
    \ count = 0;\n    while(n<=m){\n      total += n;\n      count++;\n      n++;\n\
    \    }\n    var rd = Math.round(total/count);\n    return rd.toString(2);\n  }\n\
    \  \n  //8. Take a word, and return a dictionary of each letter in the word, \n\
    \  // and how many times they appear in the word.\n  // Example:\n  // letter_histogram(\"\
    hello\") => {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n  // letter_histogram(\"\
    peter\") => {\"p\": 1, \"e\": 2, \"t\": 1, \"r\": 1}\n  function letter_histogram(word){\n\
    \    var dict = {};\n    for(var i = 0; i<word.length; i++){\n      var ltr =\
    \ word[i];\n      if(dict[ltr] == undefined){\n        dict[ltr] = 1;\n      }\n\
    \      else{\n        dict[ltr]++;\n      }\n    }\n    return dict;\n  }\n  \n\
    \  //9. Write a function that takes a dictionary of letters and their frequencies\
    \ \n  //(such as the one returned by letter_histogram), and returns a string \n\
    \  //representing a vertical histogram with the letters in the dictionary, \n\
    \  //and the frequency for each letter.\n  // Example:\n  // v_histogram({\"h\"\
    : 1, \"e\": 1, \"l\": 2, \"o\": 1}) =>\n  // \"*\n  // *\n  // ****\n  // *\n\
    \  // *\"\n  // v_histogram({\"p\": 1, \"e\": 2, \"t\": 1, \"r\": 1}) =>\n  //\
    \ \"*\n  // ***\n  // *\n  // *\"\n  function v_histogram(dictionary){\n    var\
    \ str = \"\";\n    var max = 0;\n    for(var letter in dictionary){\n      if(dictionary[letter]\
    \ > max){\n        max = dictionary[letter];\n      }", "    if(n > m) return\
    \ -1;\n    let num = 0;\n    for(let i = n; i <= m; i++){\n        num += i;\n\
    \    }\n    num = Math.round(num / (m - n + 1));\n    return \"0b\" + num.toString(2);\n\
    }", "    if(n>m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i\
    \ = n; i<=m; i++){\n        sum += i;\n    }\n    return `0b${Math.round(sum/(m-n+1)).toString(2)}`;\n\
    }", "  var ans = (n + m) / 2\n  return ans >= 0 ? '0b' + Math.round(ans).toString(2)\
    \ : -1\n}", "    var sum = 0;\n    var avg = 0;\n    var rounded_avg = 0;\n  \
    \  var binary_avg = \"\";\n    if(n > m){\n        return -1;\n    }\n    else{\n\
    \        for(var i = n; i <= m; i++){\n            sum += i;\n        }\n    \
    \    avg = sum / (m - n + 1);\n        rounded_avg = Math.round(avg);\n      \
    \  binary_avg = (rounded_avg).toString(2);\n        return \"0b\" + binary_avg;\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
