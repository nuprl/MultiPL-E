name: HumanEval_48_is_palindrome
language: js
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
  // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n//\
  \ >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
  aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
  zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
  xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
completions: ["    if (text.length <= 1){\n        return true;\n    }else if (text[0]\
    \ === text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }else{\n        return false;\n    }\n}\n", "    return text ===\
    \ reverse(text);\n}\n", "\tif (text == '') {\n\t\treturn true;\n\t}\n\n\tif (text[0]\
    \ == text[text.length - 1]) {\n\t\treturn is_palindrome(text.slice(1, -1));\n\t\
    }\n\n\treturn false;\n}\n", "    if (text.length <= 1){\n        return true;\n\
    \    } else if (text[0] == text[text.length - 1]){\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    } else {\n        return false;\n    }\n}\n", "    var\
    \ palindrome = text.split('').reverse().join('');\n    var result = palindrome\
    \ === text;\n    return result;\n}\n", "    text = text.toLowerCase();\n    let\
    \ reverseText = '';\n    for(let i = text.length - 1; i >= 0; i--){\n        reverseText\
    \ += text[i];\n    }\n    return reverseText === text;\n}\n", "    if(text ==\
    \ ''){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}", "    if (text.length == 0){\n        return\
    \ true;\n    } else {\n        if (text[0] == text[text.length - 1]){\n      \
    \      return is_palindrome(text.slice(1, text.length - 1));\n        } else {\n\
    \            return false;\n        }\n    }\n}\n", "    return text == text.split('').reverse().join('');\n\
    }\n", "  var len = text.length;\n  for (var i = 0; i < Math.floor(len/2); i++)\
    \ {\n    if (text[i] !== text[len - 1 - i]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "  var reverseText = reverse(text);\n  return text == reverseText;\n\
    }\n", "    //// YOUR CODE HERE\n    return false;\n}\n\ntest(is_palindrome(''),\
    \ true);\ntest(is_palindrome('aba'), true);\ntest(is_palindrome('aaaaa'), true);\n\
    test(is_palindrome('zbcd'), false);\n", "\tif (text.length == 0)\n\t\treturn true;\n\
    \treturn text[0] == text[text.length-1] && is_palindrome(text.slice(1,text.length-1));\n\
    }\n\n", "\tif (text.length==0){\n\t\treturn true;\n\t}\n\telse if (text.length==1){\n\
    \t\treturn true;\n\t}\n\telse if (text[0]==text[text.length-1]){\n\t\treturn is_palindrome(text.slice(1,\
    \ text.length-1));\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\n", "  return text\
    \ == reverse(text);\n}\n", "\treturn text.split('').reverse().join('') == text;\n\
    }\n\n", "    if (text.length <= 1){\n        return true;\n    } else if (text[0]\
    \ != text[text.length - 1]){\n        return false;\n    } else {\n        return\
    \ is_palindrome(text.slice(1, text.length - 1));\n    }\n}\n", "    if (text.length\
    \ < 2) {\n        return true;\n    }\n    else if (text[0] === text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    else {\n        return false;\n    }\n}", "  var n = text.length\n  for\
    \ (var i = 0; i < n/2; i++){\n    if (text[i] != text[n-i-1]){\n      return false\n\
    \    }\n  }\n  return true\n}\n", "    return text === text.split('').reverse().join('');\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
