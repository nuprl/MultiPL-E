name: HumanEval_97_multiply
language: js
prompt: "//Complete the function that takes two integers and returns \n// the product\
  \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n//\
  \ multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
  // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
  function multiply(a, b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19,\
  \ 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14,\
  \ -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17,\
  \ 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0,\
  \ 0),0);\n}\n\ntest();"
completions: ["  const str = a * b;\n  return Number(str.toString().split('').pop());\n\
    }\n", "    let result = ((a%10) * (b%10))\n\n    return result\n}", "  return\
    \ (a*b)%10;\n}", "    return (a * b) % 10;\n}", "    var a = a.toString();\n \
    \   var b = b.toString();\n    return (a[a.length-1] * b[b.length-1]);\n}", " \
    \   let unitDigitOfA = a % 10;\n    let unitDigitOfB = b % 10;\n    return unitDigitOfA\
    \ * unitDigitOfB;\n}", "    let unitDigitOfA = Math.abs(a % 10);\n    let unitDigitOfB\
    \ = Math.abs(b % 10);\n    return unitDigitOfA * unitDigitOfB;\n}", "  let numA\
    \ = a.toString().split('').reverse()[0];\n  let numB = b.toString().split('').reverse()[0];\n\
    \  let result = numA * numB;\n  return result;\n}", "    let newA = a.toString();\n\
    \    let newB = b.toString();\n    let firstNum = newA.split('');\n    let secondNum\
    \ = newB.split('');\n    let result = (parseInt(firstNum[1]) * parseInt(secondNum[1]));\n\
    \    return result;\n  }\n", "    var product = a * b;\n    var unit = product\
    \ % 10;\n    return unit;\n}\n", "    let aArr = a.toString().split('');\n   \
    \ let bArr = b.toString().split('');\n    aArr.pop();\n    bArr.pop();\n    let\
    \ aArrStr = aArr.join('');\n    let bArrStr = bArr.join('');\n    let aNum = parseInt(aArrStr);\n\
    \    let bNum = parseInt(bArrStr);\n    let result = aNum * bNum;\n    return\
    \ result;\n}", "    let unitA = a % 10;\n    let unitB = b % 10;\n    return unitA\
    \ * unitB;\n}", "    return (a % 10) * (b % 10);\n}", "\tvar a = String(a);\n\t\
    var b = String(b);\n\tvar unitA = a.substr(a.length-1);\n\tvar unitB = b.substr(b.length-1);\n\
    \tvar product = Number(unitA) * Number(unitB);\n\treturn product;\n}", "    return\
    \ (a % 10) * (b % 10);\n}", "\treturn parseInt(a.toString().split('').pop()) \n\
    \t* parseInt(b.toString().split('').pop());\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    let aa = Math.abs(a).toString().split('').map(Number);\n    let bb\
    \ = Math.abs(b).toString().split('').map(Number);\n    return aa[aa.length-1]\
    \ * bb[bb.length-1];\n}\n", "  return Math.abs(a * b).toString().split('').pop()\
    \ * 1;\n}", "    let aString = ('' + a);\n    let bString = ('' + b);\n    return\
    \ parseInt(aString[aString.length - 1]) * parseInt(bString[bString.length - 1]);\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
