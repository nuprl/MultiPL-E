name: HumanEval_136_largest_smallest_integers
language: js
prompt: "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n\
  // If there is no negative or positive integers, return them as None.\n// Examples:\n\
  // largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([])\
  \ == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nfunction largest_smallest_integers(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
  \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n \
  \ assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2,\
  \ 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
  \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["    let min = Infinity;\n    let max = -Infinity;\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] < 0 && lst[i] > max){\n        \
    \    max = lst[i];\n        } else if(lst[i] > 0 && lst[i] < min){\n         \
    \   min = lst[i];\n        }\n    }\n    return (max != -Infinity ? max : null,\
    \ min != Infinity ? min : null);\n}\n", "    // your code here\n    let largest_negative\
    \ = null;\n    let smallest_positive = null;\n    if (lst.length === 0) {\n  \
    \      return [largest_negative, smallest_positive];\n    }\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        let a = lst[i];\n        if (a < 0) {\n \
    \           if (largest_negative === null) {\n                largest_negative\
    \ = a;\n            } else if (a > largest_negative) {\n                largest_negative\
    \ = a;\n            }\n        } else if (a > 0) {\n            if (smallest_positive\
    \ === null) {\n                smallest_positive = a;\n            } else if (a\
    \ < smallest_positive) {\n                smallest_positive = a;\n           \
    \ }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n",
  "  // Your code goes here\n  let l;\n  let s;\n  let neg = lst.filter(x => x < 0).sort((a,b)\
    \ => b-a);\n  let pos = lst.filter(x => x > 0).sort((a,b) => a-b);\n  if (neg.length\
    \ > 0) {\n    l = neg[0];\n  } else {\n    l = null;\n  }\n  if (pos.length >\
    \ 0) {\n    s = pos[0];\n  } else {\n    s = null;\n  }\n  return [l, s];\n}\n",
  "    return \"(\"+lst.reduce((a, b) => b < 0 ? b : a,0)+\",\"+lst.reduce((a, b)\
    \ => b > 0 ? b : a,0)+\")\";\n}\n", "    return [lst.reduce((a, c) => a < c &&\
    \ c < 0 ? c : a, lst[0]),\n            lst.reduce((a, c) => a > c && c > 0 ? c\
    \ : a, lst[0])]\n}\n", "  var small = null;\n  var large = null;\n  if (lst.length\
    \ === 0) {\n    return [large, small];\n  }\n  else {\n    small = lst[0];\n \
    \   large = lst[0];\n    for (i = 0; i < lst.length; i++) {\n      if (lst[i]\
    \ > 0 && lst[i] < small) {\n        small = lst[i];\n      }\n      if (lst[i]\
    \ < 0 && lst[i] > large) {\n        large = lst[i];\n      }\n    }\n    return\
    \ [large, small];\n  }\n}\n", "    var neg = [];\n    var pos = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] >= 0){\n            pos.push(lst[i]);\n\
    \        }\n        else if(lst[i] < 0){\n            neg.push(lst[i]);\n    \
    \    }\n    }\n    var maxNeg = neg[0];\n    var minPos = pos[0];\n    for(var\
    \ j = 0; j < neg.length; j++){\n        if(neg[j] > maxNeg){\n            maxNeg\
    \ = neg[j];\n        }\n    }\n    for(var k = 0; k < pos.length; k++){\n    \
    \    if(pos[k] < minPos){\n            minPos = pos[k];\n        }\n    }\n  \
    \  return [maxNeg, minPos];\n}\n", "  if (lst.length == 0){\n    return [null,\
    \ null];\n  }\n  var largestNegative = null;\n  var smallestPositive = null;\n\
    \  for (var i = 0; i < lst.length; i++){\n    if (lst[i] < 0){\n      if (largestNegative\
    \ == null){\n        largestNegative = lst[i];\n      }\n      else if (lst[i]\
    \ > largestNegative){\n        largestNegative = lst[i];\n      }\n    }\n   \
    \ else if (lst[i] > 0){\n      if (smallestPositive == null){\n        smallestPositive\
    \ = lst[i];\n      }\n      else if (lst[i] < smallestPositive){\n        smallestPositive\
    \ = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n\
    }\n", "    let largest = null;\n    let smallest = null;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] < 0){\n            if(largest === null){\n\
    \                largest = lst[i];\n            }else if(lst[i] > largest){\n\
    \                largest = lst[i];\n            }\n        }else if(lst[i] > 0){\n\
    \            if(smallest === null){\n                smallest = lst[i];\n    \
    \        }else if(lst[i] < smallest){\n                smallest = lst[i];\n  \
    \          }\n        }\n    }\n    return [largest, smallest];\n}", "    let\
    \ maxNeg = -Infinity;\n    let minPos = Infinity;\n    if(lst.length == 0) return\
    \ [maxNeg, minPos];\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] <\
    \ 0){\n            if(lst[i] > maxNeg) maxNeg = lst[i];\n        }else if(lst[i]\
    \ > 0){\n            if(lst[i] < minPos) minPos = lst[i];\n        }\n    }\n\
    \    if(maxNeg == -Infinity) maxNeg = null;\n    if(minPos == Infinity) minPos\
    \ = null;\n    return [maxNeg, minPos];\n}\n", "\tlst = lst.filter(x => x > 0);\n\
    \tlet b = lst.length > 0 ? Math.min(...lst) : null;\n\tlst = lst.filter(x => x\
    \ < 0);\n\tlet a = lst.length > 0 ? Math.max(...lst) : null;\n\treturn [a, b];\n\
    }\n", "  if (lst.length < 1) {\n    return [null, null];\n  }\n  var lg = null;\n\
    \  var sm = null;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] >\
    \ 0) {\n      if (sm === null) {\n        sm = lst[i];\n      } else if (lst[i]\
    \ < sm) {\n        sm = lst[i];\n      }\n    } else if (lst[i] < 0) {\n     \
    \ if (lg === null) {\n        lg = lst[i];\n      } else if (lst[i] > lg) {\n\
    \        lg = lst[i];\n      }\n    }\n  }\n  return [lg, sm];\n}\n", "    let\
    \ min = Infinity;\n    let max = -Infinity;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n\
    \        }\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n\
    \        }\n    }\n    return [max, min];\n}", "  let a = lst.filter(x => x<0).sort((a,b)\
    \ => a-b)[0];\n  let b = lst.filter(x => x>0).sort((a,b) => a-b)[0];\n  return\
    \ a === undefined ? (null, b) : b === undefined ? (a, null) : (a, b);\n}\n", " \
    \   let positive = [];\n    let negative = [];\n    for (let i = 0; i < lst.length;\
    \ i++){\n        if (lst[i] >= 0){\n            positive.push(lst[i]);\n     \
    \   }\n        else{\n            negative.push(lst[i]);\n        }\n    }\n \
    \   let a = negative.length == 0 ? null : Math.max(...negative);\n    let b =\
    \ positive.length == 0 ? null : Math.min(...positive);\n    return [a, b];\n}",
  "    let num = lst.filter(el => el > 0);\n    let num1 = lst.filter(el => el < 0);\n\
    \    return num.length > 0 && num1.length > 0 ? [Math.max(...num1), Math.min(...num)]\
    \ : [undefined, undefined];\n}\n", "    let a = null;\n    let b = null;\n   \
    \ for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && (b === null ||\
    \ lst[i] < b)){\n            b = lst[i];\n        }\n        if(lst[i] < 0 &&\
    \ (a === null || lst[i] > a)){\n            a = lst[i];\n        }\n    }\n  \
    \  return [a, b];\n}\n", "    let min;\n    let max;\n    let booleans = [];\n\
    \    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0){\n            booleans.push(true);\n\
    \        }\n        else if(lst[i]>0){\n            booleans.push(false);\n  \
    \      }\n    }\n    for(let i=0; i<lst.length; i++){\n        if(i === 0){\n\
    \            if(booleans[i] === true){\n                max = lst[i];\n      \
    \      }\n            else if(booleans[i] === false){\n                min = lst[i];\n\
    \            }\n        }\n        else{\n            if(booleans[i] === true){\n\
    \                if(lst[i]>max){\n                    max = lst[i];\n        \
    \        }\n            }\n            else if(booleans[i] === false){\n     \
    \           if(lst[i]<min){\n                    min = lst[i];\n             \
    \   }\n            }\n        }\n    }\n    let m = max;\n    let n = min;\n \
    \   if(m === undefined){\n        m = null;\n    }\n    if(n === undefined){\n\
    \        n = null;\n    }\n    return [m, n];\n}\n", "  var ans = [null, null];\n\
    \  for (var i=0; i<lst.length; i++){\n    if (lst[i] > 0 && (ans[1] == null ||\
    \ lst[i] < ans[1])){\n      ans[1] = lst[i];\n    }\n    if (lst[i] < 0 && (ans[0]\
    \ == null || lst[i] > ans[0])){\n      ans[0] = lst[i];\n    }\n  }\n  return\
    \ ans;\n}\n", "    if(!lst.length) return [null, null];\n    if(lst.length ===\
    \ 1) return [null, null];\n    let largest_negative = Number.MIN_SAFE_INTEGER;\n\
    \    let smallest_positive = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] < 0){\n            if(lst[i] > largest_negative){\n\
    \                largest_negative = lst[i];\n            }\n        }\n      \
    \  if(lst[i] > 0){\n            if(lst[i] < smallest_positive){\n            \
    \    smallest_positive = lst[i];\n            }\n        }\n    }\n    if(largest_negative\
    \ === Number.MIN_SAFE_INTEGER){\n        largest_negative = null;\n    }\n   \
    \ if(smallest_positive === Number.MAX_SAFE_INTEGER){\n        smallest_positive\
    \ = null;\n    }\n    return [largest_negative, smallest_positive];\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
