name: HumanEval_151_double_the_difference
language: js
prompt: "//Given a list of numbers, return the sum of squares of the numbers\n// in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1,\
  \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n\
  // double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n\
  // If the input list is empty, return 0.\nfunction double_the_difference(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
  \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
  \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
  \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
  \ 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
completions: ["    let sum=0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && lst[i] > 0 && lst[i] % 1 === 0){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n", "  var total = 0;\n  for(var i\
    \ = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      total += lst[i]\
    \ * lst[i];\n    }\n  }\n  return total;\n}\n", "  var sum = 0;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}", "    if (lst.length === 0) return 0;\n    var\
    \ sum_of_squares = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i]\
    \ % 2 === 1 && lst[i] >= 0 && lst[i] % 1 === 0){\n            sum_of_squares +=\
    \ Math.pow(lst[i], 2);\n        }\n    }\n    return sum_of_squares;\n}\n", " \
    \   var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  return lst.reduce((acc,v)=>(v%2==1&&Number.isInteger(v)&&v>0?acc+v*v:acc),0);\n\
    }\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] %\
    \ 2 == 1 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] === parseInt(lst[i])){\n      sum += lst[i]\
    \ * lst[i];\n    }\n  }\n  return sum;\n}\n", "    var sum = 0;\n    for(var i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 1){\n            sum +=\
    \ Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "    var lst =\
    \ []\n    if(lst.length == 0){\n        return 0\n    }\n    var oddList = lst.filter(function(num){\n\
    \        return (num % 2 != 0) && (num > 0) && (Number.isInteger(num))\n    })\n\
    \    var doubleDifference = oddList.map(function(x){\n        return x * x\n \
    \   })\n    var total = doubleDifference.reduce(function(x,y){\n        return\
    \ x + y\n    })\n    return total\n}\n", "    // Write your code here\n    if(lst.length\
    \ < 1){\n        return 0;\n    }\n    else{\n        return lst.map(x => is_odd(x)\
    \ ? Math.pow(x, 2) : 0).reduce((x, y) => x + y, 0);\n    }\n}\n", "    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 &&\
    \ lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum_squares = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (typeof lst[i] === 'number' && lst[i]\
    \ % 2 != 0 && lst[i] >= 0) {\n            sum_squares += lst[i] ** 2;\n      \
    \  }\n    }\n    return sum_squares;\n}\n\n", "  var new_lst = [];\n  for(var\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      new_lst.push(lst[i]\
    \ * lst[i]);\n    }\n  }\n  return new_lst.reduce(function(a, b){return a + b;});\n\
    }", "    if (lst.length == 0) {\n        return 0;\n    }\n    sum = 0;\n    for\
    \ (var i = 0; i < lst.length; i++) {\n        if (typeof lst[i] == \"number\"\
    \ && lst[i] >= 0 && lst[i] % 2 != 0) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "\n}\n", "    var squareSum = 0;\n \
    \   if(lst.length === 0){\n        return 0;\n    }\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 !== 0 && lst[i] >= 0 && lst[i] % 1 === 0){\n  \
    \          squareSum += lst[i] * lst[i];\n        }\n    }\n    return squareSum;\n\
    }\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0){\n            if(lst[i] >= 0){\n                sum += lst[i] ** 2;\n\
    \            }\n        }\n    }\n    return sum;\n}\n", "  // Fill this in.\n\
    \  var odd_list = [];\n  for (var i = 0; i < lst.length; i++) {\n      if (typeof\
    \ lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 === 1) {\n          odd_list.push(lst[i]);\n\
    \      }\n  }\n  console.log(odd_list);\n  if (odd_list.length === 0) {\n    \
    \  return 0;\n  }\n  var sum = 0;\n  for (var j = 0; j < odd_list.length; j++)\
    \ {\n      sum += odd_list[j] * odd_list[j];\n  }\n  return sum;\n}", "    return\
    \ (lst.length == 0) ? 0 : lst.map(n => (typeof n === 'number' && (n >= 0) && (n\
    \ % 1 === 0)) ? Math.pow(n, 2) : 0).reduce((prev, curr) => prev + curr);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
