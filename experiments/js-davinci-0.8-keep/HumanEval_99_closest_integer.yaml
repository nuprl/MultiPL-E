name: HumanEval_99_closest_integer
language: js
prompt: "//Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer(value){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
  14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
  15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
completions: ["    let val = Number(value);\n    if(val > 0){\n        return Math.ceil(val);\n\
    \    }else{\n        return Math.floor(val);\n    }\n}", "  value = parseFloat(value)\n\
    \  return Math.round(value)\n}", "  value = +value;\n  if (isNaN(value)) {\n \
    \   return false;\n  }\n  return Math.round(value);\n}\n", "    return Math.round(value);\n\
    }", "    return Math.round(value);\n}\n", "  let num = parseFloat(value);\n  let\
    \ floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let closerToFloor\
    \ = num - floor;\n  let closerToCeil = ceil - num;\n  if(closerToFloor < closerToCeil){\n\
    \    return floor;\n  } else {\n    return ceil;\n  }\n}", "    return Number(value).toFixed(0);\n\
    }\n", "  let num = parseFloat(value);\n  if (Math.round(num) - num === 0){\n \
    \   return num;\n  } else if (Math.round(num) - num > 0){\n    return Math.floor(num);\n\
    \  } else {\n    return Math.ceil(num);\n  }\n}\n", "    let convertedToNum =\
    \ Number(value);\n    let rounded = Math.round(convertedToNum);\n    let roundedDown\
    \ = Math.floor(convertedToNum);\n    let roundedUp = Math.ceil(convertedToNum);\n\
    \    let decimal = convertedToNum - roundedDown;\n    let decimal2 = roundedUp\
    \ - convertedToNum;\n    if(decimal < decimal2){\n        return roundedDown;\n\
    \    }else if(decimal2 < decimal){\n        return roundedUp;\n    }else{\n  \
    \      return rounded;\n    }\n}", "    let numbers = value.split('.');\n    let\
    \ num1 = parseInt(numbers[0]);\n    let num2 = parseInt(numbers[1]);\n    return\
    \ (num2 >= 5) ? num1 + 1 : num1;\n}", "    //Turn value into an array using .split()\n\
    \    //Turn value into an array using .map() to loop over each number\n    //Turn\
    \ value into an array using .Math.round() to round each number\n    //Turn value\
    \ into an array using .join('') to put each number back into one string\n    //Turn\
    \ value into an array using .parseInt() to change each number back into a string\n\
    \    //Return value\n    return parseInt(value.split('').map(val => Math.round(val)).join(''));\n\
    }", "    var valInt = parseInt(value);\n    var valFloat = parseFloat(value);\n\
    \    var valStr = value.toString();\n    var valDec = valStr.slice(valStr.indexOf('.'));\n\
    \    if(valFloat>valInt){\n        if(valDec<0.5){\n            return valInt;\n\
    \        }else{\n            return valInt + 1;\n        }\n    }else{\n     \
    \   return valInt;\n    }\n}", "    const splitValue = value.split(\".\");\n \
    \   if(splitValue[1] !== undefined){\n        if(splitValue[1][0] >= 5){\n   \
    \         return Number(splitValue[0]) + 1;\n        } else {\n            return\
    \ Number(splitValue[0]);\n        }\n    } else {\n        return Number(splitValue[0]);\n\
    \    }\n}", "\tvalue = parseFloat(value);\n\tvar num = value.toString().indexOf('.');\n\
    \tif(num == -1){\n\t\treturn value;\n\t}\n\telse{\n\t\tvar before = value.toString().slice(0,num);\n\
    \t\tvar after = value.toString().slice(num+1,value.toString().length);\n\t\tif(after[0]\
    \ >= 5){\n\t\t\treturn parseInt(before) + 1;\n\t\t}\n\t\telse{\n\t\t\treturn parseInt(before);\n\
    \t\t}\n\t}\n}", "    return Math.round(value);\n}\n", "  return (value - value.toFixed(0)\
    \ > 0.5) ? (Math.ceil(value)) : (Math.floor(value));\n}", "  return value.toString().indexOf('.')\
    \ < 0 ? parseInt(value) : parseInt(value) + 0.5;\n}", "  var result = Math.round(value);\n\
    \  return result;\n}\n", "  return value;\n}\nmodule.exports = closest_integer;",
  "    return Math.round(value);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
