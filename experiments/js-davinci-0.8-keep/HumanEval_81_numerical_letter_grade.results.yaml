name: HumanEval_81_numerical_letter_grade
language: js
results:
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let letter_grades=[]\n\
    \    for(let grade of grades){\n      if(grade>4.0){\n        letter_grades.push('A+')\n\
    \      }\n      else if(grade>3.7){\n        letter_grades.push('A')\n      }\n\
    \      else if(grade>3.3){\n        letter_grades.push('A-')\n      }\n      else\
    \ if(grade>3.0){\n        letter_grades.push('B+')\n      }\n      else if(grade>2.7){\n\
    \        letter_grades.push('B')\n      }\n      else if(grade>2.3){\n       \
    \ letter_grades.push('B-')\n      }\n      else if(grade>2.0){\n        letter_grades.push('C+')\n\
    \      }\n      else if(grade>1.7){\n        letter_grades.push('C')\n      }\n\
    \      else if(grade>1.3){\n        letter_grades.push('C-')\n      }\n      else\
    \ if(grade>1.0){\n        letter_grades.push('D+')\n      }\n      else if(grade>0.7){\n\
    \        letter_grades.push('D')\n      }\n      else if(grade>0.0){\n       \
    \ letter_grades.push('D-')\n      }\n      else{\n        letter_grades.push('E')\n\
    \      }\n    }\n    return letter_grades\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A', 'B', 'C-', 'C', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmph87ibbx8.js:72:10)\n\
    \    at Object.<anonymous> (/tmp/tmph87ibbx8.js:80:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B', 'C-', 'C', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    const gradeMap = {\n\
    \        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0':\
    \ 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n   \
    \     '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7':\
    \ 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    return grades.map(num\
    \ => gradeMap[Object.keys(gradeMap).reduce((acc, numKey) => parseFloat(numKey)\
    \ < num ? numKey : acc, '-1.0')])\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'E', 'E', 'E', 'E', 'E' ]\n\nshould equal\n\
    \n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpt4wnrwvo.js:45:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpt4wnrwvo.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'E', 'E',\
    \ 'E', 'E', 'E' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    var letter_grades\
    \ = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >=\
    \ 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            letter_grades.push('C');\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            letter_grades.push('C-');\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            letter_grades.push('D+');\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            letter_grades.push('D');\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            letter_grades.push('D-');\n        }\n        else if(grades[i]\
    \ == 0.0){\n            letter_grades.push('E');\n        }\n    }\n    return\
    \ letter_grades;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmp2do2f7m5.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2do2f7m5.js:81:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    var output = [];\n\
    \    for(var i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n\
    \            output.push('A+');\n        }\n        else if(grades[i] > 3.7){\n\
    \            output.push('A');\n        }\n        else if(grades[i] > 3.3){\n\
    \            output.push('A-');\n        }\n        else if(grades[i] > 3.0){\n\
    \            output.push('B+');\n        }\n        else if(grades[i] > 2.7){\n\
    \            output.push('B');\n        }\n        else if(grades[i] > 2.3){\n\
    \            output.push('B-');\n        }\n        else if(grades[i] > 2.0){\n\
    \            output.push('C+');\n        }\n        else if(grades[i] > 1.7){\n\
    \            output.push('C');\n        }\n        else if(grades[i] > 1.3){\n\
    \            output.push('C-');\n        }\n        else if(grades[i] > 1.0){\n\
    \            output.push('D+');\n        }\n        else if(grades[i] > 0.7){\n\
    \            output.push('D');\n        }\n        else if(grades[i] > 0.0){\n\
    \            output.push('D-');\n        }\n        else{\n            output.push('E');\n\
    \        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let letterGrades =\
    \ [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n\
    \            letterGrades.push('A+');\n        }\n        else if(grades[i] >=\
    \ 3.7){\n            letterGrades.push('A');\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            letterGrades.push('A-');\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            letterGrades.push('B+');\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            letterGrades.push('B');\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            letterGrades.push('B-');\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            letterGrades.push('C+');\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            letterGrades.push('C');\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            letterGrades.push('C-');\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            letterGrades.push('D+');\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            letterGrades.push('D');\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            letterGrades.push('D-');\n        }\n        else{\n \
    \           letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpkqo__gpc.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkqo__gpc.js:81:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let scale = {4.0:'A+',\
    \ 3.7:'A', 3.3:'A-', 3.0:'B+', 2.7:'B', 2.3:'B-', 2.0:'C+', 1.7:'C', 1.3:'C-',\
    \ 1.0:'D+', 0.7:'D', 0.0:'D-', 'E':0};\n    return grades.map(grade => {\n   \
    \     if(grade === 0) return 'E';\n        for(let key in scale){\n          \
    \  if(grade > key) return scale[key];\n        }\n    });\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'D-', 'D-', 'D-', 'D-', 'D-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmphahzogi7.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmphahzogi7.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'D-', 'D-', 'D-', 'D-', 'D-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let letter_grades\
    \ = [];\n    let a = null;\n    for(let i = 0; i < grades.length; i++){\n    \
    \    if(grades[i] == 4.0){\n            a = 'A+';\n        }\n        else if(grades[i]\
    \ > 3.7){\n            a = 'A';\n        }\n        else if(grades[i] > 3.3){\n\
    \            a = 'A-';\n        }\n        else if(grades[i] > 3.0){\n       \
    \     a = 'B+';\n        }\n        else if(grades[i] > 2.7){\n            a =\
    \ 'B';\n        }\n        else if(grades[i] > 2.3){\n            a = 'B-';\n\
    \        }\n        else if(grades[i] > 2.0){\n            a = 'C+';\n       \
    \ }\n        else if(grades[i] > 1.7){\n            a = 'C';\n        }\n    \
    \    else if(grades[i] > 1.3){\n            a = 'C-';\n        }\n        else\
    \ if(grades[i] > 1.0){\n            a = 'D+';\n        }\n        else if(grades[i]\
    \ > 0.7){\n            a = 'D';\n        }\n        else if(grades[i] > 0.0){\n\
    \            a = 'D-';\n        }\n        else if(grades[i] == 0.0){\n      \
    \      a = 'E';\n        }\n        letter_grades.push(a);\n    }\n    return\
    \ letter_grades;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let letter_grades\
    \ = grades.map(function(grade){\n        if(grade == 4.0){\n            return\
    \ 'A+';\n        }\n        else if(grade > 3.7){\n            return 'A';\n \
    \       }\n        else if(grade > 3.3){\n            return 'A-';\n        }\n\
    \        else if(grade > 3.0){\n            return 'B+';\n        }\n        else\
    \ if(grade > 2.7){\n            return 'B';\n        }\n        else if(grade\
    \ > 2.3){\n            return 'B-';\n        }\n        else if(grade > 2.0){\n\
    \            return 'C+';\n        }\n        else if(grade > 1.7){\n        \
    \    return 'C';\n        }\n        else if(grade > 1.3){\n            return\
    \ 'C-';\n        }\n        else if(grade > 1.0){\n            return 'D+';\n\
    \        }\n        else if(grade > 0.7){\n            return 'D';\n        }\n\
    \        else if(grade > 0.0){\n            return 'D-';\n        }\n        else{\n\
    \            return 'E';\n        }\n    });\n    return letter_grades;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n  const grade_table =\
    \ {\n    'A+': 4.0,\n    'A': 3.7,\n    'A-': 3.3,\n    'B+': 3.0,\n    'B': 2.7,\n\
    \    'B-': 2.3,\n    'C+': 2.0,\n    'C': 1.7,\n    'C-': 1.3,\n    'D+': 1.0,\n\
    \    'D': 0.7,\n    'D-': 0.0,\n    'E': 0.0\n  }\n  return grades.map(grade =>\
    \ {\n    return Object.keys(grade_table).find(key => grade_table[key] <= grade)\n\
    \  })\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpjtnokqwo.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjtnokqwo.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    const Grade = {\n\
    \        \"4.0\" : 'A+',\n        \"3.7\" : 'A',\n        \"3.3\" : 'A-',\n  \
    \      \"3.0\" : 'B+',\n        \"2.7\" : 'B',\n        \"2.3\" : 'B-',\n    \
    \    \"2.0\" : 'C+',\n        \"1.7\" : 'C',\n        \"1.3\" : 'C-',\n      \
    \  \"1.0\" : 'D+',\n        \"0.7\" : 'D',\n        \"0.0\" : 'D-',\n        \"\
    -0.1\" : 'E'\n    }\n    let grade = []\n    for(let i = 0; i < grades.length;\
    \ i++){\n        let key = ''\n        for(let j = 4.0; j >= -0.1; j -= 0.3){\n\
    \            if(grades[i] >= j){\n                key = j.toString()\n       \
    \         break\n            }\n        }\n        grade.push(Grade[key])\n  \
    \  }\n    return grade\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, undefined, undefined, undefined,\
    \ undefined ]\n\nshould equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpe5gq9v7i.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe5gq9v7i.js:64:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined, undefined, undefined,\
    \ undefined ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    var grades = [].slice.call(arguments);\n\
    \    var letters = [];\n    grades.forEach(function(grade){\n        switch(true){\n\
    \            case (grade >= 4.0):\n                letters.push('A+');\n     \
    \           break;\n            case (grade > 3.7):\n                letters.push('A');\n\
    \                break;\n            case (grade > 3.3):\n                letters.push('A-');\n\
    \                break;\n            case (grade > 3.0):\n                letters.push('B+');\n\
    \                break;\n            case (grade > 2.7):\n                letters.push('B');\n\
    \                break;\n            case (grade > 2.3):\n                letters.push('B-');\n\
    \                break;\n            case (grade > 2.0):\n                letters.push('C+');\n\
    \                break;\n            case (grade > 1.7):\n                letters.push('C');\n\
    \                break;\n            case (grade > 1.3):\n                letters.push('C-');\n\
    \                break;\n            case (grade > 1.0):\n                letters.push('D+');\n\
    \                break;\n            case (grade > 0.7):\n                letters.push('D');\n\
    \                break;\n            case (grade > 0.0):\n                letters.push('D-');\n\
    \                break;\n            case (grade == 0.0):\n                letters.push('E');\n\
    \                break;\n        }\n    });\n    return letters;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'A+', 'B', 'C-',\
    \ 'C', 'A-' ]\n    at test (/tmp/tmppg124wr6.js:76:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppg124wr6.js:84:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let result = [];\n\
    \    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n\
    \            result.push('A+');\n        }\n        else if(grades[i] > 3.7){\n\
    \            result.push('A');\n        }\n        else if(grades[i] > 3.3){\n\
    \            result.push('A-');\n        }\n        else if(grades[i] > 3.0){\n\
    \            result.push('B+');\n        }\n        else if(grades[i] > 2.7){\n\
    \            result.push('B');\n        }\n        else if(grades[i] > 2.3){\n\
    \            result.push('B-');\n        }\n        else if(grades[i] > 2.0){\n\
    \            result.push('C+');\n        }\n        else if(grades[i] > 1.7){\n\
    \            result.push('C');\n        }\n        else if(grades[i] > 1.3){\n\
    \            result.push('C-');\n        }\n        else if(grades[i] > 1.0){\n\
    \            result.push('D+');\n        }\n        else if(grades[i] > 0.7){\n\
    \            result.push('D');\n        }\n        else if(grades[i] > 0.0){\n\
    \            result.push('D-');\n        }\n        else{\n            result.push('E');\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n\tlet grades_obj = {\n\
    \t\t'4.0': 'A+',\n\t\t'3.7': 'A',\n\t\t'3.3': 'A-',\n\t\t'3.0': 'B+',\n\t\t'2.7':\
    \ 'B',\n\t\t'2.3': 'B-',\n\t\t'2.0': 'C+',\n\t\t'1.7': 'C',\n\t\t'1.3': 'C-',\n\
    \t\t'1.0': 'D+',\n\t\t'0.7': 'D',\n\t\t'0.0': 'D-',\n\t\t'0.0': 'E'\n\t}\n\tlet\
    \ solution = [];\n\tfor(let i=0; i<grades.length; i++){\n\t\tlet current_grade\
    \ = String(grades[i]);\n\t\tif(current_grade.includes('.')){\n\t\t\tif(current_grade[2]\
    \ === '7'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2)\
    \ + '7';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2)\
    \ + '3';\n\t\t\t\t}\n\t\t\t} else if(current_grade[2] === '3'){\n\t\t\t\tif(current_grade[3]\
    \ > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '3';\n\t\t\t\t\
    } else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '0';\n\t\t\t\t\
    }\n\t\t\t} else if(current_grade[2] === '0'){\n\t\t\t\tif(current_grade[3] > '4'){\n\
    \t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '0';\n\t\t\t\t} else {\n\t\
    \t\t\t\tcurrent_grade = current_grade.slice(0,2) + '7';\n\t\t\t\t}\n\t\t\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjbaycu1v.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    const letter_grade\
    \ = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n     \
    \   \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n\
    \        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\"\
    : 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    }\n    let result = []\n\
    \    grades.forEach(grade => {\n        for(key in letter_grade){\n          \
    \  if(grade >= letter_grade[key]){\n                result.push(key)\n       \
    \         break\n            }\n        }\n    })\n    return result\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpvuzm5stl.js:55:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvuzm5stl.js:63:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n\tvar grades_letter =\
    \ [];\n\tvar grades_letter_format = function(grade){\n\t\tif(grade >= 4.0){\n\t\
    \t\treturn \"A+\";\n\t\t}\n\t\telse if(grade >= 3.7){\n\t\t\treturn \"A\";\n\t\
    \t}\n\t\telse if(grade >= 3.3){\n\t\t\treturn \"A-\";\n\t\t}\n\t\telse if(grade\
    \ >= 3.0){\n\t\t\treturn \"B+\";\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\treturn\
    \ \"B\";\n\t\t}\n\t\telse if(grade >= 2.3){\n\t\t\treturn \"B-\";\n\t\t}\n\t\t\
    else if(grade >= 2.0){\n\t\t\treturn \"C+\";\n\t\t}\n\t\telse if(grade >= 1.7){\n\
    \t\t\treturn \"C\";\n\t\t}\n\t\telse if(grade >= 1.3){\n\t\t\treturn \"C-\";\n\
    \t\t}\n\t\telse if(grade >= 1.0){\n\t\t\treturn \"D+\";\n\t\t}\n\t\telse if(grade\
    \ >= 0.7){\n\t\t\treturn \"D\";\n\t\t}\n\t\telse if(grade >= 0.0){\n\t\t\treturn\
    \ \"D-\";\n\t\t}\n\t\telse if(grade >= -1.0){\n\t\t\treturn \"E\";\n\t\t}\n\t\t\
    else{\n\t\t\treturn \"error\";\n\t\t}\n\t}\n\tgrades.forEach(function(grade){\n\
    \t\tgrades_letter.push(grades_letter_format(grade));\n\t});\n\treturn grades_letter;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpgg1fi0ml.js:79:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgg1fi0ml.js:87:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n  var result = [];\n \
    \ for(i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      result.push('A+');\n\
    \    }\n    else if(grades[i] >= 3.7){\n      result.push('A');\n    }\n    else\
    \ if(grades[i] >= 3.3){\n      result.push('A-');\n    }\n    else if(grades[i]\
    \ >= 3.0){\n      result.push('B+');\n    }\n    else if(grades[i] >= 2.7){\n\
    \      result.push('B');\n    }\n    else if(grades[i] >= 2.3){\n      result.push('B-');\n\
    \    }\n    else if(grades[i] >= 2.0){\n      result.push('C+');\n    }\n    else\
    \ if(grades[i] >= 1.7){\n      result.push('C');\n    }\n    else if(grades[i]\
    \ >= 1.3){\n      result.push('C-');\n    }\n    else if(grades[i] >= 1.0){\n\
    \      result.push('D+');\n    }\n    else if(grades[i] >= 0.7){\n      result.push('D');\n\
    \    }\n    else if(grades[i] >= 0.0){\n      result.push('D-');\n    }\n    else\
    \ if(grades[i] < 0.0){\n      result.push('E');\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpnc2jd97w.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnc2jd97w.js:81:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n  return grades.map(grade\
    \ => {\n    if (grade >= 4.0) return 'A+';\n    if (grade >= 3.7) return 'A';\n\
    \    if (grade >= 3.3) return 'A-';\n    if (grade >= 3.0) return 'B+';\n    if\
    \ (grade >= 2.7) return 'B';\n    if (grade >= 2.3) return 'B-';\n    if (grade\
    \ >= 2.0) return 'C+';\n    if (grade >= 1.7) return 'C';\n    if (grade >= 1.3)\
    \ return 'C-';\n    if (grade >= 1.0) return 'D+';\n    if (grade >= 0.7) return\
    \ 'D';\n    if (grade >= 0.0) return 'D-';\n    return 'E';\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmp9b24y_y4.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9b24y_y4.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    return grades.map(grade\
    \ => {\n        if (grade > 4.0) return 'Invalid';\n        if (grade > 3.7) return\
    \ 'A+';\n        if (grade > 3.3) return 'A';\n        if (grade > 3.0) return\
    \ 'A-';\n        if (grade > 2.7) return 'B+';\n        if (grade > 2.3) return\
    \ 'B';\n        if (grade > 2.0) return 'B-';\n        if (grade > 1.7) return\
    \ 'C+';\n        if (grade > 1.3) return 'C';\n        if (grade > 1.0) return\
    \ 'C-';\n        if (grade > 0.7) return 'D+';\n        if (grade > 0.0) return\
    \ 'D';\n        if (grade > -1.0) return 'D-';\n        return 'E';\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpsto4wr6d.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsto4wr6d.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n  var grades = grades.map(function(val){\n\
    \    if(val < 0.7)\n      return \"E\";\n    else if(val < 1.0)\n      return\
    \ \"D-\";\n    else if(val < 1.3)\n      return \"D\";\n    else if(val < 1.7)\n\
    \      return \"D+\";\n    else if(val < 2.0)\n      return \"C-\";\n    else\
    \ if(val < 2.3)\n      return \"C\";\n    else if(val < 2.7)\n      return \"\
    C+\";\n    else if(val < 3.0)\n      return \"B-\";\n    else if(val < 3.3)\n\
    \      return \"B\";\n    else if(val < 3.7)\n      return \"B+\";\n    else if(val\
    \ < 4.0)\n      return \"A-\";\n    else\n      return \"A+\";\n  });\n  return\
    \ grades;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B', 'C-', 'C', 'B+' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmphxbavky4.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmphxbavky4.js:64:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B', 'C-', 'C', 'B+' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you a list of GPAs for some students and you have to write \n// a function\
    \ that can output a list of letter grades using the following table:\n// GPA \
    \      |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nfunction numerical_letter_grade(grades){\n    let result = [];\n\
    \    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n\
    \            result.push('A+');\n        }else if(grades[i] >= 3.7){\n       \
    \     result.push('A');\n        }else if(grades[i] >= 3.3){\n            result.push('A-');\n\
    \        }else if(grades[i] >= 3.0){\n            result.push('B+');\n       \
    \ }else if(grades[i] >= 2.7){\n            result.push('B');\n        }else if(grades[i]\
    \ >= 2.3){\n            result.push('B-');\n        }else if(grades[i] >= 2.0){\n\
    \            result.push('C+');\n        }else if(grades[i] >= 1.7){\n       \
    \     result.push('C');\n        }else if(grades[i] >= 1.3){\n            result.push('C-');\n\
    \        }else if(grades[i] >= 1.0){\n            result.push('D+');\n       \
    \ }else if(grades[i] >= 0.7){\n            result.push('D');\n        }else if(grades[i]\
    \ >= 0.0){\n            result.push('D-');\n        }else{\n            result.push('E');\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmp0zfd6z_i.js:60:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0zfd6z_i.js:68:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
