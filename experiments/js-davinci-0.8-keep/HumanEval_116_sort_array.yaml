name: HumanEval_116_sort_array
language: js
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0,\
  \ 1, 2, 3, 4]\nfunction sort_array(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
  \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1,\
  \ 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["  //binary_arr holds binary array, binary_sort_arr holds sorted binary\
    \ array\n  //decimal_arr holds the decimal values in sorted binary order\n  var\
    \ binary_arr = [], binary_sort_arr = [], decimal_arr = [], sorted_arr = [];\n\
    \  //go through every element in array\n  for(var i = 0; i < arr.length; i++){\n\
    \    //convert the number to binary and store into binary_arr\n    binary_arr.push(arr[i].toString(2));\n\
    \    //check for one's count in binary_arr[i] and push the count into binary_sort_arr\n\
    \    binary_sort_arr.push(binary_arr[i].match(/1/g).length);\n  }\n  //sort the\
    \ binary_sort_arr\n  binary_sort_arr.sort(function(a, b){return a - b});\n  //fill\
    \ decimal_arr with the sorted binary numbers\n  for(var i = 0; i < binary_sort_arr.length;\
    \ i++){\n    for(var j = 0; j < binary_arr.length; j++){\n      if(binary_sort_arr[i]\
    \ == binary_arr[j].match(/1/g).length && !decimal_arr.includes(binary_arr[j])){\n\
    \        decimal_arr.push(binary_arr[j]);\n      }\n    }\n  }\n  //convert the\
    \ binary to decimal and store into sorted_arr\n  for(var i = 0; i < decimal_arr.length;\
    \ i++){\n    sorted_arr.push(parseInt(decimal_arr[i], 2));\n  }\n  return sorted_arr;\n\
    }\nsort_array([1, 2, 3, 4, 5]);\nsort_array([1, 0, 2, 3, 4]);\nsort_array([-2,\
    \ -3, -4, -5, -6]);\nsort_array([1, 5, 2, 3, 4]);", "  let answer = [];\n  let\
    \ ones = [];\n  let zeros = [];\n  let len = arr.length;\n  for(let i = 0; i <\
    \ len; i++){\n    if(arr[i] <= 0){\n      zeros.push(arr[i]);\n    }else{\n  \
    \    ones.push(arr[i]);\n    }\n  }\n  //sorting the ones array\n  let onesLen\
    \ = ones.length;\n  for(let i = 0; i < onesLen; i++){\n    let item = ones[i];\n\
    \    let bin = item.toString(2);\n    let oneCnt = bin.split('').reduce((a, b)\
    \ => +a + +b);\n    ones[i] = {'bin': bin, 'num': item, 'oneCnt': oneCnt};\n \
    \ }\n  ones.sort((a, b) => {\n    if(a.oneCnt === b.oneCnt){\n      return a.num\
    \ - b.num;\n    }else{\n      return a.oneCnt - b.oneCnt;\n    }\n  });\n  let\
    \ len2 = ones.length;\n  for(let i = 0; i < len2; i++){\n    answer.push(ones[i].num);\n\
    \  }\n  answer = answer.concat(zeros);\n  return answer;\n}\n", "    let numOfOne\
    \ = []\n    let num = []\n    for(let i = 0; i < arr.length; i++){\n        let\
    \ binary = arr[i].toString(2)\n        let count = 0\n        for(let j = 0; j\
    \ < binary.length; j++){\n            if(binary[j] === '1'){\n               \
    \ count++\n            }\n        }\n        numOfOne.push(count)\n        num.push(arr[i])\n\
    \    }\n    for(let i = 0; i < numOfOne.length; i++){\n        for(let j = i +\
    \ 1; j < numOfOne.length; j++){\n            if(numOfOne[i] > numOfOne[j]){\n\
    \                let temp = numOfOne[i]\n                numOfOne[i] = numOfOne[j]\n\
    \                numOfOne[j] = temp\n                let tempNum = num[i]\n  \
    \              num[i] = num[j]\n                num[j] = tempNum\n           \
    \ }\n        }\n    }\n    return num\n}", "  return arr.sort(function(a, b){\n\
    \      var binA = (a >>> 0).toString(2);\n      var binB = (b >>> 0).toString(2);\n\
    \      var numOfOnesA = binA.match(/1/g) || [];\n      var numOfOnesB = binB.match(/1/g)\
    \ || [];\n      if(numOfOnesA.length < numOfOnesB.length){\n        return -1;\n\
    \      }else if(numOfOnesA.length > numOfOnesB.length){\n        return 1;\n \
    \     }else{\n        return a - b;\n      }\n  });\n}\n", "  let binarr = arr.map(x\
    \ => x.toString(2));\n  console.log(binarr);\n  let countarr = [];\n  for (let\
    \ i = 0; i < binarr.length; i++) {\n    countarr.push(binarr[i].split('').filter(x\
    \ => x === '1').length);\n  }\n  let newarr = [];\n  let count = 0;\n  while (count\
    \ < arr.length) {\n    let temp = [];\n    let tempcount = countarr[count];\n\
    \    let j = count;\n    while (j < arr.length) {\n      if (countarr[j] === tempcount)\
    \ {\n        temp.push(arr[j]);\n        countarr[j] = -1;\n      }\n      j++;\n\
    \    }\n    count += temp.length;\n    temp.sort((a, b) => a - b);\n    newarr\
    \ = newarr.concat(temp);\n  }\n  return newarr;\n}\n", "  return arr.sort(function(a,\
    \ b){\n    if (numberOfOnes(a) < numberOfOnes(b)){\n      return -1;\n    } else\
    \ if (numberOfOnes(a) > numberOfOnes(b)){\n      return 1;\n    } else {\n   \
    \   return a - b;\n    }\n  });\n}\n", "  let binArr = arr.map(num => [num, num.toString(2)]);\n\
    \  let onesArr = binArr.map(num => num[1].split(\"\").filter(el => el === \"1\"\
    ).length);\n  let sortedOnesArr = onesArr.slice().sort((a, b) => a - b);\n  let\
    \ onesIndex = [];\n  for (let i = 0; i < sortedOnesArr.length; i++) {\n    onesIndex.push(onesArr.indexOf(sortedOnesArr[i]));\n\
    \  }\n  let sortedArr = [];\n  for (let i = 0; i < onesIndex.length; i++) {\n\
    \    sortedArr.push(binArr[onesIndex[i]][0]);\n  }\n  return sortedArr;\n}", " \
    \   var maxOnes = 0;\n    var minOnes = 0;\n    var temp = [];\n    var tempArr\
    \ = [];\n    var tempObj = {};\n    var count;\n    var maxInt;\n    var newArr\
    \ = [];\n    var result = [];\n    if(arr.length > 1){\n        maxInt = Math.max.apply(null,\
    \ arr);\n        count = (maxInt >>> 0).toString(2).split('').length;\n      \
    \  for(var i = 0; i < arr.length; i++){\n            temp = (arr[i] >>> 0).toString(2).split('');\n\
    \            while(temp.length < count){\n                temp.unshift('0');\n\
    \            }\n            tempObj = {};\n            tempObj.num = arr[i];\n\
    \            tempObj.ones = temp.join('').split('1').length - 1;\n           \
    \ if(tempObj.ones > maxOnes){\n                maxOnes = tempObj.ones;\n     \
    \       }\n            if(tempObj.ones < minOnes){\n                minOnes =\
    \ tempObj.ones;\n            }\n            tempArr.push(tempObj);\n        }\n\
    \        for(var j = minOnes; j <= maxOnes; j++){\n            tempArr.forEach(function(item){\n\
    \                if(item.ones === j){\n                    newArr.push(item.num);\n\
    \                }\n            });\n        }\n        result = newArr;\n   \
    \ } else {\n        result = arr;\n    }\n    return result;\n}", "  let number\
    \ = arr.map(num => {\n    return [num, num.toString(2).split('').reduce((acc,\
    \ val) => {\n      return val === '1' ? acc + 1 : acc\n    }, 0)]\n  }).sort((a,\
    \ b) => {\n    if (a[1] === b[1]) {\n      return a[0] - b[0]\n    } else {\n\
    \      return a[1] - b[1]\n    }\n  })\n  return number.map(num => num[0])\n}\n",
  "  return arr.sort(function(a, b){\n    if(getOnes(a) === getOnes(b)) {\n      return\
    \ a - b;\n    }\n    return getOnes(a) - getOnes(b);\n  });\n}\n", "    let map\
    \ = {};\n    arr.forEach(v => {\n        let t = 0;\n        v.toString(2).split('').forEach(c\
    \ => {\n            if (c === '1') t++;\n        });\n        if (!map[t]) map[t]\
    \ = [];\n        map[t].push(v);\n    });\n    let keys = Object.keys(map);\n\
    \    return keys.sort((a, b) => a - b).reduce((a, b) => a.concat(map[b].sort((x,\
    \ y) => x - y)), []);\n}\n", "    //storing number of 1s in binary representation\
    \ of each number in array\n    var onesArray = [];\n    //storing the decimal\
    \ values\n    var decArray = [];\n    //storing the values in right order\n  \
    \  var result = [];\n    //storing the binary representation of each number\n\
    \    var binary = [];\n    //storing the binary representation of each number\n\
    \    var binRep = [];\n    //storing the unique value for the numbers\n    var\
    \ unique = [];\n    //storing the number of time each number occurs in the array\n\
    \    var occurrences = [];\n    //storing the index from which each number occurs\
    \ in the array\n    var index = [];\n    for(var i = 0; i < arr.length; i++){\n\
    \        //storing the binary representation of each number\n        binary.push(arr[i].toString(2));\n\
    \        //finding the number of 1s in the binary representation of each number\n\
    \        onesArray.push(binary[i].replace(/0/g, '').length);\n        //storing\
    \ the decimal value\n        decArray.push(arr[i]);\n    }\n    //Finding the\
    \ unique values\n    for(var j = 0; j < arr.length; j++){\n        if(unique.indexOf(onesArray[j])\
    \ === -1){\n            unique.push(onesArray[j]);\n        }\n    }\n    //sorting\
    \ the unique values\n    unique.sort();\n    //finding the number of time each\
    \ number occurs in the array\n    for(var k = 0; k < unique.length; k++){\n  \
    \      occurrences.push(onesArray.filter(function(elem){\n            return elem\
    \ === unique[k];\n        }).length);\n    }\n    //finding the index from which\
    \ each number occurs in the array\n    for(var l = 0; l < unique.length; l++){\n\
    \        for(var m = 0; m < arr.length; m++){\n            if(onesArray[m] ===\
    \ unique[l]){\n                index.push(m);\n                break;\n      \
    \      }\n        }\n    }\n    //sorting the numbers according to the given conditions\n\
    \    for(var n = 0; n < occurrences.length; n++){\n       ", "    //code here\n\
    \    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length;\
    \ j++){\n            if(getOneCount(arr[i]) > getOneCount(arr[j])){\n        \
    \        var temp = arr[i];\n                arr[i] = arr[j];\n              \
    \  arr[j] = temp;\n            }\n            else if(getOneCount(arr[i]) == getOneCount(arr[j])){\n\
    \                if(arr[i] > arr[j]){\n                    var temp = arr[i];\n\
    \                    arr[i] = arr[j];\n                    arr[j] = temp;\n  \
    \              }\n            }\n        }\n    }\n    return arr;\n}", "    var\
    \ sorted_array = arr.sort(function(a, b){\n        if (countOnes(a) === countOnes(b))\
    \ {\n            return a - b;\n        }\n        return countOnes(a) - countOnes(b);\n\
    \    });\n    return sorted_array;\n}\n", "    // sort array to descending order\
    \ first.\n    arr.sort(function(a, b){\n        return b - a;\n    });\n    //\
    \ create a new array to store the index value of arr(binary arr)\n    var binaryArray\
    \ = [];\n    // create a new array to store values of arr\n    var valueArray\
    \ = [];\n    // convert each element of arr to binary and store into binaryArray\n\
    \    for(var i = 0; i < arr.length; i++){\n        binaryArray.push(arr[i].toString(2));\n\
    \    }\n    //push values of arr into valueArray\n    for(var i = 0; i < arr.length;\
    \ i++){\n        valueArray.push(arr[i]);\n    }\n    // use bubble sort to sort\
    \ binaryArray in ascending order\n    for(var i = 0; i < binaryArray.length; i++){\n\
    \        for(var j = 0; j < binaryArray.length; j++){\n            if(binaryArray[j].match(/1/g).length\
    \ > binaryArray[j+1].match(/1/g).length){\n                var tmp = binaryArray[j];\n\
    \                binaryArray[j] = binaryArray[j+1];\n                binaryArray[j+1]\
    \ = tmp;\n                var tmp = valueArray[j];\n                valueArray[j]\
    \ = valueArray[j+1];\n                valueArray[j+1] = tmp;\n            }else\
    \ if(binaryArray[j].match(/1/g).length === binaryArray[j+1].match(/1/g).length){\n\
    \                if(valueArray[j] > valueArray[j+1]){\n                    var\
    \ tmp = binaryArray[j];\n                    binaryArray[j] = binaryArray[j+1];\n\
    \                    binaryArray[j+1] = tmp;\n                    var tmp = valueArray[j];\n\
    \                    valueArray[j] = valueArray[j+1];\n                    valueArray[j+1]\
    \ = tmp;\n                }\n            }\n        }\n    }\n    return valueArray;\n\
    }", "  var tempArr = [];\n  var finalArr = [];\n  arr.forEach(function(num){\n\
    \    var bin = parseInt(num).toString(2);\n    var onesCount = bin.split(1).length\
    \ - 1;\n    tempArr.push([num, onesCount]);\n  });\n  tempArr.sort(function(a,\
    \ b){\n    if(a[1] === b[1]){\n      return a[0] - b[0];\n    }\n    return a[1]\
    \ - b[1];\n  });\n  tempArr.forEach(function(el){\n    finalArr.push(el[0]);\n\
    \  });\n  return finalArr;\n}", "  return arr.sort(function(a, b){\n    if (a.toString(2).match(/1/g)\
    \ === null && b.toString(2).match(/1/g) === null){\n      return a - b;\n    }\
    \ else if (a.toString(2).match(/1/g) === null){\n      return -1;\n    } else\
    \ if (b.toString(2).match(/1/g) === null){\n      return 1;\n    } else if (a.toString(2).match(/1/g).length\
    \ === b.toString(2).match(/1/g).length){\n      return a - b;\n    } else {\n\
    \      return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;\n\
    \    }\n  });\n}\n", "    return arr.sort((a, b) => {\n        let aOne = countOne(a);\n\
    \        let bOne = countOne(b);\n        if (aOne !== bOne) {\n            return\
    \ aOne - bOne;\n        } else {\n            return a - b;\n        }\n    });\n\
    }\n", "  let sorted = [...arr].sort((a, b) => a - b);\n  let arr2 = [...arr].sort((a,\
    \ b) => (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g)\
    \ || []).length);\n  return arr2.map(i => sorted.includes(i) ? i : i);\n}\n",
  "    var newArr = arr.map(function(val) {\n        return {\n            val: val,\n\
    \            binary: val.toString(2).split('').filter(function(digit) {\n    \
    \            return digit === '1';\n            }).length\n        };\n    });\n\
    \    return newArr.sort(function(a, b) {\n        if (a.binary === b.binary) {\n\
    \            return a.val - b.val;\n        }\n        return a.binary - b.binary;\n\
    \    }).map(function(val) {\n        return val.val;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
