name: HumanEval_125_split_words
language: js
prompt: "//Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n// should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"\
  Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\"\
  ) \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nfunction split_words(txt){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
  world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
  ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
  \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"\
  !\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
  aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
  \"),0);\n}\n\ntest();"
completions: ["    if(txt.match(/\\s/g)){\n        return txt.split(\" \");\n    }else\
    \ if(txt.match(/\\,/g)){\n        return txt.split(\",\");\n    }else{\n     \
    \   let count = 0;\n        for(let i = 1; i < txt.length; i+=2){\n          \
    \  if(txt[i] == txt[i].toLowerCase()){\n                count++;\n           \
    \ }\n        }\n        return count;\n    }\n}\n", "    var res = [];\n    var\
    \ txta = txt.split(\" \");\n    var txtb = txt.split(\",\");\n    if(txta.length\
    \ == 1){\n        if(txtb.length == 1){\n            return Math.floor(txt.length/2);\n\
    \        }\n        return txtb;\n    }\n    return txta;\n}", "    if(txt.indexOf(\"\
    \ \") !== -1){\n        return txt.split(\" \");\n    }\n    if(txt.indexOf(\"\
    ,\") !== -1){\n        return txt.split(\",\");\n    }\n    return txt.split(\"\
    \").filter(x => \"abcdefghijklmnopqrstuvwxyz\".indexOf(x) % 2 == 1).length;\n\
    }\n", "    if (/\\s/.test(txt)) {\n        let res = txt.split(\" \");\n     \
    \   return res;\n    } else if (/\\,/.test(txt)) {\n        let res = txt.split(\"\
    ,\");\n        return res;\n    } else {\n        let count = 0;\n        let\
    \ arr = [...txt];\n        for (let i = 0; i < arr.length; i++) {\n          \
    \  if (arr[i].charCodeAt(0) % 2 !== 0) {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\n", "    if(txt.includes(' ')){\n\
    \        return txt.split(' ');\n    }else if(txt.includes(',')){\n        return\
    \ txt.split(',');\n    }else{\n        let new_txt = txt.toLowerCase();\n    \
    \    let char_count = 0;\n        for(let i = 0; i < new_txt.length; i++){\n \
    \           if(i % 2 !== 0){\n                char_count++;\n            }\n \
    \       }\n        return char_count;\n    }\n}\n", "    let result = [];\n  \
    \  if (txt.includes(' ')){\n        result = txt.split(' ');\n    }\n    else\
    \ if (txt.includes(',')){\n        result = txt.split(',');\n    }\n    else {\n\
    \        let count = 0;\n        for (let index in txt){\n            if (txt[index].toLowerCase().charCodeAt(0)\
    \ % 2 == 1){\n                count++;\n            }\n        }\n        result\
    \ = count;\n    }\n    return result;\n}\n", "    let words = txt.split(',');\n\
    \    if(words.length == 1){\n        let letterCount = 0;\n        let index =\
    \ 0;\n        while(index < txt.length){\n            if(txt.charCodeAt(index)\
    \ - 97 % 2 == 1){\n                letterCount++;\n            }\n           \
    \ index++;\n        }\n        return letterCount;\n    }else{\n        return\
    \ words;\n    }\n}\n", "    return txt.includes(\" \") ? txt.split(\" \") : txt.includes(\"\
    ,\") ? txt.split(\",\") : txt.match(/[a-z]/g).filter((v,i) => i % 2 !== 0).length\n\
    }\n", "    let f = txt.split(\" \");\n    let l = txt.split(\",\");\n    if(txt.indexOf(\"\
    \ \") > -1) {\n        return f;\n    } else if(txt.indexOf(\",\") > -1) {\n \
    \       return l;\n    } else {\n        let x = 0;\n        for(let i = 0; i\
    \ < txt.length; i++) {\n            if(i % 2 != 0) {\n                x++;\n \
    \           }\n        }\n        return x;\n    }\n}\n", "    let temp = [];\n\
    \    if(txt.indexOf(' ') > -1){\n        temp = txt.split(' ');\n    }\n    else\
    \ if(txt.indexOf(',') > -1){\n        temp = txt.split(',');\n    }\n    else{\n\
    \        let sum = 0;\n        for(let i = 0; i < txt.length; i++){\n        \
    \    if(i % 2 == 1){\n                sum += txt.charCodeAt(i) - 97;\n       \
    \     }\n        }\n        temp.push(sum);\n    }\n    return temp;\n}", "  \
    \  const obj = {\n        arr: txt.split(''),\n        alphabeth: \"abcdefghijklmnopqrstuvwxyz\"\
    .split(''),\n        res: []\n    }\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    if(txt.includes(\",\")){\n        return txt.split(\"\
    ,\");\n    }\n    for(let i = 0; i < obj.arr.length; i++){\n        let char =\
    \ obj.arr[i];\n        if(obj.alphabeth.indexOf(char) % 2 !== 0){\n          \
    \  obj.res.push(char);\n        }\n    }\n    return obj.res.length;\n}", "  \
    \  if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }else if(txt.includes(\"\
    ,\")){\n        return txt.split(\",\");\n    }else {\n        var count = 0;\n\
    \        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 !== 0){\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}", "   let words = /[a-z]+/gi.exec(txt);\n   console.log(words);\n\
    \   if(words === null){\n       let letters = [];\n       for(let i = 0; i < txt.length;\
    \ i++){\n           let num = txt.charCodeAt(i);\n           if(num >= 97 && num\
    \ <= 122){\n               letters.push(txt[i]);\n           }\n       }\n   \
    \    let total = 0;\n       for(let i = 0; i < letters.length; i++){\n       \
    \    if(letters[i].charCodeAt(0) % 2 != 0){\n               total++;\n       \
    \    }\n       }\n       return total;\n   }\n   let split = txt.split(\" \");\n\
    \   console.log(split);\n   let arr = [];\n   for(let i = 0; i < split.length;\
    \ i++){\n       if(split[i] !== \"\"){\n           arr.push(split[i]);\n     \
    \  }\n   }\n   return arr;\n}", "    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \")\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\")\n    }\n    else {\n        let charCount = 0\n        for\
    \ (let i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 ===\
    \ 1){\n                charCount += 1\n            }\n        }\n        return\
    \ charCount\n    }\n}\n", "    const arr = txt.split(/[\\s,]/);\n    if(arr.length\
    \ === 1){\n        const value = txt.split('').reduce((acc, current, index) =>\
    \ {\n            if(index % 2){\n                acc++;\n            }\n     \
    \       return acc;\n        }, 0);\n        return value;\n    }\n    return\
    \ arr;\n}\n", "    let arr = txt.split(',');\n    if(arr.length == 1){\n     \
    \   arr = txt.split(' ');\n        if(arr.length == 1){\n            let count\
    \ = 0;\n            for(let i = 0; i < txt.length; i++){\n                if(i\
    \ % 2 == 0 && txt[i] == txt[i].toLowerCase()){\n                    count++;\n\
    \                }\n            }\n            return count;\n        }\n    }\n\
    \    return arr;\n}", "    let result = [];\n    if (txt.match(/\\s/)){\n    \
    \    result = txt.split(/\\s/);\n    } else if (txt.match(/,/)){\n        result\
    \ = txt.split(/,/);\n    } else {\n        let counter = 0;\n        for (let\
    \ i = 0; i < txt.length; i++) {\n            if (i % 2 === 0 && txt[i] === txt[i].toLowerCase()){\n\
    \                counter ++;\n            }\n        }\n        result = counter;\n\
    \    }\n    return result;\n}", "    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }else if(txt.includes(',')){\n        return txt.split(',');\n    }else{\n\
    \        let count = 0;\n        let txtArr = txt.split('');\n        for(let\
    \ i = 0; i < txtArr.length; i++){\n            if(i % 2 != 0){\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n}\n", " \
    \   if (txt.includes(' ')) {\n        return txt.split(' ');\n    }\n    else\
    \ if (txt.includes(',')) {\n        return txt.split(',');\n    }\n    else {\n\
    \        return [...txt].filter(x => 'abcdefghijklmnopqrstuvwxyz'.indexOf(x) %\
    \ 2 !== 0).length;\n    }\n}\n", "    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var counter = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                counter++;\n            }\n        }\n        return counter;\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
