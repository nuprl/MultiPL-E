name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    //Write code here\n    var biggestPrime = 0;\n    for(var i = 2;\
    \ i <= n; i++){\n        if(n % i == 0){\n            biggestPrime = i;\n    \
    \        n = n / i;\n            i = 2;\n        }\n    }\n    return biggestPrime;\n\
    }\n\n", "    var current_prime = 2;\n    var max_prime = 1;\n    while(n > 1){\n\
    \        if(n % current_prime == 0){\n            max_prime = current_prime;\n\
    \            n = n / current_prime;\n        }\n        else{\n            current_prime++;\n\
    \        }\n    }\n    return max_prime;\n}\n", "    var factors = [], i;\n  \
    \  for (i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }", "    var factors = [];\n    var largest = 0;\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i === 0){\n            factors.push(i);\n        }\n    }\n \
    \   for (var i = 0; i < factors.length; i++){\n        if (is_prime(factors[i])){\n\
    \            largest = factors[i];\n        }\n    }\n    return largest;\n}\n",
  "    function prime_factors(n){\n        //Return a list of the prime factors of\
    \ n\n        //>>>prime_factors(2048)\n        //[2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2]\n        let factor = 2;\n        let result = [];\n     \
    \   while (n > 1){\n            while (n % factor === 0){\n                result.push(factor);\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return result;\n    }\n    //Return the largest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n\
    \    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    const factors\
    \ = prime_factors(n);\n    const largest_factor = factors[factors.length - 1];\n\
    \    return largest_factor;\n}\n", "    //YOUR CODE HERE\n    let lpf=1;\n   \
    \ for(let i=2;i<n;i++){\n        if(n%i===0){\n            lpf=i;\n          \
    \  n=n/i;\n            i=1;\n        }\n    }\n    return lpf;\n}\n", "\t// Fill\
    \ in the code here to satisfy the doctests\n\t// Hint: remember the tip above!\n\
    \tvar cur = n;\n\tvar prime = find_next_prime(1);\n\tvar ans = 0;\n\twhile(cur\
    \ > 1){\n\t\tif(cur % prime == 0){\n\t\t\tcur = cur / prime;\n\t\t\tans = prime;\n\
    \t\t}\n\t\telse{\n\t\t\tprime = find_next_prime(prime);\n\t\t}\n\t}\n\treturn\
    \ ans;\n}\n", "    //Initialize a prime number generator\n    var primes = prime_generator();\n\
    \    //Iterate over the prime numbers\n    for(let p of primes){\n        //When\
    \ a prime p divides n, divide n by p\n        while(n % p == 0){\n           \
    \ n /= p;\n        }\n        //When n is no longer divisible by p, we are done.\n\
    \        if(n == 1){\n            return p;\n        }\n    }\n}\n", "    var\
    \ max = 0;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n       \
    \     if(is_prime(i)){\n                max = i;\n            }\n        }\n \
    \   }\n    return max;\n}\n", "  var prime_factors = [];\n  var factor = 2;\n\
    \  while (n > 1){\n    if (n % factor === 0){\n      prime_factors.push(factor);\n\
    \      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return Math.max.apply(null,\
    \ prime_factors);\n}\n", "    var p = 2;\n    while (p <= n){\n        if (n %\
    \ p === 0){\n            n = n / p;\n        } else {\n            p = p + 1;\n\
    \        }\n    }\n    return p;\n}\n", "\tfor(var i = Math.ceil(Math.sqrt(n));\
    \ i > 1; i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t\
    }\n}\n", "  if (is_prime(n)){return n;}\n  for (let i = Math.ceil(Math.sqrt(n));\
    \ i >= 2; i--){\n    if (n % i === 0 && is_prime(i)){\n      return i;\n    }\n\
    \  }\n}\n", "    var i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return i;\n}\n", "    var i = 2;\n    while (i < n){\n        if (n % i ==\
    \ 0){\n            n = n / i;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    return n;\n}", "\n}\n", "  var largest = 0;\n  //We'll use this\
    \ to keep track of whether n has already been divided.\n  var divided = false;\n\
    \  //Starting at 2 and stopping when n is 1.\n  for(var i = 2; n != 1; i++){\n\
    \    //Trying to divide n by i.\n    if(n % i == 0){\n      //If that works, we've\
    \ found a prime factor.\n      divided = true;\n      //It's the largest so far.\n\
    \      largest = i;\n      //We want to keep dividing out the prime factor.\n\
    \      //But not keep trying to divide by the same factor.\n      while(n % i\
    \ == 0){\n        n = n / i;\n      }\n    }\n  }\n  //If we've already divided\
    \ n, then it's larger than 1,\n  //and we can return the largest prime factor.\n\
    \  if(divided){\n    return largest;\n  }\n  //Otherwise, n is a prime, so it's\
    \ its own largest prime factor.\n  else{\n    return n;\n  }\n}\n", "    //get\
    \ all prime factors of n\n    let primeFactors = get_prime_factors(n);\n    //return\
    \ the largest one\n    return Math.max(...primeFactors);\n}\n", "  let factors\
    \ = get_factors(n);\n  factors.reverse();\n  console.log(factors);\n  let isPrime\
    \ = function(num){\n    if(num === 2){\n      return true;\n    }\n    let factors\
    \ = get_factors(num);\n    return factors.length === 2 ? true : false;\n  }\n\
    \  for(let i = 0; i < factors.length; i++){\n    if(isPrime(factors[i])){\n  \
    \    return factors[i];\n    }\n  }\n}\n", "    var prime = 2;\n    var max =\
    \ 1;\n    while(n > 1){\n        if(n % prime == 0){\n            max = prime;\n\
    \            n = n / prime;\n        }\n        else{\n            prime = prime\
    \ + 1;\n        }\n    }\n    return max;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
