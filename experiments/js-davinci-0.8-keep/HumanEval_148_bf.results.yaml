name: HumanEval_148_bf
language: js
results:
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    let planets = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let first = 0;\n   \
    \ let second = 0;\n    let ordered = [];\n    let res = [];\n    for(let i = 0;\
    \ i < planets.length; i++){\n        if(planets[i] === planet1){\n           \
    \ first = i;\n        }\n        if(planets[i] === planet2){\n            second\
    \ = i;\n        }\n    }\n    if(second < first){\n        let temp = first;\n\
    \        first = second;\n        second = temp;\n    }\n    for(let i = first\
    \ + 1; i < second; i++){\n        ordered.push(planets[i]);\n    }\n    if(first\
    \ === 0 && second === 0){\n        return res;\n    }\n    return ordered;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Venus', 'Earth', 'Mars' ]\n\nshould equal\n\
    \n[]\n    at test (/tmp/tmpcr1icm2a.js:52:10)\n    at Object.<anonymous> (/tmp/tmpcr1icm2a.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Venus', 'Earth', 'Mars' ],\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const first = planets.indexOf(planet1);\n\
    \    const second = planets.indexOf(planet2);\n    if (first < 0 || second < 0)\
    \ return [];\n    if (first <= second) {\n        return planets.slice(first +\
    \ 1, second);\n    } else {\n        return planets.slice(second + 1, first);\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"\
    Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"\
    Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    let s =[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    let f = s.indexOf(planet1);\n   \
    \ let l = s.indexOf(planet2);\n    let ans = [];\n    if(f>=0 && l>=0){\n    \
    \    if(f<l){\n            for(let i=f+1;i<l;i++){\n                ans.push(s[i]);\n\
    \            }\n        }\n        else{\n            for(let i=l+1;i<f;i++){\n\
    \                ans.push(s[i]);\n            }\n        }\n    }\n    return\
    \ ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"\
    Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"\
    Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    var planetList = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index = planetList.indexOf(planet1);\n\
    \    var planet2Index = planetList.indexOf(planet2);\n    var planetsBetween =\
    \ [];\n    if(planet1Index === -1 || planet2Index === -1){\n        return planetsBetween;\n\
    \    }\n    if(planet1Index < planet2Index){\n        planetsBetween = planetList.slice(planet1Index\
    \ + 1, planet2Index);\n    } else {\n        planetsBetween = planetList.slice(planet2Index\
    \ + 1, planet1Index);\n    }\n    return planetsBetween;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    var list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = list.indexOf(planet1);\n\
    \    var index2 = list.indexOf(planet2);\n    if (index1 != -1 && index2 != -1)\
    \ {\n        if (index1 < index2) {\n            return list.slice(index1+1, index2);\n\
    \        } else {\n            return list.slice(index2+1, index1);\n        }\n\
    \    } else {\n        return [];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n  let d = {\"Mercury\":1, \"Venus\":2, \"Earth\":3, \"Mars\":4, \"\
    Jupiter\":5, \"Saturn\":6, \"Uranus\":7, \"Neptune\":8};\n  if (d[planet1] ==\
    \ undefined || d[planet2] == undefined) return [];\n  if (d[planet1] > d[planet2])\
    \ {\n    [planet1, planet2] = [planet2, planet1];\n  }\n  return Object.keys(d).filter(function(el){\n\
    \    return d[el] > d[planet1] && d[el] < d[planet2];\n  });\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n  let planetsArray = [\n  \"Mercury\",\n  \"Venus\",\n  \"Earth\"\
    ,\n  \"Mars\",\n  \"Jupiter\",\n  \"Saturn\",\n  \"Uranus\",\n  \"Neptune\"\n\
    \  ];\n  if (planetsArray.indexOf(planet1) === -1 || planetsArray.indexOf(planet2)\
    \ === -1){\n    return [];\n  }\n  if (planetsArray.indexOf(planet1) > planetsArray.indexOf(planet2)){\n\
    \    let b = planetsArray.indexOf(planet1);\n    let a = planetsArray.indexOf(planet2);\n\
    \    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1)\
    \ < planetsArray.indexOf(planet2)){\n    let a = planetsArray.indexOf(planet1);\n\
    \    let b = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1,\
    \ b);\n  }\n  if (planetsArray.indexOf(planet1) === planetsArray.indexOf(planet2)){\n\
    \    return [];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n  let planets = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"\
    Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"\
    Uranus\": 6,\n    \"Neptune\": 7\n  }\n  if (planets[planet1] > planets[planet2]){\n\
    \    let temp = planet1;\n    planet1 = planet2;\n    planet2 = temp;\n  }\n \
    \ let result = [];\n  for (let i = planets[planet1] + 1; i < planets[planet2];\
    \ i++){\n    result.push(Object.keys(planets).find(key => planets[key] === i));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    let orbit = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let res = [];\n    let index1\
    \ = orbit.indexOf(planet1);\n    let index2 = orbit.indexOf(planet2);\n    let\
    \ temp = index1;\n    index1 = Math.min(index1, index2);\n    index2 = Math.max(temp,\
    \ index2);\n    if(index1 > -1 && index2 > -1){\n        for(let i = index1 +\
    \ 1; i < index2; i++){\n            res.push(orbit[i]);\n        }\n    }\n  \
    \  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n\tlet planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tlet result = [];\n\tlet p1\
    \ = planets.indexOf(planet1);\n\tlet p2 = planets.indexOf(planet2);\n\tif(p1 <\
    \ 0 || p2 < 0){\n\t\treturn result;\n\t}\n\tif(p1 > p2){\n\t\tfor(let i = p2 +\
    \ 1; i < p1; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t} else {\n\t\tfor(let\
    \ i = p1 + 1; i < p2; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    let orbits = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = orbits.indexOf(planet1);\n\
    \    let index2 = orbits.indexOf(planet2);\n    let new_array = [];\n    if(index1\
    \ > -1 && index2 > -1){\n        if(index1 < index2){\n            for(let i =\
    \ index1 + 1; i < index2; i++){\n                new_array.push(orbits[i]);\n\
    \            }\n        }\n        else{\n            for(let i = index2 + 1;\
    \ i < index1; i++){\n                new_array.push(orbits[i]);\n            }\n\
    \        }\n    }\n    return new_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n\
    \    var index2 = planets.indexOf(planet2);\n    var array = [];\n    if(index1\
    \ > index2){\n        array = planets.slice(index2, index1 + 1);\n    } else if(index1\
    \ < index2){\n        array = planets.slice(index1, index2 + 1);\n    } else if(index1\
    \ == -1 || index2 == -1){\n        array = [];\n    } else {\n        array =\
    \ [planet1];\n    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpwrr8l5z3.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwrr8l5z3.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n  \n  var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n  var p1 = planets.indexOf(planet1);\n  var\
    \ p2 = planets.indexOf(planet2);\n  if(p1 == -1 || p2 == -1){\n    return [];\n\
    \  }\n  if(p1 > p2){\n    var tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n  }\n  return\
    \ planets.slice(p1+1, p2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    var solarsystem = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    if (!solarsystem.includes(planet1) || !solarsystem.includes(planet2))\
    \ {\n        return [];\n    } else {\n        var planet1index = solarsystem.indexOf(planet1);\n\
    \        var planet2index = solarsystem.indexOf(planet2);\n        var planetinbetween\
    \ = [];\n        if (planet1index < planet2index) {\n            for (var i =\
    \ planet1index; i < planet2index; i++) {\n                planetinbetween.push(solarsystem[i\
    \ + 1]);\n            }\n        } else {\n            for (var i = planet2index;\
    \ i < planet1index; i++) {\n                planetinbetween.push(solarsystem[i\
    \ + 1]);\n            }\n        }\n        return planetinbetween;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Saturn', 'Uranus', 'Neptune' ]\n\nshould\
    \ equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpvybfu3ra.js:39:10)\n \
    \   at Object.<anonymous> (/tmp/tmpvybfu3ra.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Saturn',\
    \ 'Uranus', 'Neptune' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n  const planets = {\n    Mercury: 0,\n    Venus: 1,\n    Earth: 2,\n\
    \    Mars: 3,\n    Jupiter: 4,\n    Saturn: 5,\n    Uranus: 6,\n    Neptune: 7\n\
    \  }\n  if (!planets[planet1] || !planets[planet2]){\n    return [];\n  }\n  const\
    \ i = planets[planet1];\n  const j = planets[planet2];\n  let res = [];\n  if\
    \ (i < j){\n    for (let k = i+1; k < j; k++){\n      for (let p in planets){\n\
    \        if (planets[p] === k){\n          res.push(p);\n        }\n      }\n\
    \    }\n  } else {\n    for (let k = j+1; k < i; k++){\n      for (let p in planets){\n\
    \        if (planets[p] === k){\n          res.push(p);\n        }\n      }\n\
    \    }\n  }\n  return res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Venus' ]\n    at\
    \ test (/tmp/tmpgovglty5.js:57:10)\n    at Object.<anonymous> (/tmp/tmpgovglty5.js:65:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Venus' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    let planet=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    let k=-1;\n    for(let i=0;i<planet.length;i++){\n\
    \        if(planet[i]==planet1){\n            k=i;\n        }\n    }\n    let\
    \ l=-1;\n    for(let i=0;i<planet.length;i++){\n        if(planet[i]==planet2){\n\
    \            l=i;\n        }\n    }\n    let arr=[];\n    if(k>l){\n        let\
    \ temp=k;\n        k=l;\n        l=temp;\n    }\n    if(k==-1||l==-1){\n     \
    \   return arr;\n    }\n    for(let i=k+1;i<l;i++){\n        arr.push(planet[i]);\n\
    \    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let start = planets.indexOf(planet1);\n\
    \  let end = planets.indexOf(planet2);\n  if (start === -1 || end === -1) {\n\
    \    return [];\n  }\n  else if (start > end) {\n    return planets.slice(end\
    \ + 1, start).reverse();\n  }\n  else {\n    return planets.slice(start + 1, end);\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"\
    Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"\
    Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Uranus', 'Saturn', 'Jupiter', 'Mars',\
    \ 'Earth' ]\n\nshould equal\n\n[ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'\
    \ ]\n    at test (/tmp/tmp4euqw2wn.js:36:10)\n    at Object.<anonymous> (/tmp/tmp4euqw2wn.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Uranus', 'Saturn', 'Jupiter', 'Mars',\
    \ 'Earth' ],\n  expected: [ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n\
    \    let planet2Index = planets.indexOf(planet2);\n    let result = [];\n    if(planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if(planet1Index\
    \ < planet2Index) {\n        for(let i = planet1Index + 1; i < planet2Index; i++)\
    \ {\n            result.push(planets[i]);\n        }\n    }\n    else {\n    \
    \    for(let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    const data = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n\
    \        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n      \
    \  \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n   \
    \ if(!data[planet1] || !data[planet2]) return [];\n    let result = [];\n    for(let\
    \ i = Math.min(data[planet1], data[planet2]); i <= Math.max(data[planet1], data[planet2]);\
    \ i++){\n        if(data[planet1] > data[planet2]) result.unshift(Object.keys(data).find(el\
    \ => data[el] === i));\n        else result.push(Object.keys(data).find(el =>\
    \ data[el] === i));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmplqod0hys.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmplqod0hys.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1,\
    \ planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index =\
    \ planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n\
    \    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n   \
    \ }\n    if(planet1Index < planet2Index){\n        return planets.slice(planet1Index\
    \ + 1, planet2Index)\n    }\n    else{\n        return planets.slice(planet2Index\
    \ + 1, planet1Index)\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
