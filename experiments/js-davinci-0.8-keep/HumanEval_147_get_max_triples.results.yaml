name: HumanEval_147_get_max_triples
language: js
results:
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [1];\n\
    \    let result = 0;\n    for(let i = 1; i < n; i++){\n        a.push(a[i-1] +\
    \ i + 1);\n    }\n    // since the array has only unique number, we can use the\
    \ foreach method\n    a.forEach((value, index) => {\n        if(index !== a.length\
    \ - 1){\n            // need to loop through the rest of array\n            for(let\
    \ j = index + 1; j < a.length; j++){\n                // check if the rest of\
    \ the array has the value\n                let k = a.indexOf(3 - value - a[j]);\n\
    \                if(k > j){\n                    result += 1;\n              \
    \  }\n            }\n        }\n    });\n    return result;\n}\nlet result = get_max_triples(4);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmpvr8fq4js.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvr8fq4js.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = []\n\
    \    for(let i = 0; i < n; i++){\n        arr.push(i * i - i + 1)\n    }\n   \
    \ let triple = 0\n    for(let i = 0; i < arr.length; i++){\n        for(let j\
    \ = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length;\
    \ k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n         \
    \           triple++\n                }\n            }\n        }\n    }\n   \
    \ return triple\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n1\n    at test (/tmp/tmp7ta60tq7.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7ta60tq7.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var triples=0;\n\
    \    var arr=[];\n    for(var i=1;i<=n;i++){\n        arr.push(i*i-i+1);\n   \
    \ }\n    console.log(arr);\n    for(var i=0;i<arr.length;i++){\n        for(var\
    \ j=i+1;j<arr.length;j++){\n            for(var k=j+1;k<arr.length;k++){\n   \
    \             if((arr[i]+arr[j]+arr[k])%3==0){\n                    triples++;\n\
    \                }\n            }\n        }\n    }\n    return triples;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: "[ 1, 3, 7, 13, 21 ]\n[ 1, 3, 7, 13, 21, 31 ]\n[\n   1,  3,  7, 13, 21,\n\
    \  31, 43, 57, 73, 91\n]\n[\n     1,    3,    7,   13,   21,   31,   43,   57,\
    \   73,   91,\n   111,  133,  157,  183,  211,  241,  273,  307,  343,  381,\n\
    \   421,  463,  507,  553,  601,  651,  703,  757,  813,  871,\n   931,  993,\
    \ 1057, 1123, 1191, 1261, 1333, 1407, 1483, 1561,\n  1641, 1723, 1807, 1893, 1981,\
    \ 2071, 2163, 2257, 2353, 2451,\n  2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307,\
    \ 3423, 3541,\n  3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831,\n\
    \  4971, 5113, 5257, 5403, 5551, 5701, 5853, 6007, 6163, 6321,\n  6481, 6643,\
    \ 6807, 6973, 7141, 7311, 7483, 7657, 7833, 8011,\n  8191, 8373, 8557, 8743, 8931,\
    \ 9121, 9313, 9507, 9703, 9901\n]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let sum = 0\n\
    \    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n  \
    \          for(let k = j + 1; k < n; k++){\n                let val1 = i * i -\
    \ i + 1\n                let val2 = j * j - j + 1\n                let val3 =\
    \ k * k - k + 1\n                if((val1 + val2 + val3) % 3 === 0){\n       \
    \             sum++\n                }\n            }\n        }\n    }\n    return\
    \ sum\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n1\n    at test (/tmp/tmpb0yrxrtl.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb0yrxrtl.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var a = [];\n\
    \    for(var i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n   \
    \ var count = 0;\n    for(var i = 0; i < a.length; i++){\n        for(var j =\
    \ i + 1; j < a.length; j++){\n            for(var k = j + 1; k < a.length; k++){\n\
    \                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    const array =\
    \ [];\n    for(let i = 1; i<=n; i++){\n        array.push(i*i-i+1);\n    }\n \
    \   let count = 0;\n    for(let i = 0; i<array.length; i++){\n        for(let\
    \ j = i+1; j<array.length; j++){\n            for(let k = j+1; k<array.length;\
    \ k++){\n                if((array[i]+array[j]+array[k])%3 === 0){\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    if(n<3) return\
    \ 0;\n    let count = 0;\n    let arr = [1];\n    for(let i=2; i<=n; i++){\n \
    \       arr.push(i*i-i+1);\n    }\n    for(let i=0; i<arr.length-2; i++){\n  \
    \      for(let j=i+1; j<arr.length-1; j++){\n            for(let k=j+1; k<arr.length;\
    \ k++){\n                if((arr[i]+arr[j]+arr[k])%3==0){\n                  \
    \  count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = [];\n\
    \    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr.push(i * i\
    \ - i + 1);\n    }\n    for(let i = 0; i < arr.length; i++){\n        for(let\
    \ j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length;\
    \ k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = [];\n\
    \    let max = 0;\n    for(let i = 1; i <= n; i++){\n        let num = i * i -\
    \ i + 1;\n        arr.push(num);\n        for(let j = 0; j < arr.length; j++){\n\
    \            for(let k = 0; k < arr.length; k++){\n                if(k > j &&\
    \ j < i && i % 3 === 0){\n                    let sum = arr[j] + arr[k] + arr[i\
    \ - 1];\n                    if(sum % 3 === 0){\n                        max++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n7\n\nshould equal\n\n4\n    at test (/tmp/tmpdjkr2s74.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdjkr2s74.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    // your code\
    \ here\n    var arr = []\n    for(var i = 1; i<=n; i++){\n        arr.push(i*i-i+1)\n\
    \    }\n    var count = 0\n    for(var i = 0; i<arr.length; i++){\n        for(var\
    \ j = i+1; j<arr.length; j++){\n            for(var k = j+1; k<arr.length; k++){\n\
    \                if((arr[i]+arr[j]+arr[k])%3 === 0){\n                    count\
    \ ++\n                }\n            }\n        }\n    }\n    return count\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = [];\n\
    \    for(let i = 1; i <= n; i++){\n        arr.push(i * i - i + 1);\n    }\n \
    \   let num = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j\
    \ = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length;\
    \ k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n         \
    \           num++;\n                }\n            }\n        }\n    }\n    return\
    \ num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var array = [];\n\
    \    var count = 0;\n    for(let i = 1; i <= n; i++){\n        array.push(i *\
    \ i - i + 1);\n    }\n    for(let i = 0; i < array.length; i++){\n        for(let\
    \ j = 0; j < array.length; j++){\n            for(let k = 0; k < array.length;\
    \ k++){\n                if(i < j && j < k && (array[i] + array[j] + array[k])\
    \ % 3 == 0){\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n\tlet sum = 0;\n\t\
    for(let i = 1; i <= n; i++){\n\t\tfor(let j = i+1; j <= n; j++){\n\t\t\tfor(let\
    \ k = j+1; k <= n; k++){\n\t\t\t\tif(((i*i-i+1)+(j*j-j+1)+(k*k-k+1))%3 === 0){\n\
    \t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n\
    \  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n \
    \ let count = 0;\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n\
    \  }\n  console.log(a);\n  for(let i = 0; i < a.length; i++){\n    for(let j =\
    \ i + 1; j < a.length; j++){\n      for(let k = j + 1; k < a.length; k++){\n \
    \       if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n \
    \     }\n    }\n  }\n  return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: "[ 1, 3, 7, 13, 21 ]\n[ 1, 3, 7, 13, 21, 31 ]\n[\n   1,  3,  7, 13, 21,\n\
    \  31, 43, 57, 73, 91\n]\n[\n     1,    3,    7,   13,   21,   31,   43,   57,\
    \   73,   91,\n   111,  133,  157,  183,  211,  241,  273,  307,  343,  381,\n\
    \   421,  463,  507,  553,  601,  651,  703,  757,  813,  871,\n   931,  993,\
    \ 1057, 1123, 1191, 1261, 1333, 1407, 1483, 1561,\n  1641, 1723, 1807, 1893, 1981,\
    \ 2071, 2163, 2257, 2353, 2451,\n  2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307,\
    \ 3423, 3541,\n  3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831,\n\
    \  4971, 5113, 5257, 5403, 5551, 5701, 5853, 6007, 6163, 6321,\n  6481, 6643,\
    \ 6807, 6973, 7141, 7311, 7483, 7657, 7833, 8011,\n  8191, 8373, 8557, 8743, 8931,\
    \ 9121, 9313, 9507, 9703, 9901\n]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var arr = []\n\
    \    var c = 0\n    for(var i = 1; i <= n; i++){\n        arr.push(i*i - i + 1)\n\
    \    }\n    for(var i = 0; i < arr.length - 2; i++){\n        for(var j = i +\
    \ 1; j < arr.length - 1; j++){\n            for(var k = j + 1; k < arr.length;\
    \ k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0){\n          \
    \          c++\n                }\n            }\n        }\n    }\n    return\
    \ c\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n\
    \  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var array = [];\n\
    \    var count = 0;\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n    \
    \    var j = i * i - i + 1;\n        array.push(j);\n    }\n    for(var i = 0;\
    \ i < array.length; i++){\n        for(var j = i + 1; j < array.length; j++){\n\
    \            for(var k = j + 1; k < array.length; k++){\n                sum =\
    \ array[i] + array[j] + array[k];\n                if(sum % 3 == 0){\n       \
    \             count++;\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n\
    \    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n   \
    \ let count = 0;\n    for(let i = 0; i < a.length; i++){\n        for(let j =\
    \ i + 1; j < a.length; j++){\n            for(let k = j + 1; k < a.length; k++){\n\
    \                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n\
    \  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n\
    \    for(let i = 1; i<=n; i++){\n        a.push(i*i-i+1);\n    }\n    let k =\
    \ 0;\n    for(let i = 0; i<a.length-2; i++){\n        for(let j = i+1; j<a.length-1;\
    \ j++){\n            for(let l = j+1; l<a.length; l++){\n                if((a[i]+a[j]+a[l])%3===0){\n\
    \                    k++;\n                }\n            }\n        }\n    }\n\
    \    return k;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    const a = Array.from({length:\
    \ n}, (v, i) => i * i - i + 1);\n    let counter = 0;\n    for(let i = 0; i <\
    \ a.length; i++){\n        for(let j = i + 1; j < a.length; j++){\n          \
    \  for(let k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k])\
    \ % 3 === 0){\n                    counter++;\n                }\n           \
    \ }\n        }\n    }\n    return counter;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n1\n    at test (/tmp/tmppj3tzogi.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmppj3tzogi.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
    \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only\
    \ valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var count = 0;\n\
    \    var array = []\n    for(var i = 1; i <= n; i++){\n        array.push(i*i\
    \ - i + 1)\n    }\n    for(var i = 0; i < array.length - 2; i++){\n        for(var\
    \ j = i + 1; j < array.length - 1; j++){\n            for(var k = j + 1; k < array.length;\
    \ k++){\n                if((array[i] + array[j] + array[k]) % 3 === 0){\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
    \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n\
    \  assert.deepEqual(candidate(100),53361);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
