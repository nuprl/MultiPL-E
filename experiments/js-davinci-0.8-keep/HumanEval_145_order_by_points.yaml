name: HumanEval_145_order_by_points
language: js
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11,\
  \ 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423,\
  \ 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    // console.log(nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b)))\n\
    \    return nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b))\n}", "  return\
    \ nums.map(\n    (num, i) => num + ' ' + i\n  ).sort().map(\n    (val) => Number(val.match(/\\\
    d+/)[0])\n  );\n}\n", "    if(nums.length == 0){\n        return nums;\n    }\n\
    \    let sort = [];\n    let key = null;\n    let max = sumOfDigits(nums[0]);\n\
    \    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let sum\
    \ = sumOfDigits(nums[i]);\n        if(sum >= max){\n            max = sum;\n \
    \           key = nums[i];\n            count = 0;\n        }\n        if(i ==\
    \ nums.length - 1){\n            sort.push(key);\n            nums.splice(nums.indexOf(key),\
    \ 1);\n            i = -1;\n            max = sumOfDigits(nums[0]);\n        \
    \    count++;\n        }\n        if(count == nums.length){\n            break;\n\
    \        }\n    }\n    return sort;\n}", "  var index = 0;\n  var lookup = {};\n\
    \  var sorted = [];\n  var sortedKeys = [];\n  // make a copy of the array,\n\
    \  // and create a mapping of the number in array\n  // to the index of where\
    \ it was in the array\n  // e.g. {0: 6, 1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5}\n\
    \  //nums = nums.slice();\n  for (var j = 0; j < nums.length; j++) {\n    lookup[j]\
    \ = index;\n    index++;\n  }\n  // sort the copied array\n  nums.sort(function(a,\
    \ b) {\n    // if sum(a) < sum(b),\n    // return -1 and let sort() know that\
    \ a should come before b\n    // (or if they are equal, use the index to determine\
    \ which\n    // should come first based on the original array).\n    if (sum(a)\
    \ < sum(b)) return -1;\n    if (sum(a) === sum(b)) return lookup[b] - lookup[a];\n\
    \    // if sum(a) > sum(b), return 1,\n    // (or if they are equal, use the index\
    \ to determine which\n    // should come first based on the original array).\n\
    \    if (sum(a) > sum(b)) return 1;\n  });\n  //console.log(nums);\n  return nums;\n\
    }\n", "    var sums = []\n    var answer = []\n    if (nums.length < 1){\n   \
    \     return [];\n    }\n    else{\n        for (var i = 0; i < nums.length; i++){\n\
    \            var sum = 0;\n            for (var j = 0; j < nums[i].toString().length;\
    \ j++){\n                sum += parseInt(nums[i].toString()[j]);\n           \
    \ }\n            sums.push(sum);\n        }\n        for (var i = 0; i < sums.length;\
    \ i++){\n            for (var j = 0; j < sums.length; j++){\n                if\
    \ (sums[i] < sums[j]){\n                    var temp = sums[i];\n            \
    \        sums[i] = sums[j];\n                    sums[j] = temp;\n           \
    \         var temp2 = nums[i];\n                    nums[i] = nums[j];\n     \
    \               nums[j] = temp2;\n                }\n            }\n        }\n\
    \        return nums;\n    }\n}\n", "    let sums = nums.map(sum_digits);\n  \
    \  return quick_sort(nums, sums);\n}\n", "  var result = [];\n  var sorted = {};\n\
    \  nums.forEach(function(num, index){\n    var numArr = num.toString().split('');\n\
    \    if(sorted[numArr.reduce(function(a,b){\n      return parseInt(a) + parseInt(b);\n\
    \    })] == undefined){\n      sorted[numArr.reduce(function(a,b){\n        return\
    \ parseInt(a) + parseInt(b);\n      })] = [index];\n    }else{\n      sorted[numArr.reduce(function(a,b){\n\
    \        return parseInt(a) + parseInt(b);\n      })].push(index);\n    }\n  });\n\
    \  var sortedKeys = Object.keys(sorted).sort(function(a,b){\n    return a - b;\n\
    \  });\n  sortedKeys.forEach(function(key){\n    var indexes = sorted[key];\n\
    \    indexes.forEach(function(index){\n      result.push(nums[index]);\n    });\n\
    \  });\n  return result;\n}\n", "\n}\n", "    return nums.sort((a, b) => {\n \
    \       let a_sum = a.toString().split('').reduce((acc, num) => acc + parseInt(num),\
    \ 0);\n        let b_sum = b.toString().split('').reduce((acc, num) => acc + parseInt(num),\
    \ 0);\n        if (a_sum > b_sum) {\n            return 1;\n        } else if\
    \ (a_sum < b_sum) {\n            return -1;\n        } else {\n            return\
    \ a - b;\n        }\n    });\n}\n", "    let arr = []\n    nums.forEach(num =>\
    \ arr.push(Math.abs(num).toString().split('').reduce((acc, cur) => +acc + +cur)))\n\
    \    let sortedArr = arr.slice().sort((a, b) => a - b)\n    let obj = {}\n   \
    \ sortedArr.forEach((el, i) => obj[el] = i)\n    return arr.map(el => nums[obj[el]])\n\
    }", "    let sum = 0;\n    let results = [];\n    if(nums.length > 0){\n     \
    \   for(let i = 0; i < nums.length; i++){\n            for(let j = 0; j < (nums[i].toString()).length;\
    \ j++){\n                sum += parseInt((nums[i].toString())[j]);\n         \
    \   }\n            results.push([sum, i]);\n            sum = 0;\n        }\n\
    \        results.sort(function(a, b){\n            return a[0] - b[0];\n     \
    \   });\n        for(let i = 0; i < results.length; i++){\n            results[i]\
    \ = nums[results[i][1]];\n        }\n    }\n    return results;\n}", "    let\
    \ arr = [];\n    let map = {};\n    for(let i=0; i<nums.length; i++){\n      \
    \  arr.push([nums[i], sum_of_digits(nums[i])]);\n        if(!map[sum_of_digits(nums[i])]){\n\
    \            map[sum_of_digits(nums[i])] = [];\n        }\n        map[sum_of_digits(nums[i])].push(nums[i]);\n\
    \    }\n    let keys = Object.keys(map);\n    keys.sort((a,b)=>{\n        return\
    \ a-b;\n    });\n    let finalArr = [];\n    for(let i=0; i<keys.length; i++){\n\
    \        map[keys[i]].sort((a,b)=>{\n            return a-b;\n        });\n  \
    \      finalArr = finalArr.concat(map[keys[i]]);\n    }\n    return finalArr;\n\
    }", "    var result = [];\n    if(nums.length > 0){\n        for(var i = 0; i\
    \ < nums.length; i++){\n            var tmp = nums[i];\n            var num =\
    \ Math.abs(tmp).toString();\n            var sum = 0;\n            for(var j =\
    \ 0; j < num.length; j++){\n                sum += Number(num[j]);\n         \
    \   }\n            result.push([tmp, sum, i]);\n        }\n        result.sort(function(a,\
    \ b){\n            if(a[1] === b[1]){\n                return a[2] - b[2];\n \
    \           }\n            return a[1] - b[1];\n        });\n        var res =\
    \ [];\n        for(var i = 0; i < result.length; i++){\n            res.push(result[i][0]);\n\
    \        }\n        return res;\n    }\n    return result;\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a,\
    \ b) => Number(a) + Number(b), 0);\n        let sumB = b.toString().split('').reduce((a,\
    \ b) => Number(a) + Number(b), 0);\n        return sumA - sumB;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        return [...String(a)].reduce((a, c) =>\
    \ a + Number(c), 0) - [...String(b)].reduce((a, c) => a + Number(c), 0) ||\n \
    \           nums.indexOf(a) - nums.indexOf(b);\n    });\n}", "  let num_hash =\
    \ {};\n  for (let i = 0; i < nums.length; i++){\n    let n = nums[i];\n    let\
    \ n_array = n.toString().split('');\n    let n_sum = 0;\n    for (let j = 0; j\
    \ < n_array.length; j++){\n      n_sum += parseInt(n_array[j]);\n    }\n    if\
    \ (num_hash[n_sum]){\n      num_hash[n_sum].push(n);\n    }\n    else {\n    \
    \  num_hash[n_sum] = [n];\n    }\n  }\n  let result = [];\n  let keys = Object.keys(num_hash);\n\
    \  keys.sort(function(a, b){return a - b});\n  for (let i = 0; i < keys.length;\
    \ i++){\n    result = result.concat(num_hash[keys[i]]);\n  }\n  return result;\n\
    }\n", "    if (nums.length == 0) {\n        return [];\n    }\n\n    let nums_to_points\
    \ = [];\n    let points_to_num = {};\n    let max_point = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        let point = 0;\n        let num = nums[i];\n\
    \        while (num != 0) {\n            point += num % 10;\n            num =\
    \ parseInt(num / 10);\n        }\n        nums_to_points.push(point);\n      \
    \  points_to_num[point] = nums[i];\n        if (point > max_point) {\n       \
    \     max_point = point;\n        }\n    }\n\n    let result = [];\n    for (let\
    \ i = 0; i <= max_point; i++) {\n        if (points_to_num[i] != undefined) {\n\
    \            result.push(points_to_num[i]);\n        }\n    }\n    return result;\n\
    }\n", "\t// if (nums.length > 1){\n\t// \tfor (var i = 0; i < nums.length - 1;\
    \ i++){\n\t// \t\tfor (var j = i + 1; j < nums.length; j++){\n\t// \t\t\tif (get_sum_of_numbers(nums[i])\
    \ > get_sum_of_numbers(nums[j])){\n\t// \t\t\t\tvar temp = nums[i];\n\t// \t\t\
    \t\tnums[i] = nums[j];\n\t// \t\t\t\tnums[j] = temp;\n\t// \t\t\t}\n\t// \t\t\
    }\n\t// \t}\n\t// }\n\tvar sorted_array = nums.slice().sort(function(a, b){\n\t\
    \treturn get_sum_of_numbers(a) - get_sum_of_numbers(b);\n\t});\n\treturn sorted_array;\n\
    }", "    return nums.map(function(num){\n        return {num: num, sum: sum_digits(num)};\n\
    \    }).sort(function(a, b){\n        if(a.sum !== b.sum){\n            return\
    \ a.sum - b.sum;\n        }\n        return nums.indexOf(a.num) - nums.indexOf(b.num);\n\
    \    }).map(function(item){\n        return item.num;\n    });\n}\n", "    return\
    \ nums.map(e => {\n        return {num: e, points: e.toString().split('').reduce((a,\
    \ b) => Number(a) + Number(b), 0)}\n    }).sort((a, b) => a.points - b.points).map(e\
    \ => e.num);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
