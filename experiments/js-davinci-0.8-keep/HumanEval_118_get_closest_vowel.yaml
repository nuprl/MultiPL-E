name: HumanEval_118_get_closest_vowel
language: js
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
  quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
  full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
  eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
  bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
  quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
  Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
completions: ["    let vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let cons='bcdfghjklmnpqrstvwxyz';\n\
    \    let w=word.split('').reverse().join('');\n    for(let i=0;i<w.length;i++){\n\
    \      if(vowels.includes(w[i])){\n        if(i+1<w.length && cons.includes(w[i+1])){\n\
    \          if(i-1>=0 && cons.includes(w[i-1])){\n            return w[i];\n  \
    \        }\n        }\n      }\n    }\n    return '';\n  }\n", "    var vowels\
    \ = 'aeiouAEIOU';\n    var cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    for(var i = word.length-1; i >= 0; i--){\n        if(cons.indexOf(word[i])\
    \ >= 0 && i < word.length-1){\n            if(vowels.indexOf(word[i+1]) >= 0){\n\
    \                return word[i+1];\n            }\n        }\n    }\n    return\
    \ '';\n}", "    var res = '';\n    var last_letter = '';\n    var vowels = \"\
    aeiou\";\n    var index = 0;\n    for(var i = word.length - 1; i >= 0; i--){\n\
    \        if(vowels.indexOf(word[i]) != -1){\n            last_letter = word[i];\n\
    \            continue;\n        }\n        if(i == 0){\n            res = '';\n\
    \            break;\n        }\n        index = vowels.indexOf(last_letter);\n\
    \        if(index == -1){\n            index = vowels.indexOf(word[i - 1]);\n\
    \            if(index == -1){\n                res = '';\n                break;\n\
    \            }else{\n                res = word[i - 1];\n                break;\n\
    \            }\n        }else{\n            if(vowels.indexOf(word[i - 1]) ==\
    \ -1){\n                res = last_letter;\n                break;\n         \
    \   }else{\n                if(word[i - 1] == vowels[index - 1]){\n          \
    \          res = last_letter;\n                    break;\n                }else{\n\
    \                    res = word[i - 1];\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return res;\n}", "    var cons\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowels = \"aeiouAEIOU\"\
    \n    for (var i = word.length-1; i > 1; i--){\n      if (cons.indexOf(word[i])\
    \ != -1 && vowels.indexOf(word[i-1]) != -1 && cons.indexOf(word[i-2]) != -1){\n\
    \        return word[i-1]\n      }\n    }\n    return ''\n}\n", "    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let cons = 'bcdfghjklmnpqrstvwxyz';\n    let\
    \ str = '';\n    for(let i = word.length - 1; i >= 0; i--){\n        let letter\
    \ = word[i];\n        if(vowels.includes(letter)){\n            if(cons.includes(word[i\
    \ - 1]) && cons.includes(word[i + 1])){\n                str += letter;\n    \
    \            return str;\n            }\n        }\n    }\n    return '';\n}",
  "    let rVowels = ['a', 'e', 'i', 'o', 'u'];\n    let lVowels = ['A', 'E', 'I',\
    \ 'O', 'U'];\n    if (word.length < 2) {\n        return '';\n    }\n    for (let\
    \ i = word.length - 1; i > 0; i--) {\n        if (lVowels.includes(word[i])) {\n\
    \            if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i -\
    \ 1])) {\n                return word[i];\n            }\n        }\n        if\
    \ (rVowels.includes(word[i])) {\n            if (!rVowels.includes(word[i - 1])\
    \ && !lVowels.includes(word[i - 1])) {\n                return word[i];\n    \
    \        }\n        }\n    }\n    return '';\n}\n", "    var vowel=[\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"];\n    var found=\"\";\n    for(var i=word.length-1;i>=0;i--){\n\
    \        if(vowel.indexOf(word[i])==-1){\n            for(var j=0;j<vowel.length;j++){\n\
    \                if(word[i+1]==vowel[j]){\n                    found=vowel[j];\n\
    \                    return found;\n                }\n            }\n       \
    \ }\n    }\n    return found;\n}\n", "  var vowel = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n  var closestVowel = \"\";\n  for(var i = word.length-1; i >= 0; i--){\n\
    \    if(i === 0){\n      return closestVowel;\n    }else if(vowel.indexOf(word[i])\
    \ !== -1 && vowel.indexOf(word[i-1]) === -1){\n      closestVowel = word[i];\n\
    \      return closestVowel;\n    }\n  }\n}\n", "  var vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n  var cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n  var cons_ind = [];\n  var vowel_ind = [];\n\
    \  for (var i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i]) !==\
    \ -1) {\n      vowel_ind.push(i);\n    }\n    if (cons.indexOf(word[i]) !== -1)\
    \ {\n      cons_ind.push(i);\n    }\n  }\n  var vowel_ind_final = [];\n  for (var\
    \ i = 0; i < vowel_ind.length; i++) {\n    if (cons_ind.indexOf(vowel_ind[i] -\
    \ 1) !== -1 && cons_ind.indexOf(vowel_ind[i] + 1) !== -1) {\n      vowel_ind_final.push(vowel_ind[i]);\n\
    \    }\n  }\n  if (vowel_ind_final.length === 0) {\n    return \"\";\n  }\n  var\
    \ min_ind = vowel_ind_final[0];\n  for (var i = 0; i < vowel_ind_final.length;\
    \ i++) {\n    if (min_ind > vowel_ind_final[i]) {\n      min_ind = vowel_ind_final[i];\n\
    \    }\n  }\n  return word[min_ind];\n}", "  const vowel = 'aeiouAEIOU';\n  const\
    \ cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  for (let i = word.length\
    \ - 1; i >= 0; i--) {\n    if (cons.indexOf(word[i]) === -1) {\n      for (let\
    \ j = i - 1; j >= 0; j--) {\n        if (cons.indexOf(word[j]) !== -1) {\n   \
    \       return word[i];\n        }\n      }\n    }\n  }\n  return '';\n}\n", "\t\
    return \"\";\n}\n", "\tconst vowels = \"aeiou\";\n\tfor (let i = word.length -\
    \ 2; i >= 0; i--) {\n\t\tconst left = word[i];\n\t\tconst right = word[i + 1];\n\
    \t\tif (vowels.includes(left) && vowels.includes(right)) {\n\t\t\tcontinue;\n\t\
    \t} else if (vowels.includes(left) && !vowels.includes(right)) {\n\t\t\treturn\
    \ left;\n\t\t} else if (!vowels.includes(left) && vowels.includes(right)) {\n\t\
    \t\treturn right;\n\t\t}\n\t}\n\treturn \"\";\n}\n", "    var vowel = 'aeiouAEIOU';\n\
    \    var result = '';\n    var min = 10000;\n    for(var i = 0; i < word.length;\
    \ i++){\n        if(word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i]\
    \ === 'o' || word[i] === 'u' || word[i] === 'A' || word[i] === 'E' || word[i]\
    \ === 'I' || word[i] === 'O' || word[i] === 'U'){\n            for(var j = i +\
    \ 1; j < word.length; j++){\n                if(word[j] !== 'a' && word[j] !==\
    \ 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !== 'u' && word[j] !==\
    \ 'A' && word[j] !== 'E' && word[j] !== 'I' && word[j] !== 'O' && word[j] !==\
    \ 'U'){\n                    if(j - i < min){\n                        min = j\
    \ - i;\n                        result = word[i];\n                    }\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}", "\tif (word.length<2)\n\t\treturn \"\";\n\telse{\n\t\t\
    var v = \"aeiouAEIOU\";\n\t\tvar vow = [];\n\t\tfor (i = 0; i < word.length; i++){\n\
    \t\t\tif (v.indexOf(word[i]) > -1)\n\t\t\t\tvow.push(i);\n\t\t}\n\t\tfor (i =\
    \ vow.length - 1; i > 0; i--){\n\t\t\tif (vow[i] - vow[i-1] > 1)\n\t\t\t\treturn\
    \ word[vow[i]];\n\t\t}\n\t\treturn \"\";\n\t}\n}", "    const vowel = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    let res = \"\";\n    let flag = false;\n \
    \   for(let i = word.length - 1; i >= 0; i--){\n        if(flag && vowel.includes(word[i]))\
    \ return word[i];\n        else if(!vowel.includes(word[i])) flag = true;\n  \
    \  }\n    return res;\n}\n", "    const vowels = \"aeiou\"\n    const consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let result = []\n    let c = 0\n    for(let\
    \ i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n\
    \            result.push(i)\n        }\n        if(consonants.includes(word[i])){\n\
    \            c = i\n            break\n        }\n    }\n    let closest = 0\n\
    \    if(result.length > 0){\n        for(let i = 0; i < result.length; i++){\n\
    \            if(result[i] > c){\n                closest = result[i]\n       \
    \         break\n            }\n        }\n    }\n    return word[closest] ||\
    \ \"\"\n}", "    // array of consonants\n    const cons = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z']\n    // array of vowels\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    // split word into array\n    const arr = word.split('')\n    // variable\
    \ to hold closest vowel\n    let vowel = ''\n    // variable to hold distance\
    \ from end to vowel\n    let dist = ''\n    // variable to hold distance for vowels\n\
    \    let distVowel = arr.length\n    // variable to hold furthest vowel position\n\
    \    let furthestVowel = 0\n    // iterate through array backwards\n    for (let\
    \ i = arr.length - 1; i >= 0; i--) {\n        // if current element is a consonant\n\
    \        if (cons.includes(arr[i])) {\n            // iterate through vowels array\n\
    \            for (let j = 0; j < vowels.length; j++) {\n                // if\
    \ current element is a vowel\n                if (arr[i + 1] === vowels[j]) {\n\
    \                    // find distance from end to current vowel\n            \
    \        dist = arr.length - (i + 1)\n                    // if vowel is less\
    \ than previous vowels\n                    if (dist < distVowel) {\n        \
    \                // set vowel to current vowel\n                        vowel\
    \ = arr[i + 1]\n                        // set distVowel to current vowel\n  \
    \                      distVowel = dist\n                        // set furthestVowel\
    \ to current position\n                        furthestVowel = i + 1\n       \
    \             }\n                }\n            }\n        }\n    }\n    // if\
    \ vowel is still empty\n    if (vowel === '') {\n        // return empty string\n\
    \        return ''\n    } else {\n        // otherwise return closest vowel\n\
    \        return vowel\n    }\n}\n", "    let vowels = 'aeiouAEIOU';\n    let arr\
    \ = word.split('');\n    let index = arr.reverse().findIndex(letter => {\n   \
    \     if(vowels.includes(letter)){\n            return vowels.includes(letter);\n\
    \        }\n    });\n    return index == -1 ? '' : arr[index];\n}", "    var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var cons = \"\";\n    var vow =\
    \ \"\";\n    var vow2 = \"\";\n    for(var i = 0; i < word.length; i++){\n   \
    \   if(vowels.indexOf(word[i]) === -1){\n        cons += word[i];\n      }else{\n\
    \        vow += word[i];\n      }\n    }\n    vow2 = vow.split(\"\").reverse().join(\"\
    \");\n    return vow2[0];\n}", "    word = word.split('').reverse();\n    let\
    \ regex = /[aeiou]/;\n    let vowel = '';\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(regex.test(word[i])){\n            vowel = word[i];\n    \
    \        break;\n        }\n    }\n    return vowel;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
