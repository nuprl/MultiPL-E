name: HumanEval_7_filter_by_substring
language: js
prompt: "//Filter an input list of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings,\
  \ substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\",\
  \ \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"\
  gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
completions: ["    var result = []\n    for (var i=0; i<strings.length; i++){\n  \
    \      if (strings[i].indexOf(substring) != -1){\n            result.push(strings[i])\n\
    \        }\n    }\n    return result\n}\n", "  return strings.filter(function(x){return\
    \ x.indexOf(substring) != -1;});\n}", "\tvar results = [];\n\tfor(var i=0; i<strings.length;\
    \ i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\t\t\tresults.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn results;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n\n", "\treturn strings.filter(function(element){\n\
    \t\treturn element.indexOf(substring) != -1;\n\t});\n}\n", "  return strings.filter(string\
    \ => string.includes(substring));\n}\n", "\tvar my_strings = [];\n\tvar i = 0;\n\
    \tfor (i = 0; i < strings.length; i++) {\n\t\tif (strings[i].indexOf(substring)\
    \ >= 0) {\n\t\t\tmy_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn my_strings;\n\
    }\n", "    var filteredStrings = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].includes(substring)){\n            filteredStrings.push(strings[i]);\n\
    \        }\n    }\n    return filteredStrings;\n}\n", "    return strings.filter(string\
    \ => string.includes(substring));\n}\n", "\treturn _.filter(strings, function(string){\n\
    \t\treturn string.indexOf(substring) > -1;\n\t});\n}\n\n", "    return strings.filter(str\
    \ => str.includes(substring));\n}", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n", "    return strings.filter(str\
    \ => str.includes(substring));\n}\n", "  var filtered_strings = [];\n  strings.forEach(function(element){\n\
    \    if (element.indexOf(substring) !== -1){\n      filtered_strings.push(element);\n\
    \    }\n  });\n  return filtered_strings;\n}\n", "\tvar new_strings = [];\n\t\
    for(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\
    \t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n}\n",
  "\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n\
    }\n", "    var res=[];\n    for(var i=0;i<strings.length;i++){\n        if(strings[i].indexOf(substring)!=-1){\n\
    \            res.push(strings[i]);\n        }\n    }\n    return res;\n}\n", " \
    \   //Answer:\n    return strings.filter(x => x.includes(substring));\n}\n", " \
    \   for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ == -1){\n            strings.splice(i, 1);\n            i--;\n        }\n  \
    \  }\n    return strings;\n}\n", "    var filtered = []\n    for (i = 0; i < strings.length;\
    \ i++){\n        if (strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i])\n\
    \        }\n    }\n    return filtered\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
