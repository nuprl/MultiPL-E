language: js
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    // TODO: implement\
    \ this function\n    var i;\n    var length = numbers.length;\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    var step_size;\n    var result = [];\n    for\
    \ (i = 0; i < length; i++){\n        if (numbers[i] < min){\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n\
    \        }\n    }\n    if (min == max){\n        return numbers;\n    }\n    step_size\
    \ = 1.0 / (max - min);\n    for (i = 0; i < length; i++){\n        result.push((numbers[i]\
    \ - min) * step_size);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  return numbers.map(function(number){\n\
    \    return (number - min) / (max - min);\n  });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var tmp = [];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        tmp.push((numbers[i] -\
    \ min) / (max - min));\n    }\n    return tmp;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = null, max\
    \ = null;\n    numbers.forEach(num => {\n        if (min === null || num < min)\
    \ min = num;\n        if (max === null || num > max) max = num;\n    });\n   \
    \ let div = max - min;\n    return numbers.map(num => (num - min) / div);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 1
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var max = _.max(numbers);\n\
    \    var min = _.min(numbers);\n    return _.map(numbers, function(n){\n     \
    \   return (n - min) / (max - min);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfbw4xfgv.js:6\n    var max = _.max(numbers);\n              ^\n\
    \nReferenceError: _ is not defined\n    at rescale_to_unit (/tmp/tmpfbw4xfgv.js:6:15)\n\
    \    at test (/tmp/tmpfbw4xfgv.js:18:20)\n    at Object.<anonymous> (/tmp/tmpfbw4xfgv.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    if(numbers.length <\
    \ 2){\n        throw 'List of numbers must contain at least two elements';\n \
    \   }\n    var minValue = Math.min.apply(null, numbers);\n    var maxValue = Math.max.apply(null,\
    \ numbers);\n    var diff = maxValue - minValue;\n    var rescaled = [];\n   \
    \ for(var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i]\
    \ - minValue) / diff);\n    }\n    return rescaled;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const difference = max - min;\n  const\
    \ result = numbers.map(val => (val - min) / difference);\n  return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for (var i=1; i<numbers.length; i++){\n      \
    \  if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if\
    \ (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var\
    \ diff = max - min;\n    var transformed = [];\n    for (var i=0; i<numbers.length;\
    \ i++){\n        transformed.push((numbers[i] - min) / diff);\n    }\n    return\
    \ transformed;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tconst min = Math.min(...numbers);\n\
    \tconst max = Math.max(...numbers);\n\tconst range = max - min;\n\treturn numbers.map(n\
    \ => (n - min) / range);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  var min = Math.min.apply(null,\
    \ numbers);\n  var max = Math.max.apply(null, numbers);\n  var dif = max - min;\n\
    \  return numbers.map(function(v) { return ((v - min) / dif); });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 1
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var c = d3.scale.linear()\n\
    \        .domain([d3.min(numbers), d3.max(numbers)])\n        .range([0, 1]);\n\
    \    var output = [];\n    for (var x = 0; x < numbers.length; x++){\n       \
    \ output.push(c(numbers[x]));\n    }\n    return output;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpn1gv8h3n.js:6\n    var c = d3.scale.linear()\n            ^\n\n\
    ReferenceError: d3 is not defined\n    at rescale_to_unit (/tmp/tmpn1gv8h3n.js:6:13)\n\
    \    at test (/tmp/tmpn1gv8h3n.js:21:20)\n    at Object.<anonymous> (/tmp/tmpn1gv8h3n.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let n = numbers.length;\n\
    \    if(n<2){\n        throw new Error(\"need at least two values\");\n    }\n\
    \    let x_min = Math.min(...numbers);\n    let x_max = Math.max(...numbers);\n\
    \    let result = numbers.map(x => (x-x_min)/(x_max-x_min));\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 1
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    return numbers.map(function(n){return\
    \ n/max(numbers)});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmy0lhji7.js:6\n    return numbers.map(function(n){return n/max(numbers)});\n\
    \                                   ^\n\nReferenceError: max is not defined\n\
    \    at /tmp/tmpmy0lhji7.js:6:36\n    at Array.map (<anonymous>)\n    at rescale_to_unit\
    \ (/tmp/tmpmy0lhji7.js:6:20)\n    at test (/tmp/tmpmy0lhji7.js:13:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmy0lhji7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = numbers[0];\n\
    \    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++){\n  \
    \      if (numbers[i] < min){\n            min = numbers[i];\n        }\n    \
    \    if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n\
    \    return numbers.map(function(n){\n        return (n - min) / (max - min);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 1
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let res = [];\n  let\
    \ sorted = numbers.sort();\n  let largest = sorted[sorted.length - 1];\n  let\
    \ smallest = sorted[0];\n  for (let i = 0; i < numbers.length; i++){\n    res.push((numbers[i]\
    \ - smallest) / (largest - smallest));\n  }\n  return res;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -0,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  0\n]\n    at test (/tmp/tmpxuus5v9m.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxuus5v9m.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -0, 1 ],\n\
    \  expected: [ 1, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max\
    \ - min;\n    var rescaled = [];\n    for (var i = 0; i < numbers.length; i++){\n\
    \        rescaled.push((numbers[i] - min) / delta);\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  //we want the smallest\
    \ number in the list to become 0 and the largest to become 1\n  let min = Math.min(...numbers);\n\
    \  let max = Math.max(...numbers);\n  let scale = max - min;\n  return numbers.map(x\
    \ => (x - min) / scale);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tlet min = Math.min(...numbers);\n\
    \tlet max = Math.max(...numbers);\n\tlet scale = 1/(max-min);\n\tlet scaled_numbers\
    \ = numbers.map(function(value){\n\t\treturn scale*(value-min);\n\t});\n\treturn\
    \ scaled_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 0
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0],\
    \ max = numbers[0];\n    numbers.forEach(function(number){\n        if(number\
    \ < min) min = number;\n        if(number > max) max = number;\n    });\n    return\
    \ numbers.map(function(number){\n        return (number - min) / (max - min);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821455
- exit_code: 1
  program: "//Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  var min = math.min(numbers);\n\
    \  var max = math.max(numbers);\n  var range = max - min;\n  return numbers.map(function(num){\n\
    \    return (num - min) / range;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxuhm1ls3.js:6\n  var min = math.min(numbers);\n            ^\n\n\
    ReferenceError: math is not defined\n    at rescale_to_unit (/tmp/tmpxuhm1ls3.js:6:13)\n\
    \    at test (/tmp/tmpxuhm1ls3.js:19:20)\n    at Object.<anonymous> (/tmp/tmpxuhm1ls3.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821455
