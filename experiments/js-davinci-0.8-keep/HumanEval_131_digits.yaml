name: HumanEval_131_digits
language: js
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4) \
  \ == 0\n// digits(235) == 15\nfunction digits(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["    var sum = 1;\n    if(n === 0){\n        return 0;\n    }\n    if(n\
    \ < 0){\n        n = -n;\n    }\n    while(n !== 0){\n        var m = n % 10;\n\
    \        if(m % 2 !== 0){\n            sum *= m;\n        }\n        n = (n -\
    \ m) / 10;\n    }\n    return sum;\n}", "    return (n+'').split('').reduce((a,b)=>(b%2===1)?a*+b:a,1);\n\
    }", "  var num = n.toString().split('');\n  var result = 0;\n  for (var i = 0;\
    \ i < num.length; i++) {\n    if (num[i] % 2 != 0) {\n      result += parseInt(num[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    if(n == 0) {\n        return 0;\n  \
    \  }\n    return Math.abs(n) % 10 % 2 ? Math.abs(n) % 10 * digits(Math.floor(n\
    \ / 10)) : digits(Math.floor(n / 10));\n}\n", "    var product = 1;\n    var num\
    \ = n.toString().split('');\n    for(var i = 0; i < num.length; i++){\n      \
    \  if(num[i] % 2 !== 0){\n            product *= parseInt(num[i]);\n        }\n\
    \    }\n    return product;\n}\n", "    let prod = 1;\n    while (n > 0) {\n \
    \       if (n % 2 !== 0) prod *= n % 10;\n        n = Math.floor(n / 10);\n  \
    \  }\n    return prod;\n}\n", "  var str = n.toString();\n  var arr = str.split('');\n\
    \  var total = 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] %\
    \ 2 !== 0) {\n      total *= arr[i];\n    }\n  }\n  return total;\n}\n", "  let\
    \ x = n.toString().split('');\n  let result = 1;\n  for (let i = 0; i < x.length;\
    \ i++) {\n    if (x[i] % 2 !== 0) {\n      result *= x[i];\n    }\n  }\n  return\
    \ result;\n}\n\nmodule.exports = digits;", "    let sum = 1;\n    let check =\
    \ n.toString();\n    for (let i = 0; i < check.length; i++) {\n        if (check[i]\
    \ % 2 !== 0) {\n            sum *= parseInt(check[i]);\n        }\n    }\n   \
    \ return sum === 1 ? 0 : sum;\n}\n", "    var num = n.toString();\n    var result\
    \ = 1;\n    for (var i = 0; i < num.length; i++) {\n        if (num[i] % 2 ===\
    \ 1) {\n            result *= parseInt(num[i]);\n        }\n    }\n    return\
    \ result;\n}", "  let prod = 1;\n  n = n.toString().split('');\n  for (let i =\
    \ 0; i < n.length; i++) {\n    if (n[i] % 2 === 1) {\n      prod *= n[i];\n  \
    \  }\n  }\n  return prod === 1 ? 0 : prod;\n}\n", "    let sum = 1;\n    n = n.toString().split('');\n\
    \    if(n.length === 1){\n        return n[0] % 2 !== 0 ? n[0] : 0;\n    }\n \
    \   for(let i = 0; i < n.length; i++){\n        if(n[i] % 2 !== 0){\n        \
    \    sum *= n[i];\n        }\n    }\n    return sum;\n}", "    let mult = 1;\n\
    \    n = n.toString().split('');\n    for (let i = 0; i < n.length; i++) {\n \
    \       if (n[i] % 2 === 1) {\n            mult *= n[i];\n        }\n    }\n \
    \   return mult;\n}", "   var arr = n.toString().split('').map(Number);\n   var\
    \ n = 1;\n   for (var i = 0; i < arr.length; i++) {\n     if (arr[i] % 2 === 1)\
    \ {\n     n *= arr[i];\n     }\n   }\n   return n;\n}", "  let arr = n.toString().split('')\n\
    \  let ans = arr.filter(el => el % 2 !== 0)\n  return ans.length === 0 ? 0 : ans.reduce((a,\
    \ b) => a * b)\n}\n", "  let arrayOfNumbers = n.toString().split('').map(n =>\
    \ parseInt(n));\n  let productOfOdd = arrayOfNumbers.filter(n => n % 2 !== 0).reduce((a,\
    \ b) => a * b, 1);\n  return productOfOdd;\n}\n\ndigits(12345);", "    let numToStr\
    \ = n.toString();\n    let result = 1;\n    for (let i = 0; i < numToStr.length;\
    \ i++) {\n        let currentNum = Number(numToStr[i]);\n        if (currentNum\
    \ % 2 !== 0) {\n            result *= currentNum;\n        }\n    }\n    return\
    \ result;\n}\n", "  //write your code here\n}\n", "    const arr = n.toString().split('');\n\
    \    const result = arr.filter(elem => elem % 2 !== 0).reduce((acc, curr) => acc\
    \ * curr, 1);\n    return result || 0;\n}\n", "    var sum = 0;\n    var num =\
    \ n.toString();\n    for (i = 0; i < num.length; i++) {\n        var number =\
    \ parseInt(num[i]);\n        if (number % 2 != 0) {\n            sum += number;\n\
    \        }\n    }\n    return sum;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
