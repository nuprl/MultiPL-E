name: HumanEval_22_filter_integers
language: js
prompt: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
  \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2,\
  \ 3]\nfunction filter_integers(values){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
  \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
  , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["  var integers = values.filter(function(v){\n    return typeof v ===\
    \ 'number' && v === parseInt(v, 10);\n  });\n  return integers;\n}\n", "    return\
    \ values.filter(isNumber)\n}\n", "    var i, len = values.length, result = [];\n\
    \    for(i = 0; i < len; i++){\n        if(typeof values[i] === 'number' && values[i]\
    \ % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "    return values.filter(function(value){\n        return typeof\
    \ value === 'number' && value % 1 === 0;\n    });\n}", "    const filteredArr\
    \ = [];\n    for(let i = 0; i < values.length; i++){\n        if(typeof values[i]\
    \ === 'number' && Number.isInteger(values[i])){\n            filteredArr.push(values[i]);\n\
    \        }\n    }\n    return filteredArr;\n}", "\tconst filtered = values.filter(value\
    \ => Number.isInteger(value));\n\treturn filtered;\n}\n", "    var b = [];\n \
    \   for(i in values){\n        if(typeof values[i] == \"number\"){\n         \
    \   b.push(values[i]);\n        }\n    }\n    return b;\n}\n", "    return values.filter(function(value){\n\
    \        return typeof value === 'number' && value % 1 === 0;\n    });\n}\n",
  "    return values.filter(x => typeof x === 'number' && x % 1 === 0);\n}\n", "\t\
    var integer = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i]\
    \ === 'number' && isNaN(values[i]) === false){\n\t\t\tinteger.push(values[i]);\n\
    \t\t}\n\t}\n\treturn integer;\n}\n", "    return values.filter(function(item){\n\
    \        return typeof item === 'number' && item % 1 === 0;\n    });\n}\n", " \
    \   var integers = [];\n    for (var i = 0; i < values.length; i++){\n       \
    \ if (typeof values[i] === 'number' && values[i] % 1 === 0){\n            integers.push(values[i]);\n\
    \        }\n    }\n    return integers;\n}\n", "    function filter_fn(value){\n\
    \        return (Number.isInteger(value));\n    }\n    return (values.filter(filter_fn));\n\
    }\n", "\tvar results = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof\
    \ values[i] === 'number' && values[i] % 1 === 0){\n\t\t\tresults.push(values[i]);\n\
    \t\t}\n\t}\n\treturn results;\n}\n", "    const arr = values.filter(value => typeof\
    \ value === 'number' && !Number.isNaN(value));\n    return arr;\n}\n", "    return\
    \ values.filter(function(value){\n        return Number.isInteger(value);\n  \
    \  });\n}\n", "    // your code here\n    let temp = [];\n    for(let x of values){\n\
    \        if(typeof x === 'number' && !isNaN(x)){\n            temp.push(x);\n\
    \        }\n    }\n    return temp;\n}\n", "    function filter_fn(val){\n   \
    \     return isinstance(val, int);\n    }\n    return Array.prototype.filter.call(values,\
    \ filter_fn);\n}\n", "\treturn _.filter(values, function(val){\n\t\treturn typeof\
    \ val === 'number' && (val%1 === 0);\n\t});\n}\n", "    // YOUR CODE HERE\n  \
    \  return values.filter(n => typeof n == 'number' && Math.floor(n) == n);\n  \
    \  throw `NotImplementedError: ${inspect(values)}`;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
