language: js
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //Write code here\n    var biggestPrime\
    \ = 0;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n          \
    \  biggestPrime = i;\n            n = n / i;\n            i = 2;\n        }\n\
    \    }\n    return biggestPrime;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var current_prime = 2;\n    var max_prime\
    \ = 1;\n    while(n > 1){\n        if(n % current_prime == 0){\n            max_prime\
    \ = current_prime;\n            n = n / current_prime;\n        }\n        else{\n\
    \            current_prime++;\n        }\n    }\n    return max_prime;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [], i;\n    for (i\
    \ = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var largest\
    \ = 0;\n    for (var i = 2; i < n; i++){\n        if (n % i === 0){\n        \
    \    factors.push(i);\n        }\n    }\n    for (var i = 0; i < factors.length;\
    \ i++){\n        if (is_prime(factors[i])){\n            largest = factors[i];\n\
    \        }\n    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp92nnrb51.js:15\n        if (is_prime(factors[i])){\n        ^\n\
    \nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmp92nnrb51.js:15:9)\n\
    \    at test (/tmp/tmp92nnrb51.js:27:20)\n    at Object.<anonymous> (/tmp/tmp92nnrb51.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    function prime_factors(n){\n    \
    \    //Return a list of the prime factors of n\n        //>>>prime_factors(2048)\n\
    \        //[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        let factor\
    \ = 2;\n        let result = [];\n        while (n > 1){\n            while (n\
    \ % factor === 0){\n                result.push(factor);\n                n /=\
    \ factor;\n            }\n            factor += 1;\n        }\n        return\
    \ result;\n    }\n    //Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>>\
    \ largest_prime_factor(2048)\n    // 2\n    const factors = prime_factors(n);\n\
    \    const largest_factor = factors[factors.length - 1];\n    return largest_factor;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //YOUR CODE HERE\n    let lpf=1;\n\
    \    for(let i=2;i<n;i++){\n        if(n%i===0){\n            lpf=i;\n       \
    \     n=n/i;\n            i=1;\n        }\n    }\n    return lpf;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp5gzhniy1.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5gzhniy1.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t// Fill in the code here to satisfy\
    \ the doctests\n\t// Hint: remember the tip above!\n\tvar cur = n;\n\tvar prime\
    \ = find_next_prime(1);\n\tvar ans = 0;\n\twhile(cur > 1){\n\t\tif(cur % prime\
    \ == 0){\n\t\t\tcur = cur / prime;\n\t\t\tans = prime;\n\t\t}\n\t\telse{\n\t\t\
    \tprime = find_next_prime(prime);\n\t\t}\n\t}\n\treturn ans;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwrbsiu9f.js:10\n\tvar prime = find_next_prime(1);\n\t         \
    \   ^\n\nReferenceError: find_next_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpwrbsiu9f.js:10:14)\n    at test (/tmp/tmpwrbsiu9f.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpwrbsiu9f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //Initialize a prime number generator\n\
    \    var primes = prime_generator();\n    //Iterate over the prime numbers\n \
    \   for(let p of primes){\n        //When a prime p divides n, divide n by p\n\
    \        while(n % p == 0){\n            n /= p;\n        }\n        //When n\
    \ is no longer divisible by p, we are done.\n        if(n == 1){\n           \
    \ return p;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmgwjwcfx.js:8\n    var primes = prime_generator();\n          \
    \       ^\n\nReferenceError: prime_generator is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpmgwjwcfx.js:8:18)\n    at test (/tmp/tmpmgwjwcfx.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmgwjwcfx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var max = 0;\n    for(var i = 2;\
    \ i < n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n      \
    \          max = i;\n            }\n        }\n    }\n    return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp41h2kifr.js:10\n            if(is_prime(i)){\n            ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmp41h2kifr.js:10:13)\n\
    \    at test (/tmp/tmp41h2kifr.js:23:20)\n    at Object.<anonymous> (/tmp/tmp41h2kifr.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var prime_factors = [];\n  var factor\
    \ = 2;\n  while (n > 1){\n    if (n % factor === 0){\n      prime_factors.push(factor);\n\
    \      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return Math.max.apply(null,\
    \ prime_factors);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var p = 2;\n    while (p <= n){\n\
    \        if (n % p === 0){\n            n = n / p;\n        } else {\n       \
    \     p = p + 1;\n        }\n    }\n    return p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tfor(var i = Math.ceil(Math.sqrt(n));\
    \ i > 1; i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpji6zr_4j.js:8\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t       \
    \  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpji6zr_4j.js:8:12)\n\
    \    at test (/tmp/tmpji6zr_4j.js:19:20)\n    at Object.<anonymous> (/tmp/tmpji6zr_4j.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  if (is_prime(n)){return n;}\n  for\
    \ (let i = Math.ceil(Math.sqrt(n)); i >= 2; i--){\n    if (n % i === 0 && is_prime(i)){\n\
    \      return i;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpetyj4s58.js:7\n  if (is_prime(n)){return n;}\n  ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmpetyj4s58.js:7:3)\n\
    \    at test (/tmp/tmpetyj4s58.js:20:20)\n    at Object.<anonymous> (/tmp/tmpetyj4s58.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            n = n / i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n){\n\
    \        if (n % i == 0){\n            n = n / i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return n;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var largest = 0;\n  //We'll use this\
    \ to keep track of whether n has already been divided.\n  var divided = false;\n\
    \  //Starting at 2 and stopping when n is 1.\n  for(var i = 2; n != 1; i++){\n\
    \    //Trying to divide n by i.\n    if(n % i == 0){\n      //If that works, we've\
    \ found a prime factor.\n      divided = true;\n      //It's the largest so far.\n\
    \      largest = i;\n      //We want to keep dividing out the prime factor.\n\
    \      //But not keep trying to divide by the same factor.\n      while(n % i\
    \ == 0){\n        n = n / i;\n      }\n    }\n  }\n  //If we've already divided\
    \ n, then it's larger than 1,\n  //and we can return the largest prime factor.\n\
    \  if(divided){\n    return largest;\n  }\n  //Otherwise, n is a prime, so it's\
    \ its own largest prime factor.\n  else{\n    return n;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //get all prime factors of n\n  \
    \  let primeFactors = get_prime_factors(n);\n    //return the largest one\n  \
    \  return Math.max(...primeFactors);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpj654tji7.js:8\n    let primeFactors = get_prime_factors(n);\n \
    \                      ^\n\nReferenceError: get_prime_factors is not defined\n\
    \    at largest_prime_factor (/tmp/tmpj654tji7.js:8:24)\n    at test (/tmp/tmpj654tji7.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpj654tji7.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  let factors = get_factors(n);\n  factors.reverse();\n\
    \  console.log(factors);\n  let isPrime = function(num){\n    if(num === 2){\n\
    \      return true;\n    }\n    let factors = get_factors(num);\n    return factors.length\
    \ === 2 ? true : false;\n  }\n  for(let i = 0; i < factors.length; i++){\n   \
    \ if(isPrime(factors[i])){\n      return factors[i];\n    }\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpf_xvcot4.js:7\n  let factors = get_factors(n);\n              \
    \  ^\n\nReferenceError: get_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpf_xvcot4.js:7:17)\n    at test (/tmp/tmpf_xvcot4.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpf_xvcot4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822378
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime = 2;\n    var max = 1;\n\
    \    while(n > 1){\n        if(n % prime == 0){\n            max = prime;\n  \
    \          n = n / prime;\n        }\n        else{\n            prime = prime\
    \ + 1;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822378
