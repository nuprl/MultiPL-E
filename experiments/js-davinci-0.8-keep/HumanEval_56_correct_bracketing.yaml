name: HumanEval_56_correct_bracketing
language: js
prompt: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
  <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
  <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
  ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
  >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n\
  }\n\ntest();"
completions: ["    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"<\"){\n            count += 1;\n        }\n    \
    \    else if (brackets[i] == \">\"){\n            count -= 1;\n        }\n   \
    \     if (count < 0){\n            return false;\n        }\n    }\n    if (count\
    \ > 0){\n        return false;\n    }\n    return true;\n}\n\n", "    if(brackets\
    \ === null){\n        return false;\n    }\n    if(brackets.length % 2 !== 0){\n\
    \        return false;\n    }\n    var arr = brackets.split(\"\");\n    var count\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === \"<\"\
    ){\n            count++;\n        }else{\n            count--;\n        }\n  \
    \      if(count < 0){\n            return false;\n        }\n    }\n    if(count\
    \ === 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n",
  "\tif(brackets.length === 0){\n\t\treturn true;\n\t}\n\tif(brackets.length === 1){\n\
    \t\treturn false;\n\t}\n\tif(brackets[0] === '>'){\n\t\treturn false;\n\t}\n\t\
    if(brackets[brackets.length - 1] === '<'){\n\t\treturn false;\n\t}\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === '<'){\n\
    \t\t\tcount += 1;\n\t\t}\n\t\tif(brackets[i] === '>'){\n\t\t\tcount -= 1;\n\t\t\
    }\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count === 0){\n\t\
    \treturn true;\n\t}\n\treturn false;\n}\n", "  var i;\n  var j;\n  for (i = 0;\
    \ i < brackets.length; i += 1){\n    if (brackets[i] === \"<\"){\n      for (j\
    \ = i; j < brackets.length; j += 1){\n        if (brackets[j] === \">\"){\n  \
    \        break;\n        }\n      }\n      if (j === brackets.length){\n     \
    \   return false;\n      }\n    }\n  }\n  return true;\n}", "  var brace = 0;\n\
    \  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"<\")\
    \ {\n      brace += 1;\n    }\n    else if (brackets[i] == \">\") {\n      brace\
    \ -= 1;\n    }\n    if (brace < 0) {\n      return false;\n    }\n  }\n  if (brace\
    \ == 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n\n", "\n\
    }\n", "    var counter = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"<\"){\n            counter += 1;\n        } else\
    \ if (brackets[i] == \">\"){\n            counter -= 1;\n        }\n        if\
    \ (counter < 0){\n            return false;\n        }\n    }\n    if (counter\
    \ == 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"<\"){\n            open++;\n        }\n        else if (brackets[i] ==\
    \ \">\"){\n            open--;\n        }\n        if (open < 0){\n          \
    \  return false;\n        }\n    }\n    if (open == 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "\tvar opening = [];\n\t\
    for (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"<\") {\n\
    \t\t\topening.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (opening.length\
    \ != 0) {\n\t\t\t\topening.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (opening.length == 0) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\n", "    var correct=false;\n    var open=brackets.split(\"\
    <\").length-1;\n    var close=brackets.split(\">\").length-1;\n    if(open==close){\n\
    \        correct=true;\n    }\n    return correct;\n}", "\tif(brackets.length\
    \ == 0) return false;\n\tif(brackets.length == 1) return false;\n\tif(brackets.length\
    \ == 2) {\n\t\tif(brackets[0] == \"<\" && brackets[1] == \">\") return true;\n\
    \t\telse return false;\n\t}\n\tvar c = 0;\n\tvar d = 0;\n\tvar o = [];\n\tvar\
    \ c = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] ==\
    \ \"<\"){\n\t\t\to.push(i);\n\t\t}\n\t\tif(brackets[i] == \">\"){\n\t\t\tc.push(i);\n\
    \t\t}\n\t}\n\tif(o.length != c.length) return false;\n\twhile(o.length != 0){\n\
    \t\tif(o[0] > c[0]) return false;\n\t\to.shift();\n\t\tc.shift();\n\t}\n\treturn\
    \ true;\n}", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"<\"){\n            count++;\n        }\n       \
    \ else if (brackets[i] == \">\"){\n            count--;\n        }\n        if\
    \ (count < 0){\n            return false;\n        }\n    }\n    if (count ==\
    \ 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    // create a counter that increment if it's \"<\" and decrement if it's\
    \ \">\"\n    var counter = 0;\n    // iterate through the string\n    for (var\
    \ i = 0; i < brackets.length; i++){\n        // if bracket is \"<\" increment\n\
    \        if (brackets[i] === \"<\"){\n            counter++;\n        } else {\n\
    \            // if bracket is \">\" decrement\n            counter--;\n      \
    \  }\n        // if counter gets negative, there is a \">\" without a \"<\" before\
    \ it\n        if (counter < 0){\n            return false;\n        }\n    }\n\
    \    // if all the brackets have corresponding pairs, the counter will be 0 at\
    \ the end.\n    return counter === 0;\n}\n", "  var count = 0;\n  for (var i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++;\n\
    \    }\n    else if (brackets[i] === \">\") {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  if (count === 0) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\n", "  var counter = 0;\n  for (var\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"<\") {\n      counter\
    \ += 1;\n    }\n    else if (brackets[i] == \">\") {\n      counter -= 1;\n  \
    \  }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  if (counter !=\
    \ 0) {\n    return false;\n  }\n  return true;\n}\n", "    var opening = 0;\n\
    \    var closing = 0;\n    for (var i = 0; i < brackets.length; i++) {\n     \
    \   if (brackets[i] == \"<\") {\n            opening += 1;\n        }\n      \
    \  else if (brackets[i] == \">\") {\n            closing += 1;\n        }\n  \
    \  }\n    if (opening == closing) {\n        return true;\n    }\n    else {\n\
    \        return false;\n    }\n}\n", "  //Assume brackets is a string of \"<\"\
    \ and \">\"\n  //Create a counter to count how many left brackets there are.\n\
    \  //Loop over the brackets\n    //If we hit a \"<\", increment the counter.\n\
    \    //If we hit a \">\", decrement the counter.\n    //If we hit a \">\" and\
    \ the counter is 0, return False.\n  //If the counter is not 0, return False.\n\
    \  //If the counter is 0, return True.\n  var counter = 0;\n  for(var i = 0; i\
    \ < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      counter += 1;\n\
    \    } else if(brackets[i] === \">\"){\n      counter -= 1;\n      if(counter\
    \ < 0){\n        return false;\n      }\n    }\n  }\n  if(counter === 0){\n  \
    \  return true;\n  } else {\n    return false;\n  }\n}\n", "\tvar stack = [];\n\
    \tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"<\"){\n\t\
    \t\tstack.push(brackets[i]);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length === 0){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\tif(stack.length\
    \ !== 0){\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "  var position = 0;\n\
    \  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n\
    \    if (bracket === \"<\") {\n      position += 1;\n    } else if (bracket ===\
    \ \">\") {\n      position -= 1;\n    }\n    if (position < 0) {\n      return\
    \ false;\n    }\n  }\n  return position === 0;\n}\n", "\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
