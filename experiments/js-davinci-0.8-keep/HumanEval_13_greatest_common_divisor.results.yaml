language: js
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  if (a == 0) return b;\n  if (b == 0) return a;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n\twhile (a !== b){\n\t\tif (a > b){\n\t\t\ta = a - b;\n\t\t}\n\t\telse{\n\
    \t\t\tb = b - a;\n\t\t}\n\t}\n\treturn a;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n    if (a % b === 0) {\n        return b;\n    }\n    else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n\tif(b == 0){\n\t\treturn a;\n\t}\n\telse{\n\t\treturn greatest_common_divisor(b,\
    \ a % b);\n\t}\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  //...\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n1\n    at test (/tmp/tmposoxmzt8.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmposoxmzt8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  if(b==0){\n    return a;\n  }\n  else{\n    return greatest_common_divisor(b,a%b);\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n    var divisor = 2,\n        greatestDivisor = 1;\n\n    //if u pass a\
    \ -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n    \
    \    return 1;\n\n    while(a >= divisor && b >= divisor){\n        if(a %divisor\
    \ == 0 && b% divisor ==0){\n            greatestDivisor = divisor;\n        }\n\
    \        divisor++;\n    }\n    return greatestDivisor;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977093
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n    // make sure a is greater than b\n    if (a < b){\n        let t =\
    \ a;\n        a = b;\n        b = t;\n    }\n    // compute remainder by modulus,\
    \ subtract when b > 0\n    let r = a % b;\n    while (r > 0){\n        a = b;\n\
    \        b = r;\n        r = a % b;\n    }\n    return b;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n\tvar result;\n\tvar arr = [];\n\tfor(var i = 1; i <= a; i++){\n\t\tif(a\
    \ % i === 0){\n\t\t\tarr.push(i);\n\t\t}\n\t}\n\tfor(var j = 0; j < arr.length;\
    \ j++){\n\t\tif(b % arr[j] === 0){\n\t\t\tresult = arr[j];\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  var gcd = 1;\n  for (var i = 2; i <= Math.min(a, b); i++) {\n    if (a\
    \ % i == 0 && b % i == 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n    var divisor = 2, \n        greatestDivisor = 1;\n\n    //if u pass\
    \ a -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n  \
    \     return 1;\n    \n    while(a >= divisor && b >= divisor){\n     if(a %divisor\
    \ == 0 && b% divisor ==0){\n            greatestDivisor = divisor;      \n   \
    \     }\n     divisor++;\n    }\n    return greatestDivisor;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n    let r;\n    while (b != 0){\n        r = a % b;\n        a = b;\n \
    \       b = r;\n    }\n    return a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n\tif(!b){\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b, a %\
    \ b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n1\n    at test (/tmp/tmpge5bwe_r.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpge5bwe_r.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  while (a !== b) {\n      if (a > b) {\n          a = a - b;\n      }\
    \ else {\n          b = b - a;\n      }\n  }\n  return a;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n    if(b===0){\n        return a;\n    }else{\n        return greatest_common_divisor(b,\
    \ a%b);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n\tif (a<b){\n\t\tvar tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tvar r =\
    \ a % b;\n\tif (r==0){\n\t\treturn b;\n\t}\n\treturn greatest_common_divisor(b,\
    \ r);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  var divisor = 2, \n      greatestDivisor = 1;\n\n  //if u pass a -ve\
    \ number this will not work. fix it dude!!\n  if (a < 2 || b < 2)\n     return\
    \ 1;\n  \n  while(a >= divisor && b >= divisor){\n   if(a %divisor == 0 && b%\
    \ divisor ==0){\n      greatestDivisor = divisor;      \n    }\n   divisor++;\n\
    \  }\n  return greatestDivisor;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977093
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  var arr = [a, b];\n  var num = 1;\n  var divisor = 1;\n  while(divisor\
    \ <= Math.min(...arr)){\n    if(a % divisor === 0 && b % divisor === 0){\n   \
    \   num = divisor;\n    }\n    divisor++;\n  }\n  return num;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
    \ b){\n  if(a < 0 || b < 0){\n    return -1;\n  }\n  else if(a < b){\n    if(a\
    \ === 0){\n      return b;\n    }\n    return greatest_common_divisor(b%a, a);\n\
    \  }\n  else if(a > b){\n    if(b === 0){\n      return a;\n    }\n    return\
    \ greatest_common_divisor(a%b, b);\n  }\n  else{\n    return a;\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977114
