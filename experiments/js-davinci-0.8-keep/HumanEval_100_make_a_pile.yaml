name: HumanEval_100_make_a_pile
language: js
prompt: "//Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in a list, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunction make_a_pile(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4,\
  \ 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6,\
  \ 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18,\
  \ 20, 22]);\n}\n\ntest();"
completions: ["    var arr = [];\n    for(var i = 0; i < n; i++){\n        if(i ===\
    \ 0){\n            arr.push(n);\n        }\n        else if(i % 2 !== 0){\n  \
    \          arr.push(arr[i-1] + 2);\n        }\n        else{\n            arr.push(arr[i-1]\
    \ + 1);\n        }\n    }\n    return arr;\n}", "    let level = 1;\n    let current_n\
    \ = n;\n    let result = [];\n    while(n > 0){\n        result.push(current_n);\n\
    \        if(current_n % 2 === 0){\n            current_n += 2;\n        } else\
    \ {\n            current_n += 1;\n        }\n        n--;\n    }\n    return result;\n\
    }\n", "  var arr = [n];\n  var s = 0;\n  while(n >= 3){\n    if(n % 2 == 0){\n\
    \      s = n + 2;\n    }\n    else{\n      s = n + 1;\n    }\n    arr.push(s);\n\
    \    n = s;\n  }\n  return arr;\n}", "    var level = 1;\n    var stones = [];\n\
    \    stones.push(n);\n    while(level<n){\n        if(stones[level-1]%2==0){\n\
    \            stones.push(stones[level-1]+2);\n        }\n        else{\n     \
    \       stones.push(stones[level-1]+1);\n        }\n        level++;\n    }\n\
    \    return stones;\n}", "    let result = [];\n    while(n>0){\n        result.push(n);\n\
    \        if(n%2===0){\n            n = n-1;\n        }else{\n            n = n-2;\n\
    \        }\n    }\n    return result;\n}\n", "    // Your code here\n    var result\
    \ = [];\n    var count = n;\n    for(var i = 0; i < n; i++){\n        if(count\
    \ % 2 == 0){\n            result.push(count)\n            count = count + 2;\n\
    \        }else{\n            result.push(count)\n            count = count + 1;\n\
    \        }\n    }\n    return result;\n}\n", "  var stones = [];\n  for (var i\
    \ = 0; i < n; i++) {\n    var levels = [i + 1];\n    stones.push(levels);\n  }\n\
    \  return stones;\n}", "    if(n===1){\n        return [1];\n    }\n    if(n%2===0){\n\
    \        return [n].concat(make_a_pile(n+1));\n    }\n    return [n].concat(make_a_pile(n+2));\n\
    }", "    var listOfLevels = [];\n    for (var i = 0; i < n; i++){\n        if\
    \ (i == 0){\n            listOfLevels.push(n);\n        }\n        else if (i\
    \ % 2 == 0){\n            listOfLevels.push(listOfLevels[i-1] + 2);\n        }\n\
    \        else{\n            listOfLevels.push(listOfLevels[i-1] + 1);\n      \
    \  }\n    }\n    return listOfLevels;\n}", "  var arr = [];\n  arr.push(n);\n\
    \  for(var i = 1; i <= n; i++){\n    if(n % 2 === 0){\n      arr.push(n + i);\n\
    \    } else {\n      arr.push(n + i + 1);\n    }\n  }\n  return arr;\n}", "  const\
    \ result = [n];\n  for (let i = 0; i < n - 1; i++) {\n    result.push(result[i]\
    \ % 2 ? result[i] + 2 : result[i] + 1);\n  }\n  return result;\n}\n", "    if(n<1)\n\
    \        return [];\n    let pile = [n];\n    while(pile[pile.length-1]>0){\n\
    \        let last = pile[pile.length-1];\n        if(last%2===0)\n           \
    \ pile.push(last-1);\n        else\n            pile.push(last-2);\n    }\n  \
    \  return pile.slice(0,pile.length-1);\n}", "  const arr = [n];\n  while(arr[arr.length-1]\
    \ > 0){\n    if(arr[arr.length-1] % 2 === 0){\n      arr.push(arr[arr.length-1]\
    \ - 1);\n    } else {\n      arr.push(arr[arr.length-1] - 2);\n    }\n  }\n  return\
    \ arr.slice(0, arr.length-1);\n}\n", "  var result = [n];\n  for(var i = 1; i\
    \ < n; i++){\n    if(n % 2 == 0){\n      n += 2;\n    }\n    else{\n      n +=\
    \ 1;\n    }\n    result.push(n);\n  }\n  return result;\n}\n", "  const stones\
    \ = [n];\n  while (stones[stones.length - 1] !== 1) {\n    if (stones[stones.length\
    \ - 1] % 2 === 0) {\n      stones.push(stones[stones.length - 1] - 1);\n    }\
    \ else {\n      stones.push(stones[stones.length - 1] - 2);\n    }\n  }\n  return\
    \ stones;\n}", "    let arr = [n];\n    for(let i = 1; i < n; i++){\n        if(arr[i-1]\
    \ % 2 === 0){\n            arr.push(arr[i-1] + 2);\n        }else{\n         \
    \   arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}", "    //Fill\
    \ this in.\n    let ret = [];\n    for(let i = 0; i < n; i++){\n        if(n %\
    \ 2 === 0){\n            ret.push(n+1);\n        }\n        else{\n          \
    \  ret.push(n);\n        }\n        n--;\n    }\n    return ret;\n}", "    let\
    \ i=1;\n    let arr=[];\n    while(i<=n){\n        if(i%2==0){\n            arr.push(i+1);\n\
    \        }\n        else if(i%2!=0){\n            arr.push(i+2);\n        }\n\
    \        i++;\n    }\n    console.log(arr);\n}\nmake_a_pile(3);", "    let arr\
    \ = [n]\n    while(n > 0){\n        n = next(n)\n        arr.push(n)\n    }\n\
    \    return arr.slice(0, arr.length - 1)\n}\n", "    let arr = [n];\n    for(let\
    \ i = 1; i < n; i++){\n        if(arr[i-1] % 2 == 0){\n            arr.push(arr[i-1]\
    \ + 2);\n        }\n        else{\n            arr.push(arr[i-1] + 1);\n     \
    \   }\n    }\n    return arr;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
