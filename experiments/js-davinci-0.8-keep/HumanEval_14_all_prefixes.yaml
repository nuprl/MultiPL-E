name: HumanEval_14_all_prefixes
language: js
prompt: "//Return list of all prefixes from shortest to longest of the input string\n\
  // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
  asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
  WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
completions: ["  var list = [];\n  for (var i = 1; i <= string.length; i++){\n   \
    \ list.push(string.slice(0, i));\n  }\n  return list;\n}\n", "    var outList\
    \ = [];\n    for (var i = 1; i <= string.length; i++){\n        outList.push(string.slice(0,i));\n\
    \    }\n    return outList;\n}\n", "  var prefixes = [];\n  for (var i = 0; i\
    \ < string.length; i++){\n    prefixes.push(string.slice(0,i+1));\n  }\n  return\
    \ prefixes;\n}\n", "    //First, create a list to store the results\n    var prefixes\
    \ = [];\n    //Then, loop through the input string\n    for (var i = 0; i < string.length;\
    \ i++){\n        //Add to the prefixes list each character and each pair of characters\n\
    \        prefixes.push(string.slice(0, i + 1));\n    }\n    //Finally, return\
    \ the list of all prefixes\n    return prefixes;\n}\n", "\tvar prefixes = [];\n\
    \tfor (var i = 1; i <= string.length; i++){\n\t\tprefixes.push(string.slice(0,\
    \ i));\n\t}\n\treturn prefixes;\n}\n", "    var result = [];\n    for (i = 0;\
    \ i < string.length; i++){\n        result.push(string.slice(0, i+1));\n    }\n\
    \    return result;\n}\n", "  let prefixes = [];\n  for (let i = 0; i < string.length;\
    \ i++){\n    prefixes.push(string.slice(0, i+1));\n  }\n  return prefixes;\n}",
  "    return _.range(1, string.length + 1).map(function(num){\n        return string.slice(0,\
    \ num);\n    });\n}\n", "    // return a list of all prefixes of the input string\
    \ shortest to longest\n    var list_prefixes = [];\n    for (var x = 0; x < string.length;\
    \ x++){\n        list_prefixes.push(string.slice(0,x+1));\n    }\n    return list_prefixes;\n\
    }\n", "    var result = [];\n    for (var i = 0; i < string.length; i++) {\n \
    \     result.push(string.slice(0, i + 1));\n    }\n    return result;\n}\n", " \
    \   var prefixes = [];\n    for (var i = 1; i <= string.length; i++){\n      \
    \  prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "  var\
    \ myPrefixes = []\n  var j = 1\n  for (var i = 0; i < string.length; i++){\n \
    \   myPrefixes.push(string.slice(0, j))\n    j++\n  }\n  return myPrefixes\n}\n",
  "  var result = [];\n  for (var i = 1; i < string.length+1; i++){\n    result.push(string.slice(0,i));\n\
    \  }\n  return result;\n}\n", "    var results = [];\n    for (var i = 0; i <\
    \ string.length; i++) {\n        results.push(string.slice(0, i + 1));\n    }\n\
    \    return results;\n}\n", "    var all_pref = [];\n    for (var i = 0; i < string.length;\
    \ i++){\n        all_pref.push(string.slice(0,i+1));\n    }\n    return all_pref;\n\
    }\n", "    var list = [];\n    for (var i = 1; i <= string.length; i++){\n   \
    \     list.push(string.slice(0, i));\n    }\n    return list;\n}\n", "    var\
    \ result = [];\n    for (var i = 0; i < string.length; i++){\n        result.push(string.slice(0,\
    \ i+1));\n    }\n    return result;\n}\n", "    let prefixes = [];\n    for (let\
    \ i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n\
    \    }\n    return prefixes;\n}\n", "    return string.split('').map(function(item,i,array){\n\
    \        return array.slice(0, i+1).join('');\n    });\n}\n", "\tvar prefixes\
    \ = [];\n\tfor (var i = 0; i < string.length; i++){\n\t\tprefixes.push(string.slice(0,\
    \ i+1));\n\t}\n\treturn prefixes;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
