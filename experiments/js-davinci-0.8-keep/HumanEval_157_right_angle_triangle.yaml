name: HumanEval_157_right_angle_triangle
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunction right_angle_triangle(a, b, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
  \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
completions: ["  let a1 = a*a;\n  let b1 = b*b;\n  let c1 = c*c;\n  if (c1 == a1 +\
    \ b1 || b1 == a1 + c1 || a1 == b1 + c1){\n    return true;\n  }\n  return false;\n\
    }", "\t//your code here\n\treturn false;\n}\n", "  let x = Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n  let y = Math.pow(c, 2);\n  if (x == y) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  // Your code here.\n}\n", "    if(a > b\
    \ && a > c){\n        return (a * a == (b * b) + (c * c));\n    }\n    else if(b\
    \ > a && b > c){\n        return (b * b == (a * a) + (c * c));\n    }\n    else\
    \ if(c > a && c > b){\n        return (c * c == (a * a) + (b * b));\n    }\n \
    \   else{\n        return false;\n    }\n}", "\tlet max = Math.max(a, b, c);\n\
    \tlet min = Math.min(a, b, c);\n\tlet mid = a + b + c - max - min;\n\treturn max\
    \ * max === min * min + mid * mid;\n}", "    if (is_pythagoras(a, b, c)){\n  \
    \      return true;\n    } else {\n        return false;\n    }\n}\n", "    var\
    \ hyp = Math.max(a, b, c);\n    var opp = 0;\n    var adj = 0;\n    if (hyp ===\
    \ a) {\n        opp = b;\n        adj = c;\n    } else if (hyp === b) {\n    \
    \    opp = a;\n        adj = c;\n    } else {\n        opp = a;\n        adj =\
    \ b;\n    }\n    if (hyp * hyp === opp * opp + adj * adj) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "  if(a>b && a>c){\n    return\
    \ (a*a == b*b + c*c);\n  }\n  else if(b>a && b>c){\n    return (b*b == a*a + c*c);\n\
    \  }\n  else if(c>a && c>b){\n    return (c*c == a*a + b*b);\n  }\n}\n", "   \
    \ if ((a*a) + (b*b) == (c*c)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let hypotenuse = Math.max(a, b, c);\n    let sum =\
    \ a + b + c;\n    let angle = (sum - hypotenuse) * (sum - hypotenuse);\n    let\
    \ cSquare = hypotenuse * hypotenuse;\n    if(angle === cSquare){\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}", "    let x = [a, b, c];\n\
    \    x.sort((a, b) => a - b);\n    return Math.pow(x[0], 2) + Math.pow(x[1], 2)\
    \ === Math.pow(x[2], 2);\n}", "    var hypotenuse = Math.max(a, b, c);\n    var\
    \ sumOfSquaresOfOtherSides = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)\
    \ - Math.pow(hypotenuse, 2);\n    return Math.pow(hypotenuse, 2) == sumOfSquaresOfOtherSides;\n\
    }", "    var ab = Math.pow(a, 2);\n    var bc = Math.pow(b, 2);\n    var ac =\
    \ Math.pow(c, 2);\n    var result = ab + bc;\n    if(result == ac){\n        return\
    \ true;\n    }else{\n        return false;\n    }\n}\n", "    // your code here\n\
    \    //var a = 3, b = 4, c = 5;\n    if(a <= 0 || b <= 0 || c <= 0){\n      return\
    \ false;\n    }\n    var aSq = Math.pow(a, 2);\n    var bSq = Math.pow(b, 2);\n\
    \    var cSq = Math.pow(c, 2);\n    if(aSq + bSq == cSq || bSq + cSq == aSq ||\
    \ cSq + aSq == bSq){\n      return true;\n    }\n    return false;\n}\n", "  \
    \  // Code here\n}\n", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c,\
    \ 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2) || Math.pow(a, 2) +\
    \ Math.pow(c, 2) === Math.pow(b, 2)\n}", "\tif(Math.pow(a, 2) + Math.pow(b, 2)\
    \ == Math.pow(c, 2)){\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "  if(a >\
    \ b && a > c){\n    return a*a == b*b + c*c;\n  }\n  if(b > a && b > c){\n   \
    \ return b*b == a*a + c*c;\n  }\n  if(c > a && c > b){\n    return c*c == a*a\
    \ + b*b;\n  }\n}\n", "    let cSquare = c * c;\n    let aSquare = a * a;\n   \
    \ let bSquare = b * b;\n    if (cSquare == aSquare + bSquare){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
