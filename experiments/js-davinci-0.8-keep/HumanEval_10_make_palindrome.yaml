name: HumanEval_10_make_palindrome
language: js
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n\
  // 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunction make_palindrome(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"\
  xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\n\
  test();"
completions: ["    var left = string.length;\n    var right = string.length;\n   \
    \ var palindrome = \"\";\n    for(var i = 1; i <= string.length; i++){\n     \
    \   if(is_palindrome(string.substring(i,string.length))){\n            left =\
    \ i;\n            break;\n        }\n    }\n    for(var i = string.length - 1;\
    \ i >= 0; i--){\n        if(is_palindrome(string.substring(0,i))){\n         \
    \   right = i;\n            break;\n        }\n    }\n    if(left == string.length){\n\
    \        palindrome = string;\n    }\n    else if(right == 0){\n        palindrome\
    \ = reverse(string);\n    }\n    else{\n        palindrome = string.substring(0,right)\
    \ + reverse(string.substring(left,string.length));\n    }\n    return palindrome;\n\
    }", "  // make the string palindromic - a string that's the same forwards and\
    \ backwards\n  if(!string.length) return string;\n\n  // Find the longest palindromic\
    \ postfix.\n  var palindrome_reversed = '';\n  for(var i = string.length - 1;\
    \ i >= 0; i--){\n    // as we decrease i, test if the string ends in a palindrome\n\
    \    if(is_palindrome(string.substring(i))){\n      // we found a palindrome\n\
    \      palindrome_reversed = string.substring(i).split('').reverse().join('');\n\
    \      break;\n    }\n  }\n\n  // return the string with a reversed prefix appended\
    \ to the end\n  return string + palindrome_reversed;\n}\n", "    var longest_palindrome\
    \ = longest_palindrome_postfix(string);\n    var palindrome_prefix = string.substring(0,\
    \ string.length - longest_palindrome.length);\n    return string + reverse(palindrome_prefix);\n\
    }\n", "    var reverse = string.split('').reverse().join(''),\n        palindrome_postfix_length\
    \ = 0;\n    while(palindrome_postfix_length < string.length){\n        if(string.substr(0,\
    \ string.length - palindrome_postfix_length) === reverse.substr(palindrome_postfix_length)){\n\
    \            break;\n        }\n        palindrome_postfix_length++;\n    }\n\
    \    return string + reverse.substr(palindrome_postfix_length);\n}\n", "    var\
    \ length = string.length;\n    if(length < 2){\n        return string;\n    }\n\
    \    if(string === string.split('').reverse().join('')){\n        return string;\n\
    \    }\n    var i;\n    var palindrome = [];\n    for(i = 0; i < length; i++){\n\
    \        palindrome.push(string[i]);\n        var reversed = palindrome.slice(0).reverse();\n\
    \        var joined = palindrome.concat(reversed);\n        var joined_string\
    \ = joined.join('');\n        if(joined_string === joined_string.split('').reverse().join('')){\n\
    \            return joined_string;\n        }\n    }\n}\n", "    string = string.toLowerCase();\n\
    \    if(!is_palindrome(string)){\n        return string + reverse(string.substring(0,\
    \ longest_postfix_palindrome(string)+1));\n    }\n    return string;\n}\n", " \
    \   var new_string = \"\";\n    var i = string.length;\n    var pal_length = 0;\n\
    \    for(i; i>0; i--){\n        for(j=0; j<i; j++){\n            if(string[j]\
    \ === string[i-1]){\n                pal_length += 1;\n            }\n       \
    \     else {\n                break;\n            }\n        }\n        if(pal_length\
    \ === i){\n            break;\n        }\n        else {\n            pal_length\
    \ = 0;\n        }\n    }\n    new_string = string + string.slice(pal_length).split(\"\
    \").reverse().join(\"\");\n    return new_string;\n}", "    //Find the first half\
    \ of the palindrome.\n    if(string == \"\"){\n        return \"\";\n    }\n \
    \   var palindrome = string;\n    var index_at_palindrome = 0;\n    var found_palindrome\
    \ = false;\n    while(!found_palindrome){\n        var one_half_of_palindrome\
    \ = palindrome.substring(0,index_at_palindrome);\n        var reverse_of_one_half_of_palindrome\
    \ = reverse(one_half_of_palindrome);\n        if(palindrome.endsWith(reverse_of_one_half_of_palindrome)){\n\
    \            found_palindrome = true;\n        }\n        else{\n            index_at_palindrome++;\n\
    \        }\n    }\n    var string_before_palindrome = string.substring(0,index_at_palindrome);\n\
    \    var reverse_of_string_before_palindrome = reverse(string_before_palindrome);\n\
    \    return string + reverse_of_string_before_palindrome;\n}\n", "  if (string.length\
    \ < 2) return string\n  const last_index = string.length - 1\n  for (let i = string.length\
    \ - 1; i >= 0; i--){\n    let reverse_index = last_index - i\n    if (string[i]\
    \ === string[reverse_index]) {\n      if (is_palindrome(string.slice(0, i))) {\n\
    \        let prefix = string.slice(0, reverse_index)\n        return string +\
    \ prefix.split('').reverse().join('')\n      }\n    }\n  }\n  return string\n\
    }\n", "    // sanity checks\n    if (string.length == 0){\n        return '';\n\
    \    }\n\n    // search for the palindromic suffix\n    var suffix = string.length;\n\
    \    while (suffix > 0 && string.substring(0, suffix) != string.substring(string.length\
    \ - suffix, string.length).split('').reverse().join('')){\n        suffix -= 1;\n\
    \    }\n\n    // compute the string prefix that comes before the palindromic suffix\n\
    \    var prefix = string.substring(0, string.length - suffix);\n\n    // reverse\
    \ the string prefix\n    prefix = prefix.split('').reverse().join('');\n\n   \
    \ // concatenate the string prefix and the original string\n    return prefix\
    \ + string;\n}\n", "    var palindrome_end = 0;\n    var index = 0;\n    var copy\
    \ = string;\n    var palindrome = \"\";\n    for(var i = 1; i < string.length;\
    \ i++){\n        //If string[i] is equal to string[0]\n        if(string[i] ==\
    \ string[0]){\n            //Concatenate both characters to a new string\n   \
    \         var new_string = string[0] + string[i];\n            //Check if new_string\
    \ is a palindrome\n            if(check_palindrome(new_string)){\n           \
    \     //If it is a palindrome, replace old palindrome_end with new one.\n    \
    \            palindrome_end = i;\n            }\n        }\n    }\n    //Keep\
    \ adding characters to palindrome to prepare it for final return.\n    while(index\
    \ < string.length){\n        if(index < palindrome_end){\n            palindrome\
    \ += string[index];\n        }else{\n            palindrome += string[string.length\
    \ - 1 - index];\n        }\n        index += 1;\n    }\n    return palindrome;\n\
    }\n", "    var palindrome_postfix = get_palindrome_postfix(string);\n    var prefix\
    \ = string.substring(0,string.length-palindrome_postfix.length);\n    return string\
    \ + reverse(prefix);\n}\n", "    if(string === ''){\n        return '';\n    }\n\
    \    var palindrome = string;\n    while(true){\n        if(is_palindrome(palindrome)){\n\
    \            break;\n        }\n        palindrome = palindrome.slice(0, palindrome.length\
    \ - 1);\n    }\n    var prefix = string.slice(palindrome.length, string.length);\n\
    \    var reverse_prefix = prefix.split('').reverse().join('');\n    return string\
    \ + reverse_prefix;\n}\n", "  // Check if the supplied string is a palindrome.\n\
    \  if (is_palindrome(string)){\n    return string;\n  }\n  // Find the longest\
    \ suffix that is a palindrome.\n  var palindrome_length = 0;\n  var last_index\
    \ = string.length - 1;\n  for (var i = 0; i < last_index; i++){\n    var string_length\
    \ = last_index - i + 1;\n    var prefix = string.substring(0, string_length);\n\
    \    if (is_palindrome(prefix)){\n      palindrome_length = string_length;\n \
    \     break;\n    }\n  }\n  // Append to the end of the string reverse of the\
    \ prefix that comes before the palindromic suffix.\n  var prefix = string.substring(0,\
    \ last_index - palindrome_length + 1);\n  var reverse_prefix = reverse(prefix);\n\
    \  var result = string + reverse_prefix;\n  return result;\n}\n", "\tfunction\
    \ is_palindrome(string){\n\t\tvar is_palindrome = true;\n\t\tfor(var i = 0; i\
    \ < string.length/2; i++){\n\t\t\tif(string[i] != string[string.length - 1 - i]){\n\
    \t\t\t\tis_palindrome = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn is_palindrome;\n\
    \t}\n\tvar suffix = \"\";\n\tfor(var i = string.length; i >= 0; i--){\n\t\tif(is_palindrome(string.substring(i))){\n\
    \t\t\tsuffix = string.substring(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tvar prefix =\
    \ string.substring(0, string.length - suffix.length);\n\tvar result = \"\";\n\t\
    for(var i = prefix.length - 1; i >= 0; i--){\n\t\tresult += prefix[i];\n\t}\n\t\
    return string + result;\n}\n", "  if(string == \"\")\n    return \"\";\n  string\
    \ += '^';\n  var first_half = string;\n  var second_half = string.split(\"\").reverse().join(\"\
    \");\n  var z = compute_z(first_half+second_half);\n  var end = find_max(z);\n\
    \  var prefix = first_half.slice(0,first_half.length-end-1);\n  return first_half\
    \ + prefix.split(\"\").reverse().join(\"\");\n}\n", "    var reversed_string =\
    \ string.split('').reverse().join('');\n    var min_length = string.length;\n\
    \    var prefix = '';\n    var suffix = '';\n    var longest_match = 0;\n    for\
    \ (var i = 0; i < min_length; i++) {\n        var substring = string.substring(0,\
    \ min_length - i);\n        if (reversed_string.indexOf(substring) === 0) {\n\
    \            longest_match = substring.length;\n            suffix = substring;\n\
    \            prefix = string.substring(longest_match);\n            break;\n \
    \       }\n    }\n    return prefix + suffix + reversed_string.substring(longest_match);\n\
    }\n", "    var tstring = string.substring(0, string.length/2);\n    var rtstring\
    \ = tstring.split(\"\").reverse().join(\"\");\n    var suffix = string.substring(tstring.length,\
    \ string.length);\n    var palindrome = string + rtstring;\n    if (suffix ==\
    \ rtstring) {\n        return palindrome;\n    }\n    for (var i = 0; i < tstring.length;\
    \ i++) {\n        var tword = tstring.substring(0, tstring.length - i);\n    \
    \    if (tword == rtstring.substring(i, rtstring.length)) {\n            return\
    \ string + rtstring.substring(0, i) + rtstring;\n        }\n    }\n    return\
    \ palindrome;\n}\n", "    var longest_palindrome_postfix = longest_palindrome_postfix(string);\n\
    \    return string + reverse(string.substring(0, string.length - longest_palindrome_postfix.length));\n\
    }\n", "  var longest = find_largest_palindrome(string)\n  var prefix = string.substring(0,\
    \ longest.start)\n  return prefix + string + reverse_string(prefix)\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
