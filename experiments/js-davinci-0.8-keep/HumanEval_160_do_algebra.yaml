name: HumanEval_160_do_algebra
language: js
prompt: "//Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n// the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ list is equal to the length of operand list minus one.\n// Operand is a list of\
  \ of non-negative integers.\n// Operator list has at least one operator, and operand\
  \ list has at least two operands.\nfunction do_algebra(operator, operand){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
  \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
  \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
completions: ["    var result = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ result += operand[i+1];\n                break;\n            case '-':\n   \
    \             result -= operand[i+1];\n                break;\n            case\
    \ '*':\n                result *= operand[i+1];\n                break;\n    \
    \        case '//':\n                result = Math.floor(result / operand[i+1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}", "    let x = operand[0];\n\
    \    for(let i = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n\
    \            x += operand[i+1];\n        }else if(operator[i] == '-'){\n     \
    \       x -= operand[i+1];\n        }else if(operator[i] == '*'){\n          \
    \  x *= operand[i+1];\n        }else if(operator[i] == '//'){\n            x =\
    \ Math.floor(x / operand[i+1]);\n        }else if(operator[i] == '**'){\n    \
    \        x = Math.pow(x, operand[i+1]);\n        }\n    }\n    return x;\n}\n",
  "    let result = '';\n    operand.forEach((e, i) => {\n        result += `${e}${operator[i]\
    \ ? operator[i] : ''}`;\n    });\n    return eval(result);\n}", "    let result\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i+1];\n            \
    \    break;\n            case '-':\n                result -= operand[i+1];\n\
    \                break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}\n", "    var arr = []\n    for(var i = 0;\
    \ i < operator.length; i++){\n        if(operator[i] == '//'){\n            arr.push(Math.floor(operand[i+1]\
    \ / operand[i]))\n        }\n        else if(operator[i] == '**'){\n         \
    \   arr.push(Math.pow(operand[i], operand[i+1]))\n        }\n        else{\n \
    \           arr.push(operator[i], operand[i+1])\n        }\n    }\n    return\
    \ eval(arr.join(''))\n}\n", "    let result = 0;\n    for(let i = 0; i < operator.length;\
    \ i++){\n        if(i === 0){\n            if(operator[i] === '+'){\n        \
    \        result = operand[i] + operand[i+1];\n            }else if(operator[i]\
    \ === '-'){\n                result = operand[i] - operand[i+1];\n           \
    \ }else if(operator[i] === '*'){\n                result = operand[i] * operand[i+1];\n\
    \            }else if(operator[i] === '//'){\n                result = operand[i]\
    \ / operand[i+1];\n            }else if(operator[i] === '**'){\n             \
    \   result = operand[i] ** operand[i+1];\n            }\n        }else{\n    \
    \        if(operator[i] === '+'){\n                result += operand[i+1];\n \
    \           }else if(operator[i] === '-'){\n                result -= operand[i+1];\n\
    \            }else if(operator[i] === '*'){\n                result *= operand[i+1];\n\
    \            }else if(operator[i] === '//'){\n                result /= operand[i+1];\n\
    \            }else if(operator[i] === '**'){\n                result **= operand[i+1];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "  // Your code here\n\
    \  var result = operand[0];\n  for(var i = 0; i < operator.length; i++){\n   \
    \ if(operator[i] == '+'){\n      result += operand[i+1];\n    }\n    else if(operator[i]\
    \ == '-'){\n      result -= operand[i+1];\n    }\n    else if(operator[i] == '*'){\n\
    \      result *= operand[i+1];\n    }\n    else if(operator[i] == '//'){\n   \
    \   result = Math.floor(result / operand[i+1]);\n    }\n    else if(operator[i]\
    \ == '**'){\n      result = Math.pow(result, operand[i+1]);\n    }\n  }\n  return\
    \ result;\n}\n", "    let operandArray = [];\n    let operatorArray = [];\n  \
    \  let result;\n    let tempOperand = 0;\n    let tempOperator = 0;\n    for(let\
    \ i = 0; i < operand.length; i++){\n        operandArray.push(operand[i]);\n \
    \   }\n    for(let i = 0; i < operator.length; i++){\n        operatorArray.push(operator[i]);\n\
    \    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i]\
    \ === '*' || operatorArray[i] === '/'){\n            if(operatorArray[i] === '*'){\n\
    \                result = operandArray[i] * operandArray[i + 1];\n           \
    \     operandArray.splice(i, 2, result);\n                operatorArray.splice(i,\
    \ 1);\n                i--;\n            }\n            else if(operatorArray[i]\
    \ === '/'){\n                result = operandArray[i] / operandArray[i + 1];\n\
    \                operandArray.splice(i, 2, result);\n                operatorArray.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    for(let i =\
    \ 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '+' || operatorArray[i]\
    \ === '-'){\n            if(operatorArray[i] === '+'){\n                result\
    \ = operandArray[i] + operandArray[i + 1];\n                operandArray.splice(i,\
    \ 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n\
    \            }\n            else if(operatorArray[i] === '-'){\n             \
    \   result = operandArray[i] - operandArray[i + 1];\n                operandArray.splice(i,\
    \ 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n\
    \            }\n        }\n    }\n    return result;\n}\n", "  if (operand.length\
    \ < 2) return undefined;\n  let result = operand[0];\n  operand.shift();\n  operator.forEach((item,\
    \ index) => {\n    switch (item) {\n      case '+':\n        result += operand[index];\n\
    \        break;\n      case '-':\n        result -= operand[index];\n        break;\n\
    \      case '*':\n        result *= operand[index];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[index]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[index]);\n      \
    \  break;\n    }\n  });\n  return result;\n}\n", "    var res = operand[0];\n\
    \    for(var i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                res += operand[i+1];\n               \
    \ break;\n            case '-':\n                res -= operand[i+1];\n      \
    \          break;\n            case '*':\n                res *= operand[i+1];\n\
    \                break;\n            case '//':\n                res = Math.floor(res\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       res = Math.pow(res, operand[i+1]);\n                break;\n        }\n\
    \    }\n    return res;\n}", "  if (operator.length === 0 || operand.length <\
    \ 2) {\n    return 0;\n  }\n  let result = operand[0];\n  for (let i = 0; i <\
    \ operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i\
    \ + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n\
    \    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    }\
    \ else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "  // Your code is here...\n\
    }\n", "  for(var i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n\
    \      operand[i+1] = operand[i] + operand[i+1];\n    }\n    if(operator[i] ===\
    \ '-'){\n      operand[i+1] = operand[i] - operand[i+1];\n    }\n    if(operator[i]\
    \ === '*'){\n      operand[i+1] = operand[i] * operand[i+1];\n    }\n    if(operator[i]\
    \ === '//'){\n      operand[i+1] = Math.floor(operand[i] / operand[i+1]);\n  \
    \  }\n    if(operator[i] === '**'){\n      operand[i+1] = Math.pow(operand[i],\
    \ operand[i+1]);\n    }\n  }\n  return operand[operand.length-1];\n}", "    let\
    \ result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n      \
    \  let operatorFunc = operator[i];\n        let operand1 = operand[i];\n     \
    \   let operand2 = operand[i+1];\n        switch(operatorFunc){\n            case\
    \ '+':\n                result = operand1 + operand2;\n                break;\n\
    \            case '-':\n                result = operand1 - operand2;\n      \
    \          break;\n            case '*':\n                result = operand1 *\
    \ operand2;\n                break;\n            case '//':\n                result\
    \ = operand1 / operand2;\n                break;\n            case '**':\n   \
    \             result = operand1 ** operand2;\n                break;\n       \
    \ }\n    }\n    return result;\n}", "    let str = '';\n    for(let i = 0; i <\
    \ operand.length; i++){\n        str += `${operand[i]} ${operator[i]} `;\n   \
    \ }\n    str += operand[operand.length - 1];\n    return eval(str);\n}", "   \
    \ let opr = operator;\n    let opd = operand;\n    let sum = opd[0];\n    for(let\
    \ i = 0; i < opr.length; i++){\n        if(opr[i] == '+'){\n            sum +=\
    \ opd[i+1];\n        }\n        if(opr[i] == '-'){\n            sum -= opd[i+1];\n\
    \        }\n        if(opr[i] == '*'){\n            sum *= opd[i+1];\n       \
    \ }\n        if(opr[i] == '//'){\n            sum /= opd[i+1];\n        }\n  \
    \      if(opr[i] == '**'){\n            sum = Math.pow(sum, opd[i+1]);\n     \
    \   }\n    }\n    return sum;\n}\n", "    let res = operand[0];\n    for(let i\
    \ = 0; i < operator.length; i++){\n        let opr = operator[i];\n        let\
    \ num = operand[i+1];\n        if(opr === '+'){\n            res += num;\n   \
    \     }\n        else if(opr === '-'){\n            res -= num;\n        }\n \
    \       else if(opr === '*'){\n            res *= num;\n        }\n        else\
    \ if(opr === '//'){\n            res = Math.floor(res / num);\n        }\n   \
    \     else if(opr === '**'){\n            res = Math.pow(res, num);\n        }\n\
    \    }\n    return res;\n}\n", "    if(operator.length == 0){\n        return\
    \ operand[0];\n    }\n    let output = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] == '+'){\n            output += operand[i+1];\n\
    \        }\n        if(operator[i] == '-'){\n            output -= operand[i+1];\n\
    \        }\n        if(operator[i] == '*'){\n            output *= operand[i+1];\n\
    \        }\n        if(operator[i] == '//'){\n            output = Math.floor(output\
    \ / operand[i+1]);\n        }\n        if(operator[i] == '**'){\n            output\
    \ = Math.pow(output, operand[i+1]);\n        }\n    }\n    return output;\n}\n",
  "  \n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
