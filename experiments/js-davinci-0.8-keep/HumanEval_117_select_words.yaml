name: HumanEval_117_select_words
language: js
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2)\
  \ ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
  little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
  , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
  Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
  Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
  a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
completions: ["    let list = [];\n    let temp = s.split(\" \");\n    for(let i =\
    \ 0; i < temp.length; i++){\n        if(countVowels(temp[i]) == n){\n        \
    \    list.push(temp[i]);\n        }\n    }\n    return list;\n}\n", "  let result\
    \ = [];\n  let words = s.split(' ');\n  if (s === '') return result;\n  words.forEach(word\
    \ => {\n    let consonants = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (!'aeiou'.includes(word[i])) consonants++;\n    }\n    if (consonants\
    \ === n) result.push(word);\n  });\n  return result;\n}\n", "  let regex = /[^aeiou\
    \ ]/gi;\n  let words = s.split(' ');\n  let result = [];\n  words.forEach(function(word){\n\
    \    let match = word.match(regex);\n    if(match){\n      if(match.length ===\
    \ n){\n        result.push(word);\n      }\n    }\n  });\n  return result;\n}",
  "    var regex = /[bcdfghjklmnpqrstvwxyz]/i;\n    var temp = s.split(\" \");\n \
    \   var result = [];\n    for(var i = 0; i < temp.length; i++){\n        var counter\
    \ = 0;\n        for(var j = 0; j < temp[i].length; j++){\n            if(regex.test(temp[i][j])){\n\
    \                counter++;\n            }\n        }\n        if(counter == n){\n\
    \            result.push(temp[i]);\n        }\n    }\n    return result;\n}\n",
  "    //Test\n    if(typeof s != \"string\" || typeof n != \"number\"){\n       \
    \ return \"Input invalid\";\n    }\n    let list = s.split(\" \");\n    //Test\n\
    \    if(list.length == 0){\n        return \"Input invalid\";\n    }\n    let\
    \ result = [];\n    for(let i = 0; i < list.length; i++){\n        if(consonant_count(list[i])\
    \ == n){\n            result.push(list[i]);\n        }\n    }\n    return result;\n\
    }", "    const regex = /[aeiou\\s]/g;\n    const words = s.split(' ').filter(word\
    \ => !(word.match(regex) || []).length);\n    return words.filter(word => word.length\
    \ === n);\n}\n", "    let consonants = 'bcdfghjklmnpqrstvwxyz';\n    let words\
    \ = s.split(' ');\n    let validWords = [];\n    for(let i = 0; i < words.length;\
    \ i++){\n        let word = words[i];\n        let consCount = 0;\n        for(let\
    \ j = 0; j < word.length; j++){\n            if(consonants.includes(word[j])){\n\
    \                consCount++;\n            }\n        }\n        if(consCount\
    \ === n){\n            validWords.push(word);\n        }\n    }\n    return validWords;\n\
    }", "    return s.split(' ').filter(word => {\n        return word.split('').filter(char\
    \ => {\n            return /[bcdfghjklmnpqrstvwxyz]/i.test(char);\n        }).length\
    \ === n;\n    });\n}\n", "    let res = [];\n    let vowels = {'a':1, 'e':1, 'i':1,\
    \ 'o':1, 'u':1};\n    let words = s.split(' ');\n    for(let word of words){\n\
    \        let num = 0;\n        for(let ch of word){\n            if(!vowels[ch])\n\
    \                num++;\n        }\n        if(num === n)\n            res.push(word);\n\
    \    }\n    return res;\n}", "    if (s === \"\") return [];\n    var words =\
    \ s.split(\" \");\n    var result = [];\n    for (var i = 0; i < words.length;\
    \ i++) {\n        var currentWord = words[i];\n        var currentWordConsonantsCount\
    \ = 0;\n        for (var j = 0; j < currentWord.length; j++) {\n            var\
    \ char = currentWord[j];\n            if (char !== \"a\" && char !== \"e\" &&\
    \ char !== \"i\" && char !== \"o\" && char !== \"u\") {\n                currentWordConsonantsCount++;\n\
    \            }\n        }\n        if (currentWordConsonantsCount === n) {\n \
    \           result.push(currentWord);\n        }\n    }\n    return result;\n}",
  "    var arr = [];\n    s.split(' ').forEach(function(el){\n        if(el.match(/[b-df-hj-np-tv-z]/gi).length\
    \ == n){\n            arr.push(el);\n        }\n    });\n    return arr;\n}",
  "  return s.split(\" \").filter(v => [...v].filter(v => isVowel(v)).length == n);\n\
    }\n", "\tvar array = s.split(\" \");\n\tvar arr = [];\n\tfor(i = 0; i < array.length;\
    \ i++){\n\t\tif(consonants(array[i]) == n){\n\t\t\tarr.push(array[i]);\n\t\t}\n\
    \t}\n\treturn arr;\n}\n", "    if(s.length == 0){\n        return [];\n    }\n\
    \    let arr = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let matchArr = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        let cCount = 0;\n        for(let j = 0;\
    \ j < arr[i].length; j++){\n            if(consonants.includes(arr[i][j].toLowerCase())){\n\
    \                cCount++;\n            }\n        }\n        if(cCount == n){\n\
    \            matchArr.push(arr[i]);\n        }\n    }\n    return matchArr;\n\
    }\n", "    if(s==''){\n        return [];\n    }\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    let words = s.split(' ');\n    words = words.filter(word => {\n        if(word.length\
    \ > n) {\n            let charArray = word.split('');\n            let result\
    \ = charArray.filter(letter => consonants.includes(letter));\n            return\
    \ result.length == n;\n        }\n    });\n    return words;\n}\nmodule.exports\
    \ = select_words;", "  const non_consonants = ['a', 'e', 'i', 'o', 'u'];\n  const\
    \ map = s.split(' ').map(word => word.split('').filter(letter => !non_consonants.includes(letter)).length);\n\
    \  const res = [];\n  for (let i = 0; i < map.length; i++) {\n    if (map[i] ===\
    \ n) {\n      res.push(s.split(' ')[i]);\n    }\n  }\n  return res;\n}\n", " \
    \ var string = s.split(\" \");\n  var numConsonants = 0;\n  var finalArray = [];\n\
    \  for(var i = 0; i < string.length; i++){\n    var word = string[i];\n    for(var\
    \ j = 0; j < word.length; j++){\n      var letter = word[j];\n      if(letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\"){\n      }else{\n        numConsonants++;\n      }\n    }\n    if(numConsonants\
    \ === n){\n      finalArray.push(word);\n    }\n    numConsonants = 0;\n  }\n\
    \  return finalArray;\n}\n", "  if(s.length === 0){\n    return [];\n  }else{\n\
    \    let result = [];\n    let words = s.split(' ');\n    for(let i = 0; i < words.length;\
    \ i++){\n      let count = 0;\n      for(let j = 0; j < words[i].length; j++){\n\
    \        if(!isVowel(words[i][j])){\n          count++;\n        }\n      }\n\
    \      if(count === n){\n        result.push(words[i]);\n      }\n    }\n    return\
    \ result;\n  }\n}\n", "    let allWords = s.split(' ');\n    let wordsWithKCons\
    \ = [];\n    let cons = 'bcdfghjklmnpqrstvwxyz'.split('');\n    for(let word of\
    \ allWords){\n        let wordCounter = 0;\n        for(let i = 0; i < word.length;\
    \ i++){\n            if(cons.includes(word[i])){\n                wordCounter++;\n\
    \            }\n        }\n        if(wordCounter === n){\n            wordsWithKCons.push(word);\n\
    \        }\n    }\n    return wordsWithKCons;\n}", "  if(s==\"\") return [];\n\
    \  let res=[];\n  for(let i=0;i<s.length;i++){\n    if(s[i]==\" \"){\n      let\
    \ str=s.slice(0,i);\n      s=s.slice(i+1);\n      i=0;\n      if(isValid(str,n))\
    \ res.push(str);\n    }\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
