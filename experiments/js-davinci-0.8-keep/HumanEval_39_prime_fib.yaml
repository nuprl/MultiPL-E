name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["    return 0;\n}\n", "\tvar array = [];\n\tarray.push(2);\n\tarray.push(3);\n\
    \tvar i = 2;\n\tvar j = 0;\n\twhile(i<n){\n\t\tarray.push(array[j]+array[j+1]);\n\
    \t\tif(isPrime(array[j+2])){\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\treturn array[array.length-1];\n\
    }", "    var count = 2;\n    var nth_fib = 1;\n    var fib_1 = 1;\n    var fib_2\
    \ = 1;\n    while(count<=n){\n        nth_fib = fib_1 + fib_2;\n        fib_2\
    \ = fib_1;\n        fib_1 = nth_fib;\n        if(is_prime(nth_fib)){\n       \
    \     count += 1;\n        }\n    }\n    return nth_fib;\n}", "  \n}\n", "   \
    \ var fib_num = fib(n);\n    var prime_fib_num = 0;\n    var i = 0;\n    while\
    \ (prime_fib_num < n){\n        if (is_prime(fib_num)){\n            i++;\n  \
    \          prime_fib_num = i;\n        }\n        fib_num = fib(fib_num);\n  \
    \  }\n    return fib_num;\n}\n", "\tvar i = 0;\n\tvar j = 1;\n\tvar count = 0;\n\
    \tvar result = 0;\n\twhile(count<n){\n\t\tif(isPrime(i)){\n\t\t\tif(i%2 == 0){\n\
    \t\t\t\tresult = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tvar k = i+j;\n\t\t\
    i = j;\n\t\tj = k;\n\t}\n\treturn result;\n}\n", "  var a = 2, b = 3, i = 0;\n\
    \  while(i < n){\n    var sum = a + b;\n    if(isPrime(sum)){\n      i++;\n  \
    \  }\n    a = b;\n    b = sum;\n  }\n  return a;\n}\n", "    return FibonacciRecursive(n);\n\
    }\n", "\tvar counter = 0;\n\tvar fibonacci = fib(0);\n\tvar i = 0;\n\twhile(counter\
    \ < n){\n\t\tif(prime(fibonacci)){\n\t\t\tcounter++;\n\t\t}\n\t\ti++;\n\t\tfibonacci\
    \ = fib(i);\n\t}\n\treturn fibonacci;\n}\n", "    var fib = fibonacci(n);\n  \
    \  if(fib >= 2 && prime(fib)){\n        return fib;\n    }\n    else{\n      \
    \  return prime_fib(n+1);\n    }\n}\n", "   if(n==1){\n    return 2;\n  }\n  if(n==2){\n\
    \    return 3;\n  }\n  let fibn1=2;\n  let fibn2=3;\n  let fibn=5;\n  let fib=5;\n\
    \  let num=3;\n  while(num<n){\n    if(is_prime(fibn)){\n      num++;\n      fib=fibn;\n\
    \    }\n    fibn=fibn1+fibn2;\n    fibn1=fibn2;\n    fibn2=fibn;\n  }\n  return\
    \ fib;\n}\n", "\tvar prim = 2;\n\tvar fib1 = 1;\n\tvar fib2 = 2;\n\tfor(var i\
    \ = 0; i<n; i++){\n\t\tvar fib = fib1 + fib2;\n\t\tfib1 = fib2;\n\t\tfib2 = fib;\n\
    \t\tfor(var j = 2; j< fib; j++){\n\t\t\tif(fib%j == 0){\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t\telse if(j == fib-1){\n\t\t\t\tprim = fib;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ prim;\n}\n", "    let prime_fib_list = [];\n    let fib_list = fibonacci_num(100);\n\
    \    for(let i = 0; i < fib_list.length; i++){\n        if(is_prime(fib_list[i])){\n\
    \            prime_fib_list.push(fib_list[i]);\n        }\n    }\n    return prime_fib_list[n\
    \ - 1];\n}", "  var i=0;\n  var first = 0;\n  var second = 1;\n  var count = 0;\n\
    \  while(count<n){\n    var fib = first + second;\n    if(isPrime(fib)){\n   \
    \   count++;\n    }\n    first = second;\n    second = fib;\n  }\n  return fib;\n\
    }", "    var i = 1;\n    var fib1 = 1;\n    var fib2 = 1;\n    var fibN = 1;\n\
    \    var count = 0;\n    while(i <= n){\n        if(isPrime(fibN)){\n        \
    \    count += 1;\n        }\n        if(count == n){\n            return fibN;\n\
    \        }\n        fibN = fib1 + fib2;\n        fib1 = fib2;\n        fib2 =\
    \ fibN;\n        i += 1;\n    }\n    return fibN;\n}\n", "    var nth_number =\
    \ 0;\n    var current_number = 0;\n    var prev_number = 0;\n    var next_number\
    \ = 1;\n    var count = 0;\n    while(count < n){\n        if(is_prime(current_number)){\n\
    \            nth_number = current_number;\n            count++;\n        }\n \
    \       current_number = prev_number + next_number;\n        prev_number = next_number;\n\
    \        next_number = current_number;\n    }\n    return nth_number;\n}\n", "\t\
    var prime_fib_num = 0;\n\tvar fib_num = 0;\n\tvar count = 0;\n\tvar prime_count\
    \ = 0;\n\tvar fib_arr = [0,1];\n\twhile(count <= n){\n\t\tfib_num = fib_arr[count-1]\
    \ + fib_arr[count];\n\t\tfib_arr.push(fib_num);\n\t\tcount++;\n\t\tif(is_prime(fib_num)){\n\
    \t\t\tprime_count++;\n\t\t\tprime_fib_num = fib_num;\n\t\t}\n\t}\n\treturn prime_fib_num;\n\
    }\n", "\tif(n == 1){\n\t\treturn 2;\n\t}else if(n == 2){\n\t\treturn 3;\n\t}else{\n\
    \t\tvar fN = 2;\n\t\tvar fNm1 = 1;\n\t\tvar fNm2 = 0;\n\t\tvar count = 2;\n\t\t\
    while(count < n){\n\t\t\tfN = fNm1 + fNm2;\n\t\t\tif(isPrime(fN)){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t\tfNm2 = fNm1;\n\t\t\tfNm1 = fN;\n\t\t}\n\t\treturn fN;\n\t}\n}\n",
  "    var num = 0;\n    var fibonacci = 0;\n    var fibonacci_prime = 0;\n    var\
    \ first = 0;\n    var second = 1;\n    var i = 0;\n    while(i < n){\n       \
    \ fibonacci = first + second;\n        first = second;\n        second = fibonacci;\n\
    \        if(is_prime(fibonacci)){\n            i += 1;\n            num = fibonacci;\n\
    \        }\n    }\n    return num;\n}\n", "    var i = 2;\n    var count = 0;\n\
    \    while(count < n){\n        if(is_prime(fib(i))){\n            count++;\n\
    \        }\n        i++;\n    }\n    return fib(i-1);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
