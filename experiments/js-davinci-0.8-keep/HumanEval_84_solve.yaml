name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// For N = 1000, the sum of digits will be 1 the output should be \"\
  1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n\
  // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//\
  \ Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n\
  // a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["  var result = '';\n  var binaryVal = '';\n  if(N === 0) { return 0;\
    \ }\n  while(N !== 0) {\n    if(N % 2 === 0) {\n      binaryVal = '0';\n    }\
    \ else {\n      binaryVal = '1';\n    }\n    result = binaryVal + result;\n  \
    \  N = parseInt(N / 2);\n  }\n  var sum = 0;\n  for(var i = 0; i < result.length;\
    \ i++) {\n    sum += Number(result[i]);\n  }\n  return sum;\n}", "    let binString\
    \ = N.toString(2);\n    let splitString = binString.split('');\n    let sumDigits\
    \ = 0;\n    for(let i = 0; i < splitString.length; i++){\n        sumDigits +=\
    \ parseInt(splitString[i]);\n    }\n    return sumDigits;\n}", "  return (N.toString(2).match(/1/g)||[]).length\n\
    }\n", "  return N.toString(2).split('').reduce((acc, curr) => parseInt(acc) +\
    \ parseInt(curr), 0);\n}\n\nmodule.exports = { solve };", "    return N.toString(2).split('').reduce((a,b)=>+a+\
    \ +b)\n}", "  var sum = 0;\n  var result = [];\n  while(N>0){\n    result.push(N%2);\n\
    \    N = Math.floor(N/2);\n  }\n  for(var i = 0; i < result.length; i++){\n  \
    \  sum += result[i];\n  }\n  return sum;\n}\n", "  var binary = (N >>> 0).toString(2);\n\
    \  var result = 0;\n  for (var i = 0; i < binary.length; i++) {\n    result +=\
    \ parseInt(binary[i]);\n  }\n  return result;\n}", "    // write your code here\n\
    }\n", "    let result = 0;\n    for(let i = N; i > 0; i = Math.floor(i/2)){\n\
    \        result += i % 2;\n    }\n    return result;\n}", "    return N.toString(2).split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n}", "    //your code here\n    var arr = [];\n\
    \    var total = 0;\n    for(var i = 0; i < N; i++){\n        var binary = (i).toString(2);\n\
    \        for(var j = 0; j < binary.length; j++){\n            total += parseInt(binary[j]);\n\
    \        }\n    }\n    return total;\n}\nsolve(1000);", "  var obj = {}\n  var\
    \ count = 0\n  var binary = []\n  var sum = 0\n  while(N != 0){\n    if(N % 2\
    \ === 0){\n      binary.push(0)\n    }else{\n      binary.push(1)\n    }\n   \
    \ N = Math.floor(N / 2)\n  }\n  var result = binary.reverse().join('')\n  for(var\
    \ i = 0; i < result.length; i++){\n    if(result[i] === '1'){\n      sum++\n \
    \   }\n  }\n  return sum\n}\n", "    var bin = N.toString(2);\n    var sum = 0;\n\
    \    for(var i = 0; i < bin.length; i++){\n        sum += +bin[i];\n    }\n  \
    \  return sum;\n}\n", "    //write your code here\n    return (N >>> 0).toString(2).split('').reduce((a,b)\
    \ => +a + +b);\n}\n", "    return N.toString(2).split('').reduce((p,c)=>p+parseInt(c),0)\n\
    }\nsolve(1000)\nsolve(150)\nsolve(147)", "   // this is  a binary problem.\n \
    \  var sum = 0;\n   var arr = [];\n   while(N){\n      if(N%2){\n         sum++;\n\
    \      }\n      arr.push(N%2);\n      N = Math.floor(N/2);\n   }\n   return sum;\n\
    }\n", "  let result = 0;\n  let str = '';\n  let rem = 0;\n  while(N>0){\n   \
    \ rem = Math.floor(N%2);\n    str += rem;\n    result += rem;\n    N = Math.floor(N/2);\n\
    \  }\n  console.log(result);\n  return str.split('').reverse().join('');\n}",
  "    let x = Number(N).toString(2);\n    let arr = x.split('');\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Number(arr[i]);\n  \
    \  }\n    return sum;\n}\n", "    // let result = 0;\n    // for(let i = 0; i\
    \ < N.length; i++){\n    //     result += N[i];\n    // }\n    // return result;\n\
    \    return N.toString(2);\n}", "\tlet sum = 0;\n\tlet bin = N.toString(2);\n\t\
    for(let i = 0; i < bin.length; i++){\n\t\tsum += parseInt(bin[i],10);\n\t}\n\t\
    return sum;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
