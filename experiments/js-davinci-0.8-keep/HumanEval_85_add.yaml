name: HumanEval_85_add
language: js
prompt: "//Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
  \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
  \ 4, 6, 8]),12);\n}\n\ntest();"
completions: ["    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] % 2 === 0 && i % 2 !== 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n", "    return lst.filter((i, index) =>\
    \ i % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}", "  let count\
    \ = 0;\n  lst.forEach((element, index) => {\n    if (index % 2 === 1) {\n    \
    \  count += element;\n    }\n  });\n  return count;\n}\n", "    var sum = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 1 && lst[i] % 2\
    \ == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
  "  \n  let even = []\n  lst.forEach((el, index) => {\n    if (el % 2 === 0 && index\
    \ % 2 !== 0) {\n      even.push(el)\n    }\n  })\n  return even.reduce((a,b) =>\
    \ a + b)\n}\n", "let even = 0;\nfor(let i = 0; i < lst.length; i+=2){\n  if(lst[i]\
    \ % 2 === 0){\n    even += lst[i];\n  }\n}\nreturn even;\n}", "    var retVal\
    \ = 0;\n    for(var i = 0; i < lst.length; i++)\n    {\n        if((i % 2 != 0)\
    \ && (lst[i] % 2 == 0))\n        {\n            retVal += lst[i];\n        }\n\
    \    }\n    return retVal;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    //TODO:\n    const items = lst.filter((item,index)\
    \ => index % 2 !== 0);\n    const even = items.filter(item => item % 2 === 0);\n\
    \    return even.reduce((sum, item) => sum + item, 0);\n}\n", "    let newArr\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i]\
    \ % 2 === 0){\n            newArr.push(lst[i]);\n        }\n    }\n    return\
    \ newArr.reduce((acc, cur) => acc + cur);\n}\n", "    let num=0;\n    for(let\
    \ i=0;i<lst.length;i+=2){\n        if(lst[i]%2==0){\n            num+=lst[i];\n\
    \        }\n    }\n    return num;\n}", "    let sum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 === 0){\n      \
    \      sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if((lst[i] % 2 == 0) &&\
    \ (i % 2 == 1)){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let num = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 === 0){\n            num += lst[i];\n        }\n    }\n    return num;\n\
    }\n", "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 ===\
    \ 1 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
  "    return lst.filter((val, index) => index % 2 === 1 && val % 2 === 0).reduce((acc,\
    \ val) => acc + val);\n}\n", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "    let add = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n      \
    \      add += lst[i];\n        }\n    }\n    return add;\n}\n", "  var ans = 0;\n\
    \  for(var i = 0; i < lst.length; i++) {\n    if(i % 2 !== 0 && lst[i] % 2 ===\
    \ 0) {\n      ans += lst[i];\n    }\n  }\n  return ans;\n}", "\n}\n\nmodule.exports\
    \ = {\n  \"add\": add\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
