name: HumanEval_120_maximum
language: js
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
  \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
  \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
  \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n\
  \  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n\
  \  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5,\
  \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
  \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
  \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
  \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0],\
  \ 0),[]);\n}\n\ntest();"
completions: ["  arr.sort(function(a, b){\n    return b - a;\n  });\n  return arr.slice(0,\
    \ k);\n}\n", "    let list = [], ans = [], i, length = arr.length;\n    for(i\
    \ = 0; i < length; i++){\n        if(list.length == 0 || arr[i] > list[0]){\n\
    \            list.unshift(arr[i]);\n        }\n        else{\n            list.push(arr[i]);\n\
    \        }\n    }\n    for(i = 0; i < k; i++){\n        ans.push(list.shift());\n\
    \    }\n    return ans;\n}", "    // return max(arr, k, 0, arr.length-1);\n  \
    \  return quickSelect(arr, k, 0, arr.length-1);\n}\n", "    let sorted = arr.sort((a,b)\
    \ => b-a)\n    let sliced = sorted.slice(0,k)\n    return sliced\n}", "\tlet result\
    \ = [];\n\tfor(let i = 0; i < k; i++){\n\t\tresult.push(Math.max(...arr));\n\t\
    \tarr.splice(arr.indexOf(Math.max(...arr)), 1);\n\t}\n\treturn result;\n}\n",
  "\tvar res = []\n\tfor(var i = 0; i < arr.length; i++){\n\t\twhile(res.length &&\
    \ res[res.length - 1] < arr[i] && res.length + arr.length - i > k){\n\t\t\tres.pop()\n\
    \t\t}\n\t\tif(res.length < k){\n\t\t\tres.push(arr[i])\n\t\t}\n\t}\n\treturn res\n\
    }\n", "    let result = []\n    if(arr.length == 0 || k == 0){\n        return\
    \ result\n    }\n    arr.sort((a,b) => a-b)\n    result = arr.slice(arr.length\
    \ - k)\n    return result\n}\n", "  // sort the array in ascending order\n  arr.sort(function(a,\
    \ b){\n    return a - b;\n  });\n  // return the last k elements from the sorted\
    \ array\n  return arr.slice(arr.length - k);\n}", "  arr.sort((a, b) => b - a);\n\
    \  arr.length = k;\n  return arr;\n}\n", "    var result = [];\n    if(arr.length\
    \ <= k){\n        return arr;\n    }\n    var i = 0;\n    while(i < k){\n    \
    \    result.push(arr[i]);\n        i++;\n    }\n    i = k;\n    while(i < arr.length){\n\
    \        j = k - 1;\n        while(j >= 0){\n            if(arr[i] > result[j]){\n\
    \                if(j === 0){\n                    result[j] = arr[i];\n     \
    \           }\n                else{\n                    temp = result[j];\n\
    \                    result[j] = arr[i];\n                    result[j - 1] =\
    \ temp;\n                }\n            }\n            j--;\n        }\n     \
    \   i++;\n    }\n    return result;\n}\n", "    let sortedArray = arr.sort((a,b)\
    \ => a - b);\n    return sortedArray.slice(sortedArray.length - k);\n}\n", " \
    \ if(arr.length == 0) return null;\n  if(arr.length == 1) return arr;\n  const\
    \ pq = new PQ();\n  for(let i = 0; i < arr.length; i++){\n    pq.insert(arr[i]);\n\
    \  }\n  const res = [];\n  for(let i = 0; i < k; i++){\n    res.push(pq.remove());\n\
    \  }\n  return res;\n}\n", "    let result = []\n    let most = null\n    while(k\
    \ > 0){\n        most = null\n        for(let i = 0; i < arr.length; i++){\n \
    \           if(most === null || arr[i] > most){\n                most = arr[i]\n\
    \            }\n        }\n        result.push(most)\n        arr.splice(arr.indexOf(most),\
    \ 1)\n        k--\n    }\n    return result\n}\n", "    if(k <= 0) return []\n\
    \    if(k >= arr.length) return arr.sort((a,b) => a-b)\n    let kArray = arr.slice(0,k)\n\
    \    kArray.sort((a,b) => a-b)\n    for(let i = k; i < arr.length; i++){\n   \
    \     if(arr[i] > kArray[0]){\n            let j = 0\n            while(j < k\
    \ && arr[i] > kArray[j]){\n                j++\n            }\n            kArray.splice(j,0,arr[i])\n\
    \            kArray.splice(0,1)\n        }\n    }\n    return kArray\n}\n", " \
    \   var sorted = quickSort(arr);\n    console.log(\"sorted: \", sorted);\n   \
    \ return sorted.slice(sorted.length - k, sorted.length);\n}\n", "    var sortedArr\
    \ = arr.sort((a,b) => b-a)\n    return sortedArr.slice(0,k)\n}", "    let output\
    \ = [];\n    let max= -Infinity;\n    let idx = 0;\n    while(k > 0){\n      \
    \  for(let i = 0; i < arr.length; i++){\n            if(arr[i] > max){\n     \
    \           max = arr[i];\n                idx = i;\n            }\n        }\n\
    \        output.push(max);\n        max = -Infinity;\n        arr.splice(idx,\
    \ 1);\n        k--;\n    }\n    return output;\n}\n", "    let sorted = arr.sort((a,b)\
    \ => b-a);\n    return sorted.slice(0,k);\n}", "    if(k == 0) return [];\n  \
    \  if(k >= arr.length) return arr;\n    let copy = arr.slice();\n    let result\
    \ = [];\n    let part = partition(copy, k-1);\n    while(part < k){\n        let\
    \ temp = partition(copy, part-1);\n        if(temp < k){\n            result.push(copy[temp]);\n\
    \            copy.splice(temp, 1);\n            part = temp + 1;\n        }else{\n\
    \            result.push(copy[temp]);\n            copy.splice(temp, 1);\n   \
    \         part = temp;\n        }\n    }\n    return result;\n}", "    if(arr.length\
    \ === 0 || k === 0) return [];\n    if(arr.length === k) return arr;\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        while(result.length\
    \ > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i\
    \ > k){\n            result.pop();\n        }\n        if(result.length < k){\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
