name: HumanEval_140_fix_spaces
language: js
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example\
  \ 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\nfunction fix_spaces(text){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"\
  Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow\
  \  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"\
  Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"\
  ),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["    var arr = text.split('');\n    var result = '';\n    var count\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == ' '){\n\
    \            count++;\n            if(count > 2){\n                result += '-';\n\
    \                count = 0;\n            }\n            else{\n              \
    \  result += '_';\n            }\n        }\n        else{\n            result\
    \ += arr[i];\n            count = 0;\n        }\n    }\n    return result;\n}\n",
  "  return text.replace(/\\s+/g, '-').replace(/ /g, '_');\n}", "\tvar index = 0;\n\
    \tvar space_index = 0;\n\tvar substring = \"\";\n\twhile(index < text.length){\n\
    \t\tspace_index = text.indexOf(\" \", index);\n\t\tif(space_index == -1){\n\t\t\
    \tsubstring = text.substring(index, text.length);\n\t\t\tsubstring = substring.replace(/\
    \ /g, \"_\");\n\t\t\ttext = text.substring(0, index) + substring;\n\t\t\tbreak;\n\
    \t\t}\n\t\tsubstring = text.substring(index, space_index);\n\t\tsubstring = substring.replace(/\
    \ /g, \"_\");\n\t\ttext = text.substring(0, index) + substring + text.substring(space_index);\n\
    \t\tindex = space_index + 1;\n\t}\n\treturn text.replace(/\\s+/g, \"-\");\n}\n",
  "    var t = text.replace(/\\s+/g,'-');\n    return t.replace(/\\s/g, '_');\n}\n",
  "    return text.replace(/\\s/g, '_').replace(/_+/g, '-');\n}", "  return text.replace(/[\
    \ ]{2,}/g, '-').replace(/ /g, '_');\n}\n", "  let temp = text.split(\" \");\n\
    \  let i = 0;\n  while(i < temp.length){\n    if(temp[i] == \"\")\n      temp.splice(i,\
    \ 1);\n    else i++;\n  }\n  let j = 0;\n  while(j < temp.length - 1){\n    if(temp[j].length\
    \ == 0){\n      temp.splice(j, 1);\n    }else j++;\n  }\n  let result = temp.join(\"\
    \ \");\n  while(result.indexOf(\"  \") != -1){\n    result = result.replace(\"\
    \  \", \"-\");\n  }\n  return result.replace(/ /g, \"_\");\n}", "\treturn text.replace(/\\\
    s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n", "    return text.replace(/\\s{2,}/g,\
    \ \"-\").replace(/\\s/g, \"_\");\n}", "    return text.replace(/\\s{2,}/g, '-').replace(/\\\
    s/g, '_');\n}\n", "    if (text.length == 0){\n        return \"\";\n    }\n \
    \   else{\n        if (text[0] == \" \"){\n            if (text[1] == \" \"){\n\
    \                if (text[2] == \" \"){\n                    return fix_spaces(\"\
    -\" + text.slice(3));\n                }\n                else{\n            \
    \        return fix_spaces(\"_\" + text.slice(2));\n                }\n      \
    \      }\n            else{\n                return fix_spaces(\"_\" + text.slice(1));\n\
    \            }\n        }\n        else{\n            return text[0] + fix_spaces(text.slice(1));\n\
    \        }\n    }\n}\n", "    let count = 0;\n    let result = \"\";\n    for(let\
    \ i = 0; i < text.length; i++){\n        if(text[i] === \" \"){\n            count++;\n\
    \            result += (count > 2) ? \"-\" : \"_\";\n        }\n        else{\n\
    \            count = 0;\n            result += text[i];\n        }\n    }\n  \
    \  return result;\n}\n", "    return text.replace(/\\s+/g,'-').replace(/ /g, '_')\n\
    }", "    let a = text.replace(/\\s{2,}/g, \"-\").replace(/ /g, \"_\");\n    return\
    \ a;\n}", "\treturn text.replace(/[\\s]+/g, '-').replace(/ /g, '_').replace(/^[\\\
    s]+/g, '').replace(/[\\s]+$/g, '');\n}\n", "\treturn text.replace(/\\s+/g, ' ').replace(/\
    \ /g, '_').replace(/_+/g, '-');\n}\n", "    var newStr = text.split(\"  \").join(\"\
    -\");\n    var newStr2 = newStr.split(\" \").join(\"_\");\n    return newStr2;\n\
    }", "    let result = '';\n    let to_underscore = false;\n    let to_dash = false;\n\
    \    for(let i = 0; i < text.length; i++){\n        if(text[i] !== ' '){\n   \
    \         result += text[i];\n            to_underscore = false;\n           \
    \ to_dash = false;\n        }else{\n            if(to_underscore){\n         \
    \       result += '-';\n                to_dash = true;\n            }else{\n\
    \                result += '_';\n                to_underscore = true;\n     \
    \       }\n        }\n    }\n    return result;\n}", "\treturn text.replace(/[\
    \ ]{2,}/g, '-').replace(/ /g, '_');\n}\n", "    const newText = text.replace(/\\\
    s+/g, '_');\n    return newText;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
