name: HumanEval_110_exchange
language: js
prompt: "//In this problem, you will implement a function that takes two lists of\
  \ numbers,\n// and determines whether it is possible to perform an exchange of elements\n\
  // between them to make lst1 a list of only even numbers.\n// There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1,\
  \ 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
  function exchange(lst1, lst2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\"\
  );\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2,\
  \ 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n\
  \  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n\
  \  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"
completions: ["    let count1 = 0;\n    let count2 = 0;\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        if(lst1[i] % 2 == 0){\n            count1++;\n        }\n   \
    \ }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 != 0){\n\
    \            count2++;\n        }\n    }\n    if(count1 == count2){\n        return\
    \ \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "    for(var i = 0;\
    \ i < lst1.length; i++){\n        if(lst1[i] % 2 != 0){\n            for(var j\
    \ = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 == 0){\n       \
    \             var temp = lst1[i];\n                    lst1[i] = lst2[j];\n  \
    \                  lst2[j] = temp;\n                    j = lst2.length;\n   \
    \             }\n            }\n        }\n    }\n    if(lst1.every(function(e){\
    \ return e % 2 == 0;})){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }", "  //Write your code here.\n}", "    let exchange = true;\n    for(let i =\
    \ 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            exchange\
    \ = false;\n            break;\n        }\n    }\n    return exchange ? \"YES\"\
    \ : \"NO\";\n}\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\n", "  let lst1odds = lst1.filter(x\
    \ => x % 2 !== 0);\n  let lst2evens = lst2.filter(x => x % 2 === 0);\n  if (lst1odds.length\
    \ === lst2evens.length) {\n    return \"YES\";\n  } else {\n    return \"NO\"\
    ;\n  }\n}", "  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !==\
    \ 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2\
    \ === 0) {\n          let tmp = lst1[i];\n          lst1[i] = lst2[j];\n     \
    \     lst2[j] = tmp;\n          break;\n        }\n      }\n    }\n  }\n  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";\n}", "  for (let i = 0; i < lst1.length;\
    \ i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length;\
    \ j++) {\n        if (lst2[j] % 2 === 0) {\n          let t = lst1[i];\n     \
    \     lst1[i] = lst2[j];\n          lst2[j] = t;\n          break;\n        }\n\
    \      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]\
    \ % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}", "  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for\
    \ (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n    \
    \      let temp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] =\
    \ temp;\n          break;\n        }\n      }\n    }\n  }\n  return lst1.every(el\
    \ => el % 2 === 0) ? \"YES\" : \"NO\";\n}", "  const lst1Odds = lst1.filter(n\
    \ => n % 2 !== 0)\n  const lst2Evens = lst2.filter(n => n % 2 === 0)\n  const\
    \ count = lst1Odds.length\n  return lst2Evens.length >= count ? \"YES\" : \"NO\"\
    \n}", "    let isOdd = n => n % 2 !== 0;\n    let cnt1 = lst1.filter(isOdd).length;\n\
    \    let cnt2 = lst2.filter(isOdd).length;\n    return cnt1 === cnt2 ? \"YES\"\
    \ : \"NO\";\n}\n", "  let result = lst1.filter( x => x % 2 === 0);\n  if (result.length\
    \ === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n\
    }\n", "  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n\
    \      return \"YES\";\n    }\n    for (var j = 0; j < lst2.length; j++) {\n \
    \     if (lst2[j] % 2 === 0) {\n        lst1[i] = lst2[j];\n        return \"\
    YES\";\n      }\n    }\n  }\n  return \"NO\";\n}\n", "  let count = 0;\n  let\
    \ lst1Even = [];\n  let lst2Even = [];\n  let lst1Odd = [];\n  let lst2Odd = [];\n\
    \  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      lst1Even.push(lst1[i]);\n\
    \    } else {\n      lst1Odd.push(lst1[i]);\n    }\n  }\n  for(let i = 0; i <\
    \ lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      lst2Even.push(lst2[i]);\n\
    \    } else {\n      lst2Odd.push(lst2[i]);\n    }\n  }\n  if(lst1Even.length\
    \ + lst2Odd.length === lst1.length){\n    return \"YES\";\n  } else {\n    return\
    \ \"NO\";\n  }\n}\n", "    let sum1 = 0, sum2 = 0;\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        sum1 += lst1[i];\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        sum2 += lst2[i];\n    }\n    if(sum1 % 2 === 0 || sum2 % 2 ===\
    \ 0){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "  for (var i\
    \ = 0; i < lst1.length; i++) {\n    for (var j = 0; j < lst2.length; j++) {\n\
    \      if (lst1[i] % 2 !== 0 && lst2[j] % 2 === 0) {\n        var tmp = lst1[i];\n\
    \        lst1[i] = lst2[j];\n        lst2[j] = tmp;\n      }\n    }\n  }\n  for\
    \ (var k = 0; k < lst1.length; k++) {\n    if (lst1[k] % 2 !== 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "  let evens = []\n  let odds\
    \ = []\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n\
    \      evens.push(lst1[i])\n    }\n    else{\n      odds.push(lst1[i])\n    }\n\
    \  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n  \
    \    evens.push(lst2[i])\n    }\n    else{\n      odds.push(lst2[i])\n    }\n\
    \  }\n  if(evens.length === lst1.length){\n    return \"YES\"\n  }\n  else{\n\
    \    return \"NO\"\n  }\n}\n", "  var lst3 = lst1.concat(lst2);\n  for(var i =\
    \ 0; i < lst3.length; i++){\n    if(lst3[i] % 2 == 0){\n      lst3.splice(i, 1);\n\
    \      i--;\n    }\n  }\n  var sum = 0;\n  for(var i = 0; i < lst3.length; i++){\n\
    \    sum += lst3[i];\n  }\n  if(sum % 2 == 0){\n    return \"YES\";\n  }\n  else{\n\
    \    return \"NO\";\n  }\n}", "  let odds = [];\n  lst1.map(item => {\n    if\
    \ (item % 2 !== 0) {\n      odds.push(item);\n    }\n  });\n  let evens = [];\n\
    \  lst2.map(item => {\n    if (item % 2 === 0) {\n      evens.push(item);\n  \
    \  }\n  });\n  return (odds.length === evens.length) ? \"YES\" : \"NO\";\n}\n",
  "  if(lst1.some(x => x % 2)) {\n    return 'NO';\n  } else {\n    return 'YES';\n\
    \  }\n}", "  return lst1.some(n => n % 2 == 0) ? \"YES\" : \"NO\";\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
