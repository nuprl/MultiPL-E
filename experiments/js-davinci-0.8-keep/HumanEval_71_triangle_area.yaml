name: HumanEval_71_triangle_area
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return the area of\n\
  // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
  \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunction triangle_area(a, b,\
  \ c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1,\
  \ 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();"
completions: ["    if(a < 0 || b < 0 || c < 0){\n        return -1;\n    }\n    if(a\
    \ + b > c && a + c > b && b + c > a){\n        let p = (a + b + c) / 2;\n    \
    \    let A = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return A.toFixed(2);\n\
    \    } else {\n        return -1;\n    }\n}\n", "    let p = (a + b + c) / 2;\n\
    \    let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    if(isNaN(area))\
    \ return -1;\n    return Number(area.toFixed(2));\n}\n", "    var s = (a + b +\
    \ c) / 2;\n    var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if(area\
    \ > 0) {\n        return area.toFixed(2);\n    } else {\n        return -1;\n\
    \    }\n}\n", "\tif (a+b<c || a+c<b || b+c<a) return -1;\n\tvar p = (a+b+c)/2;\n\
    \treturn Math.round(Math.sqrt(p*(p-a)*(p-b)*(p-c))*100)/100;\n}\n", "    if( a+b>c\
    \ && a+c>b && b+c>a){\n        let p = (a+b+c)/2;\n        let sq = p*(p-a)*(p-b)*(p-c);\n\
    \        return Math.sqrt(sq).toFixed(2);\n    }else{\n        return -1;\n  \
    \  }\n}\n", "    if(a + b > c && a + c > b && b + c > a){\n        //Heron's formula\n\
    \        let s = (a + b + c) / 2;\n        return parseFloat((Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c))).toFixed(2));\n    }\n    return -1;\n}\n", "    if\
    \ (a+b>c && a+c>b && b+c>a){\n        return Number((0.5*a*b).toFixed(2));\n \
    \   } else {\n        return -1;\n    }\n}", "    // sort sides to use the most\
    \ optimal (biggest side)\n    // for calculating the area\n    let sides = [a,\
    \ b, c].sort(function(a, b){return a-b});\n    let p = (sides[0] + sides[1] +\
    \ sides[2]) / 2;\n    let area = p * (p - sides[0]) * (p - sides[1]) * (p - sides[2]);\n\
    \    return area > 0 ? +Math.sqrt(area).toFixed(2) : -1;\n}\n", "    if(a + b\
    \ > c && a + c > b && b + c > a){\n      return +((a * b * c / 2).toFixed(2));\n\
    \    } else {\n      return -1;\n    }\n  }", "    if(a + b > c && a + c > b &&\
    \ b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n \
    \   }\n    return -1;\n}", "  const sides = [a, b, c];\n  sides.sort((a, b) =>\
    \ a - b);\n  if(sides[0] + sides[1] > sides[2]){\n    const s = sides.reduce((a,b)\
    \ => a + b) / 2;\n    return +(Math.sqrt(s * (s - sides[0]) * (s - sides[1]) *\
    \ (s - sides[2]))).toFixed(2);\n  }\n  return -1;\n}", "    let s = (a + b + c)\
    \ / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ area > 0 ? area.toFixed(2) : -1;\n}\n", "    if (a + b > c && a + c > b && b\
    \ + c > a) {\n        return +(a * b / 2).toFixed(2);\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n        let\
    \ s = (a + b + c) / 2;\n        return (Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))).toFixed(2);\n    }\n    return -1;\n}\n", "    let sum = a + b + c;\n \
    \   if(sum < c) return -1;\n    let p = sum / 2;\n    let area = Math.sqrt(p *\
    \ (p - a) * (p - b) * (p - c));\n    return Number(area.toFixed(2));\n}", "\t\
    if ((a+b)>c && (a+c)>b && (b+c)>a){\n\t\tlet sp = (a+b+c)/2;\n\t\tlet area = sp*(sp-a)*(sp-b)*(sp-c);\n\
    \t\tarea = Math.sqrt(area);\n\t\treturn +area.toFixed(2);\n\t}\n\telse{\n\t\t\
    return -1;\n\t}\n}\n", "  let s = (a + b + c) / 2;\n  if (s - a < 0 || s - b <\
    \ 0 || s - c < 0) return -1;\n  return Number((Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))).toFixed(2));\n}", "    if(a+b>c && a+c>b && b+c>a){\n        let\
    \ s = (a+b+c)/2;\n        let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n       \
    \ return Number(area.toFixed(2));\n    }\n    return -1;\n}\n", "  if (a + b >\
    \ c && a + c > b && b + c > a) {\n    return Number(((a + b + c) / 2 * (Math.sqrt((a\
    \ + b + c) * (a + b - c) * (a + c - b) * (b + c - a))) / 2).toFixed(2));\n  }\
    \ else {\n    return -1;\n  }\n}\n", "    let sides = [a, b, c].sort((a, b) =>\
    \ a - b);\n    if (sides[0] + sides[1] > sides[2]) {\n        let s = (a + b +\
    \ c) / 2;\n        return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c))\
    \ * 100) / 100;\n    } else {\n        return -1;\n    }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
