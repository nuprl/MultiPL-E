name: HumanEval_29_filter_by_prefix
language: js
prompt: "//Filter an input list of strings only for ones that start with a given prefix.\n\
  // >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
  \ prefix){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
completions: ["  return _.filter(strings, function(a){\n    return a.startsWith(prefix);\n\
    \  });\n}\n", "\treturn filter(strings, function(s){\n\t\treturn s.indexOf(prefix)==0;\n\
    \t});\n}\n", "    var new_strings = [];\n    for (var i = 0; i < strings.length;\
    \ i++){\n        if (strings[i].substring(0, prefix.length) == prefix){\n    \
    \        new_strings.push(strings[i]);\n        }\n    }\n    return new_strings;\n\
    }\n", "    return strings.filter(function(a){\n        return a.startsWith(prefix);\n\
    \    });\n}\n", "  // your code here\n  var newarr = [];\n  for (var i = 0; i\
    \ < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      newarr.push(strings[i]);\n\
    \    }\n  }\n  return newarr;\n}\n", "\treturn strings.filter(function(string){return\
    \ string.startsWith(prefix)});\n}\n", "\tlet result = []\n\tfor (let i = 0; i\
    \ < strings.length; i++) {\n\t\tif (strings[i].startsWith(prefix)){\n\t\t\tresult.push(strings[i])\n\
    \t\t}\n\t}\n\treturn result\n}", "    var filtered = strings.filter(function(string){\n\
    \        return string.indexOf(prefix) == 0;\n    });\n    return filtered;\n\
    }\n", "    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ == 0;\n    });\n}", "    return strings.filter(\n\tfunction(string){\n\t   \
    \ return string.startsWith(prefix);\n\t});\n}\n", "    var result = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix))\n\
    \            result.push(strings[i]);\n    }\n    return result;\n}\n", "    return\
    \ strings.filter(function(str){return str.startsWith(prefix)});\n}", "    var\
    \ filtered = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n", "    // YOUR CODE HERE\n    return strings.filter(function(str){\n     \
    \   return starts_with(str, prefix);\n    });\n}\n", "    return strings.filter(function(element){\n\
    \        return element.substring(0, prefix.length) == prefix;\n    });\n}", "\t\
    var arr = [];\n\tfor(i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tarr.push(strings[i]);\n\t\t}\n\t}\n\treturn arr;\n}\n", "    var filtered\
    \ = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    return _.filter(strings, function(str){ return _.str.startsWith(str,\
    \ prefix); });\n}\n", "\tvar a = strings.filter(function(val){\n\t\tif(val.startsWith(prefix)){\n\
    \t\t\treturn val;\n\t\t}\n\t});\n\treturn a;\n}\n", "\treturn strings.filter(function(str){\n\
    \t\treturn str.slice(0, prefix.length) === prefix;\n\t});\n}\n\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
