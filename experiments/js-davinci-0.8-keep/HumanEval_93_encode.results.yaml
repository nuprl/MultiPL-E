name: HumanEval_93_encode
language: js
results:
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \tlet encMessage = '';\n\tconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\tfor (const\
    \ letter of message) {\n\t\tif (letter === letter.toUpperCase()) {\n\t\t\tencMessage\
    \ += letter.toLowerCase();\n\t\t} else {\n\t\t\tencMessage += letter.toUpperCase();\n\
    \t\t}\n\t}\n\tencMessage = encMessage.split('');\n\tfor (let i = 0; i < encMessage.length;\
    \ i++) {\n\t\tif (vowels.includes(encMessage[i])) {\n\t\t\tencMessage[i] = (encMessage[i]\
    \ == 'u') ? 'a' : String.fromCharCode(encMessage[i].charCodeAt(0) + 2);\n\t\t\
    }\n\t}\n\treturn encMessage.join('');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould equal\n\n'mWDCSKR'\n\
    \    at test (/tmp/tmpnka0zstj.js:35:10)\n    at Object.<anonymous> (/tmp/tmpnka0zstj.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \tvar output=\"\";\n\tvar vowels = ['a','e','i','o','u'];\n\tfor(var i=0;i<message.length;i++){\n\
    \t\tvar letter = message[i];\n\t\tvar n = message.charCodeAt(i);\n\t\t//console.log(n);\n\
    \t\tif(n >96 && n<123){\n\t\t\tn = n-32;\n\t\t\t//console.log(n);\n\t\t\toutput\
    \ += String.fromCharCode(n);\n\t\t}else if(n>64 && n<91){\n\t\t\tn = n+32;\n\t\
    \t\toutput += String.fromCharCode(n);\n\t\t}else{\n\t\t\toutput += message[i];\n\
    \t\t}\n\t}\n\tconsole.log(output);\n\tvar output2=\"\";\n\tfor(var i=0;i<output.length;i++){\n\
    \t\tvar letter = output[i];\n\t\tvar n = output.charCodeAt(i);\n\t\t//console.log(n);\n\
    \t\tif(n>96 && n<123){\n\t\t\tif(n==97){\n\t\t\t\tn=99;\n\t\t\t}else if(n==101){\n\
    \t\t\t\tn=103;\n\t\t\t}else if(n==105){\n\t\t\t\tn=107;\n\t\t\t}else if(n==111){\n\
    \t\t\t\tn=113;\n\t\t\t}else if(n==117){\n\t\t\t\tn=119;\n\t\t\t}else{\n\t\t\t\t\
    n+=2;\n\t\t\t}\n\t\t\toutput2 += String.fromCharCode(n);\n\t\t}else{\n\t\t\toutput2\
    \ += output[i];\n\t\t}\n\t}\n\tconsole.log(output2);\n}\nencode('test');\nencode('This\
    \ is a message');\nencode('Hello World');\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: "TEST\nTEST\ntHIS IS A MESSAGE\nvHIS IS A MESSAGE\nhELLO wORLD\njELLO yORLD\n\
    test\nvguv\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpg31re96q.js:64:10)\n    at Object.<anonymous> (/tmp/tmpg31re96q.js:71:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \tvar encode = {\n\t\ta: \"c\",\n\t\te: \"g\",\n\t\ti: \"k\",\n\t\to: \"q\",\n\
    \t\tu: \"w\",\n\t};\n\tvar result = [];\n\tfor (var i = 0; i < message.length;\
    \ i++) {\n\t\tvar letter = message[i];\n\t\tif (letter.toUpperCase() === letter){\n\
    \t\t\tletter = letter.toLowerCase();\n\t\t} else {\n\t\t\tletter = letter.toUpperCase();\n\
    \t\t}\n\t\tif (encode[letter]){\n\t\t\tresult.push(encode[letter]);\n\t\t} else\
    \ {\n\t\t\tresult.push(letter);\n\t\t}\n\t}\n\treturn result.join(\"\");\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould equal\n\n'mWDCSKR'\n\
    \    at test (/tmp/tmpbn6hvm6a.js:41:10)\n    at Object.<anonymous> (/tmp/tmpbn6hvm6a.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \t//turn message into array, split by letters\n\tvar messageArr = message.split('');\n\
    \t//turn letters into ascii codes\n\tvar asciiArr = [];\n\tfor (var i = 0; i <\
    \ messageArr.length; i++) {\n\t\tasciiArr.push(messageArr[i].charCodeAt(0));\n\
    \t}\n\t//incrment ascii codes\n\tvar newAsciiArr = [];\n\tfor (var i = 0; i <\
    \ asciiArr.length; i++) {\n\t\tnewAsciiArr.push(asciiArr[i] + 2);\n\t}\n\t//turn\
    \ ascii codes into letters\n\tvar newMessageArr = [];\n\tfor (var i = 0; i < newAsciiArr.length;\
    \ i++) {\n\t\tnewMessageArr.push(String.fromCharCode(newAsciiArr[i]));\n\t}\n\t\
    //join letters into a message\n\tvar newMessage = newMessageArr.join('');\n\t\
    return newMessage;\n}\nvar a = encode('this is a message');\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'VGUV'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpwu_dfrwc.js:39:10)\n    at Object.<anonymous> (/tmp/tmpwu_dfrwc.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var code = \"\";\n    var codeList = {'A':'C', 'E':'G', 'I':'K', 'O':'Q',\
    \ 'U':'W', 'Y':'A',\n                    'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w',\
    \ 'y':'a'};\n    for (var i = 0; i < message.length; i++){\n        if (message[i]\
    \ in codeList){\n            code += codeList[message[i]];\n        } else {\n\
    \            code += message[i];\n        }\n    }\n    return code;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TGST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpjaifzptd.js:30:10)\n    at Object.<anonymous> (/tmp/tmpjaifzptd.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \tvar vowels = ['a','e','i','o','u'];\n\tvar encoded_message = \"\";\n\tfor(var\
    \ i = 0; i < message.length; i++){\n\t\tvar current_letter = message[i];\n\t\t\
    var index_of_vowel = vowels.indexOf(current_letter.toLowerCase());\n\t\tif(index_of_vowel\
    \ != -1){\n\t\t\tvar new_index = index_of_vowel + 2;\n\t\t\tif(new_index > 4){\n\
    \t\t\t\tnew_index = new_index - 5;\n\t\t\t}\n\t\t\tif(current_letter == current_letter.toUpperCase()){\n\
    \t\t\t\tencoded_message += vowels[new_index].toUpperCase();\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tencoded_message += vowels[new_index];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\
    \tif(current_letter == current_letter.toUpperCase()){\n\t\t\t\tencoded_message\
    \ += current_letter.toLowerCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tencoded_message\
    \ += current_letter.toUpperCase();\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'tOst'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpj0t1ila4.js:45:10)\n    at Object.<anonymous> (/tmp/tmpj0t1ila4.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var output = '';\n    for(var i = 0; i < message.length; i++){\n        var\
    \ letter = message[i];\n        if(letter === letter.toUpperCase()){\n       \
    \     output += letter.toLowerCase();\n        } else {\n            output +=\
    \ letter.toUpperCase();\n        }\n    }\n    return output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'test'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpkdws_37j.js:29:10)\n    at Object.<anonymous> (/tmp/tmpkdws_37j.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = [];\n    for (var\
    \ i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i]) !=\
    \ -1){\n            encoded.push(vowels[(vowels.indexOf(message[i]) + 2) % 5]);\n\
    \        } else if (message[i] == message[i].toUpperCase()){\n            encoded.push(message[i].toLowerCase());\n\
    \        } else {\n            encoded.push(message[i].toUpperCase());\n     \
    \   }\n    }\n    return encoded.join('');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'test'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpwig5asrh.js:30:10)\n    at Object.<anonymous> (/tmp/tmpwig5asrh.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowel = \"aeiou\"\
    ;\n    var result = \"\";\n    //index\n    var a = 0;\n    var b = 0;\n    var\
    \ newIndex = 0;\n    var i = 0;\n    //loop\n    for(i = 0; i < message.length;\
    \ i++){\n        a = alphabet.indexOf(message[i]);\n        b = vowel.indexOf(message[i]);\n\
    \        //checks if lowercase\n        if(a >= 0 && a < alphabet.length){\n \
    \           if(message[i] === message[i].toUpperCase()){\n                //adds\
    \ 2 to index, changes to lowercase\n                newIndex = a + 2;\n      \
    \          if(newIndex >= alphabet.length){\n                    newIndex = newIndex\
    \ - alphabet.length;\n                }\n                result += alphabet[newIndex].toUpperCase();\n\
    \            }else{\n                //adds 2 to index\n                newIndex\
    \ = a + 2;\n                if(newIndex >= alphabet.length){\n               \
    \     newIndex = newIndex - alphabet.length;\n                }\n            \
    \    result += alphabet[newIndex];\n            }\n        }\n        //checks\
    \ if vowel\n        else if(b >= 0 && b < vowel.length){\n            if(message[i]\
    \ === message[i].toUpperCase()){\n                //adds 2 to index, changes to\
    \ lowercase\n                newIndex = b + 2;\n                if(newIndex >=\
    \ vowel.length){\n                    newIndex = newIndex - vowel.length;\n  \
    \              }\n                result += vowel[newIndex].toUpperCase();\n \
    \           }else{\n                //adds 2 to index\n                newIndex\
    \ = b + 2;\n                if(newIndex >= vowel.length){\n                  \
    \  newIndex = newIndex - vowel.length;\n                }\n                result\
    \ += vowel[newIndex];\n            }\n        }\n        //if neither add the\
    \ original letter\n        else{\n            result += message[i];\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpttaeytio.js:72:10)\n    at Object.<anonymous> (/tmp/tmpttaeytio.js:79:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = 'aeiouAEIOU';\n    var chars = message.split('');\n    for(var\
    \ i = 0; i < chars.length; i++){\n        var charCode = chars[i].charCodeAt(0);\n\
    \        var index = vowels.indexOf(chars[i]);\n        if(index > -1){\n    \
    \        if(index > 3){\n                charCode += 2;\n            } else {\n\
    \                charCode += 10;\n            }\n        } else {\n          \
    \  if(charCode > 90){\n                charCode -= 32;\n            } else {\n\
    \                charCode += 32;\n            }\n        }\n        chars[i] =\
    \ String.fromCharCode(charCode);\n    }\n    return chars.join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'tGst'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpm83bv_2a.js:40:10)\n    at Object.<anonymous> (/tmp/tmpm83bv_2a.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let alpha = 'abcdefghijklmnopqrstuvwxyz'\n    let result = message.split('').map(function(letter){\n\
    \        if(letter.toLowerCase() === letter){\n            return alpha[(alpha.indexOf(letter)\
    \ + 2) % 26]\n        }\n        else{\n            return alpha[(alpha.indexOf(letter.toLowerCase())\
    \ + 2) % 26].toUpperCase()\n        }\n    })\n    return result.join('')\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'VGUV'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpu8szzw35.js:28:10)\n    at Object.<anonymous> (/tmp/tmpu8szzw35.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var encodedMessage = '';\n  for\
    \ (var i = 0; i < message.length; i++) {\n    var char = message[i];\n    if (char\
    \ === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n\
    \      char = char.toUpperCase();\n    }\n    if (vowels.indexOf(char) > -1) {\n\
    \      if (char === 'u') {\n        char = 'a';\n      } else {\n        char\
    \ = vowels[vowels.indexOf(char) + 1];\n      }\n    }\n    encodedMessage += char;\n\
    \  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'tist'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpags2bl4i.js:38:10)\n    at Object.<anonymous> (/tmp/tmpags2bl4i.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'tist',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    message = message.toLowerCase();\n    var result = \"\";\n    for(var i =\
    \ 0; i < message.length; i++){\n        if(message[i]==\"a\"){\n            result\
    \ += \"c\";\n        }else if(message[i]==\"e\"){\n            result += \"g\"\
    ;\n        }else if(message[i]==\"i\"){\n            result += \"k\";\n      \
    \  }else if(message[i]==\"o\"){\n            result += \"q\";\n        }else if(message[i]==\"\
    u\"){\n            result += \"y\";\n        }else if(message[i]==\"t\"){\n  \
    \          result += \"G\";\n        }else if(message[i]==\"h\"){\n          \
    \  result += \"K\";\n        }else if(message[i]==\"s\"){\n            result\
    \ += \"C\";\n        }else if(message[i]==\"m\"){\n            result += \"M\"\
    ;\n        }else if(message[i]==\"a\"){\n            result += \"C\";\n      \
    \  }else if(message[i]==\"g\"){\n            result += \"S\";\n        }else{\n\
    \            result += message[i];\n        }\n    }\n    return result;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'GgCG'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpvlj18f4w.js:48:10)\n    at Object.<anonymous> (/tmp/tmpvlj18f4w.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'GgCG',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var results = '';\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (var\
    \ i = 0; i < message.length; i++) {\n    var char = message[i];\n    if (alphabet.indexOf(char.toLowerCase())\
    \ === -1) {\n      results += char;\n    } else if (char === char.toUpperCase())\
    \ {\n      results += alphabet[alphabet.indexOf(char.toLowerCase()) + 2].toUpperCase();\n\
    \    } else {\n      results += alphabet[alphabet.indexOf(char) + 2];\n    }\n\
    \  }\n  return results;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'VGUV'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpp2q39k48.js:32:10)\n    at Object.<anonymous> (/tmp/tmpp2q39k48.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var new_mess = message.split(\" \");\n    var final_mess = [];\n    var alphabet\
    \ = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"\
    z\"];\n    for(var i = 0; i < new_mess.length; i++){\n      var new_word = new_mess[i].split(\"\
    \");\n      var final_word = [];\n      for(var j = 0; j < new_word.length; j++){\n\
    \        if(new_word[j] === new_word[j].toUpperCase()){\n          var low = new_word[j].toLowerCase();\n\
    \          var index = alphabet.indexOf(low);\n          if(index === alphabet.length-2){\n\
    \            var new_letter = alphabet[0];\n            final_word.push(new_letter.toUpperCase());\n\
    \          }else if(index === alphabet.length-1){\n            var new_letter\
    \ = alphabet[1];\n            final_word.push(new_letter.toUpperCase());\n   \
    \       }else{\n            var new_letter = alphabet[index+2];\n            final_word.push(new_letter.toUpperCase());\n\
    \          }\n        }else{\n          var low = new_word[j].toLowerCase();\n\
    \          var index = alphabet.indexOf(low);\n          if(index === alphabet.length-2){\n\
    \            var new_letter = alphabet[0];\n            final_word.push(new_letter);\n\
    \          }else if(index === alphabet.length-1){\n            var new_letter\
    \ = alphabet[1];\n            final_word.push(new_letter);\n          }else{\n\
    \            var new_letter = alphabet[index+2];\n            final_word.push(new_letter);\n\
    \          }\n        }\n      }\n      final_mess.push(final_word.join(\"\"));\n\
    \    }\n    return final_mess.join(\" \");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'VGUV'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmph4wdm84l.js:56:10)\n    at Object.<anonymous> (/tmp/tmph4wdm84l.js:63:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \tvowels = {\n\t\ta: 'c',\n\t\te: 'g',\n\t\ti: 'k',\n\t\to: 'q',\n\t\tu: 'y'\n\
    \t}\n\tvar message = message.toLowerCase();\n\tvar result = '';\n\tfor (var i\
    \ = 0; i < message.length; i++) {\n\t\tif (vowels[message[i]]){\n\t\t\tresult\
    \ += vowels[message[i]];\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t\
    }\n\tconsole.log(result.toUpperCase());\n}\nencode('This is a message');\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: "THKS KS C MGSSCGG\nTGST\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmp5x9rvvms.js:37:10)\n    at Object.<anonymous> (/tmp/tmp5x9rvvms.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    var letters = [];\n    for\
    \ (var i = 0; i < message.length; i++){\n        letters.push(message[i]);\n \
    \   }\n    for (var j = 0; j < letters.length; j++){\n        var shift = letters[j].charCodeAt(0);\n\
    \        if (shift >= 65 && shift <= 90){\n            var newShift = shift +\
    \ 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n  \
    \      else if (shift >= 97 && shift <= 122){\n            newShift = shift -\
    \ 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n  \
    \      if (vowels.includes(letters[j])){\n            if (letters[j] === 'u'){\n\
    \                letters[j] = 'a';\n            }\n            else {\n      \
    \          var newVowel = letters[j].charCodeAt(0) + 2;\n                letters[j]\
    \ = String.fromCharCode(newVowel);\n            }\n        }\n    }\n    return\
    \ letters.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould equal\n\n'mWDCSKR'\n\
    \    at test (/tmp/tmpm97i7gvn.js:45:10)\n    at Object.<anonymous> (/tmp/tmpm97i7gvn.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    // your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpd3f90b3n.js:20:10)\n    at Object.<anonymous> (/tmp/tmpd3f90b3n.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = \"\";\n    //\
    \ if (typeof message != \"string\"){\n    //     throw \"Value given was not a\
    \ string\";\n    // }\n    for (var i = 0; i < message.length; i++){\n       \
    \ if (vowels.indexOf(message[i].toLowerCase()) !== -1){\n            if (message[i]\
    \ === message[i].toUpperCase()){\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase())\
    \ + 2].toUpperCase();\n            } else {\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase())\
    \ + 2];\n            }\n        } else if (message[i] === message[i].toUpperCase()){\n\
    \            encoded += message[i].toLowerCase();\n        } else {\n        \
    \    encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'tOst'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp0t1oymyy.js:38:10)\n    at Object.<anonymous> (/tmp/tmp0t1oymyy.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var alphabet_array = alphabet.split('');\n\
    \    var encoded_message = '';\n    var message_array = message.split('');\n \
    \   var vowels = 'aeiou'.split('');\n    var alphabet_position = 0;\n    var message_position\
    \ = 0;\n    for (var i = 0; i < message_array.length; i++){\n        alphabet_position\
    \ = alphabet_array.indexOf(message_array[i]);\n        message_position = vowels.indexOf(message_array[i]);\n\
    \        if (message_array[i] === message_array[i].toUpperCase()){\n         \
    \   alphabet_position = alphabet_array.indexOf(message_array[i].toLowerCase());\n\
    \            if (message_position === -1){\n                encoded_message +=\
    \ alphabet_array[alphabet_position].toUpperCase();\n            } else {\n   \
    \             encoded_message += vowels[message_position + 2].toUpperCase();\n\
    \            }\n        } else {\n            if (message_position === -1){\n\
    \                encoded_message += alphabet_array[alphabet_position];\n     \
    \       } else {\n                encoded_message += vowels[message_position +\
    \ 2];\n            }\n        }\n    }\n    return encoded_message;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpaerpejsb.js:45:10)\n    at Object.<anonymous> (/tmp/tmpaerpejsb.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
