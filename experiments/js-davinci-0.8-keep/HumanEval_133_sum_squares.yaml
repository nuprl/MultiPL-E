name: HumanEval_133_sum_squares
language: js
prompt: "//You are given a list of numbers.\n// You need to return the sum of squared\
  \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
  \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
  \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be\
  \ 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
  \ the output should be 6\nfunction sum_squares(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4,\
  \ 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0,\
  \ 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n\
  \  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n      \
    \  var number = lst[i];\n        var numberSquared = Math.ceil(number * number);\n\
    \        sum += numberSquared;\n    }\n    return sum;\n}\n", "    return lst.map(num\
    \ => Math.ceil(num))\n        .map(num => num*num)\n        .reduce((a,b) => a+b);\n\
    }", "var sum = 0;\nfor(var i = 0; i < lst.length; i++){\n  sum = sum + Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n}\nreturn sum;\n}", "    let sum = 0;\n    for(let i =\
    \ 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}", "  let newArr = lst.map(element => {\n    return\
    \ Math.ceil(element) ** 2;\n  });\n  return newArr.reduce((acc, curr) => {\n \
    \   return acc + curr;\n  });\n}\n", "    return lst.map(item => Math.ceil(item)).reduce((acc,\
    \ item) => acc + item * item, 0);\n}\n", "    for(var i = 0; i < lst.length; i++){\n\
    \        lst[i] = Math.ceil(lst[i]);\n    }\n    return lst.reduce(function(a,b){\n\
    \        return a + (b * b);\n    },0);\n}", "    return lst.map(x => Math.ceil(x)).reduce((a,\
    \ b) => Math.pow(a, 2) + Math.pow(b, 2));\n}\n", "    return lst.map(function(value)\
    \ {\n        return Math.pow(Math.ceil(value), 2);\n    }).reduce(function(a,\
    \ b) {\n        return a + b;\n    });\n}\n", "    return lst.map(a => Math.ceil(a)).reduce((a,\
    \ b) => a + b ** 2, 0);\n}", "    return lst.map(x => Math.ceil(x)).reduce((a,\
    \ b) => Math.pow(a, 2) + Math.pow(b, 2));\n}\n", "    var squaredNumber = lst.map(function(num){\n\
    \        return Math.ceil(num)\n    })\n    var summed = squaredNumber.reduce(function(acc,\
    \ curr){\n        return acc + curr**2\n    }, 0)\n    return summed\n}", "  \
    \  return lst.map(i => Math.ceil(i)).reduce((a,b) => a + b * b, 0);\n}\n", " \
    \ return lst.map(x => Math.ceil(x)**2).reduce((acc, cur) => acc + cur);\n}\n",
  "    let squared = lst.map(function(x){\n        return Math.pow(Math.ceil(x), 2);\n\
    \    });\n    return squared.reduce(function(a, b){\n        return a + b;\n \
    \   });\n}\n", "    let total = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        let ceilNum = Math.ceil(lst[i]);\n        total += ceilNum * ceilNum;\n\
    \    }\n    return total;\n}\n", "\tvar sum = 0;\n\tfor(var i = 0; i < lst.length;\
    \ i++){\n\t\tsum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\t}\n\treturn sum;\n\
    }", "  let squares = [];\n  for (let i = 0; i < lst.length; i++) {\n    let element\
    \ = lst[i];\n    let rounded = Math.ceil(element);\n    let squared = rounded\
    \ * rounded;\n    squares.push(squared);\n  }\n  let sum = 0;\n  for (let i =\
    \ 0; i < squares.length; i++) {\n    let element = squares[i];\n    sum += element;\n\
    \  }\n  return sum;\n}\n", "    return lst.map(Math.ceil).reduce((a,b)=>a+(b*b),0);\n\
    }\n", "\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
