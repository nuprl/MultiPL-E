name: HumanEval_6_parse_nested_parens
language: js
results:
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var depth = 0;\n    var max_depth = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            depth++;\n         \
    \   if(depth > max_depth){\n                max_depth = depth;\n            }\n\
    \        }\n        else if(paren_string[i] == ')'){\n            depth--;\n \
    \       }\n        else if(paren_string[i] == ' '){\n            result.push(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_groups\
    \ = paren_string.split(' ');\n\tvar output = [];\n\tfor(var i = 0; i < paren_groups.length;\
    \ i++){\n\t\tvar parens = paren_groups[i];\n\t\tvar current_level = 0;\n\t\tvar\
    \ max_level = 0;\n\t\tfor(var j = 0; j < parens.length; j++){\n\t\t\tif(parens[j]\
    \ === '('){\n\t\t\t\tcurrent_level++;\n\t\t\t\tif(current_level > max_level){\n\
    \t\t\t\t\tmax_level = current_level;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrent_level--;\n\
    \t\t\t}\n\t\t}\n\t\toutput.push(max_level);\n\t}\n\treturn output;\n}\n\nmodule.exports\
    \ = {\n\t\"parse_nested_parens\": parse_nested_parens\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var tokens = paren_string.split(\"\
    \ \"); //break the input string into groups\n  var max_counts = [];\n  for(var\
    \ i = 0; i < tokens.length; i++){\n    var max_count = 0;\n    var count = 0;\n\
    \    for(var j = 0; j < tokens[i].length; j++){\n      if(tokens[i][j] == '('){\n\
    \        count++;\n        if(count > max_count){\n          max_count = count;\n\
    \        }\n      }\n      else if(tokens[i][j] == ')'){\n        count--;\n \
    \     }\n    }\n    max_counts.push(max_count);\n  }\n  return max_counts;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var ret = [];\n\
    \    var max_level = 0;\n    var level = 0;\n    var stack = [];\n    var inside_str\
    \ = false;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            level++;\n            stack.push(paren_string[i]);\n \
    \       }\n        else if(paren_string[i] == ')'){\n            if(level == 0){\n\
    \                inside_str = false;\n                ret.push(max_level);\n \
    \               max_level = 0;\n                level = 0;\n                stack\
    \ = [];\n            }\n            else{\n                stack.pop();\n    \
    \            level--;\n            }\n        }\n        else if(paren_string[i]\
    \ == ' '){\n            if(level == 0){\n                inside_str = false;\n\
    \                ret.push(max_level);\n                max_level = 0;\n      \
    \          level = 0;\n                stack = [];\n            }\n          \
    \  else{\n                if(level > max_level){\n                    max_level\
    \ = level;\n                }\n            }\n        }\n        else{\n     \
    \       if(!inside_str){\n                inside_str = true;\n               \
    \ if(stack.length > 0){\n                    stack.push(paren_string[i]);\n  \
    \              }\n            }\n            else{\n                if(stack.length\
    \ > 0){\n                    stack.push(paren_string[i]);\n                }\n\
    \            }\n        }\n    }\n    if(stack.length > 0){\n        console.log(\"\
    Invalid Parentheses String: \" + paren_string);\n    }\n    else{\n        ret.push(max_level);\n\
    \    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpr3h4kto1.js:72:10)\n    at Object.<anonymous> (/tmp/tmpr3h4kto1.js:77:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var array = paren_string.split(' ');\n    for(var i = 0; i < array.length;\
    \ i++){\n        var temp = 0;\n        var str = array[i];\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] == '('){\n               \
    \ temp += 1;\n            }\n            else if(str[j] == ')'){\n           \
    \     result.push(temp);\n                temp -= 1;\n            }\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 2, 1, 3, 2, 1, 1, 3, 2, 2, 2, 1 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpv230xu9y.js:30:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpv230xu9y.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 1, 3, 2,\n    1, 1, 3, 2, 2,\n    2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  //var paren_levels\
    \ = [];\n  var paren_levels = new Array();\n  var paren_stack = [];\n  var i =\
    \ 0;\n  while(i < paren_string.length){\n    if(paren_string[i] == '('){\n   \
    \   paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] ==\
    \ ')'){\n      if(paren_stack.length > 0){\n        paren_stack.pop();\n     \
    \ }\n      else{\n        paren_levels.push(0);\n      }\n    }\n    else if(paren_string[i]\
    \ == ' '){\n      paren_levels.push(paren_stack.length);\n    }\n    i++;\n  }\n\
    \  return paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpatsbq652.js:36:10)\n    at Object.<anonymous> (/tmp/tmpatsbq652.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar counter =\
    \ 0;\n\tvar parens = [];\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\t\
    if(paren_string[i] == '('){\n\t\t\tcounter++;\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ')'){\n\t\t\tcounter--;\n\t\t}\n\t\telse if(paren_string[i] == ' '){\n\t\t\
    \tparens.push(counter);\n\t\t\tcounter = 0;\n\t\t}\n\t}\n\treturn parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmp4l3wpi7m.js:29:10)\n    at Object.<anonymous> (/tmp/tmp4l3wpi7m.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tlet levels = [];\n\
    \tfor(let substring of paren_string.split(' ')){\n\t\tlet paren = 0;\n\t\tlet\
    \ max_paren = 0;\n\t\tfor(let i = 0; i < substring.length; i++){\n\t\t\tif(substring[i]\
    \ === '('){\n\t\t\t\tparen++;\n\t\t\t\tif(paren > max_paren){\n\t\t\t\t\tmax_paren\
    \ = paren;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(substring[i] === ')'){\n\t\t\t\t\
    paren--;\n\t\t\t}\n\t\t}\n\t\tlevels.push(max_paren);\n\t}\n\treturn levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var groups =\
    \ paren_string.split(' ');\n    var count = 0;\n    var max = 0;\n    var result\
    \ = [];\n    for(var i = 0; i < groups.length; i++){\n        count = 0;\n   \
    \     for(var j = 0; j < groups[i].length; j++){\n            if(groups[i][j]\
    \ == '('){\n                count++;\n            }\n            else if(groups[i][j]\
    \ == ')'){\n                count--;\n            }\n            if(count > max){\n\
    \                max = count;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 3, 3 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpqz4jgnip.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqz4jgnip.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 3, 3 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpjgct1f4h.js:15:10)\n    at Object.<anonymous> (/tmp/tmpjgct1f4h.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_count\
    \ = 0;\n    var max_paren = 0;\n    var paren_depth = [];\n    for (var i = 0;\
    \ i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n     \
    \       paren_count += 1;\n            if (paren_count > max_paren){\n       \
    \         max_paren = paren_count;\n            }\n        } else if (paren_string[i]\
    \ == ')'){\n            paren_count -= 1;\n        } else if (paren_string[i]\
    \ == ' '){\n            paren_depth.push(max_paren);\n            max_paren =\
    \ 0;\n            paren_count = 0;\n        }\n    }\n    return paren_depth;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 1 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpqvehnb8x.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqvehnb8x.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens_regex\
    \ = /\\(+\\)/g;\n    var parens_captured = paren_string.match(parens_regex);\n\
    \    var parens_counts = parens_captured.map(function(elem){\n        var open_parens\
    \ = 0;\n        var close_parens = 0;\n        var max_parens = 0;\n        for(var\
    \ i = 0; i < elem.length; i++){\n            if(elem[i] === '('){\n          \
    \      open_parens++;\n                if(open_parens > max_parens){\n       \
    \             max_parens = open_parens;\n                }\n            }\n  \
    \          else if(elem[i] === ')'){\n                close_parens++;\n      \
    \      }\n        }\n        return max_parens;\n    });\n    return parens_counts;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 1, 3, 1, 3, 1, 1 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpenp9mw0x.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpenp9mw0x.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 3, 1,\n    3, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    //*** The function\
    \ should return a list of integers. ***\n    var items = paren_string.split('\
    \ ');\n    var results = [];\n    for (var i = 0; i < items.length; i++) {\n \
    \       var count = 0;\n        var max_count = 0;\n        for (var j = 0; j\
    \ < items[i].length; j++) {\n            if (items[i][j] == '(') {\n         \
    \       count += 1;\n                if (count > max_count) {\n              \
    \      max_count = count;\n                }\n            } else if (items[i][j]\
    \ == ')') {\n                count -= 1;\n            }\n        }\n        results.push(max_count);\n\
    \    }\n    return results;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // TODO: complete\
    \ this function\n    var max = 0;\n    var final = [];\n    var myarray = paren_string.split(\"\
    \ \");\n    for (var i = 0; i < myarray.length; i++) {\n        if (myarray[i]\
    \ === '()') {\n            final.push(1);\n        } else {\n            var string\
    \ = myarray[i];\n            var counter = 0;\n            var max = 0;\n    \
    \        for (var j = 0; j < string.length; j++) {\n                if (string[j]\
    \ === '(') {\n                    counter++;\n                    if (counter\
    \ > max) {\n                        max = counter;\n                    }\n  \
    \              } else if (string[j] === ')') {\n                    counter--;\n\
    \                }\n            }\n            final.push(max);\n        }\n \
    \   }\n    return final;\n}\n\n\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_groups.length;\
    \ i++){\n        let stack = [];\n        let level = 0;\n        let max_level\
    \ = 0;\n        for(let char of paren_groups[i]){\n            if(char === '('){\n\
    \                stack.push(char);\n                level++;\n               \
    \ if(level > max_level){\n                    max_level = level;\n           \
    \     }\n            }\n            else if(char === ')'){\n                if(stack.length\
    \ > 0){\n                    stack.pop();\n                    level--;\n    \
    \            }\n            }\n        }\n        result.push(max_level);\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let parens =\
    \ paren_string.split(' ')\n    let levels = []\n    for (let paren of parens){\n\
    \        let level = 0\n        let max_level = 0\n        for (let i = 0; i <\
    \ paren.length; i++){\n            if (paren[i] === '('){\n                level\
    \ += 1\n            }\n            else if (paren[i] === ')'){\n             \
    \   level -= 1\n            }\n            if (level > max_level){\n         \
    \       max_level = level\n            }\n        }\n        levels.push(max_level)\n\
    \    }\n    return levels\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var depth =\
    \ 0;\n    var max_depth = 0;\n    var result = [];\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        var c = paren_string[i];\n        if(c == '('){\n           \
    \ depth += 1;\n            max_depth = Math.max(max_depth, depth);\n        }else\
    \ if(c == ')'){\n            depth -= 1;\n        }else if(c == ' '){\n      \
    \      result.push(max_depth);\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups =\
    \ paren_string.split(' ');\n    let output = [];\n    for(let i = 0; i < groups.length;\
    \ i++){\n        let current_group = groups[i];\n        let count = 0;\n    \
    \    let maximum = 0;\n        for(let j = 0; j < current_group.length; j++){\n\
    \            if(current_group[j] === '('){\n                count++;\n       \
    \         if(count > maximum){\n                    maximum = count;\n       \
    \         }\n            }\n            else if(current_group[j] === ')'){\n \
    \               count--;\n            }\n        }\n        output.push(maximum);\n\
    \    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var group =\
    \ [];\n    var group_arr = paren_string.split(' ');\n    for(var i = 0; i < group_arr.length;\
    \ i++){\n        var paren = group_arr[i];\n        var count = 0;\n        var\
    \ max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        group.push(max);\n    }\n    return group;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let result = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      let count = 0;\n      while (paren_string[i] === '(') {\n    \
    \    count += 1;\n        i += 1;\n      }\n      result.push(count);\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 1, 3, 1, 3, 1, 1 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmp95x66gf8.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp95x66gf8.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 3, 1,\n    3, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
