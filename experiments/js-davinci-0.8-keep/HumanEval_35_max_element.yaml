name: HumanEval_35_max_element
language: js
prompt: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n//\
  \ 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
  \ max_element(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
completions: ["\tvar max = -Infinity;\n\tvar length = l.length;\n\tfor(var i = 0;\
    \ i < length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n", "    return reduce(l, function(acc, e){return Math.max(acc, e)});\n\
    }\n", "\n}\n", "\treturn _.max(l);\n}\n", "    var max = l[0];\n    for(var i\
    \ = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}", "\treturn Math.max.apply(null, l);\n}\n",
  "    let max = l[0];\n    for(let e of l){\n        if(e > max){\n            max\
    \ = e;\n        }\n    }\n    return max;\n}\n", "    if(is_null(l)){\n      \
    \  return error(max_element, \"empty list\");\n    }\n    else{\n        return\
    \ max_element_max(car(l), cdr(l));\n    }\n}\n", "    let i = l.length;\n    let\
    \ max = l[0];\n    while(i--){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    if(l.length === 0){\n        return\
    \ null;\n    }\n    var max = 0;\n    for(var i = 0; i < l.length; i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    if(length(l) == 0){\n        return \"Cannot calculate max element\
    \ of empty list.\";\n    } else {\n        var max = l[0];\n        for(var i\
    \ = 1; i < length(l); i++){\n            if(l[i] > max){\n                max\
    \ = l[i];\n            }\n        }\n        return max;\n    }\n}\n", "    var\
    \ max = 0;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "   // If list\
    \ empty, return undefined\n   if (l.length == 0) {\n    return undefined;\n  \
    \ }\n\n   let max = l[0];\n   for (let i = 1; i < l.length; i++) {\n     max =\
    \ Math.max(max, l[i]);\n   }\n   return max;\n}\n", "  if(l.length == 0){\n  \
    \  return 0;\n  }\n  var h = l[0];\n  for(var i = 1; i < l.length; i++){\n   \
    \ if(l[i] > h){\n      h = l[i];\n    }\n  }\n  return h;\n}", "  return l.reduce(function(a,\
    \ b) {\n    return Math.max(a, b);\n  });\n}\n", "\tif(l.length == 0){\n\t\treturn\
    \ null;\n\t}else{\n\t\tif(l.length == 1){\n\t\t\treturn l[0];\n\t\t}else{\n\t\t\
    \tif(l[0] > l[1]){\n\t\t\t\tl.splice(1, 1);\n\t\t\t\treturn max_element(l);\n\t\
    \t\t}else{\n\t\t\t\tl.splice(0, 1);\n\t\t\t\treturn max_element(l);\n\t\t\t}\n\
    \t\t}\n\t}\n}\n", "    return Math.max.apply(null, l);\n}\n", "  return Math.max.apply(null,\
    \ l);\n}\n", "  var m = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i]\
    \ > m){\n      m = l[i];\n    }\n  }\n  return m;\n}\n", "    return Math.max.apply(null,\
    \ l);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
