name: HumanEval_87_get_row
language: js
prompt: "//You are given a 2 dimensional data, as a nested lists,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the list,\n// and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n\
  // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n\
  // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst, x){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
  \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
  \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n\
  \  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        let sublst = lst[i];\n        for (let j = 0; j < sublst.length; j++)\
    \ {\n            if (sublst[j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    return result.sort((a, b) => {\n       \
    \ if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return\
    \ a[0] - b[0];\n    });\n}", "\tlet arr = [];\n\tif (lst.length == 0) {\n\t\t\
    return arr;\n\t}\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tfor (let j = 0;\
    \ j < lst[i].length; j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tarr.push([i,\
    \ j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.sort((a, b) => a[0] - b[0] || b[1] -\
    \ a[1]);\n}\n", "    let tuples = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                tuples.push([i, j]);\n            }\n        }\n \
    \   }\n    tuples.sort(function (a, b) {\n        return a[0] - b[0];\n    });\n\
    \    tuples.sort(function (a, b) {\n        return b[1] - a[1];\n    });\n   \
    \ return tuples;\n}", "    let result = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }", "    if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length;\
    \ j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    result.sort(function(a, b){\n        if(a[0]\
    \ < b[0]){\n            return -1;\n        }\n        if(a[0] > b[0]){\n    \
    \        return 1;\n        }\n        if(a[1] > b[1]){\n            return -1;\n\
    \        }\n        if(a[1] < b[1]){\n            return 1;\n        }\n     \
    \   return 0;\n    });\n    return result;\n}\n", "    let res = []\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let temp = lst[i].reduce((acc,item, ind)\
    \ => item === x ? acc.concat([[i, ind]]) : acc, [])\n        res = res.concat(temp)\n\
    \    }\n    res.sort((a,b) => a[0] - b[0] || b[1] - a[1])\n    return res\n}\n",
  "    let res = [];\n    lst.forEach((item, i) => {\n        item.forEach((elem,\
    \ j) => {\n            if (elem === x) res.push([i, j]);\n        });\n    });\n\
    \    return res.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "    let arr\
    \ = []\n    lst.forEach((item, index) => {\n        item.forEach((item2, index2)\
    \ => {\n            if (item2 === x) {\n                arr.push([index, index2])\n\
    \            }\n        })\n    })\n    arr.sort((a, b) => {\n        if (a[0]\
    \ < b[0]) {\n            return -1\n        } else if (a[0] > b[0]) {\n      \
    \      return 1\n        } else {\n            if (a[1] > b[1]) {\n          \
    \      return -1\n            } else if (a[1] < b[1]) {\n                return\
    \ 1\n            } else {\n                return 0\n            }\n        }\n\
    \    })\n    console.log(arr)\n    return arr\n}\nget_row([\n    [1,2,3,4,5,6],\n\
    \    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1)\nget_row([], 1)\nget_row([[], [1],\
    \ [1, 2, 3]], 3)\n", "    let new_arr = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let arr = lst[i];\n        let index = arr.indexOf(x);\n   \
    \     while (index >= 0) {\n            new_arr.push([i, index]);\n          \
    \  index = arr.indexOf(x, index + 1);\n        }\n    }\n    new_arr.sort(function\
    \ (a, b) {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n  \
    \      } else {\n            return b[1] - a[1];\n        }\n    });\n    return\
    \ new_arr;\n}\n", "    var result = [];\n    for (var i = 0; i < lst.length; i++)\
    \ {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push([i, j]);\n            }\n        }\n  \
    \  }\n    return result.sort(function(a, b) {\n        return (a[0] - b[0]) ||\
    \ (b[1] - a[1]);\n    });\n}\n", "  let result = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n\
    \      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\
    \  return result.sort(function(a, b) {\n    if (a[0] === b[0]) {\n      return\
    \ b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n}\n", "    // write code\
    \ here.\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        const element = lst[i];\n        for (let j = 0; j < element.length;\
    \ j++) {\n            const e = element[j];\n            if (e === x) {\n    \
    \            result.push([i, j]);\n            }\n        }\n    }\n    return\
    \ result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1]\
    \ - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n\nconst lst = [\n\
    \    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n];\n\nconst list =\
    \ [\n    [],\n    [1],\n    [1, 2, 3]\n];\n", "    let arr = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] === x) {\n                arr.push([i, j]);\n \
    \           }\n        }\n    }\n    return arr.sort((a, b) => a[0] - b[0] ||\
    \ b[1] - a[1]);\n}\n", "    var coordinates = [];\n    var row_num = 0;\n    var\
    \ col_num = 0;\n    for (var i = 0; i < lst.length; i++) {\n        for (var j\
    \ = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n        \
    \        coordinates.push([row_num, col_num]);\n            }\n            col_num\
    \ += 1;\n        }\n        row_num += 1;\n        col_num = 0;\n    }\n    coordinates.sort(function(a,\
    \ b) {\n        if (a[0] < b[0]) {\n            return -1;\n        }\n      \
    \  if (a[0] > b[0]) {\n            return 1;\n        }\n        if (a[1] > b[1])\
    \ {\n            return -1;\n        }\n        if (a[1] < b[1]) {\n         \
    \   return 1;\n        }\n        return 0;\n    });\n    return coordinates;\n\
    }", "    let array = [];\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ let row = lst[i];\n        for (let j = 0; j < row.length; j++) {\n        \
    \    if (x === row[j]) {\n                array.push([i, j]);\n            }\n\
    \        }\n    }\n    return array.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));\n\
    }", "  let array = []\n  let row = 0\n  for(let i = 0; i < lst.length; i++){\n\
    \    let columns = 0\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j]\
    \ === x){\n        array.push([row, columns])\n      }\n      columns++\n    }\n\
    \    row++\n  }\n  let sorted = array.sort(function(a, b){\n    if(a[0] === b[0]){\n\
    \      return b[1] - a[1]\n    }\n    return a[0] - b[0]\n  })\n  return sorted\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    let result =\
    \ [];\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while\
    \ (j < lst[i].length) {\n            if (lst[i][j] == x) {\n                result.push([i,\
    \ j]);\n            }\n            j++;\n        }\n        j = 0;\n        i++;\n\
    \    }\n    result.sort(function(a, b) {\n        if (a[0] == b[0]) {\n      \
    \      return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    \    return result;\n}", "    var result = [];\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push([i, j]);\n            }\n        }\n  \
    \  }\n    return result.sort(function(a, b) {\n        if (a[0] < b[0]) {\n  \
    \          return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n\
    \        } else {\n            if (a[1] > b[1]) {\n                return -1;\n\
    \            } else if (a[1] < b[1]) {\n                return 1;\n          \
    \  } else {\n                return 0;\n            }\n        }\n    });\n}\n",
  "    let row = [];\n    let obj = {};\n    for(let i = 0; i < lst.length; i++){\n\
    \        obj[i] = [];\n        for(let j = 0; j < lst[i].length; j++){\n     \
    \       if(lst[i][j] === x){\n                obj[i].push(j);\n            }\n\
    \        }\n    }\n    for(let i in obj){\n        for(let j of obj[i]){\n   \
    \         row.push([i, j]);\n        }\n    }\n    let res = row.sort((a, b) =>\
    \ {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n    return res;\n}",
  "  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j =\
    \ 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i,\
    \ j]);\n      }\n    }\n  }\n  let sortByRow = result.sort((a, b) => {\n    return\
    \ a[0] - b[0];\n  });\n  return sortByRow.map(x => {\n    return [x[0], -x[1]];\n\
    \  }).sort((a, b) => {\n    return a[1] - b[1];\n  }).map(x => {\n    return [x[0],\
    \ -x[1]];\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
