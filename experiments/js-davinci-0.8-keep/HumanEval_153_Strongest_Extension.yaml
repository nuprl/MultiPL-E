name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["\treturn class_name + '.' + extensions.reduce((a, b) => {\n\t\tlet\
    \ A = a.toUpperCase().split('').length - a.toLowerCase().split('').length;\n\t\
    \tlet B = b.toUpperCase().split('').length - b.toLowerCase().split('').length;\n\
    \t\treturn A > B ? a : b;\n\t})\n}\n", "    let aux = '';\n    let start = false;\n\
    \    let strongest = '';\n    let strongest_strength = 0;\n    let strength =\
    \ 0;\n    let cap = 0;\n    let sm = 0;\n    let first = true;\n    for(let extension\
    \ of extensions){\n        aux = '';\n        start = false;\n        cap = 0;\n\
    \        sm = 0;\n        strength = 0;\n        first = true;\n        for(let\
    \ ch of extension){\n            if(ch.charCodeAt(0) >= 65 && ch.charCodeAt(0)\
    \ <= 90){\n                start = true;\n                if(first){\n       \
    \             aux += ch;\n                    first = false;\n               \
    \ }\n                cap++;\n            }\n            else if(ch.charCodeAt(0)\
    \ >= 97 && ch.charCodeAt(0) <= 122){\n                start = true;\n        \
    \        sm++;\n            }\n            else if(start){\n                break;\n\
    \            }\n        }\n        strength = cap - sm;\n        if(strength >\
    \ strongest_strength){\n            strongest_strength = strength;\n         \
    \   strongest = aux;\n        }\n    }\n    return class_name + '.' + strongest;\n\
    }", "    var strength = -99;\n    var result = 'my_class.AA';\n    for(var extension\
    \ of extensions){\n        var cap = 0;\n        var sm = 0;\n        for(var\
    \ i = 0; i < extension.length; i++){\n            if(extension[i] == extension[i].toUpperCase()){\n\
    \                cap++;\n            }else{\n                sm++;\n         \
    \   }\n        }\n        var temp = cap - sm;\n        if(temp > strength){\n\
    \            strength = temp;\n            result = class_name + '.' + extension;\n\
    \        }\n    }\n    return result;\n}\n", "  let strongest = [0, extensions[0]];\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    let strength = [...extension].reduce((acc, cur) => {\n      cur = cur.toUpperCase()\
    \ === cur ? 1 : -1;\n      return acc + cur;\n    }, 0);\n    if (strength >=\
    \ strongest[0]) {\n      strongest = [strength, extension];\n    }\n  }\n  return\
    \ `${class_name}.${strongest[1]}`;\n}\n", "    let strongest = {ext: '', str:\
    \ -Infinity};\n    for(let x = 0; x < extensions.length; x++){\n        let cap\
    \ = 0, sm = 0;\n        for(let y = 0; y < extensions[x].length; y++){\n     \
    \       if(extensions[x][y] >= 'A' && extensions[x][y] <= 'Z'){\n            \
    \    cap++;\n            }\n            else{\n                sm++;\n       \
    \     }\n        }\n        if(cap - sm > strongest.str){\n            strongest.ext\
    \ = extensions[x];\n            strongest.str = cap - sm;\n        }\n    }\n\
    \    return class_name + '.' + strongest.ext;\n}\n", "  var res = null;\n  var\
    \ strength = 0;\n  extensions.forEach(function(val, index){\n    var temp = 0;\n\
    \    val.split('').forEach(function(val, index){\n      if (val.toUpperCase()\
    \ === val) temp += 1;\n      else temp -= 1;\n    });\n    if (temp > strength)\
    \ {\n      strength = temp;\n      res = val;\n    }\n  });\n  return class_name\
    \ + '.' + res;\n}\n", "    var strength = 0;\n    var strongest_extension = '';\n\
    \    extensions.forEach(element => {\n        var cur_strength = element.split('').reduce((acc,\
    \ cur) => {\n            if (/[A-Z]/.test(cur)) acc.caps++;\n            if (/[a-z]/.test(cur))\
    \ acc.smalls++;\n            return acc;\n        }, {caps: 0, smalls: 0});\n\
    \        if (strength < cur_strength.caps - cur_strength.smalls) {\n         \
    \   strength = cur_strength.caps - cur_strength.smalls;\n            strongest_extension\
    \ = element;\n        }\n    });\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var ext_strength = [];\n    extensions.forEach(function(e){\n     \
    \   var upper = e.replace(/[^A-Z]/g, '').length;\n        var lower = e.replace(/[^a-z]/g,\
    \ '').length;\n        ext_strength.push([upper - lower, e]);\n    });\n    ext_strength.sort();\n\
    \    return class_name + '.' + ext_strength[ext_strength.length - 1][1];\n}\n",
  "\tvar arr = []\n\tfor(var i = 0; i < extensions.length; i++){\n\t\tarr.push(extensions[i].split(''))\n\
    \t}\n\t//[[\"S\", \"E\", \"r\", \"v\", \"i\", \"N\", \"G\", \"S\", \"l\", \"i\"\
    , \"C\", \"e\", \"s\"], [\"C\", \"h\", \"e\", \"e\", \"s\", \"e\"], [\"S\", \"\
    t\", \"u\", \"F\", \"f\", \"e\", \"d\"]]\n\tvar num = 0\n\tvar count = 0\n\tvar\
    \ a = 0\n\tvar b = 0\n\tvar c = 0\n\tfor(var i = 0; i < arr.length; i++){\n\t\t\
    for(var j = 0; j < arr[i].length; j++){\n\t\t\tif(arr[i][j] == arr[i][j].toUpperCase()){\n\
    \t\t\t\ta++\n\t\t\t}else{\n\t\t\t\tb++\n\t\t\t}\n\t\t}\n\t\tc = a - b\n\t\tif(c\
    \ > num){\n\t\t\tnum = c\n\t\t\tcount = i\n\t\t}\n\t\ta = 0\n\t\tb = 0\n\t}\n\t\
    return class_name + '.' + extensions[count]\n}\n", "\tlet ext_index=0;\n\tlet\
    \ sum_up=0;\n\tlet sum_low=0;\n\tfor(let i=0;i<extensions.length;i++){\n\t\tsum_up=0;\n\
    \t\tsum_low=0;\n\t\tfor(let j=0;j<extensions[i].length;j++){\n\t\t\tif(extensions[i][j]==extensions[i][j].toUpperCase()){\n\
    \t\t\t\tsum_up++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum_low++;\n\t\t\t}\n\t\t}\n\t\
    \tif(sum_up-sum_low>ext_index){\n\t\t\text_index=sum_up-sum_low;\n\t\t\tresult=extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name+'.'+result;\n}", "    let strength = 0;\n    let\
    \ strongest = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let\
    \ caps = 0;\n        let smalls = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                caps += 1;\n            }\n            else{\n              \
    \  smalls += 1;\n            }\n        }\n        strength = caps - smalls;\n\
    \        if(strength > strongest){\n            strongest = strength;\n      \
    \      strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}", "    let caps = 0,\n        sm = 0,\n    \
    \    _strongest = '';\n    for(let i = 0; i < extensions.length; i++){\n     \
    \   let j = 0;\n        while(j < extensions[i].length){\n            if(extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z'){\n                caps += 1;\n          \
    \  }\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n\
    \                sm += 1;\n            }\n            j++;\n        }\n      \
    \  if(caps - sm > 0){\n            _strongest = extensions[i];\n        }\n  \
    \      caps = 0;\n        sm = 0;\n    }\n    return `${class_name}.${_strongest}`;\n\
    }", "    let extension = extensions.reduce((acc, e) => {\n        let num_caps\
    \ = (e.match(/[A-Z]/g) || []).length;\n        let num_smalls = (e.match(/[a-z]/g)\
    \ || []).length;\n        let diff = num_caps - num_smalls;\n        if (diff\
    \ > acc.diff){\n            acc.diff = diff;\n            acc.extension = e;\n\
    \        }\n        return acc;\n    }, {diff: -Infinity, extension: ''});\n \
    \   return `${class_name}.${extension.extension}`;\n}\n", "    var uppercase =\
    \ 0;\n    var lowercase = 0;\n    var strength = 0;\n    var strongest = '';\n\
    \    extensions.forEach(extension => {\n        for(let i = 0; i < extension.length;\
    \ i++){\n            if(extension[i] === extension[i].toUpperCase()){\n      \
    \          uppercase++;\n            }\n            else{\n                lowercase++;\n\
    \            }\n        }\n        if(strength < uppercase - lowercase){\n   \
    \         strength = uppercase - lowercase;\n            strongest = extension;\n\
    \        }\n        uppercase = 0;\n        lowercase = 0;\n    });\n    return\
    \ class_name + '.' + strongest;\n}\n", "    var best_ext;\n    var best_score\
    \ = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var score = extensions[i].replace(/[^A-Z]/g,\
    \ '').length - extensions[i].replace(/[^a-z]/g, '').length;\n        if(score\
    \ > best_score){\n            best_score = score;\n            best_ext = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + best_ext;\n}", "    var classes\
    \ = {};\n    for(var i=0; i<extensions.length; i++){\n        var up = extensions[i].match(/[A-Z]/g).length;\n\
    \        var low = extensions[i].match(/[a-z]/g).length;\n        var strength\
    \ = up - low;\n        classes[extensions[i]] = strength;\n    }\n    var max\
    \ = extensions[0];\n    for(var i=0; i<extensions.length; i++){\n        if(classes[extensions[i]]\
    \ > classes[max]){\n            max = extensions[i];\n        }\n    }\n    return\
    \ class_name + '.' + max;\n}\n", "  let maxStrength = 0;\n  let strongestExtension\
    \ = '';\n  extensions.forEach(extension => {\n    let strength = extension.split('').filter(char\
    \ => char === char.toUpperCase()).length - extension.split('').filter(char =>\
    \ char === char.toLowerCase()).length;\n    if (strength > maxStrength) {\n  \
    \    maxStrength = strength;\n      strongestExtension = extension;\n    }\n \
    \ });\n  return `${class_name}.${strongestExtension}`;\n}\n", "    if(extensions.length\
    \ === 0)\n        return class_name;\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for(let i = 0; i < extensions.length; i++){\n\
    \        let strength = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n\
    \            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n        \
    \        strength++;\n            else if(extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z')\n                strength--;\n        }\n        if(strength > strongest_strength){\n\
    \            strongest_strength = strength;\n            strongest_extension =\
    \ extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let maxStrength = -Infinity;\n    let extensionName = \"\";\n    extensions.forEach(extension\
    \ => {\n        let up = extension.split(\"\").filter(x => x === x.toUpperCase()).length;\n\
    \        let lo = extension.split(\"\").filter(x => x === x.toLowerCase()).length;\n\
    \        let strength = up - lo;\n        if(strength > maxStrength){\n      \
    \      maxStrength = strength;\n            extensionName = extension;\n     \
    \   }\n    });\n    return `${class_name}.${extensionName}`;\n}\n", "  var CAP\
    \ = 0;\n  var SM = 0;\n  var strongestExt;\n  for(var i = 0; i < extensions.length;\
    \ i++){\n    CAP = 0;\n    SM = 0;\n    for(var j = 0; j < extensions[i].length;\
    \ j++){\n      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n     \
    \   CAP++;\n      }\n      else{\n        SM++;\n      }\n    }\n    if(extensions[i].length\
    \ === 0){\n      continue;\n    }\n    if(i === 0){\n      strongestExt = extensions[i];\n\
    \    }\n    else if(CAP - SM > extensions[i].length){\n      strongestExt = extensions[i];\n\
    \    }\n  }\n  return class_name + '.' + strongestExt;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
