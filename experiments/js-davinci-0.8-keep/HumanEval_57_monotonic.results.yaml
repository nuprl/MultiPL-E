name: HumanEval_57_monotonic
language: js
results:
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   var flag=0;\n    if(l[0]>l[1]){\n        for(var i=0;i<l.length-1;i++){\n\
    \            if(l[i]<l[i+1]){\n                flag=1;\n                break;\n\
    \            }\n        }\n    }\n    else{\n        for(var i=0;i<l.length-1;i++){\n\
    \            if(l[i]>l[i+1]){\n                flag=1;\n                break;\n\
    \            }\n        }\n    }\n    if(flag==1){\n        return false;\n  \
    \  }\n    else{\n        return true;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   var arr = l.toString().split(',');\n    var key = [];\n    for(var i = 0;\
    \ i < arr.length - 1; i++){\n        key.push(arr[i] - arr[i + 1]);\n    }\n \
    \   var count = 0;\n    for(var j = 0; j < key.length; j++){\n        if(key[j]\
    \ === 0){\n            count++;\n        }\n    }\n    if(count === key.length){\n\
    \        return true;\n    }\n    var flag = false;\n    for(var k = 0; k < key.length;\
    \ k++){\n        if(k === 0){\n            flag = (key[k] < 0 ? true : false);\n\
    \        }else{\n            if(flag !== (key[k] < 0 ? true : false)){\n     \
    \           return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   console.log(l);\n    let len = l.length-1;\n    let count = 0;\n    let val\
    \ = (l[0] < l[1]) ? 0 : 1;\n    for(let i=0; i<len; i++){\n        if(val == 0){\n\
    \            if(l[i] < l[i+1]){\n                count++;\n            }else{\n\
    \                break;\n            }\n        }else{\n            if(l[i] >\
    \ l[i+1]){\n                count++;\n            }else{\n                break;\n\
    \            }\n        }\n    }\n    console.log((count+1) == len);\n}\nmonotonic([1,\
    \ 20, 4, 10]);\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: "[ 1, 20, 4, 10 ]\nfalse\n[ 1, 2, 4, 10 ]\nfalse\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\ntrue\n    at\
    \ test (/tmp/tmpxo8bif_x.js:37:10)\n    at Object.<anonymous> (/tmp/tmpxo8bif_x.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \ var is_increasing = true;\n  var is_decreasing = true;\n  var last_num = l[0];\n\
    \  var i = 1;\n  while (i < l.length){\n    if (last_num > l[i]){\n      is_increasing\
    \ = false;\n    }\n    if (last_num < l[i]){\n      is_decreasing = false;\n \
    \   }\n    last_num = l[i];\n    i++;\n  }\n  return is_increasing || is_decreasing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   var length = l.length;\n    var list = [];\n    if(l[0]<l[1]){\n        var\
    \ i = 1;\n        while(i<length){\n            if(l[i]<l[i-1]){\n           \
    \     list.push(1);\n            }\n            i++;\n        }\n    }\n    else{\n\
    \        var i = 1;\n        while(i<length){\n            if(l[i]>l[i-1]){\n\
    \                list.push(1);\n            }\n            i++;\n        }\n \
    \   }\n    if(list.length>0){\n        return false;\n    }\n    else{\n     \
    \   return true;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n\t\
    var i = 0;\n\tvar isInc = false;\n\tvar isDec = false;\n\twhile (i < l.length\
    \ - 1){\n\t\tif (l[i] < l[i+1]){\n\t\t\tisInc = true;\n\t\t} else if (l[i] > l[i+1]){\n\
    \t\t\tisDec = true;\n\t\t} else {\n\t\t\tisInc = false;\n\t\t\tisDec = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn isInc || isDec;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx451m0qw.js:35:10)\n    at Object.<anonymous> (/tmp/tmpx451m0qw.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \ var check = \"\";\n  var flag = false;\n  for(var i = 0; i < l.length - 1; i++){\n\
    \    if(l[i] < l[i+1]){\n      check = \">\";\n      break;\n    }\n    else if(l[i]\
    \ > l[i+1]){\n      check = \"<\";\n      break;\n    }\n  }\n  for(var i = 0;\
    \ i < l.length - 1; i++){\n    if(check == \">\"){\n      if(l[i] > l[i+1]){\n\
    \        flag = true;\n        break;\n      }\n    }\n    else if(check == \"\
    <\"){\n      if(l[i] < l[i+1]){\n        flag = true;\n        break;\n      }\n\
    \    }\n  }\n  if(flag){\n    return false;\n  }\n  else{\n    return true;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   if(l.length <= 1){\n        return true;\n    }\n    var direction = l[1]\
    \ - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction == 0){\n\
    \            direction = l[i] - l[i-1];\n            continue;\n        }\n  \
    \      if((l[i] - l[i-1]) / direction < 0){\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \ //if(!l) return true;\n  //if(l.length == 1) return true;\n  var mono = true;\n\
    \  var inc = (l[1] - l[0] > 0);\n  for(var i = 2; i < l.length; i++){\n    if(inc\
    \ && l[i] - l[i-1] < 0){\n      mono = false;\n      break;\n    }\n    if(!inc\
    \ && l[i] - l[i-1] > 0){\n      mono = false;\n      break;\n    }\n  }\n  return\
    \ mono;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   var g = l[0];\n    var isTrue = true;\n    var isTrue2 = true;\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] < g){\n            isTrue = false;\n\
    \        }\n        g = l[i];\n    }\n    var g2 = l[0];\n    for(var i = 0; i\
    \ < l.length; i++){\n        if(l[i] > g2){\n            isTrue2 = false;\n  \
    \      }\n        g2 = l[i];\n    }\n    if(isTrue == true || isTrue2 == true){\n\
    \        return true;\n    }else{\n        return false;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   var count1 = 0;\n    var count2 = 0;\n    for(var i = 0; i < l.length-1; i++){\n\
    \        if(l[i] < l[i+1]){\n            count1++;\n        }\n        else if(l[i]\
    \ > l[i+1]){\n            count2++;\n        }\n    }\n    if(count1 == 0 || count2\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n\t\
    for(var i = 1; i < l.length; i++){\n\t\tif(l[i] < l[i-1]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7fvfvhg3.js:25:10)\n    at Object.<anonymous> (/tmp/tmp7fvfvhg3.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \ var increasing = true;\n  var decreasing = true;\n  for(var i = 0; i < l.length\
    \ - 1; i++){\n    if(l[i] > l[i+1]){\n      increasing = false;\n    }\n    if(l[i]\
    \ < l[i+1]){\n      decreasing = false;\n    }\n  }\n  return (increasing || decreasing);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n\t\
    var dec = true;\n\tvar inc = true;\n\tfor(var i = 0; i < l.length-1; i++){\n\t\
    \tif(l[i] > l[i+1])\n\t\t\tinc = false;\n\t\tif(l[i] < l[i+1])\n\t\t\tdec = false;\n\
    \t}\n\treturn dec || inc;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   // your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\ntrue\n    at\
    \ test (/tmp/tmpug0fk2ob.js:17:10)\n    at Object.<anonymous> (/tmp/tmpug0fk2ob.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n\t\
    for(var i = 1; i < l.length; i++){\n\t\tif(l[i] > l[i-1]){\n\t\t\tfor(var j =\
    \ i; j < l.length; j++){\n\t\t\t\tif(l[j] < l[j-1])\n\t\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse if(l[i] < l[i-1]){\n\t\t\tfor(var\
    \ j = i; j < l.length; j++){\n\t\t\t\tif(l[j] > l[j-1])\n\t\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   if(l.length <= 2){\n        return true;\n    }\n    if(l[0] < l[1]){\n  \
    \      for(let i = 0; i < l.length - 1; i++){\n            if(l[i] > l[i+1]){\n\
    \                return false;\n            }\n        }\n    }\n    else if(l[0]\
    \ > l[1]){\n        for(let i = 0; i < l.length - 1; i++){\n            if(l[i]\
    \ < l[i+1]){\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   if(increasing(l)){\n        return true;\n    }else if(decreasing(l)){\n \
    \       return true;\n    }else{\n        return false;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp72h89ojd.js:9\n    if(increasing(l)){\n    ^\n\nReferenceError:\
    \ increasing is not defined\n    at monotonic (/tmp/tmp72h89ojd.js:9:5)\n    at\
    \ test (/tmp/tmp72h89ojd.js:23:20)\n    at Object.<anonymous> (/tmp/tmp72h89ojd.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n \
    \   var increasing = true\n    var decreasing = true\n    for (var i = 0; i <\
    \ l.length-1; i++){\n        if (l[i] < l[i+1]){\n            decreasing = false\n\
    \        }\n        if (l[i] > l[i+1]){\n            increasing = false\n    \
    \    }\n    }\n    return increasing || decreasing\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return True is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n\t\
    var mono = false;\n\tvar dec = false;\n\tif(l.length == 0){\n\t\treturn mono;\n\
    \t}\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i] < l[i+1]){\n\t\t\tmono\
    \ = true;\n\t\t}else if(l[i] > l[i+1]){\n\t\t\tdec = true;\n\t\t}else{\n\t\t\t\
    dec = false;\n\t\t\tmono = false;\n\t\t}\n\t}\n\tif(mono === true || dec === true){\n\
    \t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpco64l0hz.js:38:10)\n    at Object.<anonymous> (/tmp/tmpco64l0hz.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
