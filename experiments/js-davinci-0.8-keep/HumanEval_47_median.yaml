name: HumanEval_47_median
language: js
prompt: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
  \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
  \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    var sum = 0;\n    var length = 0;\n    for(var i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n        length++;\n    }\n    return sum/length;\n\
    }\n", "    if(l.length == 0){\n        return null;\n    }\n    var length = l.length;\n\
    \    var l2 = l.sort(function(a, b){return a-b});\n    if(length % 2 == 0){\n\
    \        return (l2[length/2] + l2[length/2 - 1])/2;\n    }\n    else{\n     \
    \   return l2[Math.floor(length/2)];\n    }\n}\n", "    // >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n    // 15.0\n    // >>> median([3, 1, 2, 4, 5])\n    // 3\n\
    \    let length = l.length;\n    let sorted = l.sort(function(a, b){return a-b});\n\
    \    let result;\n    if (length % 2 != 0){\n        result = sorted[Math.floor(length/2)];\n\
    \    }\n    else{\n        result = (sorted[length/2] + sorted[length/2 - 1])/2;\n\
    \    }\n    return result;\n}\n", "}\n", "    var ln = l.length;\n    if(ln%2===0){\n\
    \        return (l[ln/2-1]+l[ln/2])/2;\n    }\n    else{\n        return l[Math.floor(ln/2)];\n\
    \    }\n}\n", "\n}\n", "  var l1 = l.slice();\n  l1.sort(function(a,b){\n    return\
    \ a-b;\n  });\n  var result = l1[Math.floor(l1.length/2)];\n  return result;\n\
    }\n", "  return _.median(l);\n}\n", "    if(l.length == 0){\n        return null;\n\
    \    }\n    //Sort the list\n    l.sort(function(a, b){\n        return a - b;\n\
    \    });\n    //Get the middle index\n    let index = parseInt(l.length / 2);\n\
    \    //Check if the list has an even number of elements\n    if(l.length % 2 ==\
    \ 0){\n        //If so, then return the mean of the elements at the index and\
    \ at index + 1\n        return (l[index] + l[index + 1]) / 2;\n    }else{\n  \
    \      //If not, then return the element at the index\n        return l[index];\n\
    \    }\n}\n", "    var l_sorted = l.sort(function(a, b){return a-b});\n    var\
    \ l_len = l_sorted.length;\n    var l_mid = Math.floor(l_len/2);\n    if (l_len\
    \ % 2)\n        return l_sorted[l_mid];\n    else\n        return (l_sorted[l_mid-1]\
    \ + l_sorted[l_mid]) / 2.0;\n}\n", "  if (l.length == 0) {\n    return -1;\n \
    \ }\n  l.sort(function(a, b){return a-b});\n  var median = (l.length % 2 == 0)\
    \ ? ((l[l.length/2] + l[l.length/2 - 1]) / 2) : l[Math.floor(l.length/2)];\n \
    \ return median;\n}\n", "  if(l.length==0){\n    return null;\n  }else{\n    return\
    \ l[Math.floor(l.length/2)];\n  }\n}", "    if (l.length % 2 == 0){\n        return\
    \ (l[l.length/2-1] + l[l.length/2])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n\
    \    }\n}\n", "    if (l.length % 2 == 0){\n        return (l[Math.floor(l.length/2)]\
    \ + l[Math.floor(l.length/2)-1])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n\
    \    }\n}\n", "\tvar list = l.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\t\
    var len = list.length;\n\tif(len%2 === 0){\n\t\treturn (list[len/2-1]+list[len/2])/2;\n\
    \t}\n\telse{\n\t\treturn list[(len-1)/2];\n\t}\n}", "  if(isEmpty(l)){\n    return\
    \ 0;\n  }\n  else{\n    return (first(l) + last(l)) / 2;\n  }\n}\n", "    if(l.length\
    \ === 0){\n        return NaN;\n    }\n    let k = Math.floor(l.length/2);\n \
    \   let m = 0;\n    l.sort(function(a, b){return a-b});\n    if(l.length % 2 ===\
    \ 0){\n        m = (l[k-1] + l[k])/2;\n    }else{\n        m = l[k];\n    }\n\
    \    return m;\n}\n", "\tl.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tconsole.log(l);\n\
    \treturn l[Math.floor(l.length/2)];\n}", "\tlet length = l.length;\n\tif(length\
    \ == 0){\n\t\treturn 0;\n\t}\n\telse if(length == 1){\n\t\treturn l[0];\n\t}\n\
    \tl.sort(function(a, b){return a-b});\n\tconsole.log(l);\n\tif(length % 2 == 0){\n\
    \t\treturn (l[length/2] + l[length/2 - 1])/2;\n\t}\n\telse{\n\t\treturn l[Math.floor(length/2)];\n\
    \t}\n}\n", "  var sorted = l.sort(function(a,b){\n    return a-b;\n  });\n  var\
    \ m = sorted.length/2;\n  if(sorted.length % 2 == 0){\n    return ((sorted[m-1]+sorted[m])/2.0);\n\
    \  }\n  else{\n    return sorted[Math.floor(m)];\n  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
