name: HumanEval_78_hex_key
language: js
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\"\
  \ the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n//\
  \ For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\"\
  \ the output should be 2.\nfunction hex_key(num){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
  1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
  2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
  112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
completions: ["  let key = {\n    'A':10,\n    'B':11,\n    'C':12,\n    'D':13,\n\
    \    'E':14,\n    'F':15\n  }\n  let count = 0;\n  for(let i = 0; i < num.length;\
    \ i++){\n    if(num[i] in key){\n      num[i] = key[num[i]];\n    }\n  }\n  for(let\
    \ j = 0; j < num.length; j++){\n    if(num[j] == 2 || num[j] == 3 || num[j] ==\
    \ 5 || num[j] == 7 || num[j] == 11 || num[j] == 13){\n      count++;\n    }\n\
    \  }\n  return count;\n}", "    var hash = {'A':11,'B':12,'C':13,'D':14,'E':15,'F':16}\n\
    \    return hash[num]\n}", "\tvar hex = \"0123456789ABCDEF\";\n\tvar primes =\
    \ \"2357BDF\";\n\tvar count = 0;\n\tfor(var i = 0; i < num.length; i++){\n\t\t\
    for(var j = 0; j < primes.length; j++){\n\t\t\tif(num[i] == primes[j]){\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}", "  var symbol = {\n    0:0,\n\
    \    1:1,\n    2:2,\n    3:3,\n    4:4,\n    5:5,\n    6:6,\n    7:7,\n    8:8,\n\
    \    9:9,\n    A:10,\n    B:11,\n    C:12,\n    D:13,\n    E:14,\n    F:15\n \
    \ }\n  return symbol[num];\n}", "    return num.split('').map(e=>(e.charCodeAt()>64)?e.charCodeAt()-55:e).reduce((acc,cv)=>acc+cv)\n\
    }\n", "    //determine if the key is between hex keys 0-9\n    if(num >= '0' &&\
    \ num <= '9'){\n        //return num as number\n        return Number(num);\n\
    \    }\n    //determine if the key is between hex keys A-F\n    else if(num >=\
    \ 'A' && num <= 'F'){\n        //convert num to number & add 10 to it\n      \
    \  return Number(num) + 10;\n    }\n}", "    return \"123456789ABCDEF\".indexOf(num);\n\
    }\n", "    var result = 0;\n    for(var i = 0; i < num.length; i++){\n       \
    \ if(num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i]\
    \ === 'B' || num[i] === 'D'){\n            result += 1;\n        }\n    }\n  \
    \  return result;\n}\n", "  let result = 0;\n  const primes = [\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"];\n  for(let i = 0; i < num.length; i++){\n    if(primes.includes(num[i])){\n\
    \      result++;\n    }\n  }\n  return result;\n}\n", "    var hexArr = num.split('');\n\
    \    var hexConv = {\n        0:0,\n        1:1,\n        2:2,\n        3:3,\n\
    \        4:4,\n        5:5,\n        6:6,\n        7:7,\n        8:8,\n      \
    \  9:9,\n        A:10,\n        B:11,\n        C:12,\n        D:13,\n        E:14,\n\
    \        F:15\n    }\n    var hexVal = hexArr.map(num => hexConv[num]);\n    var\
    \ primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    var primeCount = 0;\n    for(var i = 0; i < hexVal.length; i++){\n      \
    \  for(var j = 0; j < primes.length; j++){\n            if(hexVal[i] === primes[j]){\n\
    \                primeCount++;\n            }\n        }\n    }\n    return primeCount;\n\
    }", "    var digits = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n    var\
    \ primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,12",
  "    let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\"\
    ,\"B\",\"C\",\"D\",\"E\",\"F\"];\n    let hexy = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n\
    \    let counter = 0;\n    let arr = [];\n    for(let i = 0; i < num.length; i++){\n\
    \      let index = hex.indexOf(num[i]);\n      arr.push(hexy[index]);\n    }\n\
    \    for(let i = 0; i < arr.length; i++){\n      if(arr[i] === 2 || arr[i] ===\
    \ 3 || arr[i] === 5 || arr[i] === 7 || arr[i] === 11 || arr[i] === 13){\n    \
    \    counter++;\n      }\n    }\n    return counter;\n}", "  var obj = {\n   \
    \ 2: true,\n    3: true,\n    5: true,\n    7: true,\n    'B': true,\n    'D':\
    \ true,\n    'F': true\n  }\n  return obj[num]\n}", "    if (num < 10) return\
    \ true;\n    else if (num === 11 || num === 13 || num === 17) return true;\n \
    \   else return false;\n}", "  let hexKey = {\n    'A': 10,\n    'B': 11,\n  \
    \  'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  return hexKey[num]\n\
    }\n", "    let hex_key = {\n        0:0,\n        1:1,\n        2:2,\n       \
    \ 3:3,\n        4:4,\n        5:5,\n        6:6,\n        7:7,\n        8:8,\n\
    \        9:9,\n        \"A\":10,\n        \"B\":11,\n        \"C\":12,\n     \
    \   \"D\":13,\n        \"E\":14,\n        \"F\":15\n    }\n    return hex_key[num]\n\
    }", "    var hex_nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    var hex_keys = {};\n    for(var\
    \ i = 0; i < hex_nums.length; i++){\n        hex_keys[hex_nums[i]] = i;\n    }\n\
    \    return hex_keys[num];\n}", "    var hex={\n        \"A\": 11,\n        \"\
    B\": 12,\n        \"C\": 13,\n        \"D\": 14,\n        \"E\": 15,\n       \
    \ \"F\": 16\n    }\n    var arr = [];\n    for(var key in hex){\n        arr.push(hex[key]);\n\
    \    }\n    return arr;\n}", "    let word ='0ABCDEF';\n    let pos = word.indexOf(num);\n\
    \    return pos;\n}", "    let num_dict = {}\n    for(let j = 0; j < num.length;\
    \ j++){\n        if(num_dict[num[j]]){\n            num_dict[num[j]] = num_dict[num[j]]\
    \ + 1\n        }\n        else{\n            num_dict[num[j]] = 1\n        }\n\
    \    }\n    return num_dict\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
