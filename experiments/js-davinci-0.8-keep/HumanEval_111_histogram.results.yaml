name: HumanEval_111_histogram
language: js
results:
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var testArr = test.split(\" \");\n  var results = {};\n  for(var i = 0; i <\
    \ testArr.length; i++){\n    if(results[testArr[i]]){\n      results[testArr[i]]++;\n\
    \    } else {\n      results[testArr[i]] = 1;\n    }\n  }\n  return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp23z1f60u.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp23z1f60u.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let words = test.split(' ');\n    let word_count = {};\n    for(let i = 0;\
    \ i < words.length; i++){\n        if(word_count[words[i]]){\n            word_count[words[i]]\
    \ += 1;\n        }else{\n            word_count[words[i]] = 1;\n        }\n  \
    \  }\n    let result = {};\n    let max = 0;\n    for(let j in word_count){\n\
    \        if(word_count[j] > max){\n            max = word_count[j];\n        }\n\
    \    }\n    for(let k in word_count){\n        if(word_count[k] === max){\n  \
    \          result[k] = max;\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp5b10wsq1.js:46:10)\n    at Object.<anonymous> (/tmp/tmp5b10wsq1.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let testArr = test.split(' ');\n    let map = new Map();\n    for(let i =\
    \ 0; i < testArr.length; i++){\n        if(map.has(testArr[i])){\n           \
    \ map.set(testArr[i], map.get(testArr[i]) + 1);\n        } else {\n          \
    \  map.set(testArr[i], 1);\n        }\n    }\n    let keys = map.keys();\n   \
    \ let vals = map.values();\n    let maxKey = '';\n    let maxVal = 0;\n    let\
    \ maxKeys = [];\n    for(let i = 0; i < map.size; i++){\n        if(vals.next().value\
    \ > maxVal){\n            maxKey = keys.next().value;\n            maxVal = vals.next().value;\n\
    \            maxKeys = [maxKey];\n        } else if(vals.next().value === maxVal){\n\
    \            maxKeys.push(keys.next().value);\n        }\n    }\n    return {[maxKey]:\
    \ maxVal};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2 }\n\nshould equal\n\n{ a: 2, b: 2\
    \ }\n    at test (/tmp/tmpr1lstzk3.js:41:10)\n    at Object.<anonymous> (/tmp/tmpr1lstzk3.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { a: 2 },\n  expected: { a: 2, b: 2 },\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var output = {};\n    var testArr = test.split(\" \");\n    for(var i = 0;\
    \ i < testArr.length; i++){\n        if(output[testArr[i]] == undefined){\n  \
    \          output[testArr[i]] = 1;\n        }\n        else{\n            output[testArr[i]]++;\n\
    \        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpvj_bj8ki.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvj_bj8ki.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    if(test == ''){\n        return {}\n    }\n    else{\n        let testArray\
    \ = test.split(' ');\n        let testDict = {}\n        let maxValue = 0;\n \
    \       let highestValueArray = [];\n        for(let i = 0; i < testArray.length;\
    \ i++){\n            let indexElement = testArray[i];\n            if(testDict[indexElement]\
    \ == undefined){\n                testDict[indexElement] = 1;\n            }\n\
    \            else{\n                testDict[indexElement] += 1;\n           \
    \ }\n        }\n        let testDictKeys = Object.keys(testDict);\n        for(let\
    \ i = 0; i < testDictKeys.length; i++){\n            let indexKey = testDictKeys[i];\n\
    \            if(testDict[indexKey] > maxValue){\n                maxValue = testDict[indexKey];\n\
    \                highestValueArray = [indexKey];\n            }\n            else\
    \ if(testDict[indexKey] == maxValue){\n                highestValueArray.push(indexKey);\n\
    \            }\n        }\n        let keyToReturn = {};\n        for(let i =\
    \ 0; i < highestValueArray.length; i++){\n            let indexKey = highestValueArray[i];\n\
    \            keyToReturn[indexKey] = maxValue;\n        }\n        return keyToReturn;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters={};\n    var letterArr=test.split(' ');\n    var max=0;\n   \
    \ var maxLetters= {};\n    for(i=0;i<letterArr.length;i++){\n        var letter=letterArr[i];\n\
    \        if(!letters[letter]){\n            letters[letter]=1;\n        }\n  \
    \      else{\n            letters[letter]++;\n        }\n        if(letters[letter]>max){\n\
    \            max=letters[letter];\n            maxLetters={};\n            maxLetters[letter]=max;\n\
    \        }\n        else if(letters[letter]==max){\n            maxLetters[letter]=max;\n\
    \        }\n    }\n    return maxLetters;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpwenv9jw3.js:45:10)\n    at Object.<anonymous> (/tmp/tmpwenv9jw3.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var histogram = {};\n    var max = 0;\n    test.split(\" \").forEach(function(letter){\n\
    \        if(histogram[letter]){\n            histogram[letter] = histogram[letter]\
    \ + 1;\n        }else{\n            histogram[letter] = 1;\n        }\n      \
    \  if(histogram[letter] > max){\n            max = histogram[letter];\n      \
    \  }\n    });\n    var result = {};\n    for(var letter in histogram){\n     \
    \   if(histogram[letter] === max){\n            result[letter] = histogram[letter];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpdpjgngy3.js:42:10)\n    at Object.<anonymous> (/tmp/tmpdpjgngy3.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let count = 0;\n    let key = '';\n    let object = {};\n    let array =\
    \ test.split(' ');\n    for(let i = 0; i < array.length; i++){\n        for(let\
    \ j = 0; j < array.length; j++){\n            if(array[i] === array[j]){\n   \
    \             count++;\n            }\n        }\n        if(count > 1){\n   \
    \         object[array[i]] = count;\n        }\n        count = 0;\n    }\n  \
    \  return object;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{}\n\nshould equal\n\n{ a: 1, b: 1, c: 1,\
    \ d: 1, g: 1 }\n    at test (/tmp/tmpl7r7iooq.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl7r7iooq.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected:\
    \ { a: 1, b: 1, c: 1, d: 1, g: 1 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    //Split the string into array of chars\n    let arr = test.split(' ');\n\
    \    let ocurrence = {};\n\n    //Go through each char and add it to ocurrence\
    \ object if it doesn't exist, or increment the count if it does\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(!ocurrence[arr[i]]){\n            ocurrence[arr[i]]\
    \ = 1;\n        }else{\n            ocurrence[arr[i]] += 1;\n        }\n    }\n\
    \n    let maxValue = Math.max(...Object.values(ocurrence));\n    let maxKeys =\
    \ [];\n\n    //Add to maxKeys all keys whose values are the same as maxValue\n\
    \    for(let key in ocurrence){\n        if(ocurrence[key] === maxValue){\n  \
    \          maxKeys.push(key);\n        }\n    }\n\n    //Go through maxKeys and\
    \ delete every key that is not a maxKey\n    for(let key in ocurrence){\n    \
    \    if(!maxKeys.includes(key)){\n            delete ocurrence[key];\n       \
    \ }\n    }\n\n    return ocurrence;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpsm_nbmhv.js:55:10)\n    at Object.<anonymous> (/tmp/tmpsm_nbmhv.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  let obj={}\n  let str=test.split(' ')\n  for(let i=0;i<str.length;i++){\n \
    \   if(obj[str[i]]===undefined){\n      obj[str[i]]=1\n    }else{\n      obj[str[i]]+=1\n\
    \    }\n  }\n  return obj\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpf5v30xgt.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf5v30xgt.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let char_dict = {};\n    let max_cnt = 0;\n    let max_cnt_chars = [];\n\
    \    let test_array = test.split(' ');\n    for (let i = 0; i < test_array.length;\
    \ i++){\n        if (char_dict[test_array[i]] === undefined){\n            char_dict[test_array[i]]\
    \ = 1;\n        } else {\n            char_dict[test_array[i]]++;\n        }\n\
    \        if (char_dict[test_array[i]] > max_cnt){\n            max_cnt = char_dict[test_array[i]];\n\
    \            max_cnt_chars = [test_array[i]];\n        } else if (char_dict[test_array[i]]\
    \ === max_cnt){\n            max_cnt_chars.push(test_array[i]);\n        }\n \
    \   }\n    let result = {};\n    for (let i = 0; i < max_cnt_chars.length; i++){\n\
    \        result[max_cnt_chars[i]] = max_cnt;\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmphaspbiec.js:46:10)\n    at Object.<anonymous> (/tmp/tmphaspbiec.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  let stor = {};\n  let max = 0;\n  let final = {};\n  test.split(' ').forEach(char\
    \ => {\n    if (stor[char]){\n      stor[char] += 1;\n    }\n    else {\n    \
    \  stor[char] = 1;\n    }\n  });\n  for (let key in stor){\n    if (stor[key]\
    \ > max){\n      max = stor[key];\n    }\n  }\n  for (let key in stor){\n    if\
    \ (stor[key] === max){\n      final[key] = max;\n    }\n  }\n  return final;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpk692ax0_.js:45:10)\n    at Object.<anonymous> (/tmp/tmpk692ax0_.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  let dict = {};\n  let splitted = test.split(' ');\n  for (let i = 0; i < splitted.length;\
    \ i++){\n    if (splitted[i] in dict){\n      dict[splitted[i]] += 1;\n    } else\
    \ {\n      dict[splitted[i]] = 1;\n    }\n  }\n  return dict;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpc64r4dwi.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc64r4dwi.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var alphabet = {};\n    var counter = 0;\n    var target = '';\n    var multi\
    \ = [];\n    var howMany = 0;\n    var winner = '';\n    var letters = test.split('\
    \ ');\n    for(var i = 0; i < letters.length; i++){\n        alphabet[letters[i]]\
    \ = alphabet[letters[i]] ? alphabet[letters[i]]+1 : 1;\n    }\n    for(var letter\
    \ in alphabet){\n        counter = alphabet[letter];\n        if(counter >= howMany){\n\
    \            target = letter;\n            howMany = counter;\n        }\n   \
    \ }\n    for(var letter in alphabet){\n        if(alphabet[letter] == howMany){\n\
    \            multi.push(letter);\n        }\n    }\n    if(multi.length > 1){\n\
    \        for(var i = 0; i < multi.length; i++){\n            winner += multi[i];\n\
    \            if(i != multi.length-1){\n                winner += ' ';\n      \
    \      }\n        }\n        return {winner: howMany};\n    }else{\n        return\
    \ {target: howMany};\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ winner: 2 }\n\nshould equal\n\n{ a: 2,\
    \ b: 2 }\n    at test (/tmp/tmpt86x1wz3.js:50:10)\n    at Object.<anonymous> (/tmp/tmpt86x1wz3.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { winner: 2 },\n  expected: { a: 2, b: 2\
    \ },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var kamus = {}\n    var tes = ''\n    var hasil = []\n    var tampung = []\n\
    \    for(var i = 0; i < test.length; i++){\n        if(test[i] !== ' '){\n   \
    \         tes += test[i]\n        }else{\n            hasil.push(tes)\n      \
    \      tes = ''\n        }\n    }\n    hasil.push(tes)\n    for(var j = 0; j <\
    \ hasil.length; j++){\n        kamus[hasil[j]] = 0\n    }\n    for(var k = 0;\
    \ k < hasil.length; k++){\n        for(var l = 0; l < hasil.length; l++){\n  \
    \          if(hasil[k] === hasil[l]){\n                kamus[hasil[k]] += 1\n\
    \            }\n        }\n    }\n    for(var m = 0; m < hasil.length; m++){\n\
    \        if(kamus[hasil[m]] === max(kamus)){\n            tampung.push(hasil[m])\n\
    \        }\n    }\n    var o = 0\n    var output = {}\n    while(o < tampung.length){\n\
    \        output[tampung[o]] = max(kamus)\n        o++\n    }\n    return output\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmped1lq2hj.js:35\n        if(kamus[hasil[m]] === max(kamus)){\n \
    \               ^\n\nReferenceError: max is not defined\n    at histogram (/tmp/tmped1lq2hj.js:35:17)\n\
    \    at test (/tmp/tmped1lq2hj.js:52:20)\n    at Object.<anonymous> (/tmp/tmped1lq2hj.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  //Split string into array\n  test = test.split(' ');\n  //create an object\n\
    \  var obj = {};\n  //loop through array\n  for(var i = 0; i < test.length; i++){\n\
    \    //check to see if the letter exists\n    if(obj[test[i]]){\n      //if the\
    \ letter does exist add to the count\n      obj[test[i]]++;\n    } else {\n  \
    \    //if the letter does not exist add it to the object\n      obj[test[i]] =\
    \ 1;\n    }\n  }\n  //create a variable to hold the most occurrences\n  var mostOccurrences\
    \ = 0;\n  //loop through object\n  for(var key in obj){\n    //check to see if\
    \ the value is greater than the most occurrences\n    if(obj[key] > mostOccurrences){\n\
    \      //if it is replace the most occurrences\n      mostOccurrences = obj[key];\n\
    \    }\n  }\n  //create a new object\n  var newObj = {};\n  //loop through object\n\
    \  for(var keys in obj){\n    //check to see if the value is equal to the most\
    \ occurrences\n    if(obj[keys] === mostOccurrences){\n      //if it is add the\
    \ key and value to the new object\n      newObj[keys] = obj[keys];\n    }\n  }\n\
    \  //return new object\n  return newObj;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_8i_bio4.js:61:10)\n    at Object.<anonymous> (/tmp/tmp_8i_bio4.js:65:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var main = test.split(\" \");\n    var result = [];\n    var recc = {};\n\
    \    main.forEach(\n        function(i){\n            if(i in recc){\n       \
    \         recc[i] = recc[i] + 1;\n            }\n            else{\n         \
    \       recc[i] = 1;\n            }\n        }\n    );\n    var max = 0;\n   \
    \ for(var key in recc){\n        if(recc[key] > max){\n            max = recc[key];\n\
    \        }\n    }\n    for(var key in recc){\n        if(recc[key] == max){\n\
    \            result.push(key);\n        }\n    }\n    var result1 = {};\n    result.forEach(\n\
    \        function(i){\n            result1[i] = max;\n        }\n    );\n    return\
    \ result1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp2d0bw8sw.js:54:10)\n    at Object.<anonymous> (/tmp/tmp2d0bw8sw.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  let testArr = test.split(' ');\n  let myObj = {};\n  let myArr = [];\n  let\
    \ myCount = 0;\n  for(let i = 0; i < testArr.length; i++){\n    if(!myObj[testArr[i]]){\n\
    \      myObj[testArr[i]] = 1;\n    } else {\n      myObj[testArr[i]] += 1;\n \
    \   }\n  }\n  for(let key in myObj){\n    if(myObj[key] > myCount){\n      myCount\
    \ = myObj[key];\n    }\n  }\n  for(let key in myObj){\n    if(myObj[key] === myCount){\n\
    \      myArr.push(key);\n    }\n  }\n  for(let i = 0; i < myArr.length; i++){\n\
    \    myObj[myArr[i]] = myCount;\n  }\n  for(let key in myObj){\n    if(myObj[key]\
    \ !== myCount){\n      delete myObj[key];\n    }\n  }\n  return myObj;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpz7tcx8tt.js:53:10)\n    at Object.<anonymous> (/tmp/tmpz7tcx8tt.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var h = {};\n  var max = 1;\n  var letter, count;\n  var t = test.split(' ');\n\
    \  for (var i = 0; i < t.length; i++){\n    count = 1;\n    letter = t[i];\n \
    \   if (letter in h){\n      h[letter] += 1;\n      if (h[letter] > max){\n  \
    \      max = h[letter];\n      }\n    }\n    else {\n      h[letter] = 1;\n  \
    \  }\n  }\n  var d = {};\n  for (var k in h){\n    if (h[k] == max){\n      d[k]\
    \ = h[k];\n    }\n  }\n  return d;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpqoxk2x_8.js:48:10)\n    at Object.<anonymous> (/tmp/tmpqoxk2x_8.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    if(test == ''){\n        return {};\n    }\n    let maxCount = 1;\n    let\
    \ result = {};\n    let arr = test.split(' ');\n    let testMap = new Map();\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(testMap.has(arr[i])){\n\
    \            testMap.set(arr[i], testMap.get(arr[i]) + 1);\n        }\n      \
    \  else{\n            testMap.set(arr[i], 1);\n        }\n    }\n    for(let item\
    \ of testMap){\n        if(item[1] >= maxCount){\n            maxCount = item[1];\n\
    \        }\n    }\n    for(let item of testMap){\n        if(item[1] == maxCount){\n\
    \            result[item[0]] = item[1];\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
