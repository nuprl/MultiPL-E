name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let smallest=Infinity;\n    let index=-1;\n    let lowest=-1;\n\
    \    for(let i=0;i<arr.length;i++){\n        if(arr[i]%2===0 && arr[i]<smallest){\n\
    \            smallest=arr[i];\n            index=i;\n        }\n        if(arr[i]===0){\n\
    \            lowest=i;\n        }\n    }\n    if(smallest===Infinity || lowest===-1){\n\
    \        return []\n    }else if(smallest>0){\n        return [smallest,index]\n\
    \    }else{\n        return [0,lowest]\n    }\n}\nlet test1=pluck([4,2,3]);\n\
    let test2=pluck([1,2,3]);\nlet test3=pluck([]);\nlet test4=pluck([5, 0, 3, 0,\
    \ 4, 2]);", "    let minEven = Infinity;\n    let minIndex = null;\n    arr.forEach((value,\
    \ index) => {\n        if(value % 2 === 0 && value < minEven){\n            minEven\
    \ = value;\n            minIndex = index;\n        }\n    });\n    return minEven\
    \ === Infinity ? [] : [minEven, minIndex];\n}", "  var even = arr.filter(function(e){return\
    \ e % 2 === 0})\n  return even.length === 0 ? [] : [Math.min.apply(null, even),\
    \ arr.indexOf(Math.min.apply(null, even))]\n}", "    let evens = arr.filter(n\
    \ => n % 2 === 0);\n    let minEven = Math.min(...evens);\n    let minEvenIndex\
    \ = arr.indexOf(minEven);\n    return [minEven, minEvenIndex];\n}", "    if(arr.length\
    \ == 0){\n        return [];\n    }\n    let small_even_value = null;\n    let\
    \ small_index = null;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 == 0){\n            if(small_even_value == null){\n                small_even_value\
    \ = arr[i];\n                small_index = i;\n            }\n            else\
    \ if(arr[i] < small_even_value){\n                small_even_value = arr[i];\n\
    \                small_index = i;\n            }\n        }\n    }\n    if(small_even_value\
    \ == null){\n        return [];\n    }\n    return [small_even_value, small_index];\n\
    }", "\tlet smallestIndex = null;\n\tlet smallestEven = Number.MAX_SAFE_INTEGER;\n\
    \tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\
    \t\t\tsmallestEven = arr[i];\n\t\t\tsmallestIndex = i;\n\t\t}\n\t}\n\tif(smallestIndex\
    \ === null){\n\t\treturn [];\n\t}\n\treturn [smallestEven, smallestIndex];\n}",
  "  let evens = []\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 ===\
    \ 0) evens.push([arr[i], i])\n  }\n  evens.sort((a, b) => a[0] - b[0])\n  return\
    \ evens[0] || []\n}", "  return arr.reduce((acc, curr, idx) => {\n    if (curr\
    \ % 2 === 0) {\n      if (acc[0] === undefined || curr < acc[0]) {\n        acc[0]\
    \ = curr;\n        acc[1] = idx;\n      }\n    }\n    return acc;\n  }, []);\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let answer = [];\n    let index\
    \ = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0\
    \ && arr[i] < min){\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if(index === -1){\n        return answer;\n    }\n    answer.push(min);\n\
    \    answer.push(index);\n    return answer;\n}", "    //find the smallest even\
    \ integer, which is at the same time the first even integer in the array\n   \
    \ //find its index in the array\n    //if none is found, return []\n    let smallestEven\
    \ = arr.filter(v => v % 2 === 0).sort((a,b) => a - b)[0];\n    let smallestEvenIndex\
    \ = arr.indexOf(smallestEven);\n    if(smallestEven === undefined) return [];\n\
    \    return [smallestEven, smallestEvenIndex];\n}", "    if(arr.length == 0) return\
    \ [];\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 == 0) {\n            even.push(arr[i]);\n     \
    \   } else {\n            odd.push(arr[i]);\n        }\n    }\n    if(even.length\
    \ == 0) return [];\n    for(var i = 0; i < even.length; i++){\n        for(var\
    \ j = 0; j < odd.length; j++){\n            if(even[i] < odd[j]){\n          \
    \      var tmp = even[i];\n                even[i] = odd[j];\n               \
    \ odd[j] = tmp;\n            }\n        }\n    }\n    var res = [even[0], arr.indexOf(even[0])];\n\
    \    return res;\n}\nvar test1 = [4,2,3];\nvar test2 = [1,2,3];\nvar test3 = [];\n\
    var test4 = [5, 0, 3, 0, 4, 2];", "    // return [value, index]\n    let temp\
    \ = [];\n    let even = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        }\n    }\n \
    \   if(even.length === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === min){\n     \
    \       temp.push(arr[i]);\n            temp.push(i);\n            return temp;\n\
    \        }\n    }\n}", "    let even = []\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n      \
    \  }\n    }\n    if(even.length === 0){\n        return []\n    }\n    let smallest\
    \ = even[0]\n    let index = 0\n    for(let i = 0; i < even.length; i++){\n  \
    \      if(even[i] < smallest){\n            smallest = even[i]\n            index\
    \ = i\n        }\n    }\n    return [smallest, index]\n}", "    if(arr.length\
    \ === 0){\n        return [];\n    }\n    const even = arr.filter(val => val %\
    \ 2 === 0).sort((a,b) => a - b)[0];\n    if(even === undefined){\n        return\
    \ [];\n    }\n    const ind = arr.indexOf(even);\n    return [even, ind];\n}",
  "  const smallEven = arr.filter(num => num % 2 === 0).sort((a,b) => a - b)[0];\n\
    \  return !smallEven ? [] : [smallEven, arr.indexOf(smallEven)];\n}\n\nmodule.exports\
    \ = { pluck };", "\tlet smallestEven = null;\n\tlet smallestEvenIndex = null;\n\
    \tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tif(smallestEven\
    \ === null){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\
    \t\t\t}\n\t\t\telse if(arr[i] < smallestEven){\n\t\t\t\tsmallestEven = arr[i];\n\
    \t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn smallestEven ===\
    \ null ? [] : [smallestEven, smallestEvenIndex];\n}\n\nlet arr1 = [4,2,3];\nlet\
    \ arr2 = [1,2,3];\nlet arr3 = [];\nlet arr4 = [5, 0, 3, 0, 4, 2];", "    let res\
    \ = [];\n    if(arr.length > 0){\n        let ind = 0;\n        let small = 0;\n\
    \        while(ind < arr.length){\n            if(arr[ind]%2 == 0){\n        \
    \        small = arr[ind];\n                break;\n            }\n          \
    \  ind++;\n        }\n        if(small == 0){\n            res = [];\n       \
    \ }\n        else{\n            for(let i = ind+1; i < arr.length; i++){\n   \
    \             if(arr[i] < small && arr[i]%2 == 0){\n                    small\
    \ = arr[i];\n                    ind = i;\n                }\n            }\n\
    \            res.push(small);\n            res.push(ind);\n        }\n    }\n\
    \    else{\n        res = [];\n    }\n    return res;\n}\n", "    let index =\
    \ Infinity;\n    let even = -1;\n    for(let i = 0; i < arr.length; i++){\n  \
    \      if(arr[i] % 2 === 0 && arr[i] < even){\n            even = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if(even === -1){\n        return\
    \ [];\n    }\n    return [even, index];\n}", "    if(arr.length === 0) return\
    \ [];\n    let evens = [];\n    for(let i = 0; i < arr.length; i++){\n       \
    \ if(arr[i] % 2 === 0){\n            evens.push([arr[i], i]);\n        }\n   \
    \ }\n    if(evens.length === 0) return [];\n    let smallest = evens[0];\n   \
    \ for(let i = 1; i < evens.length; i++){\n        if(evens[i][0] < smallest[0]){\n\
    \            smallest = evens[i];\n        }\n    }\n    return smallest;\n}\n\
    module.exports = pluck;", "  // let evens = []\n  // let minEven = Infinity\n\
    \  // let minEvenIndex = Infinity\n  // for(let i = 0; i < arr.length; i++){\n\
    \  //   if(arr[i] % 2 === 0){\n  //     evens.push(arr[i])\n  //     if(arr[i]\
    \ < minEven){\n  //       minEven = arr[i]\n  //       minEvenIndex = i\n  //\
    \     }\n  //   }\n  // }\n  // return minEvenIndex !== Infinity ? [minEven, minEvenIndex]\
    \ : []\n  ////////////////\n  return arr.filter(e => e % 2 === 0).sort((a, b)\
    \ => a - b).length > 0 ? [arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0],\
    \ arr.indexOf(arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0])] : []\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
