name: HumanEval_83_starts_one_ends
language: js
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n\
  \  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n\
  \  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"
completions: ["  if(n<1){\n    return 0;\n  }\n  if(n===1){\n    return 10;\n  }\n\
    \  if(n===2){\n    return 55;\n  }\n  var a = 9;\n  var b = 9;\n  var sum = a\
    \ + b;\n  while(n>2){\n    a = b;\n    b = a * 9;\n    sum = sum + a + b;\n  \
    \  n = n - 1;\n  }\n  return sum;\n}", "    //we count from 1 to 1000 how many\
    \ times \"1\" is found\n    var count = 0;\n    for(var i = 1; i <= Math.pow(10,\
    \ n) - 1; i++){\n        count += count_one(i.toString());\n    }\n    return\
    \ count;\n}", "    var res = 0;\n    var total = Math.pow(10, n) - 1;\n    for(var\
    \ i = 1; i < n; i++){\n        var high = Math.pow(10, i) - 1;\n        var low\
    \ = total - high;\n        res += high * low;\n    }\n    res += total;\n    return\
    \ res;\n}\n", "  if(n == 1){\n    return 2;\n  }\n  if(n < 1){\n    return 0;\n\
    \  }\n  let count = 0;\n  let nums = Array(n).fill(0);\n  for(let i = 0; i < nums.length;\
    \ i++){\n    if(i === 0 || i === nums.length - 1){\n      nums[i] = 1;\n    }\n\
    \    if(i > 0 && i < nums.length - 1){\n      nums[i] = 0;\n    }\n    count +=\
    \ parseInt(nums.join(''));\n  }\n  return count;\n}\n", "    var count = 0;\n\
    \    for(var i = 1; i <= Math.pow(10, n)-1; i++){\n        var string = i.toString();\n\
    \        if(string[0] == 1 || string[string.length-1] == 1){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    for(let i\
    \ = 1; i <= n; i++){\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}", "    //...\n}\n", "\tif(n == 1){\n\t\treturn 1;\n\t}\n\tvar num\
    \ = Math.pow(10, n-1);\n\treturn num + 9*(num-1);\n}\n", "  const start = count_start_one(n);\n\
    \  const end = count_end_one(n);\n  console.log(start);\n  console.log(end);\n\
    \  return start + end - 9;\n}\n", "    if(n === 0) return 0;\n    if(n === 1)\
    \ return 10;\n    if(n === 2) return 10 * 9 + 9 * 9;\n    var start_end = 10;\n\
    \    for(var i = 1; i < n; i++){\n        start_end += Math.pow(10, i) + 9 * Math.pow(10,\
    \ i - 1);\n    }\n    return start_end;\n}\n", "    if(n === 0){\n        return\
    \ 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    return 9 * Math.pow(10,n-1)\
    \ + 10 * (n-1) * Math.pow(10,n-2);\n}\n", "    if(n == 1){\n        return 10;\n\
    \    }\n    return (9*ten_pow(n-1)) + starts_one_ends(n-1);\n}", "    let arr\
    \ = new Array(n+1).fill(0);\n    arr[0] = 0;\n    arr[1] = 1;\n    for(let i =\
    \ 2; i <= n; i++){\n        arr[i] = 10 * arr[i-1] + Math.pow(10, i-1);\n    }\n\
    \    return arr[n];\n}\n", "  var res = 0;\n  for(var i = 0; i < n; i++){\n  \
    \  res += Math.pow(10, i);\n  }\n  return 2 * res;\n}", "  if(n==1){\n    return\
    \ 10;\n  }\n  if(n>1){\n    return ends_one(n)+starts_one(n);\n  }\n  else{\n\
    \    return \"Error!!!!\";\n  }\n}", "  if(n===1){\n    return 1;\n  }\n  if(n===2){\n\
    \    return 10;\n  }\n  return starts_one_ends(n-1)+10*starts_one_ends(n-2);\n\
    }", "    var count = 0;\n    for(var i = 1; i <= n; i++){\n        count += 9\
    \ * Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "    var ans = (Math.pow(10,\
    \ n-1) - Math.pow(9, n-1)) + (Math.pow(10, n-1) - Math.pow(9, n-1))*(n-1);\n \
    \   return ans;\n}\n", "\tif(n === 1){\n\t\treturn 10;\n\t}else{\n\t\tlet smaller\
    \ = starts_one_ends(n-1);\n\t\treturn (smaller - 1) * 9 + smaller;\n\t}\n}\n",
  "\tvar result = 9;\n\tfor(var i = 1; i < n; i++){\n\t\tresult *= 10 - i;\n\t}\n\t\
    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
