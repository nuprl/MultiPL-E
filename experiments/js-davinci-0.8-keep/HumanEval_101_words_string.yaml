name: HumanEval_101_words_string
language: js
prompt: "//You will be given a string of words separated by commas or spaces. Your\
  \ task is\n// to split the string into words and return an array of the words.\n\
  // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\"\
  , \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two,\
  \ three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"\
  six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"\
  ]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\
  \"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"\
  ]);\n}\n\ntest();"
completions: ["    return s.split(/[ ,]+/);\n}\n", "    return s.split(/[\\s,]+/);\n\
    }\n", "\treturn s.replace(/\\s/g,',').split(',')\n}", "  var words = s.split(/[\\\
    s,]+/);\n  return words;\n}", "    return s.split(/[ ,]+/);\n}\n", "    return\
    \ s.split(/[ ,]+/);\n}\n", "    // convert string to an array with the split method\n\
    \    var arr = s.split(\" \");\n    return arr;\n}\n", "    return s.split(/[\
    \ ,]+/);\n}", "    var result = [];\n    if (s) {\n        var ret = s.split(',');\n\
    \        ret.forEach(function (i) {\n            if (i) {\n                result.push(i.trim());\n\
    \            }\n        });\n    }\n    return result;\n}\n", "    return s.split('\
    \ ').filter(a => a);\n}", "    return s.split(/,| /)\n    // return s.split(/[\\\
    s,]+/)\n}\n", "    return s.split(/[\\s,]+/g);\n}\n", "    return s.split(/[\\\
    s,]+/);\n}", "    return s.split(/[ ,]+/);\n}", "    return s.split(/[ ,]+/);\n\
    }", "    return s.split(/,| /)\n}\n", "  return s.split(/[\\s,]+/);\n}", "   \
    \ return s.split(/[\\s,]+/);\n}", "    return s.split(/[\\s,]+/);\n}", "\treturn\
    \ s.split(/[ ,]+/g);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
