language: js
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if((i % 11 === 0 || i % 13 === 0) &&\
    \ i.toString().includes('7')){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpj7q04nke.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7q04nke.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822294
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tlet result = 0;\n\t\
    for(let i = 0; i < n; i++){\n\t\tlet currentDigit = i;\n\t\tif(currentDigit %\
    \ 11 === 0 || currentDigit % 13 === 0){\n\t\t\tif(currentDigit === 7){\n\t\t\t\
    \tresult++;\n\t\t\t}\n\t\t\twhile(currentDigit > 0){\n\t\t\t\tif(currentDigit\
    \ % 10 === 7){\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t\tcurrentDigit = (currentDigit\
    \ - currentDigit % 10) / 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tvar count = 0;\n\t\
    for(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tcount\
    \ += i.toString().split(\"\").filter(function(a){return a == 7}).length;\n\t\t\
    }\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var temp = i;\n            while(temp > 0){\n                var digit\
    \ = temp % 10;\n                if(digit == 7){\n                    count++;\n\
    \                }\n                temp = Math.floor(temp / 10);\n          \
    \  }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == '7'){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = String(i);\n            for(var j = 0; j < str.length; j++){\n\
    \                if(str[j] == '7'){\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    if(n < 7) return\
    \ 0;\n    let sum = 0;\n    for(let i = 7; i < n; i += 11){\n        if(i % 13\
    \ === 0) {\n            sum += 1;\n            continue;\n        }\n        let\
    \ s = i.toString();\n        for(let j = 0; j < s.length; j++){\n            if(s[j]\
    \ === '7') sum += 1;\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpqqb8ch0q.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqqb8ch0q.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tvar count = 0;\n\t\
    \n\tfor(var i = 0; i < n; i++) {\n\t\tvar str = i.toString();\n\t\tif(str.indexOf('7')\
    \ !== -1) {\n\t\t\tif(i % 11 === 0 || i % 13 === 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp7k696cb.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp7k696cb.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\nvar count = 0;\n  for(var\
    \ i = 0; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      var number\
    \ = i.toString();\n      for(var j = 0; j < number.length; j++){\n        if(number[j]\
    \ === \"7\"){\n          count += 1;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    var i = 0;\n    while(i<n){\n        if(i%11 == 0 && i%13 == 0){\n      \
    \      var tempString = i.toString();\n            for(var j = 0; j<tempString.length;\
    \ j++){\n                if(tempString[j] == 7){\n                    count++;\n\
    \                }\n            }\n        }\n        i++;\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpjzodskq2.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjzodskq2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var count = 0;\n \
    \ for(var i = 1; i < n; i++){\n    if((i % 11 == 0 || i % 13 == 0) && i.toString().includes(\"\
    7\")){\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpucctt__j.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpucctt__j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            if(i.toString().includes('7'))\n\
    \                count += 1;\n        }\n    }\n    return count;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp9nf1b5vn.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9nf1b5vn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tfunction check_divis(n){\n\
    \t\treturn n % 11 == 0 || n % 13 == 0;\n\t}\n\tfunction check_7(n){\n\t\tvar number\
    \ = n.toString();\n\t\tvar count = 0;\n\t\tfor(var i = 0; i < number.length; i++){\n\
    \t\t\tif(number[i] == '7'){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\
    \t}\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(check_divis(i)){\n\t\
    \t\tsum += check_7(i);\n\t\t}\n\t}\n\treturn sum;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tvar count = 0;\n\t\
    for(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tvar num\
    \ = i.toString();\n\t\t\tfor(var j = 0; j < num.length; j++){\n\t\t\t\tif(num[j]\
    \ == 7){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    var sum = 0;\n    for(var i = 0; i < n; i++){\n        if((i % 11 == 0 ||\
    \ i % 13 == 0) && i.toString().search(\"7\") != -1){\n            count++;\n \
    \           sum += i;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpr8ofqmob.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr8ofqmob.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let sum = 0;\n \
    \   for(let i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && (i\
    \ % 7 != 0)){\n            sum += Math.trunc(i / 10);\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpeypggiph.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeypggiph.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 0
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tvar i, s;\n\tfor(i\
    \ = 0, s = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\ts += i.toString().split(\"\
    \").reduce(function(x, y){\n\t\t\t\treturn (y == 7) ? x + 1 : x;\n\t\t\t}, 0);\n\
    \t\t}\n\t}\n\treturn s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var count = 0;\n \
    \ for(var i = 1; i < n; i++){\n    if((i % 11 === 0 || i % 13 === 0) && i.toString().indexOf('7')\
    \ != -1){\n      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmprrv6gfi6.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprrv6gfi6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i.toString().indexOf('7')\
    \ > -1){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp7r62flei.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7r62flei.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
- exit_code: 1
  program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  // good luck!\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n0\n    at test (/tmp/tmpza5cqhk0.js:17:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpza5cqhk0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822324
