name: HumanEval_94_skjkasdkd
language: js
prompt: "//You are given a list of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n//\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nfunction skjkasdkd(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
  \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0,\
  \ 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["  let sum = 0;\n  let largestPrime = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let temp = 0;\n    for(let j = 2; j < lst[i]; j++){\n      if(lst[i]\
    \ % j == 0){\n        temp++;\n      }\n    }\n    if(temp == 0){\n      largestPrime\
    \ = lst[i];\n    }\n  }\n  while(largestPrime > 0){\n    sum += largestPrime %\
    \ 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n  return sum;\n\
    }\n", "    if (typeof lst === 'number'){\n        lst = Array.from(arguments);\n\
    \    }\n    let prime = [];\n    lst.forEach(element => {\n        if (prime.indexOf(element)\
    \ === -1){\n            prime.push(element);\n        }\n    });\n    let primeNumber\
    \ = Math.max(...prime);\n    let str = String(primeNumber);\n    let answer =\
    \ 0;\n    for (let i = 0; i < str.length; i++){\n        answer += Number(str[i]);\n\
    \    }\n    return answer;\n}", "\tlet largest = Math.max(...lst);\n\tconsole.log(largest);\n\
    \tlet prime = isPrime(largest);\n\tconsole.log(prime);\n\tlet sum = 0;\n\tif(prime\
    \ === true){\n\t\tfor(let i = 0; i < largest.length; i++){\n\t\t\tsum += largest[i];\n\
    \t\t}\n\t}\n\treturn sum;\n}\n", "  lst = lst.sort((a,b)=>a-b)\n  let prime =\
    \ 0;\n  for(let i = lst.length - 1; i >= 0; i--){\n    if(isPrime(lst[i])){\n\
    \      prime = lst[i];\n      break;\n    }\n  }\n  if(prime === 0){\n    return\
    \ 0;\n  }\n  return prime.toString().split('').reduce((sum, num)=> parseInt(sum)\
    \ + parseInt(num))\n}\n", "  let primes = [];\n  lst.sort((a,b)=>b-a).forEach(i=>{\n\
    \    if(isPrime(i)){\n      primes.push(i);\n    }\n  });\n  return sumDigits(primes[0])\n\
    }", "    var largestPrime = 0;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(prime(lst[i]) && largestPrime < lst[i]){\n            largestPrime =\
    \ lst[i];\n        }\n    }\n    return largestPrime;\n}", "    let arr = [];\n\
    \    lst.forEach(x => {\n        if(lst.length > 1 && isPrime(x)){\n         \
    \   arr.push(x);\n        }\n    });\n    let sum = arr.reduce((a, b) => a + b,\
    \ 0);\n    let sumString = sum.toString();\n    let sumArray = sumString.split('');\n\
    \    let sumResult = sumArray.reduce((a, b) => a + parseInt(b), 0);\n    return\
    \ sumResult;\n}\n", "    var largest = 0;\n    var sum = 0;\n    var largestString\
    \ = '';\n    for(var i = 0; i < lst.length; i++){\n        if(isPrime(lst[i])\
    \ === true){\n            if(lst[i] > largest){\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    largestString = largest.toString();\n  \
    \  for(var j = 0; j < largestString.length; j++){\n        sum += parseInt(largestString[j]);\n\
    \    }\n    return sum;\n}", "  let jedi = [];\n  let master = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    jedi.push(lst[i]);\n    let jediLength = jedi.length;\n\
    \    for(let j = 0; j < jediLength; j++){\n      if(jedi[0] % jedi[j] === 0 &&\
    \ jedi[0] != jedi[j]){\n        jedi.shift();\n        break;\n      }\n    }\n\
    \  }\n  for(let i = 0; i < jedi.length; i++){\n    let element = jedi[i];\n  \
    \  let nextElement = jedi[i+1];\n    if(nextElement !== undefined){\n      if(element\
    \ > nextElement){\n        master.push(element);\n      }\n    }else{\n      master.push(element);\n\
    \    }\n  }\n  let element = master[0];\n  element = element.toString();\n  let\
    \ counter = 0;\n  for(let i = 0; i < element.length; i++){\n    counter += parseInt(element[i]);\n\
    \  }\n  return counter;\n}\n", "  \n}\n", "    let n = Math.max(...lst);\n   \
    \ let prime;\n    let sum = 0;\n    let i = 0;\n    while(i <= n){\n        if(isPrime(i)){\n\
    \            prime = i;\n        }\n        i++;\n    }\n    let str = prime.toString();\n\
    \    for(let i = 0; i < str.length; i++){\n        sum += parseInt(str[i]);\n\
    \    }\n    return sum;\n}", "  function isPrime(num) {\n    for(var i = 2; i\
    \ < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\
    \  var max=Math.max.apply(null,lst);\n  for(var i=max;i>0;i--){\n    if(isPrime(i)){\n\
    \      var res=i.toString().split('').reduce(function(x,y){return +x + +y});\n\
    \      return res;\n    }\n  }\n}", "    let str = [... new Set(lst)].sort((a,b)=>\
    \ b-a).filter(el=>{\n        if(el === 1) return false;\n        for(let i = 2;\
    \ i < el; i++){\n            if(el % i === 0) return false;\n        }\n     \
    \   return true;\n    })[0].toString();\n    return str.split('').reduce((acc,\
    \ cur)=> acc + parseInt(cur), 0);\n}", "\n}", "    let result;\n    //step one\
    \ get all primes in the list\n    let primeList = []\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(isPrime(lst[i])){\n            primeList.push(lst[i])\n  \
    \      }\n    }\n    //step two get the largest prime\n    let largestPrime =\
    \ Math.max(...primeList)\n    //step three get the largest prime's digits\n  \
    \  let primeDigits = largestPrime.toString().split('').map(Number)\n    //step\
    \ four get the sum of the digits\n    result = primeDigits.reduce((a,b) => a +\
    \ b, 0)\n    return result\n}", "    if (lst == 0) {\n        return 0;\n    }\n\
    \    let b = lst.join('').split('').map(Number);\n    let sum = b.reduce((a, b)\
    \ => a + b, 0);\n    return sum;\n}\n", "    let arr=[];\n    for(let i=0;i<lst.length;i++){\n\
    \        if(isPrime(lst[i])) arr.push(lst[i]);\n    }\n    let max=Math.max(...arr);\n\
    \    max=max.toString();\n    let count=0;\n    for(let j=0;j<max.length;j++){\n\
    \        count+=+max[j];\n    }\n    return count;\n}", "    var sum = 0;\n  \
    \  var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(max\
    \ < lst[i]){\n            max = lst[i];\n        }\n    }\n    for(var i = 2;\
    \ i < max; i++){\n        if(isPrime(i)){\n            var tmpSum = 0;\n     \
    \       for(var j = 0; j < lst.length; j++){\n                if(lst[j] == i){\n\
    \                    tmpSum += i;\n                }\n            }\n        \
    \    if(tmpSum >= sum){\n                sum = tmpSum;\n            }\n      \
    \  }\n    }\n    return sum;\n}\n", "    let res = lst.sort((a,b)=>b-a).filter(x=>x>=2).find(x=>isPrime(x));\n\
    \    return res.toString().split('').reduce((a,b)=>+a+ +b);\n}", "  //TODO: Write\
    \ - Your - Code\n  let c=[]\n  lst.forEach(x=>{\n    if(isPrime(x))\n    c.push(x)\n\
    \  })\n  console.log(c)\n  let max=0\n  c.forEach(x=>{\n    if(x>max)\n    max=x\n\
    \  })\n  let str=max.toString()\n  let sum=0\n  for(let i=0;i<str.length;i++){\n\
    \    sum+=parseInt(str[i])\n  }\n  return sum\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
