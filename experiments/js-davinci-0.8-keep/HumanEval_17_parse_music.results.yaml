name: HumanEval_17_parse_music
language: js
results:
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var pattern = /[o.].\\|?/g;\n    var beats = [];\n    var result;\n    while\
    \ ((result = pattern.exec(music_string)) !== null) {\n        var whole_note =\
    \ result[0];\n        var dot = whole_note.split(\"|\");\n        var dot_length\
    \ = dot.length;\n        var beat = whole_note.replace(\"o\", \"4\");\n      \
    \  beat = beat.replace(\".\", \"1\");\n        beat = parseInt(beat);\n      \
    \  beats.push(beat);\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 4, 4 ]\n\nshould equal\n\n[ 4, 4, 4,\
    \ 4 ]\n    at test (/tmp/tmpgzhqt4eu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgzhqt4eu.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4 ],\n  expected: [ 4, 4, 4, 4 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \  let beats = []\n  let split = music_string.split(' ')\n  for (let i = 0; i\
    \ < split.length; i++) {\n    let note = split[i]\n    if (note == 'o') {\n  \
    \    beats.push(4)\n    } else if (note == 'o|') {\n      beats.push(2)\n    }\
    \ else if (note == '.|') {\n      beats.push(1)\n    }\n  }\n  return beats\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let bars = music_string.split(' ');\n    let result = [];\n    for (let i\
    \ = 0; i < bars.length; i++) {\n        if (bars[i] === 'o') {\n            result.push(4);\n\
    \        } else if (bars[i] === 'o|') {\n            result.push(2);\n       \
    \ } else if (bars[i] === '.|') {\n            result.push(1);\n        }\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \tvar note = '';\n\tvar beats = [];\n\tvar i = 0;\n\tvar res = [];\n\twhile(i\
    \ < music_string.length){\n\t\tif(music_string[i] == ' '){\n\t\t\tif(note == 'o'){\n\
    \t\t\t\tbeats.push(4);\n\t\t\t}\n\t\t\telse if(note == 'o|'){\n\t\t\t\tbeats.push(2);\n\
    \t\t\t}\n\t\t\telse if(note == '.|'){\n\t\t\t\tbeats.push(1);\n\t\t\t}\n\t\t\t\
    note = '';\n\t\t}\n\t\telse{\n\t\t\tnote += music_string[i];\n\t\t}\n\t\ti++;\n\
    \t}\n\tif(note == 'o'){\n\t\tbeats.push(4);\n\t}\n\telse if(note == 'o|'){\n\t\
    \tbeats.push(2);\n\t}\n\telse if(note == '.|'){\n\t\tbeats.push(1);\n\t}\n\treturn\
    \ beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let result = [];\n    const map = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    };\n    music_string.split(' ').forEach(function(note){\n\
    \        result.push(map[note]);\n    });\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpejnrrko5.js:28:10)\n    at Object.<anonymous> (/tmp/tmpejnrrko5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {'o': 4, 'o|': 2, '.|': 1};\n    var array = music_string.split('\
    \ ');\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n  \
    \      result.push(beats[array[i]]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpbm8slnbz.js:25:10)\n    at Object.<anonymous> (/tmp/tmpbm8slnbz.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    return music_string.split(' ').map(m => {\n        switch(m) {\n        \
    \    case 'o':\n                return 4;\n            case 'o|':\n          \
    \      return 2;\n            case '.|':\n                return 1;\n        }\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmp20oxlskc.js:28:10)\n    at Object.<anonymous> (/tmp/tmp20oxlskc.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \  var beats = [];\n  var new_music_string = music_string.split(' ');\n  for (i=0;\
    \ i<new_music_string.length; i++){\n    if (new_music_string[i] == 'o'){\n   \
    \   beats.push(4);\n    }\n    else if (new_music_string[i] == 'o|'){\n      beats.push(2);\n\
    \    }\n    else if (new_music_string[i] == '.|'){\n      beats.push(1);\n   \
    \ }\n  }\n  return beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let output = [],\n        i = 0,\n        obj = {\n            'o': '4',\n\
    \            'o|': '2',\n            '.|': '1'\n        };\n    while(music_string.length){\n\
    \        output.push(Number(obj[music_string.slice(0, 2)]));\n        music_string\
    \ = music_string.slice(2, music_string.length);\n    }\n    return output;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ NaN, NaN, NaN, 4 ]\n\nshould equal\n\n\
    [ 4, 4, 4, 4 ]\n    at test (/tmp/tmpsvwop0w2.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsvwop0w2.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, 4 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \  var countArray = [];\n  for (var i = 0; i < music_string.length; i++){\n  \
    \  if (music_string[i] == 'o'){\n      countArray.push(4);\n    }\n    else if\
    \ (music_string[i] == 'o' && music_string[i+1] == '|'){\n      countArray.push(2);\n\
    \    }\n    else if (music_string[i] == '.' && music_string[i+1] == '|'){\n  \
    \    countArray.push(1);\n    }\n  }\n  return countArray;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 4, 1, 1, 4, 4, 4, 4 ]\n\nshould equal\n\
    \n[ 2, 2, 1, 1, 4, 4, 4, 4 ]\n    at test (/tmp/tmp0nz5os_p.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0nz5os_p.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 4, 1, 1,\n    4, 4, 4, 4\n  ],\n  expected: [\n    2, 2, 1, 1,\n    4, 4, 4,\
    \ 4\n  ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var result = [];\n    var notes = music_string.split(' ');\n    notes.forEach(function(note){\n\
    \        result.push(beats[note]);\n    });\n    return result;\n}\n\nmodule.exports\
    \ = {\n    fibonacci: fibonacci,\n    format_date: format_date,\n    find_longest_word:\
    \ find_longest_word,\n    get_words_with_length: get_words_with_length,\n    find_duplicate_id:\
    \ find_duplicate_id,\n    get_words_with_two_vowels: get_words_with_two_vowels,\n\
    \    get_words_with_x_vowels: get_words_with_x_vowels,\n    get_words_ending_with_ing:\
    \ get_words_ending_with_ing,\n    get_words_with_b_and_ing: get_words_with_b_and_ing,\n\
    \    map_words_to_camel_case: map_words_to_camel_case,\n    map_words_to_snake_case:\
    \ map_words_to_snake_case,\n    map_words_to_all_caps: map_words_to_all_caps,\n\
    \    map_words_to_length: map_words_to_length,\n    map_words_to_first_letter:\
    \ map_words_to_first_letter,\n    map_words_to_array_of_chars: map_words_to_array_of_chars,\n\
    \    map_words_to_length_of_first_and_last_chars: map_words_to_length_of_first_and_last_chars,\n\
    \    remove_chars_from_first_and_last: remove_chars_from_first_and_last,\n   \
    \ get_nth_item: get_nth_item,\n    concat_first_two_strings: concat_first_two_strings,\n\
    \    find_first_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj2mo4xl5.js:45\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    //parse the music string and create an array of numbers\n    var array =\
    \ [];\n    if(music_string === ''){\n        return array;\n    }\n    var temp\
    \ = music_string.split(\" \");\n    for(var i = 0; i < temp.length; i++){\n  \
    \      if(temp[i] === 'o'){\n            array.push(4);\n        }\n        else\
    \ if(temp[i] === 'o|'){\n            array.push(2);\n        }\n        else if(temp[i]\
    \ === '.|'){\n            array.push(1);\n        }\n    }\n    return array;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var notes = ['o|', '.|', 'o'];\n    var beats = [2, 1, 4];\n    var parsed_music\
    \ = music_string.split(' ');\n    var result = [];\n    for (var i = 0; i < parsed_music.length;\
    \ i++){\n        for (var j = 0; j < notes.length; j++){\n            if (parsed_music[i]\
    \ == notes[j]){\n                result.push(beats[j]);\n            }\n     \
    \   }\n    }\n    return result;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    return music_string.split(' ').map(x => {\n        switch(x) {\n        \
    \    case 'o': return 4;\n            case 'o|': return 2;\n            case '.|':\
    \ return 1;\n        }\n    });\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpd4e9amxw.js:24:10)\n    at Object.<anonymous> (/tmp/tmpd4e9amxw.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \  var result = [];\n  var beats = 0;\n  for(var i = 0; i < music_string.length;\
    \ i++){\n    if(music_string[i] === 'o'){\n      beats = 4;\n    }else if(music_string[i]\
    \ === '|'){\n      beats = beats/2;\n    }else if(music_string[i] === '.'){\n\
    \      beats = 1;\n    }\n    result.push(beats);\n  }\n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 4, 4, 4, 4, 4, 4 ]\n\nshould equal\n\
    \n[ 4, 4, 4, 4 ]\n    at test (/tmp/tmpo0f8_03q.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo0f8_03q.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 4, 4, 4,\n    4, 4, 4\n  ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \tvar result = [];\n\tvar array_of_notes = music_string.split(' ');\n\tfor (var\
    \ i = 0; i < array_of_notes.length; i++) {\n\t\tif (array_of_notes[i].charAt(0)\
    \ == 'o') {\n\t\t\tif (array_of_notes[i].charAt(1) == '|') {\n\t\t\t\tresult.push(2);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(4);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\
    \t\tresult.push(1);\n\t\t}\n\t}\n\treturn result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpymzsacxk.js:33:10)\n    at Object.<anonymous> (/tmp/tmpymzsacxk.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    const note_types = ['whole', 'half', 'quarter'];\n    const music_notes =\
    \ music_string.split(' ');\n    const values = [4, 2, 1];\n    let result = [];\n\
    \    for (let note of music_notes){\n        if (note[0] === 'o') {\n        \
    \    if (note.length === 1) {\n                result.push(values[0]);\n     \
    \       } else {\n                result.push(values[1]);\n            }\n   \
    \     } else {\n            result.push(values[2]);\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmp8g4llnw0.js:34:10)\n    at Object.<anonymous> (/tmp/tmp8g4llnw0.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \tvar notes = music_string.split(' ');\n\tvar note_value = ['o', 'o|', '.|', '..'];\n\
    \tvar note_time = [4, 2, 1, 0.5];\n\tvar time = [];\n\tvar i = 0;\n\twhile(notes[i]){\n\
    \t\tvar j = 0;\n\t\twhile(note_value[j]){\n\t\t\tif(notes[i] == note_value[j]){\n\
    \t\t\t\ttime.push(note_time[j]);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\
    return time;\n}\nparse_music('o o| .| o| o| .| .| .| .| o o');\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \tlet result = [];\n\tlet notes = music_string.split(' ');\n\tnotes.forEach(function(item){\n\
    \t\tswitch(item){\n\t\t\tcase 'o':\n\t\t\t\tresult.push(4);\n\t\t\t\tbreak;\n\t\
    \t\tcase 'o|':\n\t\t\t\tresult.push(2);\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\t\
    \t\tresult.push(1);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[]\n    at\
    \ test (/tmp/tmp8_ah4hly.js:19:10)\n    at Object.<anonymous> (/tmp/tmp8_ah4hly.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
