name: HumanEval_149_sorted_list_sum
language: js
prompt: "//Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// assert list_sort([\"\
  aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\"\
  , \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
  aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
  AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\"\
  , \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"\
  abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"\
  AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\"\
  , \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
completions: ["   return lst.sort(function(a,b){\n       return a.length - b.length\n\
    \   })\n   .filter(function(a){\n        return a.length % 2 === 0\n   })\n}",
  "    let s_lst = lst.filter(element => element.length % 2 === 0);\n    s_lst.sort((a,\
    \ b) => {return (a.length - b.length) || a.localeCompare(b)});\n    return s_lst;\n\
    }\n", "    new_lst = []\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length\
    \ % 2 == 0){\n            new_lst.push(lst[i])\n        }\n    }\n    return new_lst.sort(compare)\n\
    }\n", "    function length(lst){\n        var length_lst = [];\n        for(var\
    \ x = 0; x < lst.length; x++){\n            var l = lst[x].length;\n         \
    \   length_lst.push(l);\n        }\n        return length_lst;\n    }\n    var\
    \ new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length\
    \ % 2 === 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return\
    \ length(new_lst);\n}\n", "\treturn lst.reduce(function(acc, num){\n\t\treturn\
    \ acc + num;\n\t}, 0);\n}", "    // filter out the odd length words\n    var result\
    \ = lst.filter(function(word){\n        return word.length % 2 === 0;\n    });\n\
    \    //sort the list by length of each word\n    result.sort(function(a, b){\n\
    \        return a.length - b.length;\n    });\n    //return the list sorted by\
    \ that rule\n    return result;\n}\nvar lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    ];", "    // Your code here\n    return 1;\n}\nassert(sorted_list_sum([\"aa\"\
    , \"a\", \"aaa\"]), \"aa\");\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\",\
    \ \"cd\"]), \"abcd\");\n", "    let new_lst = lst.slice(0);\n    new_lst.sort();\n\
    \    let sum = 0;\n    let sum_new_lst = [];\n    for (let i = 0; i < new_lst.length;\
    \ i++) {\n        sum += new_lst[i];\n        sum_new_lst.push(sum);\n    }\n\
    \    return sum_new_lst;\n}", "\treturn lst.sort();\n}\nassert(\n\tsorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]),\n\t[\"aa\"]\n);\nassert(\n\tsorted_list_sum([\"ab\", \"\
    a\", \"aaa\", \"cd\"]),\n\t[\"ab\", \"cd\"]\n);\n\n", "    var new_lst = lst.filter(function(a){\n\
    \        return a.length % 2 == 0;\n    });\n    var sort_by_length = function(a,\
    \ b){\n        if(a.length == b.length){\n            return a.localeCompare(b);\n\
    \        }\n        return a.length - b.length;\n    };\n    return new_lst.sort(sort_by_length);\n\
    }", "    var odd_list = [];\n    var even_list = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].length % 2 == 0){\n            even_list.push(lst[i]);\n\
    \        }else{\n            odd_list.push(lst[i]);\n        }\n    }\n    odd_list.sort();\n\
    \    return odd_list;\n}\n", "    return lst.sort(function(a,b){\n        if(a.length\
    \ > b.length){\n            return 1;\n        }\n        else if(a.length < b.length){\n\
    \            return -1;\n        }\n        else{\n            return a.localeCompare(b);\n\
    \        }\n    }).filter(function(str){\n        return str.length % 2 === 0;\n\
    \    });\n}\nvar list = [\"ab\", \"a\", \"aaa\", \"cd\"];", "    var lst_sorted\
    \ = lst.sort(function(a, b){\n        if (a.length > b.length) return -1;\n  \
    \      if (a.length < b.length) return 1;\n        if (a < b) return -1;\n   \
    \     if (a > b) return 1;\n        return 0;\n    });\n    var count = 1;\n \
    \   while (count < lst_sorted.length){\n        if (lst_sorted[count-1].length\
    \ == lst_sorted[count].length){\n            lst_sorted.splice(count, 1);\n  \
    \      }\n        else {\n            count ++;\n        }\n    }\n    return\
    \ lst_sorted;\n}\n", "    return lst.sort(function(a,b){\n        if(a.length<b.length){\n\
    \            return -1;\n        }else if(a.length>b.length){\n            return\
    \ 1;\n        }else{\n            return a.localeCompare(b);\n        }\n    }).filter(function(a){\n\
    \        return a.length%2==0;\n    });\n}", "    var odd_lst = [];\n    var even_lst\
    \ = [];\n    var result = [];\n    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].length % 2 === 0){\n            even_lst.push(lst[i]);\n\
    \        }else{\n            odd_lst.push(lst[i]);\n        }\n    }\n    for(var\
    \ j = 0; j < even_lst.length; j++){\n        result.push(even_lst[j]);\n    }\n\
    \    for(var k = 0; k < odd_lst.length; k++){\n        result.push(odd_lst[k]);\n\
    \    }\n    for(var m = 0; m < result.length; m++){\n        for(var n = 0; n\
    \ < result[m].length; n++){\n            sum += result[m].charCodeAt(n);\n   \
    \     }\n    }\n    console.log(sum);\n}\nsorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]);", "    var alpha_lst = lst.sort();\n    var result = [];\n    for(var\
    \ i = 0; i < alpha_lst.length; i++) {\n        if(result.indexOf(alpha_lst[i])\
    \ == -1) {\n            result.push(alpha_lst[i]);\n        }\n    }\n    return\
    \ result;\n}", "    var lst_lengths = []\n    var lst_result = []\n    var j =\
    \ 0\n    for (i = 0; i < lst.length; i++){\n        lst_lengths.push(lst[i].length)\n\
    \    }\n    // print(lst_lengths)\n    lst_lengths.sort()\n    // print(lst_lengths)\n\
    \    // console.log(lst_lengths)\n    while (j < lst_lengths.length){\n      \
    \  for (i = 0; i < lst.length; i++){\n            if (lst[i].length == lst_lengths[j]){\n\
    \                lst_result.push(lst[i])\n            }\n        }\n        j++\n\
    \    }\n    return lst_result\n}", "    let total_sum = 0;\n    for(let l of lst){\n\
    \        total_sum += l;\n    }\n    return total_sum;\n}\nassert_equals(sorted_list_sum([1,3,5,6,2,6,7,5,2,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,",
  "  var lst_count = []\n  for (var i = 0; i < lst.length; i++){\n    lst_count.push(lst[i].length)\n\
    \  }\n  lst_count.sort()\n  for (var i = 0; i < lst_count.length; i++){\n    for\
    \ (var j = 0; j < lst.length; j++){\n      if (lst_count[i] == lst[j].length){\n\
    \        lst.splice(j, 1)\n        return lst_count[i]\n      }\n    }\n  }\n}",
  "    var temp;\n    for(var i = 0; i < lst.length; i++){\n        for(var j = i\
    \ + 1; j < lst.length; j++){\n            if(lst[i].length > lst[j].length){\n\
    \                temp = lst[i];\n                lst[i] = lst[j];\n          \
    \      lst[j] = temp;\n            }\n        }\n    }\n    return lst;\n}\n\n\
    var lst = [\"aa\", \"a\", \"aaa\"];"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
