name: HumanEval_141_file_name_check
language: js
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\"\
  ) # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nfunction file_name_check(file_name){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"\
  s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"\
  No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"\
  ?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"\
  No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n \
  \ assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    var digits = 0;\n    var dot_counter = 0;\n    var dot_position\
    \ = 0;\n    var dot_position_before = 0;\n    var dot_position_after = 0;\n  \
    \  var valid_letters = ['txt', 'exe', 'dll'];\n    var i;\n    for (i = 0; i <\
    \ file_name.length; i++) {\n        if (file_name[i] == '.') {\n            dot_counter++;\n\
    \            dot_position = i;\n        }\n        if ((file_name[i] > '0') &&\
    \ (file_name[i] < '9')) {\n            digits++;\n        }\n    }\n    dot_position_before\
    \ = file_name.substring(0, dot_position);\n    dot_position_after = file_name.substring(dot_position\
    \ + 1, file_name.length);\n    //console.log(dot_position_before);\n    //console.log(dot_position_after);\n\
    \    if ((digits > 3) || (dot_counter != 1) || (dot_position_before.length ==\
    \ 0) || ((dot_position_before[0] < 'a') || (dot_position_before[0] > 'z')) ||\
    \ ((dot_position_before[0] < 'A') || (dot_position_before[0] > 'Z')) || (valid_letters.indexOf(dot_position_after)\
    \ == -1)) {\n        return 'No';\n    }\n    return 'Yes';\n}", "    // create\
    \ regular expressions\n    const reg = /^[a-zA-Z]+[0-9]{0,3}\\.txt$|^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$|^[a-zA-Z]+[0-9]{0,3}\\.dll$/\n    if(reg.test(file_name)){\n        return\
    \ 'Yes'\n    }\n    return 'No'\n}", "  let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$/\n  return regex.test(file_name) ? 'Yes' : 'No'\n}\n", "\tif (file_name.match(/[0-9]/g)===null\
    \ || file_name.match(/[0-9]/g).length<4){\n\t\tif (file_name.match(/\\./g)===null\
    \ || file_name.match(/\\./g).length==1){\n\t\t\tif (file_name.match(/[A-Za-z]+\\\
    .[a-zA-Z]+/g)===null || file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g).length==1){\n\
    \t\t\t\tvar ext = file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g)[0].split('.')[1];\n\
    \t\t\t\tif (ext==\"txt\" || ext==\"exe\" || ext==\"dll\"){\n\t\t\t\t\treturn \"\
    Yes\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\";\n}\n", "\t//'^([a-zA-Z][a-zA-Z0-9]{0,2})\\\
    .((txt)|(exe)|(dll))$'\n\tlet reg = /^([a-zA-Z][a-zA-Z0-9]{0,2})\\.((txt)|(exe)|(dll))$/;\n\
    \tlet res = reg.test(file_name);\n\tconsole.log(res);\n\tif(res){\n\t\treturn\
    \ 'Yes';\n\t}\n\treturn 'No';\n}", "    // Write your code here\n}\n", "    var\
    \ toReturn = false;\n    var digits = 0;\n    var i = 0;\n    while(i < file_name.length\
    \ && digits <= 3){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n\
    \            digits++;\n        }\n        i++;\n    }\n    if(digits > 3){\n\
    \        return toReturn;\n    }\n    var dot = 0;\n    for(var j = 0; j < file_name.length;\
    \ j++){\n        if(file_name[j] == '.'){\n            dot++;\n        }\n   \
    \ }\n    if(dot != 1){\n        return toReturn;\n    }\n    if(file_name[0] <\
    \ 'a' || file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z'){\n  \
    \      return toReturn;\n    }\n    var first_dot_index = file_name.indexOf('.');\n\
    \    var sub_after_dot = file_name.substring(first_dot_index + 1);\n    if(sub_after_dot\
    \ != 'txt' && sub_after_dot != 'exe' && sub_after_dot != 'dll'){\n        return\
    \ toReturn;\n    }\n    toReturn = true;\n    return toReturn;\n}", "  //write\
    \ your code here\n}\n", "    const file_arr = file_name.split('.');\n    let count_digits\
    \ = 0;\n    for(let i = 0; i < file_arr[0].length; i++){\n        if(file_arr[0][i]\
    \ >= '0' && file_arr[0][i] <= '9'){\n            count_digits++;\n        }\n\
    \    }\n    if(count_digits >= 4){\n        return 'No';\n    }\n    if(file_arr.length\
    \ !== 2){\n        return 'No';\n    }\n    if(file_arr[0][0] < 'a' || file_arr[0][0]\
    \ > 'z'){\n        return 'No';\n    }\n    if(file_arr[1] !== 'txt' && file_arr[1]\
    \ !== 'exe' && file_arr[1] !== 'dll'){\n        return 'No';\n    }\n    return\
    \ 'Yes';\n}\n", "\n}\n", "    \n}\n", "    if (/^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{3}$/.test(file_name)){\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n", "    if(!/^[a-zA-Z]+([\\\
    w.]+)?$/.test(file_name)){\n        return 'No';\n    }\n    const file_name_array\
    \ = file_name.split('.');\n    const file_name_without_extension = file_name_array[0];\n\
    \    const file_extension = file_name_array[1];\n    if(file_name_without_extension.match(/\\\
    d/g).length > 3 || !/^(txt|exe|dll)$/.test(file_extension)){\n        return 'No';\n\
    \    }\n    return 'Yes';\n}", "    if (file_name.match(/[0-9]/g) == null) {\n\
    \        return 'No';\n    }\n    if (file_name.match(/[0-9]/g).length > 3) {\n\
    \        return 'No';\n    }\n    if (file_name.match(/\\./g) == null) {\n   \
    \     return 'No';\n    }\n    if (file_name.match(/\\./g).length != 1) {\n  \
    \      return 'No';\n    }\n    var file_name_split = file_name.split('.');\n\
    \    if (file_name_split[0].length == 0) {\n        return 'No';\n    }\n    if\
    \ (file_name_split[0].match(/[a-zA-Z]/g) == null) {\n        return 'No';\n  \
    \  }\n    if (file_name_split[1] != 'txt' && file_name_split[1] != 'exe' && file_name_split[1]\
    \ != 'dll') {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "  //your\
    \ code here\n}\n", "    let reg = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n\
    \    if(reg.test(file_name)){\n        return 'Yes';\n    }else{\n        return\
    \ 'No';\n    }\n}\n", "    file_name = file_name.split(\".\")\n    var file_name_check_result\
    \ = 'Yes'\n    if(file_name.length>2){\n        file_name_check_result = 'No'\n\
    \    }else if(file_name[0].match(/[0-9]/gi) == null){\n        file_name_check_result\
    \ = 'No'\n    }else if(file_name[0].match(/[0-9]/gi).length>3){\n        file_name_check_result\
    \ = 'No'\n    }else if(file_name[1] != 'txt' && file_name[1] != 'exe' && file_name[1]\
    \ != 'dll'){\n        file_name_check_result = 'No'\n    }\n    return file_name_check_result\n\
    }", "\tif (file_name.match(/[a-zA-Z]\\w*\\.[a-zA-Z]{3}/)){\n\t\tif (file_name.match(/[0-9]{4}/)){\n\
    \t\t\treturn 'No';\n\t\t}\n\t\treturn 'Yes';\n\t}\n\treturn 'No';\n}\n", "\tvar\
    \ digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\t\
    var alphapet = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar file_types = [\"txt\",\"\
    exe\",\"dll\"];\n\tvar count = 0;\n\tvar file_name_split = file_name.split(\"\
    .\");\n\tif(file_name_split.length!=2){\n\t\treturn \"No\";\n\t}\n\tvar file_type\
    \ = file_name_split[1];\n\tvar count_type = 0;\n\tvar check_type = 0;\n\tfor(var\
    \ i=0;i<file_types.length;i++){\n\t\tif(file_type===file_types[i]){\n\t\t\tcheck_type\
    \ = 1;\n\t\t}\n\t}\n\tif(check_type===0){\n\t\treturn \"No\";\n\t}\n\tvar file_name\
    \ = file_name_split[0];\n\tvar first_char = file_name[0];\n\tvar check_char =\
    \ 0;\n\tfor(var i=0;i<alphapet.length;i++){\n\t\tif(first_char===alphapet[i]){\n\
    \t\t\tcheck_char = 1;\n\t\t}\n\t}\n\tif(check_char===0){\n\t\treturn \"No\";\n\
    \t}\n\tfor(var i=0;i<file_name.length;i++){\n\t\tvar char = file_name[i];\n\t\t\
    for(var j=0;j<digits.length;j++){\n\t\t\tif(char===digits[j]){\n\t\t\t\tcount\
    \ += 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(count>3){\n\t\treturn \"No\";\n\t}\n\treturn\
    \ \"Yes\";\n}", "  let regex = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,12})\\.(txt|exe|dll)$/;\n\
    \  let str = file_name.match(regex);\n  if(str === null){\n    return \"No\";\n\
    \  }\n  return \"Yes\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
