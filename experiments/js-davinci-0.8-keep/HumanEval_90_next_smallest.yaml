name: HumanEval_90_next_smallest
language: js
prompt: "//You are given a list of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n// Return None if there is\
  \ no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\n\
  function next_smallest(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5,\
  \ 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1,\
  \ 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1,\
  \ 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\n\
  test();"
completions: ["    var smallest = Number.MAX_VALUE;\n    var next_smallest = Number.MAX_VALUE;\n\
    \    var counter = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < smallest){\n            next_smallest = smallest;\n            smallest =\
    \ lst[i];\n        }\n        else if(lst[i] < next_smallest && lst[i] > smallest){\n\
    \            next_smallest = lst[i];\n        }\n        if(lst[i] == lst[i +\
    \ 1]){\n            counter += 1;\n        }\n    }\n    if(counter == lst.length){\n\
    \        return null;\n    }\n    else{\n        return next_smallest;\n    }\n\
    }", "    if (lst.length === 0 || lst.length === 1) return null;\n    if (lst.length\
    \ === 2) return lst[0] === lst[1] ? null : lst[1];\n    let first_min = lst[0];\n\
    \    let second_min = lst[1];\n    for (let i = 1; i < lst.length; i++){\n   \
    \     if (lst[i] < first_min){\n            second_min = first_min;\n        \
    \    first_min = lst[i];\n        }\n        else if (lst[i] < second_min && lst[i]\
    \ !== first_min){\n            second_min = lst[i];\n        }\n    }\n    return\
    \ second_min;\n}\n", "    let min = Math.min(...lst);\n    let minSecond = lst.filter(num\
    \ => num > min);\n    if (minSecond.length > 0) {\n        return Math.min(...minSecond);\n\
    \    } else {\n        return null;\n    }\n}", "    if(lst.length < 2) return;\n\
    \    var min = Math.min(...lst);\n    var sec = Infinity;\n    for(var el of lst){\n\
    \        if(el > min && el < sec) sec = el;\n    }\n    return sec;\n}\n", " \
    \   if(lst.length==0){\n        return null;\n    }\n    var min=Math.min(...lst);\n\
    \    if(lst.indexOf(min)==-1){\n        return null;\n    }\n    if(lst.indexOf(min)!=-1){\n\
    \        var min_2=lst[lst.indexOf(min)];\n        var min_index_2=lst.indexOf(min);\n\
    \        for(var i=lst.indexOf(min);i<lst.length;i++){\n            if(lst[i]<min_2){\n\
    \                min_2=lst[i];\n                min_index_2=i;\n            }\n\
    \        }\n        if(min_index_2==lst.indexOf(min)){\n            return null;\n\
    \        }\n        return min_2;\n    }\n}", "    if(lst.length<2){\n       \
    \ return null;\n    }\n    if(lst.length==2){\n        if(lst[0]==lst[1]){\n \
    \           return null;\n        }\n    }\n    let min=Math.min(...lst);\n  \
    \  let min_index=lst.indexOf(min);\n    if(min_index==0){\n        return lst[1];\n\
    \    }\n    if(min_index==lst.length-1){\n        return lst[lst.length-2];\n\
    \    }\n    return Math.min(lst[min_index-1],lst[min_index+1]);\n}", "  if (lst.length\
    \ <= 2) return null;\n  var min = lst[0];\n  var min_idx = 0;\n  for (var i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \    min_idx = i;\n    }\n  }\n  var second_min = lst[0];\n  for (var i = 1; i\
    \ < lst.length; i++) {\n    if (i != min_idx && lst[i] < second_min) {\n     \
    \ second_min = lst[i];\n    }\n  }\n  return second_min;\n}\n", "    if(lst.length\
    \ === 0){\n        return null;\n    }\n    else if(lst.length === 1){\n     \
    \   return null;\n    }\n    else if(lst.length === 2){\n        if(lst[0] ===\
    \ lst[1]){\n            return null;\n        }\n        else{\n            if(lst[0]\
    \ < lst[1]){\n                return lst[0];\n            }\n            else{\n\
    \                return lst[1];\n            }\n        }\n    }\n    else{\n\
    \        lst.sort(function(a, b){return a-b});\n        for(var i = 0; i < lst.length;\
    \ i++){\n            if(lst[i] === lst[i+1]){\n                continue;\n   \
    \         }\n            else{\n                return lst[i+1];\n           \
    \ }\n        }\n    }\n}\n", "    return lst.sort(function(a,b){\n        return\
    \ a - b;\n    })[1] ? lst.sort(function(a,b){\n        return a - b;\n    })[1]\
    \ : null;\n}\n", "  var arr = []\n  if(lst.length > 1){\n    arr = lst.sort(function(a,\
    \ b){return a-b});\n    for(var i = 0; i < arr.length; i++){\n      if(arr[i]\
    \ !== arr[i+1]){\n        return arr[i+1];\n      }\n    }\n  }\n  return null;\n\
    }\n", "    if(lst.length < 2) return null;\n    let set = new Set();\n    let\
    \ min = Math.min(...lst);\n    set.add(min);\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] != min){\n            set.add(lst[i]);\n        }\n\
    \    }\n    return Math.min(...set);\n}", "    if(lst.length < 2){\n        return\
    \ null;\n    }\n    let smallest = lst[0];\n    let secondSmallest = null;\n \
    \   for(let i = 1; i < lst.length; i++){\n        if(lst[i] < smallest){\n   \
    \         secondSmallest = smallest;\n            smallest = lst[i];\n       \
    \ }\n        else if(lst[i] < secondSmallest){\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n\nmodule.exports = {\n    next_smallest\n\
    }", "    if(lst.length < 2){\n        return null;\n    }\n    let sorted = lst.sort((a,b)\
    \ => a-b);\n    return sorted[1];\n}", "    let smallest = lst[0];\n    let secondSmallest\
    \ = null;\n    let i = 0;\n    while(i < lst.length){\n        if(lst[i] < smallest){\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    }\n        else if(lst[i] < secondSmallest){\n            secondSmallest\
    \ = lst[i];\n        }\n        i++\n    }\n    return secondSmallest;\n}", " \
    \   if (lst.length === 0) {\n        return null;\n    } else if (lst.length ===\
    \ 1) {\n        return null;\n    } else {\n        var min = Math.min(...lst);\n\
    \        var index = lst.indexOf(min);\n        lst.splice(index, 1);\n      \
    \  return Math.min(...lst);\n    }\n}", "    var l = [];\n    var c = [];\n  \
    \  var a = 0;\n    var b = 0;\n    if(lst.length == 0){\n        return null;\n\
    \    }\n    else{\n        if(lst.length > 2){\n            for(var i = 0; i <\
    \ lst.length; i++){\n                for(var j = i+1; j < lst.length; j++){\n\
    \                    if(lst[i] == lst[j]){\n                        a = a + 1;\n\
    \                    }\n                }\n            }\n            if(a ==\
    \ 0){\n                for(var i = 0; i < lst.length; i++){\n                \
    \    for(var j = i+1; j < lst.length; j++){\n                        if(lst[i]\
    \ > lst[j]){\n                            c = lst[i];\n                      \
    \      lst[i] = lst[j];\n                            lst[j] = c;\n           \
    \             }\n                    }\n                }\n                return\
    \ lst[1];\n            }\n            else{\n                return null;\n  \
    \          }\n        }\n        else{\n            if(lst[0] == lst[1]){\n  \
    \              return null;\n            }\n            else{\n              \
    \  return lst[1];\n            }\n        }\n    }\n}", "  if(lst.length < 2){\n\
    \    return null;\n  }\n  lst.sort(function(a, b){return a-b});\n  let result\
    \ = [];\n  result.push(lst[0]);\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i]\
    \ != lst[i-1]){\n      result.push(lst[i]);\n    }\n  }\n  if(result.length >=\
    \ 2){\n    return result[1];\n  }else{\n    return null;\n  }\n}", "    let min\
    \ = Math.min(...lst);\n    if(lst.length == 0){\n        return null;\n    }\n\
    \    if(lst.indexOf(min) == lst.lastIndexOf(min)){\n        return null;\n   \
    \ }\n    let lst2 = lst.filter(x => x != min);\n    return Math.min(...lst2);\n\
    }", "    if(lst.length == 0){\n        return null;\n    }\n    if(lst.length\
    \ == 1){\n        return null;\n    }\n    let temp = lst[0];\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] < temp){\n            temp = lst[i];\n\
    \        }\n    }\n    let temp2 = lst[0];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > temp && lst[i] < temp2){\n            temp2 = lst[i];\n\
    \        }\n    }\n    return temp2;\n}\nlet list = [5, 1, 4, 3, 2];", "    var\
    \ smallest = Number.MAX_VALUE;\n    var secondSmallest = Number.MAX_VALUE;\n \
    \   if(lst.length==0) return \"None\";\n    for(var i=0;i<lst.length;i++){\n \
    \       if(lst[i]<smallest){\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        }else if(lst[i]<secondSmallest && lst[i]!=smallest){\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    if(secondSmallest\
    \ == Number.MAX_VALUE){\n        return \"None\";\n    }\n    return secondSmallest;\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
