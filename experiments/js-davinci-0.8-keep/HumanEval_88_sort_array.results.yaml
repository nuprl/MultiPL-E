name: HumanEval_88_sort_array
language: js
results:
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    if (array.length == 0) {\n        return array;\n\
    \    }\n    if (array.length == 1) {\n        return array;\n    }\n    if (array.length\
    \ % 2 == 0) {\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmppbm68w1n.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppbm68w1n.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = array[0] + array[array.length - 1];\n\
    \  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return\
    \ b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n\
    \    let sorted;\n    if (sum % 2 === 0) {\n        sorted = array.sort(function(a,\
    \ b){return b - a});\n    } else {\n        sorted = array.sort(function(a, b){return\
    \ a - b});\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  if (array.length == 0) {return array}\n  else if\
    \ (array.length == 1) {return array}\n  else if (array.length % 2 == 0) {\n  \
    \  var first = array[0];\n    var last = array[array.length - 1];\n    var array_odd\
    \ = [];\n    var array_even = [];\n    for (var i = 0; i < array.length; i++)\
    \ {\n      if (array[i] % 2 == 0) {\n        array_even.push(array[i]);\n    \
    \  }\n      else {\n        array_odd.push(array[i]);\n      }\n    }\n    array_even.sort(function(a,\
    \ b){return a-b});\n    array_odd.sort(function(a, b){return b-a});\n    var array_sorted\
    \ = [];\n    var count = 0;\n    for (var i = 0; i < array.length; i++) {\n  \
    \    if (array[i] % 2 == 0) {\n        array_sorted.push(array_even[count]);\n\
    \        count += 1;\n      }\n      else {\n        array_sorted.push(array_odd[count]);\n\
    \        count += 1;\n      }\n    }\n    array_sorted.splice(0, 1, first);\n\
    \    array_sorted.splice(array_sorted.length - 1, 1, last);\n    return array_sorted;\n\
    \  }\n  else {\n    var first = array[0];\n    var last = array[array.length -\
    \ 1];\n    var array_odd = [];\n    var array_even = [];\n    for (var i = 0;\
    \ i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_even.push(array[i]);\n\
    \      }\n      else {\n        array_odd.push(array[i]);\n      }\n    }\n  \
    \  array_even.sort(function(a, b){return b-a});\n    array_odd.sort(function(a,\
    \ b){return a-b});\n    var array_sorted = [];\n    var count = 0;\n    for (var\
    \ i\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplzx0oedi.js:63\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  if(array.length<=1) return array;\n  const sum\
    \ = array[0] + array[array.length-1];\n  if(sum%2===0){\n    return array.sort((a,b)=>b-a);\n\
    \  }\n  return array.sort((a,b)=>a-b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    if(array.length == 0 || array.length == 1) return\
    \ array;\n    let first = array[0];\n    let last = array[array.length - 1];\n\
    \    if(sum(first, last) % 2 == 0) {\n        return array.sort((a, b) => b -\
    \ a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpeq0ek8wu.js:15\n    if(sum(first, last) % 2 == 0) {\n    ^\n\n\
    ReferenceError: sum is not defined\n    at sort_array (/tmp/tmpeq0ek8wu.js:15:5)\n\
    \    at test (/tmp/tmpeq0ek8wu.js:29:20)\n    at Object.<anonymous> (/tmp/tmpeq0ek8wu.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    if(array.length == 0 || array.length == 1) return\
    \ array;\n    return (array[0] + array[array.length - 1]) % 2 != 0 ? array.sort((a,\
    \ b) => a - b) : array.sort((a, b) => b - a);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  if(array.length <= 1) return array;\n  return array.slice(0,1).concat(array.slice(array.length-1,array.length),array.slice(1,array.length-1)).sort((a,b)=>(a+b)%2?1:-1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 5, 4, 3, 0, 1 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmplbouda1g.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplbouda1g.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 5, 4,\
    \ 3, 0, 1 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let first = array[0];\n    let last = array[array.length\
    \ - 1];\n    let newArray = [];\n    if ((first + last) % 2 !== 0) {\n       \
    \ newArray = array.sort(function(a, b){return a - b});\n    } else {\n       \
    \ newArray = array.sort(function(a, b){return b - a});\n    }\n    return newArray;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    var array_length = array.length;\n\
    \    var i = 0;\n    while(i<array_length){\n        sum += array[i];\n      \
    \  i++;\n    }\n    if(sum%2===0){\n        array.sort(function(a,b){\n      \
    \      return b-a;\n        });\n    }else{\n        array.sort(function(a,b){\n\
    \            return a-b;\n        });\n    }\n    return array;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpf4ymjx8s.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf4ymjx8s.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let firstIndex = array[0];\n    let lastIndex\
    \ = array[array.length - 1];\n    let sumOfFirstAndLastIndex = firstIndex + lastIndex;\n\
    \    let sortedArray = [];\n    if (sumOfFirstAndLastIndex % 2 === 0) {\n    \
    \    sortedArray = array.sort((a, b) => {\n            return b - a;\n       \
    \ });\n    } else {\n        sortedArray = array.sort((a, b) => {\n          \
    \  return a - b;\n        });\n    }\n    return sortedArray;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  return array.map((x, i) => (i+1) % 2 === (array[0]\
    \ + array[array.length-1]) % 2 ? x : x * -1).sort((a, b) => a - b).map((x, i)\
    \ => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -5, 4, 0, -1, 2, -3 ]\n\nshould equal\n\
    \n[ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpu2ra5ste.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2ra5ste.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -5, 4, -0,\
    \ -1, 2, -3 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n\
    \    let arr = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n        \
    \    return b - a;\n        } else {\n            return a - b;\n        }\n \
    \   });\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = array[0] + array[array.length - 1];\n\
    \  if (sum % 2 === 0) {\n    return array.sort(function(a, b) {\n      return\
    \ b - a;\n    });\n  } else {\n    return array.sort(function(a, b) {\n      return\
    \ a - b;\n    });\n  }\n}\nsort_array([2, 4, 3, 0, 1, 5, 6]);\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let result = [];\n    if(!array.length){\n  \
    \      return array;\n    }\n    if(array.length == 1){\n        return array;\n\
    \    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0){\n\
    \        result = array.sort(function(a, b){\n            return b - a;\n    \
    \    });\n    }\n    else{\n        result = array.sort(function(a, b){\n    \
    \        return a - b;\n        });\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = array[0] + array[array.length - 1];\n\
    \  if (sum % 2 == 0) {\n    return array.sort(function(a, b){return b - a});\n\
    \  } else {\n    return array.sort(function(a, b){return a - b});\n  }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[]\n    at\
    \ test (/tmp/tmplgvwun4t.js:19:10)\n    at Object.<anonymous> (/tmp/tmplgvwun4t.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var i = 0;\n    var j = array.length-1;\n   \
    \ var temp;\n    if(array.length==0){\n        return array;\n    }else if(array.length==1){\n\
    \        return array;\n    }else if((array[i]+array[j])%2!=0){\n        //ascending\n\
    \        for(var m=0;m<array.length;m++){\n            for(var n=m+1;n<array.length;n++){\n\
    \                if(array[m]>array[n]){\n                    temp = array[m];\n\
    \                    array[m] = array[n];\n                    array[n] = temp;\n\
    \                }\n            }\n        }\n        return array;\n    }else{\n\
    \        //descending\n        for(var m=0;m<array.length;m++){\n            for(var\
    \ n=m+1;n<array.length;n++){\n                if(array[m]<array[n]){\n       \
    \             temp = array[m];\n                    array[m] = array[n];\n   \
    \                 array[n] = temp;\n                }\n            }\n       \
    \ }\n        return array;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    if (array.length === 0 || array.length === 1)\
    \ {\n        return array;\n    } else {\n        let arr = [];\n        let even\
    \ = [];\n        let odd = [];\n        for (let i = 0; i < array.length; i++)\
    \ {\n            if (array[i] % 2 !== 0) {\n                odd.push(array[i]);\n\
    \            } else {\n                even.push(array[i]);\n            }\n \
    \       }\n        odd.sort((a, b) => a - b);\n        even.sort((a, b) => b -\
    \ a);\n        if (array[0] % 2 !== 0) {\n            arr = odd.concat(even);\n\
    \        } else {\n            arr = even.concat(odd);\n        }\n        return\
    \ arr;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 2, 0, 1, 3, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp5hkobyq5.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5hkobyq5.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 0,\
    \ 1, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let oddEven = array.length > 0 ? array[0] + array[array.length\
    \ - 1] : 0;\n    if (oddEven % 2 == 0) {\n        return array.sort((a, b) =>\
    \ a < b ? 1 : -1);\n    } else {\n        return array.sort((a, b) => a > b ?\
    \ 1 : -1);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
