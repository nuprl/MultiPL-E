name: HumanEval_65_circular_shift
language: js
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x, shift){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12,\
  \ 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12,\
  \ 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"
completions: ["  let str = x.toString();\n  let result = '';\n  if(shift > str.length){\n\
    \    for(let i = str.length - 1; i >= 0; i--){\n      result += str[i];\n    }\n\
    \  }\n  else{\n    for(let i = str.length - shift; i < str.length; i++){\n   \
    \   result += str[i];\n    }\n    for(let i = 0; i < str.length - shift; i++){\n\
    \      result += str[i];\n    }\n  }\n  return result;\n}\n", "\t\n}\n\n", " \
    \ var sign = '';\n  if (x < 0){\n    sign = '-';\n    x = -x;\n  }\n  var xString\
    \ = x.toString();\n  if (shift > xString.length){\n    return xString.split('').reverse().join('');\n\
    \  }\n  else {\n    return sign + xString.slice(xString.length - shift) + xString.slice(0,\
    \ xString.length - shift);\n  }\n}\n", "    var _x = x.toString();\n    if (shift\
    \ > _x.length) {\n        return _x.split(\"\").reverse().join(\"\");\n    }\n\
    \    _x = _x.split(\"\");\n    for (var i = 0; i < shift; i++) {\n        _x.push(_x.shift());\n\
    \    }\n    return _x.join(\"\");\n}\n", "\tvar z = x.toString().split(\"\");\n\
    \tvar temp = \"\";\n\tfor(var i = 0; i < shift; i++){\n\t\ttemp = z.pop();\n\t\
    \tz.unshift(temp);\n\t}\n\tz = z.join(\"\");\n\treturn z;\n}\n", "\tvar str_x\
    \ = String(x);\n\tvar str_x_len = str_x.length;\n\tif(shift >= str_x_len){\n\t\
    \treturn str_x.split(\"\").reverse().join(\"\");\n\t}\n\tvar right_part = str_x.substring(str_x_len\
    \ - shift, str_x_len);\n\tvar left_part = str_x.substring(0, str_x_len - shift);\n\
    \treturn right_part + left_part;\n}\n", "\tvar digits = [];\n\t\n\t//Push each\
    \ digit in number to an array\n\twhile(x > 0){\n\t\tdigits.push(x % 10);\n\t\t\
    x = Math.floor(x / 10);\n\t}\n\t\n\tvar number_of_digits = digits.length;\n\t\n\
    \t//If shift > number of digits, reverse the array and return it as a string\n\
    \tif(shift > number_of_digits){\n\t\tdigits.reverse();\n\t\treturn digits.join(\"\
    \");\n\t}\n\t\n\t//Else, shift the digits in the array\n\tfor(var i = 0; i < shift;\
    \ i++){\n\t\tvar digit = digits.pop();\n\t\tdigits.unshift(digit);\n\t}\n\t\n\t\
    return digits.join(\"\");\n}\n", "  var x_string = x.toString();\n  var x_length\
    \ = x_string.length;\n  var reversed_string = reverse_string(x_string);\n  var\
    \ reversed_list = string_to_list(reversed_string);\n  var initial_shift = x_length\
    \ - shift;\n  var circular_shifted_list = reversed_list.slice(initial_shift).concat(reversed_list.slice(0,\
    \ initial_shift));\n  var circular_shifted_string = list_to_string(circular_shifted_list);\n\
    \  var result = reverse_string(circular_shifted_string);\n  return result;\n}",
  "    var str = x.toString();\n    var new_str = \"\";\n    var num_digits = str.length;\n\
    \    if (shift > num_digits){\n        for (var i = str.length-1; i >= 0; i--){\n\
    \            new_str += str[i];\n        }\n    }\n    else{\n        new_str\
    \ = str.slice(shift, str.length) + str.slice(0, shift);\n    }\n    return new_str;\n\
    }", "    let x_str = x.toString();\n    let shift_num = shift.toString();\n  \
    \  if (shift_num > x_str.length){\n        return x_str.split(\"\").reverse().join(\"\
    \");\n    }\n    let post_rotation = x_str.substring(0, x_str.length - shift_num);\n\
    \    let pre_rotation = x_str.substring(x_str.length - shift_num, x_str.length);\n\
    \    return pre_rotation + post_rotation;\n}\n", "    var str = x.toString();\n\
    \    while(shift > str.length){\n        shift -= str.length;\n    }\n    return\
    \ str.slice(str.length - shift) + str.slice(0, str.length - shift);\n}\n", " \
    \ x = x.toString();\n  let new_x = \"\";\n  for(let i = 0; i < shift; i++){\n\
    \    let next_digit = x.substring(x.length - 1, x.length);\n    new_x = next_digit\
    \ + new_x;\n    x = x.substring(0, x.length - 1);\n  }\n  return new_x + x;\n\
    }\n", "  var x_array = reverse(string_to_array(x));\n  var shift_array = x_array.slice(0,\
    \ shift);\n  var first_array = x_array.slice(shift);\n  var sum_array = first_array.concat(shift_array);\n\
    \  return array_to_string(reverse(sum_array));\n}\n", "\t// convert integer to\
    \ string and split it into an array of chars\n\tvar str = '' + x;\n\tvar a = str.split('');\n\
    \t// create new array for our result\n\tvar b = [];\n\t// iterate over the chars\
    \ from original array and push them to new array\n\tfor (var i = 0; i < a.length;\
    \ i++) {\n\t\t// if our counter reaches the end of array, wrap around\n\t\tif(i\
    \ + shift >= a.length){\n\t\t\tb.push(a[i + shift - a.length]);\n\t\t}\n\t\t//\
    \ otherwise just push character from current position\n\t\telse{\n\t\t\tb.push(a[i\
    \ + shift]);\n\t\t}\n\t}\n\t// join array into a string, return it\n\treturn b.join('');\n\
    }\n\n", "    x = \"\" + x; // Convert x to a string\n    var result = \"\";\n\
    \    var digits = \"\";\n    if (shift > x.length){\n        //We need to reverse\
    \ the digits\n        for (var i = x.length - 1; i >= 0; i--){\n            digits\
    \ += x[i];\n        }\n        return digits;\n    }\n    else{\n        //Shift\
    \ the digits to the right.\n        for (var i = x.length - 1; i >= 0; i--){\n\
    \            var index = i - shift;\n            if (index < 0){\n           \
    \     index = x.length + index;\n            }\n            result += x[index];\n\
    \        }\n        return result;\n    }\n}\n", "  x = String(x)\n  var len =\
    \ x.length\n  var len = (x.length - shift) % len\n  return x.slice(len) + x.slice(0,\
    \ len)\n}\n", "    if (shift <= 0){\n        return to_str(x);\n    } else {\n\
    \        var last_digit = modulo(x, 10);\n        var remainder = floor(x / 10);\n\
    \        return circular_shift(10 * last_digit + remainder, shift - 1);\n    }\n\
    }\n", "  var str = x.toString();\n  var len = str.length;\n  // Shift can be more\
    \ than number of digits\n  if(len < shift){\n    str = reverse(str);\n  }\n  else{\n\
    \    str = str.substring(len - shift, len) + str.substring(0, len - shift);\n\
    \  }\n  return str;\n}\n", "    return (x.toString().length < shift) ? reverse(x.toString())\
    \ : x.toString().slice(shift) + x.toString().slice(0, shift);\n}\n", "    let\
    \ res = x.toString();\n    let len = res.length;\n    shift = shift % len;\n \
    \   let right = res.slice(len - shift);\n    let left = res.slice(0, len - shift);\n\
    \    return right + left;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
