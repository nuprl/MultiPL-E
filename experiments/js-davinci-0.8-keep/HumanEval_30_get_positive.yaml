name: HumanEval_30_get_positive
language: js
prompt: "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
  \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
  \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
  }\n\ntest();"
completions: ["    //Your code here\n    var ans = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            ans.push(l[i]);\n        }\n    }\n\
    \    return ans;\n}\n", "    return l.filter(function(v){return v > 0;});\n}\n",
  "    return l.filter(function(val){\n        return val >= 0;\n    });\n}\n", " \
    \   let new_l = [];\n    for (i=0; i<l.length; i++){\n        if (l[i] > 0){\n\
    \            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", " \
    \   return l.filter(x => x > 0);\n}\n", "    return l.filter(function(number){\n\
    \        return number > 0;\n    });\n}\n", "    return l.filter(x => x > 0);\n\
    }\n", "  return l.filter(function(num){\n    return num > 0;\n  });\n}\n", " \
    \ return l.filter(function(n){\n    return n > 0;\n  });\n}", "    return l.filter(function(value){\n\
    \        return value >= 0;\n    });\n}\n", "  // Your code here\n  return l.filter(num\
    \ => num > 0);\n}\n", "    var positives = [];\n    for (var i=0; i<l.length;\
    \ i++){\n        if (l[i] > 0){\n            positives.push(l[i]);\n        }\n\
    \    }\n    return positives;\n}\n", "    return l.filter(function(val){\n   \
    \     return val > 0;\n    });\n}", "    var p=[];\n    for(i=0;i<l.length;i++){\n\
    \        if(l[i]>0){\n            p.push(l[i]);\n        }\n    }\n    return\
    \ p;\n}", "  let positive = []\n  for (let i = 0; i < l.length; i++){\n    if\
    \ (l[i] >= 0){\n      positive.push(l[i])\n    }\n  }\n  return positive\n}",
  "  return l.filter(v => v > 0);\n}\n", "    return l.filter(i => i > 0);\n}\n",
  "  //===YOUR CODE HERE===\n  var result = [];\n  for (var i = 0; i < l.length; i++)\
    \ {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n\
    }\n", "    return l.filter(function(number){\n        return number > 0;\n   \
    \ });\n}\n", "    return l.filter(num => num > 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
