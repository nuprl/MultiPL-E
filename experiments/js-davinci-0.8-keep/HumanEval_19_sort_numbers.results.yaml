name: HumanEval_19_sort_numbers
language: js
results:
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n  var numDict = {\n    'zero': 0,\n    'one': 1,\n \
    \   'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n\
    \    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  var numArr = numbers.split('\
    \ ');\n  var sortedArr = [];\n  var sortedStr = '';\n  for (i = 0; i < numArr.length;\
    \ i++){\n    sortedArr.push(numDict[numArr[i]]);\n  }\n  sortedArr.sort(function(a,\
    \ b){return a-b});\n  for (i = 0; i < sortedArr.length; i++){\n    for (var key\
    \ in numDict){\n      if (numDict[key] === sortedArr[i]){\n        sortedStr +=\
    \ key + ' ';\n      }\n    }\n  }\n  return sortedStr.slice(0, -1);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n\tnumbers = numbers.split(' ')\n\tvar numbers_in_order\
    \ = []\n\tvar number_conversions = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4,\
    \ 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\tnumbers_in_order.push(number_conversions[numbers[i]])\n\t}\n\tnumbers_in_order.sort(function(a,b){return\
    \ a-b})\n\tvar sorted_numbers = []\n\tfor (var j = 0; j < numbers_in_order.length;\
    \ j++){\n\t\tfor (var key in number_conversions){\n\t\t\tif (numbers_in_order[j]\
    \ == number_conversions[key]){\n\t\t\t\tsorted_numbers.push(key)\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn sorted_numbers.join(' ')\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    // PUT YOUR CODE HERE\n    let numberals = numbers.split('\
    \ ');\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i]\
    \ = numberals[i].replace('zero', '0');\n        numberals[i] = numberals[i].replace('one',\
    \ '1');\n        numberals[i] = numberals[i].replace('two', '2');\n        numberals[i]\
    \ = numberals[i].replace('three', '3');\n        numberals[i] = numberals[i].replace('four',\
    \ '4');\n        numberals[i] = numberals[i].replace('five', '5');\n        numberals[i]\
    \ = numberals[i].replace('six', '6');\n        numberals[i] = numberals[i].replace('seven',\
    \ '7');\n        numberals[i] = numberals[i].replace('eight', '8');\n        numberals[i]\
    \ = numberals[i].replace('nine', '9');\n    }\n    numberals.sort(function(a,\
    \ b){return a-b});\n    for (let i = 0; i < numberals.length; i++) {\n       \
    \ numberals[i] = numberals[i].replace('0', 'zero');\n        numberals[i] = numberals[i].replace('1',\
    \ 'one');\n        numberals[i] = numberals[i].replace('2', 'two');\n        numberals[i]\
    \ = numberals[i].replace('3', 'three');\n        numberals[i] = numberals[i].replace('4',\
    \ 'four');\n        numberals[i] = numberals[i].replace('5', 'five');\n      \
    \  numberals[i] = numberals[i].replace('6', 'six');\n        numberals[i] = numberals[i].replace('7',\
    \ 'seven');\n        numberals[i] = numberals[i].replace('8', 'eight');\n    \
    \    numberals[i] = numberals[i].replace('9', 'nine');\n    }\n    return numberals.join('\
    \ ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    numbers = numbers.split(' ');\n    var nums = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    numbers.sort(function(a, b){\n        return\
    \ nums[a] - nums[b];\n    });\n    return numbers.join(' ');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    let num_map = {'zero':0, 'one':1, 'two':2, 'three':3,\
    \ 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9};\n    let num_arr\
    \ = numbers.split(' ');\n    num_arr.sort((a,b) => {\n        return num_map[a]\
    \ - num_map[b];\n    });\n    return num_arr.join(' ');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n  // assume all numbers are valid integers, single space,\
    \ no period\n  var numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three':\
    \ 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};\n  var\
    \ numbers_array = numbers.split(' ');\n  var numbers_array_converted = [];\n \
    \ for (var i = 0; i < numbers_array.length; i++) {\n    numbers_array_converted.push(numeral_to_number[numbers_array[i]]);\n\
    \  }\n  numbers_array_converted.sort(function(a, b){return a-b});\n  var sorted_numbers\
    \ = '';\n  for (var i = 0; i < numbers_array_converted.length; i++) {\n    sorted_numbers\
    \ += Object.keys(numeral_to_number)[numbers_array_converted[i]] + ' ';\n  }\n\
    \  return sorted_numbers.trim();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'undefined'\n\nshould equal\n\n''\n    at\
    \ test (/tmp/tmpg2erwyrj.js:27:10)\n    at Object.<anonymous> (/tmp/tmpg2erwyrj.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n  expected: '',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n  var numbers_list = numbers.split(' ');\n  numbers_list.sort(function(a,\
    \ b){\n    return numeral_dict[a] - numeral_dict[b];\n  });\n  return numbers_list.join('\
    \ ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4lhnet8v.js:9\n    return numeral_dict[a] - numeral_dict[b];\n\
    \    ^\n\nReferenceError: numeral_dict is not defined\n    at /tmp/tmp4lhnet8v.js:9:5\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmp4lhnet8v.js:8:16)\n\
    \    at test (/tmp/tmp4lhnet8v.js:21:20)\n    at Object.<anonymous> (/tmp/tmp4lhnet8v.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n\tvar nums = numbers.split(' ');\n\tvar sort_nums =\
    \ [];\n\tvar num_dict = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t\
    'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\
    \t'eight': 8,\n\t\t'nine': 9\n\t};\n\tfor (var i = 0; i < nums.length; i++){\n\
    \t\tvar num = num_dict[nums[i]];\n\t\tif (num){\n\t\t\tsort_nums.push(num);\n\t\
    \t}\n\t}\n\tsort_nums.sort(function(a, b){return a - b});\n\tfor (var i = 0; i\
    \ < sort_nums.length; i++){\n\t\tfor (var key in num_dict){\n\t\t\tif (num_dict[key]\
    \ === sort_nums[i]){\n\t\t\t\tsort_nums[i] = key;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ sort_nums.join(' ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'four five seven eight nine'\n\nshould equal\n\
    \n'zero four five seven eight nine'\n    at test (/tmp/tmpibbee_pf.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpibbee_pf.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'four five seven eight nine',\n  expected:\
    \ 'zero four five seven eight nine',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    let s = '';\n    let nums = numbers.split(' ');\n\
    \    nums.sort((a, b) => lookup_number(a) - lookup_number(b));\n    for (let n\
    \ of nums)\n        s += n + ' ';\n    return s.trimRight();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_vim0ofl.js:9\n    nums.sort((a, b) => lookup_number(a) - lookup_number(b));\n\
    \                                         ^\n\nReferenceError: lookup_number is\
    \ not defined\n    at /tmp/tmp_vim0ofl.js:9:42\n    at Array.sort (<anonymous>)\n\
    \    at sort_numbers (/tmp/tmp_vim0ofl.js:9:10)\n    at test (/tmp/tmp_vim0ofl.js:22:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_vim0ofl.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n  var num = numbers.split(' ');\n  var sorted = ['zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n \
    \ var nums = [];\n  for (var i = 0; i < num.length; i++) {\n    for (var j = 0;\
    \ j < sorted.length; j++) {\n      if (num[i] === sorted[j]) {\n        nums.push(sorted[j]);\n\
    \      }\n    }\n  }\n  return nums.join(' ');\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'five zero four seven nine eight'\n\nshould\
    \ equal\n\n'zero four five seven eight nine'\n    at test (/tmp/tmpy9s1a5nc.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy9s1a5nc.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'five zero four seven nine eight',\n  expected:\
    \ 'zero four five seven eight nine',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n''\n    at\
    \ test (/tmp/tmpu7lwt0ww.js:15:10)\n    at Object.<anonymous> (/tmp/tmpu7lwt0ww.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: '',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n  var num_obj = {\n    zero: 0,\n    one: 1,\n    two:\
    \ 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n\
    \    eight: 8,\n    nine: 9\n  };\n  var stringArr = numbers.split(' ');\n  for\
    \ (var i = 0; i < stringArr.length; i++) {\n    stringArr[i] = num_obj[stringArr[i]];\n\
    \  }\n  stringArr.sort(function(a, b){return a-b});\n  for (var j = 0; j < stringArr.length;\
    \ j++) {\n    for (var key in num_obj) {\n      if (num_obj[key] === stringArr[j])\
    \ {\n        stringArr[j] = key;\n      }\n    }\n  }\n  var string = stringArr.join('\
    \ ');\n  return string;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n  var nums = numbers.split(' ');\n  return nums.sort(function(a,b){\n\
    \    return (translate(a) > translate(b));\n  }).join(' ');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcenxsssf.js:9\n    return (translate(a) > translate(b));\n    ^\n\
    \nReferenceError: translate is not defined\n    at /tmp/tmpcenxsssf.js:9:5\n \
    \   at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpcenxsssf.js:8:15)\n\
    \    at test (/tmp/tmpcenxsssf.js:20:20)\n    at Object.<anonymous> (/tmp/tmpcenxsssf.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    let numberMap = {'zero':0, 'one':1, 'two':2, 'three':3,\
    \ 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    return numbers.split('\
    \ ').sort((a,b) => numberMap[a] - numberMap[b]).join(' ')\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    var list = numbers.split(' ');\n    var num = [];\n\
    \    var dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five':\
    \ 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};\n    for (var i=0; i<list.length;\
    \ i++){\n        num.push(dict[list[i]]);\n    }\n    num.sort(function(a, b){return\
    \ a-b});\n    for (var i=0; i<num.length; i++){\n        for (var key in dict){\n\
    \            if (dict[key] === num[i]){\n                num[i] = key;\n     \
    \       }\n        }\n    }\n    return num.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n\tvar new_number_array = [];\n\tvar array_of_numbers\
    \ = numbers.split(\" \");\n\tfor (var i = 0; i < array_of_numbers.length; i++)\
    \ {\n\t\tswitch(array_of_numbers[i]){\n\t\t\tcase 'zero':\n\t\t\t\tnew_number_array.push(0);\n\
    \t\t\t\tbreak;\n\t\t\tcase 'one':\n\t\t\t\tnew_number_array.push(1);\n\t\t\t\t\
    break;\n\t\t\tcase 'two':\n\t\t\t\tnew_number_array.push(2);\n\t\t\t\tbreak;\n\
    \t\t\tcase 'three':\n\t\t\t\tnew_number_array.push(3);\n\t\t\t\tbreak;\n\t\t\t\
    case 'four':\n\t\t\t\tnew_number_array.push(4);\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\
    \t\t\t\tnew_number_array.push(5);\n\t\t\t\tbreak;\n\t\t\tcase 'six':\n\t\t\t\t\
    new_number_array.push(6);\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\t\t\t\tnew_number_array.push(7);\n\
    \t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\tnew_number_array.push(8);\n\t\t\t\
    \tbreak;\n\t\t\tcase 'nine':\n\t\t\t\tnew_number_array.push(9);\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor (var i = 0; i < new_number_array.length; i++) {\n\t\tfor (var\
    \ j = i; j < new_number_array.length; j++) {\n\t\t\tif (new_number_array[i] >\
    \ new_number_array[j]) {\n\t\t\t\ttemp = new_number_array[i];\n\t\t\t\tnew_number_array[i]\
    \ = new_number_array[j];\n\t\t\t\tnew_number_array[j] = temp;\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (var i =\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/tmp/tmp9eh5fuxw.js:53\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    var arr = numbers.split(' ');\n    arr.sort();\n\
    \    var output = arr.join(' ');\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'five nine three'\n\nshould equal\n\n'three\
    \ five nine'\n    at test (/tmp/tmph6ui_7sf.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph6ui_7sf.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n\t\n\tvar numbers_array = numbers.split(\" \");\n\t\
    var real_numbers = [];\n\t//Converting words to numbers\n\tfor(var i = 0; i <\
    \ numbers_array.length; i++){\n\t\tif(numbers_array[i] == \"zero\"){\n\t\t\treal_numbers.push(0);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"one\"){\n\t\t\treal_numbers.push(1);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"two\"){\n\t\t\treal_numbers.push(2);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"three\"){\n\t\t\treal_numbers.push(3);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"four\"){\n\t\t\treal_numbers.push(4);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"five\"){\n\t\t\treal_numbers.push(5);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"six\"){\n\t\t\treal_numbers.push(6);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"seven\"){\n\t\t\treal_numbers.push(7);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"eight\"){\n\t\t\treal_numbers.push(8);\n\
    \t\t}\n\t\telse if(numbers_array[i] == \"nine\"){\n\t\t\treal_numbers.push(9);\n\
    \t\t}\n\t}\n\t\n\t//Sorting\n\tvar temp;\n\tfor(var i = 0; i < real_numbers.length\
    \ - 1; i++){\n\t\tfor(var j = i + 1; j < real_numbers.length; j++){\n\t\t\tif(real_numbers[i]\
    \ > real_numbers[j]){\n\t\t\t\ttemp = real_numbers[i];\n\t\t\t\treal_numbers[i]\
    \ =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf8dhs8qk.js:51\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    const numeral_map = new Map([['zero', 0], ['one',\
    \ 1], ['two', 2], ['three', 3], ['four', 4], ['five', 5], ['six', 6], ['seven',\
    \ 7], ['eight', 8], ['nine', 9]]);\n    const num_array = numbers.split(' ');\n\
    \    num_array.sort((a, b) => {return numeral_map.get(a) - numeral_map.get(b)});\n\
    \    return num_array.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers){\n    let numToInt = {\n        'zero': 0,\n        'one':\
    \ 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five':\
    \ 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine':\
    \ 9\n    }\n    numbers = numbers.split(' ');\n    numbers = numbers.map(function(number){\n\
    \        return numToInt[number];\n    })\n    return numbers.sort(function(a,\
    \ b){\n        return a - b;\n    }).join(' ');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'3'\n\nshould equal\n\n'three'\n    at test\
    \ (/tmp/tmp9ywduzwi.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9ywduzwi.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected: 'three',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
