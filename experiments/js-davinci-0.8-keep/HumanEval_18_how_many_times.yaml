name: HumanEval_18_how_many_times
language: js
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
  \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
  \ substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
  xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
  \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
completions: ["  var index = 0;\n  var count = 0;\n  while (true){\n    index = string.indexOf(substring,\
    \ index);\n    if (index === -1){\n      break;\n    }\n    index++;\n    count++;\n\
    \  }\n  return count;\n}", "    let count = 0;\n    let subLength = substring.length;\n\
    \    let strLength = string.length;\n    if(subLength <= strLength){\n       \
    \ for(let i = 0; i <= strLength - subLength; i++){\n            let temp = string.substring(i,\
    \ i + subLength);\n            if(temp === substring){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\n", "    let count =\
    \ 0;\n    let end = substring.length - 1;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === substring[0]){\n            for(let j = 0; j\
    \ < substring.length; j++){\n                if(string[i + j] !== substring[j]){\n\
    \                    break;\n                }\n                if(string[i +\
    \ j] === substring[end]){\n                    count++;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\n", "  var count = 0;\n\
    \  var index = string.indexOf(substring);\n  while (index >= 0) {\n    count++;\n\
    \    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n}\n",
  "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.substring(i,\
    \ i + substring.length) === substring) {\n            count += 1;\n        }\n\
    \    }\n    return count;\n}", "  var count = 0;\n  var index = 0;\n  while (index\
    \ <= string.length - substring.length){\n    if (string.slice(index,index+substring.length)\
    \ == substring){\n      count += 1;\n      index += substring.length;\n    }\n\
    \    else{\n      index += 1;\n    }\n  }\n  return count;\n}\n", "    if (substring\
    \ === ''){\n        return 0;\n    }\n    let subLength = substring.length;\n\
    \    let result = 0;\n    for (i = 0; i < string.length; i++){\n        if (string.substring(i,\
    \ i + subLength) === substring){\n            result += 1;\n        }\n    }\n\
    \    return result;\n}\n", "    let count = 0;\n    let i = 0;\n    while (i <\
    \ string.length) {\n        if (string.slice(i, i + substring.length) === substring)\
    \ {\n            count ++;\n            i = i + substring.length;\n        } else\
    \ {\n            i ++;\n        }\n    }\n    return count;\n}", "  var count\
    \ = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substring(i,\
    \ substring.length + i) == substring) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n\n", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        for (let j = 0; j < substring.length; j++) {\n            if\
    \ (string[i + j] !== substring[j]) {\n                break;\n            }\n\
    \            if (j === substring.length - 1) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}", "  // your code here\n}\n\
    \n", "    var index = 0;\n    var count = 0;\n    var substring_length = substring.length;\n\
    \    while (index < string.length){\n        if (string.substring(index, index\
    \ + substring_length) == substring){\n            count += 1;\n            index\
    \ += substring_length;\n        } else {\n            index += 1;\n        }\n\
    \    }\n    return count;\n}\n", "    var count = 0;\n    var index = string.indexOf(substring);\n\
    \    while (index >= 0) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n", "  if (string.length < substring.length)\
    \ {\n    return 0;\n  }\n  var match = string.match(new RegExp(substring, 'g'));\n\
    \  if (match) {\n    return match.length;\n  }\n  return 0;\n}\n\n", "    var\
    \ times = 0;\n    for (var i = 0; i < string.length; i++){\n        for (var j\
    \ = 0; j < substring.length; j++){\n            if (string[i+j] != substring[j]){\n\
    \                break;\n            }\n            if (j == substring.length\
    \ - 1){\n                times++;\n            }\n        }\n    }\n    return\
    \ times;\n}\n", "    let counter = 0;\n    for (let i = 0; i < string.length;\
    \ i++){\n        if (string.substring(i,i+substring.length) === substring){\n\
    \            counter += 1;\n        }\n    }\n    return counter;\n}\n", "   \
    \ var count = 0;\n    var currentIndex = 0;\n    while(currentIndex >= 0){\n \
    \       currentIndex = string.indexOf(substring, currentIndex);\n        if(currentIndex\
    \ >= 0){\n            count += 1;\n            currentIndex += 1;\n        }\n\
    \    }\n    return count;\n}", "  var sizeString = string.length;\n  var sizeSubString\
    \ = substring.length;\n  var count = 0;\n  var index = 0;\n  while(index < sizeString){\n\
    \    if(substring === string.substring(index,index+sizeSubString)){\n      count++;\n\
    \      index += sizeSubString;\n    }else{\n      index++;\n    }\n  }\n  return\
    \ count;\n}\n", "  var times = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.slice(i, substring.length + i) === substring) {\n      times +=\
    \ 1;\n    }\n  }\n  return times;\n}\n", "    var i = 0;\n    var count = 0;\n\
    \    while (i < string.length){\n        if (string.substring(i, i + substring.length)\
    \ == substring){\n            count++;\n            i += substring.length;\n \
    \       }\n        else{\n            i++;\n        }\n    }\n    return count;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
