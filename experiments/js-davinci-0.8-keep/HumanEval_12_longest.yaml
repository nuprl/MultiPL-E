name: HumanEval_12_longest
language: js
prompt: "//Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n// strings of the same length. Return None in case the input\
  \ list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n\
  // >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest(strings){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"\
  x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\"\
  , \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"
completions: ["    //return strings.sort()[strings.length - 1];\n    let long = strings[0];\n\
    \    for(let i = 0; i < strings.length; i++){\n        if(strings[i].length >\
    \ long.length){\n            long = strings[i];\n        }\n    }\n    return\
    \ long;\n}\n", "\tif(strings.length === 0){\n\t\treturn \"None\";\n\t}else{\n\t\
    \tvar max = strings[0];\n\t\tvar maxLength = strings[0].length;\n\t\tfor(var i\
    \ = 1; i < strings.length; i++){\n\t\t\tif(strings[i].length > maxLength){\n\t\
    \t\t\tmax = strings[i];\n\t\t\t\tmaxLength = strings[i].length;\n\t\t\t}\n\t\t\
    }\n\t\treturn max;\n\t}\n}", "  var longest_string = 'None';\n  for (var i=0;\
    \ i<strings.length; i++){\n    if (strings[i].length > longest_string.length){\n\
    \      longest_string = strings[i];\n    }\n  }\n  return longest_string;\n}\n\
    \n\n", "  let longest = \"\";\n  strings.forEach(function(str){\n    if(str.length\
    \ > longest.length){\n      longest = str;\n    }\n  });\n  return longest;\n\
    }\n", "  if (strings.length == 0) {\n    return null;\n  }\n  strings.sort(function(a,\
    \ b){\n    return b.length - a.length;\n  });\n  return strings[0];\n}\n", " \
    \ if(strings.length == 0){\n    return \"None\";\n  }\n  let longestLength = 0;\n\
    \  let longestString = \"\";\n  for(let i = 0; i < strings.length; i++){\n   \
    \ if(strings[i].length > longestLength){\n      longestLength = strings[i].length;\n\
    \      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n",
  "    var longest = '';\n    strings.forEach(function(element){\n        if(element.length\
    \ > longest.length){\n            longest = element;\n        }\n    });\n   \
    \ return longest;\n}\n", "    if(strings.length==0){\n        return null;\n \
    \   }\n    var longest = strings[0];\n    for(var i=1; i<strings.length; i++){\n\
    \        if(strings[i].length>longest.length){\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n", "\tvar longest = \"\";\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].length > longest.length){\n\
    \t\t\tlongest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n}\n", "    if(strings.length\
    \ == 0){\n        return \"None\";\n    }\n    var longest = strings[0];\n   \
    \ for(var i = 0; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}",
  "  if(strings.length === 0){\n    return;\n  }\n  var result = strings[0];\n  var\
    \ longestLength = strings[0].length;\n  for(var i = 1; i < strings.length; i++){\n\
    \    if(strings[i].length > longestLength){\n      result = strings[i];\n    \
    \  longestLength = strings[i].length;\n    }\n  }\n  return result;\n}\n", "\t\
    if (strings.length==0){\n\t\treturn null;\n\t}\n\tvar longestString = strings[0];\n\
    \tfor (var i=1; i<strings.length; i++){\n\t\tif (strings[i].length > longestString.length){\n\
    \t\t\tlongestString = strings[i];\n\t\t}\n\t}\n\treturn longestString;\n}\n",
  "    if (strings.length === 0) return;\n    let long = strings[0];\n    for (let\
    \ word of strings){\n        if (word.length > long.length){\n            long\
    \ = word;\n        }\n    }\n    return long;\n}\n", "\n}\n", "    if (strings.length\
    \ == 0) return \"None\";\n    var maxLength = 0;\n    var longStr = \"\";\n  \
    \  for (var i=0; i<strings.length; i++){\n        if (strings[i].length > maxLength){\n\
    \            maxLength = strings[i].length;\n            longStr = strings[i];\n\
    \        }\n    }\n    return longStr;\n}\n", "    if (strings.length === 0) {\n\
    \        return \"None\";\n    }\n    var length = 0;\n    var longest = \"\"\
    ;\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].length\
    \ > length) {\n            length = strings[i].length;\n            longest =\
    \ strings[i];\n        }\n    }\n    return longest;\n}\n", "    let longest =\
    \ 0;\n    let longest_str = null;\n    for (let s of strings){\n        if (s.length\
    \ > longest){\n            longest = s.length;\n            longest_str = s;\n\
    \        }\n    }\n    return longest_str;\n}\n", "    let longest_string = null;\n\
    \    if (strings.length > 0){\n        longest_string = strings[0];\n        for\
    \ (let i = 1; i < strings.length; i++){\n            if (strings[i].length > longest_string.length){\n\
    \                longest_string = strings[i];\n            }\n        }\n    }\n\
    \    return longest_string;\n}\n", "    if(strings.length == 0){\n        return\
    \ undefined;\n    }\n    if(strings.length == 1){\n        return strings[0];\n\
    \    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length;\
    \ i++){\n        if(strings[i].length > longestString.length){\n            longestString\
    \ = strings[i];\n        }\n    }\n    return longestString;\n}\n", "    //empty\
    \ list\n    if(strings.length==0){\n        return null;\n    }\n    var maxLength\
    \ = strings[0].length;\n    var maxIndex = 0;\n    for(var i=1; i<strings.length;\
    \ i++){\n        if(strings[i].length>maxLength){\n            maxLength = strings[i].length;\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
