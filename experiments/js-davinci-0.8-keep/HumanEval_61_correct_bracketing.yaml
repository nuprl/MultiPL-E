name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
  (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["\tvar x = 0;\n\tvar y = 0;\n\tvar i = 0;\n\tvar z = 0;\n\tfor (i =\
    \ 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tx++;\n\t\
    \t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\ty++;\n\t\t}\n\t\tif (x < y){\n\
    \t\t\tz++;\n\t\t}\n\t}\n\tif (x == y && z == 0){\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\n", "\tvar leftCount = 0;\n\tvar rightCount = 0;\n\
    \tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\")\
    \ {\n\t\t\tleftCount++;\n\t\t} else if (brackets[i] === \")\") {\n\t\t\trightCount++;\n\
    \t\t}\n\t}\n\tif (leftCount === rightCount) {\n\t\treturn true;\n\t} else {\n\t\
    \treturn false;\n\t}\n}\n", "    const stack = [];\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === '('){\n            stack.push(brackets[i]);\n\
    \        }\n        else if (brackets[i] === ')'){\n            if (stack.length\
    \ === 0){\n                return false;\n            }\n            else{\n \
    \               stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            count++;\n        } else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    return (count == 0);\n}\n", "   \
    \ let opening = 0\n    let closing = 0\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            opening += 1\n      \
    \  } else if (brackets[i] == \")\"){\n            closing += 1\n        }\n  \
    \  }\n    if (opening == closing){\n        return true\n    } else {\n      \
    \  return false\n    }\n}", "    if (brackets.length % 2 !== 0){\n        return\
    \ false;\n    }\n    const opening_brackets = '([{';\n    const closing_brackets\
    \ = ')]}';\n    const matching_brackets = {\n        ')': '(',\n        ']': '[',\n\
    \        '}': '{'\n    };\n    const stack = [];\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (opening_brackets.includes(brackets[i])){\n            stack.push(brackets[i]);\n\
    \        }\n        else if (closing_brackets.includes(brackets[i])){\n      \
    \      if (stack.length === 0){\n                return false;\n            }\n\
    \            else if (stack[stack.length - 1] === matching_brackets[brackets[i]]){\n\
    \                stack.pop();\n            }\n            else {\n           \
    \     return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "  var opened_brackets = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == \"(\") {\n      opened_brackets++;\n    } else\
    \ if (brackets[i] == \")\") {\n      opened_brackets--;\n    }\n    if (opened_brackets\
    \ < 0) {\n      return false;\n    }\n  }\n  return opened_brackets == 0;\n}\n",
  "    //Step 1: How to do parentheses matching problem?\n    //Step 2: How to handle\
    \ errors?\n    //Step 3: How to use stack?\n    //Step 4: How to find the current\
    \ parentheses is a left parentheses or right parentheses?\n    //Step 5: How to\
    \ compare the left parentheses with right parentheses?\n    //Step 6: How to judge\
    \ the parentheses is error or not?\n    //Step 7: How to output the result?\n\
    \    //Step 8: How to write the test case?\n    if(brackets.length == 0) {\n \
    \       return false;\n    }\n    var bracket_list = brackets.split(\"\");\n \
    \   var stack = [];\n    for(var i = 0; i < bracket_list.length; i++) {\n    \
    \    if(bracket_list[i] == \"(\") {\n            stack.push(bracket_list[i]);\n\
    \        } else if(bracket_list[i] == \")\") {\n            if(stack.length ==\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if(stack.length == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}", "    let stack = [];\n\
    \    for (let bracket of brackets){\n        if (bracket === \"(\"){\n       \
    \     stack.push(bracket);\n        } else if (bracket === \")\"){\n         \
    \   if (stack.length === 0){\n                return false;\n            } else\
    \ {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    var bracket_counter = 0;\n    for (i = 0; i\
    \ < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            bracket_counter\
    \ += 1;\n        }\n        else if (brackets[i] == \")\"){\n            bracket_counter\
    \ -= 1;\n        }\n        if (bracket_counter < 0){\n            return false;\n\
    \        }\n    }\n    if (bracket_counter == 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n\n", "\n}\n", "    var openP = 0\n\
    \    var closeP = 0\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            openP++\n        } else if (brackets[i]\
    \ == \")\") {\n            closeP++\n        }\n    }\n    if (openP == closeP)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n", "\t\
    var left_para = 0;\n\tvar right_para = 0;\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == '('){\n\t\t\tleft_para++;\n\t\t}\n\t\telse if\
    \ (brackets[i] == ')'){\n\t\t\tright_para++;\n\t\t}\n\t\tif (right_para > left_para){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif (left_para != right_para){\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n", "    var num_left = 0;\n    var num_right = 0;\n  \
    \  for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"\
    ){\n            num_left++;\n        }\n        else{\n            num_right++;\n\
    \        }\n    }\n    if (num_left == num_right){\n        return true;\n   \
    \ }\n    else{\n        return false;\n    }\n}\n", "\tvar error = 0;\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\t\
    error += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\terror -= 1;\n\t\
    \t}\n\t\tif (error < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (error == 0)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "\tvar stack\
    \ = [];\n\tvar error = false;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\
    \tif(brackets[i] === \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}else if(brackets[i]\
    \ === \")\"){\n\t\t\tif(stack.length > 0){\n\t\t\t\tstack.pop();\n\t\t\t}else{\n\
    \t\t\t\terror = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn error || stack.length > 0?\
    \ false: true;\n}", "    var stack = [];\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == '('){\n            stack.push(brackets[i]);\n\
    \        }\n        else if (brackets[i] == ')'){\n            if (stack.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              stack.pop();\n            }\n        }\n    }\n    if (stack.length\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "\tvar left = 0;\n\tvar right = 0;\n\t\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == '('){\n\t\t\tleft += 1;\n\t\t}\n\t\telse if (brackets[i]\
    \ == ')'){\n\t\t\tright += 1;\n\t\t}\n\t\tif (right > left){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn (left == right);\n}\n", "\tvar i, l, open_bracket = 0;\n\t\
    for(i = 0, l = brackets.length; i < l; i++){\n\t\tif(brackets[i] == \"(\"){\n\t\
    \t\topen_bracket++;\n\t\t}else if(brackets[i] == \")\"){\n\t\t\topen_bracket--;\n\
    \t\t}\n\t\tif(open_bracket < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn open_bracket\
    \ == 0;\n}\n", "    const stack = new Stack();\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            stack.pop();\n     \
    \   }\n    }\n    return stack.size() === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
