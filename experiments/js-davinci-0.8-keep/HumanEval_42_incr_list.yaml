name: HumanEval_42_incr_list
language: js
prompt: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
  \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["    return l.map(x => x + 1);\n}\n", "\tvar newList = [];\n\tfor(i=0;\
    \ i<l.length; i++){\n\t\tnewList.push(l[i]+1);\n\t}\n\treturn newList;\n}\n",
  "    let result = [];\n    for(let i = 0; i < l.length; i++){\n        result.push(l[i]\
    \ + 1);\n    }\n    return result;\n}\n", "    return l.map(function(x){return\
    \ x+1});\n}\n", "    return map(incr, l);\n}\n", "  var r= [];\n  for(var i=0;\
    \ i<l.length; i++){\n    r.push(l[i]+1);\n  }\n  return r;\n}", "    var lincr=[];\n\
    \    for(var i=0;i<l.length;i++){\n        lincr.push(l[i]+1);\n    }\n    return\
    \ lincr;\n}", "  return l.map(i => i + 1);\n}", "    // Create new list\n    var\
    \ incr_l = [];\n    for (i=0; i<l.length; i++){\n      incr_l.push(l[i]+1);\n\
    \    }\n    return incr_l;\n}\nvar l = [1, 2, 3];", "  return l.map(x => x + 1);\n\
    }\n", "    return l.map(x => x + 1);\n}", "    return l.map(x => x + 1);\n}\n",
  "    // return (null)?(null): l.map(x => x+1);\n    if(l == null){\n        return\
    \ null;\n    }else{\n        var result=[];\n        for(var i=0; i<l.length;\
    \ i++){\n            result.push(l[i]+1);\n        }\n        return result;\n\
    \    }\n}\n", "  return _.map(l, function(elem){\n    return elem + 1;\n  });\n\
    }\n", "\tlet result = [];\n\tfor(let i = 0; i < l.length; i++){\n\t\tresult.push(l[i]\
    \ + 1);\n\t}\n\treturn result;\n}\n", "    return l.map(function(i){\n       \
    \ return i+1;\n    });\n}\n", "    return l.map(x => x + 1);\n}\n", "    if(is_null(l)){\n\
    \        return null;\n    } else {\n        return pair(\n            head(l)\
    \ + 1,\n            incr_list(tail(l))\n        );\n    }\n}\n", "\tvar il = new\
    \ Array();\n\tfor(var i=0; i<l.length; i++){\n\t\til.push(l[i]+1);\n\t}\n\treturn\
    \ il;\n}\n\n", "\tvar newList = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\t\
    newList.push(l[i] + 1);\n\t}\n\treturn newList;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
