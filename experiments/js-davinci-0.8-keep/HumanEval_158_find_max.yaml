name: HumanEval_158_find_max
language: js
prompt: "//Write a function that accepts a list of strings.\n// The list contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"\
  string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\
  \n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction find_max(words){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\"\
  );\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
  aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
  , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"\
  are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\",\
  \ \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"\
  ]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\"\
  );\n}\n\ntest();"
completions: ["    words.sort();\n    var max = 0;\n    var res = \"\";\n    for(var\
    \ i = 0; i < words.length; i++){\n        if(get_uniq(words[i]).length > max){\n\
    \            max = get_uniq(words[i]).length;\n            res = words[i];\n \
    \       }\n    }\n    return res;\n}", "    let max=0;\n    let maxword=\"\";\n\
    \    for(let i=0;i<words.length;i++){\n        if(max<getUnique(words[i])){\n\
    \            max=getUnique(words[i]);\n            maxword=words[i];\n       \
    \ }\n    }\n    return maxword;\n}", "    var max=0;\n    var long=\"\";\n   \
    \ for(var i=0;i<words.length;i++){\n        var count=0;\n        for(var j=0;j<words[i].length;j++){\n\
    \            if(words[i].indexOf(words[i][j])==j){\n                count++;\n\
    \            }\n        }\n        if(count>max){\n            max=count;\n  \
    \          long=words[i];\n        }\n    }\n    return long;\n}\n", "  var string\
    \ = \"\";\n  for(var i = 0; i < words.length; i++){\n    var count = 0;\n    for(var\
    \ j = 0; j < words[i].length; j++){\n      if(words[i].lastIndexOf(words[i][j])\
    \ === words[i].indexOf(words[i][j])){\n        count++;\n      }\n    }\n    if(count\
    \ > string.length){\n      string = words[i];\n    }\n  }\n  return string;\n\
    }\n\n", "  var max_word = \"\";\n  var max_length = 0;\n  for(var i = 0; i < words.length;\
    \ i++){\n    var current_word = words[i];\n    var seen = [];\n    var current_length\
    \ = 0;\n    for(var j = 0; j < current_word.length; j++){\n      var current_char\
    \ = current_word[j];\n      if(seen.indexOf(current_char) == -1){\n        seen.push(current_char);\n\
    \        current_length += 1;\n      }\n    }\n    if(current_length > max_length){\n\
    \      max_length = current_length;\n      max_word = current_word;\n    }\n \
    \ }\n  return max_word;\n}\n", "    // your code here..\n}\n", "    let obj =\
    \ {}\n    let max = 0\n    let maxWord = ''\n    for(let i = 0; i < words.length;\
    \ i++){\n        obj[words[i]] = 0\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            if(words[i].indexOf(words[i][j]) == j){\n               \
    \ obj[words[i]] ++\n            }\n        }\n        if(obj[words[i]] > max){\n\
    \            max = obj[words[i]]\n            maxWord = words[i]\n        }\n\
    \    }\n    return maxWord\n}\n", "    let result = words[0];\n    for(let i =\
    \ 1; i < words.length; i++){\n        if(words[i].length > result.length){\n \
    \           result = words[i];\n        }\n    }\n    return result;\n}\nlet t\
    \ = find_max([\"name\", \"of\", \"string\"]);", "  var max = 0;\n  var result\
    \ = '';\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n\
    \    var currentMax = getUniqueCount(word);\n    if(currentMax > max){\n     \
    \ max = currentMax;\n      result = word;\n    }\n  }\n  return result;\n}\n",
  "    let words2 = words.map(e => [e, e.split('').filter((v, i, a) => a.indexOf(v)\
    \ === i).length])\n    console.log(words2)\n    words2.sort((a, b) => b[1] - a[1])\n\
    \    console.log(words2)\n    let max_count = words2[0][1]\n    let max_words\
    \ = []\n    for (let i = 0; i < words2.length; i++){\n        if (words2[i][1]\
    \ < max_count){\n            break\n        }\n        max_words.push(words2[i][0])\n\
    \    }\n    console.log(max_words)\n    max_words.sort()\n    return max_words[0]\n\
    }\n", "    var splitWords = [];\n    var max = 0;\n    var index = 0;\n    var\
    \ word = \"\";\n    var len = words.length;\n    for(var i = 0; i < len; i++){\n\
    \        splitWords.push(words[i].split(\"\"));\n    }\n    for(var i = 0; i <\
    \ len; i++){\n        if(max < new Set(splitWords[i]).size){\n            max\
    \ = new Set(splitWords[i]).size;\n            index = i;\n        }\n    }\n \
    \   for(var i = 0; i < len; i++){\n        if(i !== index){\n            if(max\
    \ === new Set(splitWords[i]).size){\n                if(words[i] < words[index]){\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \    }\n    return words[index];\n}\n", "  var max=0;\n  var result = \"\";\n\
    \  for(var i=0; i<words.length; i++){\n    var word=words[i];\n    var temp=0;\n\
    \    for(var j=0; j<word.length; j++){\n      for(var k=j+1; k<word.length; k++){\n\
    \        if(word[j]===word[k]){\n          temp++;\n        }\n      }\n    }\n\
    \    if(temp>max){\n      max=temp;\n      result=word;\n    }\n  }\n  return\
    \ result;\n}", "    let max=0;\n    let maxStr=\"\";\n    for(let i=0;i<words.length;i++){\n\
    \        if(max<uniq(words[i])){\n            max=uniq(words[i]);\n          \
    \  maxStr=words[i];\n        }\n    }\n    return maxStr;\n}", "  return words.sort(function(a,b){\n\
    \    if(a.length < b.length){\n      return -1;\n    }\n    if(a.length > b.length){\n\
    \      return 1;\n    }\n    if(a.length === b.length){\n      if(a < b){\n  \
    \      return -1;\n      }\n      if(a > b){\n        return 1;\n      }\n   \
    \ }\n    return 0;\n  }).pop();\n}", "\tvar count_chars = words.map(function(word){\n\
    \t\tvar count = 0;\n\t\tfor(var i = 0; i < word.length; i++){\n\t\t\tif(word.indexOf(word[i])\
    \ == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t});\n\tvar max\
    \ = Math.max.apply(null, count_chars);\n\treturn words[count_chars.indexOf(max)];\n\
    }\n", "  var max = words[0];\n  for(var i = 0; i < words.length; i++){\n    if(new\
    \ Set(words[i]).size > new Set(max).size){\n      max = words[i];\n    }\n  }\n\
    \  return max;\n}", "  var mostUniqueChars = 0;\n  var wordMostUniqueChars = \"\
    \";\n  var charsArray = [];\n  var chars = {};\n  words.forEach(function(word){\n\
    \    charsArray = word.split(\"\");\n    charsArray.forEach(function(char){\n\
    \      if(chars[char] == undefined){\n        chars[char] = 1;\n      }else{\n\
    \        chars[char] += 1;\n      }\n    });\n    console.log(chars);\n    console.log(Object.keys(chars).length);\n\
    \    if(Object.keys(chars).length > mostUniqueChars){\n      mostUniqueChars =\
    \ Object.keys(chars).length;\n      wordMostUniqueChars = word;\n    }\n    chars\
    \ = {};\n  });\n  return wordMostUniqueChars;\n}", "\tvar map = {};\n\twords.forEach(function(word){\n\
    \t\tvar word_map = {};\n\t\tword.split('').forEach(function(letter){\n\t\t\tword_map[letter]\
    \ = true;\n\t\t});\n\t\tmap[word] = Object.keys(word_map).length;\n\t});\n\tvar\
    \ sorted = Object.keys(map).sort(function(a,b){\n\t\treturn map[b] - map[a];\n\
    \t});\n\treturn sorted[0];\n}\n", "  var result = \"\";\n  if(words.length ===\
    \ 0){\n    return false;\n  }\n\n  var current_longest = get_unique_chars(words[0]);\n\
    \  for(var i = 1; i < words.length; i++){\n    var word = words[i];\n    var unique_chars\
    \ = get_unique_chars(word);\n    if(unique_chars.length > current_longest.length){\n\
    \      current_longest = unique_chars;\n      result = word;\n    }else if(unique_chars.length\
    \ === current_longest.length){\n      if(word < result){\n        result = word;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  var result = '';\n  var max_unique\
    \ = 0;\n  var unique_chars = [];\n  for(var i = 0; i < words.length; i++){\n \
    \   var chars = words[i].split('');\n    var uniques = [];\n    for(var j = 0;\
    \ j < chars.length; j++){\n      if(uniques.indexOf(chars[j]) == -1){\n      \
    \  uniques.push(chars[j]);\n      }\n    }\n    if(uniques.length > max_unique){\n\
    \      max_unique = uniques.length;\n      result = words[i];\n    }else if(uniques.length\
    \ == max_unique){\n      if(words[i] < result){\n        result = words[i];\n\
    \      }\n    }\n  }\n  return result;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
