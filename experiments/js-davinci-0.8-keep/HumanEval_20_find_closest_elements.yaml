name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ (2.0, 2.0)\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["    numbers.sort();\n    var result = [numbers[0], numbers[1]];\n \
    \   var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 1; i < numbers.length;\
    \ i++){\n        if (Math.abs(numbers[i] - numbers[i+1]) < diff){\n          \
    \  result = [numbers[i], numbers[i+1]];\n            diff = Math.abs(numbers[i]\
    \ - numbers[i+1]);\n        }\n    }\n    return result;\n}\n", "    let minDiff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let smallestFirst = numbers[0] > numbers[1]\
    \ ? numbers[1] : numbers[0];\n    let smallestSecond = numbers[0] > numbers[1]\
    \ ? numbers[0] : numbers[1];\n    for (let i = 0; i < numbers.length; i++){\n\
    \        for (let j = i + 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < minDiff){\n                minDiff = Math.abs(numbers[i] - numbers[j]);\n\
    \                smallestFirst = numbers[i] > numbers[j] ? numbers[j] : numbers[i];\n\
    \                smallestSecond = numbers[i] > numbers[j] ? numbers[i] : numbers[j];\n\
    \            }\n        }\n    }\n    return [smallestFirst, smallestSecond];\n\
    }\n", "    var smallest = numbers[0] - numbers[1];\n    var result = [];\n   \
    \ for(var i = 0; i < numbers.length; i++){\n        for(var j = i+1; j < numbers.length;\
    \ j++){\n            if(Math.abs(numbers[i] - numbers[j]) < smallest){\n     \
    \           smallest = Math.abs(numbers[i] - numbers[j]);\n                result[0]\
    \ = numbers[i];\n                result[1] = numbers[j];\n            }\n    \
    \    }\n    }\n    return result;\n}\n", "  let res = [];\n  let min = Infinity;\n\
    \  let l, r;\n  for (let i = 0; i < numbers.length; i++) {\n    l = numbers[i];\n\
    \    for (let j = i + 1; j < numbers.length; j++) {\n      r = numbers[j];\n \
    \     if (Math.abs(l - r) < min) {\n        min = Math.abs(l - r);\n        res\
    \ = [l, r];\n      }\n    }\n  }\n  return res;\n}\n", "    var sorted_array =\
    \ sort_array(numbers);\n    var closest_numbers = [];\n    for(var i = 0; i <\
    \ sorted_array.length; i++){\n        if(i == sorted_array.length - 1){\n    \
    \        return closest_numbers;\n        }\n        var diff = sorted_array[i+1]\
    \ - sorted_array[i];\n        closest_numbers.push([sorted_array[i], sorted_array[i+1],\
    \ diff]);\n    }\n    var min = closest_numbers[0][2];\n    var min_index = 0;\n\
    \    for(var i = 1; i < closest_numbers.length; i++){\n        if(closest_numbers[i][2]\
    \ < min){\n            min = closest_numbers[i][2];\n            min_index = i;\n\
    \        }\n    }\n    return [closest_numbers[min_index][0], closest_numbers[min_index][1]];\n\
    }\n", "    var l = numbers.length;\n    var smallest = [numbers[0], numbers[1]];\n\
    \    var smallest_diff = smallest[1] - smallest[0];\n    for (var i = 0; i < l;\
    \ i++){\n        for (var j = i + 1; j < l; j++){\n            var diff = numbers[j]\
    \ - numbers[i];\n            if (diff < smallest_diff){\n                smallest\
    \ = [numbers[i], numbers[j]];\n                smallest_diff = diff;\n       \
    \     }\n        }\n    }\n    return smallest;\n}\n", "    var min=numbers[0];\n\
    \    var minIndex=0;\n    var secondMin=numbers[1];\n    var secondMinIndex=1;\n\
    \    for(var i=1;i<numbers.length;i++){\n        if(numbers[i]<min){\n       \
    \     secondMin=min;\n            secondMinIndex=minIndex;\n            min=numbers[i];\n\
    \            minIndex=i;\n        }else if(numbers[i]<secondMin){\n          \
    \  secondMin=numbers[i];\n            secondMinIndex=i;\n        }\n    }\n  \
    \  if(minIndex<secondMinIndex){\n        return(min,secondMin);\n    }else{\n\
    \        return(secondMin,min);\n    }\n}", "    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let diff = numbers[i] - numbers[i + 1];\n        let absDiff\
    \ = Math.abs(diff);\n        // console.log(absDiff);\n        if (absDiff < 0.5){\n\
    \            let smallest = Math.min(numbers[i], numbers[i + 1]);\n          \
    \  let largest = Math.max(numbers[i], numbers[i + 1]);\n            return (smallest,\
    \ largest);\n        }\n    }\n}", "    var a = numbers[0];\n    var b = numbers[1];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        for (var j = i+1; j <\
    \ numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) < Math.abs(a\
    \ - b)){\n                a = numbers[i];\n                b = numbers[j];\n \
    \           }\n        }\n    }\n    return (a, b);\n}", "    var difflist=[];\n\
    \    var diff;\n    for(var i=0;i<numbers.length-1;i++){\n        diff=numbers[i+1]-numbers[i];\n\
    \        difflist.push(diff);\n    }\n    var smallnum=Math.min.apply(null,difflist);\n\
    \    var index=difflist.indexOf(smallnum);\n    var num1=numbers[index];\n   \
    \ var num2=numbers[index+1];\n    var result=[num1,num2];\n    return result;\n\
    }\n", "    var closest_numbers = [];\n    var closest_diff = -1;\n    for (i =\
    \ 0; i < numbers.length; i++){\n        for (j = i + 1; j < numbers.length; j++){\n\
    \            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (closest_diff\
    \ == -1 || diff < closest_diff){\n                closest_diff = diff;\n     \
    \           closest_numbers = [numbers[i], numbers[j]];\n            }\n     \
    \   }\n    }\n    if (closest_numbers[0] > closest_numbers[1]){\n        var temp\
    \ = closest_numbers[0];\n        closest_numbers[0] = closest_numbers[1];\n  \
    \      closest_numbers[1] = temp;\n    }\n    return closest_numbers;\n}\n", " \
    \   const len = numbers.length;\n    let a = 0;\n    let b = 1;\n    let smallestDiff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for(let i = 0; i < len; i++){\n  \
    \      for(let j = i+1; j < len; j++){\n            let tempDiff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if(tempDiff < smallestDiff){\n                smallestDiff\
    \ = tempDiff;\n                a = i;\n                b = j;\n            }\n\
    \        }\n    }\n    let first = numbers[a];\n    let second = numbers[b];\n\
    \    if(first > second){\n        let temp = first;\n        first = second;\n\
    \        second = temp;\n    }\n    return {smallest: first, largest: second};\n\
    }", "    // First grab the array length.\n    var array_length = numbers.length;\n\
    \    // Create a variable to hold the closest numbers.\n    var closest_numbers\
    \ = [0, 0];\n    // Start the closest_diff at infinity.\n    var closest_diff\
    \ = Number.POSITIVE_INFINITY;\n    // Loop through each number.\n    for (var\
    \ i = 0; i < array_length; i++){\n        // Grab the current number.\n      \
    \  var current_number = numbers[i];\n        // If the current number is the last\
    \ number in the array, skip it.\n        if (i === array_length - 1){\n      \
    \      break;\n        }\n        // Otherwise grab the next number in the array.\n\
    \        var next_number = numbers[i + 1];\n        // Calculate the current difference\
    \ between the two numbers.\n        var current_diff = Math.abs(current_number\
    \ - next_number);\n        // If the current difference is less than the closest_diff,\
    \ make it the new closest_diff,\n        // and set the closest_numbers to these\
    \ two numbers.\n        if (current_diff < closest_diff){\n            closest_diff\
    \ = current_diff;\n            closest_numbers = [current_number, next_number];\n\
    \        }\n    }\n    // Return the closest_numbers.\n    return closest_numbers;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tvar difference\
    \ = [];\n\tvar newList = [];\n\tfor(i=0; i<numbers.length; i++){\n\t\tvar value\
    \ = numbers[i];\n\t\tif(value < smallest){\n\t\t\tsmallest = value;\n\t\t}\n\t\
    \tif(value > largest){\n\t\t\tlargest = value;\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length;\
    \ i++){\n\t\tif(numbers[i] == smallest){\n\t\t\tcontinue;\n\t\t}\n\t\tdifference.push(largest\
    \ - numbers[i]);\n\t}\n\tfor(i=0; i<difference.length; i++){\n\t\tif(i == 0){\n\
    \t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] < newList[0]){\n\
    \t\t\tnewList = [];\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i]\
    \ == newList[0]){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t}\n\tfor(i=0;\
    \ i<numbers.length; i++){\n\t\tfor(j=0; j<newList.length; j++){\n\t\t\tif(largest\
    \ - numbers[i] == newList[j]){\n\t\t\t\treturn smallest + \", \" + numbers[i];\n\
    \t\t\t}\n\t\t}\n\t}\n}", "    if(!Array.isArray(numbers)){\n        throw new\
    \ Error(\"Parameter must be an array\");\n    }\n    if(numbers.length < 2){\n\
    \        throw new Error(\"Parameter must have at least two elements\");\n   \
    \ }\n    var minDiff = Math.abs(numbers[0] - numbers[1]);\n    var minIndexes\
    \ = [0, 1];\n    for(var i = 0; i < numbers.length - 1; i++){\n        var diff\
    \ = Math.abs(numbers[i] - numbers[i + 1]);\n        if(diff < minDiff){\n    \
    \        minDiff = diff;\n            minIndexes = [i, i + 1];\n        }\n  \
    \  }\n    var smaller = numbers[minIndexes[0]];\n    var larger = numbers[minIndexes[1]];\n\
    \    if(larger < smaller){\n        smaller = numbers[minIndexes[1]];\n      \
    \  larger = numbers[minIndexes[0]];\n    }\n    return {\n        smaller: smaller,\n\
    \        larger: larger\n    };\n}\n", "    let diff = [];\n    for (let i = 0;\
    \ i < numbers.length - 1; i++) {\n        diff.push(Math.abs(numbers[i] - numbers[i\
    \ + 1]));\n    }\n    let min = Math.min(...diff);\n    let index = diff.indexOf(min);\n\
    \    return (numbers[index], numbers[index + 1]);\n}\n", "    var min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    var result = [];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        if(i+1 < numbers.length){\n            if(min > Math.abs(numbers[i]\
    \ - numbers[i+1])){\n                min = Math.abs(numbers[i] - numbers[i+1]);\n\
    \                result[0] = numbers[i];\n                result[1] = numbers[i+1];\n\
    \            }\n        }\n    }\n    return result;\n}\n\n\n", "    numbers.sort(function(a,\
    \ b){return a-b});\n    minDiff = Math.abs(numbers[0] - numbers[1]);\n    minNumber1\
    \ = numbers[0];\n    minNumber2 = numbers[1];\n    for (i = 0; i < numbers.length\
    \ - 1; i++){\n        diff = Math.abs(numbers[i] - numbers[i+1]);\n        if\
    \ (diff < minDiff){\n            minDiff = diff;\n            minNumber1 = numbers[i];\n\
    \            minNumber2 = numbers[i+1];\n        }\n    }\n    return [minNumber1,\
    \ minNumber2];\n}\n", "    numbers.sort();\n    var closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    var first_number = numbers[0];\n    var second_number =\
    \ numbers[1];\n    for (var i = 0; i < numbers.length - 1; i++) {\n        if\
    \ (Math.abs(numbers[i] - numbers[i + 1]) < closest_distance) {\n            closest_distance\
    \ = Math.abs(numbers[i] - numbers[i + 1]);\n            first_number = numbers[i];\n\
    \            second_number = numbers[i + 1];\n        }\n    }\n    return(first_number,\
    \ second_number);\n}", "\tlet min = Number.MAX_VALUE;\n\tlet closest_elements\
    \ = [numbers[0], numbers[1]];\n\tfor(let i = 0; i < numbers.length; i++){\n\t\t\
    for(let j = i + 1; j < numbers.length; j++){\n\t\t\tlet diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n\t\t\tif(diff < min){\n\t\t\t\tmin = diff;\n\t\t\t\tclosest_elements\
    \ = [numbers[i], numbers[j]];\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_elements;\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
