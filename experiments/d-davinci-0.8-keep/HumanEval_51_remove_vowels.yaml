name: HumanEval_51_remove_vowels
language: d
prompt: "import std.math;\n/*\n\n    remove_vowels is a function that takes string\
  \ and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>>\
  \ remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n\
  \    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\
  \    \n*/\nstring remove_vowels(string text) \n"
tests: "unittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n\
  \    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\"\
  ) == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"\
  EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}"
completions: ["{\n    string res = \"\";\n    foreach(char c; text) {\n        if\
    \ ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u')) {\n   \
    \     } else {\n            res ~= c;\n        }\n    }\n    return res;\n}",
  "{\n    text = text.toLower();\n    string vowels = \"aeiou\";\n    for (int i =\
    \ 0; i < text.length; i++) \n    {\n        for (int j = 0; j < vowels.length;\
    \ j++) \n        {\n            if (text[i] == vowels[j]) \n            {\n  \
    \              text = text.erase(i, 1);\n                i--;\n              \
    \  break;\n            }\n        }\n    }\n    return text;\n}\n/*", "{\n   \
    \ string result = \"\";\n    foreach(char c; text) \n    {\n        if(!(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}", "{ \n    text = toLower(text);\n\
    \    uint size = text.length;\n    string result;\n    char[size] text_char_array\
    \ = text;\n    char[size] result_char_array;\n    uint i = 0;\n    foreach(char\
    \ ch; text_char_array)\n    {\n        if(ch != 'a' && ch != 'e' && ch != 'i'\
    \ && ch != 'o' && ch != 'u')\n        {\n            result_char_array[i] = ch;\n\
    \            i++;\n        }\n    }\n    result = result_char_array.idup;\n  \
    \  return result;\n}", "{\n    auto new_text = text.dup;\n    foreach(vowel; ['a',\
    \ 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U']) {\n        new_text = new_text.replace(vowel);\n\
    \    }\n    return new_text;\n}", "{ \n    int i;\n    string result;\n    for\
    \ (i = 0; i < text.length; i++) {\n        if (text[i] == 'a' || text[i] == 'e'\
    \ || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A' || text[i]\
    \ == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U') {\n          \
    \  continue;\n        }\n        result ~= text[i];\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(ch; text) \n    {\n        if(ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E'\
    \ || ch == 'I' || ch == 'O' || ch == 'U') \n        {\n            continue;\n\
    \        }\n        result ~= ch;\n    }\n    return result;\n}\n/*", "{ \n  \
    \  import std.string : remove; \n    return text.remove(\"[aeiouAEIOU]\"); \n\
    } ", "{\n    string no_vowels = \"\";\n    foreach(c; text) \n    {\n        if(c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') \n        {\n            no_vowels ~= c;\n\
    \        }\n    }\n    return no_vowels;\n}\n/*", "{\n    string removed_vowels;\n\
    \    foreach(i, v; text)\n    {\n        if(v != 'a' && v != 'e' && v != 'i' &&\
    \ v != 'o' && v != 'u' && v != 'A' && v != 'E' && v != 'I' && v != 'O' && v !=\
    \ 'U')\n        {\n            removed_vowels ~= v;\n        }\n    }\n    return\
    \ removed_vowels;\n}", "{ \n    // remove vowels\n    return text.toUpper().replace(\"\
    A\", \"\").replace(\"E\", \"\").replace(\"I\", \"\").replace(\"O\", \"\").replace(\"\
    U\", \"\");\n}\n/*", "{\n    auto len = text.length;\n    string result;\n   \
    \ foreach(c; text)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            continue;\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\n/*", "{\n    //\
    \ Todo: Remove vowels and return text without vowels\n    return \"\";\n}", "{\n\
    \    char vowels[] = \"aeiouAEIOU\";\n    text = replaceAll(text, vowels, \"\"\
    );\n    return text;\n}", "{\n    string result;\n    foreach(c; text)\n    {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            //skip\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char c;\
    \ text)\n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    int\
    \ i;\n    int text_length = text.length;\n    string result;\n    int counter\
    \ = 0;\n    for (i = 0; i < text_length; i++)\n    {\n        if (text[i] != 'a'\
    \ && text[i] != 'A' && text[i] != 'e' && text[i] != 'E' && text[i] != 'o' && text[i]\
    \ != 'O' && text[i] != 'i' && text[i] != 'I' && text[i] != 'u' && text[i] != 'U')\n\
    \        {\n            result = result + text[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n  return text.replace(\"a\", \"\").replace(\"A\", \"\").replace(\"\
    e\", \"\").replace(\"E\", \"\").replace(\"i\", \"\").replace(\"I\", \"\").replace(\"\
    o\", \"\").replace(\"O\", \"\").replace(\"u\", \"\").replace(\"U\", \"\");\n}",
  "{\n    string result = \"\";\n    bool vowel;\n    foreach(char c; text)\n    {\n\
    \        vowel = false;\n        foreach(char v; \"aeiou\")\n        {\n     \
    \       if(c == v)\n            {\n                vowel = true;\n           \
    \     break;\n            }\n        }\n        if(!vowel)\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\n/*", "{\n    string\
    \ result;\n    foreach(const char c; text)\n    {\n        if (!is_vowel(c))\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
