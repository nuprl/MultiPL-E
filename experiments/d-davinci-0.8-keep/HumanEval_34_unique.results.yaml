name: HumanEval_34_unique
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] lCopy = l.dup;\n   \
    \ lCopy.sort;\n    long[] res = [lCopy[0]];\n    foreach(int i; 1..lCopy.length)\
    \ \n    {\n        if(lCopy[i] != lCopy[i-1])\n            res ~= lCopy[i];\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique;\n\n   \
    \ assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L,\
    \ 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpypwg5mr0.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpypwg5mr0.d(14): Error: cannot implicitly convert expression `lCopy.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpypwg5mr0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n\tunique!(typeof(l[0]))(l);\n\t\
    return l;\n}\n// /*\n//     ``unique(iterable)`` -> sorted unique elements in\
    \ `iterable`\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w4gaauz.d(11): Error: template instance `unique!(typeof(l[0]))`\
    \ `unique` is not a template declaration, it is a function\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w4gaauz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] t = l.dup;\n    t.sort;\n\
    \    // remvoes duplicates\n    t.dedup;\n    return t;\n}\nunittest\n{\n    alias\
    \ candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbu44b1fv.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpbu44b1fv.d(14): Error: no property `dedup` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbu44b1fv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    int[] unique = new int[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i] == l[i+1])\n\
    \        {\n            i++;\n        }\n        else\n        {\n           \
    \ unique[i] = l[i];\n        }\n    }\n    // unique.length = i+1;\n    return\
    \ unique;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6nb5v59o.d(21): Error: cannot implicitly convert expression `l[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmp6nb5v59o.d(25): Error: cannot implicitly convert\
    \ expression `unique` of type `int[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6nb5v59o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    auto xs = std.algorithm.sort(l).array;\n\
    \    long[] ys;\n    foreach(i, item; xs) \n    {\n        if(ys.length > 0 &&\
    \ ys[$-1] == item) continue;\n        ys ~= item;\n    }\n    return ys;\n}\n\
    unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpobp5wl5b.d(11): Error: undefined identifier `algorithm` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobp5wl5b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(i; l)\n    {\n        if(i in res)\n            continue;\n     \
    \   else\n            res ~= i;\n    }\n    res.sort;\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_9_hs6o.d(14): Error: incompatible types for `(i) in (res)`:\
    \ `long` and `long[]`\\n/tmp/tmp9_9_hs6o.d(19): Error: no property `sort` for\
    \ type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_9_hs6o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n\tint[long] counter = new int[long];\n\
    \tforeach(el; l)\n\t{\n\t\tcounter[el]++;\n\t}\n\tauto keys = new long[counter.length];\n\
    \tint i = 0;\n\tforeach(key; counter.keys)\n\t{\n\t\tkeys[i] = key;\n\t\ti++;\n\
    \t}\n\tquickSort(keys, 0, keys.length-1);\n\treturn keys;\n}\nunittest\n{\n  \
    \  alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwzlk4q5o.d(11): Error: need size of rightmost array, not type\
    \ `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzlk4q5o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] arr;\n    arr = sort(l);\n\
    \    auto it;\n    foreach(int i; arr)\n    {\n        if(it.idup)\n        {\n\
    \            if(i==it.idup.idup)\n            {\n                continue;\n \
    \           }\n        }\n        writeln(i);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuromabvo.d(13): Error: no identifier for declarator `it`\\n/tmp/tmpuromabvo.d(13):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpuromabvo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    l.sort();\n    uniqueResult!(a\
    \ => a) myUnique;\n    auto result = myUnique(l);\n    return result;\n}\n/*\n\
    Return all unique elements from two lists\n    >>> unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123], [5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n*/\nlong[]\
    \ unique(long[] l1, long[] l2)\n{\n    return unique(l1~l2);\n}\nunittest\n{\n\
    \    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfhuydyiv.d(11): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpfhuydyiv.d(12): Error: template instance `uniqueResult!((a) => a)` template\
    \ `uniqueResult` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfhuydyiv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n\tlong[] unique;\n\tforeach(e;\
    \ l) {\n\t\tif (e in unique) continue;\n\t\tunique ~= e;\n\t}\n\treturn unique;\n\
    }\n/*\nReturn a sorted list of the integers in range(start, stop, step)\n    >>>\
    \ range(2, 8, 2)\n    [2, 4, 6]\n*/\nlong[] range(long start, long stop, long\
    \ step) \n{\n\tlong[] result;\n\tfor (long i = start; i < stop; i += step) \n\t\
    {\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\n/*\nReturn a sorted list of the\
    \ integers in range(start, stop, step)\n    >>> range(2, 8, 2)\n    [2, 4, 6]\n\
    */\nlong[] range(long start, long stop) \n{\n\treturn range(start, stop, 1);\n\
    }\n/*\nReturn a sorted list of the integers in range(start, stop, step)\n    >>>\
    \ range(2, 8, 2)\n    [2, 4, 6]\n*/\nlong[] range(long stop) \n{\n\treturn range(0,\
    \ stop, 1);\n}\n/*\nReturn the index in the list of the first item whose value\
    \ is x. \nIt is an error if there is no such item.\n    >>> x = range(3,6)\n \
    \   >>> find(x, 3)\n    0\n    >>> find(x, 4)\n    1\n    >>> find(x, 10)\n  \
    \  Traceback (most recent call last):\n        ...\n    ValueError: 10 is not\
    \ in list\n*/\nlong find(long[] l, long x) \n{\n\treturn l.length > 0 ? index(l,\
    \ x) : throw new Exception(\"ValueError: \" ~ to!string(x) ~ \" is not in list\"\
    );\n}\n/*\nRemove the first occurrence of value from the list.\n    >>> x = range(3,6)\n\
    \    >>> remove(x, 3)\n    >>> x\n    [4, 5]\n    >>> remove(x, 10)\n    Traceback\
    \ (most recent call last):\n        ...\n    ValueError: 10 is not in\nunittest\n\
    {\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9kw5ec2s.d(65): Error: expression expected, not `throw`\\n/tmp/tmp9kw5ec2s.d(65):\
    \ Error: found `new` when expecting `;` following `return` statement\\n/tmp/tmp9kw5ec2s.d(67):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9kw5ec2s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    auto sorted = l.dup.sort();\n\
    \    auto uniques = [l[0]];\n    for (size_t i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] != l[i-1])\n        {\n            uniques ~= l[i];\n      \
    \  }\n    }\n    return uniques;\n}\nunittest\n{\n    alias candidate = unique;\n\
    \n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L,\
    \ 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpub_0jcab.d(11): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpub_0jcab.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{ \n    long[] r;\n    auto it = l.unique;\n\
    \    while(!it.empty) \n    {\n        r ~= it.front;\n        it.popFront;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpibazd4jz.d(13): Error: no property `empty` for type `long[]`\\\
    n/tmp/tmpibazd4jz.d(15): Error: no property `front` for type `long[]`\\n/tmp/tmpibazd4jz.d(16):\
    \ Error: no property `popFront` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpibazd4jz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] u;\n    foreach(l_elt;\
    \ l)\n    {\n        if(!u.canFind(l_elt)) u ~= l_elt;\n    }\n    return u;\n\
    }\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11cv45ir.d(14): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11cv45ir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{ \n    set!(long[])(l).toArray();\
    \ \n}\n/*\nReturn sorted unique elements in a list\n    >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \n*/\nreal[] unique(real[]\
    \ l) \n{ \n    set!(real[])(l).toArray(); \n}\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nstring[] unique(string[] l) \n{ \n    set!(string[])(l).toArray();\
    \ \n}\n/*\nInsert `a` at `index` of `l`; this is equivalent to `l[index:index]\
    \ = [a]`.\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpivpgnfni.d(33): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivpgnfni.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    return uniq(l);\n}\nunittest\n\
    {\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1855fgo.d(11): Error: undefined identifier `uniq`, did you mean\
    \ function `unique`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1855fgo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    version(BetterC)\n        return\
    \ unique(l.idup);\n    return std.algorithm.unique(l.idup);\n}\nunittest\n{\n\
    \    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvoolhamd.d(13): Error: undefined identifier `algorithm` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvoolhamd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    long[] arr = sort(l);\n   \
    \ long[] ret;\n    long last = -1;\n    foreach( long i; arr )\n    {\n      \
    \  if( i != last ) \n        {\n            ret ~= i;\n            last = i;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = unique;\n\
    \n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L,\
    \ 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_xwoi8sj.d(11): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xwoi8sj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    auto l2 = l.dup;\n    l2.sort;\n\
    \    auto tmp = l2.span;\n    foreach(idx, _; tmp) \n    {\n        if(l2[idx]\
    \ == l2[idx+1])\n            tmp.popFront;\n        else\n            tmp.popFront;\n\
    \    }\n    return l2;\n}\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx6r6bkd9.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpx6r6bkd9.d(13): Error: no property `span` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6r6bkd9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n\tlong[] sub = new long[l.length];\n\
    \tlong[] res = new long[l.length];\n\tint j = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tfor (int k = 0; k < l.length; k++)\n\t\t{\n\t\t\tif (l[i] !=\
    \ l[k])\n\t\t\t{\n\t\t\t\tsub[j] = l[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    for (int i = 0; i < j; i++)\n\t{\n\t\tres[i] = sub[i];\n\t}\n\treturn res;\n}\n\
    /*\nReturn index of elem in list\n    >>> index([\"a\", \"b\", \"c\"], \"b\")\n\
    \    1\n*/\nunittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmppsx74cd2.d(20): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42848e]\\n??:? long[] tmppsx74cd2.unique(long[]) [0x427ef6]\\\
    n??:? void tmppsx74cd2.__unittest_L36_C1() [0x428035]\\n??:? void tmppsx74cd2.__modtest()\
    \ [0x42815c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4bb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b34e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430565]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b325]\\n??:? runModuleUnitTests [0x42c291]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428827]\\n??:? _d_run_main [0x428792]\\n??:? main [0x42816f]\\\
    n??:? __libc_start_main [0x69bc1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/\nlong[] unique(long[] l) \n{\n    auto s = set(l); \n    auto\
    \ r = []; \n    foreach(e; s) \n        r ~= e; \n    return r; \n}\nunittest\n\
    {\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L,\
    \ 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzfek590x.d(11): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\n/tmp/tmpzfek590x.d(15):\
    \ Error: cannot implicitly convert expression `r` of type `void[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzfek590x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
