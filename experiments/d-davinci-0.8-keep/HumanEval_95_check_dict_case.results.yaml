name: HumanEval_95_check_dict_case
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    string[]\
    \ a;\n    if(dict.isNull)\n        return false;\n    a = dict.get;\n    return(allSatisfy!(isLower,a.keys)\
    \ || allSatisfy!(isUpper,a.keys));\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfltbiwl8.d(21): Error: cannot implicitly convert expression `dict.get()`\
    \ of type `string[string]` to `string[]`\\n/tmp/tmpfltbiwl8.d(22): Error: template\
    \ instance `allSatisfy!(isLower, a.keys)` template `allSatisfy` is not defined\\\
    n/tmp/tmpfltbiwl8.d(22): Error: template instance `allSatisfy!(isUpper, a.keys)`\
    \ template `allSatisfy` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfltbiwl8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    int cntLower = 0;\n    int cntUpper = 0;\n    foreach(key,\
    \ value; dict)\n    {\n        if(key.isUpper) cntUpper++;\n        else if(key.isLower)\
    \ cntLower++;\n        else return false;\n    }\n    return cntLower == dict.length\
    \ || cntUpper == dict.length;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfio_cjju.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpfio_cjju.d(24): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfio_cjju.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    if (dict is null) return false;\n\
    \    if (dict.keys.length == 0) return false;\n    foreach (key; dict.keys) \n\
    \    {\n        if (is_lower) is_lower = key.toLower == key;\n        if (is_upper)\
    \ is_upper = key.toUpper == key;\n        if (!is_lower && !is_upper) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzz7dfch6.d(24): Error: no property `toLower` for type `string`\\\
    n/tmp/tmpzz7dfch6.d(25): Error: no property `toUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz7dfch6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(!dict.isNull\
    \ && dict.get.length > 0)\n    {\n        bool allLowerCase = true;\n        bool\
    \ allUpperCase = true;\n        foreach(key, value; dict.get)\n        {\n   \
    \         if(toLower(key) != key)\n            {\n                allLowerCase\
    \ = false;\n            }\n            if(toUpper(key) != key)\n            {\n\
    \                allUpperCase = false;\n            }\n        }\n        return\
    \ allLowerCase || allUpperCase;\n    }\n    return false;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5sqg8yh_.d(24): Error: undefined identifier `toLower`\\n/tmp/tmp5sqg8yh_.d(28):\
    \ Error: undefined identifier `toUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5sqg8yh_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{ \n    if (dict.isNull)\
    \ return false;\n    int lowCount = 0;\n    int upperCount = 0;\n    int total\
    \ = 0;\n    foreach (k; dict.get) \n    {\n        total++;\n        if (isAllLower(k))\
    \ lowCount++;\n        if (isAllUpper(k)) upperCount++;\n    }\n    return (lowCount\
    \ == total || upperCount == total);\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbasl1eok.d(25): Error: undefined identifier `isAllLower`\\n/tmp/tmpbasl1eok.d(26):\
    \ Error: undefined identifier `isAllUpper`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpbasl1eok.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n\tif (dict\
    \ is null)\n\t\treturn false;\n\tint len = dict.length;\n\tif (len == 0)\n\t\t\
    return false;\n\tbool isLower = dict.keys[0].toLowerCase == dict.keys[0];\n\t\
    int count = 0;\n\tforeach (key; dict.keys)\n\t{\n\t\tif (isLower)\n\t\t{\n\t\t\
    \tif (key.toLowerCase != key)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\
    \t\t\tif (key.toUpperCase != key)\n\t\t\t\treturn false;\n\t\t}\n\t\tcount++;\n\
    \t}\n\treturn count == len;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8rvhzvk.d(20): Error: cannot implicitly convert expression `_aaLen(dict.get())`\
    \ of type `ulong` to `int`\\n/tmp/tmpm8rvhzvk.d(23): Error: no property `toLowerCase`\
    \ for type `string`\\n/tmp/tmpm8rvhzvk.d(29): Error: no property `toLowerCase`\
    \ for type `string`\\n/tmp/tmpm8rvhzvk.d(34): Error: no property `toUpperCase`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8rvhzvk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n\tif(dict.isNull)\
    \ return false;\n\tbool lower=false, upper=false;\n\tforeach(k,v; dict) \n\t{\n\
    \t\tif(k.isUpper) upper=true;\n\t\telse if(k.isLower) lower=true;\n\t\telse return\
    \ false;\n\t}\n\treturn lower ^ upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7y2ne7cj.d(22): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp7y2ne7cj.d(23): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7y2ne7cj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n        if (!isUpper(key))\n\
    \        {\n            all_upper = false;\n            break;\n        }\n  \
    \  }\n    if (all_upper)\n        return true;\n    bool all_lower = true;\n \
    \   foreach (key; dict.keys)\n    {\n        if (!isLower(key))\n        {\n \
    \           all_lower = false;\n            break;\n        }\n    }\n    return\
    \ all_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8fxp2tx.d(25): Error: undefined identifier `isUpper`\\n/tmp/tmpf8fxp2tx.d(36):\
    \ Error: undefined identifier `isLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpf8fxp2tx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    // check\
    \ null\n    if(!dict.isNull)\n    {\n        bool allupper = true;\n        bool\
    \ alllower = true;\n        // loop through keys\n        foreach(k; dict.get.keys)\n\
    \        {\n            // check uppercase\n            if(k.isUpper)\n      \
    \      {\n                alllower = false;\n            }\n            // check\
    \ lowercase\n            else if(k.isLower)\n            {\n                allupper\
    \ = false;\n            }\n            // not uppercase nor lowercase\n      \
    \      else\n            {\n                return false;\n            }\n   \
    \     }\n        //\n        return allupper || alllower;\n    }\n    else\n \
    \   {\n        return false;\n    }\n}\n//\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdjaxbuzh.d(27): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpdjaxbuzh.d(32): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjaxbuzh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    //TODO\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt3mlx1kb.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x457709]\\n??:? void tmpt3mlx1kb.__unittest_L21_C1()\
    \ [0x4420dd]\\n??:? void tmpt3mlx1kb.__modtest() [0x455214]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x460a5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x456d36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x45c405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x45c494]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x45c391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x456d0d]\\n??:? runModuleUnitTests [0x460831]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x458b14]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x458a9b]\\n??:? _d_run_main [0x458a06]\\n??:? main [0x4552e7]\\\
    n??:? __libc_start_main [0xe1ff0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    foreach(k,v; dict)\n    {\n        static\
    \ if(k.length == 1)\n        {\n            if(isLetter(k[0]))\n            {\n\
    \                if(isUpper(k[0]))\n                {\n                    foreach(k1,v1;\
    \ dict)\n                    {\n                        if(k1 != k)\n        \
    \                {\n                            if(k1.length == 1)\n         \
    \                   {\n                                if(isLetter(k1[0]))\n \
    \                               {\n                                    if(!isUpper(k1[0]))\n\
    \                                        return false;\n                     \
    \           }\n                                else\n                        \
    \            return false;\n                            }\n                  \
    \          else\n                                return false;\n             \
    \           }\n                    }\n                }\n                else\n\
    \                {\n                    foreach(k1,v1; dict)\n               \
    \     {\n                        if(k1 != k)\n                        {\n    \
    \                        if(k1.length == 1)\n                            {\n \
    \                               if(isLetter(k1[0]))\n                        \
    \        {\n                                    if(!isLower(k1[0]))\n        \
    \                                return false;\n                             \
    \   }\n                                else\n                                \
    \    return false;\n                            }\n                          \
    \  else\n                                return false;\n                     \
    \   }\n                    }\n                }\n            }\n            else\n\
    \                return false;\n        }\n        else\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp896mktvi.d(22): Error: variable `k` cannot be read at compile\
    \ time\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp896mktvi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n\tif(dict\
    \ is null)\n\t\treturn false;\n\telse\n\t{\n\t\tbool is_all_upper = true;\n\t\t\
    foreach(k, v; dict)\n\t\t{\n\t\t\tif(!k.isUpper)\n\t\t\t{\n\t\t\t\tis_all_upper\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_all_upper)\n\t\t\treturn\
    \ true;\n\t\telse\n\t\t{\n\t\t\tbool is_all_lower = true;\n\t\t\tforeach(k, v;\
    \ dict)\n\t\t\t{\n\t\t\t\tif(!k.isLower)\n\t\t\t\t{\n\t\t\t\t\tis_all_lower =\
    \ false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn is_all_lower;\n\t\
    \t}\n\t}\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp112fieaj.d(25): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp112fieaj.d(38): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp112fieaj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.empty)\n        return false;\n\
    \    bool found_lower = false;\n    bool found_upper = false;\n    foreach(k;\
    \ dict.keys)\n    {\n        if(lower(k) == k)\n            found_lower = true;\n\
    \        else if(upper(k) == k)\n            found_upper = true;\n        else\n\
    \            return false;\n    }\n    return found_lower ? !found_upper : found_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgmfpha8.d(20): Error: no property `empty` for type `Nullable!(string[string])`\\\
    n/tmp/tmpfgmfpha8.d(26): Error: undefined identifier `lower`\\n/tmp/tmpfgmfpha8.d(28):\
    \ Error: undefined identifier `upper`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfgmfpha8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict.isNull)\
    \ return false;\n    bool upper = true;\n    foreach(ref const key, value; dict)\n\
    \    {\n        if(!isUpper(key[0]))\n        {\n            upper = false;\n\
    \            break;\n        }\n    }\n    if(upper) return true;\n    bool lower\
    \ = true;\n    foreach(ref const key, value; dict)\n    {\n        if(!isLower(key[0]))\n\
    \        {\n            lower = false;\n            break;\n        }\n    }\n\
    \    return lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimv9fyd5.d(22): Error: undefined identifier `isUpper`\\n/tmp/tmpimv9fyd5.d(32):\
    \ Error: undefined identifier `isLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpimv9fyd5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    else\n    {\n        size_t check = dict.length;\n\
    \        // writeln(check);\n        foreach(key, val; dict)\n        {\n    \
    \        // writeln(key);\n            // writeln(val);\n            if(key.toUpperCase()\
    \ == key || key.toLowerCase() == key)\n                check--;\n        }\n \
    \       // writeln(check);\n        if(check == 0)\n            return true;\n\
    \        else\n            return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3bbd3zu.d(28): Error: no property `toUpperCase` for type `string`\\\
    n/tmp/tmpp3bbd3zu.d(28): Error: no property `toLowerCase` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3bbd3zu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    return\
    \ false;\n}\n/*\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg86o_ljc.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg86o_ljc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict.isNull)\n\
    \        return false;\n    string[] keys = dict.get.keys;\n    bool in_lower_case\
    \ = true;\n    bool in_upper_case = true;\n    foreach(key; keys)\n    {\n   \
    \     in_lower_case = in_lower_case && (toLower(key) == key);\n        in_upper_case\
    \ = in_upper_case && (toUpper(key) == key);\n    }\n    return in_lower_case ||\
    \ in_upper_case;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n \
    \   assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqh2hle1.d(25): Error: undefined identifier `toLower`\\n/tmp/tmpmqh2hle1.d(26):\
    \ Error: undefined identifier `toUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmqh2hle1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    \n    foreach (k, v; dict)\n    {\n        auto s\
    \ = dict[k];\n        // int i = s[0];\n        // if (i == s[0].toUpper)\n  \
    \      //     return false;\n        // if (i == s[0].toLower)\n        //   \
    \  return false;\n        if (s[0].toUpper != s[0] && s[0].toLower != s[0])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50fs8ybr.d(29): Error: no property `toUpper` for type `immutable(char)`\\\
    n/tmp/tmp50fs8ybr.d(29): Error: no property `toLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50fs8ybr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    // type\
    \ error, array[Nullable!] cannot convert to array[T]\n    // \n    // \n    //\
    \ cannot implicitly convert expression (*dict.get) of type inout(Nullable!(dchar))\
    \ \n    // to inout(dchar)\n    if (dict.isNull)\n        return false;\n    //\
    \ auto k = dict.get.keys.front;\n    // auto v = dict.get.values.front;\n    //\
    \ auto [k, v] = dict.get.assocs.front;\n    import std.algorithm;\n    auto r\
    \ = dict.get.assocs.find!(kvp => (kvp.key[0] ^ ('a'.front)) && (kvp.key[0] ^ ('A'.front)));\n\
    \    if (r.empty)\n        return true;\n    else \n        return false;\n  \
    \  \n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lnnlt0a.d(29): Error: no property `assocs` for type `string[string]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lnnlt0a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool wasUpper = true;\n    int countUpper\
    \ = 0;\n    foreach (key; dict.keys) \n    {\n        if (isUpper(key[0])) \n\
    \        {\n            wasUpper = true;\n            countUpper++;\n        }\n\
    \        else \n        {\n            wasUpper = false;\n        }\n    }\n \
    \   if (countUpper == dict.length)\n        return true;\n    else if (!wasUpper)\n\
    \        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_kfy01tt.d(24): Error: undefined identifier `isUpper`, did you\
    \ mean variable `wasUpper`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_kfy01tt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
