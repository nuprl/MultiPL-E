name: HumanEval_76_is_simple_power
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
  \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n\
  \    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5,\
  \ 3) => false\n    \n*/\nbool is_simple_power(long x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    if (x == 1) return true;\n    if (n == 1) return false;\n  \
    \  bool is_negative = false;\n    if (x < 0)\n    {\n        is_negative = true;\n\
    \        x = -x;\n    }\n    if (n < 0)\n    {\n        n = -n;\n    }\n    while\
    \ (x % n == 0)\n    {\n        x /= n;\n    }\n    if (x != 1)\n    {\n      \
    \  return false;\n    }\n    if (is_negative)\n    {\n        n = -n;\n    }\n\
    \    return true;\n}", "{\n    // int a = x / n;\n    // int b = n;\n    // while\
    \ ( b > 1 )\n    // {\n    //     b /= n;\n    //     a /= n;\n    // }\n    //\
    \ return a == 1;\n    return x == pow(n, round(log(x) / log(n)));\n}", "{\n  \
    \  if (x == 1) \n    {\n        return true;\n    }\n    else if (n == 1) \n \
    \   {\n        return false;\n    }\n    return equal(log(x) / log(n), (long)\
    \ log(x) / log(n));\n}", "{\n    if (x < n)\n        return false;\n    else if\
    \ (x == n)\n        return true;\n    else if (x % n != 0)\n        return false;\n\
    \    else\n        return is_simple_power(x / n, n);\n}", "{\n    auto t = tuple(n,\
    \ 1);\n    if (x==n)\n        return true;\n    else if (x<n)\n        return\
    \ false;\n    else \n        return is_simple_power(x, exponent(t));\n}", "{\n\
    \    bool is_int = true;\n    double result = std.math.log(x) / std.math.log(n);\n\
    \    std.string.to!(\"int\")(result);\n    return is_int;\n}", "{\n    // Your\
    \ code goes here\n    // THE GIVEN SOLUTION IS NOT GOOD\n    /*\n    import std.math\
    \ : ln, round;\n    int nn;\n    real nnn;\n    real nx;\n    nx = ln(n);\n  \
    \  nnn = ln(x) / nx;\n    nn = round(nnn);\n    // nnn=pow(n, nn);\n    // nn=cast(int)log10(cast(real)x)/cast(int)log10(cast(real)n);\n\
    \    return nnn == cast(real)nn;\n    */\n    if (n == 1)\n        return false;\n\
    \    else if (x == 1)\n        return true;\n    else\n    {\n        while (x\
    \ % n == 0)\n        {\n            x /= n;\n        }\n        return x == 1;\n\
    \    }\n}", "{\n    double val;\n    val = log(x) / log(n);\n    return (val ==\
    \ (int)val);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    long p = 0;\n    while (x % n == 0)\n    {\n        x /= n;\n        p++;\n\
    \    }\n    if (p > 1 && x == 1) return true;\n    return false;\n}", "{\n   \
    \ if (n == 1) return x == 1;\n    return log(x) / log(n) == (int)(log(x) / log(n));\n\
    }", "{\n\treturn log(x) / log(n) == floor(log(x) / log(n));\n}", "{\n    if (x\
    \ == 1 && n == 1) return true;\n    if (x == 1) return false;\n    if (n == 1)\
    \ return false;\n    if (x < n) return false;\n    return x == pow(n, round(log(x)\
    \ / log(n)));\n}", "{\n    // just checking if n can divide x\n    if(x % n !=\
    \ 0)\n        return false;\n    \n    // if n divides x, we divide x by n and\
    \ check\n    // if dividing x by n further continues to divide x\n    // meaning\
    \ that if x is divisible by n, it is divisible by\n    // x / n, if this continues\
    \ to happen, x is an integer power of n\n    while(x % n == 0)\n    {\n      \
    \  x /= n;\n    }\n    \n    // if x has become 1, then we have divided x by n\
    \ and x / n\n    // until we got x = 1, which means that x is an integer power\
    \ of n\n    if(x == 1)\n        return true;\n    \n    // if x is not equal to\
    \ 1 and x is divisible by n, then x is a composite number\n    // which means\
    \ that it is not an integer power of n\n    return false;\n}", "{\n    if (x==1)\
    \ return true;\n    if (n==1) return false;\n    return (x%n==0 && is_simple_power(x/n,\
    \ n));\n}\n//100", "{\n    bool result = false;\n    if ( n == 0 )\n    {\n  \
    \      if ( x == 1 )\n            result = true;\n    }\n    else\n    {\n   \
    \     auto root = cast(long)log(x) / log(n);\n        if ( n ** root == x )\n\
    \            result = true;\n    }\n    return result;\n}", "{\n\twhile(x % n\
    \ == 0)\n\t{\n\t\tx /= n;\n\t}\n\treturn x == 1;\n}", "{\n    static bool is_power(long\
    \ x, long n)\n    {\n        bool result = false;\n        if (n <= 0)\n     \
    \       return false;\n        if (x == 1)\n            return true;\n       \
    \ if (x % n == 0)\n            result = is_power(x / n, n);\n        return result;\n\
    \    }\n    return is_power(x, n);\n}", "{\n   return pow(n, floor(log(x) / log(n)))\
    \ == x;\n}", "{\n\tif (n == 1 && x == 1)\n\t\treturn true;\n\tif (x == 1)\n\t\t\
    return false;\n\tif (is(typeof(n == pow(x, int(log(x) / log(n))))))\n\t\treturn\
    \ true;\n\treturn false;\n}", "{\n  long power = pow(n, int(log(x) / log(n)));\n\
    \  return x == power;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
