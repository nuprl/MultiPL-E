name: HumanEval_88_sort_array
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n    you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n    or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n\n    Note:\n    * don't change the given array.\n\n  \
  \  Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2,\
  \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6])\
  \ => [6, 5, 4, 3, 2, 1, 0]\n    \n*/\nlong[] sort_array(long[] array) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
  \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
  \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
  \ 21L, 14L, 11L]);\n}\nvoid main(){}"
completions: ["{\n    int i = 0;\n    int j = array.length - 1;\n    long temp;\n\
    \    bool even = (array[0] + array[array.length - 1]) % 2 == 0;\n    while (i\
    \ < j)\n    {\n        if (even)\n        {\n            if (array[i] % 2 == 0)\n\
    \            {\n                i++;\n            }\n            else if (array[j]\
    \ % 2 == 0)\n            {\n                j--;\n            }\n            else\n\
    \            {\n                temp = array[i];\n                array[i] = array[j];\n\
    \                array[j] = temp;\n                i++;\n                j--;\n\
    \            }\n        }\n        else\n        {\n            if (array[i] %\
    \ 2 == 0)\n            {\n                i++;\n            }\n            else\
    \ if (array[j] % 2 == 0)\n            {\n                j--;\n            }\n\
    \            else\n            {\n                temp = array[i];\n         \
    \       array[i] = array[j];\n                array[j] = temp;\n             \
    \   i++;\n                j--;\n            }\n        }\n    }\n    if (even)\n\
    \    {\n        array.sort!(x => \"descending\");\n    }\n    else\n    {\n  \
    \      array.sort!(x => \"ascending\");\n    }\n    return array;\n}", "{\n  \
    \  long first = array[0];\n    long last = array[array.length - 1];\n    bool\
    \ order = (first + last) % 2 == 0;", "{\n    // do the magic!\n    if (array.length\
    \ == 0)\n    {\n        return array;\n    }\n    if (array.length == 1)\n   \
    \ {\n        return array;\n    }\n    long first = array[0];\n    long last =\
    \ array[array.length - 1];\n    long sum = first + last;\n    if (sum % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => b - a);\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => a - b);\n    }\n    return array;\n}", "{\n    // your\
    \ code here...\n    if (array.length == 0) {\n        return array;\n    }\n \
    \   array.sort();\n    long[] result;\n    if (array[0] + array[$-1] % 2 == 0)\
    \ {\n        result = array.dup.reverse;\n    } else {\n        result = array.dup;\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    else if ((array[0]\
    \ + array[$-1]) % 2 == 0) \n    {\n        array = array.sort(std.numeric.functor.greater);\n\
    \        return array;\n    }\n    else\n    {\n        array = array.sort(std.numeric.functor.less);\n\
    \        return array;\n    }\n}", "{\n    if (array.length == 0) return array;\n\
    \    if (array.length == 1) return array;\n    if (array.length == 2)\n    {\n\
    \        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    else if (array[0] + array[array.length - 1]\
    \ % 2 == 0)\n    {\n        for (int i = 0; i < array.length - 1; i++)\n     \
    \   {\n            for (int j = i + 1; j < array.length; j++)\n            {\n\
    \                if (array[i] < array[j])\n                {\n               \
    \     long temp = array[i];\n                    array[i] = array[j];\n      \
    \              array[j] = temp;\n                }\n            }\n        }\n\
    \    }\n    else\n    {\n        for (int i = 0; i < array.length - 1; i++)\n\
    \        {\n            for (int j = i + 1; j < array.length; j++)\n         \
    \   {\n                if (array[i] > array[j])\n                {\n         \
    \           long temp = array[i];\n                    array[i] = array[j];\n\
    \                    array[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    return array;\n}", "{\n    if (array.length > 0)\n    {\n \
    \       if ((array[0] + array[$-1]) % 2 == 0)\n        {\n            return array.sort(std.less);\n\
    \        }\n        else\n        {\n            return array.sort(std.greater);\n\
    \        }\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n   \
    \     return array;\n    long[] res = new long[array.length];\n    long sum =\
    \ array[0] + array[$ - 1];\n    size_t j = (sum % 2 == 0) ? 0 : array.length -\
    \ 1;\n    for (size_t i = 0; i < array.length; i++)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            if (array[i] % 2 == 0)\n                res[j++]\
    \ = array[i];\n        }\n        else\n        {\n            if (array[i] %\
    \ 2 != 0)\n                res[j++] = array[i];\n        }\n    }\n    for (size_t\
    \ i = 0; i < array.length; i++)\n    {\n        if (i % 2 == 0)\n        {\n \
    \           if (array[i] % 2 != 0)\n                res[j++] = array[i];\n   \
    \     }\n        else\n        {\n            if (array[i] % 2 == 0)\n       \
    \         res[j++] = array[i];\n        }\n    }\n    return res;\n}", "{\n  \
    \  if (array.length == 0) return array;\n    array[] sorted;\n    long first_element\
    \ = array[0];\n    long last_element = array[array.length - 1];\n    sorted =\
    \ array.sort(myFunction);\n    if ((first_element + last_element) % 2 == 0) {\n\
    \      sorted = sorted.reverse();\n    }\n    return sorted;\n}", "{\n    if (array.length\
    \ > 0)\n    {\n        auto first = array[0];\n        auto last = array[$ - 1];\n\
    \        array.sort();\n        if ((first + last) % 2 == 0)\n        {\n    \
    \        array.reverse();\n        }\n    }\n    return array;\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    int odd = 1;\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n        odd = 0;\n    if (odd == 1)\n        return sort!((a,\
    \ b) => a < b)(array).dup;\n    else\n        return sort!((a, b) => a > b)(array).dup;\n\
    }", "{\n    if (array.length <= 1)\n        return array;\n    \n    size_t first\
    \ = 0;\n    size_t last = array.length - 1;\n    size_t k = (array[first] + array[last])\
    \ % 2;\n    size_t i = 0;\n    while (i < array.length)\n    {\n        if (i\
    \ != first && i != last)\n        {\n            if (array[i] % 2 == k)\n    \
    \        {\n                if (array[i] > array[first])\n                {\n\
    \                    long tmp = array[i];\n                    array[i] = array[first];\n\
    \                    array[first] = tmp;\n                    first++;\n     \
    \           }\n                else if (array[i] < array[last])\n            \
    \    {\n                    long tmp = array[i];\n                    array[i]\
    \ = array[last];\n                    array[last] = tmp;\n                   \
    \ last--;\n                }\n            }\n        }\n        i++;\n    }\n\
    \    \n    if (k == 0)\n        std.algorithm.reverse(array);\n    \n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    bool odd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (odd)\n        sort(array);\n    else\n        sort(array).reversed;\n\
    \    return array;\n}", "{\n    if (array.length < 2)\n        return array;\n\
    \    bool ascending = array[0] + array[$ - 1] % 2 == 0;\n    auto sort = (a, b)\
    \ =>\n    {\n        if (ascending)\n            return a > b;\n        else\n\
    \            return a < b;\n    };\n    auto result = array.dup;\n    sort(result);\n\
    \    return result;\n}", "{\n    if (array.length == 0) \n        return array;\n\
    \    else if (array.length == 1) \n        return array;\n    else if (array.length\
    \ == 2) \n        return (array[0] + array[1]) % 2 == 0 ? array.reverse() : array;\n\
    \    else \n    {\n        int[] arr = array.map!(x => (int)x);\n        for (int\
    \ i = 0; i < arr.length - 1; i++) \n        {\n            for (int j = 0; j <\
    \ arr.length - i - 1; j++) \n            {\n                int k = j + 1;\n \
    \               if ((arr[j] + arr[arr.length - 1]) % 2 == 0) \n              \
    \  {\n                    if (arr[j] < arr[k]) \n                    {\n     \
    \                   auto temp = arr[j];\n                        arr[j] = arr[k];\n\
    \                        arr[k] = temp;\n                    }\n             \
    \   } \n                else \n                {\n                    if (arr[j]\
    \ > arr[k]) \n                    {\n                        auto temp = arr[j];\n\
    \                        arr[j] = arr[k];\n                        arr[k] = temp;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ arr.map!(x => (long)x).array;\n    }\n}", "{\n    if (array.length == 0) \n\
    \        return array;\n    \n    else if (array.length == 1) \n        return\
    \ array;\n    \n    else \n    {\n        int first = array[0];\n        int last\
    \ = array[array.length - 1];\n        int sum = first + last;\n        \n    \
    \    auto cmp = (x, y) => (x > y) ? -1 : (x < y) ? 1 : 0;\n        \n        if\
    \ (isOdd(sum)) \n            array.sort!cmp();\n        \n        else if (isEven(sum))\
    \ \n            array.sort();\n        \n        return array;\n    }\n}\n```",
  "{\n    long[] ret = array.dup;\n    if(array.length > 0)\n    {\n        long idx\
    \ = 0;\n        long lastIdx = array.length - 1;\n        bool isOdd = ((array[idx]\
    \ + array[lastIdx]) % 2) == 1;\n        ret.sort!((x, y) => isOdd ? x > y : x\
    \ < y);\n    }\n    return ret;\n}\n ", "{\n    if (array.length == 0) \n    \
    \    return array;\n    if (array.length == 1) \n        return array;\n    if\
    \ (array.length > 1)\n    {\n        int first = array[0];\n        int last =\
    \ array[array.length - 1];\n        int odd = first + last;\n        int oddEven\
    \ = odd % 2;\n        int[] newArray = new int[array.length];\n        newArray\
    \ = array;\n        if (oddEven == 0)\n        {\n            newArray.sort(Compare.Descending);\n\
    \        }\n        else\n        {\n            newArray.sort(Compare.Ascending);\n\
    \        }\n        return newArray;\n    }\n}\n```\n### Javascript\n```\nfunction\
    \ sort_array(array) {\n    if (array.length == 0)\n        return array;\n   \
    \ if (array.length == 1)\n        return array;\n    if (array.length > 1)\n \
    \   {\n        var first = array[0];\n        var last = array[array.length -\
    \ 1];\n        var odd = first + last;\n        var oddEven = odd % 2;\n     \
    \   var newArray = [];\n        newArray = array;\n        if (oddEven == 0)\n\
    \        {\n            newArray.sort(function(a, b){return b-a});\n        }\n\
    \        else\n        {\n            newArray.sort(function(a, b){return a-b});\n\
    \        }\n        return newArray;\n    }\n}\n```\n### Ruby\n```\ndef sort_array(array)\n\
    \    if array.length == 0\n        return array\n    end\n    if array.length\
    \ == 1\n        return array\n    end\n    if array.length > 1\n        first\
    \ = array[0]\n        last = array[array.length - 1]\n        odd = first + last\n\
    \        oddEven = odd % 2\n        newArray = []\n        newArray = array\n\
    \        if oddEven == 0\n            newArray.sort! { |x,y| y <=> x }\n     \
    \   else\n            newArray.sort! { |x,y| x <=> y }\n        end\n        return\
    \ newArray", "{\n    array = array.dup;\n    sort(array);\n    if(array.length\
    \ == 0 || array.length == 1) \n        return array;\n    if((array[0] + array[$-1])\
    \ % 2 == 0) \n        reverse(array);\n    return array;\n}", "{\n    long[] ret;\n\
    \    if(array.length == 0)\n        return ret;\n    else if(array.length == 1)\n\
    \        return array;\n    else if(array.length > 1)\n    {\n        ret = array.dup;\n\
    \        if((array[0] + array[$-1]) % 2 == 0)\n            ret.sort!((a, b) =>\
    \ b - a);\n        else\n            ret.sort!((a, b) => a - b);\n    }\n    return\
    \ ret;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
