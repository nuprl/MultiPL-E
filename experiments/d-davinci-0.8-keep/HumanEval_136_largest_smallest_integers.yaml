name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n\
  \    largest_smallest_integers([0]) == (None, None)\n    \n*/\nTuple!(Nullable!(long),\
  \ Nullable!(long)) largest_smallest_integers(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    long largest = long.min;\n    long smallest = long.max;\n  \
    \  foreach(val; lst) \n    {\n        if(val >= 0) \n        {\n            if(val\
    \ < smallest) \n            {\n                smallest = val;\n            }\n\
    \        } \n        else \n        {\n            if(val > largest) \n      \
    \      {\n                largest = val;\n            }\n        }\n    }\n  \
    \  return tuple(largest == long.min ? null : largest, smallest == long.max ? null\
    \ : smallest);\n}", "{\n    if (lst.length == 0) \n    {\n        return tuple(null,\
    \ null);\n    }\n    long largest_neg = std.typecons.Nullable.null;\n    long\
    \ smallest_pos = std.typecons.Nullable.null;\n    foreach (long it; lst) \n  \
    \  {\n        if (it < 0) \n        {\n            if (std.typecons.Nullable.isNull(largest_neg))\
    \ \n            {\n                largest_neg = it;\n            }\n        \
    \    else \n            {\n                largest_neg = std.math.max(largest_neg,\
    \ it);\n            }\n        }\n        else if (it > 0) \n        {\n     \
    \       if (std.typecons.Nullable.isNull(smallest_pos)) \n            {\n    \
    \            smallest_pos = it;\n            }\n            else \n          \
    \  {\n                smallest_pos = std.math.min(smallest_pos, it);\n       \
    \     }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n}", "{\n\
    \    Nullable!(long) maxNeg = Nullable!(long).init;\n    Nullable!(long) minPos\
    \ = Nullable!(long).init;\n    for (int i = 0; i < lst.length; i++) \n    {\n\
    \        if (lst[i] < 0) \n        {\n            if (maxNeg is null || lst[i]\
    \ > maxNeg.get) \n            {\n                maxNeg = Nullable!(long).init(lst[i]);\n\
    \            }\n        }\n        else if (lst[i] > 0) \n        {\n        \
    \    if (minPos is null || lst[i] < minPos.get) \n            {\n            \
    \    minPos = Nullable!(long).init(lst[i]);\n            }\n        }\n    }\n\
    \    return tuple(maxNeg, minPos);\n}", "{\n    Nullable!(long) _highest = null;\n\
    \    Nullable!(long) _lowest = null;\n    foreach(l; lst)\n    {\n        if(l\
    \ > 0)\n        {\n            if(_lowest == null)\n            {\n          \
    \      _lowest = l;\n            }\n            else\n            {\n        \
    \        _lowest = min(_lowest, l);\n            }\n        }\n        else if(l\
    \ < 0)\n        {\n            if(_highest == null)\n            {\n         \
    \       _highest = l;\n            }\n            else\n            {\n      \
    \          _highest = max(_highest, l);\n            }\n        }\n    }\n   \
    \ return tuple(_highest, _lowest);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n\
    \    Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n \
    \   {\n        if(i < 0)\n        {\n            if(!largest.isInit || largest.value\
    \ < i)\n            {\n                largest.value = i;\n            }\n   \
    \     }\n        else if(i > 0)\n        {\n            if(!smallest.isInit ||\
    \ smallest.value > i)\n            {\n                smallest.value = i;\n  \
    \          }\n        }\n    }\n    return tuple(largest, smallest);\n}\n/*\n\
    \    This is the test function for the largest_smallest_integers() function above\n\
    */", "{\n    long max_neg = Nullable!(long).init;\n    long min_pos = Nullable!(long).init;\n\
    \    foreach(n; lst) \n    {\n        if (n < 0) \n        {\n            if (!max_neg.isNull)\n\
    \                max_neg = max(max_neg, n);\n            else\n              \
    \  max_neg = n;\n        }\n        else if (n > 0) \n        {\n            if\
    \ (!min_pos.isNull)\n                min_pos = min(min_pos, n);\n            else\n\
    \                min_pos = n;\n        }\n    }\n    return makeTuple(max_neg,\
    \ min_pos);\n}\nstatic assert(largest_smallest_integers([2, 4, 1, 3, 5, 7]) ==\
    \ (Nullable!(long).init, 1));\nstatic assert(largest_smallest_integers([]) ==\
    \ (Nullable!(long).init, Nullable!(long).init));\nstatic assert(largest_smallest_integers([0])\
    \ == (Nullable!(long).init, Nullable!(long).init));", "{\n    Nullable!(long)\
    \ largest_negative;\n    Nullable!(long) smallest_positive;\n    foreach(n; lst)\n\
    \    {\n        if(n < 0)\n        {\n            if(largest_negative.isNull ||\
    \ n > largest_negative.get)\n            {\n                largest_negative =\
    \ n;\n            }\n        }\n        else if(n > 0)\n        {\n          \
    \  if(smallest_positive.isNull || n < smallest_positive.get)\n            {\n\
    \                smallest_positive = n;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    auto largest\
    \ = Nullable!(long)();\n    auto smallest = Nullable!(long)();\n    foreach(ref\
    \ l; lst)\n    {\n        if(l < 0)\n        {\n            if(largest is null\
    \ || largest < l)\n                largest = l;\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest is null || smallest > l)\n        \
    \        smallest = l;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) ret = tuple(Nullable!(long)(),\
    \ Nullable!(long)());\n    Nullable!(long) min_ = Nullable!(long)();\n    Nullable!(long)\
    \ max_ = Nullable!(long)();\n    foreach(e; lst) \n    {\n        if(e < 0) \n\
    \        {\n            if(min_.isNull || e < min_.get) \n            {\n    \
    \            min_ = e;\n            }\n        }\n        else if(e > 0) \n  \
    \      {\n            if(max_.isNull || e > max_.get) \n            {\n      \
    \          max_ = e;\n            }\n        }\n    }\n    ret[0] = min_;\n  \
    \  ret[1] = max_;\n    return ret;\n}\n/*\n    Create a function that returns\
    \ a dict,\n    containing the frequency of each integer in a list.", "{\n    Nullable!(long)\
    \ largestNegative = Nullable!(long).init;\n    Nullable!(long) smallestPositive\
    \ = Nullable!(long).init;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n\
    \        {\n            if(largestNegative.isNull || largestNegative.get > elem)\n\
    \            {\n                largestNegative = Nullable!(long).init(elem);\n\
    \            }\n        }\n        else if(elem > 0)\n        {\n            if(smallestPositive.isNull\
    \ || smallestPositive.get > elem)\n            {\n                smallestPositive\
    \ = Nullable!(long).init(elem);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.bigint;\n    import std.bigint : BigInt;\n\
    \    Nullable!(long) largestNegativeInt = null;\n    Nullable!(long) smallestPositiveInt\
    \ = null;\n    // maxValue of long is 9223372036854775807, we don't want to go\
    \ over\n    BigInt maxValueLong = to!BigInt(2^63-1);\n    // 2 ^ 63 - 1 = -9223372036854775808\n\
    \    BigInt minValueLong = -maxValueLong - 1;\n    foreach(d; lst)\n    {\n  \
    \      if(d < 0)\n        {\n            if(largestNegativeInt is null)\n    \
    \        {\n                largestNegativeInt = d;\n            }\n         \
    \   else\n            {\n                if(d > largestNegativeInt)\n        \
    \        {\n                    largestNegativeInt = d;\n                }\n \
    \           }\n        }\n        else if(d > 0)\n        {\n            if(smallestPositiveInt\
    \ is null)\n            {\n                smallestPositiveInt = d;\n        \
    \    }\n            else\n            {\n                if(d < smallestPositiveInt)\n\
    \                {\n                    smallestPositiveInt = d;\n           \
    \     }\n            }\n        }\n    }\n    return tuple(largestNegativeInt,\
    \ smallestPositiveInt);\n}", "{\n    auto mi = min!((a, b) => a < b)(lst);\n \
    \   auto ma = max!((a, b) => a > b)(lst);\n    auto t = tuple(mi, ma);\n    return\
    \ t;\n}", "{\n    long maxNeg = long.min;\n    long minPos = long.max;\n    lst.each!(n\
    \ =>\n    {\n        if (n < 0)\n        {\n            maxNeg = max(maxNeg, n);\n\
    \        }\n        else if (n > 0)\n        {\n            minPos = min(minPos,\
    \ n);\n        }\n    });\n    return tuple(toNullable(maxNeg == long.min ? null\
    \ : maxNeg), toNullable(minPos == long.max ? null : minPos));\n}", "{\n    Nullable!(long)\
    \ maxNegative = null;\n    Nullable!(long) minPositive = null;\n    foreach(el;\
    \ lst) \n    {\n        if(el < 0)\n        {\n            if(maxNegative is null\
    \ || el > maxNegative)\n                maxNegative = el;\n        }\n       \
    \ else if(el > 0)\n        {\n            if(minPositive is null || el < minPositive)\n\
    \                minPositive = el;\n        }\n    }\n    return tuple(maxNegative,\
    \ minPositive);\n}\n/*\n    Create a function that returns a tuple (a, b), where\
    \ 'a' is\n    the smallest of positive integers, and 'b' is the largest\n    of\
    \ negative integers in a list.\n    If there is no negative or positive integers,\
    \ return them as None.", "{\n    Nullable!(long) largestNeg;\n    Nullable!(long)\
    \ smallestPos;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n\
    \            if(largestNeg is null || num > largestNeg)\n            {\n     \
    \           largestNeg = num;\n            }\n        }\n        else if(num >\
    \ 0)\n        {\n            if(smallestPos is null || num < smallestPos)\n  \
    \          {\n                smallestPos = num;\n            }\n        }\n \
    \   }\n    return tuple(largestNeg, smallestPos);\n}\n/*\n    Create a function\
    \ that takes a list as its argument and\n    returns a string with all items joined\
    \ by a given separator.\n    But for consecutive separators, add only one separator.",
  "{\n    auto neglst = filter!(a => a < 0)(lst);\n    auto poslst = filter!(a =>\
    \ a > 0)(lst);\n    long negmax, posmin;\n    negmax = neglst.empty ? Nullable!(long).init\
    \ : neglst.max;\n    posmin = poslst.empty ? Nullable!(long).init : poslst.min;\n\
    \    return tuple(negmax, posmin);\n}", "{\n    auto negative = max!(-a,-b)(lst.filter!(a\
    \ => a < 0));\n    auto positive = min!(a,b)(lst.filter!(a => a > 0));\n    return\
    \ tuple(negative, positive);\n}", "{\n    long min(long a, long b) { return a\
    \ < b ? a : b; }\n    long max(long a, long b) { return a > b ? a : b; }\n   \
    \ long minPos = long.max;\n    long maxNeg = long.min;\n    foreach(val; lst)\n\
    \    {\n        if (val > 0)\n            minPos = min(minPos, val);\n       \
    \ else if (val < 0)\n            maxNeg = max(maxNeg, val);\n    }\n    return\
    \ tuple(maxNeg == long.min ? null : maxNeg, minPos == long.max ? null : minPos);\n\
    }", "{\n    Nullable!(long) largestNeg;\n    Nullable!(long) smallestPos;\n  \
    \  int[] positiveInts = [];\n    int[] negativeInts = [];\n    foreach(l; lst)\
    \ \n    {\n        if(l > 0) \n        {\n            positiveInts ~= l;\n   \
    \     } \n        else if(l < 0) \n        {\n            negativeInts ~= l;\n\
    \        }\n    }\n    if(positiveInts.length != 0) \n    {\n        smallestPos\
    \ = positiveInts[0];\n        foreach(p; positiveInts) \n        {\n         \
    \   if(p < smallestPos) \n            {\n                smallestPos = p;\n  \
    \          }\n        }\n    } \n    else \n    {\n        smallestPos = Nullable!(long)(null);\n\
    \    }\n    if(negativeInts.length != 0) \n    {\n        largestNeg = negativeInts[0];\n\
    \        foreach(n; negativeInts) \n        {\n            if(n > largestNeg)\
    \ \n            {\n                largestNeg = n;\n            }\n        }\n\
    \    } \n    else \n    {\n        largestNeg = Nullable!(long)(null);\n    }\n\
    \    return tuple(largestNeg, smallestPos);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long).init;\n    Nullable!(long) smallestPositive = Nullable!(long).init;\n\
    \    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = std.math.min(smallestPositive,\
    \ i);\n            }\n        }\n        else if(i < 0)\n        {\n         \
    \   if(largestNegative.isNull)\n            {\n                largestNegative\
    \ = i;\n            }\n            else\n            {\n                largestNegative\
    \ = std.math.max(largestNegative, i);\n            }\n        }\n    }\n    return\
    \ Tuple!(Nullable!(long), Nullable!(long))(largestNegative, smallestPositive);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
