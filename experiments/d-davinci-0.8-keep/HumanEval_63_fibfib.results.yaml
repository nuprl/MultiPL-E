name: HumanEval_63_fibfib
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n <= 1) return 0;\n    if (n == 2) return 1;\n    long[2] cache\
    \ = [0, 1];\n    return fibfib(n, cache);\n}\nlong fibfib(long n, ref long[2]\
    \ cache) \n{\n    if (n < 2) return cache[n];\n    long next = cache[0] + cache[1]\
    \ + fibfib(n - 3, cache);\n    cache[0] = cache[1];\n    cache[1] = next;\n  \
    \  return next;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpo8k2rml2.d(27): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427f16]\\n??:? long tmpo8k2rml2.fibfib(long, ref long[2])\
    \ [0x427a9c]\\n??:? long tmpo8k2rml2.fibfib(long, ref long[2]) [0x427ac1]\\n??:?\
    \ long tmpo8k2rml2.fibfib(long, ref long[2]) [0x427ac1]\\n??:? long tmpo8k2rml2.fibfib(long)\
    \ [0x427a6d]\\n??:? void tmpo8k2rml2.__unittest_L33_C1() [0x427b36]\\n??:? void\
    \ tmpo8k2rml2.__modtest() [0x427be8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc25]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa69]\\n??:? runModuleUnitTests [0x42b9d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428328]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282af]\\n??:? _d_run_main [0x42821a]\\n??:? main [0x427bfb]\\\
    n??:? __libc_start_main [0xd7197554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return\
    \ 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    assert(n >= 0);\n    if (n < 2)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    int a = 0, b = 0, c = 1;\n    for (int i = 3; i <=\
    \ n; i++) \n    {\n        int d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n\
    \    long e = 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if\
    \ (n == 2) return 1;\n    n -= 2;\n    while (n > 0)\n    {\n        e = d;\n\
    \        d = c;\n        c = b + c + a;\n        a = b;\n        b = d;\n    \
    \    n--;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    return n <= 2 ? (n == 0 ? 0 : 1) : fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n}\n/*\nIn this puzzle, you're given a series of rectangles\
    \ of different heights. Write a function that can find the largest vertical stack\
    \ of consecutive rectangles you can make from the group. For example, if we're\
    \ given rectangles like so:\n    3 1 3 2 1\n    We can make stacks of size 3,\
    \ 1, 2 and 1:\n    3 1 3 2 1\n    3 1\n    2 1\n    2 1\n    This is a vertical\
    \ stack, so no rectangles may be \"horizontally\" or \"diagonally\" touching.\
    \ \n    # \n    You can assume that the rectangle sizes are always positive integers.\n\
    */\nstruct Height\n{\n    int value;\n    int index;\n};\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp60635l_j.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42818d]\\n??:? void tmp60635l_j.__unittest_L39_C1()\
    \ [0x427b3c]\\n??:? void tmp60635l_j.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c01f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42af2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430045]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ffd1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42af05]\\n??:? runModuleUnitTests [0x42bdf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428563]\\n??:? _d_run_main [0x4284ce]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x7cdd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    return n < 3 ? n - 1 : fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzd2z5r_w.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpzd2z5r_w.__unittest_L22_C1()\
    \ [0x427ac9]\\n??:? void tmpzd2z5r_w.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xde3e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    import std.conv : to;\n    long a = 0, b = 0, c = 1, t = 0;\n  \
    \  if (n <= 2)\n    {\n        return n - 1;\n    }\n    long start = 2;\n   \
    \ while (start < n)\n    {\n        t = a + b + c;\n        a = b;\n        b\
    \ = c;\n        c = t;\n        start += 1;\n    }\n    return t;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return\
    \ 0;\n    else if (n == 2)\n        return 1;\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    return n <= 2 ? n-1 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxeyp6os6.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpxeyp6os6.__unittest_L22_C1()\
    \ [0x427ac9]\\n??:? void tmpxeyp6os6.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x8a902554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n        return\
    \ 1;\n    if (n == 3) \n        return 2;\n    long[] arr = new long[n];\n   \
    \ arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 1;\n    for (int i = 3; i < n; i++)\
    \ \n    {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n   \
    \ return arr[n - 1];\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprt7vudki.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281cd]\\n??:? void tmprt7vudki.__unittest_L36_C1()\
    \ [0x427eb1]\\n??:? void tmprt7vudki.__modtest() [0x427f4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b05e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430798]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430275]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b035]\\n??:? runModuleUnitTests [0x42bfa1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428690]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428617]\\n??:? _d_run_main [0x428582]\\n??:? main [0x427f5f]\\\
    n??:? __libc_start_main [0x7e7d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    // Base case\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 1;\n    \n    // recursion case\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n <= 1) return 0;\n    if (n == 2) return 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    foreach (i; 2 .. n) \n    {\n        long t = c;\n      \
    \  c = a + b + c;\n        a = b;\n        b = t;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n\
    \    for (int i = 3; i <= n; i++)\n    {\n        d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n \
    \   alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n < 3)\n    {\n        return cast(long)max(0, n-1);\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1zjsuyn.d(22): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1zjsuyn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    // Implement your solution here\n    if (n == 0) return 0;\n   \
    \ if (n == 1) return 0;\n    if (n == 2) return 1;\n    else return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    //Your code here.\n    if (n<=1) return 0;\n    if (n==2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n  \
    \  alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    //We need to store values at the n-1, n-2, and n-3 indices, so we\
    \ use a tuple\n    Tuple!(long, long, long) previous = tuple(0, 0, 1);\n    long\
    \ fib = 0;\n    for(long i = 2; i <= n; i++)\n    {\n        //We start at 2 because\
    \ the previous tuple has already been initialized. We then add\n        // the\
    \ last 3 elements of the previous tuple and get our new value and set the tuple\n\
    \        // to its new value\n        fib = previous[0] + previous[1] + previous[2];\n\
    \        previous = tuple(previous[1], previous[2], fib);\n    }\n    return fib;\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpza09xdxi.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42973d]\\n??:? void tmpza09xdxi.__unittest_L33_C1()\
    \ [0x428751]\\n??:? void tmpza09xdxi.__modtest() [0x4291a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d2e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431c09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4320b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d2b9]\\n??:? runModuleUnitTests [0x42e1a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429c18]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429b9f]\\n??:? _d_run_main [0x429b0a]\\n??:? main [0x4291b7]\\\
    n??:? __libc_start_main [0x9a8c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n <= 1) \n        return 0;\n    if (n == 2) \n        return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n  \
    \  alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n\
    \    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n*/\nlong fibfib(long\
    \ n) \n{\n    if (n <= 1)\n        return 0;\n    if (n == 2)\n        return\
    \ 1;\n    long a = 0, b = 0, c = 1;\n    while (n-- > 2) \n    {\n        long\
    \ d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
