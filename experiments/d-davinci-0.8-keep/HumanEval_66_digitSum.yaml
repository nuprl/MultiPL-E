name: HumanEval_66_digitSum
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nTask\n    Write a function that\
  \ takes a string as input and returns the sum of the upper characters only'\n  \
  \  ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"\
  abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\")\
  \ => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") =>\
  \ 153\n    \n*/\nlong digitSum(string s) \n"
tests: "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\"\
  ) == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\"\
  ) == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\"\
  ) == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\"\
  \ How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n\
  }\nvoid main(){}"
completions: ["{\n    long result = 0;\n    for(size_t i = 0; i < s.length; i++)\n\
    \    {\n        if(isUpper(s[i]))\n        {\n            result += (s[i]-'0');\n\
    \        }\n    }\n    return result;\n}", "{\n    return s.filter!(a => a.isUpper).sum!(a\
    \ => a.ord);\n}", "{\n    long sum = 0;\n    foreach(c; s.toUpper())\n    {\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += c;\n    }\n    return sum;\n\
    }", "{\n    long result = 0;\n    foreach(char c; s) \n    {\n        result +=\
    \ to!int(c) * to!int(c);\n    }\n    return result;\n}", "{\n    return s.filter!(i\
    \ => (i >= 'A' && i <= 'Z')).map!(i => i - 64).sum;\n}", "{\n    return s.count!(c\
    \ => c >= 'A' && c <= 'Z')();\n}\n/*\nTask: Write a function that takes a number\
    \ as input and returns the number of digits it contains.\nExamples:\n        numOfDigits(0)\
    \ => 1\n        numOfDigits(12345) => 5\n        numOfDigits(1) => 1\n       \
    \ numOfDigits(-12345) => 5\n        numOfDigits(1.2) => 1", "{\n    int ret =\
    \ 0;\n    foreach(c; s)\n    {\n        ret += isUpper(c) ? c : 0;\n    }\n  \
    \  return ret;\n}", "{\n    long sum = 0;\n    foreach(c; s)\n    {\n        if(c.isUpper)\n\
    \            sum += c;\n    }\n    return sum;\n}", "{\n    return s.sum!(x =>\
    \ x >= 65 && x <= 90 ? x : 0);\n}", "{\n\tlong sum = 0;\n\tfor (in i = 0; i <\
    \ s.length; i++)\n\t{\n\t\tif (isUpper(s[i])) sum += s[i];\n\t}\n\treturn sum;\n\
    }", "{\n    return s.filter!( (c) => c.isUpper ).sum!((c) => c.to!long);\n}",
  "{\n    auto result = 0L;\n    auto c = 0;\n    foreach(c; s)\n    {\n        if(isUpper(c))\n\
    \        {\n            result += c;\n        }\n    }\n    return result;\n}",
  "{\n    long sum = 0;\n    foreach(int e; s)\n    {\n        if(e >= 65 && e <=\
    \ 90)\n            sum += e;\n    }\n    return sum;\n}", "{\n    long total =\
    \ 0;\n    foreach(element; s)\n    {\n        if (element >= 65 && element <=\
    \ 90)\n        {\n            total += element;\n        }\n    }\n    return\
    \ total;\n}", "{\n    return (s.sum!\"a.isUpper() ? a : 0\")();\n}", "{\n    enum\
    \ upper = 'A';\n    enum lower = 'a';\n    enum diff = lower - upper;\n    long\
    \ sum = 0;\n    foreach(c; s)\n    {\n        if(c >= 'A' && c <= 'Z')\n     \
    \   {\n            sum += c + diff;\n        }\n    }\n    return sum;\n}\n/*\n\
    task\n    Write a function that takes a string as input and returns the product\
    \ of the lower characters only.", "{\n    long ret = 0;\n    foreach(c; s)\n \
    \   {\n        if(c >= 'A' && c <= 'Z')\n            ret += c;\n    }\n    return\
    \ ret;\n}", "{\n    long sum = 0;\n    for(int i = 0; i < s.length; i++) {\n \
    \       if (s[i] >= 65 && s[i] <= 90)\n            sum += s[i];\n    }\n    return\
    \ sum;\n}", "{\n    long[] char_codes = s.map!(c => (long)c).filter!(c => c >=\
    \ 65 && c <= 90).array;\n    return char_codes.sum;\n}", "{\n    long result =\
    \ 0;\n    long asciiValue = 0;\n    foreach(char c; s)\n    {\n        asciiValue\
    \ = c;\n        if(asciiValue >= 65 && asciiValue <= 90)\n        {\n        \
    \    result += asciiValue;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
