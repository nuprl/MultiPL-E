name: HumanEval_26_remove_duplicates
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    import std.algorithm.comparison;\n\
    \    import std.algorithm.iteration;\n    import std.algorithm.searching;\n  \
    \  auto r = numbers.sort().array;\n    long[] removed = new long[0];\n    long[]\
    \ res = new long[0];\n    foreach(num; r)\n    {\n        if(removed.count(num)\
    \ == 0)\n        {\n            removed ~= num;\n            res ~= num;\n   \
    \     }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxj55fed.d(15): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxj55fed.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    immutable\
    \ list = std.algorithm.sort(numbers);\n    auto result = numbers.init;\n    foreach(num;\
    \ numbers)\n    {\n        if(num != numbers[$-1])\n        {\n            result\
    \ = result ~ num;\n        }\n    }\n    return result;\n}\nassert(remove_duplicates([2,\
    \ 3, 2, 3, 4]) == [2, 3, 4]);\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdd4l1tb4.d(23): Error: declaration expected, not `assert`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdd4l1tb4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(i; numbers) \n    {\n        if(!result.length || result[$-1] !=\
    \ i) \n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz2xeii5d.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpz2xeii5d.__unittest_L22_C1()\
    \ [0x4280a1]\\n??:? void tmpz2xeii5d.__modtest() [0x428150]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce17]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430689]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc81]\\n??:? runModuleUnitTests [0x42cbed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x428163]\\\
    n??:? __libc_start_main [0xcb3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    return numbers.dup.removeDuplicates;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnfunipb9.d(12): Error: no property `removeDuplicates` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfunipb9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    foreach(i;0..numbers.length)\n\
    \    {\n        for(int j=i+1;j<numbers.length;j++)\n        {\n            if(numbers[i]==numbers[j])\n\
    \            {\n                numbers[j]=1;\n            }\n        }\n    }\n\
    \    numbers=numbers.filter!(a=>a!=1);\n    return numbers;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpegbxd78g.d(14): Error: cannot implicitly convert expression `i\
    \ + 1LU` of type `ulong` to `int`\\n/tmp/tmpegbxd78g.d(22): Error: no property\
    \ `filter` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpegbxd78g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    // Insert\
    \ code here\n    long[] result = [];\n    auto s = sorted(numbers);\n    if (s.length\
    \ > 0)\n    {\n        result ~= s[0];\n        for (size_t i = 1; i < s.length;\
    \ i++)\n        {\n            if (s[i] != s[i-1])\n            {\n          \
    \      result ~= s[i];\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmrwrfysf.d(14): Error: undefined identifier `sorted`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrwrfysf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto numbers_set\
    \ = set(numbers);\n    return numbers_set.array;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgiitm1x_.d(12): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgiitm1x_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = numbers.filter!(a => numbers.count(a) == 1);\n    return result;\n}\n/*\n\
    \    You are given a list of non-negative integers.\n    Write a function which\
    \ returns the highest number of blocks you can make with their blocks.\n    Keep\
    \ in mind that you can rotate the blocks, but you cannot flip them.\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkxb01dlu.d(15): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxb01dlu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto numbersInSet\
    \ = new SortedRange(numbers);\n    return numbersInSet.moveOutput;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf0ormk9h.d(12): Error: undefined identifier `SortedRange`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0ormk9h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{ \n    return numbers.dup.removeDuplicates().array;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpci9ry3bp.d(12): Error: no property `removeDuplicates` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpci9ry3bp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = null;\n    foreach(long x; numbers)\n    {\n        if(x !in result)\n   \
    \     {\n            result ~= x;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xrxl793.d(15): Error: incompatible types for `(x) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xrxl793.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{ \n    // TODO:\
    \ implement\n    auto result = [];\n    foreach(n; numbers)\n    {\n        if\
    \ (numbers.count(n) > 1) \n            continue;\n        result ~= n;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo2cr3e73.d(16): Error: no property `count` for type `long[]`\\\
    n/tmp/tmpo2cr3e73.d(18): Error: cannot append type `long` to type `void[]`\\n/tmp/tmpo2cr3e73.d(20):\
    \ Error: cannot implicitly convert expression `result` of type `void[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2cr3e73.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    //return\
    \ auto result = numbers.array.dup;\n    long[] result = numbers.dup;\n    long[]\
    \ dupes = numbers.array.dup;\n    bool[] is_dupe = new bool[result.length];\n\
    \    foreach(long num1; result)\n    {\n        foreach(long num2; dupes)\n  \
    \      {\n            if(num1 == num2)\n            {\n                is_dupe[result.indexOf(num1)]\
    \ = true;\n            }\n        }\n    }\n    return result.array.dup.removeAll(is_dupe);\n\
    }\n/*\n Given a list of integers, return a list of those numbers, omitting any\
    \ that are between 13 and 19 inclusive.\n    >>> no_teen_sum([12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20])\n    [12, 20]\n    >>> no_teen_sum([1, 14, 1])\n    [1,\
    \ 1]\n*/\nlong[] no_teen_sum(long[] numbers)\n{\n    long[] result = new long[numbers.length];\n\
    \    foreach(long num; numbers)\n    {\n        if(num > 12 && num < 20)\n   \
    \     {\n            result ~= 0;\n        }\n        else\n        {\n      \
    \      result ~= num;\n        }\n    }\n    return result;\n}\n/*\n A perfect\
    \ number is a number for which the sum of its proper divisors is exactly equal\
    \ to the number. \n    For example, the sum of the proper divisors of 28 would\
    \ be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.\n    A\
    \ number n is called deficient if the sum of its proper divisors is less than\
    \ n and it is called abundant if this sum exceeds n.\n    As 12 is the smallest\
    \ abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written\
    \ as the sum of two abundant numbers is 24. \n    By mathematical analysis, it\
    \ can be shown that all integers greater than 28123 can be written as the sum\
    \ of two abundant numbers. However, this upper limit cannot be reduced any further\
    \ by analysis even though it is known that the greatest number that cannot\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4vrjvgvt.d(51): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vrjvgvt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{ \n\tauto count\
    \ = std.array.array!long.fromArray(numbers);\n\tauto out = new long[0];\n\t\n\t\
    foreach(i, e; numbers)\n\t{\n\t\tif(std.algorithm.count(count, e) == 1)\n\t\t\
    {\n\t\t\tout ~= e;\n\t\t}\n\t}\n\treturn out;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqe_lw56z.d(13): Error: basic type expected, not `out`\\n/tmp/tmpqe_lw56z.d(13):\
    \ Error: no identifier for declarator `_error_`\\n/tmp/tmpqe_lw56z.d(13): Error:\
    \ found `out` instead of statement\\n/tmp/tmpqe_lw56z.d(19): Error: found `out`\
    \ instead of statement\\n/tmp/tmpqe_lw56z.d(22): Error: expression expected, not\
    \ `out`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe_lw56z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tauto ret =\
    \ long[](0);\n\tforeach(i; numbers)\n\t{\n\t\tif(!ret.canFind(i))\n\t\t\tret ~=\
    \ i;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4e6gduib.d(12): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmp4e6gduib.d(12): Error: found `]` when expecting identifier following\
    \ `long`.\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e6gduib.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  return numbers.dup.removedups;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5k4rye8g.d(12): Error: no property `removedups` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5k4rye8g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    if(numbers.length\
    \ == 0) return numbers;\n    long[] result = numbers.dup;\n    result.sort;\n\
    \    auto itr = result.front;\n    auto last = itr;\n    int n = result.length;\n\
    \    for(int i = 1; i < n; i++) {\n        itr++;\n        if(result[i] != result[i-1])\
    \ {\n            *last = result[i];\n            last++;\n        }\n    }\n \
    \   result = result[0..(last - result.front)];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpha6wr1er.d(14): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpha6wr1er.d(15): Error: no property `front` for type `long[]`\\n/tmp/tmpha6wr1er.d(17):\
    \ Error: cannot implicitly convert expression `result.length` of type `ulong`\
    \ to `int`\\n/tmp/tmpha6wr1er.d(25): Error: no property `front` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha6wr1er.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    //make a new array\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        // go through the array\n        if(result.length == 0)\
    \ \n        {\n            // if it's empty, place the number\n            result\
    \ ~= numbers[i];\n        }\n        else \n        {\n            // if it's\
    \ not empty, check if it contains the number.\n            bool is_in_result =\
    \ false;\n            for(int j = 0; j < result.length; j++)\n            {\n\
    \                if(result[j] == numbers[i])\n                {\n            \
    \        is_in_result = true;\n                    break;\n                }\n\
    \            }\n            if(!is_in_result)\n            {\n               \
    \ result ~= numbers[i];\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpylpjqbbs.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpylpjqbbs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    //long[]\
    \ result = new long[];\n    size_t[] seen = new size_t[numbers.length];\n    size_t\
    \ count = 0;\n    foreach(ref long n; numbers)\n    {\n        //printf(\"%d %d\
    \ %d %d %d\\n\", n, seen[n], seen[n] == 0, count, result.length);\n        if(seen[n]\
    \ == 0)\n        {\n            seen[n] = 1;\n            count++;\n        }\n\
    \    }\n    long[] result = new long[count];\n    size_t index = 0;\n    foreach(ref\
    \ long n; numbers)\n    {\n        if(seen[n] == 1)\n        {\n            result[index]\
    \ = n;\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvedwnbg2.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428726]\\n??:? long[] tmpvedwnbg2.remove_duplicates(long[])\
    \ [0x42803f]\\n??:? void tmpvedwnbg2.__unittest_L36_C1() [0x42822e]\\n??:? void\
    \ tmpvedwnbg2.__modtest() [0x4283f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c89b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b72e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e68]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430945]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b705]\\n??:? runModuleUnitTests [0x42c671]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428b38]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428abf]\\n??:? _d_run_main [0x428a2a]\\n??:? main [0x428407]\\\
    n??:? __libc_start_main [0x3948b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    import std.bitmanip\
    \ : bitCount;\n    import std.array : array;\n    import std.datetime : StopWatch;\n\
    \    import std.conv : to;\n    import std.range : iota;\n    StopWatch sw = StopWatch(StopWatch.Ticks.system);\n\
    \    //OrderedSet dupFreeNumbers = new OrderedSet!(long)();\n    auto result =\
    \ new OrderedSet!(long)();\n    foreach(number; numbers)\n    {\n        if (result.insert(number))\n\
    \        {\n            //dupFreeNumbers ~= number;\n        }\n    }\n    writeln(\"\
    Dup Check Elapsed Ticks: \", sw.peek().ticks);\n    sw.reset();\n    //result\
    \ ~= iota(0, 5);\n    writeln(\"Insertion Elapsed Ticks: \", sw.peek().ticks);\n\
    \    /*\n    ulong checker = 0;\n    writeln(\"iota elapsed: \", sw.peek().ticks);\n\
    \    long[] dupFreeNumbers = new long[](numbers.length);\n    writeln(\"Insertion\
    \ Elapsed Ticks: \", sw.peek().ticks);\n    ulong checker = 0;\n    int index\
    \ = 0;\n    foreach(number; numbers)\n    {\n        ulong bitMask = 1 << (number\
    \ - 1);\n        if (!(checker & bitMask))\n        {\n            checker |=\
    \ bitMask;\n            dupFreeNumbers[index++] = number;\n        }\n    }\n\
    \    */\n    return result.array;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7yh6gdnk.d(12): Error: module `std.bitmanip` import `bitCount`\
    \ not found\\n/tmp/tmp7yh6gdnk.d(14): Deprecation: struct `std.datetime.StopWatch`\
    \ is deprecated - Use std.datetime.stopwatch.StopWatch.\\n/tmp/tmp7yh6gdnk.d(14):\
    \ Deprecation: struct `std.datetime.StopWatch` is deprecated - Use std.datetime.stopwatch.StopWatch.\\\
    n/tmp/tmp7yh6gdnk.d(17): Deprecation: struct `std.datetime.StopWatch` is deprecated\
    \ - Use std.datetime.stopwatch.StopWatch.\\n/tmp/tmp7yh6gdnk.d(17): Error: no\
    \ property `Ticks` for type `StopWatch`\\n/tmp/tmp7yh6gdnk.d(19): Error: template\
    \ instance `OrderedSet!long` template `OrderedSet` is not defined\\n/tmp/tmp7yh6gdnk.d(27):\
    \ Error: `writeln` is not defined, perhaps `import std.stdio;` is needed?\\n/tmp/tmp7yh6gdnk.d(30):\
    \ Error: `writeln` is not defined, perhaps `import std.stdio;` is needed?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yh6gdnk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
