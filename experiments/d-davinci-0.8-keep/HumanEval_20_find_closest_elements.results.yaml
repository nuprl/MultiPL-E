name: HumanEval_20_find_closest_elements
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ a = numbers[0];\n    float b = numbers[1];\n    float closest_delta = abs(a\
    \ - b);\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i+1; j < numbers.length; j++)\n        {\n            float delta = abs(numbers[i]\
    \ - numbers[j]);\n            if (delta < closest_delta)\n            {\n    \
    \            a = numbers[i];\n                b = numbers[j];\n              \
    \  closest_delta = delta;\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr5i9pxfz.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e65]\\n??:? void tmpr5i9pxfz.__unittest_L32_C1()\
    \ [0x428ed5]\\n??:? void tmpr5i9pxfz.__modtest() [0x4298d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb77]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da86]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43285c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432339]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da5d]\\n??:? runModuleUnitTests [0x42e94d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a328]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2af]\\n??:? _d_run_main [0x42a21a]\\n??:? main [0x4298e3]\\\
    n??:? __libc_start_main [0x80979554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{ \n\t//assert\
    \ (numbers.length >= 2);\n\t\n\tint n = numbers.length;\n\tfloat i_smallest_val\
    \ = numbers[0];\n\tfloat i_smallest_dif = 1000.0;\n\tfloat i_bigger_val = 0.0;\n\
    \t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfloat i_smallest_tmp = numbers[i];\n\
    \t\t\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tfloat i_bigger_tmp = numbers[j];\n\
    \t\t\t\n\t\t\tif (i_smallest_tmp != i_bigger_tmp)\n\t\t\t{\n\t\t\t\tfloat i_dif\
    \ = abs(i_smallest_tmp - i_bigger_tmp);\n\t\t\t\t\n\t\t\t\tif (i_dif < i_smallest_dif)\n\
    \t\t\t\t{\n\t\t\t\t\ti_smallest_dif = i_dif;\n\t\t\t\t\ti_smallest_val = i_smallest_tmp;\n\
    \t\t\t\t\ti_bigger_val = i_bigger_tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return tuple(i_smallest_val, i_bigger_val);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgfwd3uz2.d(16): Error: cannot implicitly convert expression `numbers.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgfwd3uz2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ a = 100000;\n    float b = 100000;\n    float[] copy = numbers.dup;\n    copy.sort;\n\
    \    for (int i = 0; i< copy.length - 1; i++) {\n        if (abs(copy[i] - copy[i+1])\
    \ < abs(a - b)) {\n            a = copy[i];\n            b = copy[i+1];\n    \
    \    }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpno9wmojy.d(17): Error: no property `sort` for type `float[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpno9wmojy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    assert(numbers.length\
    \ >= 2);\n    float diff = abs(numbers[0] - numbers[1]);\n    float low = numbers[0];\n\
    \    float high = numbers[1];\n    foreach(n; numbers)\n    {\n        foreach(m;\
    \ numbers)\n        {\n            float x = abs(n - m);\n            if(x < diff)\n\
    \            {\n                diff = x;\n                low = n;\n        \
    \        high = m;\n            }\n        }\n    }\n    return tuple(low, high);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsgw7i7qe.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f71]\\n??:? void tmpsgw7i7qe.__unittest_L33_C1()\
    \ [0x428f2d]\\n??:? void tmpsgw7i7qe.__modtest() [0x429928]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324b9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432968]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432445]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db69]\\n??:? runModuleUnitTests [0x42ea59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a434]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3bb]\\n??:? _d_run_main [0x42a326]\\n??:? main [0x42993b]\\\
    n??:? __libc_start_main [0xa9a73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = float.max;\n    float i0 = 0;\n    float i1 = 0;\n\
    \    // Approach using brute force\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            if (abs(numbers[i] - numbers[j]) < min_diff)\n            {\n\
    \                min_diff = abs(numbers[i] - numbers[j]);\n                i0\
    \ = numbers[i];\n                i1 = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(i0, i1);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwkon8he0.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f99]\\n??:? void tmpwkon8he0.__unittest_L33_C1()\
    \ [0x428f51]\\n??:? void tmpwkon8he0.__modtest() [0x42994c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432990]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43246d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db91]\\n??:? runModuleUnitTests [0x42ea81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a45c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3e3]\\n??:? _d_run_main [0x42a34e]\\n??:? main [0x42995f]\\\
    n??:? __libc_start_main [0xaa471554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    assert(numbers.length\
    \ >= 2);\n    float first = numbers[0];\n    float second = numbers[1];\n    foreach(n;\
    \ numbers)\n    {\n        if(abs(first - n) < abs(first - second))\n        {\n\
    \            second = n;\n        }\n    }\n    return tuple(min(first, second),\
    \ max(first, second));\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprgp4cq_e.d(24): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmprgp4cq_e.d(24): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprgp4cq_e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float[]\
    \ sorted = numbers.dup;\n    sort(sorted);\n    float distance = numbers[0] -\
    \ numbers[1];\n    size_t lower_index = 0;\n    for (size_t i = 0; i < sorted.length\
    \ - 1; i++) \n    {\n        if (abs(sorted[i] - sorted[i + 1]) < distance) \n\
    \        {\n            distance = abs(sorted[i] - sorted[i + 1]);\n         \
    \   lower_index = i;\n        }\n    }\n    return tuple(sorted[lower_index],\
    \ sorted[lower_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgbcxdi1.d(15): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgbcxdi1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    /*\n\
    \    int[] distances;\n    foreach(i,number; numbers)\n    {\n        distances\
    \ ~= abs(number - numbers[i+1]);\n    }\n    int min = distances[0];\n    int\
    \ minIndex = 0;\n    foreach(i,d; distances)\n    {\n        if(d < min)\n   \
    \     {\n            min = d;\n            minIndex = i;\n        }\n    }\n \
    \   return (numbers[minIndex], numbers[minIndex+1]);\n    */\n    float min =\
    \ 0;\n    float minIndex = 0;\n    foreach(i,number; numbers)\n    {\n       \
    \ if(i != numbers.length - 1)\n        {\n            float d = abs(number - numbers[i+1]);\n\
    \            if(d < min || min == 0)\n            {\n                min = d;\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return (numbers[minIndex],\
    \ numbers[minIndex+1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0p8194ye.d(46): Error: cannot implicitly convert expression `minIndex`\
    \ of type `float` to `ulong`\\n/tmp/tmp0p8194ye.d(46): Error: cannot implicitly\
    \ convert expression `minIndex + 1.00000F` of type `float` to `ulong`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p8194ye.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ minDistance = float.infinity;\n    Tuple!(float, float) result;\n    for (float\
    \ a; numbers) \n    {\n        for (float b; numbers) \n        {\n          \
    \  if (abs(a - b) < minDistance) \n            {\n                minDistance\
    \ = abs(a - b);\n                result = tuple(min(a, b), max(a, b));\n     \
    \       }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8haqerg.d(16): Error: found `)` when expecting `;` following\
    \ `for` condition\\n/tmp/tmpr8haqerg.d(18): Error: found `)` when expecting `;`\
    \ following `for` condition\\n/tmp/tmpr8haqerg.d(26): Error: found `}` when expecting\
    \ `)`\\n/tmp/tmpr8haqerg.d(29): Error: found `unittest` when expecting `)`\\n/tmp/tmpr8haqerg.d(39):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8haqerg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ max_num = 0;\n    float temp = 0;\n    float max_num2 = 0;\n    float temp2\
    \ = 0;\n    float temp3 = 0;\n    float max_num3 = 0;\n    float max_num4 = 0;\n\
    \    float temp4 = 0;\n    float temp5 = 0;\n    float max_num5 = 0;\n    float\
    \ temp6 = 0;\n    float max_num6 = 0;\n    float max_num7 = 0;\n    float temp7\
    \ = 0;\n    float temp8 = 0;\n    float max_num8 = 0;\n    float temp9 = 0;\n\
    \    float max_num9 = 0;\n    float max_num10 = 0;\n    float temp10 = 0;\n  \
    \  float temp11 = 0;\n    float max_num11 = 0;\n    float temp12 = 0;\n    float\
    \ max_num12 = 0;\n    float max_num13 = 0;\n    float temp13 = 0;\n    float temp14\
    \ = 0;\n    float max_num14 = 0;\n    float temp15 = 0;\n    float max_num15 =\
    \ 0;\n    float max_num16 = 0;\n    float temp16 = 0;\n    float temp17 = 0;\n\
    \    float max_num17 = 0;\n    float temp18 = 0;\n    float max_num18 = 0;\n \
    \   float max_num19 = 0;\n    float temp19 = 0;\n    float temp20 = 0;\n    float\
    \ max_num20 = 0;\n    float temp21 = 0;\n    float max_num21 = 0;\n    float max_num22\
    \ = 0;\n    float temp22 = 0;\n    float temp23 = 0;\n    float max_num23 = 0;\n\
    \    float temp24 = 0;\n    float max_num24 = 0;\n    float max_num25 = 0;\n \
    \   float temp25 = 0;\n    float temp26 = 0;\n    float max_num26 = 0;\n    float\
    \ temp27 = 0;\n    float max_num27 = 0;\n    float max_num28 = 0;\n    float temp28\
    \ = 0;\n    float temp29 = 0;\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxkhjysp_.d(71): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxkhjysp_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    int len\
    \ = numbers.length;\n    float minDist = 0;\n    Tuple!(float, float) minPair\
    \ = tuple(0.0, 0.0);\n    foreach(int i; 0 .. len - 1)\n    {\n        foreach(int\
    \ j; i + 1 .. len)\n        {\n            float dist = abs(numbers[i] - numbers[j]);\n\
    \            if(i == 0 && j == 1)\n            {\n                minDist = dist;\n\
    \                minPair = tuple(numbers[i], numbers[j]);\n            }\n   \
    \         else if(dist < minDist)\n            {\n                minDist = dist;\n\
    \                minPair = tuple(numbers[i], numbers[j]);\n            }\n   \
    \     }\n    }\n    return minPair;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuozpmqje.d(14): Error: cannot implicitly convert expression `numbers.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpuozpmqje.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{ \n    if (numbers.length\
    \ < 2) \n    {\n        throw new Exception(\"Parameter `numbers` must contain\
    \ at least two elements.\");\n    }\n    \n    double diff = 1e300; \n    Tuple!(float,\
    \ float) result;\n    size_t length = numbers.length; \n    for (size_t i = 0;\
    \ i < length - 1; i++) \n    { \n        for (size_t j = i + 1; j < length; j++)\
    \ \n        { \n            double absDiff = abs(numbers[i] - numbers[j]); \n\
    \            if (absDiff < diff) \n            { \n                diff = absDiff;\
    \ \n                result = tuple(numbers[i], numbers[j]); \n            } \n\
    \        } \n    } \n    return result; \n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6lrysonx.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a0e5]\\n??:? void tmp6lrysonx.__unittest_L36_C1()\
    \ [0x428ff5]\\n??:? void tmp6lrysonx.__modtest() [0x429ab8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f3e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e2f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432c1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4330cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432ba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e2cd]\\n??:? runModuleUnitTests [0x42f1bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a634]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a5bb]\\n??:? _d_run_main [0x42a526]\\n??:? main [0x429acb]\\\
    n??:? __libc_start_main [0xf418a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float[]\
    \ x = numbers;\n    float min = 0.0;\n    Tuple!(float, float) result;\n    foreach(index,\
    \ item1; x[1..x.length])\n    {\n        foreach(item2; x[index..x.length])\n\
    \        {\n            if(abs(item1 - item2) < min || min == 0.0)\n         \
    \   {\n                min = abs(item1 - item2);\n                result = tuple(item1,\
    \ item2);\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3unz3_q.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a00d]\\n??:? void tmpw3unz3_q.__unittest_L30_C1()\
    \ [0x428fb5]\\n??:? void tmpw3unz3_q.__modtest() [0x429a78]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f00b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df1a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432841]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432cf0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4327cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42def1]\\n??:? runModuleUnitTests [0x42ede1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a55c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a4e3]\\n??:? _d_run_main [0x42a44e]\\n??:? main [0x429a8b]\\\
    n??:? __libc_start_main [0xe38af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ min = numeric_limits!float.max;\n    Tuple!(float, float) result = null;\n \
    \   for (auto i = 0; i < numbers.length - 1; i++)\n    {\n        for (auto j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float v = abs(numbers[i]\
    \ - numbers[j]);\n            if (v < min)\n            {\n                min\
    \ = v;\n                result = tuple(numbers[i], numbers[j]);\n            }\n\
    \        }\n    }\n    return result;\n}\nstatic assert(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\nstatic assert(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptu9gq4hx.d(14): Error: template instance `numeric_limits!float`\
    \ template `numeric_limits` is not defined\\n/tmp/tmptu9gq4hx.d(15): Error: none\
    \ of the overloads of `this` are callable using argument types `(typeof(null))`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(668):\
    \        `std.typecons.Tuple!(float, float).Tuple.this(float, float)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(689):\
    \        `std.typecons.Tuple!(float, float).Tuple.__ctor(U, ulong n)(U[n] values)\
    \ if (n == Types.length && allSatisfy!(isBuildableFrom!U, Types))`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(715):\
    \        `std.typecons.Tuple!(float, float).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this),\
    \ U))`\\n/tmp/tmptu9gq4hx.d(30):        called from here: `find_closest_elements([1.00000F,\
    \ 2.00000F, 3.00000F, 4.00000F, 5.00000F, 2.2F])`\\n/tmp/tmptu9gq4hx.d(30):  \
    \      while evaluating: `static assert(find_closest_elements([1.00000F, 2.00000F,\
    \ 3.00000F, 4.00000F, 5.00000F, 2.2F]) == tuple(2.00000, 2.2))`\\n/tmp/tmptu9gq4hx.d(31):\
    \ Error: CTFE failed because of previous errors in `find_closest_elements`\\n/tmp/tmptu9gq4hx.d(31):\
    \        while evaluating: `static assert(find_closest_elements([1.00000F, 2.00000F,\
    \ 3.00000F, 4.00000F, 5.00000F, 2.00000F]) == tuple(2.00000, 2.00000))`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu9gq4hx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    assert(numbers.length\
    \ >= 2);\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp41sei0l5.d(15): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41sei0l5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ start = 0.0;\n    float end = 0.0;\n    float distance = 0.0;\n    float dist\
    \ = 0.0;\n    foreach(float n; numbers)\n    {\n        foreach(float m; numbers)\n\
    \        {\n            dist = n-m;\n            dist = std.math.abs(dist);\n\
    \            if(dist < distance)\n            {\n                distance = dist;\n\
    \                start = n;\n                end = m;\n            }\n       \
    \ }\n    }\n    return tuple(start, end);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppyzfl3en.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e15]\\n??:? void tmppyzfl3en.__unittest_L34_C1()\
    \ [0x428e81]\\n??:? void tmppyzfl3en.__modtest() [0x42987c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9c2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432798]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432275]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d999]\\n??:? runModuleUnitTests [0x42e889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1eb]\\n??:? _d_run_main [0x42a156]\\n??:? main [0x42988f]\\\
    n??:? __libc_start_main [0xc8fcc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\tif (numbers.length\
    \ < 2) return tuple(0.0, 0.0);\n\tfloat first = numbers[0];\n\tfloat second =\
    \ numbers[1];\n\t\n\tfloat smallest_diff = first - second;\n\t\n\tfor (uint i\
    \ = 0; i < numbers.length; i++)\n\t{\n\t\tfor (uint j = i + 1; j < numbers.length;\
    \ j++)\n\t\t{\n\t\t\tfloat temp = numbers[i] - numbers[j];\n\t\t\tif (temp < smallest_diff)\n\
    \t\t\t{\n\t\t\t\tsmallest_diff = temp;\n\t\t\t\tfirst = numbers[i];\n\t\t\t\t\
    second = numbers[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\treturn tuple(first, second);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyt4822fj.d(14): Error: cannot implicitly convert expression `tuple(0.00000,\
    \ 0.00000)` of type `Tuple!(double, double)` to `Tuple!(float, float)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyt4822fj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    float\
    \ smallerNumber = 0.0;\n    float largerNumber = 0.0;\n    float closestDifference\
    \ = 100000000.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n      \
    \  for (int j = 0; j < numbers.length; j++)\n        {\n            if (i == j)\n\
    \            {\n                continue;\n            }\n            float currentDifference\
    \ = abs(numbers[i] - numbers[j]);\n            if (currentDifference < closestDifference)\n\
    \            {\n                smallerNumber = numbers[i];\n                largerNumber\
    \ = numbers[j];\n                closestDifference = currentDifference;\n    \
    \        }\n        }\n    }\n    return tuple(smallerNumber, largerNumber);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjktc66ou.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e35]\\n??:? void tmpjktc66ou.__unittest_L36_C1()\
    \ [0x428ea1]\\n??:? void tmpjktc66ou.__modtest() [0x42989c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43237d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43282c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432309]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da2d]\\n??:? runModuleUnitTests [0x42e91d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a27f]\\n??:? _d_run_main [0x42a1ea]\\n??:? main [0x4298af]\\\
    n??:? __libc_start_main [0x47335554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    if (numbers.length\
    \ < 2)\n        throw new Exception(\"Numbers must be of length at least 2.\"\
    );\n    \n    auto smallest = numbers[0];\n    auto largest = numbers[0];\n  \
    \  auto smalldiff = abs(numbers[0] - numbers[1]);\n    foreach (i, e; numbers)\n\
    \    {\n        if (e < smallest)\n            smallest = e;\n        if (e >\
    \ largest)\n            largest = e;\n        auto diff = abs(e - numbers[i +\
    \ 1]);\n        if (diff < smalldiff)\n            smalldiff = diff;\n    }\n\
    \    return tuple(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvfui_6ew.d(26): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42a00e]\\n??:? std.typecons.Tuple!(float, float).Tuple\
    \ tmpvfui_6ew.find_closest_elements(float[]) [0x428e23]\\n??:? void tmpvfui_6ew.__unittest_L32_C1()\
    \ [0x428ef2]\\n??:? void tmpvfui_6ew.__modtest() [0x429930]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ef73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42de82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4327a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432c58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432735]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42de59]\\n??:? runModuleUnitTests [0x42ed49]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a420]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3a7]\\n??:? _d_run_main [0x42a312]\\n??:? main [0x429943]\\\
    n??:? __libc_start_main [0xde92e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n\
    */\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n    int length\
    \ = numbers.length;\n    if (length < 2) \n    {\n        throw new Exception(\"\
    array is too short\");\n    }\n    float min_distance = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) closest_tuple = tuple(numbers[0], numbers[1]);\n   \
    \ for (int i = 0; i < length; i++) \n    {\n        for (int j = i + 1; j < length;\
    \ j++) \n        {\n            float distance = abs(numbers[i] - numbers[j]);\n\
    \            if (distance < min_distance) \n            {\n                min_distance\
    \ = distance;\n                closest_tuple = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_tuple;\n}\n/*\n    Given\
    \ an input of text (a string), return the number of vowels (a, e, i, o, u) in\
    \ the text. You can assume\n    that the input string will contain only lowercase\
    \ letters.\n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"my\
    \ name is David\")\n    4\n*/\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpizufmkyo.d(14): Error: cannot implicitly convert expression `numbers.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpizufmkyo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
