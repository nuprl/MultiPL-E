name: HumanEval_35_max_element
language: d
results:
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    assert(l.length > 0);\n\
    \    long max_element = l[0];\n    foreach(n; l)\n    {\n        if (n > max_element)\n\
    \        {\n            max_element = n;\n        }\n    }\n    return max_element;\n\
    }\n/*\nReturn maximum element in the list.\n    >>> max_element([1, 2, 3])\n \
    \   3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
    \    \n*/\nfloat max_element(float[] l) \n{\n    assert(l.length > 0);\n    float\
    \ max_element = l[0];\n    foreach(n; l)\n    {\n        if (n > max_element)\n\
    \        {\n            max_element = n;\n        }\n    }\n    return max_element;\n\
    }\n/*\nReturn maximum element in the list.\n    >>> max_element([1, 2, 3])\n \
    \   3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
    \    \n*/\ndouble max_element(double[] l) \n{\n    assert(l.length > 0);\n   \
    \ double max_element = l[0];\n    foreach(n; l)\n    {\n        if (n > max_element)\n\
    \        {\n            max_element = n;\n        }\n    }\n    return max_element;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    */\nlong min_element(long[] l) \n{\n    assert(l.length > 0);\n    long min_element\
    \ = l[0];\n    foreach(n; l)\n    {\n        if (n < min_element)\n        {\n\
    \            min_element = n;\n        }\n    }\n    return min_element;\n}\n\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long result = l[0];\n\
    \    foreach(element; l)\n    {\n        if(element > result)\n        {\n   \
    \         result = element;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n    pure nothrow @safe @nogc\n\
    {\n    long highest;\n    foreach(v; l)\n    {\n        if(v > highest)\n    \
    \    {\n            highest = v;\n        }\n    }\n    return highest;\n}\n/*\n\
    Return the sum of all elements in the list.\n    >>> sum_elements([1, 2, 3])\n\
    \    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    155\n\
    */\nlong sum_elements(long[] l) \n    pure nothrow @safe @nogc\n{\n    long total\
    \ = 0;\n    foreach(v; l)\n    {\n        total += v;\n    }\n    return total;\n\
    }\n/*\nReturn mean value of all elements in the list.\n    >>> mean_value([1,\
    \ 2, 3])\n    2\n    >>> mean_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    13\n*/\nlong mean_value(long[] l) \n    pure nothrow @safe @nogc\n{\n   \
    \ long total = 0;\n    long count = 0;\n    foreach(v; l)\n    {\n        total\
    \ += v;\n        count++;\n    }\n    return total / count;\n}\n/*\nReturn median\
    \ value of all elements in the list.\n    >>> median_value([1, 2, 3])\n    2\n\
    \    >>> median_value([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n*/\nlong\
    \ median_value(long[] l) \n    pure nothrow @safe @nogc\n{\n    long[] sorted;\n\
    \    sorted = sort(l);\n    return sorted[$ / 2];\n}\n/*\nReturn standard deviation\
    \ of all elements in the list.\n    >>> std_deviation([1, 2, 3])\n    1\n    >>>\
    \ std_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    42\n\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn6odec7o.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn6odec7o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    // TODO\n    long max\
    \ = l[0];\n    for (long i=1; i< l.length; i++)\n    {\n        if (l[i] > max)\n\
    \        {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n\tlong ret = l[0];\n\tforeach(i;\
    \ l)\n\t{\n\t\tif(ret < i)\n\t\t\tret = i;\n\t}\n\treturn ret;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long i = 0;\n    long\
    \ max = l[0];\n    foreach(x; l) \n    {\n        if (x > max)\n        {\n  \
    \          max = x;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ foreach(el; l) \n    {\n        if (el > max) \n        {\n            max =\
    \ el;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = -999999;\n\
    \    foreach(e; l) {\n        if (e > max) {\n            max = e;\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ foreach(long e; l)\n    {\n        if (e > max)\n        {\n            max\
    \ = e;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long m = l[0];\n    foreach(l\
    \ ; e) \n    {\n        if (e > m)\n            m = e;\n    }\n    return m;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_91h0n0.d(13): Error: undefined identifier `e`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_91h0n0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ foreach(e; l)\n    {\n        if(e > max)\n        {\n            max = e;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ foreach(el; l)\n    {\n        if (el > max)\n        {\n            max = el;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max_element = l[0];\n\
    \tforeach(x; l)\n\t{\n\t\tif(x > max_element)\n\t\t{\n\t\t\tmax_element = x;\n\
    \t\t}\n\t}\n\treturn max_element;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long m = l[0];\n    foreach(i;\
    \ l) \n    {\n        if (i > m) \n        {\n            m = i;\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long m = l[0];\n    for\
    \ (long e in l)\n        if (e > m)\n            m = e;\n    return m;\n}\n/*\n\
    https://en.wikipedia.org/wiki/Linear_congruential_generator\nThe first five numbers\
    \ are: 60493, 34992, 58880, 23783, 85455.\nAll subsequent numbers repeat the cycle.\
    \ The period is 2^31.\nThe number returned is between 0 and 2^31-1.\n*/\nlong\
    \ MLCG(long a, long c, long m, long x){\n    x = (a * x + c) % m;\n    return\
    \ x;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv1wp8odg.d(13): Error: semicolon expected, not `in`\\n/tmp/tmpv1wp8odg.d(13):\
    \ Error: expression expected, not `in`\\n/tmp/tmpv1wp8odg.d(13): Error: found\
    \ `l` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpv1wp8odg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n \
    \       return -1;\n    long max = l[0];\n    foreach (i; l)\n        if (i >\
    \ max)\n            max = i;\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max=l[0];\n    for(int\
    \ i=1;i<l.length;i++)\n    {\n        if(l[i]>max)\n        {\n            max=l[i];\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n   \
    \ foreach(i; l)\n    {\n        if(i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n    in {\n        foreach (i,\
    \ n; l) {\n            assert(n > -100);\n            assert(n < 100);\n     \
    \   }\n    }\n    out (result) {\n        foreach (j, m; l) {\n            assert(m\
    \ > -100);\n            assert(m < 100);\n        }\n        assert(result > -100);\n\
    \        assert(result < 100);\n    }\n{\n    long x = l[0];\n    foreach (i,\
    \ n; l) {\n        if (n > x) {\n            x = n;\n        }\n    }\n    return\
    \ x;\n}\n/*\n    Returns an array of maximum elements from each row\n    of the\
    \ input 2d array.\n    >>> max_elements_in_row([[1, 2, 3], [5, 3, -5], [3, 9,\
    \ 0], [123, 1, -10]])\n    [3, 5, 9, 123]\n*/\nlong[] max_elements_in_row(long[][]\
    \ arr) \n    in {\n        foreach (i, arr1; arr) {\n            foreach (j, n;\
    \ arr1) {\n                assert(n > -100);\n                assert(n < 100);\n\
    \            }\n        }\n    }\n    out (result) {\n        foreach (k, m; result)\
    \ {\n            assert(m > -100);\n            assert(m < 100);\n        }\n\
    \    }\n{\n    long[] arr1 = new long[];\n    foreach (i, array; arr) {\n    \
    \    long max = max_element(array);\n        arr1 ~= max;\n    }\n    return arr1;\n\
    }\n/*\n    Returns an array of maximum elements from each column\n    of the input\
    \ 2d array.\n    >>> max_elements_in_col([[1, 2, 3], [5, 3, -5], [3, 9, 0], [123,\
    \ 1, -10]])\n    [123, 9, 3]\n*/\nlong[] max_elements_in_col(long[][] arr) \n\
    \    in {\n        foreach (i, arr1; arr) {\n\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1qr1w70.d(25): Error: missing `do { ... }` after `in` or `out`\\\
    n/tmp/tmpm1qr1w70.d(55): Error: missing `do { ... }` after `in` or `out`\\n/tmp/tmpm1qr1w70.d(73):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpm1qr1w70.d(80): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1qr1w70.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \n*/\nlong max_element(long[] l) \n{\n\treturn reduce!((long a,\
    \ long b) { return a > b ? a : b; })(l);\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpce1ui2z5.d(12): Error: template instance `reduce!((long a, long\
    \ b)\\n{\\nreturn a > b ? a : b;\\n}\\n)` template `reduce` is not defined\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpce1ui2z5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
