name: HumanEval_81_numerical_letter_grade
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester\
  \ and the teacher has to give the grades\n    to students. The teacher has been\
  \ making her own algorithm for grading.\n    The only problem is, she has lost the\
  \ code she used for grading.\n    She has given you a list of GPAs for some students\
  \ and you have to write \n    a function that can output a list of letter grades\
  \ using the following table:\n             GPA       |    Letter grade\n       \
  \       4.0                A+\n            > 3.7                A \n           \
  \ > 3.3                A- \n            > 3.0                B+\n            > 2.7\
  \                B \n            > 2.3                B-\n            > 2.0    \
  \            C+\n            > 1.7                C\n            > 1.3         \
  \       C-\n            > 1.0                D+ \n            > 0.7            \
  \    D \n            > 0.0                D-\n              0.0                E\n\
  \    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
  \ 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n"
tests: "unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
  \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
  \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
  \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n\
  }\nvoid main(){}"
completions: ["{\n    float[] gradeC = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0};\n    string[] letter = {\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n    string[]\
    \ result = new string[grades.length];\n    int index = 0;\n    foreach(var grade;\
    \ grades)\n    {\n        foreach(var i; 0..gradeC.length)\n        {\n      \
    \      if(grade >= gradeC[i])\n            {\n                result[index] =\
    \ letter[i];\n                break;\n            }\n        }\n        index++;\n\
    \    }\n    return result;\n}", "{\n  string[] letter_grades;\n  foreach(d; grades)\n\
    \  {\n    if(d >= 4.0)\n    {\n      letter_grades ~= \"A+\";\n    }\n    else\
    \ if(d > 3.7)\n    {\n      letter_grades ~= \"A\";\n    }\n    else if(d > 3.3)\n\
    \    {\n      letter_grades ~= \"A-\";\n    }\n    else if(d > 3.0)\n    {\n \
    \     letter_grades ~= \"B+\";\n    }\n    else if(d > 2.7)\n    {\n      letter_grades\
    \ ~= \"B\";\n    }\n    else if(d > 2.3)\n    {\n      letter_grades ~= \"B-\"\
    ;\n    }\n    else if(d > 2.0)\n    {\n      letter_grades ~= \"C+\";\n    }\n\
    \    else if(d > 1.7)\n    {\n      letter_grades ~= \"C\";\n    }\n    else if(d\
    \ > 1.3)\n    {\n      letter_grades ~= \"C-\";\n    }\n    else if(d > 1.0)\n\
    \    {\n      letter_grades ~= \"D+\";\n    }\n    else if(d > 0.7)\n    {\n \
    \     letter_grades ~= \"D\";\n    }\n    else if(d > 0.0)\n    {\n      letter_grades\
    \ ~= \"D-\";\n    }\n    else\n    {\n      letter_grades ~= \"E\";\n    }\n \
    \ }\n  return letter_grades;\n}\n/*\n------------------------------------------------------------------------------\n\
    \t\t\t\t\t\t\tTEST\n------------------------------------------------------------------------------\n\
    */", "{\n    return grades.map!((x) { return \"E\"; }).array;\n}", "{\n\tstring[]\
    \ grade_letters = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\"\
    , \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n\tstring[] grade_result = new string[grades.length];\n\
    \tforeach(int i, float g; grades)\n\t{\n\t\tint index = cast(int)((g - 0.7) *\
    \ 10);\n\t\tgrade_result[i] = grade_letters[index];\n\t}\n\treturn grade_result;\n\
    }\n/*\nA number is called tau number if it is divisible by the number of its digits.\n\
    \    Examples:\n    tau_numbers(108) ==> True (because 108 is divisible by 2 which\
    \ is number of its digits)\n    tau_numbers(1001) ==> False (because 1001 is not\
    \ divisible by 4 which is number of its digits)\n    tau_numbers(989898) ==> True\
    \ (because 989898 is divisible by 6 which is number of its digits)\n*/", "{\n\
    \    float grade;\n    string[string] grade_map = [\"4.0\": \"A+\", \"3.7\": \"\
    A\", \"3.3\": \"A-\", \"3.0\": \"B+\", \"2.7\": \"B\", \"2.3\": \"B-\", \"2.0\"\
    : \"C+\", \"1.7\": \"C\", \"1.3\": \"C-\", \"1.0\": \"D+\", \"0.7\": \"D\", \"\
    0.0\": \"D-\", \"-1.0\": \"E\"];\n    string[] result = [];\n    foreach(grade;\
    \ grades)\n    {\n        float rounded_grade = grade.round;\n        if(rounded_grade\
    \ > 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(rounded_grade\
    \ < 0.0)\n        {\n            result ~= \"E\";\n        }\n        else\n \
    \       {\n            result ~= grade_map[std.string.format(\"%.1f\", rounded_grade)];\n\
    \        }\n    }\n    return result;\n}", "{\n    //typeof(grades) is immutable\
    \ int[]\n    //    typeof(grades) is immutable float[]\n    //    typeof(grades)\
    \ is immutable double[]\n    //    typeof(grades) is immutable bool[]\n    //typeof(grades)\
    \ is immutable char[]\n    //typeof(grades) is immutable dchar[]\n    //typeof(grades)\
    \ is immutable string[]\n    //    typeof(grades) is immutable ubyte[]\n    //\
    \    typeof(grades) is immutable ushort[]\n    //    typeof(grades) is immutable\
    \ uint[]\n    //    typeof(grades) is immutable ulong[]\n    //    typeof(grades)\
    \ is immutable long[]\n    //    typeof(grades) is immutable byte[]\n    //  \
    \  typeof(grades) is immutable short[]\n    //    typeof(grades) is immutable\
    \ ucent[]\n    //    typeof(grades) is immutable cent[]\n    typeof(grades) is\
    \ immutable string[]", "{ \n    string[] letter_grades; \n    foreach(grade; grades)\
    \ \n    { \n        if(grade == 4.0) \n            letter_grades ~= \"A+\"; \n\
    \        else if(grade >= 3.7) \n            letter_grades ~= \"A\"; \n      \
    \  else if(grade >= 3.3) \n            letter_grades ~= \"A-\"; \n        else\
    \ if(grade >= 3.0) \n            letter_grades ~= \"B+\"; \n        else if(grade\
    \ >= 2.7) \n            letter_grades ~= \"B\"; \n        else if(grade >= 2.3)\
    \ \n            letter_grades ~= \"B-\"; \n        else if(grade >= 2.0) \n  \
    \          letter_grades ~= \"C+\"; \n        else if(grade >= 1.7) \n       \
    \     letter_grades ~= \"C\"; \n        else if(grade >= 1.3) \n            letter_grades\
    \ ~= \"C-\"; \n        else if(grade >= 1.0) \n            letter_grades ~= \"\
    D+\"; \n        else if(grade >= 0.7) \n            letter_grades ~= \"D\"; \n\
    \        else if(grade >= 0.0) \n            letter_grades ~= \"D-\"; \n     \
    \   else if(grade == 0.0) \n            letter_grades ~= \"E\"; \n    } \n   \
    \ return letter_grades; \n} ", "{\n    string[] result;\n    foreach(grade; grades)\
    \ \n    {\n        if(grade == 4.0) \n        {\n            result ~= \"A+\"\
    ;\n        }\n        else if(grade > 3.7) \n        {\n            result ~=\
    \ \"A\";\n        }\n        else if(grade > 3.3) \n        {\n            result\
    \ ~= \"A-\";\n        }\n        else if(grade > 3.0) \n        {\n          \
    \  result ~= \"B+\";\n        }\n        else if(grade > 2.7) \n        {\n  \
    \          result ~= \"B\";\n        }\n        else if(grade > 2.3) \n      \
    \  {\n            result ~= \"B-\";\n        }\n        else if(grade > 2.0) \n\
    \        {\n            result ~= \"C+\";\n        }\n        else if(grade >\
    \ 1.7) \n        {\n            result ~= \"C\";\n        }\n        else if(grade\
    \ > 1.3) \n        {\n            result ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0) \n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ > 0.7) \n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ > 0.0) \n        {\n            result ~= \"D-\";\n        }\n        else \n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }", "{\n    string[] letter_grades = new string[];\n    foreach(grade; grades)\n\
    \    {\n        if(grade == 4.0) letter_grades ~= \"A+\";\n        else if(grade\
    \ > 3.7) letter_grades ~= \"A\";\n        else if(grade > 3.3) letter_grades ~=\
    \ \"A-\";\n        else if(grade > 3.0) letter_grades ~= \"B+\";\n        else\
    \ if(grade > 2.7) letter_grades ~= \"B\";\n        else if(grade > 2.3) letter_grades\
    \ ~= \"B-\";\n        else if(grade > 2.0) letter_grades ~= \"C+\";\n        else\
    \ if(grade > 1.7) letter_grades ~= \"C\";\n        else if(grade > 1.3) letter_grades\
    \ ~= \"C-\";\n        else if(grade > 1.0) letter_grades ~= \"D+\";\n        else\
    \ if(grade > 0.7) letter_grades ~= \"D\";\n        else if(grade > 0.0) letter_grades\
    \ ~= \"D-\";\n        else letter_grades ~= \"E\";\n    }\n    return letter_grades;\n\
    }", "{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade\
    \ >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade\
    \ >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade\
    \ >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade\
    \ >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade\
    \ >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[grades.length];\n    foreach(i, grade;\
    \ grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n\
    \        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade\
    \ >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n  \
    \          result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i]\
    \ = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n \
    \       else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade\
    \ >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n   \
    \         result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n \
    \       else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n\
    \            result[i] = \"E\";\n    }\n    return result;\n}", "{\n    auto result\
    \ = grades.map!(grade => {\n        float gpa = float.init;\n        float flt\
    \ = float.init;\n        float.fromString(grade.to!string, &gpa, &flt);\n    \
    \    return gpa;\n    });\n    return result.map!(gpa => {\n        if (gpa >=\
    \ 4.0) return \"A+\";\n        if (gpa >= 3.7) return \"A\";\n        if (gpa\
    \ >= 3.3) return \"A-\";\n        if (gpa >= 3.0) return \"B+\";\n        if (gpa\
    \ >= 2.7) return \"B\";\n        if (gpa >= 2.3) return \"B-\";\n        if (gpa\
    \ >= 2.0) return \"C+\";\n        if (gpa >= 1.7) return \"C\";\n        if (gpa\
    \ >= 1.3) return \"C-\";\n        if (gpa >= 1.0) return \"D+\";\n        if (gpa\
    \ >= 0.7) return \"D\";\n        if (gpa >= 0.0) return \"D-\";\n        return\
    \ \"E\";\n    });\n}", "{\n  string[] final_array = new string[grades.length];\n\
    \  for(int i = 0; i < grades.length; i++)\n  {\n    if(grades[i] == 4.0)\n   \
    \ {\n      final_array[i] = \"A+\";\n    }\n    else if(grades[i] > 3.7)\n   \
    \ {\n      final_array[i] = \"A\";\n    }\n    else if(grades[i] > 3.3)\n    {\n\
    \      final_array[i] = \"A-\";\n    }\n    else if(grades[i] > 3.0)\n    {\n\
    \      final_array[i] = \"B+\";\n    }\n    else if(grades[i] > 2.7)\n    {\n\
    \      final_array[i] = \"B\";\n    }\n    else if(grades[i] > 2.3)\n    {\n \
    \     final_array[i] = \"B-\";\n    }\n    else if(grades[i] > 2.0)\n    {\n \
    \     final_array[i] = \"C+\";\n    }\n    else if(grades[i] > 1.7)\n    {\n \
    \     final_array[i] = \"C\";\n    }\n    else if(grades[i] > 1.3)\n    {\n  \
    \    final_array[i] = \"C-\";\n    }\n    else if(grades[i] > 1.0)\n    {\n  \
    \    final_array[i] = \"D+\";\n    }\n    else if(grades[i] > 0.7)\n    {\n  \
    \    final_array[i] = \"D\";\n    }\n    else if(grades[i] > 0.0)\n    {\n   \
    \   final_array[i] = \"D-\";\n    }\n    else if(grades[i] == 0.0)\n    {\n  \
    \    final_array[i] = \"E\";\n    }\n  }\n  return final_array;\n}\nstring[] numerical_letter_grade2(float[]\
    \ grades) \n{\n  string[] final_array = new string[grades.length];\n  for(int\
    \ i = 0", "{\n    string[] result = new string[grades.length];\n    for (int i\
    \ = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0) result[i]\
    \ = \"A+\";\n        else if (grades[i] > 3.7) result[i] = \"A\";\n        else\
    \ if (grades[i] > 3.3) result[i] = \"A-\";\n        else if (grades[i] > 3.0)\
    \ result[i] = \"B+\";\n        else if (grades[i] > 2.7) result[i] = \"B\";\n\
    \        else if (grades[i] > 2.3) result[i] = \"B-\";\n        else if (grades[i]\
    \ > 2.0) result[i] = \"C+\";\n        else if (grades[i] > 1.7) result[i] = \"\
    C\";\n        else if (grades[i] > 1.3) result[i] = \"C-\";\n        else if (grades[i]\
    \ > 1.0) result[i] = \"D+\";\n        else if (grades[i] > 0.7) result[i] = \"\
    D\";\n        else if (grades[i] > 0.0) result[i] = \"D-\";\n        else result[i]\
    \ = \"E\";\n    }\n    return result;\n}", "{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n   \
    \     string this_grade = \"\";\n        switch(grade)\n        {\n          \
    \  case 4.0: this_grade = \"A+\"; break;\n            case 3.7: this_grade = \"\
    A\"; break;\n            case 3.3: this_grade = \"A-\"; break;\n            case\
    \ 3.0: this_grade = \"B+\"; break;\n            case 2.7: this_grade = \"B\";\
    \ break;\n            case 2.3: this_grade = \"B-\"; break;\n            case\
    \ 2.0: this_grade = \"C+\"; break;\n            case 1.7: this_grade = \"C\";\
    \ break;\n            case 1.3: this_grade = \"C-\"; break;\n            case\
    \ 1.0: this_grade = \"D+\"; break;\n            case 0.7: this_grade = \"D\";\
    \ break;\n            case 0.0: this_grade = \"D-\"; break;\n            default:\
    \ if(grade < 0.7) this_grade = \"E\";\n                else if(grade > 4.0) this_grade\
    \ = \"A+\";\n                else this_grade = \"unknown\";\n        }\n     \
    \   letter_grades[i] = this_grade;\n    }\n    return letter_grades;\n}\nstring[]\
    \ grade_equation(float[] grades)\n{\n    string[] letter_grades = new string[grades.length];\n\
    \    float[] grade_lst = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0];\n    string[] letter_lst = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\"\
    , \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"];\n    foreach(int i, float grade;\
    \ grades)\n    {\n        string this_grade = \"\";\n        for(int j = 0; j\
    \ < grade_lst.length; j", "{\n    int len = grades.length;\n    string[] output\
    \ = new string[len];\n    foreach(i, val; grades) \n    {\n      if(val >= 3.7)\
    \ \n      {\n        output[i] = \"A\";\n      }\n      else if(val < 3.7 && val\
    \ >= 3.3) \n      {\n        output[i] = \"A-\";\n      }\n      else if(val <\
    \ 3.3 && val >= 3.0) \n      {\n        output[i] = \"B+\";\n      }\n      else\
    \ if(val < 3.0 && val >= 2.7) \n      {\n        output[i] = \"B\";\n      }\n\
    \      else if(val < 2.7 && val >= 2.3) \n      {\n        output[i] = \"B-\"\
    ;\n      }\n      else if(val < 2.3 && val >= 2.0) \n      {\n        output[i]\
    \ = \"C+\";\n      }\n      else if(val < 2.0 && val >= 1.7) \n      {\n     \
    \   output[i] = \"C\";\n      }\n      else if(val < 1.7 && val >= 1.3) \n   \
    \   {\n        output[i] = \"C-\";\n      }\n      else if(val < 1.3 && val >=\
    \ 1.0) \n      {\n        output[i] = \"D+\";\n      }\n      else if(val < 1.0\
    \ && val >= 0.7) \n      {\n        output[i] = \"D\";\n      }\n      else if(val\
    \ < 0.7 && val >= 0.0) \n      {\n        output[i] = \"D-\";\n      }\n     \
    \ else \n      {\n        output[i] = \"E\";\n      }\n    }\n    return output;\n\
    }", "{\n    float[] grade_to_letter = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0, 0.7, 0.0];\n    string[] letter_grade = [\"A+\", \"A\", \"A-\", \"\
    B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n \
    \   string[] results = [];\n    foreach(grade; grades)\n    {\n        int i =\
    \ 0;\n        while(i < grade_to_letter.length && grade > grade_to_letter[i])\n\
    \        {\n            i++;\n        }\n        results ~= letter_grade[i];\n\
    \    }\n    return results;\n}", "{\n    string[] grade = new string[grades.length];\n\
    \    foreach(i, n; grades)\n    {\n        if(n >= 4.0)\n            grade[i]\
    \ = \"A+\";\n        else if(n >= 3.7)\n            grade[i] = \"A\";\n      \
    \  else if(n >= 3.3)\n            grade[i] = \"A-\";\n        else if(n >= 3.0)\n\
    \            grade[i] = \"B+\";\n        else if(n >= 2.7)\n            grade[i]\
    \ = \"B\";\n        else if(n >= 2.3)\n            grade[i] = \"B-\";\n      \
    \  else if(n >= 2.0)\n            grade[i] = \"C+\";\n        else if(n >= 1.7)\n\
    \            grade[i] = \"C\";\n        else if(n >= 1.3)\n            grade[i]\
    \ = \"C-\";\n        else if(n >= 1.0)\n            grade[i] = \"D+\";\n     \
    \   else if(n >= 0.7)\n            grade[i] = \"D\";\n        else if(n >= 0.0)\n\
    \            grade[i] = \"D-\";\n        else\n            grade[i] = \"E\";\n\
    \    }\n    return grade;\n}", "{\n    float[] gpa_boundaries = [0.0, 0.7, 1.0,\
    \ 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0];\n    string[] letter_grade = [\"\
    E\", \"D-\", \"D+\", \"D\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\"\
    , \"A\", \"A+\"];\n    string[] results = new string[grades.length];\n    int\
    \ i;\n    foreach(gpa; grades) \n    {\n        i = 0;\n        while(gpa_boundaries[i]\
    \ < gpa) \n        {\n            i++;\n        }\n        results ~= letter_grade[i];\n\
    \    }\n    return results;\n}", "{\n    return grades.map!(a => a>3.7 ? \"A+\"\
    \ : a>3.3 ? \"A\" : a>3.0 ? \"A-\" : a>2.7 ? \"B+\" : a>2.3 ? \"B\" : a>2.0 ?\
    \ \"B-\" : a>1.7 ? \"C+\" : a>1.3 ? \"C\" : a>1.0 ? \"C-\" : a>0.7 ? \"D+\" :\
    \ a>0.0 ? \"D\" : a>0.0 ? \"D-\" : \"E\")();\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
