name: HumanEval_126_is_sorted
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    bool is_sorted = true;\n    long[] sorted\
    \ = lst.sort;\n    if (lst.dup.length != 0)\n    {\n        is_sorted = false;\n\
    \    }\n    else\n    {\n        for (int i = 0; i < lst.length; i++)\n      \
    \  {\n            if (lst[i] != sorted[i])\n            {\n                is_sorted\
    \ = false;\n            }\n        }\n    }\n    return is_sorted;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_rjwaog.d(23): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_rjwaog.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    int index = 0;\n    foreach(i; lst)\n    {\n\
    \        if(i == lst[index + 1])\n        {\n            return false;\n     \
    \   }\n        index++;\n    }\n    index = 0;\n    foreach(i; lst)\n    {\n \
    \       if(i > lst[index + 1])\n        {\n            return false;\n       \
    \ }\n        index++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp57tl46b2.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285ee]\\n??:? bool tmp57tl46b2.is_sorted(long[]) [0x427d6a]\\\
    n??:? void tmp57tl46b2.__unittest_L42_C1() [0x427e44]\\n??:? void tmp57tl46b2.__modtest()\
    \ [0x4282c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5bf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b452]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a94]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430571]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b429]\\n??:? runModuleUnitTests [0x42c395]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a00]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428987]\\n??:? _d_run_main [0x4288f2]\\n??:? main [0x4282d3]\\\
    n??:? __libc_start_main [0x2a06c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    bool isSorted = true;\n    long count = 0;\n\
    \    foreach(long elem; lst) \n    {\n        if(count == 0) \n        {\n   \
    \         count = elem;\n        } \n        else if(count > elem) \n        {\n\
    \            isSorted = false;\n            break;\n        }\n        count =\
    \ elem;\n    }\n    return isSorted;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplq3p6wdz.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmplq3p6wdz.__unittest_L39_C1()\
    \ [0x4280f9]\\n??:? void tmplq3p6wdz.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b35e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43047d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b335]\\n??:? runModuleUnitTests [0x42c2a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42890c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428893]\\n??:? _d_run_main [0x4287fe]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x64d1c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    long[] lst2 = lst;\n    lst2.sort();\n   \
    \ foreach(i,v; lst) {\n        if(v != lst2[i]) return false;\n    }\n    if(std.algorithm.uniq(lst2).length\
    \ != lst2.length) return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7iyswk9q.d(23): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp7iyswk9q.d(27): Error: undefined identifier `algorithm` in package `std`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7iyswk9q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    for (int i = 0; i < lst.length; i++) \n  \
    \  {\n        if (i == lst.length - 1)\n        {\n            return true;\n\
    \        }\n        else if (lst[i] < lst[i + 1])\n        {\n            continue;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    return false;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb07sr9uu.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpb07sr9uu.__unittest_L39_C1()\
    \ [0x42801f]\\n??:? void tmpb07sr9uu.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c557]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43057d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430509]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c1]\\n??:? runModuleUnitTests [0x42c32d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xe31a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    int n = lst.length;\n    for (int i = 0; i\
    \ < n - 1; i++)\n    {\n        if (lst[i] >= lst[i + 1])\n        {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt_haq0mi.d(22): Error: cannot implicitly convert expression `lst.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpt_haq0mi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    assert(lst.length > 0);\n    if (lst.length\
    \ == 1)\n        return true;\n    \n    long prev = lst[0];\n    foreach(e; lst[1..$])\n\
    \    {\n        if (e <= prev)\n            return false;\n        prev = e;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_6jv4351.d(22): Assertion failure\\\
    n----------------\\n??:? _d_assertp [0x42850d]\\n??:? bool tmp_6jv4351.is_sorted(long[])\
    \ [0x427d5b]\\n??:? void tmp_6jv4351.__unittest_L35_C1() [0x42806e]\\n??:? void\
    \ tmp_6jv4351.__modtest() [0x4282bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c673]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b506]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430699]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b48]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430625]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4dd]\\n??:? runModuleUnitTests [0x42c449]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ab4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a3b]\\n??:? _d_run_main [0x4289a6]\\n??:? main [0x4282cf]\\\
    n??:? __libc_start_main [0xe4f5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return true;\n\
    \    if (lst.length == 2)\n        return (lst[0] < lst[1]);\n    else\n    {\n\
    \        long[] tmp;\n        tmp.insertBack(lst[0]);\n        for (auto e : lst)\n\
    \        {\n            bool dup = false;\n            for (auto j : tmp)\n  \
    \          {\n                if (e == j)\n                {\n               \
    \     dup = true;\n                    break;\n                }\n           \
    \ }\n            if (!dup)\n                tmp.insertBack(e);\n        }\n  \
    \      if (tmp.length != lst.length)\n            return false;\n        else\n\
    \        {\n            long[] lst2 = lst.dup;\n            lst2.sort();\n   \
    \         bool ret = true;\n            for (int i = 0; i < lst.length; i++)\n\
    \            {\n                if (lst[i] != lst2[i])\n                {\n  \
    \                  ret = false;\n                    break;\n                }\n\
    \            }\n            return ret;\n        }\n    }\n}\nunittest\n{\n  \
    \  alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm5n7px3e.d(30): Error: no identifier for declarator `e`\\n/tmp/tmpm5n7px3e.d(30):\
    \ Error: expression expected, not `:`\\n/tmp/tmpm5n7px3e.d(30): Error: found `lst`\
    \ when expecting `;` following `for` condition\\n/tmp/tmpm5n7px3e.d(33): Error:\
    \ no identifier for declarator `j`\\n/tmp/tmpm5n7px3e.d(33): Error: expression\
    \ expected, not `:`\\n/tmp/tmpm5n7px3e.d(33): Error: found `tmp` when expecting\
    \ `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm5n7px3e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    if (lst.length == 1) return true;\n    for\
    \ (int i = 0; i < lst.length - 1; i++)\n    {\n        if (lst[i] >= lst[i + 1])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyqn3cj20.d(25): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42857e]\\n??:? bool tmpyqn3cj20.is_sorted(long[]) [0x427d53]\\\
    n??:? void tmpyqn3cj20.__unittest_L29_C1() [0x428002]\\n??:? void tmpyqn3cj20.__modtest()\
    \ [0x428250]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430575]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430501]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b9]\\n??:? runModuleUnitTests [0x42c325]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x428263]\\\
    n??:? __libc_start_main [0x83907554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    int n = lst.length;\n    if (n == 1) return\
    \ true;\n    bool is_unique(long[] lst)\n    {\n        int n = lst.length;\n\
    \        long[] res = new long[n];\n        foreach(int i, long x; lst)\n    \
    \    {\n            long count = 0;\n            foreach(long x2; lst)\n     \
    \       {\n                if (x == x2) count++;\n            }\n            if\
    \ (count > 1) return false;\n        }\n        return true;\n    }\n    if (!is_unique(lst))\
    \ return false;\n    foreach(int i, long x; lst)\n    {\n        if (x < lst[n-1])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw95ci43c.d(22): Error: cannot implicitly convert expression `lst.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpw95ci43c.d(26): Error: cannot implicitly\
    \ convert expression `lst.length` of type `ulong` to `int`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw95ci43c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    bool res = true;\n    ulong tmp = lst[0];\n\
    \    foreach(e; lst)\n    {\n        if(e < tmp)\n        {\n            res =\
    \ false;\n            break;\n        }\n        else\n        {\n           \
    \ tmp = e;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp5_7l_92u.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? bool tmp5_7l_92u.is_sorted(long[]) [0x427d2f]\\\
    n??:? void tmp5_7l_92u.__unittest_L38_C1() [0x427ff6]\\n??:? void tmp5_7l_92u.__modtest()\
    \ [0x428244]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c547]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43056d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b1]\\n??:? runModuleUnitTests [0x42c31d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x428257]\\\
    n??:? __libc_start_main [0x805e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    long[] sortedlst = lst.dup;\n    sort(sortedlst);\n\
    \    return sortedlst == lst;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp582azybf.d(23): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp582azybf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    long last = lst[0];\n    bool result = true;\n\
    \    bool dups = false;\n    bool first = true;\n    foreach(v; lst)\n    {\n\
    \        if(first)\n        {\n            first = false;\n            last =\
    \ v;\n            continue;\n        }\n        if(v == last)\n        {\n   \
    \         if(dups)\n            {\n                result = false;\n         \
    \       break;\n            }\n            dups = true;\n        }\n        else\
    \ if(v > last)\n        {\n            last = v;\n            dups = false;\n\
    \        }\n        else\n        {\n            result = false;\n           \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp85bht7hw.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285b6]\\n??:? bool tmp85bht7hw.is_sorted(long[]) [0x427d2b]\\\
    n??:? void tmp85bht7hw.__unittest_L56_C1() [0x42803a]\\n??:? void tmp85bht7hw.__modtest()\
    \ [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c587]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b41a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430539]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f1]\\n??:? runModuleUnitTests [0x42c35d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42894f]\\n??:? _d_run_main [0x4288ba]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0xbd0a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    // // create a copy of the list, so that it\
    \ can be modified\n    // auto copy = lst[];\n    // if (copy.length == 1) \n\
    \    // {\n    //     return true;\n    // }\n    // sort(copy);\n    // // remove\
    \ duplicates\n    // copy = copy.unique;\n    // // loop through and compare with\
    \ the original list\n    // foreach (index, value; copy) \n    // {\n    //  \
    \   if (value != lst[index]) \n    //     {\n    //         return false;\n  \
    \  //     }\n    // }\n    // return true;\n    // // or\n    // return lst.length\
    \ == 1 || lst.unique.sort == lst.sort;\n}\nunittest\n{\n    alias candidate =\
    \ is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1uc08sa4.d(20): Error: function `tmp1uc08sa4.is_sorted` has no\
    \ `return` statement, but is expected to return a value of type `bool`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uc08sa4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    for (size_t i = 0; i < lst.length - 1; i++)\
    \ \n    {\n        if (lst[i] == lst[i + 1]) return false;\n        if (lst[i]\
    \ > lst[i + 1]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgfjm5d_q.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285ce]\\n??:? bool tmpgfjm5d_q.is_sorted(long[]) [0x427d47]\\\
    n??:? void tmpgfjm5d_q.__unittest_L29_C1() [0x42804e]\\n??:? void tmpgfjm5d_q.__modtest()\
    \ [0x42829c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c59f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b432]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430551]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b409]\\n??:? runModuleUnitTests [0x42c375]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282af]\\\
    n??:? __libc_start_main [0x3b3a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    bool result = true;\n    if ( lst.length >\
    \ 1 ) \n    {\n        auto sorted_lst = lst.array.sort.array;\n        foreach(\
    \ i, idx; lst )\n        {\n            if ( lst[idx] != sorted_lst[idx] )\n \
    \           {\n                result = false;\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8i044unu.d(25): Error: no property `array` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8i044unu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    auto it = lst.length;\n    if (it < 2)\n \
    \       return true;\n    long[] result;\n    while (it > 0) \n    {\n       \
    \ it--;\n        if (lst[it] >= lst[it+1])\n            continue;\n        else\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpw2s9xjeo.d(29): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42856e]\\n??:? bool tmpw2s9xjeo.is_sorted(long[]) [0x427d76]\\\
    n??:? void tmpw2s9xjeo.__unittest_L36_C1() [0x427e28]\\n??:? void tmpw2s9xjeo.__modtest()\
    \ [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c53f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430565]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a9]\\n??:? runModuleUnitTests [0x42c315]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0xb7c50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    long pre = lst[0];\n    foreach(n; lst)\n\
    \    {\n        if(pre > n)\n            return false;\n        pre = n;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvsjbevee.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42856e]\\n??:? bool tmpvsjbevee.is_sorted(long[]) [0x427d2b]\\\
    n??:? void tmpvsjbevee.__unittest_L31_C1() [0x427ff2]\\n??:? void tmpvsjbevee.__modtest()\
    \ [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c53f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430565]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a9]\\n??:? runModuleUnitTests [0x42c315]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x4b806554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    int i = 1;\n    foreach(long item; lst)\n\
    \    {\n        if(item < lst[i - 1])\n            return false;\n        i++;\n\
    \    }\n    return true;\n}\n/*\n    In a nutshell, duple is a pair that\n   \
    \ can contain two elements of different types.\n    But a tuple can only contain\
    \ two elements of the same type.\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02pmat94.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02pmat94.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a list of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If list has more\
    \ than 1 duplicate of the same\n    number, return False. Assume no negative numbers\
    \ and only integers.\n\n    Examples\n    is_sorted([5]) \u279E True\n    is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \n*/\n\
    bool is_sorted(long[] lst) \n{\n    \n    // Check that the list is not empty.\n\
    \    if (lst.length <= 1) \n    {\n        return true;\n    }\n    \n    // Check\
    \ that the list does not contain duplicates.\n    HashSet!int unique = new HashSet!int();\n\
    \    foreach (i; lst) \n    {\n        if (unique.find(i)) \n        {\n     \
    \       return false;\n        }\n        unique.insert(i);\n    }\n    \n   \
    \ // Check that the list is sorted.\n    foreach (i; 0 .. lst.length - 1) \n \
    \   {\n        if (lst[i] > lst[i + 1]) \n        {\n            return false;\n\
    \        }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsuswszxu.d(30): Error: template instance `HashSet!int` template\
    \ `HashSet` is not defined\\n/tmp/tmpsuswszxu.d(30): Error: template instance\
    \ `HashSet!int` template `HashSet` is not defined\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsuswszxu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
