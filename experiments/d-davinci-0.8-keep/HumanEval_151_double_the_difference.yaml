name: HumanEval_151_double_the_difference
language: d
prompt: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of squares\
  \ of the numbers\n    in the list that are odd. Ignore numbers that are negative\
  \ or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 +\
  \ 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
  \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
  \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n"
tests: "unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
  \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
  \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
  \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n  \
    \  {\n        if (isOdd(lst[i]) && isInteger(lst[i]) && lst[i] > 0)\n        {\n\
    \            sum += (long)lst[i] * (long)lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "{\n    return 0;\n}", "{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++) \n    {\n        if (is(typeof(lst[i]) == int) && lst[i]\
    \ % 2 != 0 && lst[i] >= 0) \n        {\n            sum += (long)lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}", "{\n    long result = 0;\n    foreach(f;\
    \ lst) \n    {\n        if(f > 0 && f == trunc(f)) \n        {\n            result\
    \ += f % 2 ? pow(f, 2) : 0;\n        }\n    }\n    return result;\n}", "{\n  \
    \  long ans = 0;\n    foreach(float n; lst)\n    {\n        if(modf(n, 1) != 0\
    \ || n < 0) continue;\n        if(modf(n / 2, 1) != 0) ans += n * n;\n    }\n\
    \    return ans;\n}", "{\n    long n = 0;\n    foreach(float f; lst)\n    {\n\
    \        long i = cast(long)f;\n        if(i != f || i < 0)\n            continue;\n\
    \        if(i % 2 == 1)\n            n += i * i;\n    }\n    return n;\n}", "{\n\
    \    long sum = 0;\n    foreach(float el; lst)\n    {\n        if(!(el < 0) &&\
    \ (int)el == el && el % 2 == 1) \n        {\n            long squared = pow(el,\
    \ 2);\n            sum += squared;\n        }\n    }\n    return sum;\n}", "{\n\
    \    //good luck!\n    long sum = 0;\n    foreach(float n; lst)\n    {\n     \
    \   if(isOdd(n) && isFinite(n))\n        {\n            sum += n * n;\n      \
    \  }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(float v;\
    \ lst) {\n        if(isOdd(v) && v > 0) {\n            sum += (long)pow(v, 2);\n\
    \        }\n    }\n    return sum;\n}", "{\n  long sum = 0;\n  for (int i = 0;\
    \ i < lst.length; i++)\n  {\n    if (lst[i] > 0 && is(typeof(lst[i]) == int))\n\
    \    {\n      if (lst[i] % 2 == 1)\n      {\n        sum += lst[i] * lst[i];\n\
    \      }\n    }\n  }\n  return sum;\n}", "{\n    long sum = 0;\n    for (int i\
    \ = 0; i < lst.length; i++)\n    {\n        if(isOdd(lst[i]) && lst[i] > 0)\n\
    \        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "{\n  long sum = 0;\n  foreach(float num; lst)\n  {\n    if(isOdd(num)\
    \ && !isNegative(num))\n    {\n      sum += to!long(pow(num, 2));\n    }\n  }\n\
    \  return sum;\n}", "{\n    long ret = 0;\n    long temp = 0;\n    foreach(float\
    \ i; lst)\n    {\n        if(i % 2 == 1)\n        {\n            temp = cast(long)\
    \ i;\n            ret += temp * temp;\n        }\n    }\n    return ret;\n}",
  "{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        // Must use cast\
    \ to convert float to long as math.pow(long, long) does not exist.\n        if(cast(long)\
    \ x % 2 != 0 && x > 0)\n        {\n            sum += (long) math.pow(x, 2);\n\
    \        }\n    }\n    return sum;\n}", "{\n   int sum = 0;\n   foreach(float\
    \ i; lst)\n   {\n       if (i > 0 && i == int(i))\n       {\n           sum +=\
    \ i * i;\n       }\n   }\n   return sum;\n}", "{\n    long result = 0;\n    for\
    \ (float i in lst)\n    {\n        if (i > 0 && is(int i))\n        {\n      \
    \      if (i % 2 != 0)\n            {\n                result += i*i;\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    int sum = 0;\n   \
    \ foreach(float n; lst)\n    {\n        if(n > 0 && n == floor(n))\n        {\n\
    \            if(n % 2 == 1)\n            {\n                sum += sqr(n);\n \
    \           }\n        }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n\
    \    float d = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (modf(lst[i],\
    \ &d) == 0) {\n            if (lst[i] > 0) {\n                if (modf(lst[i]\
    \ / 2, &d) != 0) {\n                    sum += lst[i] * lst[i];\n            \
    \    }\n            }\n        }\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0;\n    foreach(item; lst)\n    {\n        if (item > 0)\n        {\n    \
    \        float f = sqrt(item);\n            if (f == floor(f))\n            {\n\
    \                sum += item;\n            }\n        }\n    }\n    return sum;\n\
    }", "{\n    if (lst.length == 0)\n        return 0;\n    \n    long res = 0;\n\
    \    foreach (e; lst) {\n        if (is(typeof(e) == float) && e > 0) {\n    \
    \        if (e % 2 == 1) {\n                res += e * e;\n            }\n   \
    \     }\n    }\n    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
