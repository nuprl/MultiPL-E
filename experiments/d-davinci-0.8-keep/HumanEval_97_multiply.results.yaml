name: HumanEval_97_multiply
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    return (int)(a % 10) * (int)(b % 10);\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5492sx0d.d(16): Error: C style cast illegal, use `cast(int)(a\
    \ % 10)`\\n/tmp/tmp5492sx0d.d(16): Error: C style cast illegal, use `cast(int)(b\
    \ % 10)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5492sx0d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    long al = abs(a);\n    long bl = abs(b);\n    auto as =\
    \ to!string(al);\n    auto bs = to!string(bl);\n    return (as[$-1] - '0') * (bs[$-1]\
    \ - '0');\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplq0iai_t.d(18): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmplq0iai_t.d(19): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplq0iai_t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    long aa = abs(a);\n    long bb = abs(b);\n    ulong aul\
    \ = cast(ulong)aa;\n    ulong bul = cast(ulong)bb;\n    ulong auld = ulong.max;\n\
    \    ulong buld = ulong.max;\n    while(aul > 0){\n        auld = aul%10;\n  \
    \      aul = aul/10;\n    }\n    while(bul > 0){\n        buld = bul%10;\n   \
    \     bul = bul/10;\n    }\n    if(auld == ulong.max || buld == ulong.max){\n\
    \        return 0;\n    }\n    return cast(long)(auld*buld);\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpul_igllx.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ecd]\\n??:? void tmpul_igllx.__unittest_L35_C1()\
    \ [0x427b1d]\\n??:? void tmpul_igllx.__modtest() [0x427c4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa86]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa5d]\\n??:? runModuleUnitTests [0x42b9c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42831c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282a3]\\n??:? _d_run_main [0x42820e]\\n??:? main [0x427c5f]\\\
    n??:? __libc_start_main [0x7bc37554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    long ar = a.abs;\n    long br = b.abs;\n    return (ar %\
    \ 10) * (br % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    auto s = to!string(a) * to!string(b);\n    return s[$-1]\
    \ - '0';\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ok8t1pw.d(16): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6ok8t1pw.d(16): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ok8t1pw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    auto product = a * b;\n    long unitDigitProduct = product\
    \ % 10;\n    long val = abs(unitDigitProduct);\n    long result = val * val;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4f2vcr94.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmp4f2vcr94.__unittest_L22_C1()\
    \ [0x427a85]\\n??:? void tmp4f2vcr94.__modtest() [0x427bb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bc7]\\\
    n??:? __libc_start_main [0x84262554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    return abs(a%10) * abs(b%10);\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    // Your code here\n    return a.digits.front*b.digits.front;\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpckv2niuw.d(17): Error: no property `digits` for type `long`\\\
    n/tmp/tmpckv2niuw.d(17): Error: no property `digits` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckv2niuw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    long productOfDigits;\n    long newProductOfDigits;\n  \
    \  long newProductOfDigits2;\n    long temp;\n    long negMulti = 0;\n    long\
    \ altMulti = 0;\n    long altMulti2 = 0;\n    int productOfDigitsLength;\n   \
    \ int length;\n    bool negative = false;\n    bool negative2 = false;\n    bool\
    \ negative3 = false;\n    bool negative4 = false;\n    if(a < 0)\n    {\n    \
    \    a = abs(a);\n        negative = true;\n    }\n    if(b < 0)\n    {\n    \
    \    b = abs(b);\n        negative2 = true;\n    }\n    auto digitsa = to!dchar(a);\n\
    \    auto digitsb = to!dchar(b);\n    productOfDigits = digitsa[$-1] * digitsb[$-1];\n\
    \    //writefln(\"productOfDigits = %d\", productOfDigits);\n    if(productOfDigits\
    \ > 9)\n    {\n        newProductOfDigits = productOfDigits / 10;\n        //writefln(\"\
    newProductOfDigits = %d\", newProductOfDigits);\n        productOfDigitsLength\
    \ = to!string(productOfDigits).length;\n        //writefln(\"productOfDigitsLength\
    \ = %d\", productOfDigitsLength);\n        length = to!string(newProductOfDigits).length;\n\
    \        //writefln(\"length = %d\", length);\n        if(length > 1)\n      \
    \  {\n            temp = newProductOfDigits % 10;\n            //writefln(\"temp\
    \ = %d\", temp);\n            altMulti = newProductOfDigits - temp;\n        \
    \    //writefln(\"altMulti = %d\", altMulti);\n            negMulti = (productOfDigitsLength\
    \ - 1) * temp;\n            //writefln(\"negMulti = %d\", negMulti);\n       \
    \     newProductOfDigits2 = newProductOfDigits / 10;\n            //writefln(\"\
    newProductOfDigits2 = %d\", newProductOfDigits2);\n            length = to!string(newProductOfDigits2).length;\n\
    \            //write\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7gx3p3q_.d(63): Error: found `unittest` instead of statement\\\
    n/tmp/tmp7gx3p3q_.d(76): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7gx3p3q_.d(76): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7gx3p3q_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    long p = a * b;\n    while(p > 10) {\n        p = ((int)p\
    \ % 10) * ((int)p / 10);\n    }\n    return p;\n}\nunittest\n{\n    alias candidate\
    \ = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9oksl_uj.d(18): Error: C style cast illegal, use `cast(int)p`\\\
    n/tmp/tmp9oksl_uj.d(18): Error: C style cast illegal, use `cast(int)p`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oksl_uj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    import std.array;\n    ulong ua = cast(ulong)a;\n    ulong\
    \ ub = cast(ulong)b;\n    uint[] uaArray = ua.toString().to!(uint[]);\n    uint[]\
    \ ubArray = ub.toString().to!(uint[]);\n    ulong uaMult = uaArray[uaArray.length-1];\n\
    \    ulong ubMult = ubArray[ubArray.length-1];\n    return cast(long)(uaMult *\
    \ ubMult);\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpco49cyp8.d(19): Error: no property `toString` for type `ulong`\\\
    n/tmp/tmpco49cyp8.d(20): Error: no property `toString` for type `ulong`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpco49cyp8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    if(a == 0 || b == 0)\n        return 0;\n    return (abs(a)\
    \ % 10) * (abs(b) % 10);\n}\nunittest\n{\n    alias candidate = multiply;\n\n\
    \    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    if(a==0||b==0)\n        return 0;\n    if(a<0&&b<0)\n  \
    \      return abs(a).to!long%10*abs(b).to!long%10;\n    if(a<0||b<0)\n       \
    \ return -abs(a).to!long%10*abs(b).to!long%10;\n    return a%10*b%10;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptitnopt3.d(19): Error: no property `to` for type `long`\\n/tmp/tmptitnopt3.d(19):\
    \ Error: no property `to` for type `long`\\n/tmp/tmptitnopt3.d(21): Error: no\
    \ property `to` for type `long`\\n/tmp/tmptitnopt3.d(21): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptitnopt3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    const int base = 10;\n    return (a % base) * (b % base);\n\
    }\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L,\
    \ 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L,\
    \ 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L,\
    \ 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg6gpn7lj.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpg6gpn7lj.__unittest_L19_C1()\
    \ [0x427ac4]\\n??:? void tmpg6gpn7lj.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x50981554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    return ((abs(a)%10)*(abs(b)%10));\n}\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    long aLastDigit = a % 10;\n    long bLastDigit = b % 10;\n\
    \    return aLastDigit * bLastDigit;\n}\nunittest\n{\n    alias candidate = multiply;\n\
    \n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) ==\
    \ 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpud7n2yj4.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpud7n2yj4.__unittest_L20_C1()\
    \ [0x427ab8]\\n??:? void tmpud7n2yj4.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0xd946c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    // write your code here\n    long product = 0;\n    if(a\
    \ != 0 && b != 0)\n    {\n        product = 1;\n        long x = a.abs;\n    \
    \    long y = b.abs;\n        while(x > 1)\n        {\n            product *=\
    \ x % 10;\n            x /= 10;\n        }\n        while(y > 1)\n        {\n\
    \            product *= y % 10;\n            y /= 10;\n        }\n        return\
    \ product;\n    }\n    return product;\n}\nunittest\n{\n    alias candidate =\
    \ multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6oyfzs2j.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ecd]\\n??:? void tmp6oyfzs2j.__unittest_L37_C1()\
    \ [0x427b1d]\\n??:? void tmp6oyfzs2j.__modtest() [0x427c4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa86]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa5d]\\n??:? runModuleUnitTests [0x42b9c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42831c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282a3]\\n??:? _d_run_main [0x42820e]\\n??:? main [0x427c5f]\\\
    n??:? __libc_start_main [0xaee64554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n    return a * b % 10;\n}\n/*\nIf we were to set up a Tic-Tac-Toe\
    \ game, we would want to know whether the board's current state is solved, wouldn't\
    \ we? \nOur goal is to create a function that will check that for us!\nAssume\
    \ that the board comes in the form of a 3x3 array, where the value is 0 if a spot\
    \ is empty, 1 if it is an \"X\", or 2 if it is an \"O\", like so:\n[[0, 0, 1],\n\
    \ [0, 1, 2],\n [2, 1, 0]]\nWe want our function to return:\n-1 if the board is\
    \ not yet finished (there are empty spots),\n1 if \"X\" won,\n2 if \"O\" won,\n\
    0 if it's a cat's game (i.e. a draw).\nYou may assume that the board passed in\
    \ is valid in the context of a game of Tic-Tac-Toe.\n*/\nunittest\n{\n    alias\
    \ candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L,\
    \ 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L,\
    \ -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L,\
    \ 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L,\
    \ 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc1nsszwx.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dd5]\\n??:? void tmpc1nsszwx.__unittest_L32_C1()\
    \ [0x427a3d]\\n??:? void tmpc1nsszwx.__modtest() [0x427b54]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bafb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb21]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a965]\\n??:? runModuleUnitTests [0x42b8d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428224]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281ab]\\n??:? _d_run_main [0x428116]\\n??:? main [0x427b67]\\\
    n??:? __libc_start_main [0xb690a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n\t// great example of using nummbers as strings\n    // take\
    \ digit from the end of the number\n    // multiply it by the other numbers unit\
    \ digit\n    // and return the product\n    // NOTE: you could also just convert\
    \ a and b to strings\n    // then take the last digits and convert them to ints\n\
    \    // and do math but then you have to convert back to strings\n    // this\
    \ way is much easier\n    \n    // if a or b is negative, make them positive\n\
    \    // so we can take the last digit\n    if(a < 0)\n        a = -a;\n    if(b\
    \ < 0)\n        b = -b;\n    \n    // get the last digit of a, take the mod of\
    \ a by 10\n    a = a % 10;\n    // get the last digit of b, take the mod of b\
    \ by 10\n    b = b % 10;\n    \n    // now we have the last digits of a and b\n\
    \    // so multiply them and return the product\n    return a * b;\n}\nunittest\n\
    {\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nComplete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \n*/\nlong multiply(long\
    \ a, long b) \n{\n  long res = a*b;\n  return abs(res % 10);\n}\nunittest\n{\n\
    \    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n\
    \    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) ==\
    \ 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L)\
    \ == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L,\
    \ 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfqof10h1.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpfqof10h1.__unittest_L19_C1()\
    \ [0x427a81]\\n??:? void tmpfqof10h1.__modtest() [0x427bb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bc3]\\\
    n??:? __libc_start_main [0xac5f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
