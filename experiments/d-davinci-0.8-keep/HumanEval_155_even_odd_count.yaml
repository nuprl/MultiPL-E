name: HumanEval_155_even_odd_count
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven an integer. return a tuple\
  \ that has the number of even and odd digits respectively.\n\n     Example:\n  \
  \      even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n\
  \    \n*/\nTuple!(long, long) even_odd_count(long num) \n"
tests: "unittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L)\
  \ == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L)\
  \ == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L)\
  \ == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L)\
  \ == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}"
completions: ["{\n    assert(num != 0, \"The input cannot be zero.\");\n    num =\
    \ abs(num);\n    Tuple!(long, long) counts = tuple(0, 0);\n    while (num > 0)\
    \ {\n        if (num % 2 == 0) {\n            ++counts[0];\n        } else {\n\
    \            ++counts[1];\n        }\n        num /= 10;\n    }\n    return counts;\n\
    }", "{\n    Tuple!(long, long) tp = tuple(0, 0);\n    while(num)\n    {\n    \
    \    if(abs(num % 10) % 2 == 0)\n            tp[0]++;\n        else\n        \
    \    tp[1]++;\n        num /= 10;\n    }\n    return tp;\n}", "{\n    auto num_digits\
    \ = num.abs.to!string.length;\n    long even_digits = 0, odd_digits = 0;\n   \
    \ foreach(i; 0..num_digits)\n    {\n        if (num.abs.to!string[i].to!long %\
    \ 2 == 0)\n            even_digits++;\n        else\n            odd_digits++;\n\
    \    }\n    return tuple(even_digits, odd_digits);\n}", "{\n    long even = 0;\n\
    \    long odd = 0;\n    num = abs(num);\n    while(num > 0)\n    {\n        if(num\
    \ % 2 == 0)\n            even++;\n        else\n            odd++;\n        num\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n  // the number of even,\
    \ odd digits\n  auto tup = tuple(0L, 0L);", "{\n    auto evenCount = 0L;\n   \
    \ auto oddCount = 0L;\n    foreach(digit; num.digits()) \n    {\n        if (digit\
    \ % 2 == 0) evenCount++;\n        else oddCount++;\n    }\n    return tuple(evenCount,\
    \ oddCount);\n}\n \n/*\nGiven an array of integers. Return the array of number\
    \ of even and odd digits respectively.", "{\n    enum evenDigits = 0;\n    enum\
    \ oddDigits = 0;\n    foreach(char c; num.to!string())\n    {\n        if(c.to!int\
    \ % 2 == 0)\n            evenDigits++;\n        else\n            oddDigits++;\n\
    \    }\n    return tuple(evenDigits, oddDigits);\n}", "{\n    long even = 0, odd\
    \ = 0;\n    while (num != 0) {\n        if ((num & 1) == 0) even++;\n        else\
    \ odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\t\
    auto evens, odds;\n\twhile (num)\n\t{\n\t\tif (num % 2 == 0)\n\t\t\tevens++;\n\
    \t\telse\n\t\t\todds++;\n\t\tnum /= 10;\n\t}\n\treturn tuple(evens, odds);\n}",
  "{\n  long even_count = 0;\n  long odd_count = 0;\n  long n = abs(num);\n  while(n\
    \ != 0)\n  {\n    long digit = n % 10;\n    if(digit % 2 == 0)\n    {\n      even_count++;\n\
    \    }\n    else\n    {\n      odd_count++;\n    }\n    n /= 10;\n  }\n  return\
    \ tuple(even_count, odd_count);\n}\n \n ", "{\n\t  auto neg = sign(num);\n\t \
    \ num = abs(num);\n\t  auto e = 0, o = 0;\n\t  foreach(digit; num.digits)\n\t\
    \  {\n\t\t  if(digit % 2 == 0)\n\t\t\t  e++;\n\t\t  else\n\t\t\t  o++;\n\t  }\n\
    \t  if(neg == -1)\n\t\t  return tuple(e, o);\n\t  else\n\t\t  return tuple(o,\
    \ e);\n}", "{\n\tsize_t even = 0;\n\tsize_t odd = 0;\n\tnum = abs(num);\n\twhile(num\
    \ != 0)\n\t{\n\t\tif(num % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\t\
    num /= 10;\n\t}\n\treturn tuple(even, odd);\n}", "{\n    Tuple!(long, long) result\
    \ = tuple(0, 0);", "{\n    auto count_digits = (num &gt; 0 ? num : -num).stringof.length;\n\
    \    return tuple(count_digits/2, ceil(count_digits/2));\n}", "{\n    //Initialize\
    \ the return value\n    Tuple!(long, long) res;\n    res.length = 2;\n    //Base\
    \ case\n    if (num == 0)\n    {\n        res.fields[0] = 0;\n        res.fields[1]\
    \ = 0;\n        return res;\n    }\n    //Recursive step\n    else\n    {\n  \
    \      if (num % 2 == 0)\n        {\n            res = even_odd_count(num / 10);\n\
    \            res.fields[0]++;\n            return res;\n        }\n        else\n\
    \        {\n            res = even_odd_count(num / 10);\n            res.fields[1]++;\n\
    \            return res;\n        }\n    }\n}\n/*\nGiven a list of integers. return\
    \ a list that has the sums of digits at even and odd indices respectively.", "{\n\
    \    long even_count, odd_count;\n    even_count = odd_count = 0;\n    foreach(c;\
    \ to!string(num).dup)\n    {\n        if(isdigit(c))\n        {\n            long\
    \ digit = c.integer;\n            if(digit % 2 == 0)\n                even_count++;\n\
    \            else\n                odd_count++;\n        }\n    }\n    return\
    \ tuple(even_count, odd_count);\n}", "{\n    enum evenCount = 0, oddCount = 0;\n\
    \    while(num != 0)\n    {\n        auto digit = num % 10;\n        if(digit\
    \ % 2 == 0) evenCount++;\n        else oddCount++;\n        num /= 10;\n    }\n\
    \    return tuple(evenCount, oddCount);\n}", "{\n    long even = 0, odd = 0;\n\
    \    num = abs(num);\n    while(num>0) \n    {\n        if (num % 2 == 0) \n \
    \       {\n            even++;\n        }\n        else \n        {\n        \
    \    odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }\n/*\nGiven a string. return the longest prefix that is present at the beginning\
    \ of all the words in the string.", "{\n    Tuple!(long, long) ans = tuple(0,\
    \ 0);\n    while (num != 0) \n    {\n        if (num % 2 == 0) \n        {\n \
    \           ans[0]++;\n        }\n        else \n        {\n            ans[1]++;\n\
    \        }\n        num /= 10;\n    }\n    return ans;\n}", "{\n  long even_sum\
    \ = 0, odd_sum = 0;\n  if (num < 0) num = -num;\n  while (num > 0)\n  {\n    if\
    \ (num % 2 == 0)\n      even_sum++;\n    else\n      odd_sum++;\n    num /= 10;\n\
    \  }\n  return tuple(even_sum, odd_sum);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
