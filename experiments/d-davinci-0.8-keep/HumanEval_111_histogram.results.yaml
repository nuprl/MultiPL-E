name: HumanEval_111_histogram
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.stdio;\n    import std.array;\n \
    \   import std.algorithm;\n    import std.range;\n    import std.typecons;\n \
    \   import std.math;\n    Nullable!(long[string]) rlt=null;\n    if(test.length>0)\n\
    \    {\n        auto t=test.split(' ');\n        auto tt= t.retro.groupBy!(a=>a);\n\
    \        auto result=(tt.map!(a=>a.length).max)();\n        long max_idx=result[0];\n\
    \        long max_count=result[1];\n        rlt=make!Nullable!(long[string])([max_count]);\n\
    \        foreach(idx,i;enumerate(tt))\n        {\n            if(i.length==max_count)\n\
    \            {\n                rlt.get.push(idx);\n            }\n        }\n\
    \    }\n    else\n    {\n        rlt=make!Nullable!(long[string])([]);\n    }\n\
    \    return rlt;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpasgpe6ly.d(30): Error: expression expected, not `)`\\n/tmp/tmpasgpe6ly.d(30):\
    \ Error: found `;` when expecting `)`\\n/tmp/tmpasgpe6ly.d(31): Error: C style\
    \ cast illegal, use `cast(tt.map!((a) => a.length).max)0`\\n/tmp/tmpasgpe6ly.d(31):\
    \ Error: semicolon expected following auto declaration, not `long`\\n/tmp/tmpasgpe6ly.d(33):\
    \ Error: multiple ! arguments are not allowed\\n/tmp/tmpasgpe6ly.d(44): Error:\
    \ multiple ! arguments are not allowed\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpasgpe6ly.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto chars = test.split(\" \");\n    long[string]\
    \ map;\n    foreach(char; chars)\n    {\n        if(map.count(char) == 0)\n  \
    \      {\n            map[char] = 1;\n        }\n        else\n        {\n   \
    \         map[char]++;\n        }\n    }\n    long max = 0;\n    foreach(char;\
    \ chars)\n    {\n        if(map[char] > max)\n        {\n            max = map[char];\n\
    \        }\n    }\n    string[long] sorted;\n    foreach(key, value; map)\n  \
    \  {\n        if(value == max)\n        {\n            sorted[key] = value;\n\
    \        }\n    }\n    return sorted;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4b1tfnzz.d(21): Error: no identifier for declarator `char`\\\
    n/tmp/tmp4b1tfnzz.d(23): Error: found `)` when expecting `.` following char\\\
    n/tmp/tmp4b1tfnzz.d(23): Error: found `==` when expecting identifier following\
    \ `char`.\\n/tmp/tmp4b1tfnzz.d(23): Error: found `0` when expecting `,`\\n/tmp/tmp4b1tfnzz.d(24):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmp4b1tfnzz.d(25): Error: found `]`\
    \ when expecting `.` following char\\n/tmp/tmp4b1tfnzz.d(25): Error: found `=`\
    \ when expecting identifier following `char`.\\n/tmp/tmp4b1tfnzz.d(25): Error:\
    \ found `1` when expecting `,`\\n/tmp/tmp4b1tfnzz.d(25): Error: expression expected,\
    \ not `;`\\n/tmp/tmp4b1tfnzz.d(26): Error: found `}` when expecting `,`\\n/tmp/tmp4b1tfnzz.d(27):\
    \ Error: expression expected, not `else`\\n/tmp/tmp4b1tfnzz.d(28): Error: found\
    \ `{` when expecting `,`\\n/tmp/tmp4b1tfnzz.d(29): Error: found `]` when expecting\
    \ `.` following char\\n/tmp/tmp4b1tfnzz.d(29): Error: found `++` when expecting\
    \ identifier following `char`.\\n/tmp/tmp4b1tfnzz.d(29): Error: found `;` when\
    \ expecting `,`\\n/tmp/tmp4b1tfnzz.d(30): Error: expression expected, not `}`\\\
    n/tmp/tmp4b1tfnzz.d(31): Error: found `}` when expecting `,`\\n/tmp/tmp4b1tfnzz.d(32):\
    \ Error: found `max` when expecting `.` following long\\n/tmp/tmp4b1tfnzz.d(32):\
    \ Error: found `=` when expecting identifier following `long`.\\n/tmp/tmp4b1tfnzz.d(32):\
    \ Error: found `0` when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4b1tfnzz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto ret = new long[string];\n    if (test.length\
    \ == 0)\n        return null;\n    foreach (letter; test.split) \n    {\n    \
    \    if (!(letter in ret))\n            ret[letter] = 0;\n        ret[letter]++;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5c4gaz3.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpx5c4gaz3.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpx5c4gaz3.d(21): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx5c4gaz3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    import\
    \ std.stdio;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.conv;\n    import std.traits;\n    import std.array;\n    import\
    \ std.format;\n    import std.string;\n    import std.algorithm;\n    import std.ascii;\n\
    \    import std.math;\n    string str = \"abcbbaa\";\n    //string str = \"a b\
    \ b c a b\";\n    //string str = \"a b c d e f g\";\n    //string str = \"a b\
    \ c d e f g\";\n    //string str = \"b b b b a\";\n    //string str = \"\";\n\
    \    //string str = \"a\";\n    //string str = \"a b c\";\n    long len = str.length;\n\
    \    int[string] count = new int[string];\n    //string[] test = [\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\"];\n    string[] test = str.split(\" \");\n    foreach(letter;\
    \ test)\n    {\n        if(letter in count)\n        {\n            ++count[letter];\n\
    \        }\n        else\n        {\n            count[letter] = 1;\n        }\n\
    \    }\n    writeln(count);\n    //find the max value and print the keys with\
    \ max values\n    auto maxvalue = max(count.values);\n    writeln(maxvalue);\n\
    \    foreach(key; count.keys)\n    {\n        if(count[key] == maxvalue)\n   \
    \     {\n            writeln(key);\n        }\n    }\n    //writeln(count.keys);\n\
    \    //writeln(count.values);\n    return test;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxbmofja.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxbmofja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    // most effective way is to use an associative\
    \ array\n    long[string] words;\n    size_t max = 0;\n    foreach(a;test.split)\n\
    \    {\n        // if a word has not been seen before, assign it a value of 1\n\
    \        if(!(a in words))\n            words[a] = 1;\n        else\n        \
    \    // otherwise, increment its value by 1\n            words[a]++;\n       \
    \ // get maximum of all the values \n        max = max(max,words[a]);\n    }\n\
    \    // create a new array to return only the highest occuring words\n    long[string]\
    \ high;\n    foreach(a;words)\n    {\n        // if the value at index a of the\
    \ associative array is max,\n        // add it to the new array\n        if(words[a]\
    \ == max)\n            high ~= words[a];\n    }\n    // return the new array\n\
    \    return high;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyjel0f3h.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpyjel0f3h.d(39): Error: cannot implicitly convert expression `a` of type\
    \ `long` to `string`\\n/tmp/tmpyjel0f3h.d(40): Error: cannot implicitly convert\
    \ expression `a` of type `long` to `string`\\n/tmp/tmpyjel0f3h.d(43): Error: cannot\
    \ implicitly convert expression `high` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjel0f3h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n\tNullable!(long[string]) foo = null;\n\timmutable\
    \ size_t len = test.length;\n\tif (len == 0)\n\t\treturn foo;\n\tfoo = new long[string]();\n\
    \tforeach (i, x; test)\n\t{\n\t\tif (!foo.isNull)\n\t\t{\n\t\t\tif (foo.get.get(x))\n\
    \t\t\t\tfoo.get[x]++;\n\t\t\telse\n\t\t\t\tfoo.get[x] = 1;\n\t\t}\n\t\telse\n\t\
    \t{\n\t\t\tfoo.get[x] = 1;\n\t\t}\n\t}\n\treturn foo;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6yi4u8ip.d(23): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp6yi4u8ip.d(28): Error: template `object.get` cannot deduce\
    \ function from argument types `!()(long[string], immutable(char))`, candidates\
    \ are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3094):\
    \        `object.get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/druntime/import/object.d(3100):\
    \        `object.get(K, V)(inout(V[K])* aa, K key, lazy inout(V) defaultValue)`\\\
    n/tmp/tmp6yi4u8ip.d(29): Error: cannot implicitly convert expression `x` of type\
    \ `immutable(char)` to `string`\\n/tmp/tmp6yi4u8ip.d(31): Error: cannot implicitly\
    \ convert expression `x` of type `immutable(char)` to `string`\\n/tmp/tmp6yi4u8ip.d(35):\
    \ Error: cannot implicitly convert expression `x` of type `immutable(char)` to\
    \ `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6yi4u8ip.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto ret = null;\n    long[string] result;\n\
    \    string[] words = test.split();\n    string[] max_count;\n    long temp =\
    \ 0;\n    foreach(string word; words) \n    {\n        if (result.count(word)\
    \ == 0) \n        {\n            result[word] = 1;\n        }\n        else \n\
    \        {\n            ++result[word];\n        }\n        if (temp < result[word])\
    \ \n        {\n            temp = result[word];\n            max_count = [word];\n\
    \        }\n        else if (temp == result[word]) \n        {\n            max_count\
    \ ~= word;\n        }\n    }\n    if (max_count.length != 0) \n    {\n       \
    \ ret = result;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiel7rmwn.d(21): Error: no property `split` for type `string`\\\
    n/tmp/tmpiel7rmwn.d(26): Error: no property `count` for type `long[string]`\\\
    n/tmp/tmpiel7rmwn.d(46): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `typeof(null)`\\n/tmp/tmpiel7rmwn.d(48): Error: cannot\
    \ implicitly convert expression `ret` of type `typeof(null)` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiel7rmwn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    \n    // TODO:\n    /*\n    long[string] result;\n\
    \    long[string] items;\n    long[string] max;\n    long[string] temp;\n    long[string]\
    \ key;\n    long[string] value;\n    long[string] max_key;\n    long[string] max_value;\n\
    \    long[string] test_sorted;\n    string t = \"b b b b a b c a\";\n    int len\
    \ = t.length;\n    int i = 0;\n    int j = 0;\n    foreach(ti; t)\n    {\n   \
    \     temp[ti] = 0;\n    }\n    foreach(ti; t)\n    {\n        temp[ti] = temp[ti]\
    \ + 1;\n    }\n    foreach(ti; temp)\n    {\n        items[ti] = temp[ti];\n \
    \   }\n    foreach(ti; items)\n    {\n        if(max[ti] < items[ti])\n      \
    \  {\n            max = items;\n        }\n    }\n    foreach(ti; max)\n    {\n\
    \        result[ti] = max[ti];\n    }\n    return Nullable!(long[string])(result);\n\
    \    \n    */\n    long[string] result;\n    long[string] items;\n    long[string]\
    \ max;\n    long[string] temp;\n    long[string] key;\n    long[string] value;\n\
    \    long[string] max_key;\n    long[string] max_value;\n    long[string] test_sorted;\n\
    \    string t = \"b b b b a b c a\";\n    int len = t.length;\n    int i = 0;\n\
    \    int j = 0;\n    foreach(ti; t)\n    {\n        temp[ti] = 0;\n    }\n   \
    \ foreach(ti; t)\n    {\n        temp[ti] = temp[ti] + 1;\n    }\n    foreach(ti;\
    \ temp)\n    {\n        items[ti] = temp[ti];\n    }\n    foreach(ti; items)\n\
    \    {\n        if(max[ti] < items\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2807zgw1.d(89): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmp2807zgw1.d(134): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp2807zgw1.d(134): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2807zgw1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] f = new long[string];\n    foreach(t;\
    \ test.split())\n    {\n        if(f.count(t) == 0)\n        {\n            f[t]\
    \ = 1;\n        }\n        else\n        {\n            f[t] += 1;\n        }\n\
    \    }\n    long m = max(f.values);\n    Nullable!(long[string]) res = new long[string];\n\
    \    foreach(t; test.split())\n    {\n        if(f[t] == m)\n        {\n     \
    \       res[t] = m;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp637bfwc0.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp637bfwc0.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp637bfwc0.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmp637bfwc0.d(32): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp637bfwc0.d(33): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp637bfwc0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(int i, dchar\
    \ c; test)\n    {\n        char lc = toLower(c);\n        result[lc] = result[lc]\
    \ + 1;\n    }\n    size_t max = 0;\n    foreach(string key; result.keys)\n   \
    \ {\n        max = max(max, result[key]);\n    }\n    long[string] ret = null;\n\
    \    foreach(string key; result.keys)\n    {\n        if(result[key] == max)\n\
    \        {\n            if(ret.isNull)\n            {\n                ret = new\
    \ long[string];\n            }\n            ret[key] = result[key];\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp053ramns.d(22): Error: undefined identifier `toLower`\\n/tmp/tmp053ramns.d(23):\
    \ Error: cannot implicitly convert expression `lc` of type `char` to `string`\\\
    n/tmp/tmp053ramns.d(28): Error: function expected before `()`, not `max` of type\
    \ `ulong`\\n/tmp/tmp053ramns.d(35): Error: no property `isNull` for type `long[string]`\\\
    n/tmp/tmp053ramns.d(37): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmp053ramns.d(42): Error: cannot implicitly convert expression `ret` of\
    \ type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp053ramns.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) ret;\n    auto r = ret.assumeEmpty();\n\
    \    r.length = test.length;\n    r.init(0);\n    foreach(c; test) \n    {\n \
    \       if(!c.isWhitespace) r[c]++;\n    }\n    long max = 0;\n    foreach(v;\
    \ r) \n    {\n        if(v > max) max = v;\n    }\n    for(int i = 0; i < r.length;\
    \ i++) \n    {\n        if(r[i] != max) r[i] = 0;\n    }\n    return ret;\n}\n\
    static assert(histogram(\"a b c\").get!(\"a\") == 1);\nstatic assert(histogram(\"\
    a b b a\").get!(\"a\") == 2);\nstatic assert(histogram(\"a b c a b\").get!(\"\
    a\") == 2);\nstatic assert(histogram(\"b b b b a\").get!(\"b\") == 4);\nstatic\
    \ assert(histogram(\"\").get!(\"a\") == 0);\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpduujkymp.d(38): Error: template instance `get!\"a\"` does not\
    \ match template declaration `get(U)(inout(U) fallback)`\\n/tmp/tmpduujkymp.d(38):\
    \        while evaluating: `static assert(histogram(\"a b c\").get!\"a\" == 1)`\\\
    n/tmp/tmpduujkymp.d(39): Error: template instance `get!\"a\"` does not match template\
    \ declaration `get(U)(inout(U) fallback)`\\n/tmp/tmpduujkymp.d(39):        while\
    \ evaluating: `static assert(histogram(\"a b b a\").get!\"a\" == 2)`\\n/tmp/tmpduujkymp.d(40):\
    \ Error: template instance `get!\"a\"` does not match template declaration `get(U)(inout(U)\
    \ fallback)`\\n/tmp/tmpduujkymp.d(40):        while evaluating: `static assert(histogram(\"\
    a b c a b\").get!\"a\" == 2)`\\n/tmp/tmpduujkymp.d(41): Error: template instance\
    \ `get!\"b\"` does not match template declaration `get(U)(inout(U) fallback)`\\\
    n/tmp/tmpduujkymp.d(41):        while evaluating: `static assert(histogram(\"\
    b b b b a\").get!\"b\" == 4)`\\n/tmp/tmpduujkymp.d(42): Error: template instance\
    \ `get!\"a\"` does not match template declaration `get(U)(inout(U) fallback)`\\\
    n/tmp/tmpduujkymp.d(42):        while evaluating: `static assert(histogram(\"\"\
    ).get!\"a\" == 0)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduujkymp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    const(string) key = \"\";\n    auto chars =\
    \ test.split;\n    Nullable!(long[string]) values = Nullable!(long[string])(null);\n\
    \    auto repeats = new long[string];\n    /*\n    if (test.length == 0)\n   \
    \ {\n        return null;\n    }\n    */\n    foreach(char; chars)\n    {\n  \
    \      if(key != \"\")\n        {\n            if(chars[char] == key)\n      \
    \      {\n                repeats[key] += 1;\n            }\n            else\n\
    \            {\n                if(repeats[key] == 0)\n                {\n   \
    \                 repeats[key] = 1;\n                }\n                key =\
    \ chars[char];\n            }\n        }\n        else\n        {\n          \
    \  key = chars[char];\n        }\n    }\n    if(repeats[key] == 0)\n    {\n  \
    \      repeats[key] = 1;\n    }\n    for(i = 0; i < repeats.length; i++)\n   \
    \ {\n        if(maxRepeats < repeats[i])\n        {\n            maxRepeats =\
    \ repeats[i];\n        }\n    }\n    foreach(char; repeats)\n    {\n        if(repeats[char]\
    \ == maxRepeats)\n        {\n            values[char] = repeats[char];\n     \
    \   }\n    }\n    return values;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3bdw9qz.d(29): Error: no identifier for declarator `char`\\\
    n/tmp/tmpg3bdw9qz.d(33): Error: found `]` when expecting `.` following char\\\
    n/tmp/tmpg3bdw9qz.d(33): Error: found `==` when expecting identifier following\
    \ `char`.\\n/tmp/tmpg3bdw9qz.d(33): Error: found `key` when expecting `,`\\n/tmp/tmpg3bdw9qz.d(33):\
    \ Error: expression expected, not `)`\\n/tmp/tmpg3bdw9qz.d(34): Error: found `{`\
    \ when expecting `,`\\n/tmp/tmpg3bdw9qz.d(35): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpg3bdw9qz.d(36): Error: expression expected, not `}`\\n/tmp/tmpg3bdw9qz.d(37):\
    \ Error: found `else` when expecting `,`\\n/tmp/tmpg3bdw9qz.d(43): Error: found\
    \ `]` when expecting `.` following char\\n/tmp/tmpg3bdw9qz.d(43): Error: found\
    \ `;` when expecting identifier following `char`.\\n/tmp/tmpg3bdw9qz.d(44): Error:\
    \ found `}` when expecting `,`\\n/tmp/tmpg3bdw9qz.d(45): Error: expression expected,\
    \ not `}`\\n/tmp/tmpg3bdw9qz.d(46): Error: found `else` when expecting `,`\\n/tmp/tmpg3bdw9qz.d(48):\
    \ Error: found `]` when expecting `.` following char\\n/tmp/tmpg3bdw9qz.d(48):\
    \ Error: found `;` when expecting identifier following `char`.\\n/tmp/tmpg3bdw9qz.d(49):\
    \ Error: found `}` when expecting `,`\\n/tmp/tmpg3bdw9qz.d(50): Error: expression\
    \ expected, not `}`\\n/tmp/tmpg3bdw9qz.d(51): Error: found `if` when expecting\
    \ `,`\\n/tmp/tmpg3bdw9qz.d(51): Error: found `==` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3bdw9qz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto ret = new long[string];\n    auto arr =\
    \ test.split(\" \");\n    foreach(i;arr)\n    {\n        if(ret.find(i) !is null)\n\
    \        {\n            ret[i] += 1;\n        }\n        else\n        {\n   \
    \         ret[i] = 1;\n        }\n    }\n    ret.remove(\"\");\n    if(ret.empty)\n\
    \    {\n        return null;\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0q2leglw.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp0q2leglw.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp0q2leglw.d(35): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0q2leglw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) retval = null;\n   \
    \ long[string] dict;\n    foreach(inTest; test.splitter().filter!(a => a.canFind(\"\
    \ \")).front.map!(a => a.strip))\n    {\n        if(dict.counts(inTest))\n   \
    \     {\n            dict[inTest]++;\n        }\n        else\n        {\n   \
    \         dict[inTest] = 1;\n        }\n    }\n    long max = 0;\n    foreach(inDict;\
    \ dict)\n    {\n        if(max < inDict.value)\n        {\n            max = inDict.value;\n\
    \        }\n    }\n    if(max > 0)\n    {\n        foreach(inDict; dict)\n   \
    \     {\n            if(inDict.value == max)\n            {\n                retval.insert(inDict.key,\
    \ inDict.value);\n            }\n        }\n    }\n    return retval;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvpz8qu4.d(21): Error: no property `splitter` for type `string`\\\
    n/tmp/tmpmvpz8qu4.d(35): Error: no property `value` for type `long`\\n/tmp/tmpmvpz8qu4.d(37):\
    \ Error: no property `value` for type `long`\\n/tmp/tmpmvpz8qu4.d(44): Error:\
    \ no property `value` for type `long`\\n/tmp/tmpmvpz8qu4.d(46): Error: no property\
    \ `insert` for type `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmvpz8qu4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string]();\n    foreach(char\
    \ letter; test)\n    {\n        result[letter]++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xfs45cn.d(19): Error: cannot pass type `string` as a function\
    \ argument\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xfs45cn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    // Set of type string, to remove duplicates\n\
    \    auto set = new HashSet!(string);\n    // Dictionary of type string and long\n\
    \    auto results = new long[string];\n    foreach(c; test.split(\" \"))\n   \
    \ {\n        if(set.insert(c)) \n        {\n            ++results[c];\n      \
    \  }\n    }\n    Nullable!(long[string]) max_value;\n    foreach(c; results.byKey)\n\
    \    {\n        if(max_value is null || max_value.value[c] < results[c])\n   \
    \     {\n            max_value = results;\n        }\n    }\n    return max_value;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9r9bzvjn.d(20): Error: template instance `HashSet!string` template\
    \ `HashSet` is not defined\\n/tmp/tmp9r9bzvjn.d(22): Error: cannot pass type `string`\
    \ as a function argument\\n/tmp/tmp9r9bzvjn.d(23): Error: no property `split`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9r9bzvjn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{ \n    long[string] result;\n    foreach(c; test.strip())\n\
    \    {\n        if(result.keys.canFind(c))\n        {\n            result[c] +=\
    \ 1;\n        }\n        else\n        {\n            result[c] = 1;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkhaks8v.d(20): Error: no property `strip` for type `string`\\\
    n/tmp/tmpkkhaks8v.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkkhaks8v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) toReturn = null;\n \
    \   if(!test.empty) \n    {\n        long[string] a;\n        long highestCount\
    \ = 0;\n        foreach(char c; test.strip())\n        {\n            if(a.contains(c))\
    \ \n            {\n                a[c]++;\n            } else \n            {\n\
    \                a[c] = 1;\n            }\n            if(a[c] > highestCount)\
    \ \n            {\n                highestCount = a[c];\n            }\n     \
    \   }\n        //The highest counted char is found, now we find if there are more\
    \ with the same count\n        long[string] highestValueChars;\n        foreach(char\
    \ c; a.keys) \n        {\n            if(a[c] == highestCount) \n            {\n\
    \                highestValueChars[c] = a[c];\n            }\n        }\n    \
    \    //we only need to return null if it isnt a single character\n        if(highestValueChars.length\
    \ != 1) \n        {\n            return null;\n        }\n        toReturn = highestValueChars;\n\
    \    }\n    return toReturn;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6ra0eaa.d(20): Error: no property `empty` for type `string`\\\
    n/tmp/tmpq6ra0eaa.d(24): Error: no property `strip` for type `string`\\n/tmp/tmpq6ra0eaa.d(40):\
    \ Error: cannot implicitly convert expression `__r75[__key76]` of type `string`\
    \ to `char`\\n/tmp/tmpq6ra0eaa.d(42): Error: cannot implicitly convert expression\
    \ `c` of type `char` to `string`\\n/tmp/tmpq6ra0eaa.d(44): Error: cannot implicitly\
    \ convert expression `c` of type `char` to `string`\\n/tmp/tmpq6ra0eaa.d(50):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq6ra0eaa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto chars = test.chars.filter!(a => a.isAlpha).map!(a\
    \ => a.toLower);\n    long[string] m = chars.array.frequencies;\n    long max\
    \ = m.values.max;\n    if (max == 0) \n        return null;\n    else \n     \
    \   return m.retain(a => a[1] == max);\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppxsjoh1p.d(19): Error: no property `chars` for type `string`\\\
    n/tmp/tmppxsjoh1p.d(21): Error: no property `max` for type `long[]`\\n/tmp/tmppxsjoh1p.d(25):\
    \ Error: no property `retain` for type `long[string]`\\n/tmp/tmppxsjoh1p.d(23):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppxsjoh1p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    static if(__traits(compiles, import std.algorithm.counting.count))\n\
    \    {\n        return test.count;\n    }\n    else\n    {\n        if(test.length\
    \ == 0)\n            return null;\n        else\n        {\n            dchar[long]\
    \ tempArray = void;\n            foreach(ch; test)\n            {\n          \
    \      tempArray ~= ch;\n            }\n            tempArray.sort;\n        \
    \    return tempArray.count;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphz_rm_01.d(19): Error: found `std` when expecting `(` following\
    \ `import`\\n/tmp/tmphz_rm_01.d(20): Error: found `{` when expecting `)`\\n/tmp/tmphz_rm_01.d(23):\
    \ Error: declaration expected, not `else`\\n/tmp/tmphz_rm_01.d(27): Error: declaration\
    \ expected, not `else`\\n/tmp/tmphz_rm_01.d(30): Error: declaration expected,\
    \ not `foreach`\\n/tmp/tmphz_rm_01.d(30): Error: no identifier for declarator\
    \ `test`\\n/tmp/tmphz_rm_01.d(30): Error: declaration expected, not `)`\\n/tmp/tmphz_rm_01.d(33):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphz_rm_01.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
