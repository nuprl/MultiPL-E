name: HumanEval_160_do_algebra
language: d
results:
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwnvqs1i8.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnvqs1i8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    auto res = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        auto op = operator[i];\n        auto a = operand[i + 1];\n   \
    \     if (op == \"+\")\n            res += a;\n        else if (op == \"-\")\n\
    \            res -= a;\n        else if (op == \"*\")\n            res *= a;\n\
    \        else if (op == \"//\")\n            res /= a;\n        else if (op ==\
    \ \"**\")\n            res = pow(res, a);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv5t6jjxq.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4290c5]\\n??:? void tmpv5t6jjxq.__unittest_L48_C1()\
    \ [0x428145]\\n??:? void tmpv5t6jjxq.__modtest() [0x428330]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a8c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a950]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a84d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428df5]\\n??:? runModuleUnitTests [0x42d9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429588]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42950f]\\n??:? _d_run_main [0x42947a]\\n??:? main [0x428343]\\\
    n??:? __libc_start_main [0x7695f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n  long res = operand[0];\n  for (int i = 0; i < operator.length; i++) {\n\
    \    switch (operator[i]) {\n      case \"+\":\n        res += operand[i + 1];\n\
    \        break;\n      case \"-\":\n        res -= operand[i + 1];\n        break;\n\
    \      case \"*\":\n        res *= operand[i + 1];\n        break;\n      case\
    \ \"//\":\n        res /= operand[i + 1];\n        break;\n      case \"**\":\n\
    \        res = (long)pow(res, operand[i + 1]);\n        break;\n    }\n  }\n \
    \ return res;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuy2ot_05.d(46): Error: C style cast illegal, use `cast(long)pow(res,\
    \ operand[i + 1])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy2ot_05.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgtnun36y.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291ed]\\n??:? void tmpgtnun36y.__unittest_L56_C1()\
    \ [0x42826d]\\n??:? void tmpgtnun36y.__modtest() [0x428458]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dd43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a975]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428f1d]\\n??:? runModuleUnitTests [0x42db19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4296b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429637]\\n??:? _d_run_main [0x4295a2]\\n??:? main [0x42846b]\\\
    n??:? __libc_start_main [0xfd114554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnzt2jzb9.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnzt2jzb9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    return 0;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo620hm7g.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428d79]\\n??:? void tmpo620hm7g.__unittest_L32_C1()\
    \ [0x427e03]\\n??:? void tmpo620hm7g.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d85b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428a56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a501]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a590]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a48d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428a2d]\\n??:? runModuleUnitTests [0x42d631]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4291c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42914f]\\n??:? _d_run_main [0x4290ba]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0xb7bb5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        string op = operator[i];\n        if (op == \"+\")\n  \
    \      {\n            result += operand[i+1];\n        }\n        else if (op\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (op == \"*\")\n        {\n            result *= operand[i+1];\n  \
    \      }\n        else if (op == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (op == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp04i6v7w5.d(62): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42915d]\\n??:? void tmp04i6v7w5.__unittest_L57_C1()\
    \ [0x4281d9]\\n??:? void tmp04i6v7w5.__modtest() [0x4283c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dcb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eb6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a959]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e8d]\\n??:? runModuleUnitTests [0x42da89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429620]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4295a7]\\n??:? _d_run_main [0x429512]\\n??:? main [0x4283d7]\\\
    n??:? __libc_start_main [0x71aa1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long value = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                value += operand[i + 1];\n                break;\n        \
    \    case \"-\":\n                value -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                value *= operand[i + 1];\n         \
    \       break;\n            case \"//\":\n                value /= operand[i +\
    \ 1];\n                break;\n            case \"**\":\n                value\
    \ = long(pow(double(value), double(operand[i + 1])));\n                break;\n\
    \        }\n    }\n    return value;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26hkge4a.d(48): Error: cannot implicitly convert expression `pow(cast(double)value,\
    \ cast(double)operand[cast(ulong)(i + 1)])` of type `double` to `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26hkge4a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz84hq_x4.d(51): Error: C style cast illegal, use `cast(long)pow(result,\
    \ operand[i + 1])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz84hq_x4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoudno64p.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoudno64p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long res = operand[0];\n    foreach(i, o; zip(operator, operand[1..$]))\n\
    \    {\n        switch(o)\n        {\n            case \"+\":\n              \
    \  res += operand[i + 1];\n                break;\n            case \"-\":\n \
    \               res -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                res *= operand[i + 1];\n                break;\n   \
    \         case \"//\":\n                res /= operand[i + 1];\n             \
    \   break;\n            case \"**\":\n                res = cast(long)pow(res,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd924cf8n.d(31): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd924cf8n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    foreach(string op; operator)\n    {\n\
    \        if(op == \"+\")\n            result += operand[1];\n        else if(op\
    \ == \"-\")\n            result -= operand[1];\n        else if(op == \"*\")\n\
    \            result *= operand[1];\n        else if(op == \"//\")\n          \
    \  result /= operand[1];\n        else if(op == \"**\")\n            result =\
    \ pow(result, operand[1]);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmtpp8dyq.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429145]\\n??:? void tmpmtpp8dyq.__unittest_L46_C1()\
    \ [0x428117]\\n??:? void tmpmtpp8dyq.__modtest() [0x4283b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428e9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428e75]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429608]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42958f]\\n??:? _d_run_main [0x4294fa]\\n??:? main [0x4283c3]\\\
    n??:? __libc_start_main [0x2d688554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long res = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case \"+\":\n               \
    \ res += operand[i + 1];\n                break;\n            case \"-\":\n  \
    \              res -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                res *= operand[i + 1];\n                break;\n   \
    \         case \"//\":\n                res /= operand[i + 1];\n             \
    \   break;\n            case \"**\":\n                res = (long)pow(res, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return res;\n}\nlong do_algebra(string[]\
    \ operator, long[] operand) \n{\n    auto res = operand[0];\n    foreach (i, op;\
    \ operator)\n        switch (op) {\n            case \"+\": res += operand[i +\
    \ 1]; break;\n            case \"-\": res -= operand[i + 1]; break;\n        \
    \    case \"*\": res *= operand[i + 1]; break;\n            case \"//\": res /=\
    \ operand[i + 1]; break;\n            case \"**\": res = cast(long)pow(res, operand[i\
    \ + 1]); break;\n        }\n    return res;\n}\nlong do_algebra(string[] operator,\
    \ long[] operand) \n{\n    return reduce!((a, b) => {\n        switch (operator[$\
    \ - 1]) {\n            case \"+\": return a + b;\n            case \"-\": return\
    \ a - b;\n            case \"*\": return a * b;\n            case \"//\": return\
    \ a / b;\n            case \"**\": return cast(long)pow(a, b);\n        }\n  \
    \  })(operand);\n}\nlong do_algebra(string[] operator, long[] operand) \n{\n \
    \   return fold!((a, b) => {\n        switch (operator[$ - 1]) {\n           \
    \ case \"+\": return a + b;\n            case \"-\": return a - b;\n         \
    \   case \"*\": return a * b;\n            case \"//\": return a /\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnj6eprr9.d(46): Error: C style cast illegal, use `cast(long)pow(res,\
    \ operand[i + 1])`\\n/tmp/tmpnj6eprr9.d(85): Error: expression expected, not `unittest`\\\
    n/tmp/tmpnj6eprr9.d(86): Error: found `{` when expecting `;` following `return`\
    \ statement\\n/tmp/tmpnj6eprr9.d(93): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpnj6eprr9.d(93): Error: found `End\
    \ of File` when expecting `)` following template argument list\\n/tmp/tmpnj6eprr9.d(93):\
    \ Error: found `End of File` when expecting `;` following `return` statement\\\
    n/tmp/tmpnj6eprr9.d(93): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj6eprr9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    long len = size(operator);\n    for\
    \ (long i = 0; i < len; i++) {\n        string op = operator[i];\n        long\
    \ op1 = operand[i];\n        long op2 = operand[i + 1];\n        result = op ==\
    \ \"+\" ? result + op2 :\n                 op == \"-\" ? result - op2 :\n    \
    \             op == \"*\" ? result * op2 :\n                 op == \"//\" ? result\
    \ / op2 :\n                 op == \"**\" ? result ** op2 : 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwapp6ca4.d(31): Error: undefined identifier `size`, did you mean\
    \ function `sin`?\\n/tmp/tmpwapp6ca4.d(40): Error: can only `*` a pointer, not\
    \ a `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwapp6ca4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    if (operator.length < 1 || operand.length < 2) return 0;\n    long\
    \ temp = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n      \
    \  if (operator[i] == \"+\") {\n            temp += operand[i+1];\n        } else\
    \ if (operator[i] == \"-\") {\n            temp -= operand[i+1];\n        } else\
    \ if (operator[i] == \"*\") {\n            temp *= operand[i+1];\n        } else\
    \ if (operator[i] == \"//\") {\n            temp /= operand[i+1];\n        } else\
    \ if (operator[i] == \"**\") {\n            temp = pow(temp, operand[i+1]);\n\
    \        }\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp38u6l7p4.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429205]\\n??:? void tmp38u6l7p4.__unittest_L47_C1()\
    \ [0x428281]\\n??:? void tmp38u6l7p4.__modtest() [0x42846c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dd5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f5e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42aa01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa90]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a98d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428f35]\\n??:? runModuleUnitTests [0x42db31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4296c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42964f]\\n??:? _d_run_main [0x4295ba]\\n??:? main [0x42847f]\\\
    n??:? __libc_start_main [0x6ad9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i]) \n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdp7o6am2.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp7o6am2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (long i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc77e6ku4.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc77e6ku4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0p00_kcn.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p00_kcn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    foreach(i,op;enumerate(operator)){\n\
    \        switch(op){\n            case \"+\":\n                result = result\
    \ + operand[i+1];\n                break;\n            case \"-\":\n         \
    \       result = result - operand[i+1];\n                break;\n            case\
    \ \"*\":\n                result = result * operand[i+1];\n                break;\n\
    \            case \"//\":\n                result = result // operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,operand[i+1]);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9cxnpdpp.d(44): Error: found `break` when expecting `;` following\
    \ statement\\n/tmp/tmp9cxnpdpp.d(44): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cxnpdpp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given two lists operator, and operand. The\
    \ first list has basic algebra operations, and \n    the second list is a list\
    \ of integers. Use the two given lists to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator list is equal to the length\
    \ of operand list minus one.\n        Operand is a list of of non-negative integers.\n\
    \        Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
    \ \n{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuou8x6q6.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291ed]\\n??:? void tmpuou8x6q6.__unittest_L56_C1()\
    \ [0x42826d]\\n??:? void tmpuou8x6q6.__modtest() [0x428458]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dd43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428f46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a9e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a975]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428f1d]\\n??:? runModuleUnitTests [0x42db19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4296b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429637]\\n??:? _d_run_main [0x4295a2]\\n??:? main [0x42846b]\\\
    n??:? __libc_start_main [0x769f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
