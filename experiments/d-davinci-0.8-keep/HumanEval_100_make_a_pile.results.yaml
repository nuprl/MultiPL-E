name: HumanEval_100_make_a_pile
language: d
results:
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] stones = new\
    \ long[n];\n    for (long i = 0; i < n; i++) {\n        stones[i] = 2 * n - (i\
    \ % 2);\n    }\n    return stones;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb_5mjohi.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmpb_5mjohi.__unittest_L25_C1()\
    \ [0x427efe]\\n??:? void tmpb_5mjohi.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b382]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43060d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430599]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b359]\\n??:? runModuleUnitTests [0x42c2c5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42887f]\\n??:? _d_run_main [0x4287ea]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x5125e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    // Initialize array\
    \ to return\n    long[] result = new long[n];\n    // Fill array\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = (n - i) * 2 - 1;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoq7pat7n.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42842d]\\n??:? void tmpoq7pat7n.__unittest_L28_C1()\
    \ [0x427ef2]\\n??:? void tmpoq7pat7n.__modtest() [0x4281ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430605]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430591]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b351]\\n??:? runModuleUnitTests [0x42c2bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428877]\\n??:? _d_run_main [0x4287e2]\\n??:? main [0x4281bf]\\\
    n??:? __libc_start_main [0x5a2eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    int [] pile = [int.sizeof*n];\n\
    \    long i=0;\n    while(n>0)\n    {\n        pile[i]=n;\n        if(n%2==0)\n\
    \        {\n            n=n+1;\n        }\n        else\n        {\n         \
    \   n=n+2;\n        }\n        i++;\n    }\n    return pile;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ki9_m4s.d(19): Error: cannot implicitly convert expression `[4LU\
    \ * cast(ulong)n]` of type `ulong[]` to `int[]`\\n/tmp/tmp8ki9_m4s.d(23): Error:\
    \ cannot implicitly convert expression `n` of type `long` to `int`\\n/tmp/tmp8ki9_m4s.d(34):\
    \ Error: cannot implicitly convert expression `pile` of type `int[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ki9_m4s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto levels = [](){\n\
    \        long[] result;\n        while(n > 0)\n        {\n            result ~=\
    \ n;\n            n = n % 2 == 0 ? n + 1 : n + 2;\n        }\n        return result;\n\
    \    }();\n    return levels;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1m3tdgf4.d(19): Error: semicolon expected following auto declaration,\
    \ not `{`\\n/tmp/tmp1m3tdgf4.d(27): Error: expression expected, not `)`\\n/tmp/tmp1m3tdgf4.d(27):\
    \ Error: found `;` when expecting `)`\\n/tmp/tmp1m3tdgf4.d(28): Error: found `return`\
    \ when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1m3tdgf4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto result = new long[];\n\
    \    while (n > 0) {\n        result ~= n;\n        n = (n%2 == 0) ? n+1 : n+2;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4aruhpji.d(19): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4aruhpji.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long odd = n;\n   \
    \ long even = n+1;\n    long[] result = new long[n];\n    for (int i = 0; i <\
    \ n; i++)\n    {\n        if(n % 2 == 0)\n        {\n            result[i] = even;\n\
    \            even += 2;\n        }\n        else if(n % 2 != 0)\n        {\n \
    \           result[i] = odd;\n            odd += 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp76bt8rpy.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428495]\\n??:? void tmp76bt8rpy.__unittest_L37_C1()\
    \ [0x427fd7]\\n??:? void tmp76bt8rpy.__modtest() [0x428218]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43066d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b9]\\n??:? runModuleUnitTests [0x42c325]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428958]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288df]\\n??:? _d_run_main [0x42884a]\\n??:? main [0x42822b]\\\
    n??:? __libc_start_main [0x36e58554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] output;\n  \
    \  while (n > 0) {\n        output ~= n;\n        if (n % 2 == 0)\n          \
    \  n++;\n        else\n            n += 2;\n    }\n    return output;\n}\n/*\n\
    \    Given a string, return true if it is a palindrome, else return false.\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0v5gd5v.d(29): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0v5gd5v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto result = [];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        auto next = (n + i) % 2 ? n +\
    \ 2 * i + 1 : n + 2 * i + 2;\n        result ~= next;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6pbir0ai.d(23): Error: cannot append type `long` to type `void[]`\\\
    n/tmp/tmp6pbir0ai.d(25): Error: cannot implicitly convert expression `result`\
    \ of type `void[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6pbir0ai.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n  return [n, n-1, n-2];\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1eio_2xt.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283ed]\\n??:? void tmp1eio_2xt.__unittest_L21_C1()\
    \ [0x427eb6]\\n??:? void tmp1eio_2xt.__modtest() [0x428170]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b26a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b241]\\n??:? runModuleUnitTests [0x42c1ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42883c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287c3]\\n??:? _d_run_main [0x42872e]\\n??:? main [0x428183]\\\
    n??:? __libc_start_main [0x4a7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new long[n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        res[i] = n + 2 * i;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] levels;\n  \
    \  long num_levels = 0;\n    long num_stones = n;\n    while (num_stones > 0)\
    \ {\n        levels ~= num_stones;\n        num_stones -= (num_stones % 2) + 1;\n\
    \        num_levels++;\n    }\n    return levels[];\n}\nunittest\n{\n    alias\
    \ candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n   \
    \ assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L,\
    \ 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n\
    \    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoxw7fs1s.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42842d]\\n??:? void tmpoxw7fs1s.__unittest_L29_C1()\
    \ [0x427ef2]\\n??:? void tmpoxw7fs1s.__modtest() [0x4281ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430675]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc6d]\\n??:? runModuleUnitTests [0x42cbd9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42887c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428803]\\n??:? _d_run_main [0x42876e]\\n??:? main [0x4281bf]\\\
    n??:? __libc_start_main [0x9210554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new long[(int)n];\n\
    \    res[0] = n;\n    long next = 0;\n    for (int i = 1; i < n; i++) {\n    \
    \    next = res[i-1];\n        if (next % 2 == 0) res[i] = next + 2;\n       \
    \ else res[i] = next + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0eb0bl9b.d(19): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0eb0bl9b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n;\n\
    \        n = (n + (n % 2 == 0 ? 1 : -1));\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqlauygsj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpqlauygsj.__unittest_L27_C1()\
    \ [0x427f0e]\\n??:? void tmpqlauygsj.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x2c8c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stone;\n    for (long i = 0; i < n; i++)\n    {\n       \
    \ stone = 2 * i + 1;\n        if (n % 2 == 0) stone++;\n        result[i] = n\
    \ + stone;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl8m7f6wc.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpl8m7f6wc.__unittest_L29_C1()\
    \ [0x427f16]\\n??:? void tmpl8m7f6wc.__modtest() [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0x82afc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] list;\n    //\
    \ Insert the right code here\n    return list;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkmxnwnsu.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283ad]\\n??:? void tmpkmxnwnsu.__unittest_L23_C1()\
    \ [0x427e76]\\n??:? void tmpkmxnwnsu.__modtest() [0x428130]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c397]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b22a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430349]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b201]\\n??:? runModuleUnitTests [0x42c16d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428783]\\n??:? _d_run_main [0x4286ee]\\n??:? main [0x428143]\\\
    n??:? __libc_start_main [0xffb3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n  long[] levels = new long[(int)n];\n\
    \  for (int i = 0; i < n; i++) {\n    levels[i] = i==0 ? n : (long)floor(n + i\
    \ + 1.0 + (n%2)*1.0);\n  }\n  return levels;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6olxt7ib.d(19): Error: C style cast illegal, use `cast(int)n`\\\
    n/tmp/tmp6olxt7ib.d(21): Error: C style cast illegal, use `cast(long)floor(n +\
    \ i + 1.00000 + n % 2 * 1.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6olxt7ib.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    // do your best\n \
    \   long[] result;\n    result.length = 0;\n    while(n > 0)\n    {\n        result\
    \ ~= n;\n        if(n % 2 == 0)\n            n = n / 2;\n        else\n      \
    \      n = (n + 1) / 2;\n    }\n    return result[];\n}\nunittest\n{\n    alias\
    \ candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n   \
    \ assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L,\
    \ 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n\
    \    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid\
    \ main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    assert(n > 0, \"Input\
    \ should be a positive integer\");\n    long[] levels = new long[n];\n    levels[0]\
    \ = n;\n    for (int i = 1; i < n; i++) {\n        levels[i] = levels[i-1] + (levels[i-1]%2\
    \ == 0 ? 2 : 1);\n    }\n    return levels;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpky3qwdd6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285e5]\\n??:? void tmpky3qwdd6.__unittest_L27_C1()\
    \ [0x427fda]\\n??:? void tmpky3qwdd6.__modtest() [0x428294]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c69f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b532]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c6c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430749]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b509]\\n??:? runModuleUnitTests [0x42c475]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428aa8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a2f]\\n??:? _d_run_main [0x42899a]\\n??:? main [0x4282a7]\\\
    n??:? __libc_start_main [0xd3a23554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto r = [];\n    while\
    \ (n > 0)\n    {\n        r ~= n;\n        n = n % 2 ? n + 2 : n + 1;\n    }\n\
    \    return r;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1mgmd3n3.d(22): Error: cannot append type `long` to type `void[]`\\\
    n/tmp/tmp1mgmd3n3.d(25): Error: cannot implicitly convert expression `r` of type\
    \ `void[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp1mgmd3n3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    immutable long[] p1\
    \ = n.isOdd ? n.odd : n.even;\n    immutable long[] p2 = n.isOdd ? n.even : n.odd;\n\
    \    immutable long[] pile = new long[n];\n    foreach (immutable i, ref value;\
    \ pile) \n    {\n        value = n - i;\n        if (value.isOdd)\n          \
    \  value = p1[i/2];\n        else\n            value = p2[i/2];\n    }\n    return\
    \ pile;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2nu2a07t.d(19): Error: no property `isOdd` for type `long`\\\
    n/tmp/tmp2nu2a07t.d(19): Error: no property `odd` for type `long`\\n/tmp/tmp2nu2a07t.d(19):\
    \ Error: no property `even` for type `long`\\n/tmp/tmp2nu2a07t.d(20): Error: no\
    \ property `isOdd` for type `long`\\n/tmp/tmp2nu2a07t.d(20): Error: no property\
    \ `even` for type `long`\\n/tmp/tmp2nu2a07t.d(20): Error: no property `odd` for\
    \ type `long`\\n/tmp/tmp2nu2a07t.d(24): Error: cannot modify `immutable` expression\
    \ `value`\\n/tmp/tmp2nu2a07t.d(25): Error: no property `isOdd` for type `immutable(long)`\\\
    n/tmp/tmp2nu2a07t.d(26): Error: cannot modify `immutable` expression `value`\\\
    n/tmp/tmp2nu2a07t.d(28): Error: cannot modify `immutable` expression `value`\\\
    n/tmp/tmp2nu2a07t.d(30): Error: cannot implicitly convert expression `pile` of\
    \ type `immutable(long[])` to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2nu2a07t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
