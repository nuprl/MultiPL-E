name: HumanEval_48_is_palindrome
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t len = text.length;\n\
    \    size_t middle = len / 2;\n    for (size_t i = 0; i < middle; i++) {\n   \
    \     if (text[i] != text[len - i - 1])\n            return false;\n    }\n  \
    \  return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczmi_nm6.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczmi_nm6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach(i, j; iota(0,\
    \ text.length / 2))\n        if(text[i] != text[text.length - 1 - j])\n      \
    \      return false;\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpht65_q9q.d(23): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpht65_q9q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    text = strip(text);\n\
    \    return text == text.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4d0itmis.d(18): Error: undefined identifier `strip`, did you\
    \ mean alias `string`?\\n/tmp/tmp4d0itmis.d(19): Error: no property `mirror` for\
    \ type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d0itmis.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result = true;\n\
    \    int i = 0;\n    int j = text.length - 1;\n    while (i < j) {\n        if\
    \ (text[i] != text[j]) {\n            result = false;\n            break;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3z3my9__.d(20): Error: cannot implicitly convert expression `text.length\
    \ - 1LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3z3my9__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ln0erfo.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ln0erfo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    int n = text.length;\n\
    \    for (int i = 0; i < n / 2; i++)\n    {\n        if (text[i] != text[n - i\
    \ - 1])\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzw56e8jl.d(18): Error: cannot implicitly convert expression `text.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzw56e8jl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{ \n    if (text.empty)\
    \ \n        return true; \n    size_t n = text.length; \n    size_t mid = cast(size_t)(n\
    \ / 2); \n    for (size_t i = 0; i < mid; i++) { \n        if (text[i] != text[n\
    \ - i - 1]) \n            return false; \n    } \n    return true; \n} \n/*\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqwbitfwk.d(28): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwbitfwk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    int start = 0;\n\
    \    int end = text.length - 1;\n    while (start < end) \n    {\n        if (text[start]\
    \ != text[end]) \n        {\n            return false;\n        }\n        start\
    \ += 1;\n        end -= 1;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_dclhid.d(19): Error: cannot implicitly convert expression `text.length\
    \ - 1LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpc_dclhid.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.retro);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4h0k46e.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4h0k46e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    // Generate an\
    \ array of chars from given string\n    text = text.toLower();\n    char[] chars\
    \ = text.chars();\n    // Iterate and check if left part is equal to right part\n\
    \    for (int i = 0; i < chars.length/2; i++) {\n        int j = chars.length\
    \ - i - 1;\n        if (chars[i] != chars[j])\n            return false;\n   \
    \ }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcpy01skx.d(29): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpy01skx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0) \n    {\n        return true;\n    }\n    else if (text.length == 1) \n\
    \    {\n        return true;\n    }\n    else \n    {\n        return text[0]\
    \ == text[$-1] && is_palindrome(text[1..$-1]);\n    }\n}\n/*\nunittest\n{\n  \
    \  alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb6pgs2n7.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6pgs2n7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    int i, j;\n   \
    \ for (i = 0, j = text.length - 1; i < j; i++, j--)\n    {\n        if (text[i]\
    \ != text[j]) return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n \
    \   assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3v51m_m5.d(25): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v51m_m5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    immutable text_len\
    \ = text.length;\n    if (text_len <= 1)\n        return true;\n    immutable\
    \ mid = text_len / 2;\n    if (text[0 .. mid] == text[mid .. $].reverse)\n   \
    \     return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp210pn958.d(22): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp210pn958.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    // check the boundary\
    \ condition\n    if (text.length == 0)\n        return true;\n    \n    // check\
    \ the base case\n    if (text.length == 1)\n        return true;\n    \n    else\
    \ {\n        if (text[0] == text[$-1])\n            return is_palindrome(text[1..$-1]);\n\
    \        else\n            return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    if(text.length\
    \ == 0)\n        return true;\n    else if(text.length == 1)\n        return true;\n\
    \    else if(text[0] == text[$-1])\n        return is_palindrome(text[1..$-1]);\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach(index,\
    \ ch; text)\n    {\n        if (ch != text[$ - index - 1])\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvt9fukau.d(25): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvt9fukau.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto a = text.chars;\n\
    \    int l = a.length;\n    bool is = true;\n    int half = ceil(l / 2);\n   \
    \ for (int i = 0; i < half; i++) {\n        if (a[i] != a[l - i - 1]) {\n    \
    \        is = false;\n            break;\n        }\n    }\n    return is;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6irdwr4.d(20): Error: no identifier for declarator `bool`\\\
    n/tmp/tmpj6irdwr4.d(20): Error: `type identifier : specialization` expected following\
    \ `is`\\n/tmp/tmpj6irdwr4.d(20): Error: found `true` when expecting `;` following\
    \ statement\\n/tmp/tmpj6irdwr4.d(20): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpj6irdwr4.d(24): Error: `type identifier : specialization`\
    \ expected following `is`\\n/tmp/tmpj6irdwr4.d(24): Error: found `false` when\
    \ expecting `;` following statement\\n/tmp/tmpj6irdwr4.d(24): Deprecation: use\
    \ `{ }` for an empty statement, not `;`\\n/tmp/tmpj6irdwr4.d(28): Error: `type\
    \ identifier : specialization` expected following `is`\\n/tmp/tmpj6irdwr4.d(29):\
    \ Error: found `}` when expecting `;` following `return` statement\\n/tmp/tmpj6irdwr4.d(30):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj6irdwr4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    immutable uint\
    \ h = text.length / 2;\n    foreach (immutable i, immutable c; text[0 .. h])\n\
    \        if (c != text[$ - i - 1])\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpujp7ll9p.d(18): Error: cannot implicitly convert expression `text.length\
    \ / 2LU` of type `ulong` to `immutable(uint)`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpujp7ll9p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    // \\TODO!\n  \
    \  // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n    // \\TODO!\n\
    \    // \\TODO!\n    // \\TODO!\n    // \\TOD\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzve4fu6j.d(82): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzve4fu6j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    int start = 0;\n\
    \    int end = text.length - 1;\n    while (end > start) \n    {\n        if (text[start]\
    \ != text[end]) \n        {\n            return false;\n        }\n        ++start;\n\
    \        --end;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4gqh2ni.d(19): Error: cannot implicitly convert expression `text.length\
    \ - 1LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpp4gqh2ni.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
