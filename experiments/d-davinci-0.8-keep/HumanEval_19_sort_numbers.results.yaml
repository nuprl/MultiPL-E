name: HumanEval_19_sort_numbers
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    alias Strings = string[];\n    static StringMap value = [ \"zero\"\
    :0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"six\":6, \"seven\"\
    :7, \"eight\":8, \"nine\":9 ];\n    Strings strings = numbers.split;\n    // sort\
    \ numbers in ascending order\n    sort!((a, b) => value[a] < value[b])(strings);\n\
    \    return strings.join(\" \");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvejpvqod.d(14): Error: undefined identifier `StringMap`\\n/tmp/tmpvejpvqod.d(14):\
    \ Error: cannot use array to initialize `_error_`\\n/tmp/tmpvejpvqod.d(15): Error:\
    \ no property `split` for type `string`\\n/tmp/tmpvejpvqod.d(17): Error: template\
    \ instance `sort!((a, b) => value[a] < value[b])` template `sort` is not defined,\
    \ did you mean sqrt?\\n/tmp/tmpvejpvqod.d(18): Error: no property `join` for type\
    \ `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvejpvqod.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    // TODO: Write code here\n    \n    string sort = std.algorithm.sort(numbers.split('\
    \ '));\n    return sort.join(' ');\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyvv8drpe.d(15): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpyvv8drpe.d(16): Error: no property `join` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvv8drpe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    string[] words = numbers.split;\n    string[] sorted = new string[words.length];\n\
    \    int[] nums = new int[words.length];\n    string[] numeral = [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"];\n    foreach(i, num; words)\n    {\n        foreach(j, numeral; numeral)\n\
    \        {\n            if(num == numeral[j])\n            {\n               \
    \ nums[i] = j;\n            }\n        }\n    }\n    nums.sort;\n    foreach(i,\
    \ num; nums)\n    {\n        sorted[i] = numeral[num];\n    }\n    string combined;\n\
    \    foreach(i, word; sorted)\n    {\n        combined ~= word ~ \" \";\n    }\n\
    \    return combined.strip;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9r5wmh9w.d(13): Error: no property `split` for type `string`\\\
    n/tmp/tmp9r5wmh9w.d(19): Error: variable `numeral` is shadowing variable `tmp9r5wmh9w.sort_numbers.numeral`\\\
    n/tmp/tmp9r5wmh9w.d(21): Error: incompatible types for `(num) == (numeral[j])`:\
    \ `string` and `immutable(char)`\\n/tmp/tmp9r5wmh9w.d(23): Error: cannot implicitly\
    \ convert expression `j` of type `ulong` to `int`\\n/tmp/tmp9r5wmh9w.d(27): Error:\
    \ no property `sort` for type `int[]`\\n/tmp/tmp9r5wmh9w.d(37): Error: no property\
    \ `strip` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9r5wmh9w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    auto numeral = [\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\"\
    ,\"six\",\"seven\",\"eight\",\"nine\"];\n    auto nums = numbers.split;\n    auto\
    \ out = new string[$];\n    for(auto s;nums)\n    {\n        for(int i=0;i<numeral.length;i++)\n\
    \        {\n            if(s == numeral[i])\n            {\n                out\
    \ ~= to!string(i);\n                break;\n            }\n        }\n    }\n\
    \    sort(out);\n    for(int i=0;i<out.length;i++)\n    {\n        out[i] = numeral[out[i].to!int];\n\
    \    }\n    return join(out,\" \");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qspqb92.d(15): Error: basic type expected, not `out`\\n/tmp/tmp9qspqb92.d(15):\
    \ Error: no identifier for declarator `_error_`\\n/tmp/tmp9qspqb92.d(15): Error:\
    \ found `out` instead of statement\\n/tmp/tmp9qspqb92.d(16): Error: no identifier\
    \ for declarator `s`\\n/tmp/tmp9qspqb92.d(22): Error: found `out` instead of statement\\\
    n/tmp/tmp9qspqb92.d(27): Error: expression expected, not `out`\\n/tmp/tmp9qspqb92.d(28):\
    \ Error: expression expected, not `out`\\n/tmp/tmp9qspqb92.d(30): Error: found\
    \ `out` instead of statement\\n/tmp/tmp9qspqb92.d(32): Error: expression expected,\
    \ not `out`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qspqb92.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    import std.conv;\n    import std.format;\n    import std.array;\n \
    \   import std.range;\n    import std.traits;\n    import std.algorithm;\n   \
    \ import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.traits;\n    import std.algorithm;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.traits;\n    import std.algorithm;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.traits;\n    import\
    \ std.algorithm;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.traits;\n    import std.algorithm;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.traits;\n    import std.algorithm;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.traits;\n    import std.algorithm;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.traits;\n    import\
    \ std.algorithm;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.traits;\n    import std.algorithm;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.traits;\n    import std.algorithm;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.traits;\n    import std.algorithm;\n    import std.std\nunittest\n{\n  \
    \  alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n \
    \   assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five\
    \ nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppi203psh.d(80): Error: `;` expected\\n/tmp/tmppi203psh.d(90):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppi203psh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    return numbers.split().sort!((a, b) => to!int(a) < to!int(b)).join();\n\
    }\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0f_es_4h.d(13): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f_es_4h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    string[] numeral = [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n    // check if there is\
    \ a number not in numeral\n    foreach(number; numbers.split())\n    {\n     \
    \   assert(number in numeral);\n    }\n    auto sorted_indexes = numbers.split().map!(x\
    \ => \"zero one two three four five six seven eight nine\".indexOf(x)).array;\n\
    \    std.algorithm.sort(sorted_indexes);\n    return numeral.only(sorted_indexes).join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2fl0pis.d(15): Error: no property `split` for type `string`\\\
    n/tmp/tmpy2fl0pis.d(19): Error: no property `split` for type `string`\\n/tmp/tmpy2fl0pis.d(20):\
    \ Error: undefined identifier `algorithm` in package `std`\\n/tmp/tmpy2fl0pis.d(21):\
    \ Error: no property `only` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpy2fl0pis.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    int[] nums;\n    foreach(i, word; numbers.split(\" \"))\n    {\n  \
    \      if(word == \"zero\") nums ~= 0;\n        else if(word == \"one\") nums\
    \ ~= 1;\n        else if(word == \"two\") nums ~= 2;\n        else if(word ==\
    \ \"three\") nums ~= 3;\n        else if(word == \"four\") nums ~= 4;\n      \
    \  else if(word == \"five\") nums ~= 5;\n        else if(word == \"six\") nums\
    \ ~= 6;\n        else if(word == \"seven\") nums ~= 7;\n        else if(word ==\
    \ \"eight\") nums ~= 8;\n        else if(word == \"nine\") nums ~= 9;\n    }\n\
    \    auto sortedNums = nums.sort();\n    string[] numStrings;\n    foreach(n;\
    \ sortedNums)\n    {\n        if(n == 0) numStrings ~= \"zero\";\n        else\
    \ if(n == 1) numStrings ~= \"one\";\n        else if(n == 2) numStrings ~= \"\
    two\";\n        else if(n == 3) numStrings ~= \"three\";\n        else if(n ==\
    \ 4) numStrings ~= \"four\";\n        else if(n == 5) numStrings ~= \"five\";\n\
    \        else if(n == 6) numStrings ~= \"six\";\n        else if(n == 7) numStrings\
    \ ~= \"seven\";\n        else if(n == 8) numStrings ~= \"eight\";\n        else\
    \ if(n == 9) numStrings ~= \"nine\";\n    }\n    return join(numStrings, \" \"\
    );\n}\n/*\n Guess the number is a word puzzle. The solution is a well-known phrase.\n\
    \    The solution is the same every time. \n    You are given a list of the words\
    \ in the solution in random order.\n    You are also given a list of the words\
    \ in the solution's hint in random order.\n    You must match each word in the\
    \ hint to a word in the solution.\n    Return the solution with spaces in between\
    \ the words.\n    >>> puzzle = ['\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiinbuxc9.d(44): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiinbuxc9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    auto tokens = tokenize(numbers, \" \");\n    sort(tokens);\n    return\
    \ to!string(tokens);\n}\nunittest \n{\n    // @assert(sort_numbers(\"one two three\"\
    ) == \"one two three\");\n    assert(sort_numbers(\"three one five\") == \"one\
    \ three five\");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0sd_117z.d(13): Error: undefined identifier `tokenize`\\n/tmp/tmp0sd_117z.d(14):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp0sd_117z.d(15):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sd_117z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    string[] num_string = numbers.split;\n    int[] num_int = new int[num_string.length];\n\
    \    foreach(i, word; num_string)\n    {\n        if(word == \"zero\")\n     \
    \       num_int[i] = 0;\n        else if(word == \"one\")\n            num_int[i]\
    \ = 1;\n        else if(word == \"two\")\n            num_int[i] = 2;\n      \
    \  else if(word == \"three\")\n            num_int[i] = 3;\n        else if(word\
    \ == \"four\")\n            num_int[i] = 4;\n        else if(word == \"five\"\
    )\n            num_int[i] = 5;\n        else if(word == \"six\")\n           \
    \ num_int[i] = 6;\n        else if(word == \"seven\")\n            num_int[i]\
    \ = 7;\n        else if(word == \"eight\")\n            num_int[i] = 8;\n    \
    \    else if(word == \"nine\")\n            num_int[i] = 9;\n    }\n    num_int.sort();\n\
    \    num_string = new string[num_int.length];\n    foreach(i, n; num_int)\n  \
    \  {\n        if(n == 0)\n            num_string[i] = \"zero\";\n        else\
    \ if(n == 1)\n            num_string[i] = \"one\";\n        else if(n == 2)\n\
    \            num_string[i] = \"two\";\n        else if(n == 3)\n            num_string[i]\
    \ = \"three\";\n        else if(n == 4)\n            num_string[i] = \"four\"\
    ;\n        else if(n == 5)\n            num_string[i] = \"five\";\n        else\
    \ if(n == 6)\n            num_string[i] = \"six\";\n        else if(n == 7)\n\
    \            num_string[i] = \"seven\";\n        else if(n == 8)\n           \
    \ num_string[i] = \"eight\";\n        else if(n == 9)\n            num_string[i]\
    \ = \"nine\";\n    }\n   \nunittest\n{\n    alias candidate = sort_numbers;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt36ky8_t.d(64): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt36ky8_t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    int[] array = map!(tolower,split(numbers)).map!(n => to!int(n));\n\
    \    sort(array);\n    return array.map!(to!string).join(\" \");\n}\npragma(msg,sort_numbers(\"\
    three one five\"));\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptsgkuaft.d(13): Error: template instance `map!(tolower, split(numbers))`\
    \ template `map` is not defined\\n/tmp/tmptsgkuaft.d(14): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmptsgkuaft.d(15): Error: no property\
    \ `map` for type `int[]`\\n/tmp/tmptsgkuaft.d(17):        called from here: `sort_numbers(\"\
    three one five\")`\\n/tmp/tmptsgkuaft.d(17):        while evaluating `pragma(msg,\
    \ sort_numbers(\"three one five\"))`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmptsgkuaft.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    enum Numbers = [ \"zero\", \"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\" ];\n    auto nums = numbers.split;\n\
    \    nums.sort!((a, b) => Numbers.indexOf(a) > Numbers.indexOf(b));\n    return\
    \ nums.join(\" \");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\"\
    );\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\");\n\
    \    assert(candidate(\"six five four three two one zero\") == \"zero one two\
    \ three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85xyv53d.d(14): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85xyv53d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    string[] num = numbers.split;\n    int[] numeralValues = new int[num.length];\n\
    \    foreach(i, numeral; num) {\n        numeralValues[i] = to!int(numeral);\n\
    \    }\n    sort(numeralValues);\n    string sortedNumerals = numeralValues.join(\"\
    \ \");\n    return sortedNumerals;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9m98yye.d(13): Error: no property `split` for type `string`\\\
    n/tmp/tmpu9m98yye.d(16): Error: template instance `to!int` template `to` is not\
    \ defined, did you mean No?\\n/tmp/tmpu9m98yye.d(18): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmpu9m98yye.d(19): Error: no property\
    \ `join` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpu9m98yye.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    // >>>> YOUR CODE GOES HERE <<<<\n    string[] numbers_array = numbers.split();\n\
    \    string[] numbers_int = new string[numbers_array.length];\n    foreach(idx,\
    \ str; numbers_array)\n    {\n        numbers_int[idx] = to!string(cardinal_to_int(str));\n\
    \    }\n    sort(numbers_int);\n    foreach(idx, str; numbers_int)\n    {\n  \
    \      numbers_int[idx] = int_to_cardinal(to!int(str));\n    }\n    return numbers_int.join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6e4hdus1.d(14): Error: no property `split` for type `string`\\\
    n/tmp/tmp6e4hdus1.d(18): Error: template instance `to!string` template `to` is\
    \ not defined, did you mean No?\\n/tmp/tmp6e4hdus1.d(20): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmp6e4hdus1.d(23): Error: undefined\
    \ identifier `int_to_cardinal`\\n/tmp/tmp6e4hdus1.d(25): Error: no property `join`\
    \ for type `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e4hdus1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    int[] nums;\n    foreach(num; numbers.split)\n    {\n        nums ~=\
    \ to!int(num);\n    }\n    nums.sort();\n    string result;\n    foreach(num;\
    \ nums)\n    {\n        result ~= num;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three\
    \ five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv9lp0330.d(14): Error: no property `split` for type `string`\\\
    n/tmp/tmpv9lp0330.d(18): Error: no property `sort` for type `int[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9lp0330.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    // fill in your code here\n    // you can also create a helper function\
    \ if you need it\n    return sort(numbers.split(\" \"), (a, b) => getNum(a) >\
    \ getNum(b)).join(\" \");\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpli9iuc75.d(15): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpli9iuc75.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    enum ordinal = enum {zero = 0, one = 1, two = 2, three = 3, four =\
    \ 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9};\n    immutable int[]\
    \ nums = sorted(numbers.split.map!((immutable string i) => to!int(i)).array.idup);\n\
    \    foreach(immutable int num; nums)\n    {\n        foreach(immutable string\
    \ i; numbers.split)\n        {\n            if(num == to!int(i))\n           \
    \ {\n                num = ordinal.init[num];\n                break;\n      \
    \      }\n        }\n    }\n    return nums.map!((immutable int i) => to!string(i)).join;\n\
    }\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjnvlzir.d(13): Error: expression expected, not `enum`\\n/tmp/tmpqjnvlzir.d(13):\
    \ Error: semicolon expected following auto declaration, not `{`\\n/tmp/tmpqjnvlzir.d(13):\
    \ Error: found `}` when expecting `;` following statement\\n/tmp/tmpqjnvlzir.d(13):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\n/tmp/tmpqjnvlzir.d(28):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqjnvlzir.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    string[] words = numbers.split;\n    string[] res = new string[];\n\
    \    int[] nums = new int[];\n    foreach(word; words) {\n        switch(word)\
    \ {\n            case \"zero\": nums ~= 0; break;\n            case \"one\": nums\
    \ ~= 1; break;\n            case \"two\": nums ~= 2; break;\n            case\
    \ \"three\": nums ~= 3; break;\n            case \"four\": nums ~= 4; break;\n\
    \            case \"five\": nums ~= 5; break;\n            case \"six\": nums\
    \ ~= 6; break;\n            case \"seven\": nums ~= 7; break;\n            case\
    \ \"eight\": nums ~= 8; break;\n            case \"nine\": nums ~= 9; break;\n\
    \        }\n    }\n    nums.sort;\n    foreach(num; nums) {\n        switch(num)\
    \ {\n            case 0: res ~= \"zero\"; break;\n            case 1: res ~= \"\
    one\"; break;\n            case 2: res ~= \"two\"; break;\n            case 3:\
    \ res ~= \"three\"; break;\n            case 4: res ~= \"four\"; break;\n    \
    \        case 5: res ~= \"five\"; break;\n            case 6: res ~= \"six\";\
    \ break;\n            case 7: res ~= \"seven\"; break;\n            case 8: res\
    \ ~= \"eight\"; break;\n            case 9: res ~= \"nine\"; break;\n        }\n\
    \    }\n    return res.join(\" \");\n}\n \n/*\n    Input is a string of semicolon-delimited\
    \ pair of words and\n    any number of spaces between the semicolon and the word\
    \ pairs.\n    Return the string of pairs sorted alphabetically\n    >>> sort_pairs('pair1;\
    \ pair2; pair3')\n    'pair1; pair2; pair3'\n*/\nstring sort_pairs(string pairs)\
    \ \n{\n    string[] pairs_list = pairs.split(\";\");\n    pairs_list.sort;\n \
    \   return pairs_list.join(\"; \");\n}\n \n \n/*\n    Input is a space-delimited\n\
    unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
    three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero\
    \ four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\");\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7k1pjtte.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k1pjtte.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n  string[] values = numbers.split(\" \");\n  int[] numbs = [values.length];\n\
    \  foreach(index, value; values) {\n      switch(value) {\n          case \"zero\"\
    :\n              numbs[index] = 0;\n              break;\n          case \"one\"\
    :\n              numbs[index] = 1;\n              break;\n          case \"two\"\
    :\n              numbs[index] = 2;\n              break;\n          case \"three\"\
    :\n              numbs[index] = 3;\n              break;\n          case \"four\"\
    :\n              numbs[index] = 4;\n              break;\n          case \"five\"\
    :\n              numbs[index] = 5;\n              break;\n          case \"six\"\
    :\n              numbs[index] = 6;\n              break;\n          case \"seven\"\
    :\n              numbs[index] = 7;\n              break;\n          case \"eight\"\
    :\n              numbs[index] = 8;\n              break;\n          case \"nine\"\
    :\n              numbs[index] = 9;\n              break;\n      }\n  }\n  numbs.sort;\n\
    \  string[] ret = new string[numbs.length];\n  foreach(index, value; numbs) {\n\
    \      switch(value) {\n          case 0:\n              ret[index] = \"zero\"\
    ;\n              break;\n          case 1:\n              ret[index] = \"one\"\
    ;\n              break;\n          case 2:\n              ret[index] = \"two\"\
    ;\n              break;\n          case 3:\n              ret[index] = \"three\"\
    ;\n              break;\n          case 4:\n              ret[index] = \"four\"\
    ;\n              break;\n          case 5:\n              ret[index] = \"five\"\
    ;\n              break;\n          case 6:\n              ret[index] = \"six\"\
    ;\n              break;\n          case 7:\n              ret[index] = \"seven\"\
    ;\n              break;\n          case 8:\n              ret[index] = \"eight\"\
    ;\n              break;\n          case 9:\n              ret[index] = \"nine\"\
    ;\n              break;\n      }\n  }\n  return ret.join(\" \");\n}\n/*\nInput\
    \ is a string of digits and hyphens '\nunittest\n{\n    alias candidate = sort_numbers;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"\
    three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n\
    \    assert(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\");\n    assert(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2c3kne8z.d(87): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c3kne8z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \n*/\nstring sort_numbers(string numbers)\
    \ \n{\n    string words[] = numbers.split();\n    ubyte nums[words.length];\n\
    \    foreach(i, word; words)\n    {\n        nums[i] = translate(word);\n    }\n\
    \    nums.sort();\n    string ret;\n    foreach(num; nums)\n    {\n        ret\
    \ ~= reverse_translate(num) ~ \" \";\n    }\n    return ret.idup.strip();\n}\n\
    // convert a numberal string to its numeric value\nubyte translate(string numeral)\n\
    {\n    switch(numeral)\n    {\n        case \"zero\": return 0;\n        case\
    \ \"one\": return 1;\n        case \"two\": return 2;\n        case \"three\"\
    : return 3;\n        case \"four\": return 4;\n        case \"five\": return 5;\n\
    \        case \"six\": return 6;\n        case \"seven\": return 7;\n        case\
    \ \"eight\": return 8;\n        case \"nine\": return 9;\n    }\n    assert(0);\n\
    }\n// convert a numeric value to its numeral string\nstring reverse_translate(ubyte\
    \ num)\n{\n    switch(num)\n    {\n        case 0: return \"zero\";\n        case\
    \ 1: return \"one\";\n        case 2: return \"two\";\n        case 3: return\
    \ \"three\";\n        case 4: return \"four\";\n        case 5: return \"five\"\
    ;\n        case 6: return \"six\";\n        case 7: return \"seven\";\n      \
    \  case 8: return \"eight\";\n        case 9: return \"nine\";\n    }\n    assert(0);\n\
    }\nunittest\n{\n    assert(sort_numbers(\"three one five\") == \"one three five\"\
    );\n    assert(sort_numbers(\"one three two\") == \"one two three\");\n    assert(sort_numbers(\"\
    one two three\") == \"one two three\");\n    assert(sort_numbers(\"two one three\"\
    ) == \"one two three\");\n    assert(sort_numbers(\"three one two\") == \"one\
    \ two three\");\n    assert(sort_numbers(\"three two one\") == \"one two three\"\
    );\n    assert(sort_numbers(\"two three one\") == \"\nunittest\n{\n    alias candidate\
    \ = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three\
    \ five nine\");\n    assert(candidate(\"five zero four seven nine eight\") ==\
    \ \"zero four five seven eight nine\");\n    assert(candidate(\"six five four\
    \ three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxgf672at.d(13): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `string[] words`\\n/tmp/tmpxgf672at.d(14): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `ubyte[words.length] nums`\\n/tmp/tmpxgf672at.d(76):\
    \ Error: Implicit string concatenation is deprecated, use \"\\\\x0aunittest\\\\\
    x0a{\\\\x0a    alias candidate = sort_numbers;\\\\x0a\\\\x0a    assert(candidate(\"\
    \ ~ \") == \" instead\\n/tmp/tmpxgf672at.d(76): Error: Implicit string concatenation\
    \ is deprecated, use \") == \" ~ \");\\\\x0a    assert(candidate(\" instead\\\
    n/tmp/tmpxgf672at.d(77): Error: found `three` when expecting `)`\\n/tmp/tmpxgf672at.d(77):\
    \ Error: found `\") == \"` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(77):\
    \ Error: found `\");\\\\x0a    assert(candidate(\"` when expecting `;` following\
    \ statement\\n/tmp/tmpxgf672at.d(78): Error: found `five` when expecting `;` following\
    \ statement\\n/tmp/tmpxgf672at.d(78): Error: found `\") == \"` when expecting\
    \ `;` following statement\\n/tmp/tmpxgf672at.d(78): Error: found `five` when expecting\
    \ `;` following statement\\n/tmp/tmpxgf672at.d(78): Error: found `\");\\\\x0a\
    \    assert(candidate(\"` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `zero` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `seven` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `eight` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `zero` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `five` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `eight` when expecting `;` following statement\\n/tmp/tmpxgf672at.d(79):\
    \ Error: found `\");\\\\x0a    assert(candidate(\"` when expecting `;` following\
    \ statement\\n/tmp/tmpxgf672at.d(80): Error: found `five` when expecting `;` following\
    \ statement\\n/tmp/tmpxgf672at.d(80): Error: found `three` when expecting `;`\
    \ following statement\\n/tmp/tmpxgf672at.d(80): Error: found `one` when expecting\
    \ `;` following statement\\n/tmp/tmpxgf672at"
  exit_code: 1
  status: SyntaxError
