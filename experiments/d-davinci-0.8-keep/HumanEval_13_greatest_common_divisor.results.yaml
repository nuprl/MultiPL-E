name: HumanEval_13_greatest_common_divisor
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    /*\n        a, b: two integers\n    */\n    if (b == 0)\n\
    \    {\n        return a;\n    } \n    else \n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0 && b == 0)\n    {\n        return 1;\n    }\n\
    \    while (b != 0)\n    {\n        auto t = b;\n        b = a % b;\n        a\
    \ = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long t;\n    while (b != 0) {\n        t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    /*\n    if (b != 0)\n        return greatest_common_divisor(b,\
    \ a % b);\n    else\n        return a;\n    */\n    //return opSlice(a, b);\n\
    \    return gcd(a, b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnbhepot3.d(20): Error: undefined identifier `gcd`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbhepot3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto x = max(a, b);\n    auto y = min(a, b);\n    while\
    \ (y != 0) {\n        auto t = y;\n        y = x % y;\n        x = t;\n    }\n\
    \    return x;\n}\n/*\n Write your own @fibonacci@ function, which returns a tuple\
    \ of numbers,\n where each number is a sum of the previous two numbers in the\
    \ tuple\n (starting with (0, 1) as the first two elements of the tuple) and the\
    \ last\n number in the tuple is the first number, which is greater than the second\n\
    \ argument to @fibonacci@.\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo207n62x.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo207n62x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long max;\n    long min;\n    if (a >= b) \n    {\n    \
    \    max = a;\n        min = b;\n    }\n    else \n    {\n        max = b;\n \
    \       min = a;\n    }\n    if (min == 0) \n    {\n        return max;\n    }\n\
    \    else \n    {\n        return greatest_common_divisor(min, max % min);\n \
    \   }\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(4, 6)\n    12\n    >>> least_common_multiple(7, 9)\n \
    \   63\n*/\nlong least_common_multiple(long a, long b) \n{\n    return (a * b)\
    \ / greatest_common_divisor(a, b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a > b)\n        swap(a, b);\n    while (a != 0)\n  \
    \  {\n        auto r = b % a;\n        b = a;\n        a = r;\n    }\n    return\
    \ b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqv1chgu.d(14): Error: undefined identifier `swap`, did you mean\
    \ template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,\
    \ Targets))`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqv1chgu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    const auto s = min(a, b);\n    const auto l = max(a, b);\n\
    \    return s == 0 ? l : greatest_common_divisor(s, l % s);\n}\n/*\nReturn a least\
    \ common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n\
    \    15\n    >>> least_common_multiple(25, 15)\n    75\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5iszh9mp.d(17): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5iszh9mp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    /*\n    Euclidean algorithm \n    https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \    */\n    long tmp;\n    while (b != 0) {\n       tmp = a % b;\n       a =\
    \ b;\n       b = tmp;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // BEGIN SOLUTION\n    while (b != 0) \n    {\n        auto\
    \ tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return a;\n    //\
    \ END SOLUTION\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto divisor = min(a, b);\n    while (a % divisor != 0 ||\
    \ b % divisor != 0) {\n        divisor--;\n    }\n    return divisor;\n}\nlong\
    \ least_common_multiple(long a, long b)\n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_let4wec.d(13): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_let4wec.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        auto temp = a;\n        a =\
    \ b;\n        b = temp;\n    }\n    assert(a >= b);\n    if (b == 0) \n    {\n\
    \        return a;\n    }\n    if (isEven(a) && isEven(b)) \n    {\n        return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    }\n    if (isEven(a) && !isEven(b))\
    \ \n    {\n        return greatest_common_divisor(a / 2, b);\n    }\n    if (!isEven(a)\
    \ && isEven(b)) \n    {\n        return greatest_common_divisor(a, b / 2);\n \
    \   }\n    return greatest_common_divisor((a - b) / 2, b);\n}\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8nf3rak4.d(24): Error: undefined identifier `isEven`\\n/tmp/tmp8nf3rak4.d(24):\
    \ Error: undefined identifier `isEven`\\n/tmp/tmp8nf3rak4.d(28): Error: undefined\
    \ identifier `isEven`\\n/tmp/tmp8nf3rak4.d(28): Error: undefined identifier `isEven`\\\
    n/tmp/tmp8nf3rak4.d(32): Error: undefined identifier `isEven`\\n/tmp/tmp8nf3rak4.d(32):\
    \ Error: undefined identifier `isEven`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8nf3rak4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    for (;;) \n    {\n        c = a % b;\n    \
    \    if (c == 0) return b;\n        a = b;\n        b = c;\n    }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // greatest common divisor\n    long gcd = 1;\n    for (long\
    \ x = 1; x <= a && x <= b; x++) \n    {\n        if (a % x == 0 && b % x == 0)\
    \ \n        {\n            gcd = x;\n        }\n    }\n    return gcd;\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    for (;;) {\n        if (a == 0) return b;\n\
    \        b %= a;\n        if (b == 0) return a;\n        a %= b;\n    }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) \n    {\n        return b;\n    } \n    else\
    \ if (b == 0) \n    {\n        return a;\n    }\n    else \n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n   \
    \ 1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long gcd = 0;\n    long remainder = 0;\n    long i = 1;\n\
    \    long j = 1;\n    long result = 0;\n    if(b == 0){\n      gcd = a;\n    }\n\
    \    else{\n      remainder = a % b;\n      gcd = greatest_common_divisor(b, remainder);\n\
    \    }\n    return gcd;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
