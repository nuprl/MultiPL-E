name: HumanEval_98_count_upper
language: d
prompt: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
  \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
  \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n \
  \   \n*/\nlong count_upper(string s) \n"
tests: "unittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
  aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
  dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\"\
  ) == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") ==\
  \ 2L);\n}\nvoid main(){}"
completions: ["{\n    long counter = 0;\n    foreach(index, character; s)\n    {\n\
    \        if (index % 2 == 0 && character >= 'A' && character <= 'Z')\n       \
    \ {\n            counter++;\n        }\n    }\n    return counter;\n}", "{\n \
    \   long counter = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n   \
    \     if (isupper(s[i]))\n        {\n            switch (s[i])\n            {\n\
    \                case 'A':\n                case 'E':\n                case 'I':\n\
    \                case 'O':\n                case 'U':\n                    counter++;\n\
    \                    break;\n            }\n        }\n    }\n    return counter;\n\
    }", "{\n    enum vowels = \"AEIOU\";\n    long count = 0;\n    foreach(i, c; s)\
    \ \n    {\n        if (i % 2 == 0 && vowels.canFind(c)) \n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "{\n    long num = 0;\n\
    \    long i = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U')\n        {\n            if((i%2) == 0)\n \
    \           {\n                num++;\n            }\n        }\n        i++;\n\
    \    }\n    return num;\n}", "{\n    long n = s.length;\n    long count = 0;\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n  return reduce!q{a + (q[0] == 'A' || q[0] == 'E' ||\
    \ q[0] == 'I' || q[0] == 'O' || q[0] == 'U') ? 1 : 0}(s.enumerate().filter!(i\
    \ => i[1] % 2 == 0));\n}", "{\n    uint len = s.length;\n    long cnt = 0;\n \
    \   for (uint i = 0; i < len; i+=2)\n    {\n        switch (s[i])\n        {\n\
    \            case 'A':\n            case 'E':\n            case 'I':\n       \
    \     case 'O':\n            case 'U':\n                cnt++;\n             \
    \   break;\n        }\n    }\n    return cnt;\n}", "{\n    int count = 0;\n  \
    \  string vowels = \"AEIOU\";\n    foreach(i, c; s) \n    {\n        if(i % 2\
    \ == 0 && indexOf(vowels, toupper(c)) != -1)\n            count++;\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(i, char c; s)\n   \
    \ {\n        if (i % 2 == 0 && isupper(c))\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(i, c; s)\n    {\n        if(isEven(i)\
    \ && isUpper(c))\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(immutable char c, immutable\
    \ size_t index; s)\n    {\n        if(index % 2 == 0 && is_upper(c))\n       \
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ ret = 0;\n    foreach( immutable index, immutable c; s ) \n    {\n        //\
    \ short circuit evaluation, index % 2 == 0 first\n        if( index % 2 == 0 &&\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') )\n            ret++;\n\
    \    }\n    return ret;\n}", "{\n    return 0;\n}", "{\n    long upperCount =\
    \ 0;\n    long positionCounter = 0;\n    int sLength = s.length;\n    foreach(element;\
    \ s)\n    {\n        if(positionCounter%2 == 0)\n        {\n            if(element\
    \ == 'A' || element == 'E' || element == 'I' || element == 'O' || element == 'U')\n\
    \            {\n                upperCount++;\n            }\n        }\n    \
    \    positionCounter++;\n    }\n    return upperCount;\n}", "{\n    long count\
    \ = 0;\n    foreach( i; 0 .. s.length )\n    {\n        if( i % 2 == 0 && isUpper(s[i])\
    \ )\n            count++;\n    }\n    return count;\n}", "{\n    long int counter\
    \ = 0;\n    long int i = 0;\n    long int j = 1;\n    long int length = s.length;\n\
    \    for (; i < length; i += 2)\n    {\n        switch (s[i])\n        {\n   \
    \         case 'A': counter++; break;\n            case 'E': counter++; break;\n\
    \            case 'I': counter++; break;\n            case 'O': counter++; break;\n\
    \            case 'U': counter++; break;\n        }\n    }\n    return counter;\n\
    }", "{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i += 2)\n  \
    \  {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i\
    \ += 2)\n    {\n        char c = s[i];\n        if (c >= 'A' && c <= 'Z')\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(i,c; s)\n    {\n        if(i % 2 == 0 &&\n \
    \           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \      count++;\n    }\n    return count;\n}", "{\n    const long vowels = ['A',\
    \ 'E', 'I', 'O', 'U'];\n    long result = 0;\n    foreach(i, c; s)\n    {\n  \
    \      if(i % 2 == 0 && c in vowels)\n            result++;\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
