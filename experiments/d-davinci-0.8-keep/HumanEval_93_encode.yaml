name: HumanEval_93_encode
language: d
prompt: "import std.math;\n/*\n\n    Write a function that takes a message, and encodes\
  \ in such a \n    way that it swaps case of all letters, replaces all vowels in\
  \ \n    the message with the letter that appears 2 places ahead of that \n    vowel\
  \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n  \
  \  >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS\
  \ KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n"
tests: "unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
  ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
  YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C\
  \ MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW\
  \ wHcT Tq wRkTg\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(char c; message) \n    {\n\
    \        if (c >= 'a' && c <= 'z')\n            result ~= to!char(c - 'a' + 'A');\n\
    \        else if (c >= 'A' && c <= 'Z')\n            result ~= to!char(c - 'A'\
    \ + 'a');\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n            result ~= to!char(c + 2);\n        else if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            result ~= to!char(c\
    \ + 2);\n        else\n            result ~= c;\n    }\n    return result;\n}",
  "{\n    foreach(int i, char c; message)\n    {\n        if(c == 'a')\n         \
    \   message[i] = 'c';\n        else if(c == 'e')\n            message[i] = 'g';\n\
    \        else if(c == 'i')\n            message[i] = 'k';\n        else if(c ==\
    \ 'o')\n            message[i] = 'q';\n        else if(c == 'u')\n           \
    \ message[i] = 's';\n        else if(c == 'A')\n            message[i] = 'C';\n\
    \        else if(c == 'E')\n            message[i] = 'G';\n        else if(c ==\
    \ 'I')\n            message[i] = 'K';\n        else if(c == 'O')\n           \
    \ message[i] = 'Q';\n        else if(c == 'U')\n            message[i] = 'S';\n\
    \        else if(c == ' ')\n            message[i] = ' ';\n        else\n    \
    \        message[i] = toUpper(c);\n    }\n    return message;\n}", "{\n    string\
    \ result = \"\";\n    for (int i = 0; i < message.length; i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            result +=\
    \ c ^ 0x20;\n        } else if (c >= 'A' && c <= 'Z') {\n            result +=\
    \ c ^ 0x20;\n        } else {\n            result += c;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string messageNew = \"\";\n    foreach(char c;\
    \ message)\n    {\n        if (c == 'a') {\n            messageNew ~= 'c';\n \
    \       } else if (c == 'A') {\n            messageNew ~= 'C';\n        } else\
    \ if (c == 'e') {\n            messageNew ~= 'g';\n        } else if (c == 'E')\
    \ {\n            messageNew ~= 'G';\n        } else if (c == 'i') {\n        \
    \    messageNew ~= 'k';\n        } else if (c == 'I') {\n            messageNew\
    \ ~= 'K';\n        } else if (c == 'o') {\n            messageNew ~= 'q';\n  \
    \      } else if (c == 'O') {\n            messageNew ~= 'Q';\n        } else\
    \ if (c == 'u') {\n            messageNew ~= 'w';\n        } else if (c == 'U')\
    \ {\n            messageNew ~= 'W';\n        } else if (c >= 'a' && c <= 'z')\
    \ {\n            messageNew ~= c - 32;\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            messageNew ~= c + 32;\n        } else {\n            messageNew\
    \ ~= c;\n        }\n    }\n    return messageNew;\n}", "{\n    string vowels =\
    \ \"aeiou\";\n    string text = \"\";\n    foreach(char c; message)\n    {\n \
    \       if(isalpha(c))\n        {\n            char n = c;\n            n = tolower(n);\n\
    \            if(n in vowels)\n            {\n                int i = vowels.indexOf(n);\n\
    \                i = (i + 2) % vowels.length;\n                n = vowels[i];\n\
    \            }\n            if(isupper(c))\n                n = toupper(n);\n\
    \            text ~= n;\n        }\n        else\n            text ~= c;\n   \
    \ }\n    return text;\n}", "{\n    string coded = \"\";\n    char tmp;\n    foreach(element;\
    \ message)\n    {\n        tmp = element;\n        //element = toupper(element);\n\
    \        if (isupper(element))\n        {\n            element = tolower(element);\n\
    \        }\n        else\n        {\n            element = toupper(element);\n\
    \        }\n        switch(element)\n        {\n            case 'a':\n      \
    \          element = 'c';\n                break;\n            case 'e':\n   \
    \             element = 'g';\n                break;\n            case 'i':\n\
    \                element = 'k';\n                break;\n            case 'o':\n\
    \                element = 'q';\n                break;\n            case 'u':\n\
    \                element = 'y';\n                break;\n            case 'A':\n\
    \                element = 'C';\n                break;\n            case 'E':\n\
    \                element = 'G';\n                break;\n            case 'I':\n\
    \                element = 'K';\n                break;\n            case 'O':\n\
    \                element = 'Q';\n                break;\n            case 'U':\n\
    \                element = 'Y';\n                break;\n            default:\n\
    \                element = tmp;\n                break;\n        }\n        coded\
    \ ~= element;\n    }\n    return coded;\n}", "{\n    string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    string vowels = \"AEIOU\";\n    string output = \"\";\n    int maxLen =\
    \ message.length;\n    string[] vowelsArr = vowels.split();\n    string[] alphabetArr\
    \ = alphabet.split();\n    foreach(string char; message.split())\n    {\n    \
    \    if(char == char.toupper())\n        {\n            output ~= char.tolower();\n\
    \        }\n        else\n        {\n            output ~= char.toupper();\n \
    \       }\n    }\n    foreach(int i; 0..maxLen)\n    {\n        int isVowel =\
    \ 0;\n        foreach(string vowel; vowelsArr)\n        {\n            if(output[i]\
    \ == vowel)\n            {\n                isVowel = 1;\n                break;\n\
    \            }\n        }\n        if(isVowel == 1)\n        {\n            foreach(string\
    \ letter; alphabetArr)\n            {\n                if(output[i] == letter)\n\
    \                {\n                    output[i] = alphabetArr[(alphabetArr.indexOf(letter)\
    \ + 2) % 26];\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return output;\n}", "{\n    message = toupper(message);",
  "{\n    message = toLower(message);\n    int l = message.length;\n    char[] newmsg\
    \ = new char[l];\n    for (int i = 0; i < l; i++)\n    {\n        char c = message[i];\n\
    \        if (c == 'a')\n            newmsg[i] = 'c';\n        else if (c == 'e')\n\
    \            newmsg[i] = 'g';\n        else if (c == 'i')\n            newmsg[i]\
    \ = 'k';\n        else if (c == 'o')\n            newmsg[i] = 'q';\n        else\
    \ if (c == 'u')\n            newmsg[i] = 'y';\n        else\n            newmsg[i]\
    \ = c;\n    }\n    return toUpper(newmsg.join());\n}", "{\n    const string vowels\
    \ = \"aeiouAEIOU\";\n    const string coded_vowels = \"cfilorCFLOR\";\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        auto index = vowels.indexOf(c);\n\
    \        if(index != -1)\n        {\n            // c is a vowel, swap with its\
    \ encoded value\n            result ~= coded_vowels[index];\n        }\n     \
    \   else\n        {\n            // c is not a vowel, swap case\n            result\
    \ ~= to!char(c ^ 32);\n        }\n    }\n    return result;\n}", "{\n    enum\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n    foreach(ch;\
    \ message)\n    {\n        if(tolower(ch) == 'a')\n            ch = 'c';\n   \
    \     else if(tolower(ch) == 'e')\n            ch = 'g';\n        else if(tolower(ch)\
    \ == 'i')\n            ch = 'k';\n        else if(tolower(ch) == 'o')\n      \
    \      ch = 'q';\n        else if(tolower(ch) == 'u')\n            ch = 'w';\n\
    \        else if(tolower(ch) == 'y')\n            ch = 'a';\n        else\n  \
    \      {\n            int index = 0;\n            foreach(c; alphabet)\n     \
    \       {\n                if(tolower(ch) == c)\n                {\n         \
    \           ch = alphabet[(index + 2) % 26];\n                    break;\n   \
    \             }\n                index++;\n            }\n        }\n    }\n \
    \   return message;\n}", "{\n    string alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string Alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string vowels = \"\
    aeiou\";\n    string temp = \"\";\n    foreach(char c; message) {\n        if(c\
    \ in vowels) {\n            c = vowels[(vowels.indexOf(c) + 2) % 5];\n       \
    \ } else if(c in alpha) {\n            c = alpha[(alpha.indexOf(c) + 2) % 26];\n\
    \        } else if(c in Alpha) {\n            c = Alpha[(Alpha.indexOf(c) + 2)\
    \ % 26];\n        }\n        temp ~= c;\n    }\n    return temp;\n}", "{\n   \
    \ message = toLower(message);\n    string result = \"\";\n    foreach(char c;\
    \ message) {\n        char new_c = c;\n        if (c >= 'a' && c <= 'z') {\n \
    \           new_c = c + 2;\n            if (new_c > 'z') {\n                new_c\
    \ -= 26;\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                new_c = c + 1;\n                if (new_c\
    \ > 'z') {\n                    new_c -= 26;\n                }\n            }\n\
    \        }\n        result ~= new_c;\n    }\n    return result;\n}", "{\n    //\
    \ your code here\n}\n```", "{\n    return message;\n}", "{\n    string encode_message\
    \ = \"\";\n    message = toLower(message);\n    string vowels = \"aeiou\";\n \
    \   string next_vowels = \"cfilorux\";\n    //foreach(char c; message) {\n   \
    \ foreach(int i, char c; message) {\n        if(c in vowels) {\n            encode_message\
    \ ~= next_vowels[vowels.indexOf(c)];\n        } else {\n            encode_message\
    \ ~= c;\n        }\n    }\n    return encode_message;\n}\n \n/*\n    You have\
    \ the following data structure:\n    \n    class Pie\n    {\n        int weight;\n\
    \        int type;\n    }\n    \n    Weight is measured in kilograms.\n    Type\
    \ is:\n        1 - Cheese\n        2 - Apple\n        3 - Chocolate\n        4\
    \ - Blueberry\n        5 - Strawberry\n    \n    Write a function that takes an\
    \ array of Pies, and adds up the\n    weight of all pies of a certain type.\n\
    \    \n    Example:\n    \n    >>> sumPie(pies)\n    4\n    \n*/", "{\n    return\
    \ message;\n}", "{\n    string encodeMsg = \"\";\n    message = toLower(message);\n\
    \    foreach(c; message)\n    {\n        if(c == 'a')\n            encodeMsg ~=\
    \ 'c';\n        else if(c == 'e')\n            encodeMsg ~= 'g';\n        else\
    \ if(c == 'i')\n            encodeMsg ~= 'k';\n        else if(c == 'o')\n   \
    \         encodeMsg ~= 'q';\n        else if(c == 'u')\n            encodeMsg\
    \ ~= 'w';\n        else\n            encodeMsg ~= c;\n    }\n    encodeMsg = toUpper(encodeMsg);\n\
    \    return encodeMsg;\n}", "{\n    int messageLength = message.length;\n    int\
    \ i = 0;\n    char vowels[5] = {'a', 'e', 'i', 'o', 'u'};\n    //string codedMessage\
    \ = \"\";\n    string codedMessage = \"\";\n    while (i < messageLength) {\n\
    \        char currentChar = message[i];\n        codedMessage += currentChar;\n\
    \        if (currentChar >= 'a' && currentChar <= 'z')\n            codedMessage[i]\
    \ -= 'a' - 'A';\n        else if (currentChar >= 'A' && currentChar <= 'Z')\n\
    \            codedMessage[i] += 'a' - 'A';\n        if (currentChar == ' ')\n\
    \            continue;\n        for (int j = 0; j < 5; j++) {\n            if\
    \ (currentChar == vowels[j]) {\n                codedMessage[i] = vowels[(j +\
    \ 2) % 5];\n                break;\n            }\n        }\n        i++;\n \
    \   }\n    return codedMessage;\n}", "{\n    string ret = \"\";\n    foreach(c;\
    \ message)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            c\
    \ = toupper(c);\n        }\n        if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        switch(c)\n            {\n                case 'A':\n               \
    \     c = 'C';\n                    break;\n                case 'E':\n      \
    \              c = 'G';\n                    break;\n                case 'I':\n\
    \                    c = 'K';\n                    break;\n                case\
    \ 'O':\n                    c = 'Q';\n                    break;\n           \
    \     case 'U':\n                    c = 'S';\n                    break;\n  \
    \              default:\n                    c += 2;\n                    break;\n\
    \            }\n        }\n        ret ~= c;\n    }\n    return ret;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
