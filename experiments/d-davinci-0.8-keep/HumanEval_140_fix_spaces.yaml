name: HumanEval_140_fix_spaces
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"\
  Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\"\
  \ Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\
  \n    \n*/\nstring fix_spaces(string text) \n"
tests: "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
  Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
  \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
completions: ["{\n    auto str = split(text);\n    string result = \"\";\n    foreach(i,\
    \ ref word; str)\n    {\n        result ~= word;\n        result ~= \"_\";\n \
    \   }\n    if(result.length > 0)\n        result = result[0..$-1];\n    return\
    \ result;\n}", "{\n    string[] words = text.split(\" \");\n    string[] fixedWords\
    \ = text.split(\" \");\n    foreach(i, word; words)\n    {\n        if(word ==\
    \ \"\")\n        {\n            fixedWords[i] = \"-\";\n        }\n        else\n\
    \        {\n            fixedWords[i] = word;\n        }\n    }\n    return fixedWords.join(\"\
    _\");\n}", "{\n    auto result = replace(text, \" \", \"_\");\n    auto p1 = 0;\n\
    \    auto i = 0;\n    for (; i < result.length; ++i)\n    {\n        if (result[i]\
    \ == '_')\n        {\n            p1 = i;\n            break;\n        }\n   \
    \ }\n    auto p2 = p1;\n    for (; i < result.length; ++i)\n    {\n        if\
    \ (result[i] == '_')\n        {\n            p2 = i;\n            if (p2 - p1\
    \ == 2)\n            {\n                result = replace(result, \"_\" ~ repeat(\"\
    _\", p2 - p1 - 1), \"-\");\n            }\n            p1 = p2;\n        }\n \
    \   }\n    return result;\n}", "{\n    auto num = 0;\n    auto str = text.joinMap!((a)\
    \ => (num += a == ' ') > 2 ? \"-\" : \"_\")\n                 .joinMap!((a) =>\
    \ (num += a == ' ') > 2 ? \"-\" : \"_\")\n                 .dup;\n    str.chomp('-');\n\
    \    return str;\n}", "{\n    int count = 0;\n    string result = \"\";\n    foreach(ch;\
    \ text)\n    {\n        if(ch == ' ')\n        {\n            count++;\n     \
    \       if(count == 1)\n            {\n                result ~= \"_\";\n    \
    \        }\n            else if(count > 2)\n            {\n                result\
    \ ~= \"-\";\n            }\n        }\n        else\n        {\n            result\
    \ ~= ch;\n            count = 0;\n        }\n    }\n    return result;\n}", "{\n\
    \    return text.replace(\"  \", \"-\").replace(\" \", \"_\");\n}\n/*", "{\n \
    \   auto temp = replace(text, \" \", \"_\");\n    auto result = replace(temp,\
    \ \"__\", \"-\");\n    return result;\n}", "{\n    auto t = text.replaceAll(\"\
    \  \", \" \");\n    t = t.replaceAll(\" \", \"_\");\n    t = t.replaceAll(\"__\"\
    , \"-\");\n    return t;\n}", "{\n    auto arr = text.split(\" \");\n    auto\
    \ res = \"\";\n    foreach(i, x; arr)\n    {\n        if(x == \"\")\n        {\n\
    \            res ~= \"-\";\n        }\n        else\n        {\n            res\
    \ ~= x;\n        }\n        if(i != arr.length - 1)\n        {\n            res\
    \ ~= \"_\";\n        }\n    }\n    return res;\n}", "{\n    immutable s = text.text;\n\
    \    enum len = s.length;\n    auto r = new string();\n    r.length = len;\n \
    \   auto p = r.ptr;\n    bool multiple = false;\n    foreach(i, c; s)\n    {\n\
    \        if(c == ' ')\n        {\n            if(!multiple)\n            {\n \
    \               multiple = true;\n                *p = '_';\n            }\n \
    \           else\n            {\n                *p = '-';\n            }\n  \
    \      }\n        else\n        {\n            multiple = false;\n           \
    \ *p = c;\n        }\n        p++;\n    }\n    return *r;\n}", "{\n    auto x\
    \ = split(text, \" \");\n    foreach(n, x) {\n        if (x[n] == \"\") {\n  \
    \          x[n] = \"-\";\n        }\n    }\n    return replace(join(x, \"_\"),\
    \ \"__\", \"_\");\n}", "{\n    auto result = text.replace(\" \", \"_\");\n   \
    \ while (result.count(\"  \") > 0)\n    {\n        result = result.replace(\"\
    \  \", \"-\");\n    }\n    return result;\n}\n ", "{\n    string[] split(text,\
    \ ' ');\n    return join(split, '_');\n}", "{\n    auto t = text.length ?\n  \
    \      text.replace(' ', '_') :\n        text;\n    auto d = \"__\";\n    auto\
    \ r = \"--\";\n    auto s = t.replace(d, r);\n    return s;\n}", "{\n    return\
    \ text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}", "{\n    auto result\
    \ = text.replace(\" \", \"_\");\n    while (result.count(\"  \") > 0)\n    {\n\
    \        result = result.replace(\"  \", \"-\");\n    }\n    return result;\n}",
  "{\n    immutable accumulator = [];\n    immutable after_space = false;\n    immutable\
    \ consecutive_spaces = 0;\n    foreach(immutable letter; text) \n    {\n     \
    \   if(letter == ' ') \n        {\n            if(after_space) \n            {\n\
    \                consecutive_spaces++;\n            }\n            else \n   \
    \         {\n                after_space = true;\n                consecutive_spaces\
    \ = 1;\n            }\n        }\n        else \n        {\n            after_space\
    \ = false;\n            if(consecutive_spaces > 2) \n            {\n         \
    \       accumulator ~= repeat(\"-\", consecutive_spaces - 1);\n            }\n\
    \            else if(consecutive_spaces > 0) \n            {\n               \
    \ accumulator ~= repeat(\"_\", consecutive_spaces);\n            }\n         \
    \   consecutive_spaces = 0;\n            accumulator ~= letter;\n        }\n \
    \   }\n    return to!string(accumulator);\n}", "{\n    return text.replace(\"\
    \ \", \"_\").replace(\"  \", \" \").replace(\" \", \"-\");\n}", "{\n    auto r\
    \ = std.regex.replace(text, r\"[ ]+\", (c) => std.string.repeat(\"-\", c.length));\n\
    \    return std.regex.replace(r, r\"[ ]\", \"_\");\n}\n/*\n#import <stdio.h>",
  "{\n    bool spaces_toggle = false;\n    string result = text.idup;\n    foreach(c;\
    \ result) \n    {\n        if(c == ' ') \n        {\n            if(spaces_toggle)\
    \ \n            {\n                c = '-';\n            } \n            else\
    \ \n            {\n                c = '_';\n                spaces_toggle = true;\n\
    \            }\n        } \n        else \n        {\n            spaces_toggle\
    \ = false;\n        }\n    }\n    return result;\n}\n/*\n    In programming, \n\
    \    a palindrome is a sequence of characters \n    which reads the same backward\
    \ as forward. \n    A famous palindrome example is \"A man, a plan, a canal, Panama!\""]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
