name: HumanEval_71_triangle_area
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float area = 0;\n    /*\n        If the sides make\
    \ a valid triangle, then the side with the largest length cannot be\n        greater\
    \ than the sum of the other 2 sides.\n    */\n    if ((a+b) > c && (a+c) > b &&\
    \ (b+c) > a)\n    {\n        /*\n            The area of a triangle with sides\
    \ a, b, and c is calculated using Heron's formula:\n            area = sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \            where s = (a+b+c)/2\n        */\n        float s = (a+b+c)/2.0;\n\
    \        area = sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n    return round(area*100)/100;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1uo3vjjy.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427fed]\\n??:? void tmp1uo3vjjy.__unittest_L38_C1()\
    \ [0x427c1b]\\n??:? void tmp1uo3vjjy.__modtest() [0x427d70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abbe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430200]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fcdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab95]\\n??:? runModuleUnitTests [0x42bb01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42843c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283c3]\\n??:? _d_run_main [0x42832e]\\n??:? main [0x427d83]\\\
    n??:? __libc_start_main [0x74c00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  real a_real = cast(real)a;\n  real b_real = cast(real)b;\n\
    \  real c_real = cast(real)c;\n  if ((a_real + b_real <= c_real) || (a_real +\
    \ c_real <= b_real) || (b_real + c_real <= a_real))\n    return -1;\n  real s\
    \ = (a_real + b_real + c_real) / 2;\n  real area = sqrt(s * (s - a_real) * (s\
    \ - b_real) * (s - c_real));\n  return area;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmpizuux0.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f75]\\n??:? void tmpmpizuux0.__unittest_L26_C1()\
    \ [0x427b9f]\\n??:? void tmpmpizuux0.__modtest() [0x427cf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430170]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab05]\\n??:? runModuleUnitTests [0x42ba71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42834b]\\n??:? _d_run_main [0x4282b6]\\n??:? main [0x427d07]\\\
    n??:? __libc_start_main [0x65ab2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxebj3622.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ee5]\\n??:? void tmpxebj3622.__unittest_L21_C1()\
    \ [0x427ad9]\\n??:? void tmpxebj3622.__modtest() [0x427c68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa75]\\n??:? runModuleUnitTests [0x42b9e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428334]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bb]\\n??:? _d_run_main [0x428226]\\n??:? main [0x427c7b]\\\
    n??:? __libc_start_main [0x1ee94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n  float s = float(a + b + c) / 2;\n  return s > max(a,\
    \ max(b, c)) ? sqrt(s * (s - a) * (s - b) * (s - c)) : -1;\n}\nunittest\n{\n \
    \   alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_9wnpmh.d(18): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_9wnpmh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    auto p = (a + b + c) / 2.0;\n    if (p <= a || p\
    \ <= b || p <= c)\n        return -1;\n    return std.math.sqrt(p * (p - a) *\
    \ (p - b) * (p - c));\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n\
    \    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpokpl1slv.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f25]\\n??:? void tmpokpl1slv.__unittest_L22_C1()\
    \ [0x427b4f]\\n??:? void tmpokpl1slv.__modtest() [0x427ca4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aab5]\\n??:? runModuleUnitTests [0x42ba21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428374]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282fb]\\n??:? _d_run_main [0x428266]\\n??:? main [0x427cb7]\\\
    n??:? __libc_start_main [0x62869554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float f = (a + b + c) / 2.0;\n    float area = sqrt(f\
    \ * (f - a) * (f - b) * (f - c));\n    return area;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp66qbpzp.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ee5]\\n??:? void tmpp66qbpzp.__unittest_L21_C1()\
    \ [0x427ad9]\\n??:? void tmpp66qbpzp.__modtest() [0x427c68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa75]\\n??:? runModuleUnitTests [0x42b9e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428334]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bb]\\n??:? _d_run_main [0x428226]\\n??:? main [0x427c7b]\\\
    n??:? __libc_start_main [0x1347e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float p = (a + b + c) / 2.0;\n    if (p <= min(a,\
    \ min(b, c))) return -1;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpml0ebtr2.d(18): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpml0ebtr2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float s = float(a + b + c) / 2;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area : -1;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8zf72jz1.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmp8zf72jz1.__unittest_L21_C1()\
    \ [0x427b2f]\\n??:? void tmp8zf72jz1.__modtest() [0x427c84]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c97]\\\
    n??:? __libc_start_main [0x77701554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return -1;\n\
    \    if(a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    float\
    \ s = cast(float)(a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    return floor(area * 100) / 100;\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeutotlqx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280ad]\\n??:? void tmpeutotlqx.__unittest_L25_C1()\
    \ [0x427cdb]\\n??:? void tmpeutotlqx.__modtest() [0x427e30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bf17]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42adaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff3d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ad81]\\n??:? runModuleUnitTests [0x42bced]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428483]\\n??:? _d_run_main [0x4283ee]\\n??:? main [0x427e43]\\\
    n??:? __libc_start_main [0x58b14554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a < b + c && b < a + c && c < a + b) \n    {\n\
    \        float s = cast(float)(a + b + c) / 2;\n        float area = sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n        return area;\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm78in_mw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f15]\\n??:? void tmpm78in_mw.__unittest_L25_C1()\
    \ [0x427b3f]\\n??:? void tmpm78in_mw.__modtest() [0x427c94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430110]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aaa5]\\n??:? runModuleUnitTests [0x42ba11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428364]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282eb]\\n??:? _d_run_main [0x428256]\\n??:? main [0x427ca7]\\\
    n??:? __libc_start_main [0x95cf1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    static struct Triangle {\n        this(float a,\
    \ float b, float c) {\n            this.a = a;\n            this.b = b;\n    \
    \        this.c = c;\n        }\n        float a;\n        float b;\n        float\
    \ c;\n    }\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqprnf9si.d(27): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqprnf9si.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b<=c || a+c<=b || b+c<=a) return -1;\n    auto\
    \ s = (a+b+c)/2.0;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nunittest\n{\n  \
    \  alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd42gswp2.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f0d]\\n??:? void tmpd42gswp2.__unittest_L21_C1()\
    \ [0x427b3b]\\n??:? void tmpd42gswp2.__modtest() [0x427c90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430108]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa9d]\\n??:? runModuleUnitTests [0x42ba09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42835c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282e3]\\n??:? _d_run_main [0x42824e]\\n??:? main [0x427ca3]\\\
    n??:? __libc_start_main [0x76ee5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a + b > c && a + c > b && b + c > a) \n    {\n\
    \        double s = (a + b + c) / 2.0;\n        return round(sqrt(s * (s - a)\
    \ * (s - b) * (s - c)) * 100) / 100;\n    }\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n\
    \    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L)\
    \ == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphpx07b9r.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427fcd]\\n??:? void tmphpx07b9r.__unittest_L24_C1()\
    \ [0x427bfb]\\n??:? void tmphpx07b9r.__modtest() [0x427d50]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fcbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab75]\\n??:? runModuleUnitTests [0x42bae1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42841c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283a3]\\n??:? _d_run_main [0x42830e]\\n??:? main [0x427d63]\\\
    n??:? __libc_start_main [0x1ec62554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if(a+b<=c || a+c<=b || b+c<=a) return -1;\n    auto\
    \ s = (a+b+c)/2;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nunittest\n{\n    alias\
    \ candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n  \
    \  assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) ==\
    \ 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsb6q2zfi.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsb6q2zfi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    long s = (a + b + c) / 2;\n    if (a + b > c &&\
    \ a + c > b && b + c > a)\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2nd05jv0.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2nd05jv0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    float area = 0;\n    if(a + b > c && a + c > b &&\
    \ b + c > a)\n    {\n        float s = (a + b + c) / 2.0;\n        area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    }\n    else\n    {\n        area = -1;\n\
    \    }\n    return area;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsb8jq943.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f25]\\n??:? void tmpsb8jq943.__unittest_L29_C1()\
    \ [0x427b53]\\n??:? void tmpsb8jq943.__modtest() [0x427ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430120]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbfd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aab5]\\n??:? runModuleUnitTests [0x42ba21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428374]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282fb]\\n??:? _d_run_main [0x428266]\\n??:? main [0x427cbb]\\\
    n??:? __libc_start_main [0x2a631554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    enum float epsilon = 1e-2;\n    int minLong = min(a,\
    \ min(b, c));\n    int maxLong = max(a, max(b, c));\n    int midLong = a + b +\
    \ c - minLong - maxLong;\n    float heron = (a + b + c) / 2.0;\n    float sqrtVal\
    \ = sqrt(heron * (heron - minLong) * (heron - midLong) * (heron - maxLong));\n\
    \    if (heron <= epsilon || sqrtVal <= epsilon)\n        return -1;\n    return\
    \ sqrtVal;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiu9r8_b5.d(18): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpiu9r8_b5.d(19): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\n/tmp/tmpiu9r8_b5.d(20): Error: cannot implicitly\
    \ convert expression `a + b + c - cast(long)minLong - cast(long)maxLong` of type\
    \ `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu9r8_b5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    double p = (a + b + c) / 2.0;\n    double s = (p\
    \ * (p - a) * (p - b) * (p - c));\n    if (s <= 0)\n        return -1;\n    return\
    \ round(sqrt(s) * 100) / 100;\n}\nunittest\n{\n    alias candidate = triangle_area;\n\
    \n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L)\
    \ == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd_ss31nt.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427fe5]\\n??:? void tmpd_ss31nt.__unittest_L23_C1()\
    \ [0x427c13]\\n??:? void tmpd_ss31nt.__modtest() [0x427d68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abb6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fcd5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab8d]\\n??:? runModuleUnitTests [0x42baf9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428434]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283bb]\\n??:? _d_run_main [0x428326]\\n??:? main [0x427d7b]\\\
    n??:? __libc_start_main [0x263f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    // this should be all of the triangle inequalities:\n\
    \    if (a + b > c && a + c > b && b + c > a)\n    {\n        // using Heron's\
    \ formula\n        auto s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L,\
    \ 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L,\
    \ 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L,\
    \ 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L,\
    \ 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2uubjm8l.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f0d]\\n??:? void tmp2uubjm8l.__unittest_L26_C1()\
    \ [0x427b3b]\\n??:? void tmp2uubjm8l.__modtest() [0x427c90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430108]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa9d]\\n??:? runModuleUnitTests [0x42ba09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42835c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282e3]\\n??:? _d_run_main [0x42824e]\\n??:? main [0x427ca3]\\\
    n??:? __libc_start_main [0xdfacd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4,\
    \ 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long\
    \ a, long b, long c) \n{\n    if (a + b > c && a + c > b && b + c > a)\n    {\n\
    \        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    }\n    return -1;\n}\n/*\n Given the lengths of the three\
    \ sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal\
    \ points if the three sides form a valid triangle. \n    Otherwise return -1\n\
    \    Three sides make a valid triangle when the sum of any two sides is greater\
    \ \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n\
    \    triangle_area(1, 2, 10) == -1\n*/\nfloat triangle_area(Tuple!(long, long,\
    \ long) t) \n{\n    return triangle_area(t[0], t[1], t[2]);\n}\n// Finding the\
    \ area of a triangle with an array of the sides\nfloat triangle_area(int[] sides)\
    \ \n{\n    assert(sides.length == 3);\n    return triangle_area(sides[0], sides[1],\
    \ sides[2]);\n}\nunittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
    \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
    \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
    \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
    \ 2L, 10L) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz0mov6j0.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428d79]\\n??:? void tmpz0mov6j0.__unittest_L44_C1()\
    \ [0x4281a7]\\n??:? void tmpz0mov6j0.__modtest() [0x428730]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430f51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431400]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430edd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c601]\\n??:? runModuleUnitTests [0x42d4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42923c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4291c3]\\n??:? _d_run_main [0x42912e]\\n??:? main [0x428743]\\\
    n??:? __libc_start_main [0x607af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
