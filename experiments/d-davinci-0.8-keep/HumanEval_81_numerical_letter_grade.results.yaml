name: HumanEval_81_numerical_letter_grade
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    float[] gradeC = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0};\n    string[] letter = {\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n    string[]\
    \ result = new string[grades.length];\n    int index = 0;\n    foreach(var grade;\
    \ grades)\n    {\n        foreach(var i; 0..gradeC.length)\n        {\n      \
    \      if(grade >= gradeC[i])\n            {\n                result[index] =\
    \ letter[i];\n                break;\n            }\n        }\n        index++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmproexyav4.d(31): Error: a struct is not a valid initializer for\
    \ a `float[]`\\n/tmp/tmproexyav4.d(32): Error: a struct is not a valid initializer\
    \ for a `string[]`\\n/tmp/tmproexyav4.d(35): Error: undefined identifier `var`\\\
    n/tmp/tmproexyav4.d(37): Error: undefined identifier `var`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmproexyav4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n  string[] letter_grades;\n  foreach(d; grades)\n  {\n    if(d\
    \ >= 4.0)\n    {\n      letter_grades ~= \"A+\";\n    }\n    else if(d > 3.7)\n\
    \    {\n      letter_grades ~= \"A\";\n    }\n    else if(d > 3.3)\n    {\n  \
    \    letter_grades ~= \"A-\";\n    }\n    else if(d > 3.0)\n    {\n      letter_grades\
    \ ~= \"B+\";\n    }\n    else if(d > 2.7)\n    {\n      letter_grades ~= \"B\"\
    ;\n    }\n    else if(d > 2.3)\n    {\n      letter_grades ~= \"B-\";\n    }\n\
    \    else if(d > 2.0)\n    {\n      letter_grades ~= \"C+\";\n    }\n    else\
    \ if(d > 1.7)\n    {\n      letter_grades ~= \"C\";\n    }\n    else if(d > 1.3)\n\
    \    {\n      letter_grades ~= \"C-\";\n    }\n    else if(d > 1.0)\n    {\n \
    \     letter_grades ~= \"D+\";\n    }\n    else if(d > 0.7)\n    {\n      letter_grades\
    \ ~= \"D\";\n    }\n    else if(d > 0.0)\n    {\n      letter_grades ~= \"D-\"\
    ;\n    }\n    else\n    {\n      letter_grades ~= \"E\";\n    }\n  }\n  return\
    \ letter_grades;\n}\n/*\n------------------------------------------------------------------------------\n\
    \t\t\t\t\t\t\tTEST\n------------------------------------------------------------------------------\n\
    */\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqvkxav4u.d(98): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpqvkxav4u.__unittest_L94_C1()\
    \ [0x428799]\\n??:? void tmpqvkxav4u.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0x82d61554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    return grades.map!((x) { return \"E\"; }).array;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjol6bqx9.d(31): Error: no property `map` for type `float[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjol6bqx9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n\tstring[] grade_letters = [\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n\tstring[] grade_result\
    \ = new string[grades.length];\n\tforeach(int i, float g; grades)\n\t{\n\t\tint\
    \ index = cast(int)((g - 0.7) * 10);\n\t\tgrade_result[i] = grade_letters[index];\n\
    \t}\n\treturn grade_result;\n}\n/*\nA number is called tau number if it is divisible\
    \ by the number of its digits.\n    Examples:\n    tau_numbers(108) ==> True (because\
    \ 108 is divisible by 2 which is number of its digits)\n    tau_numbers(1001)\
    \ ==> False (because 1001 is not divisible by 4 which is number of its digits)\n\
    \    tau_numbers(989898) ==> True (because 989898 is divisible by 6 which is number\
    \ of its digits)\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp11z2_lor.d(36): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42960e]\\n??:? immutable(char)[][] tmp11z2_lor.numerical_letter_grade(float[])\
    \ [0x428145]\\n??:? void tmp11z2_lor.__unittest_L47_C1() [0x4281ea]\\n??:? void\
    \ tmp11z2_lor.__modtest() [0x4287c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e0db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4292b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42adb5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ae44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ad41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42928d]\\n??:? runModuleUnitTests [0x42deb1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a20]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4299a7]\\n??:? _d_run_main [0x429912]\\n??:? main [0x4287d7]\\\
    n??:? __libc_start_main [0xc64c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    float grade;\n    string[string] grade_map = [\"4.0\": \"A+\"\
    , \"3.7\": \"A\", \"3.3\": \"A-\", \"3.0\": \"B+\", \"2.7\": \"B\", \"2.3\": \"\
    B-\", \"2.0\": \"C+\", \"1.7\": \"C\", \"1.3\": \"C-\", \"1.0\": \"D+\", \"0.7\"\
    : \"D\", \"0.0\": \"D-\", \"-1.0\": \"E\"];\n    string[] result = [];\n    foreach(grade;\
    \ grades)\n    {\n        float rounded_grade = grade.round;\n        if(rounded_grade\
    \ > 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(rounded_grade\
    \ < 0.0)\n        {\n            result ~= \"E\";\n        }\n        else\n \
    \       {\n            result ~= grade_map[std.string.format(\"%.1f\", rounded_grade)];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9_m9mke.d(34): Error: variable `grade` is shadowing variable\
    \ `tmpi9_m9mke.numerical_letter_grade.grade`\\n/tmp/tmpi9_m9mke.d(47): Error:\
    \ undefined identifier `string` in package `std`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi9_m9mke.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    //typeof(grades) is immutable int[]\n    //    typeof(grades)\
    \ is immutable float[]\n    //    typeof(grades) is immutable double[]\n    //\
    \    typeof(grades) is immutable bool[]\n    //typeof(grades) is immutable char[]\n\
    \    //typeof(grades) is immutable dchar[]\n    //typeof(grades) is immutable\
    \ string[]\n    //    typeof(grades) is immutable ubyte[]\n    //    typeof(grades)\
    \ is immutable ushort[]\n    //    typeof(grades) is immutable uint[]\n    //\
    \    typeof(grades) is immutable ulong[]\n    //    typeof(grades) is immutable\
    \ long[]\n    //    typeof(grades) is immutable byte[]\n    //    typeof(grades)\
    \ is immutable short[]\n    //    typeof(grades) is immutable ucent[]\n    //\
    \    typeof(grades) is immutable cent[]\n    typeof(grades) is immutable string[]\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprwalvrk0.d(48): Error: `(arguments)` expected following `immutable(string[])`\\\
    n/tmp/tmprwalvrk0.d(48): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmprwalvrk0.d(59): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmprwalvrk0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{ \n    string[] letter_grades; \n    foreach(grade; grades) \n  \
    \  { \n        if(grade == 4.0) \n            letter_grades ~= \"A+\"; \n    \
    \    else if(grade >= 3.7) \n            letter_grades ~= \"A\"; \n        else\
    \ if(grade >= 3.3) \n            letter_grades ~= \"A-\"; \n        else if(grade\
    \ >= 3.0) \n            letter_grades ~= \"B+\"; \n        else if(grade >= 2.7)\
    \ \n            letter_grades ~= \"B\"; \n        else if(grade >= 2.3) \n   \
    \         letter_grades ~= \"B-\"; \n        else if(grade >= 2.0) \n        \
    \    letter_grades ~= \"C+\"; \n        else if(grade >= 1.7) \n            letter_grades\
    \ ~= \"C\"; \n        else if(grade >= 1.3) \n            letter_grades ~= \"\
    C-\"; \n        else if(grade >= 1.0) \n            letter_grades ~= \"D+\"; \n\
    \        else if(grade >= 0.7) \n            letter_grades ~= \"D\"; \n      \
    \  else if(grade >= 0.0) \n            letter_grades ~= \"D-\"; \n        else\
    \ if(grade == 0.0) \n            letter_grades ~= \"E\"; \n    } \n    return\
    \ letter_grades; \n} \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps8zupzz8.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a4d]\\n??:? void tmps8zupzz8.__unittest_L63_C1()\
    \ [0x4287a9]\\n??:? void tmps8zupzz8.__modtest() [0x428cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eee7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4297a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42977d]\\n??:? runModuleUnitTests [0x42ecbd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e9c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e23]\\n??:? _d_run_main [0x429d8e]\\n??:? main [0x428ccb]\\\
    n??:? __libc_start_main [0x7dea4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result;\n    foreach(grade; grades) \n    {\n    \
    \    if(grade == 4.0) \n        {\n            result ~= \"A+\";\n        }\n\
    \        else if(grade > 3.7) \n        {\n            result ~= \"A\";\n    \
    \    }\n        else if(grade > 3.3) \n        {\n            result ~= \"A-\"\
    ;\n        }\n        else if(grade > 3.0) \n        {\n            result ~=\
    \ \"B+\";\n        }\n        else if(grade > 2.7) \n        {\n            result\
    \ ~= \"B\";\n        }\n        else if(grade > 2.3) \n        {\n           \
    \ result ~= \"B-\";\n        }\n        else if(grade > 2.0) \n        {\n   \
    \         result ~= \"C+\";\n        }\n        else if(grade > 1.7) \n      \
    \  {\n            result ~= \"C\";\n        }\n        else if(grade > 1.3) \n\
    \        {\n            result ~= \"C-\";\n        }\n        else if(grade >\
    \ 1.0) \n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ > 0.7) \n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ > 0.0) \n        {\n            result ~= \"D-\";\n        }\n        else \n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl_9llxcd.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpl_9llxcd.__unittest_L89_C1()\
    \ [0x428799]\\n??:? void tmpl_9llxcd.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0x27eb8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[];\n    foreach(grade;\
    \ grades)\n    {\n        if(grade == 4.0) letter_grades ~= \"A+\";\n        else\
    \ if(grade > 3.7) letter_grades ~= \"A\";\n        else if(grade > 3.3) letter_grades\
    \ ~= \"A-\";\n        else if(grade > 3.0) letter_grades ~= \"B+\";\n        else\
    \ if(grade > 2.7) letter_grades ~= \"B\";\n        else if(grade > 2.3) letter_grades\
    \ ~= \"B-\";\n        else if(grade > 2.0) letter_grades ~= \"C+\";\n        else\
    \ if(grade > 1.7) letter_grades ~= \"C\";\n        else if(grade > 1.3) letter_grades\
    \ ~= \"C-\";\n        else if(grade > 1.0) letter_grades ~= \"D+\";\n        else\
    \ if(grade > 0.7) letter_grades ~= \"D\";\n        else if(grade > 0.0) letter_grades\
    \ ~= \"D-\";\n        else letter_grades ~= \"E\";\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy839ti7r.d(31): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpy839ti7r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n     \
    \   if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n  \
    \      else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n      \
    \  }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n\
    \        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"\
    B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n   \
    \         result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n      \
    \  {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n\
    \        {\n            result ~= \"C-\";\n        }\n        else if(grade >=\
    \ 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg3g05k37.d(93): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a3d]\\n??:? void tmpg3g05k37.__unittest_L89_C1()\
    \ [0x428799]\\n??:? void tmpg3g05k37.__modtest() [0x428ca8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eed7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429796]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42976d]\\n??:? runModuleUnitTests [0x42ecad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e8c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e13]\\n??:? _d_run_main [0x429d7e]\\n??:? main [0x428cbb]\\\
    n??:? __libc_start_main [0x6bb18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i,\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"\
    A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n       \
    \ else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n  \
    \          result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n\
    \        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n  \
    \          result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n \
    \       else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3x6fugt5.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmp3x6fugt5.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmp3x6fugt5.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0xc29e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    auto result = grades.map!(grade => {\n        float gpa = float.init;\n\
    \        float flt = float.init;\n        float.fromString(grade.to!string, &gpa,\
    \ &flt);\n        return gpa;\n    });\n    return result.map!(gpa => {\n    \
    \    if (gpa >= 4.0) return \"A+\";\n        if (gpa >= 3.7) return \"A\";\n \
    \       if (gpa >= 3.3) return \"A-\";\n        if (gpa >= 3.0) return \"B+\"\
    ;\n        if (gpa >= 2.7) return \"B\";\n        if (gpa >= 2.3) return \"B-\"\
    ;\n        if (gpa >= 2.0) return \"C+\";\n        if (gpa >= 1.7) return \"C\"\
    ;\n        if (gpa >= 1.3) return \"C-\";\n        if (gpa >= 1.0) return \"D+\"\
    ;\n        if (gpa >= 0.7) return \"D\";\n        if (gpa >= 0.0) return \"D-\"\
    ;\n        return \"E\";\n    });\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpew28smfc.d(31): Error: no property `map` for type `float[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpew28smfc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n  string[] final_array = new string[grades.length];\n  for(int\
    \ i = 0; i < grades.length; i++)\n  {\n    if(grades[i] == 4.0)\n    {\n     \
    \ final_array[i] = \"A+\";\n    }\n    else if(grades[i] > 3.7)\n    {\n     \
    \ final_array[i] = \"A\";\n    }\n    else if(grades[i] > 3.3)\n    {\n      final_array[i]\
    \ = \"A-\";\n    }\n    else if(grades[i] > 3.0)\n    {\n      final_array[i]\
    \ = \"B+\";\n    }\n    else if(grades[i] > 2.7)\n    {\n      final_array[i]\
    \ = \"B\";\n    }\n    else if(grades[i] > 2.3)\n    {\n      final_array[i] =\
    \ \"B-\";\n    }\n    else if(grades[i] > 2.0)\n    {\n      final_array[i] =\
    \ \"C+\";\n    }\n    else if(grades[i] > 1.7)\n    {\n      final_array[i] =\
    \ \"C\";\n    }\n    else if(grades[i] > 1.3)\n    {\n      final_array[i] = \"\
    C-\";\n    }\n    else if(grades[i] > 1.0)\n    {\n      final_array[i] = \"D+\"\
    ;\n    }\n    else if(grades[i] > 0.7)\n    {\n      final_array[i] = \"D\";\n\
    \    }\n    else if(grades[i] > 0.0)\n    {\n      final_array[i] = \"D-\";\n\
    \    }\n    else if(grades[i] == 0.0)\n    {\n      final_array[i] = \"E\";\n\
    \    }\n  }\n  return final_array;\n}\nstring[] numerical_letter_grade2(float[]\
    \ grades) \n{\n  string[] final_array = new string[grades.length];\n  for(int\
    \ i = 0\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu4nuwkay.d(93): Error: semicolon expected, not `unittest`\\n/tmp/tmpu4nuwkay.d(93):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmpu4nuwkay.d(94): Error:\
    \ found `{` when expecting `;` following `for` condition\\n/tmp/tmpu4nuwkay.d(95):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpu4nuwkay.d(95): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmpu4nuwkay.d(95): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4nuwkay.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0) result[i]\
    \ = \"A+\";\n        else if (grades[i] > 3.7) result[i] = \"A\";\n        else\
    \ if (grades[i] > 3.3) result[i] = \"A-\";\n        else if (grades[i] > 3.0)\
    \ result[i] = \"B+\";\n        else if (grades[i] > 2.7) result[i] = \"B\";\n\
    \        else if (grades[i] > 2.3) result[i] = \"B-\";\n        else if (grades[i]\
    \ > 2.0) result[i] = \"C+\";\n        else if (grades[i] > 1.7) result[i] = \"\
    C\";\n        else if (grades[i] > 1.3) result[i] = \"C-\";\n        else if (grades[i]\
    \ > 1.0) result[i] = \"D+\";\n        else if (grades[i] > 0.7) result[i] = \"\
    D\";\n        else if (grades[i] > 0.0) result[i] = \"D-\";\n        else result[i]\
    \ = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3nr2hxd.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpw3nr2hxd.__unittest_L50_C1()\
    \ [0x428701]\\n??:? void tmpw3nr2hxd.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0x6b076554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int\
    \ i, float grade; grades)\n    {\n        string this_grade = \"\";\n        switch(grade)\n\
    \        {\n            case 4.0: this_grade = \"A+\"; break;\n            case\
    \ 3.7: this_grade = \"A\"; break;\n            case 3.3: this_grade = \"A-\";\
    \ break;\n            case 3.0: this_grade = \"B+\"; break;\n            case\
    \ 2.7: this_grade = \"B\"; break;\n            case 2.3: this_grade = \"B-\";\
    \ break;\n            case 2.0: this_grade = \"C+\"; break;\n            case\
    \ 1.7: this_grade = \"C\"; break;\n            case 1.3: this_grade = \"C-\";\
    \ break;\n            case 1.0: this_grade = \"D+\"; break;\n            case\
    \ 0.7: this_grade = \"D\"; break;\n            case 0.0: this_grade = \"D-\";\
    \ break;\n            default: if(grade < 0.7) this_grade = \"E\";\n         \
    \       else if(grade > 4.0) this_grade = \"A+\";\n                else this_grade\
    \ = \"unknown\";\n        }\n        letter_grades[i] = this_grade;\n    }\n \
    \   return letter_grades;\n}\nstring[] grade_equation(float[] grades)\n{\n   \
    \ string[] letter_grades = new string[grades.length];\n    float[] grade_lst =\
    \ [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    string[]\
    \ letter_lst = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\"];\n    foreach(int i, float grade; grades)\n    {\n\
    \        string this_grade = \"\";\n        for(int j = 0; j < grade_lst.length;\
    \ j\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gz_zg_j.d(66): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmp_gz_zg_j.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_gz_zg_j.d(77): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_gz_zg_j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    int len = grades.length;\n    string[] output = new string[len];\n\
    \    foreach(i, val; grades) \n    {\n      if(val >= 3.7) \n      {\n       \
    \ output[i] = \"A\";\n      }\n      else if(val < 3.7 && val >= 3.3) \n     \
    \ {\n        output[i] = \"A-\";\n      }\n      else if(val < 3.3 && val >= 3.0)\
    \ \n      {\n        output[i] = \"B+\";\n      }\n      else if(val < 3.0 &&\
    \ val >= 2.7) \n      {\n        output[i] = \"B\";\n      }\n      else if(val\
    \ < 2.7 && val >= 2.3) \n      {\n        output[i] = \"B-\";\n      }\n     \
    \ else if(val < 2.3 && val >= 2.0) \n      {\n        output[i] = \"C+\";\n  \
    \    }\n      else if(val < 2.0 && val >= 1.7) \n      {\n        output[i] =\
    \ \"C\";\n      }\n      else if(val < 1.7 && val >= 1.3) \n      {\n        output[i]\
    \ = \"C-\";\n      }\n      else if(val < 1.3 && val >= 1.0) \n      {\n     \
    \   output[i] = \"D+\";\n      }\n      else if(val < 1.0 && val >= 0.7) \n  \
    \    {\n        output[i] = \"D\";\n      }\n      else if(val < 0.7 && val >=\
    \ 0.0) \n      {\n        output[i] = \"D-\";\n      }\n      else \n      {\n\
    \        output[i] = \"E\";\n      }\n    }\n    return output;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezv4mkt_.d(31): Error: cannot implicitly convert expression `grades.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpezv4mkt_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    float[] grade_to_letter = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0];\n    string[] letter_grade = [\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n\
    \    string[] results = [];\n    foreach(grade; grades)\n    {\n        int i\
    \ = 0;\n        while(i < grade_to_letter.length && grade > grade_to_letter[i])\n\
    \        {\n            i++;\n        }\n        results ~= letter_grade[i];\n\
    \    }\n    return results;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn_xd59dl.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429665]\\n??:? void tmpn_xd59dl.__unittest_L45_C1()\
    \ [0x4283c1]\\n??:? void tmpn_xd59dl.__modtest() [0x4288d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4293be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b84d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b8dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b7d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429395]\\n??:? runModuleUnitTests [0x42e949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429b28]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429aaf]\\n??:? _d_run_main [0x429a1a]\\n??:? main [0x4288e3]\\\
    n??:? __libc_start_main [0x37a4d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    string[] grade = new string[grades.length];\n    foreach(i,\
    \ n; grades)\n    {\n        if(n >= 4.0)\n            grade[i] = \"A+\";\n  \
    \      else if(n >= 3.7)\n            grade[i] = \"A\";\n        else if(n >=\
    \ 3.3)\n            grade[i] = \"A-\";\n        else if(n >= 3.0)\n          \
    \  grade[i] = \"B+\";\n        else if(n >= 2.7)\n            grade[i] = \"B\"\
    ;\n        else if(n >= 2.3)\n            grade[i] = \"B-\";\n        else if(n\
    \ >= 2.0)\n            grade[i] = \"C+\";\n        else if(n >= 1.7)\n       \
    \     grade[i] = \"C\";\n        else if(n >= 1.3)\n            grade[i] = \"\
    C-\";\n        else if(n >= 1.0)\n            grade[i] = \"D+\";\n        else\
    \ if(n >= 0.7)\n            grade[i] = \"D\";\n        else if(n >= 0.0)\n   \
    \         grade[i] = \"D-\";\n        else\n            grade[i] = \"E\";\n  \
    \  }\n    return grade;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzr5s51t7.d(67): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42982d]\\n??:? void tmpzr5s51t7.__unittest_L63_C1()\
    \ [0x428589]\\n??:? void tmpzr5s51t7.__modtest() [0x428a98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429586]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b085]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b011]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42955d]\\n??:? runModuleUnitTests [0x42e181]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c77]\\n??:? _d_run_main [0x429be2]\\n??:? main [0x428aab]\\\
    n??:? __libc_start_main [0x8a98a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    float[] gpa_boundaries = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3,\
    \ 2.7, 3.0, 3.3, 3.7, 4.0];\n    string[] letter_grade = [\"E\", \"D-\", \"D+\"\
    , \"D\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"];\n\
    \    string[] results = new string[grades.length];\n    int i;\n    foreach(gpa;\
    \ grades) \n    {\n        i = 0;\n        while(gpa_boundaries[i] < gpa) \n \
    \       {\n            i++;\n        }\n        results ~= letter_grade[i];\n\
    \    }\n    return results;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpft4qexys.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429675]\\n??:? void tmpft4qexys.__unittest_L46_C1()\
    \ [0x4283cd]\\n??:? void tmpft4qexys.__modtest() [0x4288dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebdf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4293ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b8b9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b948]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b845]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4293a5]\\n??:? runModuleUnitTests [0x42e9b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429b38]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429abf]\\n??:? _d_run_main [0x429a2a]\\n??:? main [0x4288ef]\\\
    n??:? __libc_start_main [0x92f5d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n*/\nstring[] numerical_letter_grade(float[]\
    \ grades) \n{\n    return grades.map!(a => a>3.7 ? \"A+\" : a>3.3 ? \"A\" : a>3.0\
    \ ? \"A-\" : a>2.7 ? \"B+\" : a>2.3 ? \"B\" : a>2.0 ? \"B-\" : a>1.7 ? \"C+\"\
    \ : a>1.3 ? \"C\" : a>1.0 ? \"C-\" : a>0.7 ? \"D+\" : a>0.0 ? \"D\" : a>0.0 ?\
    \ \"D-\" : \"E\")();\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps0_bd9j4.d(31): Error: no property `map` for type `float[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0_bd9j4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
