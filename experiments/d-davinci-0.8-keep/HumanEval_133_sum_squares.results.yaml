name: HumanEval_133_sum_squares
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n\tlong result = 0;\n\
    \tforeach(i; lst)\n\t{\n\t\tresult += cast(long)ceil(i)*cast(long)ceil(i);\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    auto z = round(lst);\n\
    \    long sum = 0;\n    foreach(i; z)\n    {\n        sum += cast(long) i * i;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_k_witqq.d(19): Error: function `std.math.round(real x)` is not\
    \ callable using argument types `(float[])`\\n/tmp/tmp_k_witqq.d(19):        cannot\
    \ pass argument `lst` of type `float[]` to parameter `real x`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k_witqq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    float min = min(lst);\n\
    \    float max = max(lst);\n    float avg = avg(lst);\n    float median = median(lst);\n\
    \    long sum = 0;\n    foreach(e; lst)\n    {\n        if(e <= min)\n       \
    \ {\n            e = min;\n        }\n        else if(e >= max)\n        {\n \
    \           e = max;\n        }\n        else if(e <= avg)\n        {\n      \
    \      e = avg;\n        }\n        else if(e >= median)\n        {\n        \
    \    e = median;\n        }\n        else\n        {\n            e = float(ceil(e));\n\
    \        }\n        sum += (long)(e*e);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ufo6m96.d(46): Error: C style cast illegal, use `cast(long)(e\
    \ * e)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ufo6m96.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n  float[] new_lst\
    \ = [] ;\n  foreach(x; lst)\n  {\n    new_lst ~= ceil(x);\n  }\n  long total =\
    \ 0;\n  foreach(x; new_lst)\n  {\n    total += x^2;\n  }\n  return total;\n}\n\
    unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpchaii115.d(27): Error: `x` is not of integral type, it is a `float`\\\
    n/tmp/tmpchaii115.d(27): Error: `cast(float)2` is not of integral type, it is\
    \ a `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchaii115.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(x; lst)\n    {\n        long temp = cast(long)ceil(x);\n        sum\
    \ += temp * temp;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst) \n    {\n      e = e.ceil;\n      sum += cast(long)e*e;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(var item; lst)\n    {\n        int ceiling = (int)Math.ceil(item);\n\
    \        sum += ceiling * ceiling;\n    }\n    return sum;\n}\nunittest\n{\n \
    \   alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) ==\
    \ 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3rs9_ts.d(22): Error: C style cast illegal, use `cast(int)Math.ceil(item)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3rs9_ts.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long acc = 0;\n\
    \    foreach(el; lst)\n    {\n        acc += ceil(el)*ceil(el);\n    }\n    return\
    \ acc;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    /*\n        long\
    \ sum = 0;\n        foreach(var x; lst)\n        {\n            sum += cast(long)std.math.pow(std.math.ceil(x),2);\n\
    \        }\n        return sum;\n    */\n    return map!((x) => (long)std.math.pow(std.math.ceil(x),2))(lst).sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgs0x0rcy.d(27): Error: C style cast illegal, use `cast(long)std.math.pow(std.math.ceil(x),\
    \ 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs0x0rcy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(element; lst)\n    {\n        sum += cast(long)element * element;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr2e2oyu_.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285ad]\\n??:? void tmpr2e2oyu_.__unittest_L26_C1()\
    \ [0x428039]\\n??:? void tmpr2e2oyu_.__modtest() [0x428330]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b41e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43053d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f5]\\n??:? runModuleUnitTests [0x42c361]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428983]\\n??:? _d_run_main [0x4288ee]\\n??:? main [0x428343]\\\
    n??:? __libc_start_main [0x7dece554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n  auto result = 0L;\n\
    \  foreach( i; lst )\n  {\n    result += staticRoundTo!long(pow(i,2));\n  }\n\
    \  return result;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphali4njc.d(22): Error: template instance `staticRoundTo!long`\
    \ template `staticRoundTo` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphali4njc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    int len = lst.length;\n\
    \    long result = 0;\n    for (int i = 0; i < len; i++) \n    {\n        int\
    \ val = round(lst[i]);\n        result += val * val;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjl4nog89.d(19): Error: cannot implicitly convert expression `lst.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpjl4nog89.d(23): Error: cannot implicitly\
    \ convert expression `round(cast(real)lst[cast(ulong)i])` of type `real` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjl4nog89.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum=0;\n\
    \    for(int i=0;i<lst.length;i++)\n    {\n        sum+=cast(long)ceil(lst[i])*cast(long)ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    float sum = 0;\n\
    \    foreach(v; lst) {\n        v = ceil(v);\n        sum += v*v;\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1zmeiob.d(24): Error: cannot implicitly convert expression `sum`\
    \ of type `float` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpp1zmeiob.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(x;lst)\n    {\n      sum += cast(long)ceil(x)^2;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnugmnjbg.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428705]\\n??:? void tmpnugmnjbg.__unittest_L26_C1()\
    \ [0x42805e]\\n??:? void tmpnugmnjbg.__modtest() [0x428488]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c84f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430875]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430801]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6b9]\\n??:? runModuleUnitTests [0x42c625]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428b54]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428adb]\\n??:? _d_run_main [0x428a46]\\n??:? main [0x42849b]\\\
    n??:? __libc_start_main [0xbfadc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long square_sum\
    \ = 0;\n    for(float n : lst)\n    {\n        n = Math.ceil(n);\n        square_sum\
    \ += (long)Math.pow(n,2);\n    }\n    return square_sum;\n}\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4,\
    \ 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n\
    \    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6e4wf_xj.d(20): Error: semicolon expected, not `:`\\n/tmp/tmp6e4wf_xj.d(20):\
    \ Error: expression expected, not `:`\\n/tmp/tmp6e4wf_xj.d(20): Error: found `lst`\
    \ when expecting `;` following `for` condition\\n/tmp/tmp6e4wf_xj.d(23): Error:\
    \ C style cast illegal, use `cast(long)Math.pow(n, 2)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e4wf_xj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    size_t[] arr\
    \ = new size_t[lst.length];\n    foreach(i, val; lst)\n    {\n        if(val >=\
    \ 0)\n            arr[i] = cast(size_t)ceil(val);\n        else\n            arr[i]\
    \ = cast(size_t)floor(val);\n    }\n    auto rng = arr.map!(a => a * a);\n   \
    \ return rng.sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwnr93kp.d(27): Error: no property `map` for type `ulong[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwnr93kp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n      sum += (long)i*(long)i;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxv7f9lf.d(22): Error: C style cast illegal, use `cast(long)i`\\\
    n/tmp/tmptxv7f9lf.d(22): Error: C style cast illegal, use `cast(long)i`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxv7f9lf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sqsum =\
    \ 0;\n    foreach(float v; lst)\n    {\n        int iv = cast(int)ceil(v);\n \
    \       sqsum += iv*iv;\n    }\n    return sqsum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long result =\
    \ 0;\n    foreach(x; lst) {\n        result += cast(long)(ceil(x)) * cast(long)(ceil(x));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
