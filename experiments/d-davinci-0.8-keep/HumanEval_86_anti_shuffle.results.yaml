name: HumanEval_86_anti_shuffle
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    char[]\
    \ result;\n    string[] words = split(s);\n    result ~= words[0];\n    for (int\
    \ i = 1; i < words.length; i++)\n    {\n        result ~= \" \";\n        result\
    \ ~= sort(words[i]);\n    }\n    return result.idup;\n}\nunittest\n{\n    alias\
    \ candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vxd860j.d(20): Error: undefined identifier `split`\\n/tmp/tmp8vxd860j.d(25):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vxd860j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string\
    \ result;\n    auto len = s.length;\n    auto index = 0;\n    auto flag = false;\n\
    \    for (int i = 0; i < len; i++)\n    {\n        if(s[i] != ' ')\n        {\n\
    \            index = i;\n            flag = true;\n            break;\n      \
    \  }\n    }\n    auto start = index;\n    for (int i = index; i < len; i++)\n\
    \    {\n        if(s[i] == ' ')\n        {\n            auto temp = s[start..i];\n\
    \            temp.sort();\n            result ~= temp;\n            result ~=\
    \ \" \";\n            flag = false;\n        }\n        else if(i == len - 1)\n\
    \        {\n            auto temp = s[start..$];\n            temp.sort();\n \
    \           result ~= temp;\n        }\n        else if(!flag)\n        {\n  \
    \          start = i;\n            flag = true;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpajx92x8z.d(38): Error: no property `sort` for type `string`\\\
    n/tmp/tmpajx92x8z.d(46): Error: no property `sort` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajx92x8z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n  int\
    \ index = 0;\n  int length = s.length;\n  int wordLength = 0;\n  string newString\
    \ = \"\";\n  while(index < length)\n  {\n    // check if whitespace\n    if(s[index]\
    \ == ' ')\n    {\n      newString ~= s[index];\n      index += 1;\n    }\n   \
    \ else\n    {\n      int wordLength = 0;\n      // count word length\n      while(s[index\
    \ + wordLength] != ' ' && index + wordLength < length)\n      {\n        wordLength\
    \ += 1;\n      }\n      // copy word\n      newString ~= s[index .. index + wordLength\
    \ - 1];\n      // sort word\n      newString[index + newString.length - wordLength\
    \ .. index + newString.length - 1] = newString[index + newString.length - wordLength\
    \ .. index + newString.length - 1].sort();\n      index += wordLength;\n    }\n\
    \  }\n  return newString;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpck82dmnr.d(20): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpck82dmnr.d(33): Error: variable `wordLength`\
    \ is shadowing variable `tmpck82dmnr.anti_shuffle.wordLength`\\n/tmp/tmpck82dmnr.d(42):\
    \ Error: no property `sort` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpck82dmnr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto\
    \ listWord = s.split;\n    string result;\n    foreach(word; listWord) \n    {\n\
    \        auto listChar = word.to!(string[]);\n        listChar.sort!((a, b) =>\
    \ a > b);\n        foreach(c; listChar)\n            result ~= c;\n        result\
    \ ~= \" \";\n    }\n    return result.stripRight;\n}\n/*\n    Write a function\
    \ that takes a string and returns the number of times that\n    string is repeated\
    \ in the sequence.\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdro7x_xz.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdro7x_xz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string\
    \ result;\n    string[] toks = split(s, ' ');\n    foreach(token; toks)\n    {\n\
    \        string[] toks2 = split(token, '-');\n        if(toks2.length == 2)\n\
    \        {\n            string t1 = sort(toks2[0]);\n            string t2 = sort(toks2[1]);\n\
    \            result ~= t1 ~ \"-\" ~ t2 ~ \" \";\n        }\n        else\n   \
    \     {\n            string t = sort(token);\n            result ~= t ~ \" \"\
    ;\n        }\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdugg3cu6.d(20): Error: undefined identifier `split`\\n/tmp/tmpdugg3cu6.d(23):\
    \ Error: undefined identifier `split`\\n/tmp/tmpdugg3cu6.d(26): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpdugg3cu6.d(27): Error:\
    \ undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpdugg3cu6.d(32):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdugg3cu6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto\
    \ v = s.split(\" \");\n    foreach(w; v)\n    {\n        w = w.array;\n      \
    \  sort(w);\n        w = w.idup;\n    }\n    return v.join(\" \");\n}\nunittest\n\
    {\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\"\
    );\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\"\
    ) == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwsbni89h.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwsbni89h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto\
    \ chars = new char[s.length];\n    int j = 0;\n    auto str = new dchar[s.length];\n\
    \    int charCount = 0;\n    for (int i = 0; i < s.length; i++) \n    {\n    \
    \    if (s[i] != ' ') \n        {\n            chars[j] = s[i];\n            j++;\n\
    \            charCount++;\n        } \n        else \n        {\n            chars[j]\
    \ = ' ';\n            j++;\n            sort(chars[0 .. charCount]);\n       \
    \     str ~= chars[0 .. charCount];\n            j = 0;\n            charCount\
    \ = 0;\n        }\n    }\n    sort(chars[0 .. charCount]);\n    str ~= chars[0\
    \ .. charCount];\n    return to!string(str);\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprbrh5w1n.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmprbrh5w1n.d(36): Error: cannot append type `char[]`\
    \ to type `dchar[]`\\n/tmp/tmprbrh5w1n.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\n/tmp/tmprbrh5w1n.d(42): Error: cannot append\
    \ type `char[]` to type `dchar[]`\\n/tmp/tmprbrh5w1n.d(43): Error: template instance\
    \ `to!string` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbrh5w1n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[]\
    \ result = s.split(\" \");\n    string ret = \"\";\n    foreach(word; result)\n\
    \    {\n        ret ~= word.sort();\n        ret ~= \" \";\n    }\n    return\
    \ ret.strip();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1tl7xtmn.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp1tl7xtmn.d(23): Error: no property `sort` for type `string`\\n/tmp/tmp1tl7xtmn.d(26):\
    \ Error: no property `strip` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1tl7xtmn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[]\
    \ words = split(s);\n    string result = \"\";\n    foreach(word; words) \n  \
    \  {\n        result ~= sort!(a => a.idup.front)(word) ~ \" \";\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n\
    \    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qifwwie.d(19): Error: undefined identifier `split`\\n/tmp/tmp7qifwwie.d(23):\
    \ Error: template instance `sort!((a) => a.idup.front)` template `sort` is not\
    \ defined, did you mean sqrt?\\n/tmp/tmp7qifwwie.d(25): Error: no property `stripRight`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qifwwie.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[]\
    \ words = split(s, \" \");\n    foreach(ref word; words)\n    {\n        sort(word);\n\
    \    }\n    return join(words);\n}\n//Write a function that takes a string and\
    \ returns the number of occurrences\n//of vowels (a, e, i, o, u) in the string.\n\
    //A for loop should be used for this exercise\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfafqt_px.d(19): Error: undefined identifier `split`\\n/tmp/tmpfafqt_px.d(22):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpfafqt_px.d(24):\
    \ Error: undefined identifier `join`, did you mean function `main`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfafqt_px.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto\
    \ ss = split(s);\n    string result;\n    int k = ss.length;\n    foreach(i, ref\
    \ word; ss)\n    {\n        dchar[] ds = to!dchar[](word);\n        std.algorithm.sort(ds);\n\
    \        result ~= cast(string) ds;\n        if(--k != 0)\n            result\
    \ ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52eyv5hw.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52eyv5hw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    char[]\
    \ c = to!char[](s);\n    auto stringify = (T)(T[] x) => join(map!((char y) =>\
    \ to!string(y))(x));\n    auto v =  filter!((char x) => x != ' ')(c);\n    v =\
    \ sort!((a, b) => a < b)(v);\n    int start = 0;\n    int end = 0;\n    int i\
    \ = 0;\n    foreach(ref char x; s) {\n        if(x == ' ') {\n            i++;\n\
    \            continue;\n        }\n        if(start == 0) {\n            start\
    \ = i;\n        }\n        end = i;\n        i++;\n    }\n    s = s[0..start]\
    \ ~ stringify(v) ~ s[end..$];\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwa8_67ho.d(20): Error: C style cast illegal, use `cast(T)(T[]\
    \ x) => join(map!((char y) => to!string(y))(x))`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwa8_67ho.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    //\
    \ your code here\n    string result=\"\";\n    auto words = split(s);\n    foreach(string\
    \ w; words) {\n        foreach(immutable(char) c; sort(w)) {\n            result\
    \ ~= c;\n        }\n        result ~= \" \";\n    }\n    return result.idup;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbalqyqbu.d(21): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbalqyqbu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n\tstring\
    \ out = \"\";\n\tstring word = \"\";\n\tforeach(ch; s)\n\t{\n\t\tif(ch == ' ')\n\
    \t\t{\n\t\t\tif(out.length != 0)\n\t\t\t\tout ~= \" \";\n\t\t\tout ~= word;\n\t\
    \t\tword = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tword ~= ch;\n\t\t}\n\t}\n\tif(word.length\
    \ != 0)\n\t{\n\t\tif(out.length != 0)\n\t\t\tout ~= \" \";\n\t\tout ~= word;\n\
    \t}\n\t\n\tauto args = split(out);\n\tforeach(arg; args)\n\t{\n\t\tauto chrs =\
    \ arg.arrayof;\n\t\tsort(chrs);\n\t\targ = chrs.implode;\n\t}\n\t\n\treturn args.implode;\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiyoho5ge.d(19): Error: found `out` when expecting `;` following\
    \ statement\\n/tmp/tmpiyoho5ge.d(19): Error: found `=` instead of statement\\\
    n/tmp/tmpiyoho5ge.d(25): Error: expression expected, not `out`\\n/tmp/tmpiyoho5ge.d(26):\
    \ Error: found `out` instead of statement\\n/tmp/tmpiyoho5ge.d(27): Error: found\
    \ `out` instead of statement\\n/tmp/tmpiyoho5ge.d(37): Error: expression expected,\
    \ not `out`\\n/tmp/tmpiyoho5ge.d(38): Error: found `out` instead of statement\\\
    n/tmp/tmpiyoho5ge.d(39): Error: found `out` instead of statement\\n/tmp/tmpiyoho5ge.d(42):\
    \ Error: expression expected, not `out`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpiyoho5ge.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string\
    \ result = s;\n    auto words = split(s);\n    int i = 0;\n    foreach(immutable\
    \ word; words)\n    {\n        result = result.replace(word, sorted(word));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\
    \n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") ==\
    \ \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"\
    abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    );\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    );\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpub5y4cy8.d(20): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpub5y4cy8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[]\
    \ splitted = split(s);\n    string result = \"\";\n    foreach(word; splitted)\n\
    \    {\n        //std.algorithm.sort!(\"a < b\")(word);\n        result ~= anti_shuffle_word(word);\n\
    \        result ~= \" \";\n    }\n    return result;\n}\nstring anti_shuffle_word(string\
    \ word)\n{\n    foreach(c; word)\n    {\n        if(c == \" \")\n        {\n \
    \           continue;\n        }\n        else\n        {\n            auto temp\
    \ = word[0..word.indexOf(c)];\n            if(temp.length > 0)\n            {\n\
    \                word = word[temp.length..$];\n            }\n            word\
    \ ~= c;\n        }\n    }\n    return word;\n}\n// static assert(anti_shuffle(\"\
    Hi\") == \"Hi\");\n// static assert(anti_shuffle(\"hello\") == \"ehllo\");\n//\
    \ static assert(anti_shuffle(\"hello world\") == \"ehllo dlorw\");\n// static\
    \ assert(anti_shuffle(\"hello world!!!\") == \"ehllo dlorw!!!\");\n// static assert(anti_shuffle(\"\
    hello cruel world!!!!\") == \"ehllo crlue dlorw!!!!\");\n// static assert(anti_shuffle(\"\
    hello cruel world\") == \"ehllo crlue dlorw\");\n// static assert(anti_shuffle(\"\
    hello cruel world!!!\") == \"ehllo crlue dlorw!!!\");\n// static assert(anti_shuffle(\"\
    hello cruel world!!!!\") == \"ehllo crlue dlorw!!!!\");\n// static assert(anti_shuffle(\"\
    Hello World!!!!\") == \"Hello !!!Wdlor\");\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpttkng4dl.d(19): Error: undefined identifier `split`\\n/tmp/tmpttkng4dl.d(33):\
    \ Error: incompatible types for `(c) == (\" \")`: `immutable(char)` and `string`\\\
    n/tmp/tmpttkng4dl.d(39): Error: no property `indexOf` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpttkng4dl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[]\
    \ words = s.split(\" \");\n    string ret;\n    foreach(word; words)\n    {\n\
    \        char[] a = word.dup;\n        std.algorithm.sort(a);\n        ret ~=\
    \ std.algorithm.uniq(a);\n        ret ~= \" \";\n    }\n    return ret.trimRight();\n\
    }\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpboezjnw5.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpboezjnw5.d(24): Error: undefined identifier `algorithm` in package `std`\\\
    n/tmp/tmpboezjnw5.d(25): Error: undefined identifier `algorithm` in package `std`\\\
    n/tmp/tmpboezjnw5.d(28): Error: no property `trimRight` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpboezjnw5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    //\
    \ Split string on whitespace\n    string[] a=split(s);\n    // For each string\
    \ in the array a:\n    foreach(i; 0..a.length)\n    {\n        // Split the string\
    \ on characters\n        string[] b=split(a[i]);\n        // Sort the characters\
    \ by ascii value\n        b=sort(b);\n        // Join the sorted array of characters\n\
    \        a[i]=join(b);\n    }\n    // Join the strings in the array a\n    return\
    \ join(a);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcoi5heg5.d(20): Error: undefined identifier `split`\\n/tmp/tmpcoi5heg5.d(25):\
    \ Error: undefined identifier `split`\\n/tmp/tmpcoi5heg5.d(27): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpcoi5heg5.d(29): Error:\
    \ undefined identifier `join`, did you mean function `main`?\\n/tmp/tmpcoi5heg5.d(32):\
    \ Error: undefined identifier `join`, did you mean function `main`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoi5heg5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    int\
    \ len = s.length();\n    string res;\n    res.reserve(len);\n    int j = 0;\n\
    \    for (int i = 0; i < len; ++i)\n    {\n        if (s[i] == ' ') \n       \
    \ {\n            res += s[i..i+1];\n            ++i;\n        }\n        else\
    \ \n        {\n            j = i + 1;\n            while (j < len && s[j] != '\
    \ ') ++j;\n            auto newstr = s[i..j];\n            sort(newstr);\n   \
    \         res += newstr;\n            i = j - 1;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"\
    Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"\
    number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmf3nxllw.d(19): Error: no property `length` for type `string`\\\
    n/tmp/tmpmf3nxllw.d(27): Error: slice `res` is not mutable\\n/tmp/tmpmf3nxllw.d(35):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpmf3nxllw.d(36):\
    \ Error: slice `res` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmf3nxllw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n\
    \    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[]\
    \ words = s.split(\" \");\n    foreach(index, ref word; words)\n    {\n      \
    \  char[] chars = word.toDArray();\n        sort(chars);\n        word = new string(chars);\n\
    \    }\n    return join(words, \" \");\n}\nunittest\n{\n    alias candidate =\
    \ anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"\
    hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n  \
    \  assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvr0rcka6.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpvr0rcka6.d(22): Error: no property `toDArray` for type `string`\\n/tmp/tmpvr0rcka6.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpvr0rcka6.d(24):\
    \ Error: cannot implicitly convert expression `chars` of type `char[]` to `ulong`\\\
    n/tmp/tmpvr0rcka6.d(26): Error: undefined identifier `join`, did you mean function\
    \ `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvr0rcka6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
