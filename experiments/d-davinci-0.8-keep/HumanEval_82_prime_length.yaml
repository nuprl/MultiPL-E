name: HumanEval_82_prime_length
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes a\
  \ string and returns True if the string\n    length is a prime number or False otherwise\n\
  \    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') ==\
  \ True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\
  \    \n*/\nbool prime_length(string string) \n"
tests: "unittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"\
  Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"\
  kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"\
  wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"\
  MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\
  \") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"\
  go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"\
  aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"\
  M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}"
completions: ["{\n    int stringLength = string.length;\n    /*\n    if stringLength\
    \ == 1 or stringLength == 2:\n        return True\n    */\n    if (stringLength\
    \ == 1 || stringLength == 2) {\n        return true;\n    }\n    /*\n    for number\
    \ in range(2, stringLength):\n        if stringLength % number == 0:\n       \
    \     return False\n    */\n    for (int number = 2; number < stringLength; number++)\
    \ {\n        if (stringLength % number == 0) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n/*\nWrite a function that takes a 2D matrix\
    \ and returns True if the\n    matrix is an orthogonal matrix or False otherwise\n\
    \    Examples\n    orthogonal([\n        [1, 0],\n        [0, 1]\n    ]) == True\n\
    \    orthogonal([\n        [0, 1],\n        [1, 0]\n    ]) == True\n    orthogonal([\n\
    \        [0, 1],\n        [1, 1]\n    ]) == False\n    orthogonal([\n        [1,\
    \ 1],\n        [1, 0]\n    ]) == False\n    orthogonal([\n        [1, 0, 1],\n\
    \        [0, 1, 0],\n        [1, 0, 1]\n    ]) == True\n    orthogonal([\n   \
    \     [1, 0, 1],\n        [0, 1, 0],\n        [1, 1, 1]\n    ]) == False\n*/",
  "{\n    return isPrime(string.length);\n}", "{\n    int n = string.length;\n   \
    \ if (n < 2)\n    {\n        return false;\n    }\n    else\n    {\n        for\
    \ (int i = 2; i < n; i++)\n        {\n            if (n % i == 0)\n          \
    \  {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n}\n/*\nWrite a function that returns the most common letter in\
    \ a string or an empty string if none of the letters\nin the string are repeated\n\
    Examples\n  most_common_letter('Hello') == 'l'\n  most_common_letter('HHEelllo')\
    \ == 'l'\n  most_common_letter('abbbbbcccc') == 'b'\n  most_common_letter('abbbbbccce')\
    \ == ''\n*/\nstring most_common_letter(string string) \n{\n    int n = string.length;\n\
    \    string result;\n    int max = 0;\n    foreach(r;string)\n    {\n        int\
    \ count = 0;\n        foreach(c;string)\n        {\n            if (r == c)\n\
    \            {\n                count = count + 1;\n            }\n        }\n\
    \        if (count > max)\n        {\n            max = count;\n            result\
    \ = r;\n        }\n    }\n    if (max == 1)\n    {\n        return \"\";\n   \
    \ }\n    else\n    {\n        return result;\n    }\n}\n/*\nThere are two different\
    \ ways of computing sine. One, the standard way, is expensive to compute and takes\
    \ a\nlong time. The other way of computing sine, which is much faster, is to use\
    \ a Taylor series expansion.\nWrite a function that takes an x value and a number\
    \ of terms in the Taylor series and returns the value of\nsin(x) using the Taylor\
    \ series up to that number of terms\nExamples\n  taylor_sin(0, 6) == 0\n  taylor_sin(0,\
    \ 7) == 0\n  taylor_sin(0, 8) == 0\n  taylor_sin(3.14, 3) ~ 0.00159265291648683\n\
    \  taylor_sin(3.14, 5) ~ 0.00", "{\n    if (string.length > 1)\n    {\n      \
    \  bool check = true;\n        foreach(int i; 2..string.length - 1)\n        {\n\
    \            if (string.length % i == 0)\n            {\n                check\
    \ = false;\n                break;\n            }\n        }\n        return check;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}\n/*\n    Write a function\
    \ that takes a list of numbers and returns True if the\n    list length is a prime\
    \ number or False otherwise\n    Examples\n    prime_length([1,2,3,4,5]) == True\n\
    \    prime_length([1,2,3,4,5,6]) == False\n    prime_length([]) == False\n*/",
  "{\n    static int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\
    \ 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\
    \ 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\
    \ 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\
    \ 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,\
    \ 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,\
    \ 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,\
    \ 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\
    \ 947, 953, 967, 971, 977, 983, 991, 997];\n    return primes.find!(a => a ==\
    \ string.length).isSome;\n}", "{\n    int length = string.length;\n    if (length\
    \ <= 1) return false;\n    if (length % 2 == 0) return length == 2;\n    if (length\
    \ % 3 == 0) return length == 3;\n    if (length % 5 == 0) return length == 5;\n\
    \    if (length % 7 == 0) return length == 7;\n    int divisor = 11;\n    int\
    \ limit = trunc(sqrt(float(length)));\n    while (divisor <= limit) {\n      \
    \  if (length % divisor == 0) return false;\n        divisor += 2;\n    }\n  \
    \  return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n    int prime\
    \ = true;\n    for (int i = 2; i < string.length; i++)\n    {\n        if (string.length\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}", "{\n    return isPrime(string.length);\n}",
  "{\n    size_t sz = string.length;\n    if (sz == 1) \n        return true;\n  \
    \  for (size_t i = 2; i <= sz / 2; i++) \n    {\n        if (sz % i == 0) \n \
    \           return false;\n    }\n    return true;\n}", "{\n    int length = string.length;\n\
    \    if (length <= 1) \n    {\n        return false;\n    } \n    else \n    {\n\
    \        bool retVal = true;\n        for (int x = 2; x < length; x++) \n    \
    \    {\n            if (length % x == 0) \n            {\n                retVal\
    \ = false;\n                break;\n            }\n        }\n        return retVal;\n\
    \    }\n}", "{\n    size_t length = string.length;\n    if (length > 1)\n    {\n\
    \        foreach (size_t i; range(2, length))\n        {\n            if (length\
    \ % i == 0)\n            {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    return false;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return false;\n}", "{\n    if (string.length < 2)\n        return\
    \ false;\n    else if (string.length == 2)\n        return true;\n    else if\
    \ (string.length % 2 == 0)\n        return false;\n    else\n    {\n        int\
    \ i = 3;\n        while (i <= cast(int) sqrt(string.length))\n        {\n    \
    \        if (string.length % i == 0)\n                return false;\n        \
    \    i += 2;\n        }\n        return true;\n    }\n}", "{\n    enum stringLength\
    \ = string.length;\n    bool flag = true;\n    for(int i = 2; i <= stringLength\
    \ / 2; ++i)\n    {\n        if(stringLength % i == 0)\n        {\n           \
    \ flag = false;\n            break;\n        }\n    }\n    return flag;\n}", "{\n\
    \t\n\tint length=string.length;\n\t\n\tif(length<=1)\n\t{\n\t\treturn false;\n\
    \t}\n\t\n\t\n\tforeach(num;2..length)\n\t{\n\t\tif(length%num==0)\n\t\t{\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "{\n    static bool prime_array[128];\n\
    \    static bool init = false;\n    static int i, k;\n    static int n;\n    static\
    \ bool is_prime;\n    static bool[] primes;\n    static bool[] primes_sqrt;\n\
    \    static bool is_prime_1;\n    static bool is_prime_2;\n    static bool is_prime_3;\n\
    \    static bool is_prime_4;\n    static bool is_prime_5;\n    static bool is_prime_6;\n\
    \    static bool is_prime_7;\n    static bool is_prime_8;\n    static bool is_prime_9;\n\
    \    static bool is_prime_10;\n    static bool is_prime_11;\n    static bool is_prime_12;\n\
    \    static bool is_prime_13;\n    static bool is_prime_14;\n    static bool is_prime_15;\n\
    \    static bool is_prime_16;\n    static bool is_prime_17;\n    static bool is_prime_18;\n\
    \    static bool is_prime_19;\n    static bool is_prime_20;\n    static bool is_prime_21;\n\
    \    static bool is_prime_22;\n    static bool is_prime_23;\n    static bool is_prime_24;\n\
    \    static bool is_prime_25;\n    static bool is_prime_26;\n    static bool is_prime_27;\n\
    \    static bool is_prime_28;\n    static bool is_prime_29;\n    static bool is_prime_30;\n\
    \    static bool is_prime_31;\n    static bool is_prime_32;\n    static bool is_prime_33;\n\
    \    static bool is_prime_34;\n    static bool is_prime_35;\n    static bool is_prime_36;\n\
    \    static bool is_prime_37;\n    static bool is_prime_38;\n    static bool is_prime_39;\n\
    \    static bool is_prime_40;\n    static bool is_prime_41;\n    static bool is_prime_42;\n\
    \    static bool is_prime_43;\n    static bool is_prime_44;\n    static bool is_prime_45;\n",
  "{\n    if (string.length % 2 == 0 || string.length % 3 == 0)\n    {\n        return\
    \ false;\n    }\n    else if (string.length > 1)\n    {\n        for (int n =\
    \ 5; n < string.length; n++)\n        {\n            if (string.length % n ==\
    \ 0)\n            {\n                return false;\n            }\n        }\n\
    \    }\n    return true;\n}", "{\n    int _length = string.length;\n    bool _isPrime\
    \ = false;\n    if (_length == 1) return true;\n    if (_length == 2) return true;\n\
    \    if (_length % 2 == 0) return false;\n    if (_length > 3) {\n        for\
    \ (int i = 3; i < sqrt(_length); i += 2) {\n            if (_length % i == 0)\
    \ {\n                _isPrime = false;\n                break;\n            }\n\
    \            else {\n                _isPrime = true;\n            }\n       \
    \ }\n    }\n    return _isPrime;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
