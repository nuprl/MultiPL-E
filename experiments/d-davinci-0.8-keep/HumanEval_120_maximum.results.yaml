name: HumanEval_120_maximum
language: d
results:
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    int N = arr.length;\n \
    \   if (N == 0) return new long[0];\n    if (k == 0) return new long[0];\n   \
    \ if (k == 1) return new long[]{max(arr)};\n    if (k == N) return arr;\n    if\
    \ (k > N) return new long[0];\n    long[] result = new long[k];\n    auto max\
    \ = max(arr);\n    result[0] = max;\n    int j = 1;\n    int i = 0;\n    while\
    \ (j < k)\n    {\n        if (arr[i] == max)\n        {\n            result[j]\
    \ = max;\n            max = 0;\n            foreach (n; arr)\n            {\n\
    \                if (n > max && n < result[j])\n                {\n          \
    \          max = n;\n                }\n            }\n            if (max ==\
    \ 0)\n            {\n                result[j] = arr[k - j];\n            }\n\
    \            else\n            {\n                result[j] = max;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1v5td3i6.d(33): Error: found `{` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp1v5td3i6.d(33): Error: found `}` when expecting\
    \ `;` following statement\\n/tmp/tmp1v5td3i6.d(33): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1v5td3i6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    k = min(k, arr.length);\n\
    \    foreach (i; 0 .. k)\n    {\n        long max = arr[i];\n        long idx\
    \ = i;\n        foreach (j; i .. arr.length)\n        {\n            if (arr[j]\
    \ > max)\n            {\n                max = arr[j];\n                idx =\
    \ j;\n            }\n        }\n        arr[idx] = arr[i];\n        arr[i] = max;\n\
    \    }\n    return arr[0 .. k];\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoj_x9tin.d(30): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj_x9tin.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] max = new long[arr.length];\n    max[0] = arr[0];\n    for (long i\
    \ = 1; i < arr.length; i++) \n    {\n        max[i] = max(max[i - 1], arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) \n    {\n        result[i] = max[(long)arr.length\
    \ - k + i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6ak_igg.d(39): Error: C style cast illegal, use `cast(long)arr.length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6ak_igg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    import std.algorithm.comparison\
    \ : sort;\n    import std.algorithm.iteration : take, takeExactly;\n    return\
    \ arr.sort.takeExactly(k);\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpda2qliln.d(30): Error: module `std.algorithm.comparison` import\
    \ `sort` not found\\n/tmp/tmpda2qliln.d(31): Error: module `std.algorithm.iteration`\
    \ import `take` not found\\n/tmp/tmpda2qliln.d(31): Error: module `std.algorithm.iteration`\
    \ import `takeExactly` not found\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpda2qliln.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    if (arr.length == k) return\
    \ arr;\n    long[] res = new long[k];\n    int index = 0;\n    for (int i = 0;\
    \ i < arr.length; i++) {\n        while (index > 0 && res[index - 1] < arr[i]\
    \ && arr.length - i + index > k) {\n            index--;\n        }\n        if\
    \ (index < k) {\n            res[index++] = arr[i];\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgzvcng2i.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a3d]\\n??:? void tmpgzvcng2i.__unittest_L43_C1()\
    \ [0x428033]\\n??:? void tmpgzvcng2i.__modtest() [0x4287bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b985]\\n??:? runModuleUnitTests [0x42c8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f00]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e87]\\n??:? _d_run_main [0x428df2]\\n??:? main [0x4287cf]\\\
    n??:? __libc_start_main [0xa07e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvfgsyphb.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpvfgsyphb.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpvfgsyphb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long len = arr.length;\n\
    \    if (k == 0)\n        return [];\n    if (k == len)\n        return arr;\n\
    \    long low = min(arr);\n    long high = max(arr);\n    long[] result = new\
    \ long[cast(int)k];\n    while (low <= high) \n    {\n        long max = low;\n\
    \        long count = 0;\n        long[] temp = new long[len];\n        for (long\
    \ i = 0; i < len; i++) \n        {\n            if (arr[cast(int)i] > max) \n\
    \            {\n                temp[cast(int)count] = arr[cast(int)i];\n    \
    \            count++;\n            }\n        }\n        if (count >= k) \n  \
    \      {\n            result = temp[0..cast(int)k];\n            low = max + 1;\n\
    \        } \n        else \n        {\n            high = max - 1;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjbfl9gl3.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpjbfl9gl3.d(36): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjbfl9gl3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp;\n    int j = 0;\n    for (int i = 0; i < k; i++)\n    {\n  \
    \      result[i] = arr[i];\n    }\n    sort(result);\n    for (int i = k; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n      \
    \      temp = new long[result.length];\n            for (int ii = 0; ii < result.length;\
    \ ii++)\n            {\n                temp[ii] = result[ii];\n            }\n\
    \            result[0] = arr[i];\n            sort(result);\n            for (int\
    \ ii = 0; ii < result.length; ii++)\n            {\n                temp[ii] =\
    \ result[ii];\n            }\n            result = temp;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dhcxyzu.d(37): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp8dhcxyzu.d(38): Error: cannot implicitly convert\
    \ expression `k` of type `long` to `int`\\n/tmp/tmp8dhcxyzu.d(48): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8dhcxyzu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] max_arr = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        max_arr[i] = -1001;\n    }\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > max_arr[0])\n\
    \        {\n            max_arr[0] = arr[i];\n            sort(max_arr);\n   \
    \     }\n    }\n    return max_arr;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaun7iade.d(40): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaun7iade.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[(int)k];\n\
    \    int index = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        if(index\
    \ == 0)\n        {\n            res[index] = arr[i];\n            index++;\n \
    \       }\n        else\n        {\n            if(index < k)\n            {\n\
    \                int j = 0;\n                for(; j < index; j++)\n         \
    \       {\n                    if(arr[i] > res[j])\n                    {\n  \
    \                      break;\n                    }\n                }\n    \
    \            if(j < index)\n                {\n                    int t = index;\n\
    \                    while(t > j)\n                    {\n                   \
    \     res[t] = res[t - 1];\n                        t--;\n                   \
    \ }\n                    res[j] = arr[i];\n                    index++;\n    \
    \            }\n                else\n                {\n                    res[index]\
    \ = arr[i];\n                    index++;\n                }\n            }\n\
    \            else\n            {\n                int j = 0;\n               \
    \ for(; j < index; j++)\n                {\n                    if(arr[i] > res[j])\n\
    \                    {\n                        break;\n                    }\n\
    \                }\n                if(j < index)\n                {\n       \
    \             int t = index;\n                    while(t > j)\n             \
    \       {\n                        res[t] = res[t - 1];\n                    \
    \    t--;\n                    }\n                    res[j] = arr[i];\n     \
    \           }\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26287jpw.d(30): Error: C style cast illegal, use `cast(int)k`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26287jpw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    auto res = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        res[i] = long.min;\n    }\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        res[upperBound(res,\
    \ arr[i])] = arr[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo9jgvlj.d(37): Error: undefined identifier `upperBound`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo9jgvlj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long i, j, s = 0, v = 0;\n\
    \    long[] r = new long[(int)k];\n    long[] a = new long[(int)k];\n    for (i\
    \ = 0; i < k; i++) \n    {\n        for (j = 0; j < k; j++) \n        {\n    \
    \        if (a[(int)j] > v) \n            {\n                v = a[(int)j];\n\
    \                s = j;\n            }\n        }\n        r[(int)i] = v;\n  \
    \      a[(int)s] = arr[(int)i];\n        v = 0;\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8um4tqqq.d(31): Error: C style cast illegal, use `cast(int)k`\\\
    n/tmp/tmp8um4tqqq.d(32): Error: C style cast illegal, use `cast(int)k`\\n/tmp/tmp8um4tqqq.d(37):\
    \ Error: C style cast illegal, use `cast(int)j`\\n/tmp/tmp8um4tqqq.d(39): Error:\
    \ C style cast illegal, use `cast(int)j`\\n/tmp/tmp8um4tqqq.d(43): Error: C style\
    \ cast illegal, use `cast(int)i`\\n/tmp/tmp8um4tqqq.d(44): Error: C style cast\
    \ illegal, use `cast(int)s`\\n/tmp/tmp8um4tqqq.d(44): Error: C style cast illegal,\
    \ use `cast(int)i`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8um4tqqq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] a = new long[arr.length];\n\
    \    long n = 0;\n    foreach(e; arr)\n    {\n        while(n > 0 && n + arr.length\
    \ - i > k && a[n - 1] < e)\n            n--;\n        if(n < k)\n            a[n++]\
    \ = e;\n    }\n    return a[0..k];\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzlhxstr2.d(34): Error: undefined identifier `i`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzlhxstr2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[(int)k];\n\
    \    foreach(i; 0 .. k)\n    {\n        long max = INT_MIN;\n        foreach(j;\
    \ 0 .. arr.length)\n        {\n            if(arr[j] > max)\n            {\n \
    \               max = arr[j];\n            }\n        }\n        res[i] = max;\n\
    \        foreach(j; 0 .. arr.length)\n        {\n            if(arr[j] == max)\n\
    \            {\n                arr[j] = INT_MIN;\n                break;\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc7nugxms.d(30): Error: C style cast illegal, use `cast(int)k`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7nugxms.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    auto res = new long[](k);\n\
    \    auto heap = new std.priority_queue!int(std.greater!int);\n    int i = 0;\n\
    \    while (i < k) \n    {\n        heap.push(arr[i]);\n        i++;\n    }\n\
    \    while (i < arr.length) \n    {\n        heap.push(arr[i]);\n        heap.pop();\n\
    \        i++;\n    }\n    i = k - 1;\n    while (i >= 0) \n    {\n        res[i]\
    \ = heap.top;\n        heap.pop();\n        i--;\n    }\n    return res;\n}\n\
    // @lc code=end\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfjwcnbwl.d(31): Error: template identifier `priority_queue` is\
    \ not a member of import `tmpfjwcnbwl.std`\\n/tmp/tmpfjwcnbwl.d(44): Error: cannot\
    \ implicitly convert expression `k - 1L` of type `long` to `int`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjwcnbwl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    auto res = new long[](k);\n\
    \    for (long i = 0; i < k; i++)\n    {\n        res[i] = arr[i];\n    }\n  \
    \  std.sort(res);\n    for (long i = k; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] > res[0])\n        {\n            res[0] = arr[i];\n            std.sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaiem9i8m.d(35): Error: undefined identifier `sort` in package\
    \ `std`\\n/tmp/tmpaiem9i8m.d(41): Error: undefined identifier `sort` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaiem9i8m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    struct MaxHeap {\n    \
    \    long[] heap;\n        long size;\n        void add(long x)\n        {\n \
    \           auto p = size++;\n            heap[p] = x;\n            auto parent\
    \ = p / 2;\n            while (p > 0 && heap[parent] < heap[p])\n            {\n\
    \                auto t = heap[parent];\n                heap[parent] = heap[p];\n\
    \                heap[p] = t;\n                p = parent;\n                parent\
    \ = p / 2;\n            }\n        }\n        long top()\n        {\n        \
    \    return heap[0];\n        }\n        void pop()\n        {\n            heap[0]\
    \ = heap[--size];\n            auto p = 0;\n            while (true)\n       \
    \     {\n                auto left = p * 2 + 1;\n                auto right =\
    \ p * 2 + 2;\n                if (left >= size)\n                    break;\n\
    \                auto largest = left;\n                if (right < size && heap[right]\
    \ > heap[left])\n                    largest = right;\n                if (heap[p]\
    \ < heap[largest])\n                {\n                    auto t = heap[p];\n\
    \                    heap[p] = heap[largest];\n                    heap[largest]\
    \ = t;\n                    p = largest;\n                }\n                else\n\
    \                    break;\n            }\n        }\n    }\n    if (k == 0)\n\
    \        return [];\n    MaxHeap mh;\n    mh.heap = new long[k];\n    mh.size\
    \ = 0;\n    foreach (x; arr)\n    {\n        if (mh.size < k)\n            mh.add(x);\n\
    \        else if (x > mh.top())\n        {\n            mh.pop();\n          \
    \  mh.add(x);\n        }\n    }\n    long[] result = new long[k];\n    auto p\
    \ = k - 1;\n    while (mh.size > 0)\n    {\n        result[p--] = mh.top();\n\
    \        mh.pop();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmt6b9e7h.d(105): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a32d]\\n??:? void tmpmt6b9e7h.__unittest_L100_C1()\
    \ [0x4289bc]\\n??:? void tmpmt6b9e7h.__modtest() [0x429134]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a00a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc38]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429fe1]\\n??:? runModuleUnitTests [0x42e8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a7f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a777]\\n??:? _d_run_main [0x42a6e2]\\n??:? main [0x429147]\\\
    n??:? __libc_start_main [0xc5730554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] buffer = new long[k];\n\
    \    foreach(idx, item; arr)\n    {\n        buffer[0] = max(buffer[0], item);\n\
    \        long pos = 0;\n        while(buffer[pos] > buffer[pos + 1])\n       \
    \ {\n            long temp = buffer[pos];\n            buffer[pos] = buffer[pos\
    \ + 1];\n            buffer[pos + 1] = temp;\n            pos++;\n        }\n\
    \    }\n    return buffer;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_gy99pt.d(33): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_gy99pt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    // sort the array\n   \
    \ arr.sort;\n    // create a new array of size k and fill it with elements from\
    \ the right side of arr\n    auto result = new long[k];\n    result[0 .. k] =\
    \ arr[arr.length - k .. arr.length];\n    // return the sorted array\n    return\
    \ result.sort;\n}\n// UNIT TESTS\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5v19fdf.d(31): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpd5v19fdf.d(36): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5v19fdf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    auto n = arr.length;\n\
    \    if (n == 0) return null;\n    if (k >= n) return arr;\n    // Here we use\
    \ a DArray to store the result of top k elements.\n    auto result = new long[][n];\n\
    \    // The smallest elements are at the end of the array.\n    // Here we set\
    \ the default of last element to INT_MIN.\n    result[n - 1] = min;\n    // When\
    \ the element is larger than the last element in the array,\n    // we need to\
    \ update all the elements in the array.\n    foreach (i, v; arr) \n    {\n   \
    \     if (v > result[n - 1]) \n        {\n            int last = n - 1;\n    \
    \        while (last > 0 && v > result[last - 1]) \n            {\n          \
    \      result[last] = result[last - 1];\n                last--;\n           \
    \ }\n            result[last] = v;\n        }\n    }\n    // Because the array\
    \ is sorted, \n    // the last elements are the smallest elements in the array.\n\
    \    // So we need to reserve the DArray.\n    std.algorithm.reverse(result);\n\
    \    return result[0 .. k];\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpijm3_5qh.d(37): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpijm3_5qh.d(42): Error: incompatible types for `(v)\
    \ > (result[n - 1LU])`: `long` and `long[]`\\n/tmp/tmpijm3_5qh.d(44): Error: cannot\
    \ implicitly convert expression `n - 1LU` of type `ulong` to `int`\\n/tmp/tmpijm3_5qh.d(45):\
    \ Error: incompatible types for `(v) > (result[cast(ulong)(last - 1)])`: `long`\
    \ and `long[]`\\n/tmp/tmpijm3_5qh.d(50): Error: cannot implicitly convert expression\
    \ `v` of type `long` to `long[]`\\n/tmp/tmpijm3_5qh.d(56): Error: undefined identifier\
    \ `algorithm` in package `std`\\n/tmp/tmpijm3_5qh.d(57): Error: cannot implicitly\
    \ convert expression `result[0..cast(ulong)k]` of type `long[][]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijm3_5qh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
