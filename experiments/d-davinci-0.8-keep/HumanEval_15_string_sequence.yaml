name: HumanEval_15_string_sequence
language: d
prompt: "import std.math;\n/*\n Return a string containing space-delimited numbers\
  \ starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>>\
  \ string_sequence(5)\n    '0 1 2 3 4 5'\n    \n*/\nstring string_sequence(long n)\
  \ \n"
tests: "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
  \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
  \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
completions: ["{\n    import std.string;\n    import std.range;\n    auto sequence\
    \ = iota(0, n + 1);\n    return join(map!(to!string)(sequence));\n}", "{\n\tstring\
    \ result = \"\";\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tresult += \" \"\
    \ + to!string(i);\n\t}\n\treturn result;\n}", "{\n    string result;\n    foreach\
    \ (i; 0..n + 1) \n    {\n        result ~= to!string(i) ~ \" \";\n    }\n    return\
    \ result;\n}", "{\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.string;\n    auto s = iota(0, n+1).map!(to!string).join(\" \");\n    return\
    \ s;\n}", "{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n\
    \        s += to!string(i);\n        if (i < n) s += \" \";\n    }\n    return\
    \ s;\n}", "{\n    return string_sequence_r(n, \"\");\n}", "{\n    string result\
    \ = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n        result = result ~\
    \ i.to!string;\n        if (i != n)\n            result = result ~ \" \";\n  \
    \  }\n    return result;\n}", "{\n    string s = to!string(n);\n    for (long\
    \ i = n - 1; i >= 0; i--)\n    {\n        s = to!string(i) ~ \" \" ~ s;\n    }\n\
    \    return s;\n}", "{\n    long i;\n    string result = \"\";\n    for (i = 0;\
    \ i <= n; i += 1)\n    {\n        result += i;\n        if (i != n) \n       \
    \ {\n            result += \" \";\n        }\n    }\n    return result;\n}", "{\n\
    \    return n == 0 ? \"0\" : n <= 10 ? n.to!string() : string_sequence(n-1) ~\
    \ \" \" ~ n.to!string();\n}", "{\n    string s = \"\";\n    for (long i = 0; i\
    \ <= n; i += 1) \n    {\n        if (i > 0)\n            s += \" \";\n       \
    \ s += to!string(i);\n    }\n    return s;\n}\n/*\n Count the number of odd numbers\
    \ in an array of integers.\n    >>> count_odds([2, 3, 4, 5, 7, 10])\n    3\n \
    \   >>> count_odds([-4, 0, 2, 4, 8])\n    0\n    >>> count_odds([2])\n    0\n\
    */\nsize_t count_odds(size_t[] a)\n{\n    size_t count = 0;\n    foreach (size_t\
    \ x; a)\n    {\n        if (x % 2 == 1)\n            count += 1;\n    }\n    return\
    \ count;\n}\n/*\n Find a string that is the longest common substring of two strings.\n\
    \    >>> longest_common_substring(\"abc\", \"xyz\")\n    \"\"\n    >>> longest_common_substring(\"\
    xabxcdxxefxgx\", \"1ab2cd34ef5g6\")\n    \"abcd\"\n    >>> longest_common_substring(\"\
    12ab34cd56ef\", \"ab12cd34ef56\")\n    \"12cd34ef\"\n*/\nstring longest_common_substring(string\
    \ a, string b)\n{\n    string longest = \"\";\n    foreach (size_t i; 0 .. a.length)\n\
    \    {\n        foreach (size_t j; i + 1 .. a.length)\n        {\n           \
    \ string sub = a[i .. j];\n            if (b.count(sub) && sub.length > longest.length)\n\
    \                longest = sub;\n        }\n    }\n    return longest;\n}\n/*\n\
    \ Print the size of each tuple in an array of tuples\n    >>> print_tuple_size([(1,),\
    \ (1, 2), (1, 2, 3)])\n    1\n    2\n    3\n*/", "{\n    return n == 0 ? \"0\"\
    \ : string_sequence(n - 1) ~ \" \" ~ n;\n}", "{\n    string ret = \"\";\n    foreach\
    \ (long i; 0..n+1) {\n        ret ~= to!string(i) ~ \" \";\n    }\n    return\
    \ ret;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ n upto 0 inclusive.\n    >>> string_sequence_reversed(0)\n    '0'\n    >>> string_sequence_reversed(5)\n\
    \    '5 4 3 2 1 0'\n*/\nstring string_sequence_reversed(long n) \n{\n    string\
    \ ret = \"\";\n    foreach (long i; n..-1) {\n        ret ~= to!string(i) ~ \"\
    \ \";\n    }\n    return ret;\n}", "{\n    string ret;\n    ret~=(string) n;\n\
    \    return ret;\n}", "{\n    string result;\n    long i = 0;\n    while (i <=\
    \ n)\n    {\n        result ~= to!string(i);\n        result ~= \" \";\n     \
    \   i++;\n    }\n    return result;\n}", "{\n    char[] buf = new char[256];\n\
    \    auto p = buf.ptr;\n    while (1)\n    {\n        p = mx_formatNum(p, n);\n\
    \        if (n == 0)\n            break;\n        p[0] = ' ';\n        p++;\n\
    \        n--;\n    }\n    return buf[0..(p - buf.ptr)];\n}", "{\n    string result;\n\
    \    foreach (int i; 0 .. n+1) \n    {\n        result ~= to!string(i) ~ \" \"\
    ;\n    }\n    return result;\n}", "{\n    string result;\n    for (int i = 0;\
    \ i <= n; i++)\n    {\n        if (result != \"\")\n            result += \" \"\
    ;\n        result += to!string(i);\n    }\n    return result;\n}", "{\n\tstring\
    \ t;\n\tfor (int i = 0; i <= n; i++) \n\t{\n\t\tt ~= i;\n\t\tif (i != n) \n\t\t\
    {\n\t\t\tt ~= \" \";\n\t\t}\n\t}\n\treturn t;\n}", "{\n    // implement this function\n\
    \    string s = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n        s += to!string(i)\
    \ + \" \";\n    }\n    return s;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
