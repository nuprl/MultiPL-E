name: HumanEval_117_select_words
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    if(s.length < 1) \n        return [];\n    \n    string[] result\
    \ = [];\n    string[] words = split(s, \" \");\n    foreach(i, word; words) \n\
    \    {\n        long count = 0;\n        foreach(j, c; word) \n        {\n   \
    \         if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n     \
    \           count++;\n        }\n        if(count == n)\n            result ~=\
    \ word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8hl79ywe.d(23): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hl79ywe.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] arr = split(s, \" \");\n    auto b = arr.filter!(a => {\n\
    \        int count = 0;\n        foreach(ch; a)\n        {\n            if(ch.isLetter\
    \ && ch.isConsonant)\n                count++;\n        }\n        return count\
    \ == n;\n    });\n    return b;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyikuqi0n.d(19): Error: undefined identifier `split`\\n/tmp/tmpyikuqi0n.d(20):\
    \ Error: no property `filter` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyikuqi0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    // find all words then extract words with n consonants\n    string[]\
    \ words = s.split;\n    words = words.filter!(x => x.length); // remove empty\
    \ words\n    words = words.filter!(x => x.filter!(c => !'aeiou'.canFind(c)).length\
    \ == n);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz3hzksr1.d(22): Error: unterminated character constant\\n/tmp/tmpz3hzksr1.d(22):\
    \ Error: found `eiou` when expecting `)` following template argument list\\n/tmp/tmpz3hzksr1.d(22):\
    \ Error: unterminated character constant\\n/tmp/tmpz3hzksr1.d(22): Error: found\
    \ `63U` when expecting `)` following template argument list\\n/tmp/tmpz3hzksr1.d(22):\
    \ Error: found `canFind` when expecting `;` following statement\\n/tmp/tmpz3hzksr1.d(22):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmpz3hzksr1.d(22):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmpz3hzksr1.d(22):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3hzksr1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    return n > 0 ?\n        filter!((string x) => count_consonants(x)\
    \ == n)(s.split) :\n        new string[];\n}\nlong count_consonants(string s)\
    \ \n{\n    return (sum(map!((dchar c) => \n                !(c.isVowel || c.isNumeric\
    \ || c.isLetter || c.isPunctuation))\n                (s)));\n}\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy45q76so.d(20): Error: template instance `filter!((string x)\
    \ => count_consonants(x) == n)` template `filter` is not defined\\n/tmp/tmpy45q76so.d(21):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpy45q76so.d(25): Error: undefined identifier `sum`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy45q76so.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    assert(n > 0);\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0q4ft7r.d(20): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0q4ft7r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    import std.array;\n    import std.string;\n    import std.conv;\n\
    \    import std.algorithm;\n    import std.stdio;\n    import std.math;\n    import\
    \ std.range;\n    import std.array;\n    import std.ascii;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.functional;\n    import std.stdio;\n\
    \    import std.string;\n    import std.utf;\n    import std.conv;\n    import\
    \ std.array;\n    import std.algorithm;\n    import std.math;\n    import std.utf;\n\
    \    import std.conv;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.typecons;\n    import std.math;\n    if(s.empty)\n\
    \    {\n        return new string[0];\n    }\n    else\n    {\n        string[]\
    \ a1 = split(s,\" \");\n        auto result = a1.filter!(x => x.countChar!(c =>\
    \ c.isAlpha && !c.isConsonant) == n);\n        return result;\n    }\n    \n \
    \   \n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4yf2q5_y.d(52): Error: no property `countChar` for type `string`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):\
    \        instantiated from here: `FilterResult!(__lambda3, string[])`\\n/tmp/tmp4yf2q5_y.d(52):\
    \        instantiated from here: `filter!(string[])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4yf2q5_y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(n == count(word))\n            result ~= word;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpryqwvpfb.d(19): Error: undefined identifier `split`\\n/tmp/tmpryqwvpfb.d(23):\
    \ Error: undefined identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpryqwvpfb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] res = [];\n    foreach(i,\
    \ word; words)\n    {\n        if(n == count_consonants(word))\n        {\n  \
    \          res ~= word;\n        }\n    }\n    return res;\n}\nlong count_consonants(string\
    \ s)\n{\n    long count = 0;\n    string vowels = \"aeiouAEIOU\";\n    foreach(c;\
    \ s)\n    {\n        if(vowels.find(c) == -1)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqa72gnyp.d(19): Error: undefined identifier `split`\\n/tmp/tmpqa72gnyp.d(36):\
    \ Error: no property `find` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqa72gnyp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] result = new string[0];\n    foreach(word; s.split())\n\
    \    {\n        //writefln(\"word=%s consonants=%s\", word, consonants_count(word));\n\
    \        if(consonants_count(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\n \nlong consonants_count(string s)\n\
    {\n    long result = 0;\n    foreach(ch; s)\n    {\n        //writefln(\"ch=%s\
    \ isVowel=%s\", ch, isVowel(ch));\n        if(!isVowel(ch))\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\n \nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsfvcroeq.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpsfvcroeq.d(37): Error: undefined identifier `isVowel`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfvcroeq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    auto results = filter!(w =>\
    \ count_consonants(w) == n)(words);\n    return results;\n}\nlong count_consonants(string\
    \ w)\n{\n    long numVowels = 0;\n    long numConsonants = 0;\n    string vowels\
    \ = \"aeiouAEIOU\";\n    foreach(c; w)\n    {\n        if(c in vowels)\n     \
    \       numVowels++;\n        else\n            numConsonants++;\n    }\n    return\
    \ numConsonants;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_9kaaeh.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp0_9kaaeh.d(20): Error: template instance `filter!((w) => count_consonants(w)\
    \ == n)` template `filter` is not defined\\n/tmp/tmp0_9kaaeh.d(30): Error: incompatible\
    \ types for `(c) in (vowels)`: `immutable(char)` and `string`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_9kaaeh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    auto data = split(s, \" \");\n    data = filter!(item => item.length\
    \ == n)(data);\n    static immutable string vowels = \"aeiou\";\n    data = filter!(item\
    \ => item.toLower().count!(item => item in vowels) == n)(data);\n    return data;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_yx6i3qj.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_yx6i3qj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] a;\n    string[] b;\n    string[] c;\n    size_t idx =\
    \ 0;\n    size_t idx2 = 0;\n    size_t idx3 = 0;\n    size_t idx4 = 0;\n    size_t\
    \ k,m;\n    size_t k1,m1;\n    b = split(s, ' ');\n    a = new string[b.length];\n\
    \    c = new string[b.length];\n    foreach(i;b)\n    {\n        k = 0;\n    \
    \    m = 0;\n        foreach(j;i)\n        {\n            if(!in(\"a\",j) && !in(\"\
    e\",j) && !in(\"i\",j) && !in(\"o\",j) && !in(\"u\",j))\n            {\n     \
    \           k++;\n            }\n            else\n            {\n           \
    \     m++;\n            }\n        }\n        if(k == n)\n        {\n        \
    \    a[idx] = i;\n            idx++;\n        }\n        else if(m == n)\n   \
    \     {\n            c[idx3] = i;\n            idx3++;\n        }\n    }\n   \
    \ b = new string[idx];\n    foreach(k1; 0..idx)\n    {\n        b[k1] = a[k1];\n\
    \    }\n    c = new string[idx3];\n    foreach(m1; 0..idx3)\n    {\n        c[m1]\
    \ = a[m1];\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyes2kebx.d(37): Error: expression expected, not `in`\\n/tmp/tmpyes2kebx.d(37):\
    \ Error: expression expected, not `in`\\n/tmp/tmpyes2kebx.d(37): Error: expression\
    \ expected, not `in`\\n/tmp/tmpyes2kebx.d(37): Error: expression expected, not\
    \ `in`\\n/tmp/tmpyes2kebx.d(37): Error: expression expected, not `in`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyes2kebx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    //n is number of consonants required in words\n    import std.algorithm\
    \ : map, filter, canFind;\n    //import std.range : hasLength;\n    auto words\
    \ = s.split;\n    //remove words with less than n consonants\n    words = words.filter!(x\
    \ => x.count!(y => y.isConsonant))(w => w.count!(y => y.isConsonant) >= n);\n\
    \    //remove words with more than n consonants\n    words = words.filter!(x =>\
    \ x.count!(y => y.isConsonant))(w => w.count!(y => y.isConsonant) <= n);\n   \
    \ return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzsy8nyo0.d(22): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsy8nyo0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] ret;\n    string[] parts = split(s);\n    foreach(part;\
    \ parts) {\n        if(consonants(part) == n)\n            ret ~= part;\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ldnnd28.d(20): Error: undefined identifier `split`\\n/tmp/tmp4ldnnd28.d(22):\
    \ Error: undefined identifier `consonants`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp4ldnnd28.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    char[]\
    \ str = split(s);\n    string[] result;\n    string word = \"\";\n    foreach(char\
    \ c; str)\n    {\n        if(c == ' ')\n        {\n            if(occurrences(toLower(word),\
    \ vowel) == n)\n                result ~= word;\n            word = \"\";\n  \
    \      }\n        else\n            word ~= c;\n    }\n    if(occurrences(toLower(word),\
    \ vowel) == n)\n        result ~= word;\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zpunqwk.d(20): Error: undefined identifier `split`\\n/tmp/tmp4zpunqwk.d(27):\
    \ Error: undefined identifier `occurrences`\\n/tmp/tmp4zpunqwk.d(34): Error: undefined\
    \ identifier `occurrences`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4zpunqwk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    int[] vowels = { 'a', 'e', 'i', 'o', 'u', 'y' };\n    int[] consonants\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z' };\n    long cons_count;\n    string s2;\n    string[]\
    \ words;\n    string[] selected_words;\n    words = s.split;\n    foreach(i, word;\
    \ words)\n    {\n        cons_count = 0;\n        s2 = word.lowercase;\n     \
    \   foreach(c; s2)\n        {\n            if(c in consonants)\n             \
    \   cons_count++;\n        }\n        if(cons_count == n)\n            selected_words\
    \ ~= word;\n    }\n    return selected_words;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuagkei9c.d(19): Error: a struct is not a valid initializer for\
    \ a `int[]`\\n/tmp/tmpuagkei9c.d(20): Error: a struct is not a valid initializer\
    \ for a `int[]`\\n/tmp/tmpuagkei9c.d(25): Error: no property `split` for type\
    \ `string`\\n/tmp/tmpuagkei9c.d(29): Error: no property `lowercase` for type `string`\\\
    n/tmp/tmpuagkei9c.d(32): Error: incompatible types for `(c) in (consonants)`:\
    \ `immutable(char)` and `int[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpuagkei9c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] arrayString = s.split();\n    string[] temp;\n    string\
    \ word;\n    string consonants = \"bcdfghjklmnpqrstvwxz\";\n    long numOfConsonants\
    \ = 0;\n    foreach(word; arrayString)\n    {\n        numOfConsonants = 0;\n\
    \        foreach(char c; word)\n        {\n            if(consonants.contains(c))\n\
    \            {\n                numOfConsonants++;\n            }\n        }\n\
    \        if(numOfConsonants == n)\n        {\n            temp ~= word;\n    \
    \    }\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmejpw0iv.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpmejpw0iv.d(24): Error: variable `word` is shadowing variable `tmpmejpw0iv.select_words.word`\\\
    n/tmp/tmpmejpw0iv.d(29): Error: no property `contains` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmejpw0iv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] ret = [];\n    // write your code here.\n    size_t len\
    \ = s.length;\n    bool inWord = false;\n    bool isSpace = false;\n    bool isNonConsonant\
    \ = false;\n    size_t begin = 0;\n    size_t end = 0;\n    size_t consonantCount\
    \ = 0;\n    foreach(i, c; s)\n    {\n        isSpace = c == ' ';\n        isNonConsonant\
    \ = c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n        if(inWord\
    \ && !isSpace)\n        {\n            if(isNonConsonant)\n            {\n   \
    \             consonantCount++;\n            }\n        }\n        else if(!inWord\
    \ && !isSpace)\n        {\n            inWord = true;\n            if(isNonConsonant)\n\
    \            {\n                consonantCount++;\n            }\n           \
    \ begin = i;\n        }\n        else if(inWord && isSpace)\n        {\n     \
    \       inWord = false;\n            end = i - 1;\n            if(consonantCount\
    \ == n)\n            {\n                ret ~= s[begin..end];\n            }\n\
    \            consonantCount = 0;\n        }\n    }\n    if(inWord)\n    {\n  \
    \      if(consonantCount == n)\n        {\n            ret ~= s[begin..];\n  \
    \      }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvhng705.d(63): Error: expression expected, not `]`\\n/tmp/tmplvhng705.d(63):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmplvhng705.d(64): Error: expression\
    \ expected, not `}`\\n/tmp/tmplvhng705.d(65): Error: found `}` when expecting\
    \ `,`\\n/tmp/tmplvhng705.d(66): Error: expression expected, not `return`\\n/tmp/tmplvhng705.d(66):\
    \ Error: found `ret` when expecting `,`\\n/tmp/tmplvhng705.d(66): Error: expression\
    \ expected, not `;`\\n/tmp/tmplvhng705.d(67): Error: found `}` when expecting\
    \ `,`\\n/tmp/tmplvhng705.d(68): Error: expression expected, not `unittest`\\n/tmp/tmplvhng705.d(69):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmplvhng705.d(70): Error: expression\
    \ expected, not `alias`\\n/tmp/tmplvhng705.d(70): Error: found `candidate` when\
    \ expecting `,`\\n/tmp/tmplvhng705.d(70): Error: expression expected, not `=`\\\
    n/tmp/tmplvhng705.d(70): Error: found `select_words` when expecting `,`\\n/tmp/tmplvhng705.d(70):\
    \ Error: expression expected, not `;`\\n/tmp/tmplvhng705.d(72): Error: found `assert`\
    \ when expecting `,`\\n/tmp/tmplvhng705.d(72): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmplvhng705.d(73): Error: found `;` when expecting `,`\\n/tmp/tmplvhng705.d(74):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmplvhng705.d(75): Error: found `;`\
    \ when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvhng705.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92no09_y.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp92no09_y.d(23): Error: undefined identifier `count_consonants`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92no09_y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    // Print all the words of length 5 \n    string[] words = s.split();\n\
    \    string[] result;\n    int result_idx = 0;\n    foreach(word; words) {\n \
    \       int consonants = 0;\n        foreach(char c; word) {\n            if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n                consonants++;\n\
    \        }\n        if (consonants == n) {\n            result ~= word;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdwvz8shl.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwvz8shl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
