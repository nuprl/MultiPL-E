name: HumanEval_83_starts_one_ends
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ \n        return 2;\n    else \n        return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps5j4n2_7.d(20): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d8d]\\n??:? void tmps5j4n2_7.__unittest_L16_C1()\
    \ [0x427a70]\\n??:? void tmps5j4n2_7.__modtest() [0x427b10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a91d]\\n??:? runModuleUnitTests [0x42b889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428163]\\n??:? _d_run_main [0x4280ce]\\n??:? main [0x427b23]\\\
    n??:? __libc_start_main [0xbf392554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n <= 0)\
    \ return 0;\n    if (n == 1) return 1;\n    return 10 * starts_one_ends(n - 1)\
    \ + \n           pow(10, n - 1) - \n           pow(10, n - 2);\n}\nunittest\n\
    {\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L)\
    \ == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpolu_gd8r.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpolu_gd8r.__unittest_L17_C1()\
    \ [0x427b05]\\n??:? void tmpolu_gd8r.__modtest() [0x427c3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c4f]\\\
    n??:? __libc_start_main [0x27cc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n\t/* \n\t\tAssuming\
    \ you're asking for the count of integers in base 10, the \n\t\tanswer for n =\
    \ 0 is 1, for n = 1 is 1, for n = 2 is 2 (11 and 11), \n\t\tfor n = 3 is 5 (101,\
    \ 111, 121, 131, 141), for n = 4 is 10, \n\t\tfor n = 5 is 20, and so on.\n\t\t\
    \n\t\tComputing that sequence is not a difficult problem.\n\t*/\n\tenum int ret;\n\
    \tswitch(n)\n\t{\n\t\tcase 0:\n\t\t\tret = 1;\n\t\tbreak;\n\t\tcase 1:\n\t\t\t\
    ret = 1;\n\t\tbreak;\n\t\tcase 2:\n\t\t\tret = 2;\n\t\tbreak;\n\t\tcase 3:\n\t\
    \t\tret = 5;\n\t\tbreak;\n\t\tcase 4:\n\t\t\tret = 10;\n\t\tbreak;\n\t\tcase 5:\n\
    \t\t\tret = 20;\n\t\tbreak;\n\t\tdefault:\n\t\t\tret = -1;\n\t\tbreak;\n\t}\n\t\
    return ret;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl3k5iwqc.d(19): Error: variable `tmpl3k5iwqc.starts_one_ends.ret`\
    \ manifest constants must have initializers\\n/tmp/tmpl3k5iwqc.d(23): Error: cannot\
    \ modify constant `ret`\\n/tmp/tmpl3k5iwqc.d(26): Error: cannot modify constant\
    \ `ret`\\n/tmp/tmpl3k5iwqc.d(29): Error: cannot modify constant `ret`\\n/tmp/tmpl3k5iwqc.d(32):\
    \ Error: cannot modify constant `ret`\\n/tmp/tmpl3k5iwqc.d(35): Error: cannot\
    \ modify constant `ret`\\n/tmp/tmpl3k5iwqc.d(38): Error: cannot modify constant\
    \ `ret`\\n/tmp/tmpl3k5iwqc.d(41): Error: cannot modify constant `ret`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3k5iwqc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\
    \ \n        return 10; \n  \n    // Dp[i] contains the count of n-digit positive\
    \ integers that start or end with 1.\n    long[] Dp = new long[n + 1]; \n    Dp[1]\
    \ = 10; \n  \n    // Each digit can be used 10 times except 0,1,9. \n    // There\
    \ are two cases: \n    // a) If the number starts with 1, it can be followed by\
    \ any digit. \n    // b) If the number ends with 1, it can start with only 1.\
    \ \n    for (int i = 2; i <= n; i++) \n        Dp[i] = (Dp[i - 1] * 9) + Dp[i\
    \ - 1]; \n  \n    return Dp[n]; \n} \n/*\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1) \n   \
    \     return 10; \n  \n    // Dp[i] contains the count of n-digit positive integers\
    \ that start or end with 1.\n    long[] Dp = new long[n + 1]; \n    Dp[1] = 10;\
    \ \n  \n    // Each digit can be used 10 times except 0,1,9. \n    // There are\
    \ two cases: \n    // a) If the number starts with 1, it can be followed by any\
    \ digit. \n    // b) If the number ends with 1, it can start with only 1. \n \
    \   for (int i = 2; i <= n; i++) \n        Dp[i] = (Dp[i - 1] * 9) + Dp[i - 1];\
    \ \n  \n    return Dp[n]; \n} \n/*\n    This function returns the count of the\
    \ numbers \n    with digit sum equal to 'sum' and \n    of length 'len'\n    \n\
    \    constraint: 0 < len <= log10(N) + 1 and \n                1 <= sum <= 81\
    \ \n    \n    example: \n        len\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvtjtfbp.d(50): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvtjtfbp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    // http://mathforum.org/library/drmath/view/57132.html\n\
    \    // n-digit positive integers that start or end with 1 \n    // = (n-1) *\
    \ 10 ^ (n-2)\n    // n-digit positive integers that start with 1 \n    // = 10\
    \ ^ (n-1) - 1\n    // n-digit positive integers that end with 1 \n    // = (n-1)\
    \ * 10 ^ (n-2) - 10 ^ (n-1) + 1\n    long size = pow(10, n-1);\n    return size\
    \ - 1 + size - pow(10, n-2);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: -8
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 1;\n    return (starts_one_ends(n - 1) + 9 * pow(10, n - 2));\n\
    }\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsa10reu4.d(20): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpsa10reu4.__unittest_L15_C1()\
    \ [0x427ad5]\\n??:? void tmpsa10reu4.__modtest() [0x427c0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa1d]\\n??:? runModuleUnitTests [0x42b989]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428263]\\n??:? _d_run_main [0x4281ce]\\n??:? main [0x427c1f]\\\
    n??:? __libc_start_main [0xe5b59554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long sum = 0;\n\
    \    for (long i = 0; i < n; i++) \n    {\n        sum += pow(10, i);\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq5ivc7aw.d(22): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpq5ivc7aw.__unittest_L18_C1()\
    \ [0x427aac]\\n??:? void tmpq5ivc7aw.__modtest() [0x427c04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c17]\\\
    n??:? __libc_start_main [0xfab25554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    return n *\
    \ pow(10, n - 1); \n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzfzninzx.d(18): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpzfzninzx.__unittest_L13_C1()\
    \ [0x427ab5]\\n??:? void tmpzfzninzx.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0x4a194554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long count\
    \ = 0;\n    long num = pow(10,n-1);\n    long num_end = pow(10,n) - 1;\n    for\
    \ (int i = num; i <= num_end; i++) {\n        string num = to!string(i);\n   \
    \     if (num[0] == '1' || num[num.length-1] == '1') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplkfc7rdy.d(14): Error: cannot implicitly convert expression `num`\
    \ of type `long` to `int`\\n/tmp/tmplkfc7rdy.d(15): Error: template instance `to!string`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmplkfc7rdy.d(15): Error:\
    \ variable `num` is shadowing variable `tmplkfc7rdy.starts_one_ends.num`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkfc7rdy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 10;\n    long tmp = starts_one_ends(n - 1);\n    return (tmp *\
    \ 9 + pow(10, n - 1));\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl_ens5gz.d(20): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpl_ens5gz.__unittest_L16_C1()\
    \ [0x427aac]\\n??:? void tmpl_ens5gz.__modtest() [0x427c04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c17]\\\
    n??:? __libc_start_main [0x5106b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long total =\
    \ 0;\n    long low = 1;\n    long high = 10;\n    for (long i = 1; i < n; i++)\
    \ {\n        low *= 10;\n        high *= 10;\n    }\n    for (long i = low; i\
    \ < high; i++) {\n        if (i % 10 == 1 || i / pow(10, n - 1) == 1) {\n    \
    \        total++;\n        }\n    }\n    return total;\n}\n// startswith_one\n\
    long startswith_one(long n)\n{\n    long total = 0;\n    long low = 1;\n    long\
    \ high = 10;\n    for (long i = 1; i < n; i++) {\n        low *= 10;\n       \
    \ high *= 10;\n    }\n    for (long i = low; i < high; i++) {\n        if (i /\
    \ pow(10, n - 1) == 1) {\n            total++;\n        }\n    }\n    return total;\n\
    }\n// endswith_one\nlong endswith_one(long n)\n{\n    long total = 0;\n    long\
    \ low = 1;\n    long high = 10;\n    for (long i = 1; i < n; i++) {\n        low\
    \ *= 10;\n        high *= 10;\n    }\n    for (long i = low; i < high; i++) {\n\
    \        if (i % 10 == 1) {\n            total++;\n        }\n    }\n    return\
    \ total;\n}\n// all_num_endswith_one\nlong all_num_endswith_one(long n)\n{\n \
    \   long total = 0;\n    long low = 1;\n    long high = 10;\n    for (long i =\
    \ 1; i < n; i++) {\n        low *= 10;\n        high *= 10;\n    }\n    for (long\
    \ i = low; i < high; i++) {\n        if (i % 10 == 1) {\n            total++;\n\
    \        }\n    }\n    return total;\n}\n// all_num_startswith_one\nlong all_num_startswith_one(long\
    \ n)\n{\n   \nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9m89hb8n.d(80): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9m89hb8n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long ret = 0;\n\
    \    if (n == 1) {\n        ret = 1;\n    } else if (n == 2) {\n        ret =\
    \ 11;\n    } else {\n        long start = pow(10, n - 1);\n        long end =\
    \ pow(10, n - 2);\n        ret = start - end;\n        ret *= 2;\n        ret\
    \ += end;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8ekvvkd8.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427eb5]\\n??:? void tmp8ekvvkd8.__unittest_L25_C1()\
    \ [0x427b01]\\n??:? void tmp8ekvvkd8.__modtest() [0x427c38]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbdb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa6e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa45]\\n??:? runModuleUnitTests [0x42b9b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428304]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42828b]\\n??:? _d_run_main [0x4281f6]\\n??:? main [0x427c4b]\\\
    n??:? __libc_start_main [0x721a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    return pow(2,\
    \ n - 1);\n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcd2yg64q.d(18): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e55]\\n??:? void tmpcd2yg64q.__unittest_L13_C1()\
    \ [0x427a9d]\\n??:? void tmpcd2yg64q.__modtest() [0x427bd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9e5]\\n??:? runModuleUnitTests [0x42b951]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42822b]\\n??:? _d_run_main [0x428196]\\n??:? main [0x427be7]\\\
    n??:? __libc_start_main [0xd0ad6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n==1) return\
    \ 10; \n    else \n    { \n        long sum = 9; \n        for (long i=1; i<n;\
    \ i++) \n        { \n            sum *= 10-i; \n        } \n        return sum\
    \ + starts_one_ends(n-1); \n    } \n}\nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4qkws9rj.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427db5]\\n??:? void tmp4qkws9rj.__unittest_L22_C1()\
    \ [0x427a94]\\n??:? void tmp4qkws9rj.__modtest() [0x427b34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42badb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a96e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a945]\\n??:? runModuleUnitTests [0x42b8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428204]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42818b]\\n??:? _d_run_main [0x4280f6]\\n??:? main [0x427b47]\\\
    n??:? __libc_start_main [0xeece6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    long pow10\
    \ = pow(10, n - 1);\n    return 10 * pow10 * pow10;\n}\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkv7oa8n1.d(18): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmpkv7oa8n1.__unittest_L14_C1()\
    \ [0x427a88]\\n??:? void tmpkv7oa8n1.__modtest() [0x427be0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bf3]\\\
    n??:? __libc_start_main [0x11478554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n==1)\n\
    \        return 10;\n    else if (n<=0)\n        return 0;\n    else\n    {\n\
    \        long num_starts_w_one = n-1;\n        long num_starts_w_other = n-1;\n\
    \        long num_end_w_one = n-1;\n        long num_end_w_other = n-1;\n    \
    \    long num_ones = n;\n        long num_starts_w_one_end_w_one = n-2;\n    \
    \    long num_starts_w_other_end_w_one = n-2;\n        long num_starts_w_one_end_w_other\
    \ = n-2;\n        long num_starts_w_other_end_w_other = n-2;\n        long num_ends_w_one_starts_w_one\
    \ = n-2;\n        long num_ends_w_other_starts_w_one = n-2;\n        long num_ends_w_one_starts_w_other\
    \ = n-2;\n        long num_ends_w_other_starts_w_other = n-2;\n        long num_ones_others\
    \ = n;\n        long num_others_ones = n;\n        long num_others_others = n;\n\
    \        long num_others_others_others = n;\n        long num_others_others_ones\
    \ = n;\n        long num_others_ones_others = n;\n        long num_ones_others_others\
    \ = n;\n        long num_ones_others_ones = n;\n        long num_ones_ones_others\
    \ = n;\n        long num_ones_ones_ones = n;\n        long num_others_others_others_others\
    \ = n;\n        long num_others_others_others_ones = n;\n        long num_others_others_ones_others\
    \ = n;\n        long num_others_ones_others_others = n;\n        long num_ones_others_others_others\
    \ = n\nunittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
    \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3zdrabj.d(45): Error: semicolon expected, not `unittest`\\n/tmp/tmph3zdrabj.d(45):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmph3zdrabj.d(55): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3zdrabj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\n\
    \        return 2;\n    long all = exp(10, n) - exp(10, n - 1);\n    long left\
    \ = exp(10, n - 1);\n    return left + all - left;\n}\n/*\n    10, 100, 1000,\
    \ ... (10^n) - 9, 99, 999, ... (10^(n-1)) + 9, 99, 999, ...\n    (10^(n-1)) =\
    \ 2 * 10^(n-1)\n    all:\n    (10^n - 10^(n-1))\n    10^(n-1)\n    both:\n   \
    \ (10^(n-1) - 9 * 10^(n-2))\n    9 * 10^(n-2)\n    left:\n    (10^(n-1) - 9 *\
    \ 10^(n-2)) + (10^(n-1) - 10^(n-2))\n    10^(n-1)\n*/\nunittest\n{\n    alias\
    \ candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppa7lsy_8.d(13): Error: none of the overloads of `exp` are callable\
    \ using argument types `(int, long)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1934):\
    \        `std.math.exp(real x)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(2059):\
    \        `std.math.exp(double x)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(2062):\
    \        `std.math.exp(float x)`\\n/tmp/tmppa7lsy_8.d(13): Error: none of the\
    \ overloads of `exp` are callable using argument types `(int, long)`, candidates\
    \ are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1934):\
    \        `std.math.exp(real x)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(2059):\
    \        `std.math.exp(double x)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(2062):\
    \        `std.math.exp(float x)`\\n/tmp/tmppa7lsy_8.d(14): Error: none of the\
    \ overloads of `exp` are callable using argument types `(int, long)`, candidates\
    \ are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1934):\
    \        `std.math.exp(real x)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(2059):\
    \        `std.math.exp(double x)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(2062):\
    \        `std.math.exp(float x)`\\nFailed"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{ \n    if (n == 1)\
    \ return 10; \n  \n    if (n == 2) return  9*9 + 10; \n  \n    return 10*starts_one_ends(n-1)\
    \ + (9*9)*power(10,n-2); \n} \nunittest\n{\n    alias candidate = starts_one_ends;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L)\
    \ == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) ==\
    \ 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z7vxa50.d(15): Error: undefined identifier `power`, did you\
    \ mean template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_z7vxa50.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    long dp[n+1];\n\
    \    enum {dpSize = n+1};\n    scope(exit) clear(dp);\n    dp[0] = 0;\n    dp[1]\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = 9 * pow(10, i-2)\
    \ + dp[i-1];\n    }\n    return dp[n];\n}\nunittest\n{\n    alias candidate =\
    \ starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsfuqikqx.d(11): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n + 1] dp`\\n/tmp/tmpsfuqikqx.d(12): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\n/tmp/tmpsfuqikqx.d(11): Error: variable `n` cannot\
    \ be read at compile time\\n/tmp/tmpsfuqikqx.d(12): Error: variable `n` cannot\
    \ be read at compile time\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpsfuqikqx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n{\n    if (n == 1)\
    \ return 2;\n    else if (n == 2) return 4;\n    else if (n == 3) return 8;\n\
    \    else if (n == 4) return 16;\n    else if (n == 5) return 32;\n    else if\
    \ (n == 6) return 64;\n    else if (n == 7) return 128;\n    else if (n == 8)\
    \ return 256;\n    else if (n == 9) return 512;\n    else if (n == 10) return\
    \ 1024;\n    else if (n == 11) return 2048;\n    else if (n == 12) return 4096;\n\
    \    else if (n == 13) return 8192;\n    else if (n == 14) return 16384;\n   \
    \ else if (n == 15) return 32768;\n    else if (n == 16) return 65536;\n    else\
    \ if (n == 17) return 131072;\n    else if (n == 18) return 262144;\n    else\
    \ if (n == 19) return 524288;\n    else if (n == 20) return 1048576;\n    else\
    \ if (n == 21) return 2097152;\n    else if (n == 22) return 4194304;\n    else\
    \ if (n == 23) return 8388608;\n    else if (n == 24) return 16777216;\n    else\
    \ if (n == 25) return 33554432;\n    else if (n == 26) return 67108864;\n    else\
    \ if (n == 27) return 134217728;\n    else if (n == 28) return 268435456;\n  \
    \  else if (n == 29) return 536870912;\n    else if (n == 30) return 1073741824;\n\
    \    else if (n == 31) return 2147483648;\n    else if (n == 32) return 4294967296;\n\
    \    else if (n == 33) return 8589934592;\n    else if (n == 34) return 17179869184;\n\
    \    else if (n == 35) return 34359738368;\n    else if (n == 36) return 68719476736;\n\
    \    else if (n == 37) return 137438953472;\nunittest\n{\n    alias candidate\
    \ = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L)\
    \ == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n\
    \    assert(candidate(5L) == 18000L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43cuah44.d(48): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43cuah44.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
