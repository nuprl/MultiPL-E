name: HumanEval_31_is_prime
language: d
results:
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long max = cast(long)\
    \ (sqrt(n) + 1);\n    for (long i = 3; i < max; i += 2)\n    {\n        if (n\
    \ % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyf_d7__p.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyf_d7__p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return false;\n\
    \    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3 == 0) \n\
    \        return false;\n    for (int i = 5; i * i <= n; i = i + 6) \n        if\
    \ (n % i == 0 || n % (i + 2) == 0) \n            return false;\n    return true;\n\
    }\n/*\nModify the above function so that it is more efficient.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \n*/\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (!(n & 1))\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n        if (!(n % i))\n         \
    \   return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpynlf2ybn.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpynlf2ybn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n   \
    \ for (long i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i +\
    \ 2) == 0)\n            return false;\n    \n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n\tbool prime = true;\n\tfor (int i = 2; i\
    \ < sqrt(n); i++)\n\t{\n\t\tif ((n % i) == 0)\n\t\t{\n\t\t\tprime = false;\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn prime;\n}\nunittest\n{\n    alias candidate =\
    \ is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1hfnwqv.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpa1hfnwqv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n < 4)\n    {\n        return true;\n    }\n    else if (n\
    \ % 2 == 0)\n    {\n        return false;\n    }\n    else if (n < 9)\n    {\n\
    \        return true;\n    }\n    else if (n % 3 == 0)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long r = (long) (sqrt(n));\n       \
    \ long f = 5;\n        while (f <= r)\n        {\n            if (n % f == 0)\n\
    \            {\n                return false;\n            }\n            if (n\
    \ % (f + 2) == 0)\n            {\n                return false;\n            }\n\
    \            f += 6;\n        }\n        return true;\n    }\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppjvoda1b.d(44): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjvoda1b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n  // Note that this function is slow, not\
    \ optimized and not correct for some\n  // cases. However, it is sufficient for\
    \ the purpose of these exercises.\n  if (n <= 1)\n      return false;\n  else\
    \ if (n <= 3)\n      return true;\n  else if (n % 2 == 0 || n % 3 == 0)\n    \
    \  return false;\n  else\n  {\n      for (int i = 5; i <= sqrt(n); i += 6)\n \
    \     {\n          if (n % i == 0 || n % (i + 2) == 0)\n              return false;\n\
    \      }\n      return true;\n  }\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdv_g8udw.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdv_g8udw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    for (long i = 2; i <= sqrt(n); i++) \n\
    \    {\n        if (n % i == 0)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtsqi7fr.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphtsqi7fr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n<=1)\n        return false;\n   \
    \ else if (n <= 3)\n        return true;\n    else if (n%2 == 0 || n%3 == 0)\n\
    \        return false;\n    \n    long i = 5;\n    while (i*i <= n)\n    {\n \
    \       if (n%i == 0 || n%(i+2) == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    foreach (i; 2 .. min(n,\
    \ sqrt(n) + 1))\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpla1k6knu.d(25): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla1k6knu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 1) \n    {\n        return false;\n\
    \    }\n    long s = sqrt(n);\n    for (long i = 2; i <= s; i++) \n    {\n   \
    \     if (n % i == 0) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bdcpgh3.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6bdcpgh3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 2) \n        return true;\n \
    \   if (n < 2 || n % 2 == 0) \n        return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n        if (n % i == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp81wldrgf.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp81wldrgf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 1)\n    {\n        return false;\n\
    \    }\n    if (n == 2)\n    {\n        return true;\n    }\n    long last = sqrt(n);\n\
    \    for (long i = 2; i <= last; i++)\n    {\n        if (n % i == 0)\n      \
    \  {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptf6n_jxy.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptf6n_jxy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n == 2)\n        return true;\n    if (n%2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n%i == 0)\n  \
    \          return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprc5ux2oy.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprc5ux2oy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   for (long i = 2; i < sqrt(n) + 1; i++)\n    {\n        if (n % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqy8_1yvz.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqy8_1yvz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 2)\n        return true;\n  \
    \  if (n <= 1 || n % 2 == 0)\n        return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpos3ah4e3.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpos3ah4e3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    // print(\"n %d\\n\", n);\n    if (n<2)\n\
    \    {\n        return false;\n    }\n    // else if (n==2)\n    // {\n    //\
    \     return true;\n    // }\n    else if (n%2==0)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        long max = (long)sqrt(n);\n        for (long\
    \ i=3; i<=max; i+=2)\n        {\n            if (n%i==0)\n            {\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3z5mqmfs.d(37): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z5mqmfs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n  if (n == 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  long m = long(sqrt(n));\n \
    \ for (long i = 3; i <= m; i += 2) \n  {\n    if (n % i == 0) \n    {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7v2k2swg.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7v2k2swg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  for (long i = 2; i <= (long)sqrt(n); i++)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf70u8zh1.d(24): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf70u8zh1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    foreach (i; 2..(int) sqrt(n) + 1)\n  \
    \  {\n        if (n % i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpglx57400.d(22): Error: C style cast illegal, use `cast(int)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpglx57400.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
