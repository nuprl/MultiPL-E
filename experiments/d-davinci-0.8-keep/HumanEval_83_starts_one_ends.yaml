name: HumanEval_83_starts_one_ends
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
  \ n, return the count of the numbers of n-digit\n    positive integers that start\
  \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n"
tests: "unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
  \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
  \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
  void main(){}"
completions: ["{\n    if (n == 1) \n        return 2;\n    else \n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    if (n <= 0) return 0;\n    if (n\
    \ == 1) return 1;\n    return 10 * starts_one_ends(n - 1) + \n           pow(10,\
    \ n - 1) - \n           pow(10, n - 2);\n}", "{\n\t/* \n\t\tAssuming you're asking\
    \ for the count of integers in base 10, the \n\t\tanswer for n = 0 is 1, for n\
    \ = 1 is 1, for n = 2 is 2 (11 and 11), \n\t\tfor n = 3 is 5 (101, 111, 121, 131,\
    \ 141), for n = 4 is 10, \n\t\tfor n = 5 is 20, and so on.\n\t\t\n\t\tComputing\
    \ that sequence is not a difficult problem.\n\t*/\n\tenum int ret;\n\tswitch(n)\n\
    \t{\n\t\tcase 0:\n\t\t\tret = 1;\n\t\tbreak;\n\t\tcase 1:\n\t\t\tret = 1;\n\t\t\
    break;\n\t\tcase 2:\n\t\t\tret = 2;\n\t\tbreak;\n\t\tcase 3:\n\t\t\tret = 5;\n\
    \t\tbreak;\n\t\tcase 4:\n\t\t\tret = 10;\n\t\tbreak;\n\t\tcase 5:\n\t\t\tret =\
    \ 20;\n\t\tbreak;\n\t\tdefault:\n\t\t\tret = -1;\n\t\tbreak;\n\t}\n\treturn ret;\n\
    }", "{ \n    if (n == 1) \n        return 10; \n  \n    // Dp[i] contains the\
    \ count of n-digit positive integers that start or end with 1.\n    long[] Dp\
    \ = new long[n + 1]; \n    Dp[1] = 10; \n  \n    // Each digit can be used 10\
    \ times except 0,1,9. \n    // There are two cases: \n    // a) If the number\
    \ starts with 1, it can be followed by any digit. \n    // b) If the number ends\
    \ with 1, it can start with only 1. \n    for (int i = 2; i <= n; i++) \n    \
    \    Dp[i] = (Dp[i - 1] * 9) + Dp[i - 1]; \n  \n    return Dp[n]; \n} \n/*\n \
    \   Given a positive integer n, return the count of the numbers of n-digit\n \
    \   positive integers that start or end with 1.\n    \n*/\nlong starts_one_ends(long\
    \ n) \n{ \n    if (n == 1) \n        return 10; \n  \n    // Dp[i] contains the\
    \ count of n-digit positive integers that start or end with 1.\n    long[] Dp\
    \ = new long[n + 1]; \n    Dp[1] = 10; \n  \n    // Each digit can be used 10\
    \ times except 0,1,9. \n    // There are two cases: \n    // a) If the number\
    \ starts with 1, it can be followed by any digit. \n    // b) If the number ends\
    \ with 1, it can start with only 1. \n    for (int i = 2; i <= n; i++) \n    \
    \    Dp[i] = (Dp[i - 1] * 9) + Dp[i - 1]; \n  \n    return Dp[n]; \n} \n/*\n \
    \   This function returns the count of the numbers \n    with digit sum equal\
    \ to 'sum' and \n    of length 'len'\n    \n    constraint: 0 < len <= log10(N)\
    \ + 1 and \n                1 <= sum <= 81 \n    \n    example: \n        len",
  "{\n    // http://mathforum.org/library/drmath/view/57132.html\n    // n-digit positive\
    \ integers that start or end with 1 \n    // = (n-1) * 10 ^ (n-2)\n    // n-digit\
    \ positive integers that start with 1 \n    // = 10 ^ (n-1) - 1\n    // n-digit\
    \ positive integers that end with 1 \n    // = (n-1) * 10 ^ (n-2) - 10 ^ (n-1)\
    \ + 1\n    long size = pow(10, n-1);\n    return size - 1 + size - pow(10, n-2);\n\
    }", "{\n    if (n == 1)\n        return 1;\n    return (starts_one_ends(n - 1)\
    \ + 9 * pow(10, n - 2));\n}", "{\n    long sum = 0;\n    for (long i = 0; i <\
    \ n; i++) \n    {\n        sum += pow(10, i);\n    }\n    return sum * 2;\n}",
  "{ \n    return n * pow(10, n - 1); \n} ", "{ \n    long count = 0;\n    long num\
    \ = pow(10,n-1);\n    long num_end = pow(10,n) - 1;\n    for (int i = num; i <=\
    \ num_end; i++) {\n        string num = to!string(i);\n        if (num[0] == '1'\
    \ || num[num.length-1] == '1') {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    if (n == 1)\n        return 10;\n    long tmp = starts_one_ends(n\
    \ - 1);\n    return (tmp * 9 + pow(10, n - 1));\n}", "{\n    long total = 0;\n\
    \    long low = 1;\n    long high = 10;\n    for (long i = 1; i < n; i++) {\n\
    \        low *= 10;\n        high *= 10;\n    }\n    for (long i = low; i < high;\
    \ i++) {\n        if (i % 10 == 1 || i / pow(10, n - 1) == 1) {\n            total++;\n\
    \        }\n    }\n    return total;\n}\n// startswith_one\nlong startswith_one(long\
    \ n)\n{\n    long total = 0;\n    long low = 1;\n    long high = 10;\n    for\
    \ (long i = 1; i < n; i++) {\n        low *= 10;\n        high *= 10;\n    }\n\
    \    for (long i = low; i < high; i++) {\n        if (i / pow(10, n - 1) == 1)\
    \ {\n            total++;\n        }\n    }\n    return total;\n}\n// endswith_one\n\
    long endswith_one(long n)\n{\n    long total = 0;\n    long low = 1;\n    long\
    \ high = 10;\n    for (long i = 1; i < n; i++) {\n        low *= 10;\n       \
    \ high *= 10;\n    }\n    for (long i = low; i < high; i++) {\n        if (i %\
    \ 10 == 1) {\n            total++;\n        }\n    }\n    return total;\n}\n//\
    \ all_num_endswith_one\nlong all_num_endswith_one(long n)\n{\n    long total =\
    \ 0;\n    long low = 1;\n    long high = 10;\n    for (long i = 1; i < n; i++)\
    \ {\n        low *= 10;\n        high *= 10;\n    }\n    for (long i = low; i\
    \ < high; i++) {\n        if (i % 10 == 1) {\n            total++;\n        }\n\
    \    }\n    return total;\n}\n// all_num_startswith_one\nlong all_num_startswith_one(long\
    \ n)\n{\n   ", "{\n    long ret = 0;\n    if (n == 1) {\n        ret = 1;\n  \
    \  } else if (n == 2) {\n        ret = 11;\n    } else {\n        long start =\
    \ pow(10, n - 1);\n        long end = pow(10, n - 2);\n        ret = start - end;\n\
    \        ret *= 2;\n        ret += end;\n    }\n    return ret;\n}", "{\n    return\
    \ pow(2, n - 1);\n}", "{ \n    if (n==1) return 10; \n    else \n    { \n    \
    \    long sum = 9; \n        for (long i=1; i<n; i++) \n        { \n         \
    \   sum *= 10-i; \n        } \n        return sum + starts_one_ends(n-1); \n \
    \   } \n}", "{ \n    long pow10 = pow(10, n - 1);\n    return 10 * pow10 * pow10;\n\
    }", "{\n    if (n==1)\n        return 10;\n    else if (n<=0)\n        return\
    \ 0;\n    else\n    {\n        long num_starts_w_one = n-1;\n        long num_starts_w_other\
    \ = n-1;\n        long num_end_w_one = n-1;\n        long num_end_w_other = n-1;\n\
    \        long num_ones = n;\n        long num_starts_w_one_end_w_one = n-2;\n\
    \        long num_starts_w_other_end_w_one = n-2;\n        long num_starts_w_one_end_w_other\
    \ = n-2;\n        long num_starts_w_other_end_w_other = n-2;\n        long num_ends_w_one_starts_w_one\
    \ = n-2;\n        long num_ends_w_other_starts_w_one = n-2;\n        long num_ends_w_one_starts_w_other\
    \ = n-2;\n        long num_ends_w_other_starts_w_other = n-2;\n        long num_ones_others\
    \ = n;\n        long num_others_ones = n;\n        long num_others_others = n;\n\
    \        long num_others_others_others = n;\n        long num_others_others_ones\
    \ = n;\n        long num_others_ones_others = n;\n        long num_ones_others_others\
    \ = n;\n        long num_ones_others_ones = n;\n        long num_ones_ones_others\
    \ = n;\n        long num_ones_ones_ones = n;\n        long num_others_others_others_others\
    \ = n;\n        long num_others_others_others_ones = n;\n        long num_others_others_ones_others\
    \ = n;\n        long num_others_ones_others_others = n;\n        long num_ones_others_others_others\
    \ = n", "{\n    if (n == 1)\n        return 2;\n    long all = exp(10, n) - exp(10,\
    \ n - 1);\n    long left = exp(10, n - 1);\n    return left + all - left;\n}\n\
    /*\n    10, 100, 1000, ... (10^n) - 9, 99, 999, ... (10^(n-1)) + 9, 99, 999, ...\n\
    \    (10^(n-1)) = 2 * 10^(n-1)\n    all:\n    (10^n - 10^(n-1))\n    10^(n-1)\n\
    \    both:\n    (10^(n-1) - 9 * 10^(n-2))\n    9 * 10^(n-2)\n    left:\n    (10^(n-1)\
    \ - 9 * 10^(n-2)) + (10^(n-1) - 10^(n-2))\n    10^(n-1)\n*/", "{ \n    if (n ==\
    \ 1) return 10; \n  \n    if (n == 2) return  9*9 + 10; \n  \n    return 10*starts_one_ends(n-1)\
    \ + (9*9)*power(10,n-2); \n} ", "{\n    long dp[n+1];\n    enum {dpSize = n+1};\n\
    \    scope(exit) clear(dp);\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i =\
    \ 2; i <= n; i++) {\n        dp[i] = 9 * pow(10, i-2) + dp[i-1];\n    }\n    return\
    \ dp[n];\n}", "{\n    if (n == 1) return 2;\n    else if (n == 2) return 4;\n\
    \    else if (n == 3) return 8;\n    else if (n == 4) return 16;\n    else if\
    \ (n == 5) return 32;\n    else if (n == 6) return 64;\n    else if (n == 7) return\
    \ 128;\n    else if (n == 8) return 256;\n    else if (n == 9) return 512;\n \
    \   else if (n == 10) return 1024;\n    else if (n == 11) return 2048;\n    else\
    \ if (n == 12) return 4096;\n    else if (n == 13) return 8192;\n    else if (n\
    \ == 14) return 16384;\n    else if (n == 15) return 32768;\n    else if (n ==\
    \ 16) return 65536;\n    else if (n == 17) return 131072;\n    else if (n == 18)\
    \ return 262144;\n    else if (n == 19) return 524288;\n    else if (n == 20)\
    \ return 1048576;\n    else if (n == 21) return 2097152;\n    else if (n == 22)\
    \ return 4194304;\n    else if (n == 23) return 8388608;\n    else if (n == 24)\
    \ return 16777216;\n    else if (n == 25) return 33554432;\n    else if (n ==\
    \ 26) return 67108864;\n    else if (n == 27) return 134217728;\n    else if (n\
    \ == 28) return 268435456;\n    else if (n == 29) return 536870912;\n    else\
    \ if (n == 30) return 1073741824;\n    else if (n == 31) return 2147483648;\n\
    \    else if (n == 32) return 4294967296;\n    else if (n == 33) return 8589934592;\n\
    \    else if (n == 34) return 17179869184;\n    else if (n == 35) return 34359738368;\n\
    \    else if (n == 36) return 68719476736;\n    else if (n == 37) return 137438953472;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
