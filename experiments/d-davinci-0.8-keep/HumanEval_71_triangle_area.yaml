name: HumanEval_71_triangle_area
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n    Otherwise return -1\n \
  \   Three sides make a valid triangle when the sum of any two sides is greater \n\
  \    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n  \
  \  triangle_area(1, 2, 10) == -1\n    \n*/\nfloat triangle_area(long a, long b,\
  \ long c) \n"
tests: "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
  \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
  \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
  \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
  \ 2L, 10L) == -1L);\n}\nvoid main(){}"
completions: ["{\n    float area = 0;\n    /*\n        If the sides make a valid triangle,\
    \ then the side with the largest length cannot be\n        greater than the sum\
    \ of the other 2 sides.\n    */\n    if ((a+b) > c && (a+c) > b && (b+c) > a)\n\
    \    {\n        /*\n            The area of a triangle with sides a, b, and c\
    \ is calculated using Heron's formula:\n            area = sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \            where s = (a+b+c)/2\n        */\n        float s = (a+b+c)/2.0;\n\
    \        area = sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n    return round(area*100)/100;\n}", "{\n  real a_real = cast(real)a;\n\
    \  real b_real = cast(real)b;\n  real c_real = cast(real)c;\n  if ((a_real + b_real\
    \ <= c_real) || (a_real + c_real <= b_real) || (b_real + c_real <= a_real))\n\
    \    return -1;\n  real s = (a_real + b_real + c_real) / 2;\n  real area = sqrt(s\
    \ * (s - a_real) * (s - b_real) * (s - c_real));\n  return area;\n}", "{\n   \
    \ float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    return area;\n}", "{\n  float s = float(a + b + c) / 2;\n  return\
    \ s > max(a, max(b, c)) ? sqrt(s * (s - a) * (s - b) * (s - c)) : -1;\n}", "{\n\
    \    auto p = (a + b + c) / 2.0;\n    if (p <= a || p <= b || p <= c)\n      \
    \  return -1;\n    return std.math.sqrt(p * (p - a) * (p - b) * (p - c));\n}",
  "{\n    float f = (a + b + c) / 2.0;\n    float area = sqrt(f * (f - a) * (f - b)\
    \ * (f - c));\n    return area;\n}", "{\n    float p = (a + b + c) / 2.0;\n  \
    \  if (p <= min(a, min(b, c))) return -1;\n    return sqrt(p * (p - a) * (p -\
    \ b) * (p - c));\n}", "{\n    float s = float(a + b + c) / 2;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area : -1;\n\
    }", "{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return -1;\n    if(a + b <=\
    \ c || a + c <= b || b + c <= a)\n        return -1;\n    float s = cast(float)(a\
    \ + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \ return floor(area * 100) / 100;\n}", "{\n    if(a < b + c && b < a + c && c\
    \ < a + b) \n    {\n        float s = cast(float)(a + b + c) / 2;\n        float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return area;\n    }\n\
    \    return -1;\n}", "{\n    static struct Triangle {\n        this(float a, float\
    \ b, float c) {\n            this.a = a;\n            this.b = b;\n          \
    \  this.c = c;\n        }\n        float a;\n        float b;\n        float c;\n\
    \    }", "{\n    if(a+b<=c || a+c<=b || b+c<=a) return -1;\n    auto s = (a+b+c)/2.0;\n\
    \    return sqrt(s*(s-a)*(s-b)*(s-c));\n}", "{\n    if(a + b > c && a + c > b\
    \ && b + c > a) \n    {\n        double s = (a + b + c) / 2.0;\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n    }\n    return\
    \ -1;\n}", "{\n    if(a+b<=c || a+c<=b || b+c<=a) return -1;\n    auto s = (a+b+c)/2;\n\
    \    return sqrt(s*(s-a)*(s-b)*(s-c));\n}", "{\n    long s = (a + b + c) / 2;\n\
    \    if (a + b > c && a + c > b && b + c > a)\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n    return -1;\n}", "{\n    float area = 0;\n    if(a\
    \ + b > c && a + c > b && b + c > a)\n    {\n        float s = (a + b + c) / 2.0;\n\
    \        area = sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    else\n    {\n\
    \        area = -1;\n    }\n    return area;\n}", "{\n    enum float epsilon =\
    \ 1e-2;\n    int minLong = min(a, min(b, c));\n    int maxLong = max(a, max(b,\
    \ c));\n    int midLong = a + b + c - minLong - maxLong;\n    float heron = (a\
    \ + b + c) / 2.0;\n    float sqrtVal = sqrt(heron * (heron - minLong) * (heron\
    \ - midLong) * (heron - maxLong));\n    if (heron <= epsilon || sqrtVal <= epsilon)\n\
    \        return -1;\n    return sqrtVal;\n}", "{\n    double p = (a + b + c) /\
    \ 2.0;\n    double s = (p * (p - a) * (p - b) * (p - c));\n    if (s <= 0)\n \
    \       return -1;\n    return round(sqrt(s) * 100) / 100;\n}", "{\n    // this\
    \ should be all of the triangle inequalities:\n    if (a + b > c && a + c > b\
    \ && b + c > a)\n    {\n        // using Heron's formula\n        auto s = (a\
    \ + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n   \
    \ }\n    return -1;\n}", "{\n    if (a + b > c && a + c > b && b + c > a)\n  \
    \  {\n        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n    }\n    return -1;\n}\n/*\n Given the lengths of the\
    \ three sides of a triangle. Return the area of\n    the triangle rounded to 2\
    \ decimal points if the three sides form a valid triangle. \n    Otherwise return\
    \ -1\n    Three sides make a valid triangle when the sum of any two sides is greater\
    \ \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n\
    \    triangle_area(1, 2, 10) == -1\n*/\nfloat triangle_area(Tuple!(long, long,\
    \ long) t) \n{\n    return triangle_area(t[0], t[1], t[2]);\n}\n// Finding the\
    \ area of a triangle with an array of the sides\nfloat triangle_area(int[] sides)\
    \ \n{\n    assert(sides.length == 3);\n    return triangle_area(sides[0], sides[1],\
    \ sides[2]);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
