name: HumanEval_36_fizz_buzz
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n  import std.stdio;\n  long result\
    \ = 0;\n  for (int i = 0; i <= n; i++)\n  {\n    if (i % 11 == 0 || i % 13 ==\
    \ 0)\n    {\n      immutable total = i.to!string;\n      for (long j = 0; j <\
    \ total.length; j++)\n      {\n        if (total[j] == '7')\n        {\n     \
    \     result++;\n        }\n      }\n    }\n  }\n  return result;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphlmh1y4c.d(21): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlmh1y4c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    long result = 0;\n    foreach(i;\
    \ 1..n) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n        {\n       \
    \     result += count(to!string(i), '7');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtieq7c7.d(20): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtieq7c7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    int i = 0;\n    int count =\
    \ 0;\n    string s = \"\";\n    for (i = 11; i < n; i = i + 11)\n    {\n     \
    \   s = to!string(i);\n        if (s.count('7') > 0)\n        {\n            count\
    \ = count + 1;\n        }\n    }\n    for (i = 13; i < n; i = i + 13)\n    {\n\
    \        s = to!string(i);\n        if (s.count('7') > 0)\n        {\n       \
    \     count = count + 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxhhurjjd.d(20): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpxhhurjjd.d(21): Error: no property\
    \ `count` for type `string`\\n/tmp/tmpxhhurjjd.d(28): Error: template instance\
    \ `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpxhhurjjd.d(29):\
    \ Error: no property `count` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxhhurjjd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n  long fizzes = 0;\nunittest\n{\n\
    \    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrlwkbon.d(16): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrlwkbon.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    int numTimes = 0;\n    for (long\
    \ x = 7; x < n; x+=7)\n    {\n        if ((x % 11 == 0) || (x % 13 == 0))\n  \
    \      {\n            numTimes++;\n        }\n    }\n    return numTimes;\n}\n\
    unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) ==\
    \ 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu1scoedb.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dfd]\\n??:? void tmpu1scoedb.__unittest_L25_C1()\
    \ [0x427a98]\\n??:? void tmpu1scoedb.__modtest() [0x427b7c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a98d]\\n??:? runModuleUnitTests [0x42b8f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42824c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281d3]\\n??:? _d_run_main [0x42813e]\\n??:? main [0x427b8f]\\\
    n??:? __libc_start_main [0xeac5d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n\tint counter = 0;\n\tint digits[]\
    \ = new int[6];\n\tfor (int i = 11; i < n; i++) \n\t{\n\t\tif (i % 11 == 0 ||\
    \ i % 13 == 0) \n\t\t{\n\t\t\tdigits = i.toString().toArray.map!(a => a.toInt).array;\n\
    \t\t\tfor (int j = 0; j < digits.length; j++) \n\t\t\t{\n\t\t\t\tif (digits[j]\
    \ == 7) \n\t\t\t\t{\n\t\t\t\t\tcounter += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn counter;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9e11sif.d(16): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `int[] digits`\\n/tmp/tmpb9e11sif.d(21): Error: no property `toString`\
    \ for type `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9e11sif.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n  long count = 0;\n  foreach(int\
    \ i; 0..n)\n  {\n    if(i%11 == 0 || i%13 == 0)\n    {\n      count += countDigits(i,7);\n\
    \    }\n  }\n  return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1epdvxrr.d(16): Error: cannot implicitly convert expression `n`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp1epdvxrr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong res = 0;\n\tfor (long i =\
    \ 7; i < n; i++)\n\t{\n\t\tif ((i % 11 == 0) || (i % 13 == 0))\n\t\t{\n\t\t\t\
    string si = i.to!string;\n\t\t\tforeach (c; si)\n\t\t\t{\n\t\t\t\tif (c == '7')\n\
    \t\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ii55xn7.d(20): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ii55xn7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    long i\
    \ = 0;\n    while (i < n) \n    {\n        if (i % 11 == 0 || i % 13 == 0) \n\
    \        {\n            ulong x = i;\n            while (x != 0) \n          \
    \  {\n                if (x % 10 == 7) \n                {\n                 \
    \   count++;\n                }\n                x /= 10;\n            }\n   \
    \     }\n        i++;\n    }\n    return count;\n}\n/*\n    Find the sum of all\
    \ the positive integers which cannot be written as the sum of two abundant numbers.\n\
    \    >>> a(1)\n    0\n    >>> a(100)\n    0\n    >>> a(200)\n    0\n    >>> a(300)\n\
    \    0\n    >>> a(400)\n    1\n    >>> a(2000)\n    1\n    >>> a(4000)\n    5\n\
    \    >>> a(8000)\n    9\n    >>> a(16000)\n    31\n*/\nlong a(long n) \n{\n  \
    \  long g_sum = 0;\n    int abundant_numbers = [12];\n    int i = 0;\n    while\
    \ (i < n) \n    {\n        if (is_abundant(i)) \n        {\n            abundant_numbers\
    \ ~= i;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < n) \n    {\n\
    \        int j = 0;\n        long sum = 0;\n        while (j < abundant_numbers.length)\
    \ \n        {\n            sum += abundant_numbers[j];\n            if (sum ==\
    \ i) \n            {\n                break;\n            }\n            j++;\n\
    \        }\n        if (sum != i) \n        {\n            g_sum += i;\n     \
    \   }\n        i++;\n    }\n    return g_sum;\n}\n/*\n    Given the three smallest\
    \ primes: a = 2, b = 3, c = 5, we can construct a sequence of successive primes\
    \ by inserting 3 between 2 and 3, 5 between 3 and 5, 7 between 5 and 7, and so\
    \ on. The resulting sequence is:\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7cbtvz5.d(91): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7cbtvz5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count=0;\n    long i=1;\n\
    \    while(i<n)\n    {\n        if(i%11==0 || i%13==0)\n        {\n          \
    \  count += to!(string)(i).count(\"7\");\n        }\n        i++;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8r1jrgr.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpm8r1jrgr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n\tassert(n >=0);\n\tlong sum = 0;\n\
    \tfor (size_t i =0; i < n; ++i) {\n\t\tif (((i % 11) == 0) || ((i % 13) == 0))\
    \ {\n\t\t\tint x = i;\n\t\t\twhile (x > 0) {\n\t\t\t\tif (x % 10 == 7) {\n\t\t\
    \t\t\t++sum;\n\t\t\t\t}\n\t\t\t\tx /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n\
    }\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_t2fd9o5.d(19): Error: cannot implicitly convert expression `i`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_t2fd9o5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    enum { step = 11 * 13, mul =\
    \ step / 7 };\n    auto s = iota(step).array;\n    auto m = iota(mul).array;\n\
    \    foreach (immutable i; s)\n        foreach (immutable j; m)\n            if\
    \ (i * j >= n) return i * j;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi054t0m1.d(15): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpi054t0m1.d(16): Error: undefined identifier `iota`\\n/tmp/tmpi054t0m1.d(17):\
    \ Error: undefined identifier `iota`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpi054t0m1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    long i;\n    long x;\n    long\
    \ count = 0;\n    for (i = 0; i < n; i++) \n    {\n        if ((i % 11 == 0) ||\
    \ (i % 13 == 0)) \n        {\n            x = i;\n            while (x > 0) \n\
    \            {\n                if (x % 10 == 7) \n                {\n       \
    \             count += 1;\n                }\n                x /= 10;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\nReturn a function which\
    \ takes the power of a base number.\n    >>> square = power(2)\n    >>> square(3)\n\
    \    9\n    >>> cube = power(3)\n    >>> cube(2)\n    8\n*/\nunittest\n{\n   \
    \ alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    long sum_fizz = n / 11;\n  \
    \  long sum_buzz = n / 13;\n    long sum_fizz_buzz = n / ((11 * 13) );\n    long\
    \ sum_no_fizz_buzz = n - sum_fizz - sum_buzz + sum_fizz_buzz;\n    long sum_7_fizz\
    \ = sum_fizz * countDigit(7, 11);\n    long sum_7_buzz = sum_buzz * countDigit(7,\
    \ 13);\n    long sum_7_fizz_buzz = sum_fizz_buzz * countDigit(7, 11 * 13);\n \
    \   long sum_7_no_fizz_buzz = sum_no_fizz_buzz * countDigit(7, 1);\n    return\
    \ sum_7_fizz + sum_7_buzz + sum_7_fizz_buzz + sum_7_no_fizz_buzz;\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2p_hglp1.d(19): Error: undefined identifier `countDigit`\\n/tmp/tmp2p_hglp1.d(20):\
    \ Error: undefined identifier `countDigit`\\n/tmp/tmp2p_hglp1.d(21): Error: undefined\
    \ identifier `countDigit`\\n/tmp/tmp2p_hglp1.d(22): Error: undefined identifier\
    \ `countDigit`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p_hglp1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    return sum(map!(c => c == '7'\
    \ ? 1 : 0)(iota(n)).filter!(n => n % 11 == 0 || n % 13 == 0));\n}\nunittest\n\
    {\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n   \
    \ assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L)\
    \ == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) ==\
    \ 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5xt86dr.d(15): Error: undefined identifier `sum`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5xt86dr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong b=1;\n\tlong a=0;\n\tforeach(i;0..n)\n\
    \t{\n\t\tlong k=i;\n\t\twhile(k!=0)\n\t\t{\n\t\t\tif((k%10)==7 && ((k%11)==0 ||\
    \ (k%13)==0))\n\t\t\t{\n\t\t\t\ta++;\n\t\t\t}\n\t\t\tk/=10;\n\t\t}\n\t}\n\treturn\
    \ a;\n}\n/*\nGiven two integers, return a new integer composed of the first integer\
    \ repeated some number of times.\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zpzj5a1.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zpzj5a1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (int\
    \ i = 1; i < n; i++)\n    {\n        if ((i % 11 == 0) || (i % 13 == 0))\n   \
    \     {\n            long num = i;\n            while (num > 0)\n            {\n\
    \                if (num % 10 == 7)\n                {\n                    count++;\n\
    \                }\n                num /= 10;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n    The Euler totient function phi(m) is defined\
    \ as the number of positive integers r (1 <= r < m) that are coprime to m.\n \
    \   >>> euler_totient(7)\n    6\n    >>> euler_totient(17)\n    16\n*/\nlong euler_totient(long\
    \ m) \n{\n    long count = 0;\n    for (int i = 1; i < m; i++)\n    {\n      \
    \  if (gcd(i, m) == 1)\n        {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n/*\n    Given a number of digits in a string. Add digits\
    \ up and return the value as a string.\n    >>> digital_root(132189)\n    \"6\"\
    \n    >>> digital_root(493193)\n    \"2\"\n*/\nstring digital_root(long n) \n\
    {\n    long sum = 0;\n    while (n > 0)\n    {\n        sum += n % 10;\n     \
    \   n /= 10;\n    }\n    string sum_str = to!string(sum);\n    if (sum_str.length\
    \ == 1)\n    {\n        return sum_str;\n    }\n    else\n    {\n        return\
    \ digital_root(to!long(sum_str));\n    }\n}\n/*\n    Given a string of characters\
    \ and a single character, replace all the occurrences of the character in the\
    \ string with the single character.\n    >>> replace(\"But as he spake he drew\
    \ the good sword from its scabbard, and smote a heathen knight, Jusssstin of thee\
    \ Iron Valley.\", 'e', 'o')\n    \"But as ho spako ho drew th good sword from\
    \ its sc\nunittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
    \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
    \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
    \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
    \ == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknkzu0bi.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknkzu0bi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n    if (n < 0)\n        return -1;\n\
    \    if (n == 0)\n        return 0;\n    auto t = tuple!(int, \"\", \"fizz\",\
    \ \"buzz\", \"fizzbuzz\")(1, \"\", \"fizz\", \"buzz\", \"fizzbuzz\");\n    long\
    \ ret = 0;\n    for (long i = 1; i < n; i++)\n    {\n        if (i % 11 == 0 ||\
    \ i % 13 == 0)\n        {\n            auto s = (i % 15 == 0) ? t[4] : (i % 3\
    \ == 0) ? t[2] : (i % 5 == 0) ? t[3] : t[1];\n            ret += count(s, '7');\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = fizz_buzz;\n\
    \n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L)\
    \ == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n\
    \    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n\
    \    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1998):\
    \ Error: template instance `std.typecons.Tuple!(int, \"\", \"fizz\", \"buzz\"\
    , \"fizzbuzz\")` does not match template declaration `Tuple(Specs...) if (distinctFieldNames!Specs)`\\\
    n/tmp/tmpn03f79i9.d(19): Error: template instance `std.typecons.tuple!(int, \"\
    \", \"fizz\", \"buzz\", \"fizzbuzz\").tuple!(int, string, string, string, string)`\
    \ error instantiating\\n/tmp/tmpn03f79i9.d(26): Error: undefined identifier `count`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn03f79i9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count;\n\t\n\tstatic immutable\
    \ long numbers[3] = [11, 13, -1];\n\tauto i = 0;\n\tfor (auto n_ : numbers)\n\t\
    {\n\t\tauto n_copy = n_;\n\t\tif (n_ == -1)\n\t\t\tbreak;\n\t\twhile (n_copy <=\
    \ n)\n\t\t{\n\t\t\tif (n_copy % 11 == 0 || n_copy % 13 == 0)\n\t\t\t{\n\t\t\t\t\
    while (n_copy)\n\t\t\t\t{\n\t\t\t\t\tauto d = n_copy % 10;\n\t\t\t\t\tif (d ==\
    \ 7)\n\t\t\t\t\t\tcount++;\n\t\t\t\t\tn_copy /= 10;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    n_copy += n_;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmw6nkjsz.d(17): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[3] numbers`\\n/tmp/tmpmw6nkjsz.d(19): Error: no identifier for\
    \ declarator `n_`\\n/tmp/tmpmw6nkjsz.d(19): Error: expression expected, not `:`\\\
    n/tmp/tmpmw6nkjsz.d(19): Error: found `numbers` when expecting `;` following `for`\
    \ condition\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmw6nkjsz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \n*/\nlong fizz_buzz(long n) \n{\n  int count = 0;\n  foreach(i; 0\
    \ .. n)\n    if(i % 11 == 0 || i % 13 == 0)\n    {\n      if( i % 10 == 7 || \
    \ i / 10 == 7)\n        count++;\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L)\
    \ == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n\
    \    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n \
    \   assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdaw1tfyo.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmpdaw1tfyo.__unittest_L24_C1()\
    \ [0x427ac0]\\n??:? void tmpdaw1tfyo.__modtest() [0x427ba4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bb7]\\\
    n??:? __libc_start_main [0x53a2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
