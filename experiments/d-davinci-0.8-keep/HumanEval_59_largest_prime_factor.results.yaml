name: HumanEval_59_largest_prime_factor
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    while (n % 2 == 0) \n    {\n        largest\
    \ = 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) \n\
    \    {\n        while (n % i == 0) \n        {\n            largest = i;\n   \
    \         n /= i;\n        }\n    }\n    if (n > 2)\n        largest = n;\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoaxt6bw9.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpoaxt6bw9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    typeof(n) i;\n    typeof(n) max = n;\n    if (n % 2 == 0) \n   \
    \ {\n        max = n/2;\n        while (n % 2 == 0)\n            n /= 2;\n   \
    \ }\n    i = 3;\n    while (i <= n/i) \n    {\n        if (n % i == 0) \n    \
    \    {\n            max = n/i;\n            while (n % i == 0)\n             \
    \   n /= i;\n        }\n        i += 2;\n    }\n    if (n > 1) \n        max =\
    \ n;\n    return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq7kwq1nl.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpq7kwq1nl.__unittest_L36_C1()\
    \ [0x427b21]\\n??:? void tmpq7kwq1nl.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x44b1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    // works with n > 1 and n not prime.\n    import std.algorithm;\n\
    \    import std.math;\n    //if (n<=1) return 0;\n    static int[] primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,\
    \ 1069, 1087, 1091, 1093,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24tmz7vh.d(18): Error: expression expected, not `unittest`\\\
    n/tmp/tmp24tmz7vh.d(19): Error: comma expected separating array initializers,\
    \ not `{`\\n/tmp/tmp24tmz7vh.d(28): Error: comma expected separating array initializers,\
    \ not `void`\\n/tmp/tmp24tmz7vh.d(28): Error: semicolon expected, not `main`\\\
    n/tmp/tmp24tmz7vh.d(28): Error: found `{` when expecting `;` following statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24tmz7vh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    auto prime_factorization = primeFactors(n);\n    long max = 0;\n\
    \    foreach(i; prime_factorization)\n    {\n        if(i > max)\n           \
    \ max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mosgdbs.d(13): Error: undefined identifier `primeFactors`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mosgdbs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 2;\n    for (long i = 3; i <= n; i +=\
    \ 2) \n    {\n        if (n % i == 0) \n        {\n            // find prime factors\
    \ and update largest prime factor\n            largest_prime_factor = max(largest_prime_factor,\
    \ max(largest_prime_factor, i));\n            while (n % i == 0) \n          \
    \  {\n                n /= i;\n            }\n        }\n    }\n    return largest_prime_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl7b1psu4.d(19): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7b1psu4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    if (n == 1)\n        return 1;\n    else if (n % 2 == 0)\n     \
    \   return max(2, largest_prime_factor(n / 2));\n    else \n    {\n        //\
    \ Odd numbers.\n        long root = cast(long)ceil(sqrt(n));\n        long factor\
    \ = 3;\n        while (factor <= root) \n        {\n            if (n % factor\
    \ == 0)\n                return max(factor, largest_prime_factor(n / factor));\n\
    \            factor += 2;\n        }\n        return n;\n    }\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxj4wndis.d(16): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpxj4wndis.d(20): Error: `std.math.sqrt` called with\
    \ argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpxj4wndis.d(25): Error: undefined identifier\
    \ `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxj4wndis.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    alias Factor = Tuple!(long, long);\n    auto factors = Factor[](1L,\
    \ n);\n    while (true) {\n        auto d = factor(n);\n        if (d)\n     \
    \       factors ~= Factor(d, 0);\n        else\n            break;\n        n\
    \ /= d;\n    }\n    foreach (f; factors) {\n        auto count = 0L;\n       \
    \ auto x = f[1];\n        while (x % f[0] == 0) {\n            count++;\n    \
    \        x /= f[0];\n        }\n        f[1] = count;\n    }\n    long largest\
    \ = 2L;\n    long max_count = 0L;\n    foreach (f; factors) {\n        if (f[1]\
    \ > max_count) {\n            max_count = f[1];\n            largest = f[0];\n\
    \        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate =\
    \ largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7hwg42zi.d(14): Error: function expected before `()`, not `Tuple!(long,\
    \ long)[]` of type `Tuple!(long, long)[]`\\n/tmp/tmp7hwg42zi.d(16): Error: undefined\
    \ identifier `factor`, did you mean alias `Factor`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7hwg42zi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long max_prime_factor = 2;\n    while (n > 1) {\n        long factor\
    \ = 2;\n        while (n % factor) { // while n is not divisible by factor...\n\
    \            factor++;\n        }\n        if (factor > max_prime_factor) {\n\
    \            max_prime_factor = factor;\n        }\n        n /= factor;\n   \
    \ }\n    return max_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 2;\n    while (n > 1) \n    {\n        if (n\
    \ % largest_prime == 0)\n            n /= largest_prime;\n        else\n     \
    \       largest_prime += 1;\n    }\n    return largest_prime;\n}\n// Return the\
    \ number of trailing zeros of n!\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long max = 0;\n    long d = 0;\n    foreach(i; 2..(n/2))\n    {\n\
    \        if (n % i == 0)\n        {\n            d = i;\n            if (isPrime(d))\n\
    \            {\n                max = max(max, d);\n            }\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mzqk_pa.d(20): Error: undefined identifier `isPrime`\\n/tmp/tmp_mzqk_pa.d(22):\
    \ Error: function expected before `()`, not `max` of type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_mzqk_pa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    if (n < 2)\n        return 0;\n    \n    while (n & 1 == 0)\n  \
    \      n /= 2;\n    \n    long p = 3;\n    while (n > 1) \n    {\n        if (n\
    \ % p == 0) \n        {\n            n /= p;\n            while (n % p == 0)\n\
    \                n /= p;\n        }\n        p += 2;\n    }\n    return p - 2;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqksjn5vn.d(16): Error: `1 == 0` must be parenthesized when next\
    \ to operator `&`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqksjn5vn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n\tauto i = 1L;\n\t\n\twhile(i <= n)\n\t{\n\t\tif (n % i == 0)\n\t\t\
    {\n\t\t\tif (isPrime(i))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\
    \t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1oee7mgp.d(19): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1oee7mgp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long x;\n    for (x = 2; x < n/2; x++)\n    {\n        if (n % x\
    \ == 0)\n        {\n            if (is_prime(n/x))\n            {\n          \
    \      return n/x;\n            }\n        }\n    }\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpby4nzr1f.d(18): Error: undefined identifier `is_prime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpby4nzr1f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{ \n  assert(n > 1);\n  // Assume n is odd.\n  if (n % 2 == 0) \n  {\n\
    \    n /= 2;\n    while (n % 2 == 0) n /= 2;\n  }\n  long d = 3;\n  while (d *\
    \ d <= n) \n  {\n    if (n % d == 0) \n    {\n      n /= d;\n      while (n %\
    \ d == 0) n /= d;\n    }\n    d += 2;\n  }\n  return n;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn9u7_1c4.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ee9]\\n??:? void tmpn9u7_1c4.__unittest_L32_C1()\
    \ [0x427b41]\\n??:? void tmpn9u7_1c4.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaa2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc35]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa79]\\n??:? runModuleUnitTests [0x42b9e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428338]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bf]\\n??:? _d_run_main [0x42822a]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0x5eb7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    // loop through all numbers\n    for\
    \ (long i = 2; i < n; i++)\n    {\n        // check if i is a factor of n \n \
    \       if (n % i == 0)\n        {\n            // check if i is a prime number\n\
    \            bool prime = true;\n            for (long j = 2; j < i; j++)\n  \
    \          {\n                if (i % j == 0)\n                {\n           \
    \         prime = false;\n                    break;\n                }\n    \
    \        }\n            if (prime) \n            {\n                largest_prime\
    \ = i;\n            }\n        }\n    }\n    return largest_prime;\n}\n/*\n  \
    \  >>> largest_prime_factor_faster(13195)\n    29\n    >>> largest_prime_factor_faster(2048)\n\
    \    2\n*/\nlong largest_prime_factor_faster(long n) \n{\n    long largest_prime\
    \ = 0;\n    // go through all numbers up to the sqrt of n\n    for (long i = 2;\
    \ i < sqrt(n); i++)\n    {\n        // check if i is a factor of n \n        if\
    \ (n % i == 0)\n        {\n            // check if i is a prime number\n     \
    \       bool prime = true;\n            for (long j = 2; j < i; j++)\n       \
    \     {\n                if (i % j == 0)\n                {\n                \
    \    prime = false;\n                    break;\n                }\n         \
    \   }\n            if (prime) \n            {\n                largest_prime =\
    \ i;\n            }\n        }\n    }\n    return largest_prime;\n}\n/*\nReturn\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_fastest(13195)\n\
    \    29\n    >>> largest_prime_factor_fastest(2048)\n    2\n*/\nlong largest_prime_factor_fastest(long\
    \ n) \n{\n    long largest_prime = 0;\n    // go through all numbers up to the\
    \ sqrt of n\n    for (long i = 2; i < sqrt(n); i++)\n    {\n        // check\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lsulxpx.d(85): Error: found `unittest` instead of statement\\\
    n/tmp/tmp9lsulxpx.d(95): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lsulxpx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    ulong maxp = 1;\n    while(n % 2 == 0) \n    {\n        maxp = 2;\n\
    \        n /= 2;\n    }\n    ulong p = 3;\n    while(p <= sqrt(n)) \n    {\n \
    \       if(n % p == 0) \n        {\n            maxp = p;\n            n /= p;\n\
    \        }\n        else \n        {\n            p += 2;\n        }\n    }\n\
    \    if(n > 2) maxp = n;\n    return maxp;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdb25xlyj.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdb25xlyj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long ret;\n    int is_prime;\n    for (ret = n/2; ret > 0; ret--)\
    \ {\n        is_prime = 1;\n        foreach (int i; 2..ret) {\n            if\
    \ (ret % i == 0) {\n                is_prime = 0;\n                break;\n  \
    \          }\n        }\n        if (is_prime) {\n            break;\n       \
    \ }\n    }\n    return ret;\n}\n/*\nReturn true if n is a palindrome, false otherwise.\n\
    \    >>> is_palindrome(123210)\n    False\n    >>> is_palindrome(12321)\n    True\n\
    */\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8s_ygm4.d(17): Error: cannot implicitly convert expression `ret`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpb8s_ygm4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 2;\n    long limit = cast(long)sqrt(n);\n    foreach(prime;\
    \ primes(limit))\n    {\n        if (n % prime == 0)\n            largest = prime;\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0qc_pbnv.d(14): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp0qc_pbnv.d(15): Error: undefined identifier\
    \ `primes`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qc_pbnv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    import std.math;\n    long i = 2;\n    long largest = 0;\n    foreach(i;\
    \ 2..isqrt(n) + 1)\n    {\n        while (n % i == 0) \n        {\n          \
    \  n /= i;\n            largest = i;\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphhg_tdyh.d(16): Error: undefined identifier `isqrt`, did you\
    \ mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmphhg_tdyh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    Tuple!(long, long[]) result = factor_rec(n, n / 2);\n    return\
    \ result[1][result[1].length - 1];\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dooc7zt.d(13): Error: undefined identifier `factor_rec`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dooc7zt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
