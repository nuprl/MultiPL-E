name: HumanEval_55_fib
language: d
prompt: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n  \
  \  55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long n)\
  \ \n"
tests: "unittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n\
  \    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L)\
  \ == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
completions: ["{\n    if (n < 0)\n\t\treturn 0;\n    else if (n < 2)\n\t\treturn 1;\n\
    \    else\n\t\treturn fib(n - 1) + fib(n - 2);\n}", "{\n\tif (n < 0L) \n\t{\n\t\
    \treturn -1L;\n\t} \n\telse if (n < 2L) \n\t{\n\t\treturn n;\n\t} \n\telse \n\t\
    {\n\t\treturn fib(n - 1L) + fib(n - 2L);\n\t}\n}", "{\n    return n <= 2 ? 1 :\
    \ fib(n - 1) + fib(n - 2);\n}", "{\n    if (n == 0) return 0;\n    if (n == 1)\
    \ return 1;\n    if (n == 2) return 1;\n    long a = 1;\n    long b = 1;\n   \
    \ for (long i = 3; i <= n; i++) \n    {\n        long temp = a;\n        a = b;\n\
    \        b = temp + b;\n    }\n    return b;\n}", "{\n    long a = 0, b = 1;\n\
    \    for (int i = 0; i < n; i++) \n    {\n        const long tmp = a;\n      \
    \  a = b;\n        b += tmp;\n    }\n    return a;\n}", "{\n    if (n <= 1) return\
    \ n;\n    return fib(n-1) + fib(n-2);\n}", "{\n\tlong a = 0, b = 1;\n\tfor (long\
    \ i = 0; i < n; i++)\n\t{\n\t\tlong temp = a;\n\t\ta = b;\n\t\tb = temp + b;\n\
    \t}\n\treturn a;\n}", "{\n   if (n<0) \n       return 0;\n   if (n<2) \n     \
    \  return 1;\n   else \n       return fib(n-1) + fib(n-2);\n}", "{\n    if (n\
    \ == 0) return 0;\n    if (n == 1) return 1;\n    long fnm1 = 0;\n    long fnm2\
    \ = 1;\n    for (int i = 2; i <= n; i++) \n    {\n        long fn = fnm1 + fnm2;\n\
    \        fnm1 = fnm2;\n        fnm2 = fn;\n    }\n    return fnm2;\n}", "{\n \
    \   return n <= 2 ? n : fib(n - 1) + fib(n - 2);\n}\n/*\nReturn a list of n-th\
    \ Fibonacci number's digits.\n    >>> fib_digits(5)\n    [5]\n    >>> fib_digits(123)\n\
    \    [1, 2, 3]\n    >>> fib_digits(1234)\n    [1, 2, 3, 4]\n    >>> fib_digits(123456789)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n*/", "{\n    // You should use long instead\
    \ of int, because the result could be too large.\n    long f = 0;\n    long g\
    \ = 1;\n    while (n > 0) {\n        g = g + f;\n        f = g - f;\n        n\
    \ = n - 1;\n    }\n    return f;\n}\n/*\nCompute sum of square roots of numbers\
    \ from 1 to n (both inclusive).", "{\n    if (n < 2) return n;\n    return fib(n-1)\
    \ + fib(n-2);\n}", "{\n    if (n < 2)\n        return n;\n    else\n        return\
    \ fib(n-1) + fib(n-2);\n}", "{\n    int i;\n    long a;\n    long b;\n    long\
    \ result;\n    a = 0;\n    b = 1;\n    for (i = 0; i < n; i++) {\n        result\
    \ = a + b;\n        a = b;\n        b = result;\n    }\n    return a;\n}", "{\n\
    \    if (n <= 2)\n        return 1;\n    else\n        return fib(n-1) + fib(n-2);\n\
    }\n/*\n    >>> factorial(5)\n    120\n    >>> factorial(3)\n    6\n*/\nlong factorial(long\
    \ n) \n{\n    if (n <= 1)\n        return 1;\n    else\n        return n * factorial(n-1);\n\
    }\n/*\nCalculate the factorial of a number using an iterative approach.\n    >>>\
    \ factorial_iterative(5)\n    120\n    >>> factorial_iterative(3)\n    6\n*/\n\
    long factorial_iterative(long n) \n{\n    long result = 1;\n    while (n > 1)\n\
    \        result *= n--;\n    return result;\n}\n/*\nCalculate the greatest common\
    \ divisor of a and b.\n    >>> gcd(24, 16)\n    8\n    >>> gcd(1, 16)\n    1\n\
    \    >>> gcd(24, 1)\n    1\n    >>> gcd(24, 0)\n    24\n    >>> gcd(0, 24)\n \
    \   24\n*/\nlong gcd(long a, long b) \n{\n    if (a == 0)\n        return b;\n\
    \    else if (b == 0)\n        return a;\n    else if (a > b)\n        return\
    \ gcd(a%b, b);\n    else\n        return gcd(a, b%a);\n}\n/*\nCalculate the square\
    \ root of x using Newton's method.\n    >>> sqrt(4)\n    2.0\n    >>> sqrt(1)\n\
    \    1.0\n    >>> sqrt(x)\n    Traceback (most recent call last):\n      File\
    \ \"<stdin>\", line 1, in <module>\n      File \"~/F5D/f5d/recursion/recursion.py\"\
    , line 74, in sqrt\n        return sqrt(abs(x), guess)\n      File \"~/F5D/f5d/recursion/recursion.py\"\
    , line 74, in sqrt\n        return sqrt(abs(x), guess", "{\n    if (n < 2) \n\
    \    {\n        return n;\n    }\n    else \n    {\n        return fib(n - 1)\
    \ + fib(n - 2);\n    }\n}", "{\n    int phi = (1 + sqrt(5)) / 2;\n    long result\
    \ = round(pow(phi, n) / sqrt(5));\n    return result;\n}", "{\n\tlong a = 0;\n\
    \tlong b = 1;\n\tlong i = 0;\n\tlong tmp = 0;\n\twhile (i < n) \n\t{\n\t\ttmp\
    \ = a;\n\t\ta = b;\n\t\tb = tmp + b;\n\t\ti = i + 1;\n\t}\n\treturn a;\n}\n/*\n\
    returns the greatest common divisor of a and b.\n*/\nlong gcd(long a, long b)\
    \ \n{\n\tlong i = 0;\n\tlong r = 0;\n\tlong gcd = 1;\n\twhile (i < b) \n\t{\n\t\
    \ti = i + 1;\n\t\tr = a % i;\n\t\tif (r == 0) \n\t\t{\n\t\t\tgcd = i;\n\t\t}\n\
    \t}\n\treturn gcd;\n}\n/*\nreturns the greatest common divisor of a and b.\n*/\n\
    long gcd2(long a, long b) \n{\n\tlong tmp = 0;\n\twhile (b != 0) \n\t{\n\t\ttmp\
    \ = a % b;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\treturn a;\n}\n/*\nreturns k-th order\
    \ statistic of array a[]\nbased on quick sort.\n*/\nlong selectk(long a[], long\
    \ k, long n) \n{\n\tlong left, right, pivot;\n\tlong i = 0;\n\tlong j = 0;\n\t\
    long tmp = 0;\n\tpivot = n / 2;\n\tleft = 0;\n\tright = n - 1;\n\twhile (right\
    \ > left) \n\t{\n\t\ti = left;\n\t\tj = right;\n\t\twhile (i < j) \n\t\t{\n\t\t\
    \twhile (a[i] < a[pivot] && i < right) \n\t\t\t{\n\t\t\t\ti = i + 1;\n\t\t\t}\n\
    \t\t\twhile (a[j] >= a[pivot] && j > left) \n\t\t\t{\n\t\t\t\tj = j - 1;\n\t\t\
    \t}\n\t", "{\n    if (n < 2)\n        return n;\n    else\n        return fib(n-1)\
    \ + fib(n-2);\n}", "{\n    long a = 0;\n    long b = 1;\n    long i = 0;\n   \
    \ while (i < n) {\n        long temp = a;\n        a = b;\n        b = temp +\
    \ b;\n        i = i + 1;\n    }\n    return a;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
