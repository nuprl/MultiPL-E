name: HumanEval_55_fib
language: d
results:
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n < 0)\n\t\treturn 0;\n    else if (n < 2)\n\t\treturn 1;\n\
    \    else\n\t\treturn fib(n - 1) + fib(n - 2);\n}\nunittest\n{\n    alias candidate\
    \ = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L)\
    \ == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0wf00a7l.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp0wf00a7l.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmp0wf00a7l.__modtest() [0x427b04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b17]\\\
    n??:? __libc_start_main [0xa8273554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n\tif (n < 0L) \n\t{\n\t\treturn -1L;\n\t} \n\telse if (n < 2L) \n\t\
    {\n\t\treturn n;\n\t} \n\telse \n\t{\n\t\treturn fib(n - 1L) + fib(n - 2L);\n\t\
    }\n}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) ==\
    \ 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n\
    \    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    return n <= 2 ? 1 : fib(n - 1) + fib(n - 2);\n}\nunittest\n{\n \
    \   alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n\
    \    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2)\
    \ return 1;\n    long a = 1;\n    long b = 1;\n    for (long i = 3; i <= n; i++)\
    \ \n    {\n        long temp = a;\n        a = b;\n        b = temp + b;\n   \
    \ }\n    return b;\n}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L)\
    \ == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n\
    \    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    long a = 0, b = 1;\n    for (int i = 0; i < n; i++) \n    {\n  \
    \      const long tmp = a;\n        a = b;\n        b += tmp;\n    }\n    return\
    \ a;\n}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L)\
    \ == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n\
    \    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n <= 1) return n;\n    return fib(n-1) + fib(n-2);\n}\nunittest\n\
    {\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n\
    \    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n\tlong a = 0, b = 1;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tlong\
    \ temp = a;\n\t\ta = b;\n\t\tb = temp + b;\n\t}\n\treturn a;\n}\nunittest\n{\n\
    \    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n\
    \    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n   if (n<0) \n       return 0;\n   if (n<2) \n       return 1;\n   else\
    \ \n       return fib(n-1) + fib(n-2);\n}\nunittest\n{\n    alias candidate =\
    \ fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L)\
    \ == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp60teuc6i.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp60teuc6i.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmp60teuc6i.__modtest() [0x427b04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b17]\\\
    n??:? __libc_start_main [0x16a07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    long fnm1\
    \ = 0;\n    long fnm2 = 1;\n    for (int i = 2; i <= n; i++) \n    {\n       \
    \ long fn = fnm1 + fnm2;\n        fnm1 = fnm2;\n        fnm2 = fn;\n    }\n  \
    \  return fnm2;\n}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L)\
    \ == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n\
    \    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    return n <= 2 ? n : fib(n - 1) + fib(n - 2);\n}\n/*\nReturn a list\
    \ of n-th Fibonacci number's digits.\n    >>> fib_digits(5)\n    [5]\n    >>>\
    \ fib_digits(123)\n    [1, 2, 3]\n    >>> fib_digits(1234)\n    [1, 2, 3, 4]\n\
    \    >>> fib_digits(123456789)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n*/\nunittest\n\
    {\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n\
    \    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzefd4d5p.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpzefd4d5p.__unittest_L27_C1()\
    \ [0x427a58]\\n??:? void tmpzefd4d5p.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xd68ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    // You should use long instead of int, because the result could\
    \ be too large.\n    long f = 0;\n    long g = 1;\n    while (n > 0) {\n     \
    \   g = g + f;\n        f = g - f;\n        n = n - 1;\n    }\n    return f;\n\
    }\n/*\nCompute sum of square roots of numbers from 1 to n (both inclusive).\n\
    unittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n\
    \    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L)\
    \ == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3aynl771.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3aynl771.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n < 2) return n;\n    return fib(n-1) + fib(n-2);\n}\nunittest\n\
    {\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L)\
    \ == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n\
    \    assert(candidate(12L) == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n < 2)\n        return n;\n    else\n        return fib(n-1)\
    \ + fib(n-2);\n}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L)\
    \ == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n\
    \    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    int i;\n    long a;\n    long b;\n    long result;\n    a = 0;\n\
    \    b = 1;\n    for (i = 0; i < n; i++) {\n        result = a + b;\n        a\
    \ = b;\n        b = result;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L)\
    \ == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n <= 2)\n        return 1;\n    else\n        return fib(n-1)\
    \ + fib(n-2);\n}\n/*\n    >>> factorial(5)\n    120\n    >>> factorial(3)\n  \
    \  6\n*/\nlong factorial(long n) \n{\n    if (n <= 1)\n        return 1;\n   \
    \ else\n        return n * factorial(n-1);\n}\n/*\nCalculate the factorial of\
    \ a number using an iterative approach.\n    >>> factorial_iterative(5)\n    120\n\
    \    >>> factorial_iterative(3)\n    6\n*/\nlong factorial_iterative(long n) \n\
    {\n    long result = 1;\n    while (n > 1)\n        result *= n--;\n    return\
    \ result;\n}\n/*\nCalculate the greatest common divisor of a and b.\n    >>> gcd(24,\
    \ 16)\n    8\n    >>> gcd(1, 16)\n    1\n    >>> gcd(24, 1)\n    1\n    >>> gcd(24,\
    \ 0)\n    24\n    >>> gcd(0, 24)\n    24\n*/\nlong gcd(long a, long b) \n{\n \
    \   if (a == 0)\n        return b;\n    else if (b == 0)\n        return a;\n\
    \    else if (a > b)\n        return gcd(a%b, b);\n    else\n        return gcd(a,\
    \ b%a);\n}\n/*\nCalculate the square root of x using Newton's method.\n    >>>\
    \ sqrt(4)\n    2.0\n    >>> sqrt(1)\n    1.0\n    >>> sqrt(x)\n    Traceback (most\
    \ recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File\
    \ \"~/F5D/f5d/recursion/recursion.py\", line 74, in sqrt\n        return sqrt(abs(x),\
    \ guess)\n      File \"~/F5D/f5d/recursion/recursion.py\", line 74, in sqrt\n\
    \        return sqrt(abs(x), guess\nunittest\n{\n    alias candidate = fib;\n\n\
    \    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L)\
    \ == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnasvma5q.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnasvma5q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n < 2) \n    {\n        return n;\n    }\n    else \n    {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L)\
    \ == 144L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    int phi = (1 + sqrt(5)) / 2;\n    long result = round(pow(phi, n)\
    \ / sqrt(5));\n    return result;\n}\nunittest\n{\n    alias candidate = fib;\n\
    \n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L)\
    \ == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5mhb5qqs.d(14): Error: `std.math.sqrt` called with argument types\
    \ `(int)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp5mhb5qqs.d(15): Error: `std.math.sqrt`\
    \ called with argument types `(int)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5mhb5qqs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n\tlong a = 0;\n\tlong b = 1;\n\tlong i = 0;\n\tlong tmp = 0;\n\twhile\
    \ (i < n) \n\t{\n\t\ttmp = a;\n\t\ta = b;\n\t\tb = tmp + b;\n\t\ti = i + 1;\n\t\
    }\n\treturn a;\n}\n/*\nreturns the greatest common divisor of a and b.\n*/\nlong\
    \ gcd(long a, long b) \n{\n\tlong i = 0;\n\tlong r = 0;\n\tlong gcd = 1;\n\twhile\
    \ (i < b) \n\t{\n\t\ti = i + 1;\n\t\tr = a % i;\n\t\tif (r == 0) \n\t\t{\n\t\t\
    \tgcd = i;\n\t\t}\n\t}\n\treturn gcd;\n}\n/*\nreturns the greatest common divisor\
    \ of a and b.\n*/\nlong gcd2(long a, long b) \n{\n\tlong tmp = 0;\n\twhile (b\
    \ != 0) \n\t{\n\t\ttmp = a % b;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\treturn a;\n\
    }\n/*\nreturns k-th order statistic of array a[]\nbased on quick sort.\n*/\nlong\
    \ selectk(long a[], long k, long n) \n{\n\tlong left, right, pivot;\n\tlong i\
    \ = 0;\n\tlong j = 0;\n\tlong tmp = 0;\n\tpivot = n / 2;\n\tleft = 0;\n\tright\
    \ = n - 1;\n\twhile (right > left) \n\t{\n\t\ti = left;\n\t\tj = right;\n\t\t\
    while (i < j) \n\t\t{\n\t\t\twhile (a[i] < a[pivot] && i < right) \n\t\t\t{\n\t\
    \t\t\ti = i + 1;\n\t\t\t}\n\t\t\twhile (a[j] >= a[pivot] && j > left) \n\t\t\t\
    {\n\t\t\t\tj = j - 1;\n\t\t\t}\n\t\nunittest\n{\n    alias candidate = fib;\n\n\
    \    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L)\
    \ == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvheonkwu.d(64): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] a`\\n/tmp/tmpvheonkwu.d(88): Error: found `unittest` instead\
    \ of statement\\n/tmp/tmpvheonkwu.d(98): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpvheonkwu.d(98): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvheonkwu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    if (n < 2)\n        return n;\n    else\n        return fib(n-1)\
    \ + fib(n-2);\n}\nunittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L)\
    \ == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n\
    \    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n*/\nlong fib(long\
    \ n) \n{\n    long a = 0;\n    long b = 1;\n    long i = 0;\n    while (i < n)\
    \ {\n        long temp = a;\n        a = b;\n        b = temp + b;\n        i\
    \ = i + 1;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = fib;\n\
    \n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L)\
    \ == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
