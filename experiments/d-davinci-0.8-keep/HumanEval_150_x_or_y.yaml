name: HumanEval_150_x_or_y
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
  \ return the value of x if n is \n    a prime number and should return the value\
  \ of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15,\
  \ 8, 5) == 5\n    \n    \n*/\nlong x_or_y(long n, long x, long y) \n"
tests: "unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
  \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
  \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
  \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L,\
  \ 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L,\
  \ 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
completions: ["{\n   return n.isPrime ? x : y;\n}", "{ \n  if (n<2)\n    return y;\n\
    \  else if (n == 2)\n    return x;\n  else\n  {\n    foreach (el;2..sqrt(n))\n\
    \    {\n      if (n%el == 0)\n        return y;\n    }\n    return x;\n  }\n \
    \ \n}", "{\n    long i;\n    enum bool isPrime = true;\n    for (i = 2; i <= n/2;\
    \ i++)\n    {\n        if (n % i == 0)\n        {\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    if (isPrime)\n    {\n        return\
    \ x;\n    }\n    else\n    {\n        return y;\n    }\n}", "{\n    \n    return\
    \ n.isPrime ? x : y;\n    \n}", "{\n    int divisor = 0;\n    foreach(i; 1..n)\n\
    \    {\n      if(n % i == 0)\n        divisor++;\n    }\n    return divisor ==\
    \ 2 ? x : y;\n}\n/*\n    std.math.isPrime is not used because a prime number is\
    \ a natural number \n    greater than 1 and not divisible by any other number.\n\
    \    So no need to check if it's greater than 1.\n*/", "{\n    auto fact = factorize(n);\n\
    \    int result;\n    int x = 10;\n    int y = 15;\n    if(x > y)\n        result\
    \ = x;\n    else\n        result = y;\n    return result;\n}", "{\n    import\
    \ std.math;", "{\n    int isPrime = 1;\n    if (n < 2) return y;\n    foreach\
    \ (i; [2 .. cast(int)sqrt(n)])\n    {\n        if (n % i == 0) \n        {\n \
    \           isPrime = 0;\n            break;\n        }\n    }\n    if (isPrime)\n\
    \        return x;\n    else \n        return y;\n}", "    if (n <= 2) \n    \
    \    return x;\n    else \n        return y;", "{\n    return n.isPrime ? x :\
    \ y;\n}", "    //@ requires true;\n    //@ ensures result == x || result == y;\n\
    {\n    return (is_prime(n) ? x : y);\n}", "{\n    return isPrime(n) ? x : y;\n\
    }", "{\n    import std.conv;\n    if (to!bool(n)) return x;\n    if (to!bool(x))\
    \ return y;\n    import std.math : isPrime;\n    return isPrime(n) ? x : y;\n}",
  "{\n    bool isPrime = false;\n    bool isNotPrime = false;\n    if (n == 1) {\n\
    \        isNotPrime = true;\n    } else {\n        for (long i = 2; i <= sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                isNotPrime = true;\n\
    \                break;\n            }\n        }\n    }\n    if (isNotPrime)\
    \ {\n        return y;\n    } else {\n        return x;\n    }\n}", "{\n    import\
    \ std.math;\n    return n.isPrime ? x : y;\n}", "{\n    return n.isPrime() ? x\
    \ : y;\n}\n/*\nA template function that computes the dot product of two vectors.\n\
    It should return a value of T (if T is an arithmetic type) or\nthe dot product\
    \ as a std.complex.Complex!T.", "{\n    bool prime = true;\n    long i = 2;\n\
    \    while (i < int(sqrt(n)) + 1) {\n        if (n % i == 0) {\n            prime\
    \ = false;\n            break;\n        }\n        i++;\n    }\n    if (prime)\
    \ {\n        return x;\n    } else {\n        return y;\n    }\n}", "{\n    import\
    \ core.stdc.math : abs;\n    auto isPrime = true;\n    auto start = abs(n) > 1\
    \ ? 2 : abs(n);\n    foreach(i; start..sqrt(abs(n)) + 1)\n    {\n        if(n\
    \ % i == 0)\n        {\n            isPrime = false;\n            break;\n   \
    \     }\n    }\n    return isPrime ? x : y;\n}", "{\n  if(n > 1)\n  {\n    foreach(long\
    \ i; 2..n)\n    {\n        if(n % i == 0)\n        {\n            return y;\n\
    \        }\n    }\n    return x;\n  }\n  else\n  {\n    return y;\n  }\n}", "{\n\
    \    bool flg = true;\n    foreach(i; 2..) \n    {\n        if (n % i == 0) \n\
    \        {\n            flg = false;\n            break;\n        }\n    }\n \
    \   return (flg ? x : y);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
