name: HumanEval_105_by_length
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  // TODO: implement\n\
    \  return null;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4k0etkp8.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429195]\\n??:? void tmp4k0etkp8.__unittest_L31_C1()\
    \ [0x427fe3]\\n??:? void tmp4k0etkp8.__modtest() [0x4283fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428eee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a941]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ec5]\\n??:? runModuleUnitTests [0x42da71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42956b]\\n??:? _d_run_main [0x4294d6]\\n??:? main [0x42840f]\\\
    n??:? __libc_start_main [0xa22e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  arr = arr.sort.reverse;\n\
    \  return \n  arr.filter!(i => i >= 1 && i <= 9)\n    .map!(i => \"One Two Three\
    \ Four Five Six Seven Eight Nine\".split(\" \")[i - 1])\n    .array;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqhlz948.d(28): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpoqhlz948.d(30): Error: no property `filter` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqhlz948.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    int n = arr.length;\n\
    \    if (n == 0)\n        return [];\n    string[] result = new string[n];\n \
    \   int j = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (arr[i] >=\
    \ 1 && arr[i] <= 9)\n        {\n            result[j] = to!string(arr[i]);\n \
    \           j++;\n        }\n    }\n    sort(result[0..j]);\n    reverse(result[0..j]);\n\
    \    switch (j)\n    {\n        case 1:\n            if (result[0] == \"1\")\n\
    \                return [\"One\"];\n            if (result[0] == \"2\")\n    \
    \            return [\"Two\"];\n            if (result[0] == \"3\")\n        \
    \        return [\"Three\"];\n            if (result[0] == \"4\")\n          \
    \      return [\"Four\"];\n            if (result[0] == \"5\")\n             \
    \   return [\"Five\"];\n            if (result[0] == \"6\")\n                return\
    \ [\"Six\"];\n            if (result[0] == \"7\")\n                return [\"\
    Seven\"];\n            if (result[0] == \"8\")\n                return [\"Eight\"\
    ];\n            if (result[0] == \"9\")\n                return [\"Nine\"];\n\
    \        case 2:\n            if (result[0] == \"1\")\n                result[0]\
    \ = \"One\";\n            if (result[0] == \"2\")\n                result[0] =\
    \ \"Two\";\n            if (result[0] == \"3\")\n                result[0] = \"\
    Three\";\n            if (result[0] == \"4\")\n                result[0] = \"\
    Four\";\n            if (result[0] == \"5\")\n                result[0] = \"Five\"\
    ;\n            if (result[0] == \"6\")\n                result[0] = \"Six\";\n\
    \            if (result[0] == \"7\")\n                result[0] = \"Seven\";\n\
    \            if (result[0] == \"8\")\n                result[0] = \"Eight\";\n\
    \            if (result[0] == \"9\")\n                result[0] = \"Nine\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1289v8hy.d(87): Error: found `Eight` when expecting `;` following\
    \ statement\\n/tmp/tmp1289v8hy.d(87): Error: found `Five` when expecting `;` following\
    \ statement\\n/tmp/tmp1289v8hy.d(87): Error: found `Four` when expecting `;` following\
    \ statement\\n/tmp/tmp1289v8hy.d(87): Error: found `Three` when expecting `;`\
    \ following statement\\n/tmp/tmp1289v8hy.d(87): Error: found `Two` when expecting\
    \ `;` following statement\\n/tmp/tmp1289v8hy.d(87): Error: found `Two` when expecting\
    \ `;` following statement\\n/tmp/tmp1289v8hy.d(87): Error: found `One` when expecting\
    \ `;` following statement\\n/tmp/tmp1289v8hy.d(87): Error: found `One` when expecting\
    \ `;` following statement\\n/tmp/tmp1289v8hy.d(89): Error: found `One` when expecting\
    \ `;` following statement\\n/tmp/tmp1289v8hy.d(90): Error: found `Three` when\
    \ expecting `;` following statement\\n/tmp/tmp1289v8hy.d(90): Error: found `Two`\
    \ when expecting `;` following statement\\n/tmp/tmp1289v8hy.d(90): Error: found\
    \ `One` when expecting `;` following statement\\n/tmp/tmp1289v8hy.d(91): Error:\
    \ found `Nine` when expecting `;` following statement\\n/tmp/tmp1289v8hy.d(91):\
    \ Error: found `Eight` when expecting `;` following statement\\n/tmp/tmp1289v8hy.d(91):\
    \ Error: found `Four` when expecting `;` following statement\\n/tmp/tmp1289v8hy.d(91):\
    \ Error: unterminated string constant starting at /tmp/tmp1289v8hy.d(91)\\n/tmp/tmp1289v8hy.d(93):\
    \ Error: found `End of File` when expecting `;` following statement\\n/tmp/tmp1289v8hy.d(93):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp1289v8hy.d(93): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1289v8hy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ new string[arr.length];\n    if (arr.length == 0) return [];\n    foreach (i,v;arr)\n\
    \    {\n        if (v >= 1 && v <= 9) res[i] = q{_}[v - 1];\n    }\n    return\
    \ res.retro;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkd462vyj.d(32): Error: cannot implicitly convert expression `\"\
    _\"[cast(ulong)(v - 1L)]` of type `immutable(char)` to `string`\\n/tmp/tmpkd462vyj.d(34):\
    \ Error: no property `retro` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkd462vyj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if (arr.length ==\
    \ 0)\n  {\n    return [];\n  }\n  auto results = [](long n)\n  {\n    switch (n)\n\
    \    {\n      case 1: return \"One\";\n      case 2: return \"Two\";\n      case\
    \ 3: return \"Three\";\n      case 4: return \"Four\";\n      case 5: return \"\
    Five\";\n      case 6: return \"Six\";\n      case 7: return \"Seven\";\n    \
    \  case 8: return \"Eight\";\n      case 9: return \"Nine\";\n      default: return\
    \ \"\";\n    }\n  };\n  arr.sort();\n  arr.reverse();\n  auto arr_result = to!string[](arr);\n\
    \  auto result = results.map!(a => a)(arr);\n  return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb47dxc_n.d(32): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmpb47dxc_n.d(32): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpb47dxc_n.d(33): Error: found `{` when expecting `,`\\n/tmp/tmpb47dxc_n.d(34):\
    \ Error: expression expected, not `switch`\\n/tmp/tmpb47dxc_n.d(35): Error: found\
    \ `{` when expecting `,`\\n/tmp/tmpb47dxc_n.d(36): Error: expression expected,\
    \ not `case`\\n/tmp/tmpb47dxc_n.d(36): Error: found `1` when expecting `,`\\n/tmp/tmpb47dxc_n.d(36):\
    \ Error: expression expected, not `:`\\n/tmp/tmpb47dxc_n.d(36): Error: found `return`\
    \ when expecting `,`\\n/tmp/tmpb47dxc_n.d(36): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpb47dxc_n.d(37): Error: expression expected, not `case`\\n/tmp/tmpb47dxc_n.d(37):\
    \ Error: found `2` when expecting `,`\\n/tmp/tmpb47dxc_n.d(37): Error: expression\
    \ expected, not `:`\\n/tmp/tmpb47dxc_n.d(37): Error: found `return` when expecting\
    \ `,`\\n/tmp/tmpb47dxc_n.d(37): Error: found `;` when expecting `,`\\n/tmp/tmpb47dxc_n.d(38):\
    \ Error: expression expected, not `case`\\n/tmp/tmpb47dxc_n.d(38): Error: found\
    \ `3` when expecting `,`\\n/tmp/tmpb47dxc_n.d(38): Error: expression expected,\
    \ not `:`\\n/tmp/tmpb47dxc_n.d(38): Error: found `return` when expecting `,`\\\
    n/tmp/tmpb47dxc_n.d(38): Error: found `;` when expecting `,`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb47dxc_n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // create a new\
    \ array of the same length and all zeros\n    string[] arr2 = new string[arr.length];\n\
    \    // then write your code here\n    long max = 1;\n    long min = 1;\n    foreach(n;\
    \ arr)\n    {\n        if(n < 1 || n > 9)\n            continue;\n        if(n\
    \ > max)\n            max = n;\n        if(n < min)\n            min = n;\n  \
    \  }\n    sort(arr);\n    reverse(arr);\n    uint i = 0;\n    foreach(e; arr)\n\
    \    {\n        if(e == 1)\n            arr2[i] = \"One\";\n        else if(e\
    \ == 2)\n            arr2[i] = \"Two\";\n        else if(e == 3)\n           \
    \ arr2[i] = \"Three\";\n        else if(e == 4)\n            arr2[i] = \"Four\"\
    ;\n        else if(e == 5)\n            arr2[i] = \"Five\";\n        else if(e\
    \ == 6)\n            arr2[i] = \"Six\";\n        else if(e == 7)\n           \
    \ arr2[i] = \"Seven\";\n        else if(e == 8)\n            arr2[i] = \"Eight\"\
    ;\n        else if(e == 9)\n            arr2[i] = \"Nine\";\n        i++;\n  \
    \  }\n    return arr2;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbvm56vy0.d(42): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpbvm56vy0.d(43): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvm56vy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    //sort integer\
    \ between 1 and 9\n    arr = arr.filter!(a => a > 0 && a < 10).sort!((a, b) =>\
    \ a - b);\n    //reverse array\n    arr = arr.reverse;\n    //convert to string\
    \ array\n    string[] result = arr.map!(a => \"One Two Three Four Five Six Seven\
    \ Eight Nine\"[a * 5 - 5 .. a * 5 - 1]);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj607p7mf.d(29): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpj607p7mf.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpj607p7mf.d(33):\
    \ Error: no property `map` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj607p7mf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    int res_size =\
    \ 0;\n    foreach(item; arr) \n    {\n        if(1 <= item && item <= 9) \n  \
    \      {\n            res_size++;\n        }\n    }\n    string[] res = new string[res_size];\n\
    \    res_size = 0;\n    foreach(item; arr) \n    {\n        if(1 <= item && item\
    \ <= 9) \n        {\n            res[res_size] = to!string(item);\n          \
    \  res_size++;\n        }\n    }\n    res.sort();\n    res.reverse();\n    string[]\
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    foreach(i, item; res) \n    {\n        res[i] = names[item.to!int\
    \ - 1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ux35hh6.d(42): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6ux35hh6.d(46): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmp6ux35hh6.d(47): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp6ux35hh6.d(51):\
    \ Error: no property `to` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6ux35hh6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] data =\
    \ [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    auto xs = arr.filter!(x => x >= 1 && x <= 9).sort().reverse();\n\
    \    return xs.map!(x => data[x]).array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00zosgoc.d(29): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00zosgoc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ new string[arr.length];\n    foreach(i, num; arr)\n    {\n        string str\
    \ = num.to!string;\n        if(str.length == 2)\n        {\n            res[i]\
    \ = \"Double\" ~ to!string(cast(int)num[0]);\n        }\n        else if(str.length\
    \ == 3)\n        {\n            res[i] = \"Triple\" ~ to!string(cast(int)num[0]);\n\
    \        }\n        else if(str.length == 4)\n        {\n            res[i] =\
    \ \"Quadruple\" ~ to!string(cast(int)num[0]);\n        }\n        else if(str.length\
    \ == 5)\n        {\n            res[i] = \"Quintuple\" ~ to!string(cast(int)num[0]);\n\
    \        }\n        else if(str.length == 6)\n        {\n            res[i] =\
    \ \"Sextuple\" ~ to!string(cast(int)num[0]);\n        }\n        else if(str.length\
    \ == 7)\n        {\n            res[i] = \"Septuple\" ~ to!string(cast(int)num[0]);\n\
    \        }\n        else if(str.length == 8)\n        {\n            res[i] =\
    \ \"Octuple\" ~ to!string(cast(int)num[0]);\n        }\n        else if(str.length\
    \ == 9)\n        {\n            res[i] = \"Nonuple\" ~ to!string(cast(int)num[0]);\n\
    \        }\n        else if(str.length == 10)\n        {\n            res[i] =\
    \ \"Decuple\" ~ to!string(cast(int)num[0]);\n        }\n        else\n       \
    \ {\n            res[i] = to!string(cast(int)num[0]);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj06azx1w.d(31): Error: no property `to` for type `long`\\n/tmp/tmpj06azx1w.d(34):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpj06azx1w.d(38): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj06azx1w.d(42): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpj06azx1w.d(46):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpj06azx1w.d(50): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj06azx1w.d(54): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpj06azx1w.d(58):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpj06azx1w.d(62): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj06azx1w.d(66): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpj06azx1w.d(70):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj06azx1w.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{ \n    int N = arr.length;\n\
    \    int[] aux = new int[N];\n    long[] count = new long[10];\n    string[] res\
    \ = new string[N];\n    int i;\n    foreach(x; arr)\n        count[x+1]++;\n \
    \   for(i = 1; i < 10; i++)\n        count[i] += count[i-1];\n    foreach(x; arr)\n\
    \    {\n        aux[count[x]++] = x;\n    }\n    for(i = 0; i < N; i++)\n    {\n\
    \        if(aux[i] == 0)\n            res[i] = \"Zero\";\n        else if(aux[i]\
    \ == 1)\n            res[i] = \"One\";\n        else if(aux[i] == 2)\n       \
    \     res[i] = \"Two\";\n        else if(aux[i] == 3)\n            res[i] = \"\
    Three\";\n        else if(aux[i] == 4)\n            res[i] = \"Four\";\n     \
    \   else if(aux[i] == 5)\n            res[i] = \"Five\";\n        else if(aux[i]\
    \ == 6)\n            res[i] = \"Six\";\n        else if(aux[i] == 7)\n       \
    \     res[i] = \"Seven\";\n        else if(aux[i] == 8)\n            res[i] =\
    \ \"Eight\";\n        else if(aux[i] == 9)\n            res[i] = \"Nine\";\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbmq7wbsw.d(28): Error: cannot implicitly convert expression `arr.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpbmq7wbsw.d(39): Error: cannot implicitly\
    \ convert expression `x` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbmq7wbsw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0)\n        return [];\n    auto sort = sort!\"a < b\"(arr);\n    auto res\
    \ = [];\n    foreach (e; reverse(sort)) \n    {\n        static int[string] my_map\
    \ = ['One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven':\
    \ 7, 'Eight': 8, 'Nine': 9];\n        static string[] my_array = ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n        if (1 <=\
    \ e <= 9)\n            res ~= my_array[my_map[$(to!string(e))]];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34):\
    \ Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated\
    \ character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\\
    n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34):\
    \ Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated\
    \ character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\\
    n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34):\
    \ Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated\
    \ character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\\
    n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34):\
    \ Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated\
    \ character constant\\n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\\
    n/tmp/tmp09by7wed.d(34): Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34):\
    \ Error: unterminated character constant\\n/tmp/tmp09by7wed.d(34): Error: comma\
    \ expected separating array initializers, not `ne`\\n/tmp/tmp09by7wed.d(34): Error:\
    \ semicolon expected, not `63U`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp09by7wed.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int[] nums = arr\n\
    \                  .filter!(num => num > 0 && num < 10)\n                  .sort!((a,\
    \ b) => a < b)\n                  .map!(num => cast(int)num)\n               \
    \   .array;\n  int len = nums.length;\n  int[] tmp = new int[len];\n  foreach(int\
    \ i, ref int num; nums) \n  {\n    tmp[len - 1 - i] = num;\n  }\n  nums = tmp;\n\
    \  string[] result = new string[len];\n  foreach(int i, ref int num; nums) \n\
    \  {\n    result[i] = get_string(num);\n  }\n  return result;\n}\nstring get_string(int\
    \ num) \n{\n  switch(num) \n  {\n    case 1:\n      return \"One\";\n    case\
    \ 2:\n      return \"Two\";\n    case 3:\n      return \"Three\";\n    case 4:\n\
    \      return \"Four\";\n    case 5:\n      return \"Five\";\n    case 6:\n  \
    \    return \"Six\";\n    case 7:\n      return \"Seven\";\n    case 8:\n    \
    \  return \"Eight\";\n    case 9:\n      return \"Nine\";\n    default:\n    \
    \  return \"\";\n  }\n}\nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_w91vs49.d(29): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmp_w91vs49.d(33): Error: cannot implicitly convert expression `nums.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_w91vs49.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  /*\n  Given an array\
    \ of numbers, sort the array and replace each digit by its corresponding name\
    \ in English, reverse the resulting array and return it.\n  */\n  // by_length(arr)\n\
    \  enum strings = tuple(\n    \"\", \n    \"One\", \n    \"Two\", \n    \"Three\"\
    , \n    \"Four\", \n    \"Five\", \n    \"Six\", \n    \"Seven\", \n    \"Eight\"\
    , \n    \"Nine\");\n  auto sarr = arr.sort().filter!(n => n > 0 && n < 10).array.map!(n\
    \ => strings[n]).array.reverse;\n  return sarr;\n}\n \nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp482vz1hu.d(43): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp482vz1hu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    alias digit_t =\
    \ Tuple!(string, long);\n    static auto lut = [(\"One\", 1), (\"Two\", 2), (\"\
    Three\", 3), (\"Four\", 4), (\"Five\", 5), (\"Six\", 6), (\"Seven\", 7), (\"Eight\"\
    , 8), (\"Nine\", 9)];\n    auto map_to_digit = (num) => \n    {\n        foreach(ref\
    \ dt; lut)\n        {\n            if(dt[1] == num)\n                return dt[0];\n\
    \        }\n        return \"\";\n    };\n    auto odd_or_even = (num) => num\
    \ % 2 == 0 ? \"even\" : \"odd\";\n    auto to_upper = (str) => std.algorithm.map!(x\
    \ => toUpper(x))(str);\n    auto to_string = (str) => dstring(str);\n    auto\
    \ result = arr.filter!(a => a >= 1 && a <= 9).sort.retro.map!(map_to_digit).map!(to_upper).map!(to_string);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5cf_df4m.d(29): Error: Using the result of a comma expression\
    \ is not allowed\\n/tmp/tmp5cf_df4m.d(29): Error: Using the result of a comma\
    \ expression is not allowed\\n/tmp/tmp5cf_df4m.d(29): Error: Using the result\
    \ of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(29): Error: Using\
    \ the result of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(29): Error:\
    \ Using the result of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(29):\
    \ Error: Using the result of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(29):\
    \ Error: Using the result of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(29):\
    \ Error: Using the result of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(29):\
    \ Error: Using the result of a comma expression is not allowed\\n/tmp/tmp5cf_df4m.d(30):\
    \ Error: variable `tmp5cf_df4m.by_length.map_to_digit` type `void` is inferred\
    \ from initializer `(num) => ()\\n{\\nforeach (ref dt; lut)\\n{\\nif (dt[1] ==\
    \ num)\\nreturn dt[0];\\n}\\nreturn \"\";\\n}\\n`, and variables cannot be of\
    \ type `void`\\n/tmp/tmp5cf_df4m.d(30): Error: template lambda has no value\\\
    n/tmp/tmp5cf_df4m.d(39): Error: variable `tmp5cf_df4m.by_length.odd_or_even` type\
    \ `void` is inferred from initializer `(num) => num % 2 == 0 ? \"even\" : \"odd\"\
    `, and variables cannot be of type `void`\\n/tmp/tmp5cf_df4m.d(39): Error: template\
    \ lambda has no value\\n/tmp/tmp5cf_df4m.d(40): Error: variable `tmp5cf_df4m.by_length.to_upper`\
    \ type `void` is inferred from initializer `(str) => std.algorithm.map!((x) =>\
    \ toUpper(x))(str)`, and variables cannot be of type `void`\\n/tmp/tmp5cf_df4m.d(40):\
    \ Error: template lambda has no value\\n/tmp/tmp5cf_df4m.d(41): Error: variable\
    \ `tmp5cf_df4m.by_length.to_string` type `void` is inferred from initializer `(str)\
    \ => dstring(str)`, and variables cannot be of type `void`\\n/tmp/tmp5cf_df4m.d(41):\
    \ Error: template lambda has no value\\n/tmp/tmp5cf_df4m.d(42): Error: no property\
    \ `filter` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5cf_df4m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[] result =\
    \ [];\n  immutable m = max(arr);\n  immutable n = min(arr);\n  if (m < 1 || n\
    \ > 9) \n  {\n    return result;\n  }\n  string[] map = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  for\
    \ (long i = 0; i < arr.length; i++) \n  {\n    if (arr[i] > 0 && arr[i] < 10)\
    \ \n    {\n      result ~= map[arr[i] - 1];\n    }\n  }\n  return result.length\
    \ == 0 ? result : result.reversed;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0zlek1pz.d(29): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp0zlek1pz.d(30): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp0zlek1pz.d(43): Error: no property `reversed`\
    \ for type `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zlek1pz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  sort(arr);\n  //reverse(arr);\n\
    \  return arr.map!((e) { return \"One\"; });\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpox37pefc.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpox37pefc.d(30): Error: no property `map` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox37pefc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if (arr.length ==\
    \ 0) \n  {\n    return [];\n  }\n  else\n  {\n    // Write code here to get the\
    \ result.\n    auto rArray = arr.filter!(n => n >= 1 && n <= 9).sort.retro;\n\
    \    return rArray.map!(n => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][n - 1]);\n  }\n}\n```\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjz9fmv8k.d(39): Error: declaration expected, not `\"\"`\\n/tmp/tmpjz9fmv8k.d(39):\
    \ Error: unterminated string constant starting at /tmp/tmpjz9fmv8k.d(39)\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjz9fmv8k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[];\n    foreach(elem; arr)\n    {\n        if (elem <= 9 && elem\
    \ >= 1)\n        {\n            result ~= elem.to!string;\n        }\n    }\n\
    \    result.sort;\n    result.reverse;\n    foreach(elem; result)\n    {\n   \
    \     switch(elem)\n        {\n            case \"1\":\n                elem =\
    \ \"One\";\n                break;\n            case \"2\":\n                elem\
    \ = \"Two\";\n                break;\n            case \"3\":\n              \
    \  elem = \"Three\";\n                break;\n            case \"4\":\n      \
    \          elem = \"Four\";\n                break;\n            case \"5\":\n\
    \                elem = \"Five\";\n                break;\n            case \"\
    6\":\n                elem = \"Six\";\n                break;\n            case\
    \ \"7\":\n                elem = \"Seven\";\n                break;\n        \
    \    case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa498x1mc.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmpa498x1mc.d(33): Error: no property\
    \ `to` for type `long`\\n/tmp/tmpa498x1mc.d(36): Error: no property `sort` for\
    \ type `string[]`\\n/tmp/tmpa498x1mc.d(37): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpa498x1mc.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpa498x1mc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    alias digitString\
    \ = typeof(`1, 2, 3, 4, 5, 6, 7, 8, 9`);\n    if (arr.length == 0) return [];\n\
    \    auto res = arr.sort().reverse;\n    foreach (i, elt; res) \n    {\n     \
    \   if (elt in digitString) \n        {\n            //res[i] = to!string(elt);\n\
    \            res[i] = elt.stringof;\n        }\n        else \n        {\n   \
    \         res[i] = \"\";\n        }\n    }\n    return res.filter!(a => a.length\
    \ != 0);\n}\n/*\n    \u0414\u0430\u043D \u043C\u0430\u0441\u0441\u0438\u0432 \u0446\
    \u0435\u043B\u044B\u0445 \u0447\u0438\u0441\u0435\u043B. \u041E\u0442\u0441\u043E\
    \u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0447\u0438\u0441\u043B\
    \u0430 \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435, \u043A\u043E\u0442\u043E\
    \u0440\u044B\u0435 \u043D\u0430\u0445\u043E\u0434\u044F\u0442\u0441\u044F \u043C\
    \u0435\u0436\u0434\u0443 1 \u0438 9 \u0432\u043A\u043B\u044E\u0447\u0438\u0442\
    \u0435\u043B\u044C\u043D\u043E.\n    \u0417\u0430\u0442\u0435\u043C \u043F\u0435\
    \u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043F\u043E\u043B\u0443\
    \u0447\u0435\u043D\u043D\u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\
    \ \u043F\u043E\u043C\u0435\u043D\u044F\u0442\u044C \u043A\u0430\u0436\u0434\u043E\
    \u0435 \u0447\u0438\u0441\u043B\u043E \u043D\u0430 \u0435\u0433\u043E \u043D\u0430\
    \u0437\u0432\u0430\u043D\u0438\u0435 \u043D\u0430 \u0430\u043D\u0433\u043B\u0438\
    \u0439\u0441\u043A\u043E\u043C.\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp5u905jw.d(45): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5u905jw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
