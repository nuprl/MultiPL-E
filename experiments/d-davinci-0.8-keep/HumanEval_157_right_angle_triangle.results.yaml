name: HumanEval_157_right_angle_triangle
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    return isPythagoreanTriplet(a, b, c);\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6xlwwyj1.d(16): Error: undefined identifier `isPythagoreanTriplet`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xlwwyj1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    auto const s = [](long a, long b, long c) \n   \
    \ {\n        return (a * a) + (b * b) == (c * c);\n    };\n    return s(a, b,\
    \ c) || s(a, c, b) || s(b, c, a);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeu93m33q.d(16): Error: found `a` when expecting `.` following\
    \ long\\n/tmp/tmpeu93m33q.d(16): Error: found `,` when expecting identifier following\
    \ `long`.\\n/tmp/tmpeu93m33q.d(16): Error: found `long` when expecting `,`\\n/tmp/tmpeu93m33q.d(16):\
    \ Error: found `c` when expecting `.` following long\\n/tmp/tmpeu93m33q.d(16):\
    \ Error: found `)` when expecting identifier following `long`.\\n/tmp/tmpeu93m33q.d(17):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpeu93m33q.d(18): Error: expression\
    \ expected, not `return`\\n/tmp/tmpeu93m33q.d(18): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpeu93m33q.d(19): Error: expression expected, not `}`\\n/tmp/tmpeu93m33q.d(19):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpeu93m33q.d(20): Error: expression\
    \ expected, not `return`\\n/tmp/tmpeu93m33q.d(20): Error: found `s` when expecting\
    \ `,`\\n/tmp/tmpeu93m33q.d(20): Error: found `;` when expecting `,`\\n/tmp/tmpeu93m33q.d(21):\
    \ Error: expression expected, not `}`\\n/tmp/tmpeu93m33q.d(22): Error: found `unittest`\
    \ when expecting `,`\\n/tmp/tmpeu93m33q.d(38): Error: found `void` when expecting\
    \ `,`\\n/tmp/tmpeu93m33q.d(38): Error: found `{` when expecting `,`\\n/tmp/tmpeu93m33q.d(38):\
    \ Error: expression expected, not `}`\\n/tmp/tmpeu93m33q.d(38): Error: found `End\
    \ of File` when expecting `,`\\n/tmp/tmpeu93m33q.d(38): Error: found `End of File`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu93m33q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    return a*a + b*b == c*c;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaa114bgr.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpaa114bgr.__unittest_L18_C1()\
    \ [0x427a9c]\\n??:? void tmpaa114bgr.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0x7c89f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    enum right = 90;\n    // this problem it's not use\
    \ the inner logic, \n    // just use the Math.Sin, Cos and Tan.\n    return 90\
    \ == abs(max(a, b, c) - min(a, b, c)) * 90;\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_h5k2e5w.d(19): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_h5k2e5w.d(19): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_h5k2e5w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    //algorithm:\n    //    find the hypotenuse, set\
    \ it to a, s.t. a^2 >= b^2 + c^2\n    //    if the equation holds, return true;\n\
    \    long h = a, s = b, t = c;\n    sort( [h, s, t] );\n    return h * h == s\
    \ * s + t * t;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgm6v4s1.d(20): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgm6v4s1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    if (a <= 0 || b <= 0 || c <= 0)\n        return\
    \ false;\n    long x = max(a, max(b, c));\n    long z = min(a, min(b, c));\n \
    \   long y = a + b + c - x - z;\n    return x * x == y * y + z * z;\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprvidfhae.d(18): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmprvidfhae.d(19): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprvidfhae.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    return pow(a, 2) + pow(b, 2) == pow(c, 2);\n}\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6hahhmie.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f85]\\n??:? void tmp6hahhmie.__unittest_L18_C1()\
    \ [0x427b1c]\\n??:? void tmp6hahhmie.__modtest() [0x427d08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430180]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab15]\\n??:? runModuleUnitTests [0x42ba81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42835b]\\n??:? _d_run_main [0x4282c6]\\n??:? main [0x427d1b]\\\
    n??:? __libc_start_main [0xb8891554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    return (a > 0) && (b > 0) && (c > 0) && (a*a + b*b\
    \ == c*c);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsi_3m79_.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpsi_3m79_.__unittest_L18_C1()\
    \ [0x427ab4]\\n??:? void tmpsi_3m79_.__modtest() [0x427c08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c1b]\\\
    n??:? __libc_start_main [0xf743c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n  // @TODO\n  long[] sides = [a, b, c];\n  auto ordered\
    \ = sort(sides);\n  long a = ordered[0];\n  long b = ordered[1];\n  long c = ordered[2];\n\
    \  if (a <= 0 || b <= 0 || c <= 0) return false;\n  return (a * a + b * b == c\
    \ * c);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxwtg4fmj.d(18): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpxwtg4fmj.d(19): Error: variable `a` is shadowing\
    \ variable `tmpxwtg4fmj.right_angle_triangle.a`\\n/tmp/tmpxwtg4fmj.d(20): Error:\
    \ variable `b` is shadowing variable `tmpxwtg4fmj.right_angle_triangle.b`\\n/tmp/tmpxwtg4fmj.d(21):\
    \ Error: variable `c` is shadowing variable `tmpxwtg4fmj.right_angle_triangle.c`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwtg4fmj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    if(a < b)\n        swap(a, b);\n    if(a < c)\n\
    \        swap(a, c);\n    if(c*c + b*b == a*a)\n        return true;\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7701ak_w.d(17): Error: undefined identifier `swap`, did you mean\
    \ template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,\
    \ Targets))`?\\n/tmp/tmp7701ak_w.d(19): Error: undefined identifier `swap`, did\
    \ you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,\
    \ Targets))`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7701ak_w.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    bool is_right_triangle = false;\n    double[] sides\
    \ = [a, b, c];\n    sort(sides);\n    is_right_triangle = pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n    return is_right_triangle;\n}\nunittest\n{\n   \
    \ alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_pc0isw8.d(18): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pc0isw8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    auto triangle = tuple(a, b, c);\n    std.algorithm.sort(triangle);\n\
    \    auto aa = triangle[0];\n    auto bb = triangle[1];\n    auto cc = triangle[2];\n\
    \    return aa * aa + bb * bb == cc * cc;\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplmbbdf3c.d(17): Error: undefined identifier `algorithm` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmbbdf3c.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    import std.math : sqrt;\n    static assert(isFloatingPoint!(long)\
    \ == false);\n    a = a.abs;\n    b = b.abs;\n    c = c.abs;\n    if (a > b &&\
    \ a > c)\n    {\n        return a.sqrt == (b.sqrt + c.sqrt);\n    }\n    else\
    \ if (b > a && b > c)\n    {\n        return b.sqrt == (a.sqrt + c.sqrt);\n  \
    \  }\n    else\n    {\n        return c.sqrt == (a.sqrt + b.sqrt);\n    }\n}\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp27jhdah1.d(17): Error: template instance `isFloatingPoint!long`\
    \ template `isFloatingPoint` is not defined\\n/tmp/tmp27jhdah1.d(17):        while\
    \ evaluating: `static assert(isFloatingPoint!long == false)`\\n/tmp/tmp27jhdah1.d(23):\
    \ Error: `std.math.sqrt` called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp27jhdah1.d(23): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp27jhdah1.d(23): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp27jhdah1.d(27): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(18"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    enum right_triangle_angles : size_t { right_angle\
    \ = 90 };\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto hyp = max_side * max_side;\n    sides.remove(max_side);\n    return\
    \ right_triangle_angles.right_angle == \n        degrees(acos(hyp / (sides[0]\
    \ * sides[1])));\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi46nojms.d(16): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpi46nojms.d(18): Error: undefined identifier `max`, did you\
    \ mean function `fmax`?\\n/tmp/tmpi46nojms.d(20): Error: no property `remove`\
    \ for type `Tuple!(long, long, long)`\\n/tmp/tmpi46nojms.d(22): Error: undefined\
    \ identifier `degrees`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpi46nojms.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    double sq(double val) pure nothrow @safe\n    {\n\
    \        return val * val;\n    }\n    return (sq(a) + sq(b) == sq(c)) || (sq(a)\
    \ + sq(c) == sq(b)) || (sq(b) + sq(c) == sq(a));\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    int [long] sides;\n    sides.length = 3;\n    sides[0]\
    \ = a;\n    sides[1] = b;\n    sides[2] = c;\n    // If a square of one side is\
    \ equal to the squares of the other two sides\n    // then the triangle is a right\
    \ angle triangle.\n    // http://www.mathsisfun.com/triangle.html\n    // From\
    \ pythagorean theorem:\n    // c^2 = a^2 + b^2\n    // Which can be rearranged\
    \ to:\n    // c^2 - a^2 - b^2 = 0\n    long a2 = a*a;\n    long b2 = b*b;\n  \
    \  long c2 = c*c;\n    if (c2 - a2 - b2 == 0)\n        return true;\n    else\n\
    \        return false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc2dh8wka.d(17): Error: `sides.length` is not an lvalue and cannot\
    \ be modified\\n/tmp/tmpc2dh8wka.d(18): Error: cannot implicitly convert expression\
    \ `a` of type `long` to `int`\\n/tmp/tmpc2dh8wka.d(19): Error: cannot implicitly\
    \ convert expression `b` of type `long` to `int`\\n/tmp/tmpc2dh8wka.d(20): Error:\
    \ cannot implicitly convert expression `c` of type `long` to `int`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2dh8wka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    enum option!int triOption = (a, b, c);\n    switch(triOption)\n\
    \    {\n        case option.some(var aTuple):\n            bool aSq = aTuple[0]\
    \ * aTuple[0];\n            bool bSq = aTuple[1] * aTuple[1];\n            bool\
    \ cSq = aTuple[2] * aTuple[2];\n            if (aSq + bSq == cSq)\n          \
    \  {\n                return true;\n            }\n            else if (aSq +\
    \ cSq == bSq)\n            {\n                return true;\n            }\n  \
    \          else if (bSq + cSq == aSq)\n            {\n                return true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        case option.none:\n            return false;\n    }\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0czkkhov.d(19): Error: found `aTuple` when expecting `,`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0czkkhov.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    bool res = false;\n    long[] tri = {a, b, c};\n\
    \    tri.sort;\n    if (tri[0] * tri[0] + tri[1] * tri[1] == tri[2] * tri[2])\
    \ \n    {\n        res = true;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfom1q4y8.d(17): Error: a struct is not a valid initializer for\
    \ a `long[]`\\n/tmp/tmpfom1q4y8.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfom1q4y8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
    \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
    \ a, long b, long c) \n{\n    // Step 1: sort the sides\n    //auto [a, b, c]\
    \ = tuple(a, b, c).sort();\n    auto sides = tuple(a, b, c).sort();\n    a = sides[0];\n\
    \    b = sides[1];\n    c = sides[2];\n    // Step 2: Check if pythagoras theorem\
    \ holds good\n    //return (a * a + b * b == c * c);\n    long powA = pow(a, 2);\n\
    \    long powB = pow(b, 2);\n    long powC = pow(c, 2);\n    return (powA + powB\
    \ == powC);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n \
    \   assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpchez6szq.d(18): Error: no property `sort` for type `Tuple!(long,\
    \ long, long)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchez6szq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
