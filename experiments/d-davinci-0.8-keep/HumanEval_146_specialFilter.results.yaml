name: HumanEval_146_specialFilter
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long counter = 0;\n    long firstNumber;\n\
    \    long lastNumber;\n    foreach(i; 0 .. nums.length)\n    {\n        if(nums[i]\
    \ >= 10)\n        {\n            firstNumber = nums[i] / 10;\n            lastNumber\
    \ = nums[i] % 10;\n            if(firstNumber % 2 != 0 && lastNumber % 2 != 0)\n\
    \            {\n                counter++;\n            }\n        }\n    }\n\
    \    return counter;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n\
    \    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8ng9g8hj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428305]\\n??:? void tmp8ng9g8hj.__unittest_L31_C1()\
    \ [0x427f2d]\\n??:? void tmp8ng9g8hj.__modtest() [0x428084]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c363]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430389]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430838]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430315]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1cd]\\n??:? runModuleUnitTests [0x42c139]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42874f]\\n??:? _d_run_main [0x4286ba]\\n??:? main [0x428097]\\\
    n??:? __libc_start_main [0xcf467554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        auto num1 = num/10;\n        auto num2 = num%10;\n        if(num\
    \ > 10 && (num1%2 != 0) && (num2%2 != 0))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n \n/*\nWrite a function that takes a string\
    \ as input and returns a string where \n    all vowels are removed from the original\
    \ string.\n    For example:\n    stripVowels(\"Hello, World!\") => \"Hll, Wrld!\"\
    \n    stripVowels(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\") =>\
    \ \",\"\n*/\nstring stripVowels(string input)\n{\n    string result;\n    foreach(letter;\
    \ input)\n    {\n        if(letter != 'a' && letter != 'e' && letter != 'i' &&\
    \ letter != 'o' && letter != 'u')\n        {\n            result ~= letter;\n\
    \        }\n    }\n    return result;\n}\n \n/*\nWrite a function that takes an\
    \ array of strings as input and returns \n    the number of strings that are palindromes.\
    \ \n    For example:\n    countPalindromes([\"mom\", \"dad\", \"dadad\"]) => 2\n\
    \    countPalindromes([\"mom\", \"dad\", \"dadad\", \"cc\"]) => 3\n*/\nlong countPalindromes(string[]\
    \ words)\n{\n    long count = 0;\n    foreach(word; words)\n    {\n        long\
    \ i = 0;\n        while(i < word.length/2)\n        {\n            if(word[i]\
    \ != word[word.length-1-i])\n            {\n                break;\n         \
    \   }\n            else\n            {\n                i++;\n            }\n\
    \        }\n        if(i == word.length/2)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n \nunittest\n{\n    alias candidate =\
    \ specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps2r7lshz.d(85): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284dd]\\n??:? void tmps2r7lshz.__unittest_L79_C1()\
    \ [0x428109]\\n??:? void tmps2r7lshz.__modtest() [0x428260]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43080d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cbc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430799]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd91]\\n??:? runModuleUnitTests [0x42ccfd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428927]\\n??:? _d_run_main [0x428892]\\n??:? main [0x428273]\\\
    n??:? __libc_start_main [0xcb0b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    import std.algorithm;\n    import std.conv;\n\
    \    import std.math;\n    long count = 0;\n    foreach(i; nums)\n    {\n    \
    \    if(to!string(i).front.to!long % 2 == 1 && to!string(i).back.to!long % 2 ==\
    \ 1 && i > 10)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite a function that takes an array of strings as input and\
    \ returns the \n    number of words in the array that start with the letter 'b'\
    \ (lowercase) \n    and whose length is less than 4.\n    For example:\n    bLettersFilter([\"\
    hello\", \"world\", \"bye\", \"bar\", \"bob\"]) => 2\n*/\nlong bLettersFilter(string[]\
    \ strs) \n{\n    import std.algorithm;\n    import std.conv;\n    import std.math;\n\
    \    long count = 0;\n    foreach(i; strs)\n    {\n        if(i.front == 'b' &&\
    \ i.length < 4)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite a function that takes an array of strings as input and\
    \ returns the \n    number of words in the array that start with a vowel (aeiou)\
    \ and whose \n    length is less than 4.\n    For example:\n    vowelLettersFilter([\"\
    hello\", \"world\", \"bye\", \"bar\", \"bob\"]) => 3\n*/\nlong vowelLettersFilter(string[]\
    \ strs) \n{\n    import std.algorithm;\n    import std.conv;\n    import std.math;\n\
    \    long count = 0;\n    foreach(i; strs)\n    {\n        if(i.front == 'a' ||\
    \ i.front == 'e' || i.front == 'i' || i.front == 'o' || i.front == 'u' && i.length\
    \ < 4)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nWrite a function that takes an array of numbers as input and returns a\
    \ \n    tuple with first value\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp74o_wmpr.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74o_wmpr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(inout num;\
    \ nums)\n    {\n        auto firstDigit = cast(uint)num % 10;\n        if (num\
    \ > 10 && firstDigit % 2 != 0)\n        {\n            auto numStr = num.to!string;\n\
    \            auto lastDigit = cast(uint)numStr[$-1] - '0';\n            if (lastDigit\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n/*\nWrite a function that takes two numbers as input\
    \ and returns the number of \n    integers between them that are divisible by\
    \ 3.\n    For example:\n    divisibleBy3(1, 3) => 1 \n    divisibleBy3(1, 8) =>\
    \ 2\n    divisibleBy3(1, 9) => 3\n*/\nlong divisibleBy3(long from, long to) \n\
    {\n    long count = 0;\n    for (long i = from; i <= to; i++)\n    {\n       \
    \ if (i % 3 == 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite a function that takes a positive integer as input and returns\
    \ true if \n    the sum of all digits of the number is divisible by 3, and false\
    \ otherwise.\n    For example:\n    divisibleBySum(8) => false\n    divisibleBySum(12)\
    \ => true\n    divisibleBySum(59) => false\n*/\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsh7r3tac.d(15): Error: variable `tmpsh7r3tac.specialFilter.num`\
    \ `inout` variables can only be declared inside `inout` functions\\n/tmp/tmpsh7r3tac.d(20):\
    \ Error: no property `to` for type `inout(long)`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsh7r3tac.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    auto res = 0;\n    foreach(num; nums) \n\
    \    {\n        if(num > 10 && isOdd(num % 10) && isOdd(num / 10^(int.max!(log10(num)))))\
    \ \n        {\n            res++;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzz694u9_.d(17): Error: found `!` when expecting `)`\\n/tmp/tmpzz694u9_.d(17):\
    \ Error: found `)` instead of statement\\n/tmp/tmpzz694u9_.d(22): Error: declaration\
    \ expected, not `return`\\n/tmp/tmpzz694u9_.d(23): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz694u9_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    int count = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i]>10 && (nums[i]/10%2!=0) && nums[i]%2!=0)\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    Write a function called zeroCouponBond that takes two numbers as inputs: \n  \
    \  coupon interest rate and principal. \n    The function should return the number\
    \ of years to pay off the bond. \n    The inputs and function should work with\
    \ any currency such as dollars, euros, or pounds.\n*/\nlong zeroCouponBond(double\
    \ couponInterestRate, double principal)\n{\n    return cast(long)log(1/couponInterestRate)/log(2);\n\
    }\n/*\nGiven the values of years and amount of a zero-coupon bond, \n    write\
    \ a function called presentValue that computes the price of the bond \n    (calculated\
    \ as the sum of the discounted cash flows). \n    The inputs and function should\
    \ work with any currency such as dollars, euros, or pounds.\n*/\ndouble presentValue(long\
    \ years, double amount)\n{\n    double price = 0;\n    for(int i = 1; i <= years;\
    \ i++)\n    {\n        price += amount/pow(2, i);\n    }\n    return price;\n\
    }\n/*\nWrite a function that takes an array of numbers as input \n    and returns\
    \ the number of elements in the array that are greater than 10 and \n    both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\n*/\nlong specialFilter(long[] nums)\n{\n    int count = 0;\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]>10 && (nums[i]/10%2!=0)\
    \ && nums[i]%2!=\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fynlciy.d(63): Error: expression expected, not `unittest`\\\
    n/tmp/tmp1fynlciy.d(64): Error: found `{` when expecting `)`\\n/tmp/tmp1fynlciy.d(75):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fynlciy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{ \n    return nums.filter!(n => n > 10 && n %\
    \ 2 != 0 && n.toString().front.to!int % 2 != 0 && n.toString().back.to!int % 2\
    \ != 0).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpautgylfw.d(14): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpautgylfw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long counter = 0;\n    foreach(long num;\
    \ nums)\n    {\n        if (num > 10 && abs(num) > 10)\n        {\n          \
    \  if (abs(num % 10) % 2 == 1 && abs(num / pow(10, int.digits(num) - 1)) % 2 ==\
    \ 1)\n            {\n                counter++;\n            }\n        }\n  \
    \  }\n    return counter;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpho1popol.d(19): Error: no property `digits` for type `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho1popol.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    size_t ret;\n    foreach(ref i; nums)\n\
    \    {\n        if(i < 10)\n            continue;\n        if(i.modf.first !=\
    \ i.modf.last)\n            continue;\n        ret++;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1z5dvsu_.d(19): Error: function `std.math.modf(real x, ref real\
    \ i)` is not callable using argument types `(long)`\\n/tmp/tmp1z5dvsu_.d(19):\
    \ Error: function `std.math.modf(real x, ref real i)` is not callable using argument\
    \ types `(long)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1z5dvsu_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long ret = 0;\n    foreach(num; nums)\n\
    \    {\n        if (num > 10 && num.absof % 2 && num.absof / 10 % 2)\n       \
    \     ret++;\n    }\n    return ret;\n}\n \n/*\nNow write a function that takes\
    \ an array of strings as input and returns \n    the number of strings in the\
    \ array that contain exactly three characters.\n    For example:\n    specialFilter([\"\
    Hello\", \"World\", \"Test\"]) => 2\n    specialFilter([\"H\", \"E\", \"L\", \"\
    L\", \"O\"]) => 1\n    specialFilter([\"AAA\", \"BB\", \"C\"]) => 0\n*/\nlong\
    \ specialFilter(string[] strings) \n{\n    long ret = 0;\n    foreach(s; strings)\n\
    \    {\n        if (s.length == 3)\n            ret++;\n    }\n    return ret;\n\
    }\n \n// Now test your work here.\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvhhu0pl.d(17): Error: no property `absof` for type `long`\\\
    n/tmp/tmplvhhu0pl.d(17): Error: no property `absof` for type `long`\\n/tmp/tmplvhhu0pl.d(53):\
    \ Error: `tmplvhhu0pl.specialFilter` called with argument types `(void[])` matches\
    \ both:\\n/tmp/tmplvhhu0pl.d(12):     `tmplvhhu0pl.specialFilter(long[] nums)`\\\
    nand:\\n/tmp/tmplvhhu0pl.d(31):     `tmplvhhu0pl.specialFilter(string[] strings)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvhhu0pl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long[] gt10 = filter!(a => a > 10)(nums);\n\
    \    long[] areOdd = filter!(a => a % 2 == 1)(gt10);\n    long[] first = filter!(a\
    \ => a % 10 == 1 || a % 10 == 3 || a % 10 == 5 || a % 10 == 7 || a % 10 == 9)(areOdd);\n\
    \    return first.length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7vxo3uv.d(14): Error: template instance `filter!((a) => a >\
    \ 10)` template `filter` is not defined\\n/tmp/tmpr7vxo3uv.d(15): Error: template\
    \ instance `filter!((a) => a % 2 == 1)` template `filter` is not defined\\n/tmp/tmpr7vxo3uv.d(16):\
    \ Error: template instance `filter!((a) => a % 10 == 1 || a % 10 == 3 || a % 10\
    \ == 5 || a % 10 == 7 || a % 10 == 9)` template `filter` is not defined\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7vxo3uv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{ \n    long n = 0;\n    foreach(idx, elem; nums)\
    \ \n    {\n        immutable tmp = elem;\n        int firstDigit = elem / 10_000_000;\n\
    \        int lastDigit = elem % 10;\n        if (elem > 10 && firstDigit % 2 ==\
    \ 1 && lastDigit % 2 == 1) \n        {\n            n++;\n        }\n    }\n \
    \   return n;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxz32w0aq.d(18): Error: cannot implicitly convert expression `elem\
    \ / 10000000L` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxz32w0aq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i = 0; i <\
    \ nums.length; i++)\n    {\n        // to find first digit\n        long first\
    \ = nums[i];\n        long firstDigit = nums[i];\n        long lastDigit = nums[i]\
    \ % 10;\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkg0xfea.d(21): Error: found `unittest` instead of statement\\\
    n/tmp/tmpmkg0xfea.d(33): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkg0xfea.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{ \n    auto l = nums.length;\n    long res = 0;\n\
    \    foreach(el; nums) \n    {\n        long dig = el;\n        bool isOdd = false;\n\
    \        long firstDig = 0;\n        long lastDig = 0;\n        while(dig)\n \
    \       {\n            lastDig = dig % 10;\n            dig /= 10;\n         \
    \   if(dig == 0)\n            {\n                firstDig = lastDig;\n       \
    \     }\n        }\n        isOdd = firstDig % 2 != 0;\n        isOdd &= lastDig\
    \ % 2 != 0;\n        if(el > 10 && isOdd)\n        {\n            res++;\n   \
    \     }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsa40rfxa.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282e5]\\n??:? void tmpsa40rfxa.__unittest_L40_C1()\
    \ [0x427e9e]\\n??:? void tmpsa40rfxa.__modtest() [0x428064]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2cf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b162]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430281]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b139]\\n??:? runModuleUnitTests [0x42c0a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428734]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286bb]\\n??:? _d_run_main [0x428626]\\n??:? main [0x428077]\\\
    n??:? __libc_start_main [0xf43ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.getDigits()[0] % 2 != 0 && num.getDigits()[$-1]\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl3mu_pet.d(17): Error: no property `getDigits` for type `long`\\\
    n/tmp/tmpl3mu_pet.d(17): Error: no property `getDigits` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3mu_pet.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i = 0; i <\
    \ nums.length; i++)\n    {\n        if (nums[i] > 10)\n        {\n           \
    \ bool first = false;\n            bool last = false;\n            if (nums[i]\
    \ < 0)\n            {\n                first = false;\n                last =\
    \ false;\n            }\n            else\n            {\n                auto\
    \ str = to!string(nums[i]);\n                first = str[0] % 2 == 1;\n      \
    \          last = str[$-1] % 2 == 1;\n            }\n            if (first &&\
    \ last)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjn5h5846.d(28): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjn5h5846.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n\tint[] n = new int[3];\n\tn[0] = 0;\n\tint\
    \ flag = 0;\n\tforeach(a; nums)\n\t{\n\t\tif (a > 10)\n\t\t{\n\t\t\tif ((a % 10)\
    \ % 2 == 1)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tn[1] = a;\n\t\t\t\tn[2] = 10;\n\
    \t\t\t\twhile (n[1] / n[2] != 0)\n\t\t\t\t{\n\t\t\t\t\tn[2] *= 10;\n\t\t\t\t}\n\
    \t\t\t\tn[2] /= 10;\n\t\t\t\tif ((n[1] / n[2]) % 2 == 1)\n\t\t\t\t{\n\t\t\t\t\t\
    n[0]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn n[0];\n}\n// Test Cases:\nunittest\n\
    {\n    assert(specialFilter([15, -73, 14, -15]) == 1);\n    assert(specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2);\n    assert(specialFilter([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]) == 0);\n    assert(specialFilter([9, 11, 13, 15, 17, 19, 21, 23,\
    \ 25, 27]) == 9);\n    assert(specialFilter([32, -11, -5, 9, -21, 13, 13]) ==\
    \ 3);\n    assert(specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) ==\
    \ 0);\n    assert(specialFilter([-9, -11, -13, -15, -17, -19, -21, -23, -25, -27])\
    \ == 0);\n    assert(specialFilter([-32, 11, 5, -9, 21, -13, -13]) == 2);\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfx7prbme.d(24): Error: cannot implicitly convert expression `a`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpfx7prbme.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n     long oCount = 0;\n     long nCount = 0;\n\
    \     long n = 0;\n     long o = 0;\n     long start = 0;\n     long end = 0;\n\
    \     \n     foreach(n; nums)\n     {\n         if(n > 10)\n         {\n     \
    \        start = n;\n             while(start > 0)\n             {\n         \
    \        start = start / 10;\n                 o++;\n             }\n        \
    \     o--;\n             end = n % 10;\n             if(start % 2 != 0 && end\
    \ % 2 != 0)\n             {\n                 oCount++;\n             }\n    \
    \     }\n     }\n     \n     return oCount;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpioeo8mny.d(21): Error: variable `n` is shadowing variable `tmpioeo8mny.specialFilter.n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpioeo8mny.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count=0;\n    foreach(num;nums)\n \
    \   {\n        if((num>10)&&(nums[0]%2!=0)&&(nums[$-1]%2!=0))\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphxld9o4o.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282d5]\\n??:? void tmphxld9o4o.__unittest_L24_C1()\
    \ [0x427e8e]\\n??:? void tmphxld9o4o.__modtest() [0x428054]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c333]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430359]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b19d]\\n??:? runModuleUnitTests [0x42c109]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428798]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42871f]\\n??:? _d_run_main [0x42868a]\\n??:? main [0x428067]\\\
    n??:? __libc_start_main [0xd9b53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14,\
    \ -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n*/\nlong\
    \ specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(long elem;\
    \ nums)\n    {\n        if(isOdd(elem) && isOdd(firstDigit(elem)) && isOdd(lastDigit(elem))\
    \ && elem > 10)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxfifhpg.d(17): Error: undefined identifier `isOdd`\\n/tmp/tmpuxfifhpg.d(17):\
    \ Error: undefined identifier `isOdd`\\n/tmp/tmpuxfifhpg.d(17): Error: undefined\
    \ identifier `isOdd`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxfifhpg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
