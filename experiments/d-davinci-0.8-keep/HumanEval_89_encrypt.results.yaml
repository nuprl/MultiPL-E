name: HumanEval_89_encrypt
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .dup;\n    int shift = 2 * 2;\n    alphabet = alphabet[shift..$] ~ alphabet[0..shift];\n\
    \    // alphabet = [1,2,3,4,5,6]\n    auto i = s.length;\n    // auto is the same\
    \ as auto i = s.length;\n    auto ia = alphabet.length;\n    // auto is the same\
    \ as auto ia = alphabet.length;\n    string result = \"\";\n    while (i--)\n\
    \    {\n        // result ~= alphabet[s[i].to!int - 'a'.to!int];\n        result\
    \ ~= alphabet[(cast(int)s[i]) - (cast(int)'a')];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx4w4qnkv.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428d49]\\n??:? void tmpx4w4qnkv.__unittest_L33_C1()\
    \ [0x427d86]\\n??:? void tmpx4w4qnkv.__modtest() [0x4281ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e103]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428bce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42afc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b050]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42af4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ba5]\\n??:? runModuleUnitTests [0x42ded9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429260]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4291e7]\\n??:? _d_run_main [0x429152]\\n??:? main [0x4281bf]\\\
    n??:? __libc_start_main [0x14c1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n\t//The alphabet should be rotated in\
    \ a manner such that the letters \n\t//shift down by two multiplied to two places.\n\
    \tint shift = 4;\n\tstring result;\n\tfor(int i = 0; i < s.length; i++)\n\t{\n\
    \t\tint ascii = s[i];\n\t\t//If the ascii code is in the range of lowercase a-z\n\
    \t\tif(ascii >= 97 && ascii <= 122)\n\t\t{\n\t\t\t//if the ascii code is close\
    \ to the right edge of the alphabet\n\t\t\tif(ascii > 122 - shift)\n\t\t\t{\n\t\
    \t\t\t//instead of finding the ascii code of the character by adding the shift\n\
    \t\t\t\t//just find the ascii code of the character by modding the shift by the\
    \ length of the lowercase alphabet\n\t\t\t\tascii = 97 + mod(ascii + shift, 122);\n\
    \t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tascii += shift;\n\t\t\t}\n\t\t}\n\t\t//If\
    \ the ascii code is in the range of lowercase A-Z\n\t\telse if(ascii >= 65 &&\
    \ ascii <= 90)\n\t\t{\n\t\t\t//if the ascii code is close to the right edge of\
    \ the alphabet\n\t\t\tif(ascii > 90 - shift)\n\t\t\t{\n\t\t\t\t//instead of finding\
    \ the ascii code of the character by adding the shift\n\t\t\t\t//just find the\
    \ ascii code of the character by modding the shift by the length of the uppercase\
    \ alphabet\n\t\t\t\tascii = 65 + mod(ascii + shift, 90);\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\tascii += shift;\n\t\t\t}\n\t\t}\n\t\tresult ~= cast(char)ascii;\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0833437.d(32): Error: undefined identifier `mod`, did you mean\
    \ function `fmod`?\\n/tmp/tmpe0833437.d(47): Error: undefined identifier `mod`,\
    \ did you mean function `fmod`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe0833437.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    auto ret = new string();\n    auto\
    \ shift = 2 * 2;\n    foreach(c; s)\n    {\n        char newChar = (cast(char)(c\
    \ + shift));\n        ret ~= newChar;\n    }\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6fkp53j.d(17): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpu6fkp53j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    size_t len = s.length;\n    string\
    \ result;\n    result.length = len;\n    foreach( i, e; s)\n    {\n        auto\
    \ index = i;\n        auto val = e;\n        result[index] = cast(char)(val +\
    \ 2*2);\n    }\n    return result;\n}\n/*\nCreate a function decrypt that takes\
    \ a string as an argument and \n    returns a string decrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift up by two multiplied to two places.\n    For example:\n\
    \    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n\
    \    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string\
    \ s) \n{\n    return encrypt(s);\n}\n/*\nCreate a function getDiff that takes\
    \ two strings as an argument and \n    returns the number of characters that differ\
    \ from one another. \n    For example:\n    getDiff('ab', 'ac') returns 1\n  \
    \  getDiff('ab', 'ab') returns 0\n    getDiff('ab', 'ae') returns 2\n    getDiff('ae',\
    \ 'ab') returns 2\n*/\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7n4h0gvc.d(24): Error: cannot modify `immutable` expression `result[index]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7n4h0gvc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string r;\n    r.length = s.length;\n\
    \    int len = s.length;\n    for (int i = 0; i < len; i++)\n    {\n        if\
    \ (s[i] == 'a' || s[i] == 'A')\n            r[i] = 'c';\n        else if (s[i]\
    \ == 'b' || s[i] == 'B')\n            r[i] = 'd';\n        else if (s[i] == 'c'\
    \ || s[i] == 'C')\n            r[i] = 'e';\n        else if (s[i] == 'd' || s[i]\
    \ == 'D')\n            r[i] = 'f';\n        else if (s[i] == 'e' || s[i] == 'E')\n\
    \            r[i] = 'g';\n        else if (s[i] == 'f' || s[i] == 'F')\n     \
    \       r[i] = 'h';\n        else if (s[i] == 'g' || s[i] == 'G')\n          \
    \  r[i] = 'i';\n        else if (s[i] == 'h' || s[i] == 'H')\n            r[i]\
    \ = 'j';\n        else if (s[i] == 'i' || s[i] == 'I')\n            r[i] = 'k';\n\
    \        else if (s[i] == 'j' || s[i] == 'J')\n            r[i] = 'l';\n     \
    \   else if (s[i] == 'k' || s[i] == 'K')\n            r[i] = 'm';\n        else\
    \ if (s[i] == 'l' || s[i] == 'L')\n            r[i] = 'n';\n        else if (s[i]\
    \ == 'm' || s[i] == 'M')\n            r[i] = 'o';\n        else if (s[i] == 'n'\
    \ || s[i] == 'N')\n            r[i] = 'p';\n        else if (s[i] == 'o' || s[i]\
    \ == 'O\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpentf65it.d(50): Error: unterminated character constant\\n/tmp/tmpentf65it.d(51):\
    \ Error: found `unittest` when expecting `)`\\n/tmp/tmpentf65it.d(64): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpentf65it.d(64):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpentf65it.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string text = s;\n    string encrypted\
    \ = \"\";\n    foreach(char c; text)\n    {\n        int x = c;\n        x = ((x\
    \ - 'a') + 2*2) % 26 + 'a';\n        encrypted ~= x;\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string str = \"\";\n    for(int i = 0; i < s.length; i++)\n    {\n    \
    \    for(int j = 0; j < alphabet.length; j++)\n        {\n            if(s[i]\
    \ == alphabet[j])\n            {\n                int temp = j;\n            \
    \    temp += 2;\n                temp *= 2;\n                temp = temp % 26;\n\
    \                str ~= alphabet[temp];\n            }\n        }\n    }\n   \
    \ return str;\n}\n/* \nCreate a function decrypt that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being unrotated. \n  \
    \  The alphabet should be unrotated in a manner such that the letters \n    shift\
    \ up by two divided by two places.\n    For example:\n    decrypt('lm') returns\
    \ 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns\
    \ 'gf'\n    decrypt('ix') returns 'et'\n    \n*/\nstring decrypt(string s) \n\
    {\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string str = \"\"\
    ;\n    for(int i = 0; i < s.length; i++)\n    {\n        for(int j = 0; j < alphabet.length;\
    \ j++)\n        {\n            if(s[i] == alphabet[j])\n            {\n      \
    \          int temp = j;\n                temp -= 2;\n                temp /=\
    \ 2;\n                if(temp < 0)\n                {\n                    temp\
    \ = 26 - abs(temp);\n                }\n                str ~= alphabet[temp];\n\
    \            }\n        }\n    }\n    return str;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp14nduwai.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42830d]\\n??:? void tmp14nduwai.__unittest_L70_C1()\
    \ [0x427dbe]\\n??:? void tmp14nduwai.__modtest() [0x428090]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca17]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b926]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430289]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b8fd]\\n??:? runModuleUnitTests [0x42c7ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428757]\\n??:? _d_run_main [0x4286c2]\\n??:? main [0x4280a3]\\\
    n??:? __libc_start_main [0x65c1c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    immutable alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    immutable newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n    string encryptedString\
    \ = \"\";\n    foreach(immutable char c; s)\n    {\n        immutable index =\
    \ alphabet.indexOf(c);\n        immutable encryptedChar = newAlphabet[index];\n\
    \        encryptedString ~= encryptedChar;\n    }\n    return encryptedString;\n\
    }\n// Create a function decrypt that takes a string as an argument and returns\
    \ a string\n// decrypted using the same rules from the encrypt function. \n//\
    \ For example:\n// decrypt('lm') returns 'hi'\n// decrypt('ewhjklnop') returns\
    \ 'asdfghjkl'\n// decrypt('kj') returns 'gf'\n// decrypt('ix') returns 'et'\n\
    string decrypt(string s)\n{\n    immutable alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    immutable newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n    string decryptedString\
    \ = \"\";\n    foreach(immutable char c; s)\n    {\n        immutable index =\
    \ newAlphabet.indexOf(c);\n        immutable decryptedChar = alphabet[index];\n\
    \        decryptedString ~= decryptedChar;\n    }\n    return decryptedString;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzkz79yao.d(22): Error: no property `indexOf` for type `immutable(string)`\\\
    n/tmp/tmpzkz79yao.d(42): Error: no property `indexOf` for type `immutable(string)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkz79yao.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    int upper = \"A\".ord;\n    int lower\
    \ = \"a\".ord;\n    enum max_upper = \"Z\".ord;\n    enum max_lower = \"z\".ord;\n\
    \    string t;\n    foreach(c; s)\n    {\n        int offset = c.ord;\n      \
    \  if(offset >= upper && offset <= max_upper)\n        {\n            int newOffset\
    \ = offset + 2 * 2;\n            if(newOffset > max_upper)\n            {\n  \
    \              newOffset = newOffset - max_upper + upper - 1;\n            }\n\
    \            t ~= newOffset.chr;\n        }\n        else if(offset >= lower &&\
    \ offset <= max_lower)\n        {\n            int newOffset = offset + 2 * 2;\n\
    \            if(newOffset > max_lower)\n            {\n                newOffset\
    \ = newOffset - max_lower + lower - 1;\n            }\n            t ~= newOffset.chr;\n\
    \        }\n        else \n        {\n            t ~= c;\n        }\n    }\n\
    \    return t;\n}\n/*\nCreate a function decrypt that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n    decrypt('lm') returns\
    \ 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns\
    \ 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string s) \n{\n   \
    \ int upper = \"A\".ord;\n    int lower = \"a\".ord;\n    enum max_upper = \"\
    Z\".ord;\n    enum max_lower = \"z\".ord;\n    string t;\n    foreach(c; s)\n\
    \    {\n        int offset = c.ord;\n        if(offset >= upper && offset <= max_upper)\n\
    \        {\n            int newOffset = offset - 2 * 2;\n            if(newOffset\
    \ < upper)\n            {\n                newOffset = max_upper - (upper - newOffset)\
    \ + 1;\n            }\n            t ~=\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7v4ddl76.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmp7v4ddl76.d(80): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp7v4ddl76.d(92): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7v4ddl76.d(92): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7v4ddl76.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    static int i = 0;\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq1ibfl1f.d(18): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1ibfl1f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret;\n    for(int i = 0; i\
    \ < s.length; i++)\n    {\n        ret ~= dchar(s[i] + 2*2);\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8lveybu.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428125]\\n??:? void tmpz8lveybu.__unittest_L24_C1()\
    \ [0x427d12]\\n??:? void tmpz8lveybu.__modtest() [0x427ea4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c137]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b046]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43015d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43060c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4300e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b01d]\\n??:? runModuleUnitTests [0x42bf0d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856f]\\n??:? _d_run_main [0x4284da]\\n??:? main [0x427eb7]\\\
    n??:? __libc_start_main [0xdc9dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    // complete the function\n    //\
    \ it is the function signature\n    string result;\n    foreach(e; s)\n    {\n\
    \        if (e >= 'a' && e <= 'z')\n        {\n            result ~= ((e - 'a'\
    \ + 2) % 26) + 'a';\n        }\n        else if (e >= 'A' && e <= 'Z')\n     \
    \   {\n            result ~= ((e - 'A' + 2) % 26) + 'A';\n        }\n        else\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw_73l8l9.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpw_73l8l9.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmpw_73l8l9.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c7c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430558]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430035]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6a9]\\n??:? runModuleUnitTests [0x42c599]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x9b8a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    // YOUR CODE HERE\n    char[] result=new\
    \ char[s.length];\n    int shift=2;\n    char[] alphabet=\"abcdefghijklmnopqrstuvwxyz\"\
    .dup;\n    foreach(i,c;s)\n    {\n        int idx=cast(int)c;\n        if(idx>='a'\
    \ && idx<='z')\n        {\n            idx=(idx+2*shift-'a')%26+'a';\n       \
    \ }\n        else if(idx>='A' && idx<='Z')\n        {\n            idx=(idx+2*shift-'A')%26+'A';\n\
    \        }\n        result[i]=idx;\n    }\n    return result.idup;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp939y0pmw.d(32): Error: cannot implicitly convert expression `idx`\
    \ of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp939y0pmw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    size_t len = s.length;\n    string ret;\n    ret.length = len;\n    for\
    \ (int i = 0; i < len; i++)\n    {\n        string letter = s[i..i+1];\n     \
    \   int pos = alphabet.find(letter);\n        pos = (pos+2*2)%26;\n        ret[i..i+1]\
    \ = alphabet[pos..pos+1];\n    }\n    return ret;\n}\n \n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n\
    \    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string\
    \ s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    size_t len\
    \ = s.length;\n    string ret;\n    ret.length = len;\n    for (int i = 0; i <\
    \ len; i++)\n    {\n        string letter = s[i..i+1];\n        int pos = alphabet.find(letter);\n\
    \        pos = (pos-2*2+26)%26;\n        ret[i..i+1] = alphabet[pos..pos+1];\n\
    \    }\n    return ret;\n}\n/*\nCreate a function encode that takes a string as\
    \ an argument and \n    returns a string encrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift down by two multiplied to four places.\n    For example:\n    encode('hi')\
    \ returns 'pn'\n    encode('asdfghjkl') returns 'iqupwbnqr'\n    encode('gf')\
    \ returns 'qj'\n    encode('et') returns 'qx'\n*/\nstring encode(string s) \n\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbmt90maj.d(70): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbmt90maj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    import std.stdio;\n    import std.math;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.typecons;\n    int offset = 2 * 2;\n    char[] a = s.dup;\n    foreach(i,\
    \ ref c; a) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n          \
    \  c = cast(char)('a' + ((c - 'a' + offset) % 26));\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z') \n        {\n            c = cast(char)('A' + ((c - 'A'\
    \ + offset) % 26));\n        }\n    }\n    return a.idup;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n\
    \    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    Note that\
    \ this function should take the same arguments and \n    return the same values\
    \ as the encrypt function.\n*/\nstring decrypt(string s) \n{\n    import std.stdio;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.typecons;\n    int offset = 2 * 2;\n    char[] a\
    \ = s.dup;\n    foreach(i, ref c; a) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            c = cast(char)('a' + ((c - 'a' - offset) % 26));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            c =\
    \ cast(char)('A' + ((c - 'A' - offset) % 26));\n        }\n    }\n\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0c_layd.d(73): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0c_layd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    // Encrypt string\n    string result;\n\
    \    size_t len = s.length;\n    for (size_t i = 0; i < len; i++)\n    {\n   \
    \     result ~= s[i] + 2*2;\n    }\n    return result;\n}\n \n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n\
    \    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string\
    \ s) \n{\n    // Decrypt string\n    string result;\n    size_t len = s.length;\n\
    \    for (size_t i = 0; i < len; i++)\n    {\n        result ~= s[i] - 2*2;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnu4tl34a.d(57): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281f5]\\n??:? void tmpnu4tl34a.__unittest_L49_C1()\
    \ [0x427de6]\\n??:? void tmpnu4tl34a.__modtest() [0x427f78]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b116]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ed]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286b8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42863f]\\n??:? _d_run_main [0x4285aa]\\n??:? main [0x427f8b]\\\
    n??:? __libc_start_main [0x9c304554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    int len = s.length;\n    int charNum;\n\
    \    string encrypted = \"\";\n    char c;\n    for (int i = 0; i < len; i++)\n\
    \    {\n        charNum = s[i];\n        if (charNum >= 97 && charNum <= 101)\n\
    \        {\n            c = (cast(char)(charNum + 20));\n        }\n        else\
    \ if (charNum >= 102 && charNum <= 122)\n        {\n            c = (cast(char)(charNum\
    \ - 4));\n        }\n        else\n        {\n            c = s[i];\n        }\n\
    \        encrypted = encrypted ~ c;\n    }\n    return encrypted;\n}\n/*\nWrite\
    \ a function that takes a string and returns a string \nthat has all the odd indices\
    \ in lowercase and even indices in uppercase.\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmu53dk4p.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmu53dk4p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    return rotate(s, 2*2);\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82lz8fs2.d(17): Error: undefined identifier `rotate`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82lz8fs2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{ \n    string ret;\n    foreach(c; s)\n\
    \    {\n        ret ~= (cast(char)(c)+2)%26;\n    }\n    return ret;\n} \n \n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi0xqfguq.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42808d]\\n??:? void tmpi0xqfguq.__unittest_L25_C1()\
    \ [0x427b4e]\\n??:? void tmpi0xqfguq.__modtest() [0x427e0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c723]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b632]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430009]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b609]\\n??:? runModuleUnitTests [0x42c4f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428463]\\n??:? _d_run_main [0x4283ce]\\n??:? main [0x427e1f]\\\
    n??:? __libc_start_main [0x3c1f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n  char[] letters = s.dup;\n  foreach(i,\
    \ ref c; letters)\n  {\n    char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".dup;\n\
    \    c = alphabet[(alphabet.indexOf(c)+4)%alphabet.length];\n  }\n  return letters.idup;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzjad1d9x.d(21): Error: no property `indexOf` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjad1d9x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
