name: HumanEval_77_iscube
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes\
  \ an integer a and returns True \n    if this ingeger is a cube of some integer\
  \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
  \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64)\
  \ ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \n*/\nbool iscube(long\
  \ a) \n"
tests: "unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) ==\
  \ true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n\
  \    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
  \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L)\
  \ == false);\n}\nvoid main(){}"
completions: ["{\n    return a == cast(long)pow(abs(a), 1.0/3.0);\n}", "{\n    //\
    \ Do not use loop:\n    // for(auto i = 1; i < a; i++)\n    //     if(i * i *\
    \ i == a)\n    //         return true;\n    // return false;\n    //\n    return\
    \ a >= 0 && sqrt(sqrt(a)) == sqrt(sqrt(a)).to!int;\n}", "{\n    int eps = 1e-10;\n\
    \    if (a == 0) return true;\n    return abs(pow(a, 1.0 / 3) - rint(pow(a, 1.0\
    \ / 3))) < eps;\n}", "{\n    return (int)log(abs(a))%3 == 0;\n}", "{\n\treturn\
    \ (a>=0) && (pow(round(pow(a, 1/3.)), 3) == a);\n}", "{\n    return is(typeof(cube(a)));\n\
    }", "{\n    if (a < 0) a = -a;\n    long x = (long) pow(a, 1.0/3.0);\n    long\
    \ x3 = x * x * x;\n    return a == x3;\n}", "{\n    return a != 0 && (abs(a) ==\
    \ (int)pow(ceil(pow(abs(a), 1.0/3.0)), 3.0));\n}", "{\n    foreach(i; 0 .. 1000000)\n\
    \    {\n        if (i*i*i == a)\n            return true;\n    }\n    return false;\n\
    }", "{\n    return a == pow(round(pow(a, 1.0 / 3.0)), 3);\n}\n/*\n    Write a\
    \ function that takes an array of arrays as a parameter \n    and returns the\
    \ maximum value found in any of the arrays. \n    (In this case, it\u2019s not\
    \ required that the maximum value \n    occurs only once in one of the arrays.)\
    \ \n    Your function should return Nil if the input is empty.\n    Examples:\n\
    \    findmax( [[1, 2, 3], [4, -5, 6], [7, 8, 9]] ) ==> 9\n    findmax( [[17, 23,\
    \ 25, 12], [25, 7, 36, -10, -2]] ) ==> 36\n    findmax( [[17], [5, -11, 14, -5],\
    \ [100, 4, -19]] ) ==> 100\n    findmax( [[17, -21], [5, 11, -14, 5], []] ) ==>\
    \ 17\n    findmax( [[]] ) ==> Nil\n*/\nlong findmax(long[][] arrays)\n{\n    static\
    \ if(arrays.length)\n    {\n        long max = arrays[0][0];\n        foreach(array;\
    \ arrays)\n        {\n            foreach(el; array)\n            {\n        \
    \        if(el > max)\n                {\n                    max = el;\n    \
    \            }\n            }\n        }\n        return max;\n    }\n    else\
    \ return 0;\n}\n/*\n    Write a function that takes an array as a parameter \n\
    \    and returns the array with all duplicates removed. \n    For example, if\
    \ the input array contains the values [1, 3, 3, 7, 2, 1, 2, 7, 9], \n    the output\
    \ should be [1, 3, 7, 2, 9].\n    Examples:\n    uniquify( [1, 3, 3, 7, 2, 1,\
    \ 2, 7, 9] ) ==> [1, 3, 7, 2, 9]\n    uniquify( [1, 1, 1, 1, 2, 2, 2, 2, 3, 3,\
    \ 3, 3] ) ==> [1, 2, 3]\n    uniquify( [1", "{\n    if (a < 0)\n        a = -a;\n\
    \    return cast(int)cbrt(a) == cbrt(a);\n}", "{\n    long x = static_cast&lt;long&gt;(pow(a,\
    \ 1.0/3.0));\n    if (pow(x, 3) == a)\n        return true;\n    else\n      \
    \  return false;\n}", "{\n    return cast(long)log(a)%3 == 0;\n}", "{\n    long\
    \ b = (long) std.math.pow(a, 1.0 / 3.0);\n    return b * b * b == a;\n}", "{\n\
    \    // your code here\n}", "{\n    return a >= 0 && a == pow(cast(long)(pow(a,\
    \ 1.0/3.0)), 3);\n}", "{\n\tif (a == 0) return true;\n\tif (a == 1) return true;\n\
    \tif (a == -1) return true;\n\tif (abs(a) >= 3) return (int)pow(a, 1/3.0) == pow(a,\
    \ 1/3.0);\n\treturn false;\n}", "{\n    return is(typeof(a == cast(long)pow(a,\
    \ 1.0/3.0)));\n}", "{\n    return a == 0 || sign(a) == sign(pow(floor(pow(a,1./3)),3));\n\
    }", "{\n    if (a > 0)\n    {\n        long result = pow(a, 1.0 / 3.0);\n    \
    \    return pow(result, 3) == a;\n    }\n    else if (a < 0)\n    {\n        return\
    \ iscube(-a);\n    }\n    else\n    {\n        return true;\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
