name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n    sides form a right-angled\
  \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
  \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
  \ a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    return isPythagoreanTriplet(a, b, c);\n}", "{\n    auto const\
    \ s = [](long a, long b, long c) \n    {\n        return (a * a) + (b * b) ==\
    \ (c * c);\n    };\n    return s(a, b, c) || s(a, c, b) || s(b, c, a);\n}", "{\n\
    \    return a*a + b*b == c*c;\n}", "{\n    enum right = 90;\n    // this problem\
    \ it's not use the inner logic, \n    // just use the Math.Sin, Cos and Tan.\n\
    \    return 90 == abs(max(a, b, c) - min(a, b, c)) * 90;\n}", "{\n    //algorithm:\n\
    \    //    find the hypotenuse, set it to a, s.t. a^2 >= b^2 + c^2\n    //   \
    \ if the equation holds, return true;\n    long h = a, s = b, t = c;\n    sort(\
    \ [h, s, t] );\n    return h * h == s * s + t * t;\n}", "{\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0)\n        return false;\n    long x = max(a, max(b, c));\n\
    \    long z = min(a, min(b, c));\n    long y = a + b + c - x - z;\n    return\
    \ x * x == y * y + z * z;\n}", "{\n    return pow(a, 2) + pow(b, 2) == pow(c,\
    \ 2);\n}", "{\n    return (a > 0) && (b > 0) && (c > 0) && (a*a + b*b == c*c);\n\
    }", "{\n  // @TODO\n  long[] sides = [a, b, c];\n  auto ordered = sort(sides);\n\
    \  long a = ordered[0];\n  long b = ordered[1];\n  long c = ordered[2];\n  if\
    \ (a <= 0 || b <= 0 || c <= 0) return false;\n  return (a * a + b * b == c * c);\n\
    }", "{\n    if(a < b)\n        swap(a, b);\n    if(a < c)\n        swap(a, c);\n\
    \    if(c*c + b*b == a*a)\n        return true;\n    return false;\n}", "{\n \
    \   bool is_right_triangle = false;\n    double[] sides = [a, b, c];\n    sort(sides);\n\
    \    is_right_triangle = pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n    return is_right_triangle;\n}", "{\n    auto triangle = tuple(a, b,\
    \ c);\n    std.algorithm.sort(triangle);\n    auto aa = triangle[0];\n    auto\
    \ bb = triangle[1];\n    auto cc = triangle[2];\n    return aa * aa + bb * bb\
    \ == cc * cc;\n}", "{\n    import std.math : sqrt;\n    static assert(isFloatingPoint!(long)\
    \ == false);\n    a = a.abs;\n    b = b.abs;\n    c = c.abs;\n    if (a > b &&\
    \ a > c)\n    {\n        return a.sqrt == (b.sqrt + c.sqrt);\n    }\n    else\
    \ if (b > a && b > c)\n    {\n        return b.sqrt == (a.sqrt + c.sqrt);\n  \
    \  }\n    else\n    {\n        return c.sqrt == (a.sqrt + b.sqrt);\n    }\n}",
  "{\n    enum right_triangle_angles : size_t { right_angle = 90 };\n    auto sides\
    \ = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto hyp = max_side\
    \ * max_side;\n    sides.remove(max_side);\n    return right_triangle_angles.right_angle\
    \ == \n        degrees(acos(hyp / (sides[0] * sides[1])));\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  double sq(double val) pure nothrow @safe\n    {\n        return val * val;\n\
    \    }\n    return (sq(a) + sq(b) == sq(c)) || (sq(a) + sq(c) == sq(b)) || (sq(b)\
    \ + sq(c) == sq(a));\n}", "{\n    int [long] sides;\n    sides.length = 3;\n \
    \   sides[0] = a;\n    sides[1] = b;\n    sides[2] = c;\n    // If a square of\
    \ one side is equal to the squares of the other two sides\n    // then the triangle\
    \ is a right angle triangle.\n    // http://www.mathsisfun.com/triangle.html\n\
    \    // From pythagorean theorem:\n    // c^2 = a^2 + b^2\n    // Which can be\
    \ rearranged to:\n    // c^2 - a^2 - b^2 = 0\n    long a2 = a*a;\n    long b2\
    \ = b*b;\n    long c2 = c*c;\n    if (c2 - a2 - b2 == 0)\n        return true;\n\
    \    else\n        return false;\n}", "{\n    enum option!int triOption = (a,\
    \ b, c);\n    switch(triOption)\n    {\n        case option.some(var aTuple):\n\
    \            bool aSq = aTuple[0] * aTuple[0];\n            bool bSq = aTuple[1]\
    \ * aTuple[1];\n            bool cSq = aTuple[2] * aTuple[2];\n            if\
    \ (aSq + bSq == cSq)\n            {\n                return true;\n          \
    \  }\n            else if (aSq + cSq == bSq)\n            {\n                return\
    \ true;\n            }\n            else if (bSq + cSq == aSq)\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        case option.none:\n   \
    \         return false;\n    }\n}", "{\n    bool res = false;\n    long[] tri\
    \ = {a, b, c};\n    tri.sort;\n    if (tri[0] * tri[0] + tri[1] * tri[1] == tri[2]\
    \ * tri[2]) \n    {\n        res = true;\n    }\n    return res;\n}", "{\n   \
    \ // Step 1: sort the sides\n    //auto [a, b, c] = tuple(a, b, c).sort();\n \
    \   auto sides = tuple(a, b, c).sort();\n    a = sides[0];\n    b = sides[1];\n\
    \    c = sides[2];\n    // Step 2: Check if pythagoras theorem holds good\n  \
    \  //return (a * a + b * b == c * c);\n    long powA = pow(a, 2);\n    long powB\
    \ = pow(b, 2);\n    long powC = pow(c, 2);\n    return (powA + powB == powC);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
