name: HumanEval_138_is_equal_to_sum_even
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given number\
  \ n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
  \    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n  \
  \  is_equal_to_sum_even(8) == True\n    \n*/\nbool is_equal_to_sum_even(long n)\
  \ \n"
tests: "unittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L)\
  \ == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n\
  \    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n   \
  \ assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L)\
  \ == true);\n}\nvoid main(){}"
completions: ["{\n  auto solution = sum(iota(4L).map!(a => a * 2));\n  return solution\
    \ == n;\n}", "{\n  import std.algorithm: map, filter, reduce;\n  import std.range:\
    \ iota;\n  import std.conv: to;\n  import std.array: array;\n  import std.math:\
    \ sqrt;\n  auto nums = iota(1, (int)sqrt(n) + 1);\n  auto divs = filter!(a =>\
    \ n % a == 0)(nums);\n  return map!(to!long)(divs).array.join.reduce!q{a+b} ==\
    \ n && divs.length == 4;\n}", "{\n    if (n % 2 != 0) return false;\n    if (n\
    \ == 2 || n == 0) return false;\n    if (n == 4) return true;\n    return is_equal_to_sum_even(n-2);\n\
    }", "{\n    if (n % 2)\n        return false;\n    auto sr = sqrt(n);\n    return\
    \ sr == long(sr);\n}", "{\n    int c = 0;\n    int i = 0;\n    while(n != 0)\n\
    \    {\n        c = n % 2;\n        n = n / 2;\n        if(c == 1)\n        {\n\
    \            i++;\n        }\n    }\n    if(i == 4)\n    {\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}", "{\n    //if(n == 0)\
    \ return false;\n    //if(n == 2) return false;\n    //if(n % 2 != 0) return false;\n\
    \    if(n % 2 != 0 || n == 0 || n == 2) return false;\n    return true;\n    /*int\
    \ result = 0;\n    bool ok = false;\n    for(int i = 0; i < n; i++)\n    {\n \
    \       for(int j = 0; j < n; j++)\n        {\n            for(int k = 0; k <\
    \ n; k++)\n            {\n                for(int l = 0; l < n; l++)\n       \
    \         {\n                    if(i + j + k + l == n) ok = true;\n         \
    \       }\n            }\n        }\n    }\n    return ok;*/\n}", "{\n    return\
    \ n == 4 ? false : (n % 2 == 0) && (n % 4 != 0);\n}", "{\n    int count = 4;\n\
    \    bool result = false;\n    long x = 0;\n    while(x <= n && count > 0)\n \
    \   {\n        if(n % 2 == 0)\n        {\n            n = n - x;\n           \
    \ x = x + 2;\n            count = count - 1;\n        }\n        else\n      \
    \  {\n            x = x + 2;\n        }\n    }\n    if(n == 0)\n    {\n      \
    \  result = true;\n    }\n    return result;\n}", "{\n    for (int i = 1; i <\
    \ n / 2; i++)\n    {\n        for (int j = 1; j < n / 2; j++)\n        {\n   \
    \         for (int k = 1; k < n / 2; k++)\n            {\n                for\
    \ (int l = 1; l < n / 2; l++)\n                {\n                    if (n ==\
    \ i + j + k + l && (i % 2 == 0) && (j % 2 == 0) && (k % 2 == 0) && (l % 2 == 0))\n\
    \                    {\n                        return true;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    //consider every combination of 4 numbers\n    for(long a = 0; a <=\
    \ n; a++)\n    {\n        for(long b = 0; b <= n - a; b++)\n        {\n      \
    \      for(long c = 0; c <= n - a - b; c++)\n            {\n                for(long\
    \ d = 0; d <= n - a - b - c; d++)\n                {\n                    if(a\
    \ + b + c + d == n && isEven!a && isEven!b && isEven!c && isEven!d)\n        \
    \            {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    auto even_numbers = filter!(a => a % 2 == 0)(iota(n / 2));\n    foreach(a;\
    \ even_numbers)\n    {\n        long n_copy = n - a;\n        foreach(b; even_numbers)\n\
    \        {\n            long n_copy2 = n_copy - b;\n            foreach(c; even_numbers)\n\
    \            {\n                long n_copy3 = n_copy2 - c;\n                foreach(d;\
    \ even_numbers)\n                {\n                    if (n_copy3 - d == 0)\n\
    \                        return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;\n}", "{\n    long end = n / 2 + 1;\n    for (long\
    \ i = 0; i < end; i++)\n    {\n        for (long j = 0; j < end; j++)\n      \
    \  {\n            for (long k = 0; k < end; k++)\n            {\n            \
    \    for (long m = 0; m < end; m++)\n                {\n                    if\
    \ (i + j + k + m == n && i.is_even && j.is_even && k.is_even && m.is_even)\n \
    \                   {\n                        return true;\n                \
    \    }\n                }\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    long sum = 0;\n    foreach(i; 0 .. 32)\n    {\n        long powerOfTwo\
    \ = power(2, i);\n        if(n < sum + 4 * powerOfTwo)\n        {\n          \
    \  return false;\n        }\n        if(n == sum + 4 * powerOfTwo)\n        {\n\
    \            return true;\n        }\n        sum += powerOfTwo;\n    }\n}", "{\n\
    \    auto all_combinations = combinations(2ul, iota(n / 2ul));\n    return any!q{is_equal_to_sum_even_auxiliary(a,\
    \ n)};\n}", "{\n    auto v = new long[](4);\n    auto s = new long[](4);\n   \
    \ auto ns = new long[](4);\n    auto l = new long[](4);\n    auto ml = new long[](4);\n\
    \    int rv = 0;\n    for (long i = 0; i < 4; i++)\n    {\n        v[i] = 0;\n\
    \        s[i] = 0;\n        ns[i] = 0;\n        l[i] = 0;\n        ml[i] = 0;\n\
    \    }\n    int i = 0;\n    while(i < 4)\n    {\n        v[i] = i * 2;\n     \
    \   s[i] = i * 2 + 1;\n        ns[i] = i * 2 + 2;\n        l[i] = i * 2 + 3;\n\
    \        ml[i] = i * 2 + 4;\n        i++;\n    }\n    for (i = 0; i < 4; i++)\n\
    \    {\n        if (n == v[i])\n        {\n            rv = 1;\n            break;\n\
    \        }\n    }\n    if (rv == 0)\n    {\n        for (i = 0; i < 4; i++)\n\
    \        {\n            if (n == s[i])\n            {\n                rv = 1;\n\
    \                break;\n            }\n        }\n    }\n    if (rv == 0)\n \
    \   {\n        for (i = 0; i < 4; i++)\n        {\n            if (n == ns[i])\n\
    \            {\n                rv = 1;\n                break;\n            }\n\
    \        }\n    }\n    if (rv == 0)\n    {\n        for (i = 0; i < 4; i++)\n\
    \        {\n            if (n == l[i])\n            {\n                rv = 1;\n\
    \                break;\n            }\n        }\n    }\n    if (rv == 0)\n \
    \   {\n        for (i = 0; i < 4; i++)\n        {\n            if (n == ml[i])\n\
    \            {\n                rv = 1;\n                break;\n            }\n\
    \        }\n", "{\n    long a, b, c, d;\n    a = 2;\n    while (n % 2 == 0)\n\
    \    {\n        b = 2;\n        while (n - a % 2 == 0)\n        {\n          \
    \  c = 2;\n            while (n - a - b % 2 == 0)\n            {\n           \
    \     d = 2;\n                while (n - a - b - c % 2 == 0)\n               \
    \ {\n                    if (n - a - b - c - d == 0)\n                    {\n\
    \                        return true;\n                    }\n               \
    \     d += 2;\n                }\n                c += 2;\n            }\n   \
    \         b += 2;\n        }\n        a += 2;\n    }\n    return false;\n}\n/*\n\
    Using the alias syntax, create an alias type called Name.\nIt should be equivalent\
    \ to a tuple containing two strings: first name and surname.\n*/\nalias Name =\
    \ Tuple!(string, string);\n/*\nUsing the alias syntax, create an alias type called\
    \ Number.\nIt should be equivalent to ubyte, byte, ushort, short, uint, int, ulong,\
    \ long.\n*/\nalias Number = AliasSeq!(ubyte, byte, ushort, short, uint, int, ulong,\
    \ long);\n/*\nCreate a struct-like type called Vector3D.\nIt should contain 3\
    \ fields, x, y, z, of type int.\nDo not use the alias syntax to create the Vector3D\
    \ type.\nCreate an alias called Vector which should be equivalent to Vector3D.\n\
    */\nstruct Vector3D\n{\n    int x;\n    int y;\n    int z;\n}\nalias Vector =\
    \ Vector3D;\n/*\nWrite a function called add which takes two Vector parameters,\
    \ a and b, and\nreturns a new Vector with the components added.\nFor example,\
    \ given (1,2,3) and (4,5,6), the result should be (5,7,9).\n*/\nVector add(Vector\
    \ a, Vector b)\n{\n    return Vector(a.x + b.x, a.y + b.y, a.z + b.z);\n}\n/*\n\
    Write a function called subtract which takes two Vector parameters, a and b, and\n",
  "{\n    import std.array;\n    import std.math;\n    import std.numeric;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.algorithm;\n    static\
    \ if (is(ElementType!(Tuple!(int, int, int, int)) == int)) \n    {\n        //\
    \ Tuple!(int, int, int, int)\n        auto array = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207,", "{\n    if (n % 2 == 1)\n        return\
    \ false;\n    int count = 0;\n    for (long i = 2; i <= n/2; i += 2)\n    {\n\
    \        int subtotal = 0;\n        for (long j = i; j <= n/2; j += 2)\n     \
    \   {\n            subtotal += j;\n            if (subtotal == n)\n          \
    \  {\n                count++;\n                break;\n            }\n      \
    \      else if (subtotal > n)\n                break;\n        }\n    }\n    return\
    \ count == 4;\n}\n/*", "{\n    auto counter = tuple!(ulong, ulong, ulong, ulong)(0,\
    \ 0, 0, 0);\n    for (counter[0] = 2; counter[0] <= n; counter[0] += 2) \n   \
    \ {\n        for (counter[1] = 2; counter[1] <= n; counter[1] += 2) \n       \
    \ {\n            for (counter[2] = 2; counter[2] <= n; counter[2] += 2) \n   \
    \         {\n                for (counter[3] = 2; counter[3] <= n; counter[3]\
    \ += 2) \n                {\n                    auto s = reduce!((a, b) => a\
    \ + b)(counter);\n                    if (s == n) \n                    {\n  \
    \                      return true;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if(n == 0)\n\
    \        return false;\n    if(n % 2 != 0)\n        return false;\n    else \n\
    \    {\n        long temp = n;\n        long count = 0;\n        for(long i =\
    \ 2; i <= (n / 2) + 1; i += 2)\n        {\n            count = 0;\n          \
    \  if(temp % i == 0)\n            {\n                temp = temp / i;\n      \
    \          count++;\n                if(count == 3)\n                    return\
    \ true;\n            }\n        }\n        return false;\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
