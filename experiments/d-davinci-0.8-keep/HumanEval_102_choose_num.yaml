name: HumanEval_102_choose_num
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive\
  \ numbers x and y and returns the\n    biggest even integer number that is in the\
  \ range [x, y] inclusive. If \n    there's no such number, then the function should\
  \ return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13,\
  \ 12) = -1\n    \n*/\nlong choose_num(long x, long y) \n"
tests: "unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
  \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
  \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
  \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
  \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
completions: ["{\n    /*\n    long greatest = max(x, y);\n    long least = min(x,\
    \ y);\n    while(least <= greatest)\n    {\n        if(least % 2 == 0)\n     \
    \   {\n            return least;\n        }\n        else\n        {\n       \
    \     least += 1;\n        }\n    }\n    return -1;\n    */\n    long greatest\
    \ = max(x, y);\n    long least = min(x, y);\n    for(long i = greatest; i >= least;\
    \ i--)\n    {\n        if(i % 2 == 0)\n        {\n            return i;\n    \
    \    }\n    }\n    return -1;\n}", "{\n    if(x < 0 || y < 0) \n    {\n      \
    \  assert(0);\n    }\n    if(x > y) \n    {\n        assert(0);\n    }\n    long\
    \ result = y - (y % 2) + (y % 2 == 0 ? 0 : -1);\n    return (result >= x) ? result\
    \ : -1;\n}", "{\n    if (x > y)\n    {\n        return -1;\n    }\n    if (x %\
    \ 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return x\
    \ + 1;\n    }\n}", "{\n    long i;\n    if (x % 2 == 0)\n        i = x;\n    else\n\
    \        i = x + 1;\n    while (i < y)\n    {\n        if (i % 2 == 0)\n     \
    \       return i;\n        i += 2;\n    }\n    return -1;\n}", "{\n    if (x >\
    \ y)\n    {\n        return -1;\n    }\n    int a = x % 2;\n    int b = y % 2;\n\
    \    if (a == 1 && b == 1)\n    {\n        return -1;\n    }\n    else if (a ==\
    \ 1 && b == 0)\n    {\n        return x + 1;\n    }\n    else if (a == 0 && b\
    \ == 1)\n    {\n        return -1;\n    }\n    else if (a == 0 && b == 0)\n  \
    \  {\n        return y;\n    }\n}", "{\n    static if (is(typeof(x > y)))\n  \
    \  {\n        if(x > y) return -1;\n    }\n    else static if (is(typeof(x < y)))\n\
    \    {\n        if(x < y) return -1;\n    }\n    if(x < 2 || y < 2) return -1;\n\
    \    if(x % 2 == 0)\n    {\n        return x;\n    }\n    else return choose_num(x\
    \ + 1, y);\n}", "{\n    // This solution is just for demonstrating the use of\
    \ if-else.\n    // Please note that there is a much more efficient solution using\n\
    \    // bitwise operators.\n    if (x > y)\n        return -1;\n    if (x % 2\
    \ == 0)\n        return x;\n    if (x % 2 == 1)\n        return x + 1;\n}", "{\n\
    \    if ( x < 0 || y < 0)\n    {\n        return -1;\n    }\n    if (x > y)\n\
    \    {\n        return -1;\n    }\n    long r = (x + y) % 2 == 0 ? (x + y) / 2:\
    \ (x + y + 1) / 2;\n    return r;\n}\n/*\nThis function takes a positive number\
    \ n and returns the sum of the\n    squares of all positive numbers that are less\
    \ than n.", "{\n    if(x > y)\n    {\n        return -1;\n    }\n    else if(x\
    \ <= y)\n    {\n        int k = cast(int)max(x, y);\n        while((k % 2) !=\
    \ 0)\n        {\n            k = k - 1;\n        }\n        return k;\n    }\n\
    \    return -1;\n}", "{\n    assert(x > 0);\n    assert(y > 0);\n    long res\
    \ = -1;\n    if (x % 2 == 0)\n    {\n        res = x;\n    }\n    else if (x +\
    \ 1 <= y)\n    {\n        res = x + 1;\n    }\n    return res;\n}", "{\n    if\
    \ (x % 2 == 0)\n    {\n        return x > y ? y : x;\n    } else\n    {\n    \
    \    if (x == y)\n        {\n            return -1;\n        } else\n        {\n\
    \            return choose_num(x + 1, y);\n        }\n    }\n}", "{\n  long r\
    \ = min(x, y);\n  return r % 2 == 0 ? r : r - 1;\n}", "{\n    long z = max(x,\
    \ y);\n    long res = x <= y ? x : y;\n    while (z >= res)\n    {\n        if\
    \ (z % 2 == 0)\n            return z;\n        z--;\n    }\n    return -1;\n}",
  "{\n    long retval = -1;\n    if(x < y){\n        if(x % 2 == 0)\n            retval\
    \ = x;\n        else\n            retval = x + 1;\n    }\n    else if(x > y){\n\
    \        if(y % 2 == 0)\n            retval = y;\n        else\n            retval\
    \ = y + 1;\n    }\n    else{\n        if(x % 2 == 0)\n            retval = x;\n\
    \    }\n    return retval;\n}\n/*\nThis function takes an integer n, and returns\
    \ its square root\n    rounded to the nearest integer. If the square root of n\
    \ is not a whole\n    number, then the function should return -1.", "{\n    //\
    \ use case or if else\n    return y%2 == 0 ? y : y%2 == 1 ? choose_num(x, y-1)\
    \ : -1;\n}", "{ \n    long answer = 0;\n    int X = x % 2;\n    int Y = y % 2;\n\
    \    if(X == 0 && Y == 0)\n    {\n        return y;\n    }\n    else if(X == 1\
    \ && Y == 1)\n    {\n        long second = y-1;\n        if(second < x)\n    \
    \    {\n            return -1;\n        }\n        else\n        {\n         \
    \   return second;\n        }\n    }\n    else if(X == 1 && Y == 0)\n    {\n \
    \       long second = y-2;\n        if(second < x)\n        {\n            return\
    \ -1;\n        }\n        else\n        {\n            return second;\n      \
    \  }\n    }\n    else if(X == 0 && Y == 1)\n    {\n        long second = y-1;\n\
    \        if(second < x)\n        {\n            return -1;\n        }\n      \
    \  else\n        {\n            return second;\n        }\n    }\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    return answer;\n}", "{\n  immutable\
    \ long z = cast(long)((x + y) / 2.0);\n  if ( (z % 2 == 0) && (z >= x) && (z <=\
    \ y) )\n  {\n    return z;\n  }\n  else\n  {\n    if (x == y)\n    {\n      return\
    \ -1;\n    }\n    else\n    {\n      immutable long w = choose_num(x, z);\n  \
    \    if (w == -1)\n      {\n        return choose_num(z + 1, y);\n      }\n  \
    \    else\n      {\n        return w;\n      }\n    }\n  }\n}", "{\n    assert(x\
    \ >= 0 && y >= 0);\n    if (x > y) return -1;\n    return max(y & ~1, x & ~1);\n\
    }\n/*\n    Write a function that takes a string as input and returns that string\n\
    \    with all the 'a's replaced with the character 'z'. Note that this should\n\
    \    be done in-place.", "{\n    return typeof(x)(max(min(filter!(a => a % 2 ==\
    \ 0)([x, y])), max(filter!(a => a % 2 == 0)([x, y]))));\n}", "{\n\tlong n = 0;\n\
    \tif(x > y)\n\t{\n\t\treturn -1;\n\t}\n\telse if (x % 2 == 0)\n\t{\n\t\tn = x;\n\
    \t}\n\telse if (x % 2 != 0)\n\t{\n\t\tn = x + 1;\n\t}\n\telse if (n > y)\n\t{\n\
    \t\treturn -1;\n\t}\n\treturn n;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
