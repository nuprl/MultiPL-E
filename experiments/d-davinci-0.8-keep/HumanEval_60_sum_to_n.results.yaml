name: HumanEval_60_sum_to_n
language: d
results:
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum = 0;\n    long i = 1;\n\
    \    while (i <= n) {\n        sum += i;\n        i += 1;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) ==\
    \ 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    long s = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        s += i;\n    }\n    return s;\n}\n/*\n  sum_to_n\
    \ is a function that sums numbers from 1 to n.\n      >>> sum_to_n(30)\n     \
    \ 465\n      >>> sum_to_n(100)\n      5050\n      >>> sum_to_n(5)\n      15\n\
    \      >>> sum_to_n(10)\n      55\n      >>> sum_to_n(1)\n      1\n      \n  */\n\
    long sum_to_n_recursive(long n) \n{\n    if (n == 1) return 1;\n    return n +\
    \ sum_to_n_recursive(n - 1);\n}\n/*\n  sum_to_n is a function that sums numbers\
    \ from 1 to n.\n      >>> sum_to_n(30)\n      465\n      >>> sum_to_n(100)\n \
    \     5050\n      >>> sum_to_n(5)\n      15\n      >>> sum_to_n(10)\n      55\n\
    \      >>> sum_to_n(1)\n      1\n      \n  */\nlong sum_to_n_divide(long n) \n\
    {\n    if (n % 2 == 0) return n/2 * (n + 1);\n    return n * ((n + 1) / 2);\n\
    }\n/*\n  sum_to_n is a function that sums numbers from 1 to n.\n      >>> sum_to_n(30)\n\
    \      465\n      >>> sum_to_n(100)\n      5050\n      >>> sum_to_n(5)\n     \
    \ 15\n      >>> sum_to_n(10)\n      55\n      >>> sum_to_n(1)\n      1\n     \
    \ \n  */\nlong sum_to_n_math(long n) \n{\n    return (n * (n + 1)) / 2;\n}\n/*\n\
    \  sum_to_n is a function that sums numbers from 1 to n.\n      >>> sum_to_n(30)\n\
    \      465\n      >>> sum_to_n(100)\n      5050\nunittest\n{\n    alias candidate\
    \ = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) ==\
    \ 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx1cwzo6x.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1cwzo6x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum = 0;\n    for (long i =\
    \ 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n\
    }\n/*\nsum_totals_to_n is a function that sums numbers from 1 to n;\n    >>> sum_totals_to_n(30)\n\
    \    465\n    >>> sum_totals_to_n(100)\n    5050\n    >>> sum_totals_to_n(5)\n\
    \    15\n    >>> sum_totals_to_n(10)\n    55\n    >>> sum_totals_to_n(1)\n   \
    \ 1\n*/\nlong sum_totals_to_n(long n) \n{\n    long result = 0;\n    while (n\
    \ >= 1)\n    {\n        result += n;\n        n--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) ==\
    \ 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n\
    \    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n   long sum = 0;\n   for (long i = 1;\
    \ i <= n; i++)\n   {\n      sum += i;\n   }\n   return sum;\n}\nunittest\n{\n\
    \    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return n * (n + 1) / 2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return n*(n+1)/2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n\tif (n < 1) \n\t{\n\t\treturn 0;\n\t\
    }\n\telse \n\t{\n\t\treturn n + sum_to_n(n - 1);\n\t}\n}\nunittest\n{\n    alias\
    \ candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum = 0;\n    if (n < 1)\n\
    \        return 0;\n    sum = (n * (n + 1)) / 2;\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return (n * (n + 1)) / 2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return n*(n+1)/2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    if (n == 1) \n    {\n        return\
    \ 1;\n    }\n    else \n    {\n        return sum_to_n(n - 1) + n;\n    }\n}\n\
    unittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n\
    \    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L)\
    \ == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    if (n == 1) {\n        return 1;\n\
    \    }\n    else {\n        return n + sum_to_n(n - 1);\n    }\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    long sum;\n    sum = (n * (n + 1))\
    \ / 2;\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_to_n;\n\n \
    \   assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L)\
    \ == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) ==\
    \ 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return n * (n + 1) / 2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return n * (n + 1) / 2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return (n*(n+1))/2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n\tlong x=0;\n\tlong ny=0;\n\tfor(x=1;x<=n;x++)\n\
    \t{\n\t\tny=ny+x;\n\t}\n\treturn ny;\n}\nunittest\n{\n    alias candidate = sum_to_n;\n\
    \n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L)\
    \ == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) ==\
    \ 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n   if (n <= 1)\n   {\n      return n;\n\
    \   }\n   else\n   {\n      return n + sum_to_n(n - 1);\n   }\n}\nunittest\n{\n\
    \    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nsum_to_n is a function that sums numbers from 1\
    \ to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>>\
    \ sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n   \
    \ 1\n    \n*/\nlong sum_to_n(long n) \n{\n    return n*(n+1)/2;\n}\nunittest\n\
    {\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L)\
    \ == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n\
    \    assert(candidate(100L) == 5050L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
