name: HumanEval_77_iscube
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(abs(a), 1.0/3.0);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa25p3ney.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289f5]\\n??:? void tmpa25p3ney.__unittest_L21_C1()\
    \ [0x427d94]\\n??:? void tmpa25p3ney.__modtest() [0x428778]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c7c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b656]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430775]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b62d]\\n??:? runModuleUnitTests [0x42c599]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e44]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428dcb]\\n??:? _d_run_main [0x428d36]\\n??:? main [0x42878b]\\\
    n??:? __libc_start_main [0xe6b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    // Do not use loop:\n    // for(auto i =\
    \ 1; i < a; i++)\n    //     if(i * i * i == a)\n    //         return true;\n\
    \    // return false;\n    //\n    return a >= 0 && sqrt(sqrt(a)) == sqrt(sqrt(a)).to!int;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp950465xy.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp950465xy.d(25): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp950465xy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    int eps = 1e-10;\n    if (a == 0) return\
    \ true;\n    return abs(pow(a, 1.0 / 3) - rint(pow(a, 1.0 / 3))) < eps;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdhpqcjwe.d(19): Error: cannot implicitly convert expression `1e-10`\
    \ of type `double` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdhpqcjwe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return (int)log(abs(a))%3 == 0;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3w0hcctm.d(19): Error: C style cast illegal, use `cast(int)log(abs(a))`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3w0hcctm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n\treturn (a>=0) && (pow(round(pow(a, 1/3.)),\
    \ 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8b7pwca3.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a5d]\\n??:? void tmp8b7pwca3.__unittest_L21_C1()\
    \ [0x427e10]\\n??:? void tmp8b7pwca3.__modtest() [0x4287dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c843]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430869]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6ad]\\n??:? runModuleUnitTests [0x42c619]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e33]\\n??:? _d_run_main [0x428d9e]\\n??:? main [0x4287ef]\\\
    n??:? __libc_start_main [0xd2074554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return is(typeof(cube(a)));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxl8y3h5w.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpxl8y3h5w.__unittest_L21_C1()\
    \ [0x427a1c]\\n??:? void tmpxl8y3h5w.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0x1aa95554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    if (a < 0) a = -a;\n    long x = (long)\
    \ pow(a, 1.0/3.0);\n    long x3 = x * x * x;\n    return a == x3;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzs_baro4.d(20): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzs_baro4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a != 0 && (abs(a) == (int)pow(ceil(pow(abs(a),\
    \ 1.0/3.0)), 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_31pzuw.d(19): Error: C style cast illegal, use `cast(int)pow(ceil(pow(abs(a),\
    \ 1.00000 / 3.00000)), 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4_31pzuw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    foreach(i; 0 .. 1000000)\n    {\n      \
    \  if (i*i*i == a)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptbzqhvv4.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmptbzqhvv4.__unittest_L26_C1()\
    \ [0x427a98]\\n??:? void tmptbzqhvv4.__modtest() [0x427b44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b57]\\\
    n??:? __libc_start_main [0xbd2a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == pow(round(pow(a, 1.0 / 3.0)),\
    \ 3);\n}\n/*\n    Write a function that takes an array of arrays as a parameter\
    \ \n    and returns the maximum value found in any of the arrays. \n    (In this\
    \ case, it\u2019s not required that the maximum value \n    occurs only once in\
    \ one of the arrays.) \n    Your function should return Nil if the input is empty.\n\
    \    Examples:\n    findmax( [[1, 2, 3], [4, -5, 6], [7, 8, 9]] ) ==> 9\n    findmax(\
    \ [[17, 23, 25, 12], [25, 7, 36, -10, -2]] ) ==> 36\n    findmax( [[17], [5, -11,\
    \ 14, -5], [100, 4, -19]] ) ==> 100\n    findmax( [[17, -21], [5, 11, -14, 5],\
    \ []] ) ==> 17\n    findmax( [[]] ) ==> Nil\n*/\nlong findmax(long[][] arrays)\n\
    {\n    static if(arrays.length)\n    {\n        long max = arrays[0][0];\n   \
    \     foreach(array; arrays)\n        {\n            foreach(el; array)\n    \
    \        {\n                if(el > max)\n                {\n                \
    \    max = el;\n                }\n            }\n        }\n        return max;\n\
    \    }\n    else return 0;\n}\n/*\n    Write a function that takes an array as\
    \ a parameter \n    and returns the array with all duplicates removed. \n    For\
    \ example, if the input array contains the values [1, 3, 3, 7, 2, 1, 2, 7, 9],\
    \ \n    the output should be [1, 3, 7, 2, 9].\n    Examples:\n    uniquify( [1,\
    \ 3, 3, 7, 2, 1, 2, 7, 9] ) ==> [1, 3, 7, 2, 9]\n    uniquify( [1, 1, 1, 1, 2,\
    \ 2, 2, 2, 3, 3, 3, 3] ) ==> [1, 2, 3]\n    uniquify( [1\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpucepfzt4.d(53): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucepfzt4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n        a = -a;\n    return\
    \ cast(int)cbrt(a) == cbrt(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    long x = static_cast&lt;long&gt;(pow(a,\
    \ 1.0/3.0));\n    if (pow(x, 3) == a)\n        return true;\n    else\n      \
    \  return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp237kjsav.d(19): Error: no identifier for declarator `long`\\\
    n/tmp/tmp237kjsav.d(19): Error: found `&` instead of statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp237kjsav.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return cast(long)log(a)%3 == 0;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp48h9l26l.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmp48h9l26l.__unittest_L21_C1()\
    \ [0x427ac7]\\n??:? void tmp48h9l26l.__modtest() [0x427b94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb75]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430024]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb01]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b9]\\n??:? runModuleUnitTests [0x42b925]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427ba7]\\\
    n??:? __libc_start_main [0x5798c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    long b = (long) std.math.pow(a, 1.0 / 3.0);\n\
    \    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqm1ofabw.d(19): Error: C style cast illegal, use `cast(long)std.math.pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqm1ofabw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    // your code here\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpti54_pp7.d(17): Error: function `tmpti54_pp7.iscube` has no `return`\
    \ statement, but is expected to return a value of type `bool`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpti54_pp7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a >= 0 && a == pow(cast(long)(pow(a,\
    \ 1.0/3.0)), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpho6ckvqj.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a95]\\n??:? void tmpho6ckvqj.__unittest_L21_C1()\
    \ [0x427db0]\\n??:? void tmpho6ckvqj.__modtest() [0x428814]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c863]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430889]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d38]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430815]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6cd]\\n??:? runModuleUnitTests [0x42c639]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ee4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e6b]\\n??:? _d_run_main [0x428dd6]\\n??:? main [0x428827]\\\
    n??:? __libc_start_main [0x22875554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n\tif (a == 0) return true;\n\tif (a == 1) return\
    \ true;\n\tif (a == -1) return true;\n\tif (abs(a) >= 3) return (int)pow(a, 1/3.0)\
    \ == pow(a, 1/3.0);\n\treturn false;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnbdic3oc.d(22): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbdic3oc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return is(typeof(a == cast(long)pow(a, 1.0/3.0)));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkk45md6w.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmpkk45md6w.__unittest_L21_C1()\
    \ [0x427a3b]\\n??:? void tmpkk45md6w.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xbd144554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || sign(a) == sign(pow(floor(pow(a,1./3)),3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhpkctt7.d(19): Error: undefined identifier `sign`, did you mean\
    \ template `sgn(F)(F x)`?\\n/tmp/tmpvhpkctt7.d(19): Error: undefined identifier\
    \ `sign`, did you mean template `sgn(F)(F x)`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvhpkctt7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    if (a > 0)\n    {\n        long result =\
    \ pow(a, 1.0 / 3.0);\n        return pow(result, 3) == a;\n    }\n    else if\
    \ (a < 0)\n    {\n        return iscube(-a);\n    }\n    else\n    {\n       \
    \ return true;\n    }\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyl5r8nzq.d(21): Error: cannot implicitly convert expression `pow(a,\
    \ 0.333333)` of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpyl5r8nzq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
