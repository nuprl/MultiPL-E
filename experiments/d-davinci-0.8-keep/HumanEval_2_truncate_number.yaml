name: HumanEval_2_truncate_number
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point\
  \ number, it can be decomposed into\n    and integer part (largest integer smaller\
  \ than given number) and decimals\n    (leftover part always smaller than 1).\n\n\
  \    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n\
  \    \n*/\nfloat truncate_number(float number) \n"
tests: "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
  \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) ==\
  \ 0.0);\n}\nvoid main(){}"
completions: ["{\n  float a = cast(int)number;\n  return number - a;\n}", "{\n   \
    \ float intPart = cast(float) cast(long) number;\n    return number - intPart;\n\
    }", "{\n    float integer;\n    float decimals;\n    decimals = modf(number, float.init);\n\
    \    return decimals;\n}", "{\n    return number - cast(int)number;\n}\n/*\n Given\
    \ a positive floating point number, it can be decomposed into\n    and integer\
    \ part (largest integer smaller than given number) and decimals\n    (leftover\
    \ part always smaller than 1).", "{\n    // typecons.decimal(number);\n    return\
    \ number % 1;\n}", "{\n    return number % cast(int)number;\n}\n/*\n    Convert\
    \ the integer part of the number to array of digits.", "{\n    int i = (int) number;\n\
    \    return number - i;\n}", "{\n    // Modulo operator in D returns the integer\
    \ part\n    // of a division.\n    // \"a % b\" means \"a % b = a - b*floor(a/b)\"\
    \n    //\n    // We can use that to get the decimal part only.\n    // % returns\
    \ a long, so we have to cast it to float first\n    return cast(float)(number\
    \ % cast(int)number);\n}\n/*\n    Given an integer and a float,\n    return the\
    \ fractional part of the division\n    (expressed as a percentage, e.g. 12.3 %\
    \ = 12.3)\n    as an integer between 0 and 100.\n    >>> get_percentage(10, 3.2)\n\
    \    32\n    >>> get_percentage(10, 0.32)\n    3\n*/", "{\n    return cast(float)cast(int)number;\n\
    }", "{\n    return number - cast(int)number;\n}", "{\n    int integer = cast(int)\
    \ number;\n    return number - integer;\n}", "{\n    // create tuple with floating\
    \ point number and 0.0\n    auto parts = tuple(number, 0.0);\n    // use the 'divide'\
    \ function from std.math to extract integer and decimal parts\n    parts = divide(parts);\n\
    \    // get the decimal part from the tuple and return it\n    return parts[1];\n\
    }", "{\n    // TODO: return the decimal part of number\n    return modf(number,\
    \ cast(float*)null);\n}", "{\n    //return number - floor(number);\n    return\
    \ number % 1;\n}", "{\n    return number - (float)cast(int)number;\n}\n/*\n  \
    \  Return the root of the quadratic equation `a*x^2 + b*x + c = 0`\n    with the\
    \ larger absolute value.\n    >>> quadratic_equation(1, 1, -2)\n    2\n*/\nfloat\
    \ quadratic_equation(float a, float b, float c)\n{\n    float root = (-b + sqrt(b*b\
    \ - 4*a*c)) / (2*a);\n    return root;\n}\n/*\n    Return true if the number is\
    \ a power of 10.\n    >>> is_power_of_10(10000)\n    true\n    >>> is_power_of_10(48)\n\
    \    false\n*/", "{\n    // hack: when using `cast` with `int` and `float` \n\
    \    // the conversion is done using `std.math.floor`\n    // `std.math.floor`\
    \ returns the greatest integer value \n    // less than or equal to its argument.\n\
    \    // so `cast(int)number` is equal to the integer part of the number\n    //\
    \ thus `number - cast(int)number` is equal to decimal part of the number.\n  \
    \  return number - cast(int)number;\n}\n/*\n    Given an integer number, return\
    \ the sum of its digits.\n    >>> sum_digits(123)\n    6\n*/", "{\n    return\
    \ number - trunc(number);\n}", "{\n    return number - cast(int)number;\n}", "{\n\
    \    int i = 0;\n    while ( (float)i < number )\n        i++;\n    return number\
    \ - (float)i;\n}\n/*\n    Return the integer part of the number.\n    >>> integer_part(4.5)\n\
    \    4\n*/", "{\n\treturn number - cast(int)number;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
