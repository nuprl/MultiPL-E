name: HumanEval_92_any_int
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of\
  \ the other two, and all numbers are integers.\n    Returns false in any other cases.\n\
  \    \n    Examples\n    any_int(5, 2, 7) \u279E True\n    \n    any_int(3, 2, 2)\
  \ \u279E False\n\n    any_int(3, -2, 1) \u279E True\n    \n    any_int(3.6, -2.2,\
  \ 2) \u279E False\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float z)\
  \ \n"
tests: "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
  \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
  \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
  \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
  \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
  \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
completions: ["{\n    return (cast(int)x == cast(int)y + cast(int)z) ||\n    (cast(int)y\
    \ == cast(int)x + cast(int)z) ||\n    (cast(int)z == cast(int)x + cast(int)y);\n\
    }", "{\n    if (is(typeof(x) == int && typeof(y) == int && typeof(z) == int))\n\
    \    {\n        if (x == y + z || y == x + z || z == x + y)\n        {\n     \
    \       return true;\n        }\n    }\n    return false;\n}", "{\n    float sum\
    \ = x + y + z;\n    if(x == y + z)\n        return true;\n    else if(y == x +\
    \ z)\n        return true;\n    else if(z == x + y)\n        return true;\n  \
    \  else\n        return false;\n}", "{\n    return x.isNaN == false && y.isNaN\
    \ == false && z.isNaN == false && (x == y + z || x == y - z || x == z - y || z\
    \ == y + x || z == y - x || z == x - y || y == x + z || y == x - z || y == z -\
    \ x);\n}", "{\n    return (x == y + z || y == x + z || z == x + y) && is(typeof(cast(int)x)\
    \ == int) && is(typeof(cast(int)y) == int) && is(typeof(cast(int)z) == int);\n\
    }", "{\n    return int(x) + int(y) == int(z) || int(x) + int(z) == int(y) || int(y)\
    \ + int(z) == int(x);\n}", "{\n    return (is(typeof(x)) && is(typeof(y)) && is(typeof(z)))\
    \ && (x == y + z || y == x + z || z == x + y);\n}", "{\n    float x1 = floor(x);\n\
    \    float y1 = floor(y);\n    float z1 = floor(z);\n    \n    float sum1 = x1\
    \ + y1;\n    float sum2 = x1 + z1;\n    float sum3 = y1 + z1;\n    \n    return\
    \ ( (x1 == sum2 || x1 == sum3) || (y1 == sum1 || y1 == sum3) || (z1 == sum1 ||\
    \ z1 == sum2));", "{\n    return floor(x) == x && floor(y) == y && floor(z) ==\
    \ z && (x + y == z || x + z == y || y + z == x);\n}", "{\n    auto t = tuple(x,\
    \ y, z);\n    auto a = t[0];\n    auto b = t[1];\n    auto c = t[2];\n    auto\
    \ x = cast(int) a;\n    auto y = cast(int) b;\n    auto z = cast(int) c;\n   \
    \ return( a == b + c || b == a + c || c == a + b );", "{\n  return is(typeof(x)\
    \ == int)&&is(typeof(y) == int)&&is(typeof(z) == int)&&((x==y+z)||(y==x+z)||(z==x+y));\n\
    }", "{\n    return (x == y + z || y == x + z || z == x + y) && x == cast(int)x\
    \ && y == cast(int)y && z == cast(int)z;\n}", "{\n    // write your code here\n\
    \    if(isInteger(x+y)==true)\n    {\n        if(x+y==z)\n        {\n        \
    \    return true;\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    else if(isInteger(x+z)==true)\n    {\n        if(x+z==y)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n    else if(isInteger(y+z)==true)\n\
    \    {\n        if(y+z==x)\n        {\n            return true;\n        }\n \
    \       else\n        {\n            return false;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }\n}", "{\n    return (x - y == z || y - x\
    \ == z || y - z == x || z - y == x || x - z == y || z - x == y) && is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int);\n}", "{\n    return\
    \ (x == y + z || y == x + z || z == x + y) && (is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int));\n}", "{\n    int a = cast(int)x;\n    int\
    \ b = cast(int)y;\n    int c = cast(int)z;\n    bool result = false;\n    if (a\
    \ == b + c || a + b == c || a + c == b)\n    {\n        result = true;\n    }\n\
    \    return result;\n    \n    \n}", "{\n    float sum = x + y + z;\n    if(x\
    \ == sum - (y + z) || y == sum - (x + z) || z == sum - (x + y)){\n        return\
    \ true;\n    }\n    return false;\n}", "{\n    return (x % 1 == 0 || y % 1 ==\
    \ 0 || z % 1 == 0) && (x == y + z || y == x + z || z == x + y);\n}", "{\n    return\
    \ (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int)) && \n\
    \           (x == y + z || y == x + z || z == x + y);\n}\n/*\n    Java solution\n\
    \    public class Challenge {\n\tpublic static boolean any_int(float x, float\
    \ y, float z) {\n\t\treturn (int)x == x && (int)y == y && (int)z == z && (x +\
    \ y == z || x + z == y || y + z == x);\n\t}\n}", "{\n    if (isNumericString(x.to!string))\
    \ return false;\n    if (isNumericString(y.to!string)) return false;\n    if (isNumericString(z.to!string))\
    \ return false;\n    if ((x + y == z) || (x + z == y) || (y + z == x)) return\
    \ true;\n    return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
