name: HumanEval_101_words_string
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You will be given a string\
  \ of words separated by commas or spaces. Your task is\n    to split the string\
  \ into words and return an array of the words.\n    \n    For example:\n    words_string(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]\n    \n*/\nstring[] words_string(string s) \n"
tests: "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"\
  name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\"\
  ) == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"\
  ]);\n}\nvoid main(){}"
completions: ["{\n    return split(s, \" , \");\n}", "{\n    return s.split(\"[, ]+\"\
    );\n}", "{\n    string[] words = s.split(\"[, ]\");\n    return words.filter!(a\
    \ => a.length != 0).array;\n}", "{\n    string[] arr = new string[0];\n    foreach(i;\
    \ 0 .. s.length)\n    {\n        if(s[i] == ' ' || s[i] == ',')\n        {\n \
    \           arr ~= s[0 .. i];\n            s = s[i + 1 .. $];\n            i =\
    \ 0;\n        }\n    }\n    return arr;\n}", "{\n    return s.split;\n}\n/*",
  "{\n    return split(s);\n}\n/*", "{\n    return split(s);\n}\n/*", "{\n    return\
    \ s.split(' ').split(',');\n}", "{\n    return split(s);\n}\n/*", "{\n    return\
    \ split(s);\n}", "{\n    immutable a = s.split;\n    return a;\n}", "{\n    return\
    \ s.split();\n}", "{\n    string[] words;\n    auto n = 0;\n    foreach(i, c;\
    \ s)\n    {\n        if(c == ' ' || c == ',')\n        {\n            words ~=\
    \ s[0..i];\n            s = s[i+1..$];\n            n++;\n        }\n    }\n \
    \   words ~= s;\n    return words;\n}", "{\n    string[] res;\n    foreach(x;\
    \ s.split(\",\").map!(a => a.trim()).filter!(a => a != \"\"))\n    {\n       \
    \ res ~= x;\n    }\n    return res;\n}", "{\n    return split(s);\n}\n/*", "{\n\
    \    return split(s);\n}\n/*", "{\n    auto words = split(s, ' ');\n    words\
    \ = words.replace(\",\", \"\");\n    return words;\n}", "{\n    return s.replace(\"\
    \ \", \",\").split(\",\");\n}", "{\n    return split(s, ' ');\n}", "{\n    auto\
    \ result = s.split(\" \");\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
