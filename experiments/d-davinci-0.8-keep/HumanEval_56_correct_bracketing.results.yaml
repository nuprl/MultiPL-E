name: HumanEval_56_correct_bracketing
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{ \n\
    //     int count = 0;\n//     for (int i = 0; i < brackets.length; i++) {\n//\
    \         if (brackets[i] == '<')\n//             count++;\n//         else\n\
    //             count--;\n//         if (count < 0)\n//             return false;\n\
    //     }\n//     return count == 0;\n    int n = brackets.length;\n    if (n %\
    \ 2 != 0)\n        return false;\n    else {\n        while (brackets.length !=\
    \ 0) {\n            if (brackets.slice(0, 2) == \"><\")\n                brackets\
    \ = brackets.slice(2, n);\n            else\n                return false;\n \
    \       }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0jh8h0_.d(29): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpi0jh8h0_.d(34): Error: no property `slice`\
    \ for type `string`\\n/tmp/tmpi0jh8h0_.d(35): Error: no property `slice` for type\
    \ `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi0jh8h0_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   struct bracket \n    {\n        int position;\n        bool opening;\n   \
    \ }\n    int length = brackets.length;\n    struct bracket[] bracket_stack = new\
    \ struct bracket[length];\n    int stack_top = 0;\n    for (int i = 0; i < length;\
    \ i++) \n    {\n        if (brackets[i] == '<') \n        {\n            struct\
    \ bracket new_bracket = {i, true};\n            bracket_stack[stack_top] = new_bracket;\n\
    \            stack_top++;\n        } \n        else if (brackets[i] == '>') \n\
    \        {\n            if (stack_top == 0) \n            {\n                return\
    \ false;\n            } \n            else \n            {\n                --stack_top;\n\
    \            }\n        }\n    }\n    return stack_top == 0;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvvl2z1t.d(25): Error: { } expected following `struct` declaration\\\
    n/tmp/tmphvvl2z1t.d(25): Error: found `bracket_stack` when expecting `;` following\
    \ statement\\n/tmp/tmphvvl2z1t.d(25): Error: found `=` instead of statement\\\
    n/tmp/tmphvvl2z1t.d(31): Error: { } expected following `struct` declaration\\\
    n/tmp/tmphvvl2z1t.d(31): Error: found `}` when expecting `;` following statement\\\
    n/tmp/tmphvvl2z1t.d(31): Deprecation: use `{ }` for an empty statement, not `;`\\\
    n/tmp/tmphvvl2z1t.d(35): Error: found `else` when expecting `;` following statement\\\
    n/tmp/tmphvvl2z1t.d(49): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvvl2z1t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int depth = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\n \
    \           depth++;\n        else\n            depth--;\n        if (depth <\
    \ 0)\n            return false;\n    }\n    return depth == 0;\n}\n/*\n    Given\
    \ a list of ints, return the sum of the largest and smallest elements.\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprvambqw7.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvambqw7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ double balance = 0;\n  foreach(ch; brackets) \n  {\n    if (ch == '<') \n  \
    \  {\n      balance++;\n    } \n    else if (ch == '>') \n    {\n      balance--;\n\
    \    } \n    else \n    {\n      return false;\n    }\n    if (balance < 0) \n\
    \    {\n      return false;\n    }\n  }\n  return balance == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int balance = 0;\n    foreach(char ch;brackets) \n    {\n        if (ch ==\
    \ '<') \n        {\n            balance++;\n        } \n        else if (ch ==\
    \ '>') \n        {\n            balance--;\n        }\n        else \n       \
    \ {\n            return false;\n        }\n        if (balance < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return (balance == 0);\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   double counter = 0;\n    foreach(char c; brackets)\n    {\n        if(c ==\
    \ '<')\n            counter++;\n        else\n            counter--;\n       \
    \ if(counter < 0)\n            return false;\n    }\n    return counter == 0;\n\
    }\nunittest\n{\n    assert(correct_bracketing(\"<\") == false);\n    assert(correct_bracketing(\"\
    <>\") == true);\n    assert(correct_bracketing(\"<<><>>\") == true);\n    assert(correct_bracketing(\"\
    ><<>\") == false);\n}\n/*\nreturn a new string in which:\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_g09x0c9.d(38): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g09x0c9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int depth = 0;\n    foreach(ch; brackets) {\n        if (ch == '<') {\n  \
    \          depth++;\n        } else {\n            depth--;\n        }\n     \
    \   if (depth < 0) {\n            return false;\n        }\n    }\n    return\
    \ depth == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    if (brackets.length == 0)\n\t\treturn true;\n\tint open_found = 0;\n\tint closed_found\
    \ = 0;\n\tforeach (bracket; brackets)\n\t{\n\t\tif (bracket == '<')\n\t\t\topen_found++;\n\
    \t\telse\n\t\t\tclosed_found++;\n\t\tif (closed_found > open_found)\n\t\t\treturn\
    \ false;\n\t}\n\treturn open_found == closed_found;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   const int n = brackets.length;\n    int i, j;\n    int i_max = n;\n    //int\
    \ j_max = n;\n    int j_min = 0;\n    int [int] counts;\n    if(n == 0)\n    \
    \    return true;\n    /*\n    if(n == 1)\n    {\n        if(brackets[0] == '<')\n\
    \            return false;\n        else\n            return true;\n    }\n  \
    \  */\n    for(i = 0; i < n; i++)\n    {\n        counts[i] = 0;\n        if(brackets[i]\
    \ == '<')\n            counts[i] = 1;\n        else\n            counts[i] = -1;\n\
    \    }\n    for(i = 1; i < n; i++)\n    {\n        counts[i] += counts[i-1];\n\
    \    }\n    /*\n    for(i = 0; i < n; i++)\n    {\n        writeln(counts[i]);\n\
    \    }\n    */\n    int index = std.algorithm.lower_bound(counts, -1);\n    //writeln(index);\n\
    \    if(index == n)\n        return true;\n    else\n        return false;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpokmuqrpr.d(19): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `const(int)`\\n/tmp/tmpokmuqrpr.d(54): Error: undefined identifier\
    \ `algorithm` in package `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpokmuqrpr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   //if(brackets.length < 2) return false;\n    int count = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '<') count++;\n        else count--;\n\
    \        if(count < 0) return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int[] vector = new int[brackets.length];\n    int i = 0;\n    foreach(char\
    \ ch; brackets)\n    {\n        if(ch == '<')\n        {\n            vector[i]\
    \ = 1;\n            i++;\n        }\n        else if(ch == '>')\n        {\n \
    \           if(i != 0)\n            {\n                vector[i-1] = -1;\n   \
    \             i--;\n            }\n            else\n            {\n         \
    \       return false;\n            }\n        }\n    }\n    foreach(ch; vector)\n\
    \    {\n        if(ch != -1)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprx3mdrvl.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmprx3mdrvl.__unittest_L50_C1()\
    \ [0x427e26]\\n??:? void tmprx3mdrvl.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c257]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c1]\\n??:? runModuleUnitTests [0x42c02d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x73bb3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(ch; brackets) \n    {\n        if (ch == '<')\
    \ \n        {\n            count++;\n        }\n        else if (ch == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    /*\n    o returns the opposite boolean value of o\n    >>> opposite(True)\n  \
    \  False\n    >>> opposite(False)\n    True\n    >>> opposite(1)\n    False\n\
    \    >>> opposite(0)\n    True\n*/\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if (brackets.length < 1) \n        return true;\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm4nbm6xo.d(21): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4nbm6xo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int a = 0;\n    int b = 0;\n    foreach(char c; brackets) \n    {\n      \
    \  if (c == '<') a += 1;\n        else if (c == '>') b += 1;\n        if (b >\
    \ a) return false;\n    }\n    return a == b;\n}\n/*\n    return tuple of string\
    \ positions of matching brackets in brackets.\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_cnrxh82.d(29): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_cnrxh82.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count=0;\n    foreach(c;brackets)\n    {\n        if(c=='>')\n       \
    \ {\n            count--;\n        }\n        else\n        {\n            count++;\n\
    \        }\n        if(count<0)\n        {\n            return false;\n      \
    \  }\n    }\n    return count==0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int x = 0;\n    foreach(c; brackets) \n    {\n        if (c == '<')\n    \
    \        x++;\n        else if (c == '>')\n            x--;\n        if (x < 0)\n\
    \            return false;\n    }\n    return x == 0;\n}\n/*\n    >>> simplify(typeid(int))\n\
    \    int\n    >>> simplify(typeid(int*))\n    int*\n    >>> simplify(typeid(int[5]))\n\
    \    int[]\n    >>> simplify(typeid(int[5][]))\n    int[][]\n    >>> simplify(typeid(int[5][4]))\n\
    \    int[][]\n    >>> simplify(typeid(int[]))\n    int[]\n    >>> simplify(typeid(int[][]))\n\
    \    int[][]\n    >>> simplify(typeid(int[][][]))\n    int[][][]\n    >>> simplify(typeid(int[][][][]))\n\
    \    int[][][][]\n    >>> simplify(typeid(int[][][][][]))\n    int[][][][][]\n\
    \    >>> simplify(typeid(int[][][][][][]))\n    int[][][][][][]\n    >>> simplify(typeid(int[][][][][][][]))\n\
    \    int[][][][][][][]\n    >>> simplify(typeid(int[][][][][][][][]))\n    int[][][][][][][][]\n\
    \    >>> simplify(typeid(int[][][][][][][][][]))\n    int[][][][][][][][][]\n\
    \    >>> simplify(typeid(int[][][][][][][][][][]))\n    int[][][][][][][][][][]\n\
    \    >>> simplify(typeid(int[][][][][][][][][][][]))\n    int[][][][][][][][][][][]\n\
    \    >>> simplify(typeid(int[][][][][][][][][][][][]))\n    int[][][][][][][][][][][][]\n\
    \    >>> simplify(typeid(int[][][][][][\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpazazq8sp.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazazq8sp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    int leftBracket = 0;\n    foreach(char ch; brackets)\
    \ {\n        switch(ch) {\n            case '<':\n                leftBracket++;\n\
    \                break;\n            case '>':\n                if(leftBracket\
    \ <= 0) {\n                    result = false;\n                    break;\n \
    \               }\n                leftBracket--;\n                break;\n  \
    \      }\n    }\n    if(leftBracket != 0) result = false;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsr2l8ke0.d(22): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsr2l8ke0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   uint bracket_number = 0;\n    foreach(bracket; brackets)\n    {\n        if(bracket\
    \ == '<') \n        {\n            bracket_number++;\n        }\n        else\
    \ if(bracket == '>')\n        {\n            if(bracket_number <= 0) \n      \
    \      {\n                return false;\n            }\n            bracket_number--;\n\
    \        }\n    }\n    return bracket_number == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if(brackets == \"\")\n        return true;\n    \n    if(brackets.length <=\
    \ 1)\n        return false;\n    \n    int n = 0;\n    foreach(c; brackets)\n\
    \    {\n        if(c == '<')\n            n++;\n        else if(c == '>')\n  \
    \          n--;\n    }\n    return n == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkax4ttak.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpkax4ttak.__unittest_L35_C1()\
    \ [0x427c13]\\n??:? void tmpkax4ttak.__modtest() [0x427db8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcdf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd05]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc91]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42abc5]\\n??:? runModuleUnitTests [0x42bab5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dcb]\\\
    n??:? __libc_start_main [0xabd57554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"\
    <>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"\
    ><<>\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{ \n\
    \    int open = 0;\n    foreach(char c;brackets)\n    {\n        if(c == '<')\n\
    \            open++;\n        else if(c == '>')\n            open--;\n       \
    \ if(open < 0)\n            return false;\n    }\n    return open == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
