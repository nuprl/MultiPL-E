name: HumanEval_160_do_algebra
language: d
prompt: "import std.math;\n/*\n\n    Given two lists operator, and operand. The first\
  \ list has basic algebra operations, and \n    the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n    expression and return the\
  \ evaluation of this expression.\n\n    The basic algebra operations:\n    Addition\
  \ ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division\
  \ ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
  \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n   \
  \ Note:\n        The length of operator list is equal to the length of operand list\
  \ minus one.\n        Operand is a list of of non-negative integers.\n        Operator\
  \ list has at least one operator, and operand list has at least two operands.\n\n\
  \    \n*/\nlong do_algebra(string[] operator, long[] operand) \n"
tests: "unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
  **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"\
  *\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
  \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
completions: ["{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        auto op = operator[i];\n        auto a = operand[i + 1];\n   \
    \     if (op == \"+\")\n            res += a;\n        else if (op == \"-\")\n\
    \            res -= a;\n        else if (op == \"*\")\n            res *= a;\n\
    \        else if (op == \"//\")\n            res /= a;\n        else if (op ==\
    \ \"**\")\n            res = pow(res, a);\n    }\n    return res;\n}", "{\n  long\
    \ res = operand[0];\n  for (int i = 0; i < operator.length; i++) {\n    switch\
    \ (operator[i]) {\n      case \"+\":\n        res += operand[i + 1];\n       \
    \ break;\n      case \"-\":\n        res -= operand[i + 1];\n        break;\n\
    \      case \"*\":\n        res *= operand[i + 1];\n        break;\n      case\
    \ \"//\":\n        res /= operand[i + 1];\n        break;\n      case \"**\":\n\
    \        res = (long)pow(res, operand[i + 1]);\n        break;\n    }\n  }\n \
    \ return res;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i <\
    \ operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n        {\n\
    \            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = pow(result, operand[i+1]);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i\
    \ < operator.length; i++)\n    {\n        switch (operator[i])\n        {\n  \
    \          case \"+\":\n                result += operand[i+1];\n            \
    \    break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    return 0;\n}", "{\n    long result = operand[0];\n    for (int i =\
    \ 0; i < operator.length; i++)\n    {\n        string op = operator[i];\n    \
    \    if (op == \"+\")\n        {\n            result += operand[i+1];\n      \
    \  }\n        else if (op == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (op == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (op == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (op == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n    long value\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n      \
    \  switch (operator[i])\n        {\n            case \"+\":\n                value\
    \ += operand[i + 1];\n                break;\n            case \"-\":\n      \
    \          value -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                value *= operand[i + 1];\n                break;\n \
    \           case \"//\":\n                value /= operand[i + 1];\n         \
    \       break;\n            case \"**\":\n                value = long(pow(double(value),\
    \ double(operand[i + 1])));\n                break;\n        }\n    }\n    return\
    \ value;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}",
  "{\n    long result = operand[0];\n    for (long i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    long res = operand[0];\n    foreach(i, o; zip(operator,\
    \ operand[1..$]))\n    {\n        switch(o)\n        {\n            case \"+\"\
    :\n                res += operand[i + 1];\n                break;\n          \
    \  case \"-\":\n                res -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                res *= operand[i + 1];\n           \
    \     break;\n            case \"//\":\n                res /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                res = cast(long)pow(res,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return res;\n\
    }", "{\n    long result = operand[0];\n    foreach(string op; operator)\n    {\n\
    \        if(op == \"+\")\n            result += operand[1];\n        else if(op\
    \ == \"-\")\n            result -= operand[1];\n        else if(op == \"*\")\n\
    \            result *= operand[1];\n        else if(op == \"//\")\n          \
    \  result /= operand[1];\n        else if(op == \"**\")\n            result =\
    \ pow(result, operand[1]);\n    }\n    return result;\n}", "{\n    long res =\
    \ operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case \"+\":\n                res += operand[i +\
    \ 1];\n                break;\n            case \"-\":\n                res -=\
    \ operand[i + 1];\n                break;\n            case \"*\":\n         \
    \       res *= operand[i + 1];\n                break;\n            case \"//\"\
    :\n                res /= operand[i + 1];\n                break;\n          \
    \  case \"**\":\n                res = (long)pow(res, operand[i + 1]);\n     \
    \           break;\n        }\n    }\n    return res;\n}\nlong do_algebra(string[]\
    \ operator, long[] operand) \n{\n    auto res = operand[0];\n    foreach (i, op;\
    \ operator)\n        switch (op) {\n            case \"+\": res += operand[i +\
    \ 1]; break;\n            case \"-\": res -= operand[i + 1]; break;\n        \
    \    case \"*\": res *= operand[i + 1]; break;\n            case \"//\": res /=\
    \ operand[i + 1]; break;\n            case \"**\": res = cast(long)pow(res, operand[i\
    \ + 1]); break;\n        }\n    return res;\n}\nlong do_algebra(string[] operator,\
    \ long[] operand) \n{\n    return reduce!((a, b) => {\n        switch (operator[$\
    \ - 1]) {\n            case \"+\": return a + b;\n            case \"-\": return\
    \ a - b;\n            case \"*\": return a * b;\n            case \"//\": return\
    \ a / b;\n            case \"**\": return cast(long)pow(a, b);\n        }\n  \
    \  })(operand);\n}\nlong do_algebra(string[] operator, long[] operand) \n{\n \
    \   return fold!((a, b) => {\n        switch (operator[$ - 1]) {\n           \
    \ case \"+\": return a + b;\n            case \"-\": return a - b;\n         \
    \   case \"*\": return a * b;\n            case \"//\": return a /", "{\n    long\
    \ result = operand[0];\n    long len = size(operator);\n    for (long i = 0; i\
    \ < len; i++) {\n        string op = operator[i];\n        long op1 = operand[i];\n\
    \        long op2 = operand[i + 1];\n        result = op == \"+\" ? result + op2\
    \ :\n                 op == \"-\" ? result - op2 :\n                 op == \"\
    *\" ? result * op2 :\n                 op == \"//\" ? result / op2 :\n       \
    \          op == \"**\" ? result ** op2 : 0;\n    }\n    return result;\n}", "{\n\
    \    if (operator.length < 1 || operand.length < 2) return 0;\n    long temp =\
    \ operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ == \"+\") {\n            temp += operand[i+1];\n        } else if (operator[i]\
    \ == \"-\") {\n            temp -= operand[i+1];\n        } else if (operator[i]\
    \ == \"*\") {\n            temp *= operand[i+1];\n        } else if (operator[i]\
    \ == \"//\") {\n            temp /= operand[i+1];\n        } else if (operator[i]\
    \ == \"**\") {\n            temp = pow(temp, operand[i+1]);\n        }\n    }\n\
    \    return temp;\n}", "{\n    long result = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++)\n    {\n        switch (operator[i]) \n        {\n\
    \            case \"+\":\n                result += operand[i + 1];\n        \
    \        break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ operand[0];\n    for (long i = 0; i < operator.length; i++)\n    {\n       \
    \ switch (operator[i])\n        {\n            case \"+\":\n                result\
    \ += operand[i + 1];\n                break;\n            case \"-\":\n      \
    \          result -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                result *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i + 1];\n       \
    \         break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    foreach(i,op;enumerate(operator)){\n\
    \        switch(op){\n            case \"+\":\n                result = result\
    \ + operand[i+1];\n                break;\n            case \"-\":\n         \
    \       result = result - operand[i+1];\n                break;\n            case\
    \ \"*\":\n                result = result * operand[i+1];\n                break;\n\
    \            case \"//\":\n                result = result // operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,operand[i+1]);\n\
    \                break;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n\
    \        if (operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if (operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if (operator[i] == \"*\")\n      \
    \  {\n            result *= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if (operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
