name: HumanEval_98_count_upper
language: d
results:
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    foreach(index,\
    \ character; s)\n    {\n        if (index % 2 == 0 && character >= 'A' && character\
    \ <= 'Z')\n        {\n            counter++;\n        }\n    }\n    return counter;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp74ovhe6h.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmp74ovhe6h.__unittest_L24_C1()\
    \ [0x427ab2]\\n??:? void tmp74ovhe6h.__modtest() [0x427bc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bd3]\\\
    n??:? __libc_start_main [0x87680554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    for (long\
    \ i = 0; i < s.length; i += 2)\n    {\n        if (isupper(s[i]))\n        {\n\
    \            switch (s[i])\n            {\n                case 'A':\n       \
    \         case 'E':\n                case 'I':\n                case 'O':\n  \
    \              case 'U':\n                    counter++;\n                   \
    \ break;\n            }\n        }\n    }\n    return counter;\n}\nunittest\n\
    {\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n\
    \    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") ==\
    \ 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd920_naj.d(17): Error: undefined identifier `isupper`\\n/tmp/tmpd920_naj.d(19):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpd920_naj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    enum vowels = \"AEIOU\";\n    long\
    \ count = 0;\n    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && vowels.canFind(c))\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\"\
    ) == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gaqi8up.d(18): Error: no property `canFind` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gaqi8up.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long num = 0;\n    long i = 0;\n\
    \    foreach(c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            if((i%2) == 0)\n            {\n   \
    \             num++;\n            }\n        }\n        i++;\n    }\n    return\
    \ num;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long n = s.length;\n    long count\
    \ = 0;\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U')\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\
    \n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\")\
    \ == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\"\
    ) == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n  return reduce!q{a + (q[0] == 'A'\
    \ || q[0] == 'E' || q[0] == 'I' || q[0] == 'O' || q[0] == 'U') ? 1 : 0}(s.enumerate().filter!(i\
    \ => i[1] % 2 == 0));\n}\nunittest\n{\n    alias candidate = count_upper;\n\n\
    \    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") ==\
    \ 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") ==\
    \ 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4fapqs35.d(14): Error: template instance `reduce!\"a + (q[0]\
    \ == \\'A\\' || q[0] == \\'E\\' || q[0] == \\'I\\' || q[0] == \\'O\\' || q[0]\
    \ == \\'U\\') ? 1 : 0\"` template `reduce` is not defined\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fapqs35.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    uint len = s.length;\n    long\
    \ cnt = 0;\n    for (uint i = 0; i < len; i+=2)\n    {\n        switch (s[i])\n\
    \        {\n            case 'A':\n            case 'E':\n            case 'I':\n\
    \            case 'O':\n            case 'U':\n                cnt++;\n      \
    \          break;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias\
    \ candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpearx603w.d(14): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `uint`\\n/tmp/tmpearx603w.d(18): Error: `switch` statement\
    \ without a `default`; use `final switch` or add `default: assert(0);` or add\
    \ `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpearx603w.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    int count = 0;\n    string vowels\
    \ = \"AEIOU\";\n    foreach(i, c; s) \n    {\n        if(i % 2 == 0 && indexOf(vowels,\
    \ toupper(c)) != -1)\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n\
    \    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") ==\
    \ 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns7v6m4q.d(18): Error: undefined identifier `indexOf`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns7v6m4q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i,\
    \ char c; s)\n    {\n        if (i % 2 == 0 && isupper(c))\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\
    \n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\")\
    \ == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\"\
    ) == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4v_dpvf5.d(17): Error: undefined identifier `isupper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v_dpvf5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(i,\
    \ c; s)\n    {\n        if(isEven(i) && isUpper(c))\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\
    \n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\")\
    \ == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\"\
    ) == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygycgrtt.d(17): Error: undefined identifier `isEven`\\n/tmp/tmpygycgrtt.d(17):\
    \ Error: undefined identifier `isUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpygycgrtt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable\
    \ char c, immutable size_t index; s)\n    {\n        if(index % 2 == 0 && is_upper(c))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n\
    \    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") ==\
    \ 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc614onsx.d(17): Error: undefined identifier `is_upper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc614onsx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long ret = 0;\n    foreach( immutable\
    \ index, immutable c; s ) \n    {\n        // short circuit evaluation, index\
    \ % 2 == 0 first\n        if( index % 2 == 0 && (c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') )\n            ret++;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    return 0;\n}\nunittest\n{\n   \
    \ alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n\
    \    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") ==\
    \ 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4mqysxnx.d(20): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp4mqysxnx.__unittest_L16_C1()\
    \ [0x427a3a]\\n??:? void tmp4mqysxnx.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0x8bb6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long upperCount = 0;\n    long\
    \ positionCounter = 0;\n    int sLength = s.length;\n    foreach(element; s)\n\
    \    {\n        if(positionCounter%2 == 0)\n        {\n            if(element\
    \ == 'A' || element == 'E' || element == 'I' || element == 'O' || element == 'U')\n\
    \            {\n                upperCount++;\n            }\n        }\n    \
    \    positionCounter++;\n    }\n    return upperCount;\n}\nunittest\n{\n    alias\
    \ candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01om8hf9.d(16): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp01om8hf9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach( i;\
    \ 0 .. s.length )\n    {\n        if( i % 2 == 0 && isUpper(s[i]) )\n        \
    \    count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"\
    abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"\
    B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpymtp7c4k.d(17): Error: undefined identifier `isUpper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymtp7c4k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long int counter = 0;\n    long\
    \ int i = 0;\n    long int j = 1;\n    long int length = s.length;\n    for (;\
    \ i < length; i += 2)\n    {\n        switch (s[i])\n        {\n            case\
    \ 'A': counter++; break;\n            case 'E': counter++; break;\n          \
    \  case 'I': counter++; break;\n            case 'O': counter++; break;\n    \
    \        case 'U': counter++; break;\n        }\n    }\n    return counter;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuys7n3io.d(14): Error: no identifier for declarator `long`\\\
    n/tmp/tmpuys7n3io.d(15): Error: no identifier for declarator `long`\\n/tmp/tmpuys7n3io.d(16):\
    \ Error: no identifier for declarator `long`\\n/tmp/tmpuys7n3io.d(17): Error:\
    \ no identifier for declarator `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuys7n3io.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t\
    \ i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\
    \n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\")\
    \ == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\"\
    ) == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t\
    \ i = 0; i < s.length; i += 2)\n    {\n        char c = s[i];\n        if (c >=\
    \ 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnt0iqhsy.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpnt0iqhsy.__unittest_L25_C1()\
    \ [0x427ab2]\\n??:? void tmpnt0iqhsy.__modtest() [0x427bc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbd7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa6a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbfd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb89]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa41]\\n??:? runModuleUnitTests [0x42b9ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428300]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428287]\\n??:? _d_run_main [0x4281f2]\\n??:? main [0x427bd3]\\\
    n??:? __libc_start_main [0xcdb95554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i,c;\
    \ s)\n    {\n        if(i % 2 == 0 &&\n            c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprehx7hz5.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e55]\\n??:? void tmprehx7hz5.__unittest_L23_C1()\
    \ [0x427b1a]\\n??:? void tmprehx7hz5.__modtest() [0x427bd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9e5]\\n??:? runModuleUnitTests [0x42b951]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42822b]\\n??:? _d_run_main [0x428196]\\n??:? main [0x427be7]\\\
    n??:? __libc_start_main [0xec3f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
    \ vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns\
    \ 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n\
    \    \n*/\nlong count_upper(string s) \n{\n    const long vowels = ['A', 'E',\
    \ 'I', 'O', 'U'];\n    long result = 0;\n    foreach(i, c; s)\n    {\n       \
    \ if(i % 2 == 0 && c in vowels)\n            result++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
    aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
    dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"\
    U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\"\
    ) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wqjtbjd.d(14): Error: cannot implicitly convert expression `[\\\
    'A\\', \\'E\\', \\'I\\', \\'O\\', \\'U\\']` of type `char[]` to `const(long)`\\\
    n/tmp/tmp2wqjtbjd.d(18): Error: incompatible types for `(c) in (vowels)`: `immutable(char)`\
    \ and `const(long)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wqjtbjd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
