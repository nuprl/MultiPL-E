name: HumanEval_30_get_positive
language: d
prompt: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
  \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5,\
  \ 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[] get_positive(long[]\
  \ l) \n"
tests: "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
  \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L,\
  \ 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
  \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
completions: ["{\n    l *= l > 0;\n    return l;\n}", "{ \n    long[] result = new\
    \ long[0]; \n    long len = l.length; \n    for (long i = 0; i < len; i++) \n\
    \    { \n        if (l[i] > 0) \n        { \n            result ~= l[i]; \n  \
    \      } \n    } \n    return result; \n}\n/*\nReturn only negative numbers in\
    \ the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n*/\nlong[] get_negative(long[]\
    \ l) \n{ \n    long[] result = new long[0]; \n    long len = l.length; \n    for\
    \ (long i = 0; i < len; i++) \n    { \n        if (l[i] < 0) \n        { \n  \
    \          result ~= l[i]; \n        } \n    } \n    return result; \n}\n/*\n\
    Return the sum of all even numbers in the list.\n    >>> get_even_sum([1, 2, 3,\
    \ 4, 5, 6])\n    12\n    >>> get_even_sum([2, 3, 4, 5, 6, 7, 8, 9, 10])\n    30\n\
    */\nlong get_even_sum(long[] l) \n{ \n    long sum = 0; \n    long len = l.length;\
    \ \n    for (long i = 0; i < len; i++) \n    { \n        if (l[i] % 2 == 0) \n\
    \        { \n            sum += l[i]; \n        } \n    } \n    return sum; \n\
    }\n/*\nReturn the sum of all odd numbers in the list.\n    >>> get_odd_sum([1,\
    \ 2, 3, 4, 5, 6])\n    9\n    >>> get_odd_sum([2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    \    25\n*/\nlong get_odd_", "{\n    int count = 0;\n    long[] lp = new long[l.length];\n\
    \    foreach(val; l)\n    {\n        if(val > 0)\n        {\n            lp[count]\
    \ = val;\n            count++;\n        }\n    }\n    return lp[0..count];\n}",
  "{\n    int len = l.length;\n    int count = 0;\n    for (int i = 0; i < len; i++)\n\
    \    {\n        if (l[i] > 0) count++;\n    }\n    long[] result = new long[count];\n\
    \    int j = 0;\n    for (int i = 0; i < len; i++)\n    {\n        if (l[i] >\
    \ 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result;\n}\n/*\nGiven a list, return only the negative numbers\
    \ in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n \
    \   \n*/\nlong[] get_negative(long[] l) \n{\n    int len = l.length;\n    int\
    \ count = 0;\n    for (int i = 0; i < len; i++)\n    {\n        if (l[i] < 0)\
    \ count++;\n    }\n    long[] result = new long[count];\n    int j = 0;\n    for\
    \ (int i = 0; i < len; i++)\n    {\n        if (l[i] < 0)\n        {\n       \
    \     result[j] = l[i];\n            j++;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn absolute values of all numbers in the list.\n    >>> get_abs([-1,\
    \ 2, -4, 5, 6])\n    [1, 2, 4, 5, 6]\n    >>> get_abs([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])\n    [5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 10]\n*/\nlong[] get_abs(long[]\
    \ l) \n{\n    int len = l.length;\n    long[] result = new long[len];\n    for\
    \ (int i = 0; i < len", "{\n\tauto r = l.filter!(a => a > 0);\n\treturn r;\n}\n\
    /*", "{\n    long[] ret;\n    foreach(i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            ret ~= i;\n        }\n    }\n    return ret;\n}", "{\n    auto\
    \ res = l.filter!(i => i > 0);\n    return res.array;\n}", "{\n    long[] pos_l\
    \ = new long[l.length];\n    long size = 0;\n    foreach(item; l) \n    {\n  \
    \      if (item > 0) \n        {\n            pos_l[size] = item;\n          \
    \  size++;\n        }\n    }\n    return pos_l[0..size];\n}", "{\n  return filter!(a\
    \ => a > 0)(l);\n}\n/*\nGiven a list, find the maximum value in it.\n    >>> find_max([1,\
    \ 5, 9, 2, -5, 20, 7])\n    20\n    >>> find_max([2, 3, 1, 7, 5, -10, 9])\n  \
    \  9\n*/\nlong find_max(long[] l) \n{\n  return reduce!(max)(l);\n}\n/*\nGiven\
    \ a list, find the mean of the numbers.\n    >>> find_mean([1, 2, 3, 4, 5])\n\
    \    3.0\n    >>> find_mean([3, 5, 7, 9, 2, 0, 6])\n    4.428571428571429\n*/\n\
    double find_mean(long[] l) \n{\n  return reduce!((a, b) => a + b)(l) / l.length;\n\
    }\n/*\nGiven a list, return the number of times a value is in the list.\n    >>>\
    \ count_number(4, [4, 4, 5, 6, 7, 4, 1, 2, 4, 3])\n    4\n    >>> count_number(5,\
    \ [1, 5, 4, 3, 9, 5, 1, 8, 9, 10, 5])\n    3\n*/\nlong count_number(long n, long[]\
    \ l) \n{\n  return count!(a => a == n)(l);\n}\n/*\nGiven a list, return the numbers\
    \ in the list divisible by 3.\n    >>> find_divisible_by_3([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10])\n    [3, 6, 9]\n    >>> find_divisible_by_3([2, 3, 1, 7, 5, -10,\
    \ 9])\n    [3, 9]\n*/\nlong[] find_divisible_by_3(long[] l) \n{\n  return filter!(a\
    \ => a % 3 == 0)(l);\n}\n/*\nGiven a list, return the numbers in the list divisible\
    \ by the given divisor.\n    >>> find_divisible([1, 2, 3, 4, 5, 6, 7", "{\n  /*\n\
    \  auto pos = array!long;\n  foreach(num; l) {\n    if (num > 0) {\n      pos\
    \ ~= num;\n    }\n  }\n  return pos;\n  */\n  return l.filter!(a => a > 0);\n}",
  "{ \n    return l.filter!(a => a > 0)();\n}", "{\n    int length = 0;\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            length += 1;\n        }\n\
    \    }\n    long[] result = new long[length];\n    int j = 0;\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result[j] = i;\n      \
    \      j += 1;\n        }\n    }\n    return result;\n}", "{\n    long[] positive;\n\
    \    foreach(item; l) {\n        if (item > 0) {\n            positive ~= item;\n\
    \        }\n    }\n    return positive;\n}\n/*\n    \nReturn only negative numbers\
    \ in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n \
    \   \n*/\nlong[] get_negative(long[] l) \n{\n    long[] negative;\n    foreach(item;\
    \ l) {\n        if (item < 0) {\n            negative ~= item;\n        }\n  \
    \  }\n    return negative;\n}\n/*\n    \nReturn the reversed list.\n    >>> reverse([1,\
    \ 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> reverse([-1, -2, -3, -4, -5])\n \
    \   [-5, -4, -3, -2, -1]\n    >>> reverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    [-10, 1, 123, 0, 9, 3, -3, 2, -5, 3, 5]\n    \n*/\nlong[] reverse(long[]\
    \ l) \n{\n    long[] reversed;\n    for (long i = l.length; i > 0; i--) {\n  \
    \      reversed ~= l[i-1];\n    }\n    return reversed;\n}\n/*", "{\n    auto\
    \ result = new long[0];\n    foreach(num; l) \n    {\n        if (num > 0) \n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\n/*\nSort list by absolute value.\n    >>> sort_by_abs([-3, 2, -9, 4, 5, -12,\
    \ 1])\n    [-3, 2, -9, 4, 5, -12, 1]\n    >>> sort_by_abs([3, -2, 9, -4, -5, 12,\
    \ -1])\n    [-5, -4, -2, -1, 3, 9, 12]\n    >>> sort_by_abs([1, 2, 3, 4, 5, 6,\
    \ 7])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> sort_by_abs([-1, -2, -3, -4, -5, -6,\
    \ -7])\n    [-1, -2, -3, -4, -5, -6, -7]\n    >>> sort_by_abs([])\n    []\n*/\n\
    long[] sort_by_abs(long[] l) \n{\n    auto result = new long[l.length];\n    int\
    \ j = 0;\n    foreach(num; l) \n    {\n        int i = 0;\n        for (; i <\
    \ j; i++) \n        {\n            if (abs(num) < abs(result[i])) \n         \
    \   {\n                break;\n            }\n        }\n        result = result[0..i]\
    \ ~ [num] ~ result[i..$];\n        j++;\n    }\n    return result;\n}\n/*\nMultiply\
    \ array items by a given number.\n    >>> multiply_by([1, 2, 3, 4, 5], 2)\n  \
    \  [2, 4, 6, 8, 10]\n    >>> multiply_by([1, 2, 3, 4, 5], 0)\n    [0, 0, 0, 0,\
    \ 0]\n    >>> multiply_by([1, 2, 3, 4, 5], -1)\n    [-1, -2, -3, -4,", "{ \n \
    \   return l.filter!(v => v >= 0)();\n}", "{\n    //return filter(l, (x) { return\
    \ x > 0; });\n    long[] r;\n    foreach(x; l)\n    {\n        if(x > 0) r ~=\
    \ x;\n    }\n    return r;\n}", "{\n    long[] result = new long[];", "{\n   \
    \ return l.filter!(i => i > 0);\n}", "{\n    return l.filter!(i => i > 0).toArray();\n\
    }", "{\n    long[] returnList = new long[l.length];\n    foreach(i; 0 .. l.length)\n\
    \    {\n        if(l[i] > 0)\n        {\n            returnList ~= l[i];\n   \
    \     }\n    }\n    return returnList;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
