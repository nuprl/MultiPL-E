name: HumanEval_78_hex_key
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    //TODO: Code must be here\n    long count = 0;\n    if(num.length == 0) return\
    \ 0;\n    string digits = \"0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F\";\n    string[] hex_digits\
    \ = split(digits, \",\");\n    foreach(e; hex_digits)\n    {\n        if(e in\
    \ num)\n        {\n            long d = to!long(e, 16);\n            if(isPrime(d))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeje5jn5t.d(28): Error: undefined identifier `split`\\n/tmp/tmpeje5jn5t.d(31):\
    \ Error: incompatible types for `(e) in (num)`: both operands are of type `string`\\\
    n/tmp/tmpeje5jn5t.d(33): Error: template instance `to!long` template `to` is not\
    \ defined, did you mean No?\\n/tmp/tmpeje5jn5t.d(34): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeje5jn5t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    if (num.length == 0) \n        return 0;\n    if (num[0] == '0')\n      \
    \  return hex_key(num[1..$]);\n    if (num[0] == '1')\n        return 0;\n   \
    \ if (num[0] == '2')\n        return 1;\n    if (num[0] == '3')\n        return\
    \ 1;\n    if (num[0] == '4')\n        return 0;\n    if (num[0] == '5')\n    \
    \    return 1;\n    if (num[0] == '6')\n        return 0;\n    if (num[0] == '7')\n\
    \        return 1;\n    if (num[0] == '8')\n        return 0;\n    if (num[0]\
    \ == '9')\n        return 0;\n    if (num[0] == 'A')\n        return 1;\n    if\
    \ (num[0] == 'B')\n        return 1;\n    if (num[0] == 'C')\n        return 0;\n\
    \    if (num[0] == 'D')\n        return 1;\n    if (num[0] == 'E')\n        return\
    \ 0;\n    if (num[0] == 'F')\n        return 0;\n    return 0;\n}\nlong hex_key(string\
    \ num) \n{\n    if (num.length == 0) \n        return 0;\n    if (num[0] == '0')\n\
    \        return hex_key(num[1..$]);\n    long digit = num[0] - '0';\n    if (digit\
    \ > 9)\n        digit = num[0] - 'A' + 10;\n    if (digit % 2 == 0)\n        return\
    \ 0;\n    if (digit % 3 == 0)\n        return 0;\n    if (digit % 5 == 0)\n  \
    \      return 0;\n    if (digit % 7 == 0)\n        return 0;\n    if (digit %\
    \ 11 == 0)\n        return 1;\n    if (digit % 13 == 0)\n        return 1;\n \
    \   return 0;\n}\nlong hex_key(string num) \n{\n    long count = 0;\n   \nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkfao5jlf.d(87): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfao5jlf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long n = num.length;\n    long i = 0;\n    long j =\
    \ 0;\n    bool[] prime = new bool[20];\n    bool test = true;\n    long num_buf\
    \ = 0;\n    foreach(n;num)\n    {\n        string s = to!string(n);\n        i\
    \ = 0;\n        foreach(i;s)\n        {\n            num_buf = to!long(i);\n \
    \           //writeln(i);\n            switch(num_buf)\n            {\n      \
    \          case 2:\n                case 3:\n                case 5:\n       \
    \         case 7:\n                case 11:\n                case 13:\n      \
    \              count ++;\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptwfx9_yh.d(31): Error: variable `n` is shadowing variable `tmptwfx9_yh.hex_key.n`\\\
    n/tmp/tmptwfx9_yh.d(33): Error: template instance `to!string` template `to` is\
    \ not defined, did you mean No?\\n/tmp/tmptwfx9_yh.d(35): Error: variable `i`\
    \ is shadowing variable `tmptwfx9_yh.hex_key.i`\\n/tmp/tmptwfx9_yh.d(37): Error:\
    \ template instance `to!long` template `to` is not defined, did you mean No?\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwfx9_yh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long digits = 0;\n    long key = 0;\n    foreach(c;num)\n    {\n        key\
    \ = c.toUpper().toUTF8()[0];\n        if(key > 57)\n            key = key-7;\n\
    \        digits += (key > 49 && isPrime!uint(key-48))?1:0;\n    }\n    return\
    \ digits;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpro87c5qq.d(28): Error: no property `toUpper` for type `immutable(char)`\\\
    n/tmp/tmpro87c5qq.d(31): Error: template instance `isPrime!uint` template `isPrime`\
    \ is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro87c5qq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \  return ulong.parse(num, 16L);\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr6p5o35s.d(24): Error: no property `parse` for type `ulong`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6p5o35s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(element; num)\n    {\n        result += (long)element;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpidfvb9de.d(27): Error: C style cast illegal, use `cast(long)element`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidfvb9de.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    static immutable int[] primes = [2, 3, 5, 7, 11, 13];\n    static immutable\
    \ int[] hex_digits = [\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'\n    ];\n    long ans = 0;\n    foreach(i; hex_digits)\
    \ {\n        auto it = std.find(num, i);\n        if(it != std.find(num, '\\0'))\
    \ {\n            if(std.find(primes, i) != primes.back) \n                ans++;\n\
    \        }\n    }\n    return ans;\n}\n/*\n    Find the sum of the elements of\
    \ an array,\n    keeping in mind that some of those integers may be quite large.\n\
    */\nlong aVeryBigSum(long[] ar) \n{\n    long total = 0;\n    foreach(item; ar)\
    \ {\n        total += item;\n    }\n    return total;\n}\n/*\n    Diagonal Difference\
    \ - HackerRank:\n    Given a square matrix, calculate the absolute difference\
    \ between \n    the sums of its diagonals.\n    Example:\n    Input:\n    3\n\
    \    11 2 4\n    4 5 6\n    10 8 -12\n    Output:\n    15\n    This is:\n    11\n\
    \    5\n    -12\n*/\nlong diagonalDifference(long[][] arr) \n{\n    long upper\
    \ = 0;\n    long lower = 0;\n    for(long i = 0; i < arr.length; i++) {\n    \
    \    upper += arr[i][i];\n        lower += arr[i][arr.length - i - 1];\n    }\n\
    \    return abs(upper - lower);\n}\n/*\n    Given an array of integers, calculate\
    \ the fractions of its elements that are positive, \n    negative, and are zeros.\
    \ Print the decimal value of each fraction on a new line.\n    Example:\n    Input:\n\
    \    6\n    -4 3 -9 0 4 1\n    Output:\n    0.500000\n    0.333333\n    0.1666\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5y2nscd.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5y2nscd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long results=0;\n    foreach(inout hex; num)\n    {\n        if(hex>='0'\
    \ && hex<='9')\n        {\n            long hex_value=hex-'0';\n            results+=hex_value;\n\
    \        }\n        else\n        {\n            long hex_value=hex-'A'+10;\n\
    \            results+=hex_value;\n        }\n    }\n    return results;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyhurpb79.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpyhurpb79.__unittest_L40_C1()\
    \ [0x427aae]\\n??:? void tmpyhurpb79.__modtest() [0x427b9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427baf]\\\
    n??:? __libc_start_main [0x26234554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long res = 0;\n    for (long i = 0; i < num.length; i++)\n    {\n       \
    \ if (num[i] <= '9')\n            res += (num[i] - '0') * pow(16, num.length -\
    \ i - 1);\n        else\n            res += (num[i] - 'A' + 10) * pow(16, num.length\
    \ - i - 1);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7s93oyhs.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmp7s93oyhs.__unittest_L34_C1()\
    \ [0x427b76]\\n??:? void tmp7s93oyhs.__modtest() [0x427cfc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd17]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd3d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fcc9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab81]\\n??:? runModuleUnitTests [0x42baed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428440]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283c7]\\n??:? _d_run_main [0x428332]\\n??:? main [0x427d0f]\\\
    n??:? __libc_start_main [0x8a082554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    if (num.length == 0) return 0;\n    long output = 0;\n    foreach(c; num)\n\
    \    {\n        if (c in '2357BDF') ++output;\n    }\n    return output;\n}\n\
    /*\n    public static void main(String[] args) {\n        // TODO code application\
    \ logic here\n        System.out.println(hex_key(\"AB\"));\n        System.out.println(hex_key(\"\
    1077E\"));\n        System.out.println(hex_key(\"ABED1A33\"));\n        System.out.println(hex_key(\"\
    123456789ABCDEF0\"));\n        System.out.println(hex_key(\"2020\"));\n    }\n\
    */\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp888rn1me.d(28): Error: unterminated character constant\\n/tmp/tmp888rn1me.d(28):\
    \ Error: radix 10 digit expected, not `B`\\n/tmp/tmp888rn1me.d(28): Error: found\
    \ `357.000` when expecting `)`\\n/tmp/tmp888rn1me.d(28): Error: unterminated character\
    \ constant\\n/tmp/tmp888rn1me.d(28): Error: found `63U` when expecting `;` following\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp888rn1me.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long ret = 0;\n    string hex_digits = \"0123456789ABCDEF\";\n    string\
    \ primes = \"2357BDF\";\n    long it = 0;\n    foreach(char c; num)\n    {\n \
    \       long index = 0;\n        foreach(char hex_digit; hex_digits)\n       \
    \ {\n            if(c == hex_digit)\n            {\n                break;\n \
    \           }\n            index++;\n        }\n        if(index > 16)\n     \
    \   {\n            break;\n        }\n        ret = ret * 16 + index;\n      \
    \  it++;\n    }\n    bool prime = true;\n    foreach(i; 1..ret)\n    {\n     \
    \   if(i == 1)\n        {\n            continue;\n        }\n        if(ret %\
    \ i == 0)\n        {\n            prime = false;\n            break;\n       \
    \ }\n    }\n    if(prime)\n    {\n        return 1;\n    }\n    else\n    {\n\
    \        return 0;\n    }\n    \n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuasf8g3_.d(73): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427eed]\\n??:? void tmpuasf8g3_.__unittest_L69_C1()\
    \ [0x427b82]\\n??:? void tmpuasf8g3_.__modtest() [0x427c70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaa6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa7d]\\n??:? runModuleUnitTests [0x42b9e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42833c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282c3]\\n??:? _d_run_main [0x42822e]\\n??:? main [0x427c83]\\\
    n??:? __libc_start_main [0x2c719554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long m = num.length;\n    long res = 0;\n    foreach(i; 0 .. m)\n    {\n\
    \        long val = num[i];\n        if(val == 'A')\n            val = 10;\n \
    \       else if(val == 'B')\n            val = 11;\n        else if(val == 'C')\n\
    \            val = 12;\n        else if(val == 'D')\n            val = 13;\n \
    \       else if(val == 'E')\n            val = 14;\n        else if(val == 'F')\n\
    \            val = 15;\n        res += val;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpig4dg1z7.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpig4dg1z7.__unittest_L45_C1()\
    \ [0x427b02]\\n??:? void tmpig4dg1z7.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc07]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc2d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa71]\\n??:? runModuleUnitTests [0x42b9dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b7]\\n??:? _d_run_main [0x428222]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0xc9ea3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    string hex = \"0123456789ABCDEF\";\n    long count = 0;\n    foreach(string\
    \ x; num)\n    {\n        long ind = hex.find(x);\n        if(ind < 0 || ind >\
    \ 16)\n            continue;\n        if(ind == 2 || ind == 3 || ind == 5 || ind\
    \ == 7 || ind == 11 || ind == 13)\n            count++;\n    }\n    return count;\n\
    }\n/*\nlong hex_key(string s) \n{\n    long n = 0;\n    foreach(c; s)\n      \
    \  n += ((c & 240)>>4) + (c & 15);\n    return isPrime(n);\n}\n*/\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7vgegc_.d(26): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `immutable(char)` to `string`\\n/tmp/tmpn7vgegc_.d(28): Error: no property\
    \ `find` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn7vgegc_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long prime_count = 0;\n    if(num.length() > 0) \n    {\n        foreach(c;\
    \ num)\n        {\n            auto hex_val = c.to!long();\n            if(isPrime(hex_val))\
    \ \n            {\n                ++prime_count;\n            }\n        }\n\
    \    }\n    return prime_count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdwx842ke.d(25): Error: no property `length` for type `string`\\\
    n/tmp/tmpdwx842ke.d(29): Error: no property `to` for type `immutable(char)`\\\
    n/tmp/tmpdwx842ke.d(30): Error: undefined identifier `isPrime`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwx842ke.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    int pri[] = {2,3,5,7,11,13};\n    foreach(hexi; num)\n\
    \    {\n        if(hexi >= 'A' && hexi <= 'F')\n        {\n            if(any!(a\
    \ => a == hexi - 'A' + 10)(pri))\n                continue;\n        }\n     \
    \   else if(hexi >= '0' && hexi <= '9')\n        {\n            if(any!(a => a\
    \ == hexi - '0')(pri))\n                continue;\n        }\n        count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1wrm2jgy.d(25): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `int[] pri`\\n/tmp/tmp1wrm2jgy.d(25): Error: a struct is not a valid\
    \ initializer for a `int[]`\\n/tmp/tmp1wrm2jgy.d(30): Error: template instance\
    \ `any!((a) => a == hexi - \\'A\\' + 10)` template `any` is not defined\\n/tmp/tmp1wrm2jgy.d(35):\
    \ Error: template instance `any!((a) => a == hexi - \\'0\\')` template `any` is\
    \ not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1wrm2jgy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \  // Write your code here\n  import std.math;\n  long n;\n  n = 0;\n  if (num.length\
    \ == 0)\n  {\n    return n;\n  }\n  uint[] arr = new uint[num.length];\n  foreach(i,v;\
    \ num)\n  {\n    if ((v>='A') && (v<='F'))\n    {\n      arr[i] = uint(v) - 55;\n\
    \    }\n    else\n    {\n      arr[i] = uint(v) - 48;\n    }\n    if (isPrime(arr[i]))\n\
    \    {\n      n += 1;\n    }\n  }\n  return n;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_1ba9nl.d(43): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_1ba9nl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long tmp;\n    foreach(i, num){\n        if(isdigit(num[i]))\n\
    \            tmp = num[i] - '0';\n        else \n            tmp = num[i] - 'A'\
    \ + 10;\n        result = result * 16 + tmp;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaz4w6l0j.d(26): Error: no identifier for declarator `num`\\n/tmp/tmpaz4w6l0j.d(26):\
    \ Error: found `)` when expecting `;`\\n/tmp/tmpaz4w6l0j.d(33): Error: found `return`\
    \ when expecting `)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaz4w6l0j.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long cnt = 0;\n    foreach(immutable c; num)\n    {\n        switch(c)\n\
    \        {\n            case '2':\n            case '3':\n            case '5':\n\
    \            case '7':\n            case 'B':\n            case 'D':\n       \
    \         cnt++;\n            default:\n                continue;\n        }\n\
    \    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n  \
    \  assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b\"/tmp/tmpmcdtk85n.d(36): Deprecation: switch case fallthrough - use 'goto\
    \ default;' if intended\\n/tmp/tmpmcdtk85n.d(36): Deprecation: switch case fallthrough\
    \ - use 'goto default;' if intended\\n\""
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long hex_key = 0;\n    int  map_table[4];\n    foreach(ch; num)\n    {\n\
    \        if(ch >= '0' && ch <= '9')\n        {\n            hex_key += cast(int)ch\
    \ - cast(int)'0';\n        }\n        else if(ch >= 'A' && ch <= 'F')\n      \
    \  {\n            hex_key += cast(int)ch - cast(int)'A' + 10;\n        }\n   \
    \     hex_key <<= 4;\n    }\n    return hex_key;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprg479b0z.d(25): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `int[4] map_table`\\n/tmp/tmprg479b0z.d(25): Deprecation: instead of\
    \ C-style syntax, use D-style syntax `int[4] map_table`\\ncore.exception.AssertError@/tmp/tmprg479b0z.d(44):\
    \ unittest failure\\n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void\
    \ tmprg479b0z.__unittest_L40_C1() [0x427ac6]\\n??:? void tmprg479b0z.__modtest()\
    \ [0x427bb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bc7]\\\
    n??:? __libc_start_main [0xdd46b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    int[] prime_hex = [2,3,5,7,11,13];\n    long count = 0;\n    foreach(ch;\
    \ num){\n        foreach(prime; prime_hex){\n            if(std.math.toupper(ch)\
    \ == to!string(prime)){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxgi4fajb.d(28): Error: undefined identifier `toupper` in module\
    \ `std.math`\\n/tmp/tmpxgi4fajb.d(28): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxgi4fajb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
