name: HumanEval_93_encode
language: d
results:
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message) \n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n            result ~= to!char(c - 'a' + 'A');\n        else if (c\
    \ >= 'A' && c <= 'Z')\n            result ~= to!char(c - 'A' + 'a');\n       \
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \     result ~= to!char(c + 2);\n        else if (c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n            result ~= to!char(c + 2);\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxgcu3aip.d(23): Error: template instance `to!char` template `to`\
    \ is not defined\\n/tmp/tmpxgcu3aip.d(25): Error: template instance `to!char`\
    \ template `to` is not defined\\n/tmp/tmpxgcu3aip.d(27): Error: template instance\
    \ `to!char` template `to` is not defined\\n/tmp/tmpxgcu3aip.d(29): Error: template\
    \ instance `to!char` template `to` is not defined\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxgcu3aip.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    foreach(int\
    \ i, char c; message)\n    {\n        if(c == 'a')\n            message[i] = 'c';\n\
    \        else if(c == 'e')\n            message[i] = 'g';\n        else if(c ==\
    \ 'i')\n            message[i] = 'k';\n        else if(c == 'o')\n           \
    \ message[i] = 'q';\n        else if(c == 'u')\n            message[i] = 's';\n\
    \        else if(c == 'A')\n            message[i] = 'C';\n        else if(c ==\
    \ 'E')\n            message[i] = 'G';\n        else if(c == 'I')\n           \
    \ message[i] = 'K';\n        else if(c == 'O')\n            message[i] = 'Q';\n\
    \        else if(c == 'U')\n            message[i] = 'S';\n        else if(c ==\
    \ ' ')\n            message[i] = ' ';\n        else\n            message[i] =\
    \ toUpper(c);\n    }\n    return message;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_gqqns_.d(22): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(24): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(26): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(28): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(30): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(32): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(34): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(36): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(38): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(40): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(42): Error: cannot modify `immutable` expression `message[cast(ulong)i]`\\\
    n/tmp/tmpp_gqqns_.d(44): Error: undefined identifier `toUpper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_gqqns_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < message.length; i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            result +=\
    \ c ^ 0x20;\n        } else if (c >= 'A' && c <= 'Z') {\n            result +=\
    \ c ^ 0x20;\n        } else {\n            result += c;\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuaxkb4p5.d(23): Error: slice `result` is not mutable\\n/tmp/tmpuaxkb4p5.d(25):\
    \ Error: slice `result` is not mutable\\n/tmp/tmpuaxkb4p5.d(27): Error: slice\
    \ `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpuaxkb4p5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ messageNew = \"\";\n    foreach(char c; message)\n    {\n        if (c == 'a')\
    \ {\n            messageNew ~= 'c';\n        } else if (c == 'A') {\n        \
    \    messageNew ~= 'C';\n        } else if (c == 'e') {\n            messageNew\
    \ ~= 'g';\n        } else if (c == 'E') {\n            messageNew ~= 'G';\n  \
    \      } else if (c == 'i') {\n            messageNew ~= 'k';\n        } else\
    \ if (c == 'I') {\n            messageNew ~= 'K';\n        } else if (c == 'o')\
    \ {\n            messageNew ~= 'q';\n        } else if (c == 'O') {\n        \
    \    messageNew ~= 'Q';\n        } else if (c == 'u') {\n            messageNew\
    \ ~= 'w';\n        } else if (c == 'U') {\n            messageNew ~= 'W';\n  \
    \      } else if (c >= 'a' && c <= 'z') {\n            messageNew ~= c - 32;\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            messageNew ~= c + 32;\n\
    \        } else {\n            messageNew ~= c;\n        }\n    }\n    return\
    \ messageNew;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxvqp1d8a.d(56): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42835d]\\n??:? void tmpxvqp1d8a.__unittest_L52_C1()\
    \ [0x427efe]\\n??:? void tmpxvqp1d8a.__modtest() [0x4280dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cce7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbf6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430559]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bbcd]\\n??:? runModuleUnitTests [0x42cabd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428733]\\n??:? _d_run_main [0x42869e]\\n??:? main [0x4280ef]\\\
    n??:? __libc_start_main [0x8eec5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ vowels = \"aeiou\";\n    string text = \"\";\n    foreach(char c; message)\n\
    \    {\n        if(isalpha(c))\n        {\n            char n = c;\n         \
    \   n = tolower(n);\n            if(n in vowels)\n            {\n            \
    \    int i = vowels.indexOf(n);\n                i = (i + 2) % vowels.length;\n\
    \                n = vowels[i];\n            }\n            if(isupper(c))\n \
    \               n = toupper(n);\n            text ~= n;\n        }\n        else\n\
    \            text ~= c;\n    }\n    return text;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gx7limg.d(23): Error: undefined identifier `isalpha`\\n/tmp/tmp_gx7limg.d(26):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmp_gx7limg.d(27): Error: incompatible\
    \ types for `(n) in (vowels)`: `char` and `string`\\n/tmp/tmp_gx7limg.d(29): Error:\
    \ no property `indexOf` for type `string`\\n/tmp/tmp_gx7limg.d(30): Error: cannot\
    \ implicitly convert expression `cast(ulong)(i + 2) % vowels.length` of type `ulong`\
    \ to `int`\\n/tmp/tmp_gx7limg.d(33): Error: undefined identifier `isupper`\\n/tmp/tmp_gx7limg.d(34):\
    \ Error: undefined identifier `toupper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_gx7limg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ coded = \"\";\n    char tmp;\n    foreach(element; message)\n    {\n       \
    \ tmp = element;\n        //element = toupper(element);\n        if (isupper(element))\n\
    \        {\n            element = tolower(element);\n        }\n        else\n\
    \        {\n            element = toupper(element);\n        }\n        switch(element)\n\
    \        {\n            case 'a':\n                element = 'c';\n          \
    \      break;\n            case 'e':\n                element = 'g';\n       \
    \         break;\n            case 'i':\n                element = 'k';\n    \
    \            break;\n            case 'o':\n                element = 'q';\n \
    \               break;\n            case 'u':\n                element = 'y';\n\
    \                break;\n            case 'A':\n                element = 'C';\n\
    \                break;\n            case 'E':\n                element = 'G';\n\
    \                break;\n            case 'I':\n                element = 'K';\n\
    \                break;\n            case 'O':\n                element = 'Q';\n\
    \                break;\n            case 'U':\n                element = 'Y';\n\
    \                break;\n            default:\n                element = tmp;\n\
    \                break;\n        }\n        coded ~= element;\n    }\n    return\
    \ coded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpek9lj_24.d(25): Error: undefined identifier `isupper`\\n/tmp/tmpek9lj_24.d(27):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmpek9lj_24.d(31): Error: undefined\
    \ identifier `toupper`\\n/tmp/tmpek9lj_24.d(36): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(39): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(42): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(45): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(48): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(51): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(54): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(57): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(60): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(63): Error: cannot modify `immutable`\
    \ expression `element`\\n/tmp/tmpek9lj_24.d(66): Error: cannot modify `immutable`\
    \ expression `element`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpek9lj_24.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string vowels = \"AEIOU\";\n\
    \    string output = \"\";\n    int maxLen = message.length;\n    string[] vowelsArr\
    \ = vowels.split();\n    string[] alphabetArr = alphabet.split();\n    foreach(string\
    \ char; message.split())\n    {\n        if(char == char.toupper())\n        {\n\
    \            output ~= char.tolower();\n        }\n        else\n        {\n \
    \           output ~= char.toupper();\n        }\n    }\n    foreach(int i; 0..maxLen)\n\
    \    {\n        int isVowel = 0;\n        foreach(string vowel; vowelsArr)\n \
    \       {\n            if(output[i] == vowel)\n            {\n               \
    \ isVowel = 1;\n                break;\n            }\n        }\n        if(isVowel\
    \ == 1)\n        {\n            foreach(string letter; alphabetArr)\n        \
    \    {\n                if(output[i] == letter)\n                {\n         \
    \           output[i] = alphabetArr[(alphabetArr.indexOf(letter) + 2) % 26];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return output;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbp_ejiqx.d(25): Error: no identifier for declarator `string`\\\
    n/tmp/tmpbp_ejiqx.d(25): Error: found `char` when expecting `;`\\n/tmp/tmpbp_ejiqx.d(25):\
    \ Error: expression expected, not `;`\\n/tmp/tmpbp_ejiqx.d(25): Error: found `message`\
    \ when expecting `)`\\n/tmp/tmpbp_ejiqx.d(25): Error: found `)` when expecting\
    \ `;` following statement\\n/tmp/tmpbp_ejiqx.d(27): Error: found `==` when expecting\
    \ `.` following char\\n/tmp/tmpbp_ejiqx.d(27): Error: found `char` when expecting\
    \ identifier following `char`.\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbp_ejiqx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    message\
    \ = toupper(message);\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi4m_3koe.d(20): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4m_3koe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    message\
    \ = toLower(message);\n    int l = message.length;\n    char[] newmsg = new char[l];\n\
    \    for (int i = 0; i < l; i++)\n    {\n        char c = message[i];\n      \
    \  if (c == 'a')\n            newmsg[i] = 'c';\n        else if (c == 'e')\n \
    \           newmsg[i] = 'g';\n        else if (c == 'i')\n            newmsg[i]\
    \ = 'k';\n        else if (c == 'o')\n            newmsg[i] = 'q';\n        else\
    \ if (c == 'u')\n            newmsg[i] = 'y';\n        else\n            newmsg[i]\
    \ = c;\n    }\n    return toUpper(newmsg.join());\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4rjsznhd.d(19): Error: undefined identifier `toLower`\\n/tmp/tmp4rjsznhd.d(20):\
    \ Error: cannot implicitly convert expression `message.length` of type `ulong`\
    \ to `int`\\n/tmp/tmp4rjsznhd.d(38): Error: undefined identifier `toUpper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rjsznhd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    const\
    \ string vowels = \"aeiouAEIOU\";\n    const string coded_vowels = \"cfilorCFLOR\"\
    ;\n    string result = \"\";\n    foreach(c; message)\n    {\n        auto index\
    \ = vowels.indexOf(c);\n        if(index != -1)\n        {\n            // c is\
    \ a vowel, swap with its encoded value\n            result ~= coded_vowels[index];\n\
    \        }\n        else\n        {\n            // c is not a vowel, swap case\n\
    \            result ~= to!char(c ^ 32);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn6l_29rm.d(24): Error: no property `indexOf` for type `const(string)`\\\
    n/tmp/tmpn6l_29rm.d(33): Error: template instance `to!char` template `to` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn6l_29rm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    enum\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n    foreach(ch;\
    \ message)\n    {\n        if(tolower(ch) == 'a')\n            ch = 'c';\n   \
    \     else if(tolower(ch) == 'e')\n            ch = 'g';\n        else if(tolower(ch)\
    \ == 'i')\n            ch = 'k';\n        else if(tolower(ch) == 'o')\n      \
    \      ch = 'q';\n        else if(tolower(ch) == 'u')\n            ch = 'w';\n\
    \        else if(tolower(ch) == 'y')\n            ch = 'a';\n        else\n  \
    \      {\n            int index = 0;\n            foreach(c; alphabet)\n     \
    \       {\n                if(tolower(ch) == c)\n                {\n         \
    \           ch = alphabet[(index + 2) % 26];\n                    break;\n   \
    \             }\n                index++;\n            }\n        }\n    }\n \
    \   return message;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxgjbrbpk.d(19): Error: cannot infer type from struct initializer\\\
    n/tmp/tmpxgjbrbpk.d(22): Error: undefined identifier `tolower`\\n/tmp/tmpxgjbrbpk.d(23):\
    \ Error: cannot modify `immutable` expression `ch`\\n/tmp/tmpxgjbrbpk.d(24): Error:\
    \ undefined identifier `tolower`\\n/tmp/tmpxgjbrbpk.d(25): Error: cannot modify\
    \ `immutable` expression `ch`\\n/tmp/tmpxgjbrbpk.d(26): Error: undefined identifier\
    \ `tolower`\\n/tmp/tmpxgjbrbpk.d(27): Error: cannot modify `immutable` expression\
    \ `ch`\\n/tmp/tmpxgjbrbpk.d(28): Error: undefined identifier `tolower`\\n/tmp/tmpxgjbrbpk.d(29):\
    \ Error: cannot modify `immutable` expression `ch`\\n/tmp/tmpxgjbrbpk.d(30): Error:\
    \ undefined identifier `tolower`\\n/tmp/tmpxgjbrbpk.d(31): Error: cannot modify\
    \ `immutable` expression `ch`\\n/tmp/tmpxgjbrbpk.d(32): Error: undefined identifier\
    \ `tolower`\\n/tmp/tmpxgjbrbpk.d(33): Error: cannot modify `immutable` expression\
    \ `ch`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgjbrbpk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    string Alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    string vowels = \"aeiou\";\n    string temp = \"\";\n    foreach(char c;\
    \ message) {\n        if(c in vowels) {\n            c = vowels[(vowels.indexOf(c)\
    \ + 2) % 5];\n        } else if(c in alpha) {\n            c = alpha[(alpha.indexOf(c)\
    \ + 2) % 26];\n        } else if(c in Alpha) {\n            c = Alpha[(Alpha.indexOf(c)\
    \ + 2) % 26];\n        }\n        temp ~= c;\n    }\n    return temp;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpocilw37d.d(24): Error: incompatible types for `(c) in (vowels)`:\
    \ `char` and `string`\\n/tmp/tmpocilw37d.d(25): Error: no property `indexOf` for\
    \ type `string`\\n/tmp/tmpocilw37d.d(26): Error: incompatible types for `(c) in\
    \ (alpha)`: `char` and `string`\\n/tmp/tmpocilw37d.d(27): Error: no property `indexOf`\
    \ for type `string`\\n/tmp/tmpocilw37d.d(28): Error: incompatible types for `(c)\
    \ in (Alpha)`: `char` and `string`\\n/tmp/tmpocilw37d.d(29): Error: no property\
    \ `indexOf` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpocilw37d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    message\
    \ = toLower(message);\n    string result = \"\";\n    foreach(char c; message)\
    \ {\n        char new_c = c;\n        if (c >= 'a' && c <= 'z') {\n          \
    \  new_c = c + 2;\n            if (new_c > 'z') {\n                new_c -= 26;\n\
    \            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n                new_c = c + 1;\n                if (new_c > 'z')\
    \ {\n                    new_c -= 26;\n                }\n            }\n    \
    \    }\n        result ~= new_c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9oc7dcpm.d(19): Error: undefined identifier `toLower`\\n/tmp/tmp9oc7dcpm.d(24):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp9oc7dcpm.d(29): Error: cannot implicitly convert expression\
    \ `cast(int)c + 1` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp9oc7dcpm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    //\
    \ your code here\n}\n```\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt02irb5r.d(21): Error: declaration expected, not `\"\"`\\n/tmp/tmpt02irb5r.d(21):\
    \ Error: unterminated string constant starting at /tmp/tmpt02irb5r.d(21)\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt02irb5r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    return\
    \ message;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9ca7whbv.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f1d]\\n??:? void tmp9ca7whbv.__unittest_L21_C1()\
    \ [0x427abe]\\n??:? void tmp9ca7whbv.__modtest() [0x427c9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43009c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb79]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aaad]\\n??:? runModuleUnitTests [0x42b99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42836c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282f3]\\n??:? _d_run_main [0x42825e]\\n??:? main [0x427caf]\\\
    n??:? __libc_start_main [0xc7fd7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encode_message = \"\";\n    message = toLower(message);\n    string vowels =\
    \ \"aeiou\";\n    string next_vowels = \"cfilorux\";\n    //foreach(char c; message)\
    \ {\n    foreach(int i, char c; message) {\n        if(c in vowels) {\n      \
    \      encode_message ~= next_vowels[vowels.indexOf(c)];\n        } else {\n \
    \           encode_message ~= c;\n        }\n    }\n    return encode_message;\n\
    }\n \n/*\n    You have the following data structure:\n    \n    class Pie\n  \
    \  {\n        int weight;\n        int type;\n    }\n    \n    Weight is measured\
    \ in kilograms.\n    Type is:\n        1 - Cheese\n        2 - Apple\n       \
    \ 3 - Chocolate\n        4 - Blueberry\n        5 - Strawberry\n    \n    Write\
    \ a function that takes an array of Pies, and adds up the\n    weight of all pies\
    \ of a certain type.\n    \n    Example:\n    \n    >>> sumPie(pies)\n    4\n\
    \    \n*/\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiv3u76yu.d(20): Error: undefined identifier `toLower`\\n/tmp/tmpiv3u76yu.d(25):\
    \ Error: incompatible types for `(c) in (vowels)`: `char` and `string`\\n/tmp/tmpiv3u76yu.d(26):\
    \ Error: no property `indexOf` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpiv3u76yu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    return\
    \ message;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpntn9mbym.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f1d]\\n??:? void tmpntn9mbym.__unittest_L21_C1()\
    \ [0x427abe]\\n??:? void tmpntn9mbym.__modtest() [0x427c9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43009c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb79]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aaad]\\n??:? runModuleUnitTests [0x42b99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42836c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282f3]\\n??:? _d_run_main [0x42825e]\\n??:? main [0x427caf]\\\
    n??:? __libc_start_main [0xc8d77554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encodeMsg = \"\";\n    message = toLower(message);\n    foreach(c; message)\n\
    \    {\n        if(c == 'a')\n            encodeMsg ~= 'c';\n        else if(c\
    \ == 'e')\n            encodeMsg ~= 'g';\n        else if(c == 'i')\n        \
    \    encodeMsg ~= 'k';\n        else if(c == 'o')\n            encodeMsg ~= 'q';\n\
    \        else if(c == 'u')\n            encodeMsg ~= 'w';\n        else\n    \
    \        encodeMsg ~= c;\n    }\n    encodeMsg = toUpper(encodeMsg);\n    return\
    \ encodeMsg;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8brdqagr.d(20): Error: undefined identifier `toLower`\\n/tmp/tmp8brdqagr.d(36):\
    \ Error: undefined identifier `toUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8brdqagr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    int\
    \ messageLength = message.length;\n    int i = 0;\n    char vowels[5] = {'a',\
    \ 'e', 'i', 'o', 'u'};\n    //string codedMessage = \"\";\n    string codedMessage\
    \ = \"\";\n    while (i < messageLength) {\n        char currentChar = message[i];\n\
    \        codedMessage += currentChar;\n        if (currentChar >= 'a' && currentChar\
    \ <= 'z')\n            codedMessage[i] -= 'a' - 'A';\n        else if (currentChar\
    \ >= 'A' && currentChar <= 'Z')\n            codedMessage[i] += 'a' - 'A';\n \
    \       if (currentChar == ' ')\n            continue;\n        for (int j = 0;\
    \ j < 5; j++) {\n            if (currentChar == vowels[j]) {\n               \
    \ codedMessage[i] = vowels[(j + 2) % 5];\n                break;\n           \
    \ }\n        }\n        i++;\n    }\n    return codedMessage;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0m6h3eo.d(21): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `char[5] vowels`\\n/tmp/tmpj0m6h3eo.d(19): Error: cannot implicitly convert\
    \ expression `message.length` of type `ulong` to `int`\\n/tmp/tmpj0m6h3eo.d(21):\
    \ Error: a struct is not a valid initializer for a `char[5]`\\n/tmp/tmpj0m6h3eo.d(26):\
    \ Error: slice `codedMessage` is not mutable\\n/tmp/tmpj0m6h3eo.d(28): Error:\
    \ cannot modify `immutable` expression `codedMessage[cast(ulong)i]`\\n/tmp/tmpj0m6h3eo.d(30):\
    \ Error: cannot modify `immutable` expression `codedMessage[cast(ulong)i]`\\n/tmp/tmpj0m6h3eo.d(35):\
    \ Error: cannot modify `immutable` expression `codedMessage[cast(ulong)i]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0m6h3eo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ ret = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            c = toupper(c);\n        }\n        if(c >= 'A' && c <=\
    \ 'Z')\n        {\n            switch(c)\n            {\n                case\
    \ 'A':\n                    c = 'C';\n                    break;\n           \
    \     case 'E':\n                    c = 'G';\n                    break;\n  \
    \              case 'I':\n                    c = 'K';\n                    break;\n\
    \                case 'O':\n                    c = 'Q';\n                   \
    \ break;\n                case 'U':\n                    c = 'S';\n          \
    \          break;\n                default:\n                    c += 2;\n   \
    \                 break;\n            }\n        }\n        ret ~= c;\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqr6xlmrx.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpqr6xlmrx.d(31):\
    \ Error: cannot modify `immutable` expression `c`\\n/tmp/tmpqr6xlmrx.d(34): Error:\
    \ cannot modify `immutable` expression `c`\\n/tmp/tmpqr6xlmrx.d(37): Error: cannot\
    \ modify `immutable` expression `c`\\n/tmp/tmpqr6xlmrx.d(40): Error: cannot modify\
    \ `immutable` expression `c`\\n/tmp/tmpqr6xlmrx.d(43): Error: cannot modify `immutable`\
    \ expression `c`\\n/tmp/tmpqr6xlmrx.d(46): Error: cannot modify `immutable` expression\
    \ `c`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqr6xlmrx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
