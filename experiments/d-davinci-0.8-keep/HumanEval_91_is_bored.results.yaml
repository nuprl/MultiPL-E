name: HumanEval_91_is_bored
language: d
results:
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    auto a = split(S, \" .\");\n    long result =\
    \ 0;\n    foreach(string s; a)\n    {\n        if(s.startsWith(\"I\"))\n     \
    \       result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4ijhm4y.d(17): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4ijhm4y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = split(S, \" \");\n    long boredoms\
    \ = 0;\n    foreach(w; words) {\n        if(w == \"I\") {\n            ++boredoms;\n\
    \        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4o2mtp66.d(17): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4o2mtp66.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long i;\n    long count;\n    i = 0;\n    count\
    \ = 0;\n    if (S.length == 0) return 0;\n    while (i < S.length)\n    {\n  \
    \      if (S[i] == 'I')\n        {\n            count++;\n            while (S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \                if (i >= S.length) break;\n            }\n        }\n       \
    \ i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk05j8yvo.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpk05j8yvo.__unittest_L37_C1()\
    \ [0x427b4b]\\n??:? void tmpk05j8yvo.__modtest() [0x427c08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aab2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc45]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa89]\\n??:? runModuleUnitTests [0x42b9f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428348]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cf]\\n??:? _d_run_main [0x42823a]\\n??:? main [0x427c1b]\\\
    n??:? __libc_start_main [0xcce42554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    //Ugh, I know; the use\
    \ of \"bool\" is redundant here.\n    bool found_period = false;\n    int j =\
    \ 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '!' || S[i]\
    \ == '?' || S[i] == '.') {\n            found_period = true;\n            j =\
    \ i;\n        }\n        if (found_period) {\n            if (S[i] == ' ' && (S[i+1]\
    \ == 'I' || S[i+1] == 'i')) {\n                boredoms++;\n            }\n  \
    \          found_period = false;\n        }\n    }\n    return boredoms;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1gaepfe0.d(21): Error: no property `length` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gaepfe0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long isBored = 0;\n    string[] words = S.split('\
    \ ');\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n   \
    \     {\n            isBored++;\n        }\n    }\n    return isBored;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpirp38ym0.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpirp38ym0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    if (S == \"\") return\
    \ boredoms;\n    S = S.replace(\".\", \"  \");\n    S = S.replace(\"?\", \"  \"\
    );\n    S = S.replace(\"!\", \"  \");\n    auto sentences = S.split();\n    foreach\
    \ (sentence; sentences)\n    {\n        auto words = sentence.split();\n     \
    \   if (words[0] == \"I\") boredoms++;\n    }\n    return boredoms;\n}\n \nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90btj0cj.d(19): Error: no property `replace` for type `string`\\\
    n/tmp/tmp90btj0cj.d(20): Error: no property `replace` for type `string`\\n/tmp/tmp90btj0cj.d(21):\
    \ Error: no property `replace` for type `string`\\n/tmp/tmp90btj0cj.d(22): Error:\
    \ no property `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp90btj0cj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length;\
    \ i++) {\n        auto c = S[i];\n        if (c == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n    The time complexity of is_bored\
    \ is O(n), where n is the length of the string.\n*/\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvdsg6ibt.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpvdsg6ibt.__unittest_L29_C1()\
    \ [0x427ab7]\\n??:? void tmpvdsg6ibt.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb8f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa22]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9f9]\\n??:? runModuleUnitTests [0x42b965]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282b8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42823f]\\n??:? _d_run_main [0x4281aa]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x4bf74554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(split(S, \"!?\"));\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvp448_0.d(17): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvp448_0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] sentences = split(S, \".[?!]\");\n \
    \   int count = 0;\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0 && sentence[0] == 'I')\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13c2r1l5.d(17): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13c2r1l5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(string s; S.split(\"\
    .\"))\n    {\n        if(s.front.trim == \"I\")\n            boredoms++;\n   \
    \ }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6gee1im4.d(18): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gee1im4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] sentences = S.split(\"[!?.]\");\n  \
    \  long boredoms = 0;\n    foreach(sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0 && sentence[0] == 'I')\n            boredoms++;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyn5s3qqj.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyn5s3qqj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    int count = 0;\n    for (int i = 0; i < S.length;\
    \ i++)\n    {\n        if (S[i] == 'I')\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeulo3uil.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpeulo3uil.__unittest_L27_C1()\
    \ [0x427aab]\\n??:? void tmpeulo3uil.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb7f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa12]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430054]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb31]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9e9]\\n??:? runModuleUnitTests [0x42b955]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42822f]\\n??:? _d_run_main [0x42819a]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x6a0e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    auto arr = split(S, \".\");\n    long boredoms\
    \ = 0;\n    foreach(e; arr)\n    {\n        auto arr2 = split(e, \"?\");\n   \
    \     foreach(e2; arr2)\n        {\n            auto arr3 = split(e2, \"!\");\n\
    \            foreach(e3; arr3)\n            {\n                if(startsWith(e3.trim,\
    \ \"I\"))\n                    boredoms++;\n            }\n        }\n    }\n\
    \    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hqawe92.d(17): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hqawe92.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    // Split the string into sentences\n    string[]\
    \ split_string = split(S, '.');\n    // Boredom count\n    long count = 0;\n \
    \   foreach(word; split_string) {\n        if(word == \"I\") {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeezx3k7k.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeezx3k7k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    int words = 0;\n    S = S.lower();\n    string[]\
    \ str = split(S, \" \");\n    foreach(string s; str)\n    {\n        if(s == \"\
    i\")\n            words++;\n    }\n    return words;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsheaog83.d(18): Error: no property `lower` for type `string`\\\
    n/tmp/tmpsheaog83.d(19): Error: undefined identifier `split`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsheaog83.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = S.split(\"[.!?]\");\n    int\
    \ count = 0;\n    foreach(string word; words) {\n        if(word.startsWith(\"\
    I \")) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwim6imyg.d(17): Error: no property `split` for type `string`\\\
    n/tmp/tmpwim6imyg.d(20): Error: no property `startsWith` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwim6imyg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n  string[] words = S.split(\"[?!.]\");\n  long boredoms\
    \ = 0;\n  foreach(string word; words)\n    boredoms += word.strip().split(\" \"\
    )[0] == \"I\";\n  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80msb67b.d(17): Error: no property `split` for type `string`\\\
    n/tmp/tmp80msb67b.d(20): Error: no property `strip` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80msb67b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    int count = 0;\n    string[] split = split(S,\
    \ \" .!?\");\n    foreach(string word; split)\n    {\n        if(word == \"I\"\
    )\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxkfjcmak.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxkfjcmak.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long str_length = S.length;\n\
    \    long first_index = S.find(\"I\");\n    while (first_index != -1)\n    {\n\
    \        //Check if there is ., ? or ! after the boredom\n        if (first_index\
    \ + 1 < str_length && (S[first_index + 1] == '.' || S[first_index + 1] == '?'\
    \ || S[first_index + 1] == '!'))\n        {\n            boredoms++;\n       \
    \ }\n        first_index = S.find(\"I\", first_index + 1);\n    }\n    return\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgbzi8fbd.d(19): Error: no property `find` for type `string`\\\
    n/tmp/tmpgbzi8fbd.d(27): Error: no property `find` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbzi8fbd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long borings = 0;\n    S = S.replace(\".\", \"\
    \ !\");\n    S = S.replace(\"?\", \" !\");\n    string[] sentences = S.split(\"\
    !\");\n    foreach(string sentence; sentences) {\n        if(sentence.length >\
    \ 0) {\n            string[] words = sentence.split(\" \");\n            if(words[0]\
    \ == \"I\") {\n                borings++;\n            }\n        }\n    }\n \
    \   return borings;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zvznjr0.d(18): Error: no property `replace` for type `string`\\\
    n/tmp/tmp_zvznjr0.d(19): Error: no property `replace` for type `string`\\n/tmp/tmp_zvznjr0.d(20):\
    \ Error: no property `split` for type `string`\\n/tmp/tmp_zvznjr0.d(23): Error:\
    \ no property `split` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_zvznjr0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
