name: HumanEval_24_largest_divisor
language: d
prompt: "import std.math;\n/*\n For a given number n, find the largest number that\
  \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n*/\n\
  long largest_divisor(long n) \n"
tests: "unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
  \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
  \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
  \ main(){}"
completions: ["{\n    // hint: start your range with 2, and go up to `n/2` or `n`\
    \ whichever is smaller\n    for (long i = n/2; i > 1; i--) {\n        if (n %\
    \ i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n/*\n Write\
    \ a function that uses the largest_divisor() from the previous question to \n\
    \ find the largest divisor of each element in a list. The first parameter should\
    \ be \n a list, and the second parameter should be an integer representing the\
    \ number of \n elements in the list. \n \n    >>> largest_divisors(range(1, 10),\
    \ 3)\n    [9, 9, 9]\n*/\nlong[] largest_divisors(long[] nums, long n) \n{\n  \
    \  long[] divisors = new long[n];\n    foreach (i, num; nums) {\n        divisors[i]\
    \ = largest_divisor(num);\n    }\n    return divisors;\n}\n/*\n Write a function\
    \ that takes in two lists:\n    >>> a = [1, 3, 5, 7, 9]\n    >>> b = [2, 4, 6,\
    \ 8, 10]\n    \n and adds each element from a with the corresponding element from\
    \ b to \n create a new list\n    >>> c = add_lists(a, b)\n    >>> c\n    [3, 7,\
    \ 11, 15, 19]\n \n*/\nlong[] add_lists(long[] a, long[] b) \n{\n    long[] c =\
    \ new long[a.length];\n    foreach (i, val; a) {\n        c[i] = a[i] + b[i];\n\
    \    }\n    return c;\n}\n/*\n For each element in a given list, add 1 to each\
    \ element\n    >>> d = increment([1, 2, 3])\n    >>> d\n    [2, 3, 4]\n*/\nlong[]\
    \ increment(long[] a) \n{\n    foreach (i, val; a) {\n        a[i] += 1;\n   \
    \ }\n    return a;\n}\n/*\n Given a list of numbers and", "{\n    for (; n > 1;\
    \ n--)\n        if ((n % n) == 0) return n;\n    return 1;\n}", "{\n    long largest\
    \ = 0;\n    for (long i = 1; i <= n; i++) \n    {\n        if (n % i == 0) largest\
    \ = i;\n    }\n    return largest;\n}", "{\n\t\n\tfor (long i = n - 1; i > 0;\
    \ i--) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn\
    \ 0;\n}", "{\n    long k = n;\n    while (k > 1) \n    {\n        if (n % k ==\
    \ 0) \n        {\n            return k;\n        }\n        k = k - 1;\n    }\n\
    \    return 1;\n}", "{\n    long result = 1;\n    foreach (i; 2 .. (n / 2 + 1))\n\
    \    {\n        if (n % i == 0)\n        {\n            result = i;\n        }\n\
    \    }\n    return result;\n}", "{\n    for (long i = n-1; i > 0; i--)\n    {\n\
    \        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n\
    \    return 0;\n}", "{\n    for (long i = n - 1; i > 0; i--) \n    {\n       \
    \ if (n % i == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}", "{\n  long i = 0L;\n  long max = 0L;\n  for (i = 1L; i < n; i++)\n \
    \ {\n    if (n % i == 0)\n    {\n      max = i;\n    }\n  }\n  return max;\n}",
  "{\n    long largest = 0;\n    foreach (i; 2..n) {\n        if (n % i == 0) {\n\
    \            largest = i;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long divisor = n;\n    while (divisor >= 1) \n    {\n        if (n % divisor\
    \ == 0) \n        {\n            return divisor;\n        }\n        divisor -=\
    \ 1;\n    }\n}", "{\n    long largest = -1;\n    long i = 2;\n    while (i <=\
    \ n/2) \n    {\n        if (n % i == 0) \n        {\n            largest = i;\n\
    \        }\n        i += 1;\n    }\n    return largest;\n}", "{\n    long largest\
    \ = n - 1;\n    while (n % largest != 0) \n    {\n        largest--;\n    }\n\
    \    return largest;\n}\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor_sqrt(long n) \n{\n    long largest = (long)sqrt(n);\n\
    \    while (n % largest != 0) \n    {\n        largest--;\n    }\n    return largest;\n\
    }", "{\n    if (n % 2 == 0) \n    {\n        for (int i = n/2; i > 0; i--) \n\
    \        {\n            if (n % i == 0) \n            {\n                return\
    \ i;\n            }\n        }\n    }\n    else \n    {\n        for (int i =\
    \ n/2; i > 0; i--) \n        {\n            if (n % i == 0) \n            {\n\
    \                return i;\n            }\n        }\n    }\n}", "{\n    foreach\
    \ (i; 1 .. n)\n    {\n        if (n % i == 0)\n        {\n            return n\
    \ / i;\n        }\n    }\n    return 0;\n}", "{\n  if (n <= 1) return 1;\n  long\
    \ largest;\n  foreach (i; 1 .. n) {\n    if (n % i == 0) {\n      largest = i;\n\
    \    }\n  }\n  return largest;\n}", "{\n    foreach (i; 1 .. sqrt(n)) \n    {\n\
    \        if (n % i == 0) \n        {\n            return i;\n        }\n    }\n\
    \    return 1;\n}", "{\n    long result = n - 1;\n    while (result > 1) \n  \
    \  {\n        if (n % result == 0) \n        {\n            return result;\n \
    \       }\n        else \n        {\n            result -= 1;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long divisor = n / 2;\n    while(divisor\
    \ > 0)\n    {\n        if(n % divisor == 0)\n        {\n            return divisor;\n\
    \        }\n        divisor--;\n    }\n    return 0;\n}", "{\n    long largest_divisor\
    \ = 1;\n    for (long i = 2; i < n; i++) \n    {\n        if ((n % i) == 0) \n\
    \        {\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
