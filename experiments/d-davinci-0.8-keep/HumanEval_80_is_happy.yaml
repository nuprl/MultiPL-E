name: HumanEval_80_is_happy
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n \
  \   Your task is to check if the string is happy or not.\n    A string is happy\
  \ if its length is at least 3 and every 3 consecutive letters are distinct\n   \
  \ For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd)\
  \ => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy)\
  \ => False\n    \n*/\nbool is_happy(string s) \n"
tests: "unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
  ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\"\
  ) == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
  adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
  iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
completions: ["{\n    auto c = s.split(\"\");\n    foreach(ch; c) {\n        if(c[2]\
    \ == c[1] || c[2] == c[0]) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}", "{\n    int len = s.length;\n    if (len < 3)\n    {\n  \
    \      return false;\n    }\n    for (int i = 0; i < len-2; i++)\n    {\n    \
    \    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    bool\
    \ ishappy = true;\n    bool match = false;\n    int count = 0;\n    int ii = 0;\n\
    \    int len = s.length;\n    if (len < 3)\n        return false;\n    for (int\
    \ i = 0; i<len-2; i++)\n    {\n        match = false;\n        for (int ii = 0;\
    \ ii<len-2; ii++)\n        {\n            if (ii != i)\n            {\n      \
    \          if (s[i] == s[ii] && s[i+1] == s[ii+1] && s[i+2] == s[ii+2])\n    \
    \            {\n                    ishappy = false;\n                    return\
    \ ishappy;\n                }\n            }\n        }\n    }\n    return ishappy;\n\
    }", "{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}", "{\n  int sz = s.length;\n\
    \  bool bHappy = true;\n  if (sz >= 3)\n  {\n    for (int i = 0; i < sz-2; i++)\n\
    \    {\n      for (int j = i+1; j < sz-1; j++)\n      {\n        for (int k =\
    \ j+1; k < sz; k++)\n        {\n          if (s[i] == s[j] && s[j] == s[k])\n\
    \          {\n            bHappy = false;\n            break;\n          }\n \
    \       }\n        if (!bHappy)\n          break;\n      }\n      if (!bHappy)\n\
    \        break;\n    }\n  }\n  else\n    bHappy = false;\n  return bHappy;\n}",
  "{\n    import std.algorithm : map, chunk, count;\n    import std.typecons : tuple;\n\
    \    import std.range : empty;\n    import std.array : array;\n    s = s.lowercase;\n\
    \    auto t = tuple(s[0], s[1], s[2]);\n    bool flag = true;\n    //foreach(i;\
    \ s[3..$].chunk(3))\n    //{\n    //    t = tuple(i[0], i[1], i[2]);\n    // \
    \   if(count(t, t[0]) > 1 || count(t, t[1]) > 1 || count(t, t[2]) > 1)\n    //\
    \    {\n    //        flag = false;\n    //        break;\n    //    }\n    //}\n\
    \    auto ar = s[3..$].chunk(3).map!(a => (a[0], a[1], a[2])).array;\n    ar.array.map!(a\
    \ => count(a, a[0]) + count(a, a[1]) + count(a, a[2])).filter!(b => b > 1).empty\
    \ || s.length < 3;\n    return flag;\n}", "{\n    bool has_happy = false;\n  \
    \  if(s.length < 3)\n        return false;\n    for(uint i = 0; i < s.length -\
    \ 2; i++)\n    {\n        if(s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2])\n\
    \        {\n            has_happy = true;\n            break;\n        }\n   \
    \ }\n    return has_happy;\n}", "{\n    if (s.length < 3)\n        return false;\n\
    \    \n    foreach (i; 0 .. s.length - 2)\n    {\n        auto t = tuple(s[i],\
    \ s[i + 1], s[i + 2]);\n        if (t[0] == t[1] || t[0] == t[2] || t[1] == t[2])\n\
    \            return false;\n    }\n    return true;\n}\n/*\nAssuming we have 3\
    \ different tiles,\nfor a TxT board, we have:\nways(1) = 3\nways(2) = 3*3 + 2*3*3\n\
    ways(3) = 3*3*3 + 2*3*3*3 + 2*3*3*3\nways(4) = 3*3*3*3 + 2*3*3*3*3 + 2*3*3*3*3\
    \ + 2*3*3*3*3\nIf we notice, this turns out to be the Fibonacci sequence.\n*/",
  "{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    int i = 0;\n    int j = 3;\n    bool found = false;\n    while(i+2 < s.length)\n\
    \    {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n   \
    \     {\n            found = true;\n            break;\n        }\n        i++;\n\
    \    }\n    return !found;\n}", "{\n    return s.length >= 3 && s.byChunks(3).all!(x\
    \ => x[0] != x[1] && x[1] != x[2] && x[0] != x[2]);\n}", "{\n  auto r = true;\n\
    \  if(s.length>=3)\n  {\n    for(auto i=0;i<s.length-2;i++)\n    {\n      auto\
    \ str = s[i..i+3];\n      auto count = 0;\n      if(str[0]==str[1])\n        count++;\n\
    \      if(str[0]==str[2])\n        count++;\n      if(str[1]==str[2])\n      \
    \  count++;\n      if(count>=2)\n      {\n        r = false;\n        break;\n\
    \      }\n    }\n  }\n  else\n    r = false;\n  return r;\n}", "{\n    int num\
    \ = 0;\n    int len = s.length;\n    int i = 0;\n    while(i < len-1){\n     \
    \   if(s[i] == s[i+1]){\n            num = 1;\n            break;\n        }\n\
    \        i++;\n    }\n    if(num == 1)\n        return false;\n    else \n   \
    \     return true;\n}\n/*\nYou are given an array of integers.\n    The product\
    \ of all the elements in the array should be an even number.\n    If it is, return\
    \ the lowest positive number that is even.\n    If not, return the lowest positive\
    \ number that is odd.\n    Return -1 if there is no such number.\n    For example:\n\
    \    get_k(1,2,4) => 4\n    get_k(1,3,5) => 2\n    get_k(1,2,3) => -1\n    get_k(2,2,2)\
    \ => -1\n    get_k(1,1,2) => 2\n    get_k(3,3,3) => -1\n*/", "{\n    return s.length\
    \ >= 3 && s.all!(a => s.indexOf(a) == s.indexOf(a, s.indexOf(a) + 1));\n}", "{\n\
    \    bool result = true;\n    foreach(size_t i; i < s.length-2)\n    {\n     \
    \   if(s[i] == s[i+1] && s[i+1] == s[i+2])\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    foreach(i;\
    \ 0 .. s.length - 2)\n    {\n        auto tuple = tuple(s[i], s[i + 1], s[i +\
    \ 2]);\n        if(tuple[0] == tuple[1] || tuple[0] == tuple[2] || tuple[1] ==\
    \ tuple[2])\n            return false;\n    }\n    return true;\n}", "{\n    if\
    \ (s.length < 3) return false;\n    string f = \"\" ~ s[0] ~ s[1] ~ s[2];\n  \
    \  string result = \"\" ~ f;\n    for (int i = 3; i < s.length; i++)\n    {\n\
    \        f = \"\" ~ f[1] ~ f[2] ~ s[i];\n        if (result.find(f) == -1) result\
    \ ~= f;\n        else return false;\n    }\n    return true;\n}", "{\n    string[]\
    \ subStr;\n    string tmp = s;\n    int max = s.length;\n    while(max>2)\n  \
    \  {\n        subStr = tmp.split('',3);\n        if(subStr[0]==subStr[1] || subStr[0]==subStr[2]\
    \ || subStr[1]==subStr[2])\n            return false;\n        if(tmp.length<=3)\n\
    \            return true;\n        tmp = tmp[3..$];\n        max--;\n    }\n \
    \   return true;\n}", "{\n    for (size_t i = 0; i < s.length() - 2; i++)\n  \
    \  {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int start = 0;\n\
    \    while(start < s.length - 3)\n    {\n        if(s[start] == s[start + 1] ||\
    \ s[start] == s[start + 2] || s[start + 1] == s[start + 2])\n            return\
    \ false;\n        start += 3;\n    }\n    return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
