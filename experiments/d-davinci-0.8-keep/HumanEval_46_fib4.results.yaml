name: HumanEval_46_fib4
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ 0;\n    } \n    else if (n == 1) \n    {\n        return 0;\n    } \n    else\
    \ if (n == 2) \n    {\n        return 2;\n    } \n    else if (n == 3) \n    {\n\
    \        return 0;\n    } \n    else \n    {\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (int i = 4; i\
    \ <= n; i++) \n        {\n            long temp = d;\n            d = d + c +\
    \ b + a;\n            a = b;\n            b = c;\n            c = temp;\n    \
    \    }\n        return d;\n    }\n}\n/*\nThe Fib3 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib3(0) ->\
    \ 0\n    fib3(1) -> 0\n    fib3(2) -> 2\n    fib3(3) -> 0\n    fib3(n) -> fib3(n-1)\
    \ + fib3(n-2) + fib3(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fib3 number sequence.  Do not use recursion.\n    >>>\
    \ fib3(5)\n    4\n    >>> fib3(6)\n    8\n    >>> fib3(7)\n    14\n*/\nlong fib3(long\
    \ n) \n{\n    if (n == 0) \n    {\n        return 0;\n    } \n    else if (n ==\
    \ 1) \n    {\n        return 0;\n    } \n    else if (n == 2) \n    {\n      \
    \  return 2;\n    } \n    else if (n == 3) \n    {\n        return 0;\n    } \n\
    \    else \n    {\n        long a = 0;\n        long b = 0;\n        long c =\
    \ 2;\n        for (int i = 4; i <= n; i++) \n        {\n            long temp\
    \ = c;\n            c = c + b + a;\n\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv98j4jq8.d(97): Error: found `unittest` instead of statement\\\
    n/tmp/tmpv98j4jq8.d(106): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpv98j4jq8.d(106): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpv98j4jq8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ 0;\n    }\n    else if (n == 1) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 2) \n    {\n        return 2;\n    }\n    else if (n == 3) \n    {\n\
    \        return 0;\n    }\n    else \n    {\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long i = 4;\n    \
    \    while (i <= n) \n        {\n            long m = d;\n            d = c;\n\
    \            c = b;\n            b = a;\n            a = m + c + b + d;\n    \
    \        i++;\n        }\n        return a;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpijf1x_kh.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmpijf1x_kh.__unittest_L56_C1()\
    \ [0x427ae9]\\n??:? void tmpijf1x_kh.__modtest() [0x427b40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b53]\\\
    n??:? __libc_start_main [0xdc219554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    long[long] cache = new long[long];\n\
    \    cache[0] = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n    cache[3] = 0;\n\
    \    cache[4] = 0;\n    cache[5] = 0;\n    cache[6] = 0;\n    cache[7] = 0;\n\
    \    cache[8] = 0;\n    if (n < 8) return cache[n];\n    for (int i = 8; i <=\
    \ n; i++)\n    {\n        cache[i] = cache[i-1] + cache[i-2] + cache[i-3] + cache[i-4];\n\
    \    }\n    return cache[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6of0rhnn.d(21): Error: need size of rightmost array, not type\
    \ `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6of0rhnn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    //The dynamic programming way...\n\
    \    int[] results;\n    results ~= 0;\n    results ~= 0;\n    results ~= 2;\n\
    \    results ~= 0;\n    while(results.length < n+1)\n    {\n        results ~=\
    \ results[$-1] + results[$-2] + results[$-3] + results[$-4];\n    }\n    return\
    \ results[$-1];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    return 0; //implement me\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6cvc88c2.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d15]\\n??:? void tmp6cvc88c2.__unittest_L23_C1()\
    \ [0x427a1c]\\n??:? void tmp6cvc88c2.__modtest() [0x427a94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a8ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fa61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8a5]\\n??:? runModuleUnitTests [0x42b811]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428164]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4280eb]\\n??:? _d_run_main [0x428056]\\n??:? main [0x427aa7]\\\
    n??:? __libc_start_main [0x67faa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n\tTuple!(long, long, long, long) a =\
    \ tuple(1, 0, 0, 0);\n\tTuple!(long, long, long, long) b = tuple(0, 1, 0, 0);\n\
    \t//Tuple!(long, long, long, long) c = tuple(0, 0, 1, 0);\n\t//Tuple!(long, long,\
    \ long, long) d = tuple(0, 0, 0, 1);\n\tif (n <= 1)\n\t\treturn n;\n\telse\n\t\
    {\n\t\tTuple!(long, long, long, long) result = tuple(0, 0, 0, 0);\n\t\twhile (n\
    \ > 1)\n\t\t{\n\t\t\tn--;\n\t\t\tresult[0] = a[0] * b[0] + a[1] * b[1] + a[2]\
    \ * b[2] + a[3] * b[3];\n\t\t\tresult[1] = a[0] * b[1] + a[1] * b[0];\n\t\t\t\
    result[2] = a[0] * b[2] + a[2] * b[0];\n\t\t\tresult[3] = a[0] * b[3] + a[3] *\
    \ b[0];\n\t\t\ta = b;\n\t\t\tb = result;\n\t\t}\n\t\treturn result[0];\n\t}\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4znzocxc.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299bd]\\n??:? void tmp4znzocxc.__unittest_L43_C1()\
    \ [0x42882c]\\n??:? void tmp4znzocxc.__modtest() [0x429424]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e367]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d276]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b9d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43204c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431b29]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d24d]\\n??:? runModuleUnitTests [0x42e13d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429d93]\\n??:? _d_run_main [0x429cfe]\\n??:? main [0x429437]\\\
    n??:? __libc_start_main [0x18708554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n  if (n < 4) \n  {\n    return n;\n\
    \  }\n  auto curr = n;\n  auto prev1 = n - 1;\n  auto prev2 = n - 2;\n  auto prev3\
    \ = n - 3;\n  auto prev4 = n - 4;\n  return curr + prev1 + prev2 + prev3 + prev4;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpytytmcom.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d65]\\n??:? void tmpytytmcom.__unittest_L32_C1()\
    \ [0x427a6c]\\n??:? void tmpytytmcom.__modtest() [0x427ae4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a91e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fab1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8f5]\\n??:? runModuleUnitTests [0x42b861]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42813b]\\n??:? _d_run_main [0x4280a6]\\n??:? main [0x427af7]\\\
    n??:? __libc_start_main [0xbf429554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n        return [0, 0,\
    \ 2, 0][n];\n    auto fibs = tuple(0, 0, 2, 0);\n    foreach (i; 4 .. n + 1)\n\
    \    {\n        fibs[0] = fibs[1];\n        fibs[1] = fibs[2];\n        fibs[2]\
    \ = fibs[3];\n        fibs[3] = fibs[0] + fibs[1] + fibs[2];\n    }\n    return\
    \ fibs[3];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphia250tl.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428f9d]\\n??:? void tmphia250tl.__unittest_L33_C1()\
    \ [0x4283f5]\\n??:? void tmphia250tl.__modtest() [0x428a04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dbdf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42caee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431415]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4318c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4313a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42cac5]\\n??:? runModuleUnitTests [0x42d9b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429460]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4293e7]\\n??:? _d_run_main [0x429352]\\n??:? main [0x428a17]\\\
    n??:? __libc_start_main [0x212a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{ \n    long a = 0, b = 0, c = 2, d = 0,\
    \ e; \n    if (n == 0) \n        return a; \n    if (n == 1) \n        return\
    \ b; \n    if (n == 2) \n        return c; \n    if (n == 3) \n        return\
    \ d; \n    for (int i = 4; i <= n; i++) \n    { \n        e = a + b + c + d; \n\
    \        a = b; \n        b = c; \n        c = d; \n        d = e; \n    } \n\
    \    return e; \n} \n/*\nImplement a stack which has the following methods:\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_58r4w6j.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_58r4w6j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    // TODO: implement me\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq5e6n6sj.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d15]\\n??:? void tmpq5e6n6sj.__unittest_L24_C1()\
    \ [0x427a1c]\\n??:? void tmpq5e6n6sj.__modtest() [0x427a94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a8ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fa61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42f9ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8a5]\\n??:? runModuleUnitTests [0x42b811]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428164]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4280eb]\\n??:? _d_run_main [0x428056]\\n??:? main [0x427aa7]\\\
    n??:? __libc_start_main [0x2e810554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 0) \n        return 0;\n\
    \    if (n == 1) \n        return 0;\n    if (n == 2) \n        return 2;\n  \
    \  if (n == 3) \n        return 0;\n    long[] dp = new long[n+1];\n    dp[0]\
    \ = 0;\n    dp[1] = 0;\n    dp[2] = 2;\n    dp[3] = 0;\n    for (long i = 4; i\
    \ <= n; i++) \n    {\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n\
    \    }\n    return dp[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n   \
    \ assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n    if (n\
    \ == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    auto\
    \ fib = [](long a, long b, long c, long d) { return a + b + c + d; };\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    long i = 4;\n    while (i <= n) {\n       \
    \ long e = fib(a, b, c, d);\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n        i++;\n    }\n    return fib(a, b, c, d);\n}\n/*\nYou\
    \ are given an array of integers, nums and a target value, target.  Please write\
    \ a function that determines if there are any combinations of numbers in nums\
    \ that will add up to target.\n    >>> combination_sum([2, 3, 7, 1], 8)\n    true\n\
    \    >>> combination_sum([2, 3, 7, 1], 9)\n    false\n    >>> combination_sum([2,\
    \ 3, 7, 1], 13)\n    true\n*/\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9say1kob.d(25): Error: found `a` when expecting `.` following\
    \ long\\n/tmp/tmp9say1kob.d(25): Error: found `,` when expecting identifier following\
    \ `long`.\\n/tmp/tmp9say1kob.d(25): Error: found `long` when expecting `,`\\n/tmp/tmp9say1kob.d(25):\
    \ Error: found `c` when expecting `.` following long\\n/tmp/tmp9say1kob.d(25):\
    \ Error: found `,` when expecting identifier following `long`.\\n/tmp/tmp9say1kob.d(25):\
    \ Error: found `long` when expecting `,`\\n/tmp/tmp9say1kob.d(25): Error: semicolon\
    \ expected following auto declaration, not `{`\\n/tmp/tmp9say1kob.d(25): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9say1kob.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n        return\
    \ -1;\n    }\n    else if (n == 0) \n    {\n        return 0;\n    }\n    else\
    \ if (n == 1) \n    {\n        return 0;\n    }\n    else if (n == 2) \n    {\n\
    \        return 2;\n    }\n    else if (n == 3) \n    {\n        return 0;\n \
    \   }\n    else \n    {\n        long fib0 = 0;\n        long fib1 = 0;\n    \
    \    long fib2 = 2;\n        long fib3 = 0;\n        long fib4 = 0;\n        for\
    \ (size_t i = 4; i <= n; i++) \n        {\n            fib4 = fib0 + fib1 + fib2\
    \ + fib3;\n            fib0 = fib1;\n            fib1 = fib2;\n            fib2\
    \ = fib3;\n            fib3 = fib4;\n        }\n        return fib4;\n    }\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n\tlong result=0;\n\tif(n>=0)\n\t{\n\t\
    \tif(n==0)\n\t\t\tresult=0;\n\t\telse if(n==1)\n\t\t\tresult=0;\n\t\telse if(n==2)\n\
    \t\t\tresult=2;\n\t\telse if(n==3)\n\t\t\tresult=0;\n\t\telse\n\t\t{\n\t\t\tint[]\
    \ a = new int[4];\n\t\t\ta[0]=0;\n\t\t\ta[1]=0;\n\t\t\ta[2]=2;\n\t\t\ta[3]=0;\n\
    \t\t\tfor(int i=4;i<=n;i++)\n\t\t\t{\n\t\t\t\ta[0]=a[1];\n\t\t\t\ta[1]=a[2];\n\
    \t\t\t\ta[2]=a[3];\n\t\t\t\ta[3]=a[0]+a[1]+a[2]+a[3];\n\t\t\t}\n\t\t\tresult=a[3];\n\
    \t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp96w0caqs.d(55): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp96w0caqs.__unittest_L51_C1()\
    \ [0x427f7c]\\n??:? void tmp96w0caqs.__modtest() [0x427ff4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c24f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43036d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43081c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0b9]\\n??:? runModuleUnitTests [0x42c025]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428738]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286bf]\\n??:? _d_run_main [0x42862a]\\n??:? main [0x428007]\\\
    n??:? __libc_start_main [0x8f42b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    struct Matrix3X3 {\n        long[3][3]\
    \ arr;\n    }\n    auto multiply(Matrix3X3 a, Matrix3X3 b) {\n        Matrix3X3\
    \ ret;\n        foreach(i; 0..3)\n            foreach(j; 0..3) {\n           \
    \     ret.arr[i][j] = 0;\n                foreach(k; 0..3)\n                 \
    \   ret.arr[i][j] += a.arr[i][k] * b.arr[k][j];\n            }\n        return\
    \ ret;\n    }\n    auto fastExponentiation(Matrix3X3 mat, long exp) {\n      \
    \  if (exp == 0)\n            return Matrix3X3();\n        if (exp == 1)\n   \
    \         return mat;\n        auto t = fastExponentiation(mat, exp >> 1);\n \
    \       t = multiply(t, t);\n        if (exp & 1)\n            t = multiply(t,\
    \ mat);\n        return t;\n    }\n    Matrix3X3 F;\n    F.arr[0][0] = 0;\n  \
    \  F.arr[0][1] = 1;\n    F.arr[0][2] = 0;\n    F.arr[1][0] = 0;\n    F.arr[1][1]\
    \ = 0;\n    F.arr[1][2] = 1;\n    F.arr[2][0] = 1;\n    F.arr[2][1] = 1;\n   \
    \ F.arr[2][2] = 1;\n    Matrix3X3 R;\n    R.arr[0][0] = 1;\n    R.arr[0][1] =\
    \ 0;\n    R.arr[0][2] = 0;\n    R.arr[1][0] = 0;\n    R.arr[1][1] = 1;\n    R.arr[1][2]\
    \ = 0;\n    R.arr[2][0] = 0;\n    R.arr[2][1] = 0;\n    R.arr[2][2] = 1;\n   \
    \ auto res = fastExponentiation(F, n - 1);\n    res = multiply(res, R);\n   \n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7fylxp2n.d(68): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fylxp2n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n    {\n        return\
    \ -1;\n    }\n    else if (n == 0)\n    {\n        return 0;\n    }\n    else\
    \ if (n == 1)\n    {\n        return 0;\n    }\n    else if (n == 2)\n    {\n\
    \        return 2;\n    }\n    else if (n == 3)\n    {\n        return 0;\n  \
    \  }\n    else\n    {\n        long prev_4th_num = 0;\n        long prev_3rd_num\
    \ = 0;\n        long prev_2nd_num = 2;\n        long prev_1st_num = 0;\n     \
    \   long current_num = 0;\n        for (long i = 4; i <= n; i++)\n        {\n\
    \            current_num = prev_4th_num + prev_3rd_num + prev_2nd_num + prev_1st_num;\n\
    \            prev_4th_num = prev_3rd_num;\n            prev_3rd_num = prev_2nd_num;\n\
    \            prev_2nd_num = prev_1st_num;\n            prev_1st_num = current_num;\n\
    \        }\n        return current_num;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{ \n  if (n == 0) \n    return 0; \n  else\
    \ if (n == 1) \n    return 0; \n  else if (n == 2) \n    return 2; \n  else if\
    \ (n == 3) \n    return 0; \n  else\n  { \n    long a = 0, b = 0, c = 2, d = 0;\
    \ \n    for (long i = 4; i <= n; i++) \n    { \n      d = a + b + c; \n      a\
    \ = b; \n      b = c; \n      c = d; \n    } \n    return d; \n  } \n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiqgyeunu.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427db5]\\n??:? void tmpiqgyeunu.__unittest_L42_C1()\
    \ [0x427ae1]\\n??:? void tmpiqgyeunu.__modtest() [0x427b38]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42badb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a96e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a945]\\n??:? runModuleUnitTests [0x42b8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428204]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42818b]\\n??:? _d_run_main [0x4280f6]\\n??:? main [0x427b4b]\\\
    n??:? __libc_start_main [0x8aae1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{ \n    if (n <= 0) return 0;\n    if (n\
    \ == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    if\
    \ (n == 4) return 2;\n    long first = 0;\n    long second = 2;\n    long third\
    \ = 0;\n    long fourth = 2;\n    long result = 0;\n    for (long i = 5; i <=\
    \ n; i++)\n    {\n        result = first + second + third + fourth;\n        first\
    \ = second;\n        second = third;\n        third = fourth;\n        fourth\
    \ = result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n<0)\n        return -1;\n \
    \   \n    if (n==0)\n        return 0;\n    \n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long temp;\n    foreach(i; 1..n) \n   \
    \ {\n        temp = a;\n        a = b;\n        b = c;\n        c = d;\n     \
    \   d = temp + b + c + d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkfbqy44g.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpkfbqy44g.__unittest_L42_C1()\
    \ [0x427ab4]\\n??:? void tmpkfbqy44g.__modtest() [0x427b2c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b3f]\\\
    n??:? __libc_start_main [0x4eeaa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n\
    \    14\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n        return 0;\n\
    \    if (n == 1) \n        return 0;\n    if (n == 2) \n        return 2;\n  \
    \  if (n == 3) \n        return 0;\n    \n    auto a = 0L;\n    auto b = 0L;\n\
    \    auto c = 2L;\n    auto d = 0L;\n    auto result = 0L;\n    auto i = 4L;\n\
    \    while (i <= n)\n    {\n        result = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = result;\n        i++;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
