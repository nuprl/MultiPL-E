name: HumanEval_143_words_in_sentence
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter,map;\n    import std.math :\
    \ isPrime;\n    auto words = split(sentence);\n    return to!string(words.filter!(w\
    \ => w.length.isPrime).map!(w => w ~ \" \"));\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpss19yv2f.d(27): Error: module `std.math` import `isPrime` not\
    \ found\\n/tmp/tmpss19yv2f.d(28): Error: undefined identifier `split`\\n/tmp/tmpss19yv2f.d(29):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpss19yv2f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string res;\n    string[] words = split(sentence);\n    foreach(string\
    \ word; words)\n    {\n        if(isPrime(word.length))\n        {\n         \
    \   res ~= word ~ \" \";\n        }\n    }\n    return res.trimRight();\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6hg06ca2.d(27): Error: undefined identifier `split`\\n/tmp/tmp6hg06ca2.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp6hg06ca2.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6hg06ca2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.conv;\n    import std.array;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.string;\n    return sentence.split(\"\
    \ \").filter!(a => isPrime(a.length)).joiner(\" \");\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztf7cffz.d(34): Error: undefined identifier `isPrime`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):\
    \        instantiated from here: `FilterResult!(__lambda2, string[])`\\n/tmp/tmpztf7cffz.d(34):\
    \        instantiated from here: `filter!(string[])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpztf7cffz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable \n    all_primes =\n    [\n        2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97,\n        101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199,\n        211, 223, 227, 229, 233,\
    \ 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,\n        307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\n        401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\n\
    \        503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n\
    \        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691,\n        701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773,\
    \ 787, 797,\n        809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887,\n        907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997\n    ];\n    \n    return joiner!(\" \")(\n        sentence.split(\"\
    \ \")\n            .filter!(a => all_primes.canFind(a.length))\n            .map!(a\
    \ => a)\n    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2cl4_y3q.d(41): Error: template instance `joiner!\" \"` template\
    \ `joiner` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp2cl4_y3q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split(\" \");\n    string result\
    \ = \"\";\n    foreach(word; words) {\n        if(word.length.isPrime) {\n   \
    \         result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnrlc6zp.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpmnrlc6zp.d(29): Error: no property `isPrime` for type `ulong`\\n/tmp/tmpmnrlc6zp.d(33):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmnrlc6zp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.range\
    \ : take, takeWhile;\n    import std.math : isPrime;\n    static auto primes =\
    \ takeWhile!(isPrime)(iota(2));\n    return sentence.split\n    (\n        ' '\n\
    \    )\n    .filter!(x => x.length.isPrime)\n    .join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm272wasn.d(27): Error: module `std.range` import `takeWhile`\
    \ not found\\n/tmp/tmpm272wasn.d(28): Error: module `std.math` import `isPrime`\
    \ not found\\n/tmp/tmpm272wasn.d(30): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm272wasn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split(\" \");\n    auto is_prime\
    \ = [](size_t x) {\n        for (size_t d = 2; d <= sqrt(x); d++) {\n        \
    \    if (x % d == 0) {\n                return false;\n            }\n       \
    \ }\n        return true;\n    };\n    string res = \"\";\n    foreach (i, word;\
    \ words) {\n        if (is_prime(word.length)) {\n            res ~= word ~ \"\
    \ \";\n        }\n    }\n    return res.rstrip();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbv7x9vdg.d(27): Error: found `x` when expecting `,`\\n/tmp/tmpbv7x9vdg.d(27):\
    \ Error: semicolon expected following auto declaration, not `{`\\n/tmp/tmpbv7x9vdg.d(34):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbv7x9vdg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split;\n    string result = \"\"\
    ;\n    for (int i = 0; i < words.length; i++)\n    {\n        if (isPrime(words[i].length))\n\
    \        {\n            result ~= words[i] ~= \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6pr70dxz.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmp6pr70dxz.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmp6pr70dxz.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6pr70dxz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence);\n    auto is_prime = (int val)\
    \ => {\n        if (val <= 1) return false;\n        else if (val == 2) return\
    \ true;\n        else if (val % 2 == 0) return false;\n        else\n        {\n\
    \            for (int i = 3; i <= val/2; i+=2)\n            {\n              \
    \  if (val % i == 0) return false;\n            }\n            return true;\n\
    \        }\n    };\n    auto new_words = words.filter!(word => is_prime(word.length));\n\
    \    return join(new_words);\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz82c8_w1.d(26): Error: undefined identifier `split`\\n/tmp/tmpz82c8_w1.d(41):\
    \ Error: undefined identifier `join`, did you mean function `main`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz82c8_w1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable char[] delimiters = [ ' ', '\\n', '\\t' ];\n  \
    \  immutable words = split(sentence, delimiters);\n    immutable primes = [ 2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97 ];\n    // map from char to index of primes array\n    immutable\
    \ asciiToPrimeIdx = [ asciiToPrimeIdx[char.min .. char.max]\n        .assign(iota(char.min,\
    \ char.max).map!(c => \n            primes.canFind(p => p == c.to!int) ? primes.indexOf(c.to!int)\
    \ : -1\n        )\n    ) ];\n    immutable primeLengths = words.map!(w => \n \
    \       w.sum!(c => \n            asciiToPrimeIdx[c] >= 0 ? 1 : 0\n        )\n\
    \    );\n    string result = \"\";\n    foreach(index, word; words)\n    {\n \
    \       if(primeLengths[index] > 0)\n        {\n            result ~= \" \" ~\
    \ word;\n        }\n    }\n    return result.trim;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsohmekz.d(27): Error: undefined identifier `split`\\n/tmp/tmpfsohmekz.d(30):\
    \ Error: undefined identifier `asciiToPrimeIdx`\\n/tmp/tmpfsohmekz.d(48): Error:\
    \ no property `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfsohmekz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto res = split(sentence);\n    string result = \"\";\n\
    \    foreach(i,n; res)\n    {\n        if(isPrime(n.length))\n        {\n    \
    \        result ~= n ~ \" \";\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxt4paxm3.d(26): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxt4paxm3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    enum isPrime(int n) pure nothrow \n    {\n        if (n <\
    \ 2) \n            return false;\n        if (n == 2) \n            return true;\n\
    \        if (n % 2 == 0) \n            return false;\n        for (int d = 3;\
    \ d <= sqrt(n); d += 2) \n            if (n % d == 0) \n                return\
    \ false;\n        return true;\n    }\n    import std.algorithm : map, filter,\
    \ joiner;\n    auto words = sentence.split(\" \");\n    string res = words.filter!(a\
    \ => isPrime(a.length)).map!(a => a ~ \" \").joiner.to!string;\n    return res[0\
    \ .. $ - 1];\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n   \
    \ assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets\
    \ go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4dar81o.d(34): Error: `std.math.sqrt` called with argument types\
    \ `(int)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpl4dar81o.d(40): Error: no property `split`\
    \ for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4dar81o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string [] words = sentence.split(\" \");\n    string result\
    \ = \"\";\n    foreach(w; words)\n    {\n        if(isPrime(w.length))\n     \
    \   {\n            result ~= w ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpect4uc3_.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpect4uc3_.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmpect4uc3_.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpect4uc3_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.string;\n    import std.algorithm;\n    import\
    \ std.math;\n    import std.array;\n    auto words = sentence.split(\" \");\n\
    \    return words.filter!(x => isPrime(x.length)).join(\" \");\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfzufelkc.d(31): Error: undefined identifier `isPrime`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):\
    \        instantiated from here: `FilterResult!(__lambda2, string[])`\\n/tmp/tmpfzufelkc.d(31):\
    \        instantiated from here: `filter!(string[])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfzufelkc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string newSentence\
    \ = \"\";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            newSentence ~= word ~ \" \";\n        }\n    }\n    return\
    \ newSentence.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr_12un1.d(26): Error: undefined identifier `split`\\n/tmp/tmpcr_12un1.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpcr_12un1.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcr_12un1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split(\" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpitha6ufx.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpitha6ufx.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmpitha6ufx.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpitha6ufx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string result = \"\";\n    string[] words = sentence.split();\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= \" \" ~ word;\n        }\n    }\n    return result.stripLeft;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwqxztecz.d(27): Error: no property `split` for type `string`\\\
    n/tmp/tmpwqxztecz.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmpwqxztecz.d(35):\
    \ Error: no property `stripLeft` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwqxztecz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    bool [] primes = new bool[100];\n    bool [] sieve = new\
    \ bool[100];\n    bool [] visited = new bool[100];\n    for (int i = 0; i < 100;\
    \ i++)\n    {\n        primes[i] = true;\n        sieve[i] = true;\n        visited[i]\
    \ = false;\n    }\n    for (int i = 2; i < 100; i++)\n    {\n        if (sieve[i])\n\
    \        {\n            for (int j = i*i; j < 100; j += i)\n            {\n  \
    \              sieve[j] = false;\n            }\n        }\n    }\n    foreach\
    \ (string word; sentence.split(\" \"))\n    {\n        int len = word.length;\n\
    \        if (len > 1)\n        {\n            primes[len] = false;\n        }\n\
    \    }\n    string result = \"\";\n    foreach (string word; sentence.split(\"\
    \ \"))\n    {\n        int len = word.length;\n        if (primes[len] && !visited[len])\n\
    \        {\n            result += word + \" \";\n            visited[len] = true;\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjyrmped.d(45): Error: no property `split` for type `string`\\\
    n/tmp/tmpjjyrmped.d(54): Error: no property `split` for type `string`\\n/tmp/tmpjjyrmped.d(63):\
    \ Error: no property `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjjyrmped.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string result = \"\";\n    immutable is_prime = [true,true,false]\
    \ ~ [true,false,false];\n    immutable len = sentence.length;\n    foreach(i,substr;enumerate(split(sentence)))\n\
    \    {\n        immutable space = (i < len - 1 ? \" \" : \"\");\n        auto\
    \ len = substr.length;\n        if(len <= 3)\n        {\n            if(is_prime[len])\n\
    \            {\n                result ~= substr ~ space;\n            }\n   \
    \     }\n        else\n        {\n            foreach(j;2..(len/2 + 1))\n    \
    \        {\n                if(len % j == 0)\n                {\n            \
    \        goto next;\n                }\n            }\n            result ~= substr\
    \ ~ space;\n        }\n        next:\n        continue;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmuy6lll1.d(29): Error: undefined identifier `enumerate`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmuy6lll1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] parts = split(sentence);\n    string result = \"\
    \";\n    foreach(w; parts)\n    {\n        if(isPrime(w.length))\n        {\n\
    \            result ~= w ~ \" \";\n        }\n    }\n    return result.length\
    \ ? result[0..$-1] : result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2uypbc9d.d(26): Error: undefined identifier `split`\\n/tmp/tmp2uypbc9d.d(30):\
    \ Error: undefined identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2uypbc9d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
