name: HumanEval_85_add
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    return\
    \ (reduce!(a => b => a + b)(filter!(a => isEven(a) && (cast(long)dg(a).index %\
    \ 2) == 1)(lst)))(0);\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ktuch4i.d(13): Error: template instance `reduce!((a) => (b)\
    \ => a + b)` template `reduce` is not defined\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0ktuch4i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    int\
    \ count = 0;\n    foreach(long i; lst)\n    {\n        if(i % 2 == 0 && count\
    \ % 2 != 0)\n        {\n            count += i;\n        }\n        count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcg4v0nr3.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281a5]\\n??:? void tmpcg4v0nr3.__unittest_L24_C1()\
    \ [0x427df0]\\n??:? void tmpcg4v0nr3.__modtest() [0x427f24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b046]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430688]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430165]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b01d]\\n??:? runModuleUnitTests [0x42bf89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42857b]\\n??:? _d_run_main [0x4284e6]\\n??:? main [0x427f37]\\\
    n??:? __libc_start_main [0x13359554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    foreach(i,v; lst)\n    {\n        if(i%2!=0)\n        {\n    \
    \        if(v%2==0)\n            {\n                sum+=v;\n            }\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    return\
    \ reduce!q{a + b}(lst.indices.filter!(a => a % 2 == 1).map!(i => lst[i]).filter!(a\
    \ => a % 2 == 0).array());\n}\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp70ytnv7w.d(13): Error: template instance `reduce!\"a + b\"` template\
    \ `reduce` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp70ytnv7w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n  long\
    \ sum = 0;\n  for(int i = 0; i < lst.length; i++)\n  {\n    if( i % 2 == 1 &&\
    \ lst[i] % 2 == 0)\n    {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < lst.length; i += 2)\n    {\n        if(lst[i]\
    \ % 2 == 0)\n        {\n            result += lst[i];\n        }\n    }\n    return\
    \ result;\n}\nlong add(long[] lst)\n{\n    long result = 0;\n    foreach(n; lst)\n\
    \    {\n        if(n % 2 == 0)\n        {\n            result += n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparst49sl.d(39): Error: `tmparst49sl.add` called with argument\
    \ types `(long[])` matches both:\\n/tmp/tmparst49sl.d(11):     `tmparst49sl.add(long[]\
    \ lst)`\\nand:\\n/tmp/tmparst49sl.d(23):     `tmparst49sl.add(long[] lst)`\\n/tmp/tmparst49sl.d(40):\
    \ Error: `tmparst49sl.add` called with argument types `(long[])` matches both:\\\
    n/tmp/tmparst49sl.d(11):     `tmparst49sl.add(long[] lst)`\\nand:\\n/tmp/tmparst49sl.d(23):\
    \     `tmparst49sl.add(long[] lst)`\\n/tmp/tmparst49sl.d(41): Error: `tmparst49sl.add`\
    \ called with argument types `(long[])` matches both:\\n/tmp/tmparst49sl.d(11):\
    \     `tmparst49sl.add(long[] lst)`\\nand:\\n/tmp/tmparst49sl.d(23):     `tmparst49sl.add(long[]\
    \ lst)`\\n/tmp/tmparst49sl.d(42): Error: `tmparst49sl.add` called with argument\
    \ types `(long[])` matches both:\\n/tmp/tmparst49sl.d(11):     `tmparst49sl.add(long[]\
    \ lst)`\\nand:\\n/tmp/tmparst49sl.d(23):     `tmparst49sl.add(long[] lst)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparst49sl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    return\
    \ lst.retro.filter!(x => x % 2 == 0 && lst.indexOf(x) % 2 != 0).sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2o20fjpx.d(13): Error: no property `retro` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o20fjpx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    int n = lst.length;\n    foreach(i;0..n)\n    {\n        if(i%2\
    \ == 0 && lst[i]%2 == 0)\n        {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5zt1oi4.d(14): Error: cannot implicitly convert expression `lst.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd5zt1oi4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    for(long i = 0; i < lst.length; i++)\n    {\n        if(lst[i]\
    \ % 2 == 0 && (i + 1) % 2 != 0)\n        {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk2ak6vj0.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281cd]\\n??:? void tmpk2ak6vj0.__unittest_L23_C1()\
    \ [0x427e18]\\n??:? void tmpk2ak6vj0.__modtest() [0x427f4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c24f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430275]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430724]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430201]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0b9]\\n??:? runModuleUnitTests [0x42c025]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428690]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428617]\\n??:? _d_run_main [0x428582]\\n??:? main [0x427f5f]\\\
    n??:? __libc_start_main [0xffa04554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i % 2 ==\
    \ 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    foreach(int i, int value; lst)\n    {\n        if(i % 2 != 0 &&\
    \ value % 2 == 0)\n        {\n            sum += value;\n        }\n    }\n  \
    \  return sum;\n}\n// This method uses std.math.isOdd and std.typecons.tuple to\
    \ accumulate the sum.\nlong add1(long[] lst) \n{\n    long sum = 0;\n    foreach(tuple(int,\
    \ long) i; zip(iota(lst.length), lst))\n    {\n        if(isOdd(i[0]) && i[1]\
    \ % 2 == 0)\n        {\n            sum += i[1];\n        }\n    }\n    return\
    \ sum;\n}\n/*\n    Examples:\n        add2([4, 2, 6, 7]) ==> 2 \n*/\nlong add2(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(int i, int value; lst)\n    {\n   \
    \     if(isOdd(i) && value % 2 == 0)\n        {\n            sum += value;\n \
    \       }\n    }\n    return sum;\n}\n/*\n    Examples:\n        add3([4, 2, 6,\
    \ 7]) ==> 2 \n*/\nlong add3(long[] lst) \n{\n    long sum = 0;\n    foreach(tuple(int,\
    \ long) i; zip(iota(lst.length), lst))\n    {\n        if(isOdd(i[0]) && i[1]\
    \ % 2 == 0)\n        {\n            sum += i[1];\n        }\n    }\n    return\
    \ sum;\n}\n/*\n    Examples:\n        add4([4, 2, 6, 7]) ==> 2 \n*/\nlong add4(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(int i, int value; lst)\n    {\n   \
    \     if(isOdd(i) && value % 2 == 0)\n        {\n            sum += value;\n \
    \       }\n    }\n    return sum;\n}\n/*\n   \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wiiox36.d(27): Error: function declaration without return type.\
    \ (Note that constructors are always named `this`)\\n/tmp/tmp6wiiox36.d(27): Error:\
    \ no identifier for declarator `tuple(int, long)`\\n/tmp/tmp6wiiox36.d(27): Error:\
    \ found `i` when expecting `;`\\n/tmp/tmp6wiiox36.d(27): Error: expression expected,\
    \ not `;`\\n/tmp/tmp6wiiox36.d(27): Error: found `zip` when expecting `)`\\n/tmp/tmp6wiiox36.d(27):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmp6wiiox36.d(59):\
    \ Error: function declaration without return type. (Note that constructors are\
    \ always named `this`)\\n/tmp/tmp6wiiox36.d(59): Error: no identifier for declarator\
    \ `tuple(int, long)`\\n/tmp/tmp6wiiox36.d(59): Error: found `i` when expecting\
    \ `;`\\n/tmp/tmp6wiiox36.d(59): Error: expression expected, not `;`\\n/tmp/tmp6wiiox36.d(59):\
    \ Error: found `zip` when expecting `)`\\n/tmp/tmp6wiiox36.d(59): Error: found\
    \ `)` when expecting `;` following statement\\n/tmp/tmp6wiiox36.d(84): Error:\
    \ unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6wiiox36.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i%2 != 0 && v%2 == 0)\n\
    \        {\n            sum += v;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum = 0;\n    for(long i = 0; i < lst.length; i++)\n    {\n        if(i % 2\
    \ == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long\
    \ sum=0;\n    foreach(elem;lst)\n    {\n        if(elem%2==0 && elem!=lst[0])\n\
    \        {\n            sum+=elem;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5af84elp.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281b5]\\n??:? void tmp5af84elp.__unittest_L23_C1()\
    \ [0x427e64]\\n??:? void tmp5af84elp.__modtest() [0x427f34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c237]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43025d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43070c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a1]\\n??:? runModuleUnitTests [0x42c00d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428678]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285ff]\\n??:? _d_run_main [0x42856a]\\n??:? main [0x427f47]\\\
    n??:? __libc_start_main [0x226e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    long[]\
    \ arr = lst[1..$];\n    if(arr.length == 1)\n    {\n        return arr[0];\n \
    \   }\n    int cnt = 0;\n    long sum = 0;\n    for(cnt = 0; cnt < arr.length;\
    \ cnt += 2)\n    {\n        sum += arr[cnt];\n    }\n    return sum;\n}\n//Test\
    \ Cases\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyjttjfdw.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpyjttjfdw.__unittest_L27_C1()\
    \ [0x427e8c]\\n??:? void tmpyjttjfdw.__modtest() [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430285]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430211]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c9]\\n??:? runModuleUnitTests [0x42c035]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xb2ae6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    return\
    \ lst\n        .filter!(e => e % 2 == 0)\n        .filter!((e, i) => i % 2 ==\
    \ 1)\n        .sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqemzjzq.d(14): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqemzjzq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n  return\
    \ 0;\n}\n```\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2oabmh_.d(15): Error: declaration expected, not `\"\"`\\n/tmp/tmpy2oabmh_.d(15):\
    \ Error: unterminated string constant starting at /tmp/tmpy2oabmh_.d(15)\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2oabmh_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    int\
    \ sum = 0;\n    foreach(index, item; lst)\n    {\n        if(index % 2 != 0 &&\
    \ item % 2 == 0)\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n    return\
    \ zip(filter!((a,i) => (a%2==0 && i%2!=0))(lst), iota(lst.length)).map!(a => a[0]).reduce!((a,b)\
    \ => a+b)(0);\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1bo6sf3.d(13): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1bo6sf3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        add([4, 2, 6, 7]) ==> 2 \n    \n*/\nlong add(long[] lst) \n{\n  long\
    \ total = 0;\n  long[] temp = [];\n  for(int i = 0; i < lst.length; i++)\n  {\n\
    \    if(i % 2 == 1 && lst[i] % 2 == 0)\n    {\n      temp ~= lst[i];\n    }\n\
    \  }\n  foreach(element; temp)\n  {\n    total += element;\n  }\n  return total;\n\
    }\n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp551x2dit.d(28): Error: declaration expected, not `*`\\n/tmp/tmp551x2dit.d(33):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp551x2dit.d(34): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp551x2dit.d(35): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp551x2dit.d(36): Error: declaration expected, not `assert`\\\
    n/tmp/tmp551x2dit.d(37): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp551x2dit.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
