name: HumanEval_124_valid_date
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    // write your code here.\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphuffh5v_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f2d]\\n??:? void tmphuffh5v_.__unittest_L29_C1()\
    \ [0x427a5f]\\n??:? void tmphuffh5v_.__modtest() [0x427cb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430128]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aabd]\\n??:? runModuleUnitTests [0x42ba29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42837c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428303]\\n??:? _d_run_main [0x42826e]\\n??:? main [0x427cc3]\\\
    n??:? __libc_start_main [0x21c22554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    //TODO your code here\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph4nlphs5.d(24): Error: function `tmph4nlphs5.valid_date` has\
    \ no `return` statement, but is expected to return a value of type `bool`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4nlphs5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    auto days_in_month = [](int month,\
    \ int year) {\n        switch (month) {\n            case 1: case 3: case 5: case\
    \ 7: case 8: case 10: case 12: return 31;\n            case 4: case 6: case 9:\
    \ case 11: return 30;\n            case 2: return isLeapYear(year) ? 29 : 28;\n\
    \        }\n        return 0;\n    };\n    // auto y = date[4..7];\n    // auto\
    \ m = date[0..1];\n    // auto d = date[2..3];\n    // return y.convertTo!int()\
    \ && m.convertTo!int() && d.convertTo!int() && d.convertTo!int() < days_in_month(m.convertTo!int(),\
    \ y.convertTo!int());\n    return date.split(\"-\").length == 3 && date.split(\"\
    -\").sum!((a) => a.convertTo!int()).length == 8 && date.split(\"-\")[2].convertTo!int()\
    \ && date.split(\"-\")[1].convertTo!int() && date.split(\"-\")[0].convertTo!int()\
    \ && date.split(\"-\")[0].convertTo!int() < days_in_month(date.split(\"-\")[1].convertTo!int(),\
    \ date.split(\"-\")[2].convertTo!int());\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf2qxspnr.d(26): Error: found `month` when expecting `.` following\
    \ int\\n/tmp/tmpf2qxspnr.d(26): Error: found `,` when expecting identifier following\
    \ `int`.\\n/tmp/tmpf2qxspnr.d(26): Error: found `int` when expecting `,`\\n/tmp/tmpf2qxspnr.d(26):\
    \ Error: semicolon expected following auto declaration, not `{`\\n/tmp/tmpf2qxspnr.d(33):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2qxspnr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    auto a = date.split(\"-\");\n\
    \    if (a.length == 3 && date.count(\"-\") == 2)\n    {\n        auto mm = to!int(a[0]);\n\
    \        auto dd = to!int(a[1]);\n        auto yyyy = to!int(a[2]);\n        if\
    \ (mm >= 1 && mm <= 12 && yyyy >= 1582)\n        {\n            if (mm == 2)\n\
    \            {\n                if (dd >= 1 && dd <= 29)\n                {\n\
    \                    return true;\n                }\n            }\n        \
    \    else if (mm % 2 == 0)\n            {\n                if (dd >= 1 && dd <=\
    \ 30)\n                {\n                    return true;\n                }\n\
    \            }\n            else if (mm % 2 != 0)\n            {\n           \
    \     if (dd >= 1 && dd <= 31)\n                {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz0c2rgor.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpz0c2rgor.d(27): Error: no property `count` for type `string`\\n/tmp/tmpz0c2rgor.d(29):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpz0c2rgor.d(30): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmpz0c2rgor.d(31): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz0c2rgor.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    // check if length of string\
    \ is greater than zero\n    if (date.length == 0)\n        return false;\n   \
    \ // split string on hyphen\n    auto date_split = date.split(\"-\");\n    //\
    \ check if the length of string is not equal to 3\n    if (date_split.length !=\
    \ 3)\n        return false;\n    // convert year to int\n    int year = date_split[2].to!int;\n\
    \    // check if year is less than or equal to 0\n    if (year <= 0)\n       \
    \ return false;\n    // convert months to int\n    int month = date_split[0].to!int;\n\
    \    // check if months are less than or equal to 0 or greater than 12\n    if\
    \ (month <= 0 || month > 12)\n        return false;\n    // convert day to int\n\
    \    int day = date_split[1].to!int;\n    // check if day is less than or equal\
    \ to 0 or greater than 30 or 31\n    if (day <= 0 || day > 31)\n        return\
    \ false;\n    // check if it is leap year\n    bool leap_year = year % 4 == 0\
    \ && (year % 100 != 0 || year % 400 == 0);\n    // check for month 2 if leap year\n\
    \    if (month == 2 && leap_year && day > 29)\n        return false;\n    // check\
    \ for month 2 if not leap year\n    if (month == 2 && !leap_year && day > 28)\n\
    \        return false;\n    // check for months 4,6,9,11\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n        \
    \    return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4dnre4p.d(30): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4dnre4p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    int num = 1;\n    bool is_valid\
    \ = true;\n    string [] strs = date.split(\"-\");\n    foreach(char[] c; strs)\n\
    \    {\n        int digit = 0;\n        foreach(char a; c)\n        {\n      \
    \      if (isDigit(a))\n            {\n                digit = 10 * digit + a\
    \ - '0';\n            }\n            else\n            {\n                is_valid\
    \ = false;\n                break;\n            }\n        }\n        switch(num)\n\
    \        {\n            case 1:\n                if (digit > 12 || digit < 1)\n\
    \                {\n                    is_valid = false;\n                }\n\
    \                break;\n            case 2:\n                if (digit > 31 ||\
    \ digit < 1)\n                {\n                    is_valid = false;\n     \
    \           }\n                else if (digit > 30 && (digit == 4 || digit ==\
    \ 6 || digit == 9 || digit == 11))\n                {\n                    is_valid\
    \ = false;\n                }\n                else if (digit > 29 && strs[0]\
    \ == \"02\")\n                {\n                    is_valid = false;\n     \
    \           }\n                break;\n            case 3:\n                if\
    \ (digit > 9999 || digit < 1000)\n                {\n                    is_valid\
    \ = false;\n                }\n                break;\n        }\n        if (!is_valid)\n\
    \        {\n            break;\n        }\n        num++;\n    }\n    return is_valid;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1o8e0eru.d(28): Error: no property `split` for type `string`\\\
    n/tmp/tmp1o8e0eru.d(29): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `string` to `char[]`\\n/tmp/tmp1o8e0eru.d(34): Error: undefined identifier\
    \ `isDigit`\\n/tmp/tmp1o8e0eru.d(44): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o8e0eru.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    return !date.empty && date.length\
    \ == 10 && date[2] == '-' && date[5] == '-' && isDigit(date[0]) && isDigit(date[1])\
    \ && isDigit(date[3]) && isDigit(date[4]) && isDigit(date[6]) && isDigit(date[7])\
    \ && isDigit(date[8]) && isDigit(date[9]) && to!int(date[0..1]) <= 12 && to!int(date[3..4])\
    \ <= 31 && to!int(date[6..9]) <= 9999 && to!int(date[6..9]) > 0 && to!int(date[0..1])\
    \ > 0 && to!int(date[3..4]) > 0 && (to!int(date[0..1]) == 1 || to!int(date[0..1])\
    \ == 3 || to!int(date[0..1]) == 5 || to!int(date[0..1]) == 7 || to!int(date[0..1])\
    \ == 8 || to!int(date[0..1]) == 10 || to!int(date[0..1]) == 12 ? (to!int(date[3..4])\
    \ <= 31) : (to!int(date[0..1]) == 4 || to!int(date[0..1]) == 6 || to!int(date[0..1])\
    \ == 9 || to!int(date[0..1]) == 11 ? (to!int(date[3..4]) <= 30) : (to!int(date[0..1])\
    \ == 2 ? (((to!int(date[6..9]) % 4 == 0 && to!int(date[6..9]) % 100 != 0) || to!int(date[6..9])\
    \ % 400 == 0) ? (to!int(date[3..4]) <= 29) : (to!int(date[3..4]) <= 28)) : false)));\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7c3avhwt.d(26): Error: no property `empty` for type `string`\\\
    n/tmp/tmp7c3avhwt.d(26): Error: undefined identifier `isDigit`\\n/tmp/tmp7c3avhwt.d(26):\
    \ Error: undefined identifier `isDigit`\\n/tmp/tmp7c3avhwt.d(26): Error: undefined\
    \ identifier `isDigit`\\n/tmp/tmp7c3avhwt.d(26): Error: undefined identifier `isDigit`\\\
    n/tmp/tmp7c3avhwt.d(26): Error: undefined identifier `isDigit`\\n/tmp/tmp7c3avhwt.d(26):\
    \ Error: undefined identifier `isDigit`\\n/tmp/tmp7c3avhwt.d(26): Error: undefined\
    \ identifier `isDigit`\\n/tmp/tmp7c3avhwt.d(26): Error: undefined identifier `isDigit`\\\
    n/tmp/tmp7c3avhwt.d(26): Error: template instance `to!int` template `to` is not\
    \ defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp7c3avhwt.d(26): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7c3avhwt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n  //code goes here.\n  auto l = split(date,\
    \ \"-\");\n  if (l.length < 3) return false;\n  int day = to!int(l[1]);\n  int\
    \ month = to!int(l[0]);\n  int year = to!int(l[2]);\n  if (day > 31 || day < 1)\
    \ return false;\n  if (month > 12 || month < 1) return false;\n  if (month ==\
    \ 2) {\n    if (year % 4 == 0) {\n      if (day > 29) return false;\n    } else\
    \ {\n      if (day > 28) return false;\n    }\n  } else if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n    if (day > 30) return false;\n  }\n\
    \  return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4d83p7u.d(27): Error: undefined identifier `split`\\n/tmp/tmpt4d83p7u.d(29):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpt4d83p7u.d(30): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmpt4d83p7u.d(31): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4d83p7u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    \n    static int [][] days =\
    \ [\n      [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n      [0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    ];\n    \n    auto getDays\
    \ = (int year, int month)\n    {\n        return days[isLeapYear(year) ? 1 : 0][month];\n\
    \    };\n    \n    auto [day, month, year] = split(date, '-');\n    return !date.empty()\
    \ && \n        (to!int(day) <= getDays(to!int(year), to!int(month))) && \n   \
    \     (to!int(month) >= 1 && to!int(month) <= 12);\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldlork9s.d(37): Error: basic type expected, not `[`\\n/tmp/tmpldlork9s.d(37):\
    \ Error: found `,` when expecting `]`\\n/tmp/tmpldlork9s.d(37): Error: semicolon\
    \ expected, not `]`\\n/tmp/tmpldlork9s.d(37): Error: found `]` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldlork9s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    int month, day, year;\n    auto\
    \ result = sscanf(date, \"%d-%d-%d\", &month, &day, &year);\n    if (result !=\
    \ 3)\n        return false;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1 || day > 31)\n        return false;\n    else\n    {\n\
    \        if (month == 2)\n        {\n            if (day > 29)\n             \
    \   return false;\n            else\n            {\n                if (day ==\
    \ 29)\n                {\n                    if ((year % 4 != 0) || (year % 100\
    \ == 0 && year % 400 != 0))\n                        return false;\n         \
    \       }\n            }\n        }\n        else\n        {\n            if (day\
    \ > 30)\n                return false;\n            else\n            {\n    \
    \            if (day == 30)\n                {\n                    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n                        return\
    \ false;\n                }\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt52vnqif.d(27): Error: undefined identifier `sscanf`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt52vnqif.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    if(!date.length)\n        return\
    \ false;\n    auto date_elements = date.split(\"-\");\n    if(date_elements.length\
    \ != 3)\n        return false;\n    auto day = to!int(date_elements[1]);\n   \
    \ auto month = to!int(date_elements[0]);\n    auto year = to!int(date_elements[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2 && (isLeapYear(year) && day\
    \ > 29 || !isLeapYear(year) && day > 28))\n        return false;\n    if(member([4,6,9,11],\
    \ month) && day > 30)\n        return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqcdqrpc0.d(28): Error: no property `split` for type `string`\\\
    n/tmp/tmpqcdqrpc0.d(31): Error: template instance `to!int` template `to` is not\
    \ defined, did you mean No?\\n/tmp/tmpqcdqrpc0.d(32): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmpqcdqrpc0.d(33):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpqcdqrpc0.d(38): Error: undefined identifier `isLeapYear`\\n/tmp/tmpqcdqrpc0.d(38):\
    \ Error: undefined identifier `isLeapYear`\\n/tmp/tmpqcdqrpc0.d(40): Error: undefined\
    \ identifier `member`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcdqrpc0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    auto dateSplit = date.split(\"\
    -\");\n    if (dateSplit.length != 3) return false;\n    int day = to!int(dateSplit[0]);\n\
    \    int month = to!int(dateSplit[1]);\n    int year = to!int(dateSplit[2]);\n\
    \    //if the number of days is less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12.\n    if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 ||\
    \ day > 31) return false;\n    }\n    //the number of days is not less than 1\
    \ or higher than 30 days for months 4,6,9,11.\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30) return\
    \ false;\n    }\n    //the number of days is not less than 1 or higher than 29\
    \ for the month 2.\n    else if(month == 2)\n    {\n        if(day < 1 || day\
    \ > 29) return false;\n    }\n    //if the months should not be less than 1 or\
    \ higher than 12.\n    else if(month < 1 || month > 12) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1vau5jz.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpp1vau5jz.d(28): Error: template instance `to!int` template `to` is not\
    \ defined, did you mean No?\\n/tmp/tmpp1vau5jz.d(29): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmpp1vau5jz.d(30):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1vau5jz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    // write your code here\n   \
    \ int[] months = [1,2,3,4,5,6,7,8,9,10,11,12];\n    string[] month_string = [\"\
    January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\"\
    ,\"September\",\"October\",\"November\",\"December\"];\n    // \"January\":\"\
    31\",\"February\":\"28\",\"March\":\"31\",\"April\":\"30\",\"May\":\"31\",\"June\"\
    :\"30\",\"July\":\"31\",\"August\":\"31\",\"September\":\"30\",\"October\":\"\
    31\",\"November\":\"30\",\"December\":\"31\"};\n    if (date == \"\")\n    {\n\
    \        return false;\n    }\n    else if (date.count(\"-\") != 2)\n    {\n \
    \       return false;\n    }\n    string[] split_date = date.split(\"-\");\n \
    \   int month = to!int(split_date[0]);\n    int day = to!int(split_date[1]);\n\
    \    int year = to!int(split_date[2]);\n    if (year < 1)\n    {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12)\n    {\n        return false;\n\
    \    }\n    // int[] days = [31,28,31,30,31,30,31,31,30,31,30,31];\n    if (month\
    \ == 2)\n    {\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 ==\
    \ 0)\n        {\n            if (day > 29 || day < 1)\n            {\n       \
    \         return false;\n            }\n        }\n        else if (day > 28 ||\
    \ day < 1)\n        {\n            return false;\n        }\n    }\n    else if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12)\n    {\n        if (day > 31 || day < 1)\n        {\n\
    \            return false;\n        }\n    }\n    else if (day > 30 || day < 1)\n\
    \    {\n        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprlct6x1y.d(34): Error: no property `count` for type `string`\\\
    n/tmp/tmprlct6x1y.d(38): Error: no property `split` for type `string`\\n/tmp/tmprlct6x1y.d(39):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmprlct6x1y.d(40): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmprlct6x1y.d(41): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlct6x1y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    auto dateTuple = split(date,\"\
    -\");\n    if(dateTuple.length!=3)\n        return false;\n    // auto month =\
    \ to!int(dateTuple[0]);\n    // auto day = to!int(dateTuple[1]);\n    // auto\
    \ year = to!int(dateTuple[2]);\n    // auto month = split(date,\"-\")[0];\n  \
    \  // auto day = split(date,\"-\")[1];\n    // auto year = split(date,\"-\")[2];\n\
    \    auto month = to!int(dateTuple[0]);\n    auto day = to!int(dateTuple[1]);\n\
    \    auto year = to!int(dateTuple[2]);\n    // if(dateTuple.length != 3)\n   \
    \ //     return false;\n    // // foreach(item; dateTuple)\n    // // {\n    //\
    \ //     if(to!int(item) == 0)\n    // //         return false;\n    // // }\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return\
    \ false;\n    if(month == 2 && day == 29 && !isLeapYear(year))\n        return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n\
    \        if(day > 30)\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\"\
    ) == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0kd820em.d(26): Error: undefined identifier `split`\\n/tmp/tmp0kd820em.d(35):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp0kd820em.d(36): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp0kd820em.d(37): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp0kd820em.d(51):\
    \ Error: undefined identifier `isLeapYear`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp0kd820em.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    import std.string : replace;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.algorithm\
    \ : map;\n    import std.math : modf;\n    if (date.length == 0)\n        return\
    \ false;\n    auto months = [31,29,31,30,31,30,31,31,30,31,30,31];\n    auto elements\
    \ = date.replace(\"-\",\"\").replace(\"/\",\"\").array.map!(a => a.to!int).array;\n\
    \    if (elements.length == 8)\n    {\n        if (elements[0] * elements[1] ==\
    \ 0)\n            return false;\n        if (elements[0] <= 12 && elements[1]\
    \ <= months[elements[0] - 1])\n            return true;\n        return false;\n\
    \    }\n    return false;\n}\n/*\nYou are given a string of numbers from 1-9.\
    \ Your task is to place a '+' or '-' between the numbers such that the resulting\
    \ expression adds up to 100.\nunittest\n{\n    alias candidate = valid_date;\n\
    \n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vwdvhmz.d(45): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vwdvhmz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    int[int] months = [:1:31, 2:28,\
    \ 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31];\n    int[] time\
    \ = split(date, '-').map!(to!int);\n    if (date.length == 0 || time.length !=\
    \ 3)\n        return false;\n    if (time[0] < 1 || time[0] > 12)\n        return\
    \ false;\n    if (time[1] < 1 || time[1] > months[time[0]])\n        return false;\n\
    \    if (time[2] < 0)\n        return false;\n    if (time[0] == 2 && time[1]\
    \ == 29 && time[2] % 4 != 0)\n        return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") ==\
    \ true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
    04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl6wp6vnh.d(26): Error: expression expected, not `:`\\n/tmp/tmpl6wp6vnh.d(26):\
    \ Error: comma expected separating array initializers, not `1`\\n/tmp/tmpl6wp6vnh.d(26):\
    \ Error: semicolon expected, not `:`\\n/tmp/tmpl6wp6vnh.d(26): Error: found `:`\
    \ instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpl6wp6vnh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    auto elements = split(date, '-');\n\
    \    if (elements.length != 3) \n        return false;\n    auto month = to!int(elements[0]);\n\
    \    auto day = to!int(elements[1]);\n    auto year = to!int(elements[2]);\n \
    \   if (month < 1 || month > 12) \n        return false;\n    int maxDay;\n  \
    \  if (month == 2) \n        maxDay = 29;\n    else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) \n        maxDay = 30;\n    else \n        maxDay\
    \ = 31;\n    if (day < 1 || day > maxDay) \n        return false;\n    if (year\
    \ < 0) \n        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"\
    15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n   \
    \ assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\"\
    ) == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
    \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
    06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n   \
    \ assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\"\
    ) == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgv9ngd6e.d(26): Error: undefined identifier `split`\\n/tmp/tmpgv9ngd6e.d(29):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpgv9ngd6e.d(30): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmpgv9ngd6e.d(31): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgv9ngd6e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n  if(date == \"\")\n    return false;\n\
    \  auto dates = date.split(\"-\");\n  if(dates.length != 3)\n    return false;\n\
    \  if(to!int(dates[0]) < 1 || to!int(dates[0]) > 12)\n    return false;\n  if(to!int(dates[1])\
    \ < 1 || to!int(dates[1]) > 31)\n    return false;\n  else\n  {\n    if(to!int(dates[0])\
    \ == 2)\n    {\n      if(to!int(dates[1]) > 29)\n        return false;\n    }\n\
    \    else if(to!int(dates[0]) == 4 || to!int(dates[0]) == 6 || to!int(dates[0])\
    \ == 9 || to!int(dates[0]) == 11)\n    {\n      if(to!int(dates[1]) > 30)\n  \
    \      return false;\n    }\n  }\n  if(to!int(dates[2]) < 1)\n    return false;\n\
    \  return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
    03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n   \
    \ assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\"\
    ) == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hpe8dgs.d(28): Error: no property `split` for type `string`\\\
    n/tmp/tmp3hpe8dgs.d(31): Error: template instance `to!int` template `to` is not\
    \ defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(31): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(33):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp3hpe8dgs.d(33): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(37): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(39):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp3hpe8dgs.d(42): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(42): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(42):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmp3hpe8dgs.d(42): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(44): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\n/tmp/tmp3hpe8dgs.d(48):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hpe8dgs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    if(date.length() != 10) return\
    \ false;\n    string months = \"JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC\";\n    months\
    \ = \"012341567890123456789012345678901\";\n    string year = date[6..9];\n  \
    \  string month = date[0..1];\n    string day = date[3..4];\n    int month_i =\
    \ stoi(month);\n    int day_i = stoi(day);\n    int year_i = stoi(year);\n   \
    \ if(date[2] != '-' || date[5] != '-') return false;\n    if(month_i < 1 || month_i\
    \ > 12) return false;\n    if(day_i < 1 || day_i > 31) return false;\n    if(month_i\
    \ == 2)\n    {\n        if(year_i % 4 == 0)\n        {\n            if(day_i >\
    \ 29) return false;\n        }\n        else\n        {\n            if(day_i\
    \ > 28) return false;\n        }\n    }\n    else if(month_i == 4 || month_i ==\
    \ 6 || month_i == 9 || month_i == 11)\n    {\n        if(day_i > 30) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n\
    \    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\"\
    ) == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"\
    06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"\
    03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"\
    04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n   \
    \ assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\"\
    ) == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
    20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
    2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmbiq0os1.d(26): Error: no property `length` for type `string`\\\
    n/tmp/tmpmbiq0os1.d(32): Error: undefined identifier `stoi`, did you mean import\
    \ `std`?\\n/tmp/tmpmbiq0os1.d(33): Error: undefined identifier `stoi`, did you\
    \ mean import `std`?\\n/tmp/tmpmbiq0os1.d(34): Error: undefined identifier `stoi`,\
    \ did you mean import `std`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmbiq0os1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \n*/\nbool valid_date(string date) \n{\n    enum Months{JAN, FEB, MAR, APR,\
    \ MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC};\n    auto parts = split(date, '-');\n\
    \    if(parts.length != 3) return false;\n    try{\n        int month = to!int(parts[0]);\n\
    \        int day = to!int(parts[1]);\n        int year = to!int(parts[2]);\n \
    \       if(month < 1 || month > 12) return false;\n        if(month == Months.FEB\
    \ && day < 1) return false;\n        if(day < 1 || day > 31) return false;\n \
    \       if(month == Months.APR || month == Months.JUN || month == Months.SEP ||\
    \ month == Months.NOV) {\n            if(day > 30) return false;\n        }\n\
    \        if(month == Months.FEB && day > 29) return false;\n        if(month ==\
    \ Months.FEB && year % 4 != 0 && day > 28) return false;\n        return true;\n\
    \    } catch(Exception){\n        return false;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n\
    \    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\"\
    ) == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
    01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n   \
    \ assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n\
    \    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\"\
    ) == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"\
    04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"\
    2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"\
    04-2003\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwb0d8acg.d(26): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpwb0d8acg.d(27): Error: undefined identifier `split`\\n/tmp/tmpwb0d8acg.d(30):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpwb0d8acg.d(31): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmpwb0d8acg.d(32): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb0d8acg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
