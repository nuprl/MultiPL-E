name: HumanEval_91_is_bored
language: d
prompt: "import std.math;\n/*\n\n    You'll be given a string of words, and your task\
  \ is to count the number\n    of boredoms. A boredom is a sentence that starts with\
  \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
  \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
  \ is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\nlong is_bored(string\
  \ S) \n"
tests: "unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
  \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
  I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
  I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
  You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    auto a = split(S, \" .\");\n    long result = 0;\n    foreach(string\
    \ s; a)\n    {\n        if(s.startsWith(\"I\"))\n            result++;\n    }\n\
    \    return result;\n}", "{\n    auto words = split(S, \" \");\n    long boredoms\
    \ = 0;\n    foreach(w; words) {\n        if(w == \"I\") {\n            ++boredoms;\n\
    \        }\n    }\n    return boredoms;\n}", "{\n    long i;\n    long count;\n\
    \    i = 0;\n    count = 0;\n    if (S.length == 0) return 0;\n    while (i <\
    \ S.length)\n    {\n        if (S[i] == 'I')\n        {\n            count++;\n\
    \            while (S[i] != '.' && S[i] != '?' && S[i] != '!')\n            {\n\
    \                i++;\n                if (i >= S.length) break;\n           \
    \ }\n        }\n        i++;\n    }\n    return count;\n}", "{\n    long boredoms\
    \ = 0;\n    //Ugh, I know; the use of \"bool\" is redundant here.\n    bool found_period\
    \ = false;\n    int j = 0;\n    for (int i = 0; i < S.length(); i++) {\n     \
    \   if (S[i] == '!' || S[i] == '?' || S[i] == '.') {\n            found_period\
    \ = true;\n            j = i;\n        }\n        if (found_period) {\n      \
    \      if (S[i] == ' ' && (S[i+1] == 'I' || S[i+1] == 'i')) {\n              \
    \  boredoms++;\n            }\n            found_period = false;\n        }\n\
    \    }\n    return boredoms;\n}", "{\n    long isBored = 0;\n    string[] words\
    \ = S.split(' ');\n    foreach(string word; words)\n    {\n        if(word ==\
    \ \"I\")\n        {\n            isBored++;\n        }\n    }\n    return isBored;\n\
    }", "{\n    long boredoms = 0;\n    if (S == \"\") return boredoms;\n    S = S.replace(\"\
    .\", \"  \");\n    S = S.replace(\"?\", \"  \");\n    S = S.replace(\"!\", \"\
    \  \");\n    auto sentences = S.split();\n    foreach (sentence; sentences)\n\
    \    {\n        auto words = sentence.split();\n        if (words[0] == \"I\"\
    ) boredoms++;\n    }\n    return boredoms;\n}\n ", "{\n    long count = 0;\n \
    \   for (int i = 0; i < S.length; i++) {\n        auto c = S[i];\n        if (c\
    \ == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \    The time complexity of is_bored is O(n), where n is the length of the string.\n\
    */", "{\n    return count(split(S, \"!?\"));\n}", "{\n    string[] sentences =\
    \ split(S, \".[?!]\");\n    int count = 0;\n    foreach(string sentence; sentences)\n\
    \    {\n        if(sentence.length > 0 && sentence[0] == 'I')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long boredoms = 0;\n    foreach(string\
    \ s; S.split(\".\"))\n    {\n        if(s.front.trim == \"I\")\n            boredoms++;\n\
    \    }\n    return boredoms;\n}", "{\n    string[] sentences = S.split(\"[!?.]\"\
    );\n    long boredoms = 0;\n    foreach(sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0 && sentence[0] == 'I')\n            boredoms++;\n    }\n    return boredoms;\n\
    }", "{\n    int count = 0;\n    for (int i = 0; i < S.length; i++)\n    {\n  \
    \      if (S[i] == 'I')\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    auto arr = split(S, \".\");\n    long boredoms\
    \ = 0;\n    foreach(e; arr)\n    {\n        auto arr2 = split(e, \"?\");\n   \
    \     foreach(e2; arr2)\n        {\n            auto arr3 = split(e2, \"!\");\n\
    \            foreach(e3; arr3)\n            {\n                if(startsWith(e3.trim,\
    \ \"I\"))\n                    boredoms++;\n            }\n        }\n    }\n\
    \    return boredoms;\n}", "{\n    // Split the string into sentences\n    string[]\
    \ split_string = split(S, '.');\n    // Boredom count\n    long count = 0;\n \
    \   foreach(word; split_string) {\n        if(word == \"I\") {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    int words = 0;\n    S = S.lower();\n\
    \    string[] str = split(S, \" \");\n    foreach(string s; str)\n    {\n    \
    \    if(s == \"i\")\n            words++;\n    }\n    return words;\n}", "{\n\
    \    string[] words = S.split(\"[.!?]\");\n    int count = 0;\n    foreach(string\
    \ word; words) {\n        if(word.startsWith(\"I \")) {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n  string[] words = S.split(\"[?!.]\"\
    );\n  long boredoms = 0;\n  foreach(string word; words)\n    boredoms += word.strip().split(\"\
    \ \")[0] == \"I\";\n  return boredoms;\n}", "{\n    int count = 0;\n    string[]\
    \ split = split(S, \" .!?\");\n    foreach(string word; split)\n    {\n      \
    \  if(word == \"I\")\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long boredoms = 0;\n    long str_length = S.length;\n    long first_index\
    \ = S.find(\"I\");\n    while (first_index != -1)\n    {\n        //Check if there\
    \ is ., ? or ! after the boredom\n        if (first_index + 1 < str_length &&\
    \ (S[first_index + 1] == '.' || S[first_index + 1] == '?' || S[first_index + 1]\
    \ == '!'))\n        {\n            boredoms++;\n        }\n        first_index\
    \ = S.find(\"I\", first_index + 1);\n    }\n    return boredoms;\n}", "{\n   \
    \ long borings = 0;\n    S = S.replace(\".\", \" !\");\n    S = S.replace(\"?\"\
    , \" !\");\n    string[] sentences = S.split(\"!\");\n    foreach(string sentence;\
    \ sentences) {\n        if(sentence.length > 0) {\n            string[] words\
    \ = sentence.split(\" \");\n            if(words[0] == \"I\") {\n            \
    \    borings++;\n            }\n        }\n    }\n    return borings;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
