name: HumanEval_64_vowels_count
language: d
prompt: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
  \ representing\n    a word as input and returns the number of vowels in the string.\n\
  \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel,\
  \ but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"\
  abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \n*/\nlong vowels_count(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
  abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
  key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
  ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
  ) == 3L);\n}\nvoid main(){}"
completions: ["{\n    long counter = 0;\n    foreach(char c; s)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         counter += 1;\n        }\n    }\n    return counter;\n}", "{\n    long\
    \ n = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y')\n            n++;\n    }\n    return n;\n\
    }\n/*\nWrite a function is_pangram which takes a string representing a\n    sentence\
    \ as input and returns a boolean value. If the input sentence\n    is a pangram\
    \ then the function should return True else it should\n    return False. A pangram\
    \ is a sentence which uses all the 26\n    letters of the alphabet at least once.",
  "{\n    auto v = \"aeiouy\";\n    auto x = filter!( (a) => (v.find(a) != -1) )(s);\n\
    \    return x.length;\n}", "{\n    long count = 0;\n    foreach(immutable c; s)\n\
    \    {\n        // If a char is a vowel, increment count\n        //  note the\
    \ use of lower case 'a' but upper\n        //  case 'A'\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n        {\n            count++;\n        }\n \
    \   }\n    // If the char 'y' is the last char, increment count\n    if(s[$-1]\
    \ == 'y')\n    {\n        count++;\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    for (auto c: s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' ||\n            (c == 'y' && (s.length() - 1) ==\
    \ s.find(c))) {\n            count += 1;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    bool yIsVowel = false;\n    foreach(c; s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         ++result;\n        }\n        if (c == 'y') {\n            yIsVowel\
    \ = true;\n        }\n    }\n    if (yIsVowel) {\n        ++result;\n    }\n \
    \   return result;\n}\n/*\nWrite a function sum_multiples which takes an integer\n\
    \    N as input and returns the sum of all the positive\n    integers from 1 to\
    \ N, whose last digit is also 3.\n    For example, the last digit of 4567 is 7,\
    \ which is not 3.\n    The last digit of 7568 is 8, which is not 3.", "{\n   \
    \ long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n  long count = 0;\n  long len =\
    \ s.length;\n  char last = s[len-1];\n  if (last == 'a' || last == 'e' || last\
    \ == 'i' || last == 'o' || last == 'u' || last == 'y')\n  {\n      count++;\n\
    \  }\n  for (long i = 0; i < len-1; i++)\n  {\n      if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      {\n          count++;\n\
    \      }\n  }\n  return count;\n}", "{\n    long count = 0;\n    for (int i =\
    \ 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            count++;\n   \
    \     }\n        else if (s[i] == 'y' && i == s.length - 1)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n        string c = s[i\
    \ .. i + 1];\n        result += (c == \"a\" || c == \"e\" || c == \"i\" || c ==\
    \ \"o\" || c == \"u\" || c == \"y\") ? 1 : 0;\n    }\n    return result;\n}",
  "{\n    long vowels = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n          \
    \  vowels += 1;\n        }\n    }\n    return vowels;\n}", "{\n\tlong c = 0;\n\
    \tforeach(dchar ci; s)\n\t{\n\t\tauto l = toLower(ci);\n\t\tif(l == 'a' || l ==\
    \ 'e' || l == 'i' || l == 'o' || l == 'u')\n\t\t\tc++;\n\t}\n\treturn c;\n}\n\
    /*\nWrite a function that returns true if the number of vowels in a given\n  \
    \  string is odd, and false otherwise. You can assume that the\n    string contains\
    \ only lowercase letters.\n    \n    Example:\n    >>> is_odd_vowels(\"cat\")\n\
    \    true\n    >>> is_odd_vowels(\"dog\")\n    false\n*/", "{\n    long num =\
    \ 0;\n    // Put your code here.\n    foreach(char c; s)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         num++;\n        }\n    }\n    return num;\n}", "{\n    long v = 0;\n\
    \    foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'y')\n            v++;\n    }\n    return v;\n}",
  "{\n    long r=0;\n    foreach(immutable ch; s)\n    {\n        switch(ch)\n   \
    \     {\n            case 'a': case 'e': case 'i': case 'o': case 'u': r++; break;\n\
    \            case 'y': if(s.length==1) r++; break;\n        }\n    }\n    return\
    \ r;\n}", "{\n    long count = 0;\n    long len = s.length;\n    for (long i =\
    \ 0; i < len; i++) {\n        char ch = s[i];\n        if (ch == 'a' || ch ==\
    \ 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n      \
    \  }\n        else if (ch == 'y' && i != len - 1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long cnt = 0;\n    s = toLower(s);\n\
    \    foreach(i, char c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            cnt++;\n    }\n    return cnt;\n}\n/*\n\
    \    Write a function add_vectors which takes two arrays of\n    numbers representing\
    \ arrays of 2D vectors and returns the sum\n    of the vectors.", "{\n    long\
    \ len = s.length;\n    long vowelsCount = 0;\n    foreach(i; 0 .. len)\n    {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u')\n        {\n            vowelsCount += 1;\n        }\n        else if(s[i]\
    \ == 'y' && i != len - 1)\n        {\n            vowelsCount += 1;\n        }\n\
    \    }\n    return vowelsCount;\n}", "{\n    long i;\n    long n = 0;\n    int\
    \ p;\n    char c;\n    int m = s.length();\n    //if (m>1)\n    //{\n        for\
    \ (i=0; i<m; ++i)\n        {\n            c = s[i];\n            p = tolower(c);\n\
    \            if (p==97||p==101||p==105||p==111||p==117)\n            {\n     \
    \           n++;\n            }\n        }\n    //}\n    return n;\n}", "{\n\t\
    long count = 0;\n\tforeach(ch; s)\n\t{\n\t\tif(toLower(ch) == 'a' || toLower(ch)\
    \ == 'e' || toLower(ch) == 'i' || toLower(ch) == 'o' || toLower(ch) == 'u')\n\t\
    \t{\n\t\t\tcount = count + 1;\n\t\t}\n\t}\n\treturn count;\n}\n/*\nWrite a function\
    \ vowels_replace which takes a string representing\n    a word as input and returns\
    \ a new string which is the same as the\n    given string but with all vowels,\
    \ in upper case. Vowels in this\n    case are 'a', 'e', 'i', 'o', 'u'.\n    Example:\n\
    \    >>> vowels_replace(\"abcde\")\n    \"AbcdE\"\n    >>> vowels_replace(\"ABCDE\"\
    )\n    \"ABCDE\"\n*/\nstring vowels_replace(string s) \n{\n\tstring tmp = \"\"\
    ;\n\tforeach(ch; s)\n\t{\n\t\tif(toLower(ch) == 'a' || toLower(ch) == 'e' || toLower(ch)\
    \ == 'i' || toLower(ch) == 'o' || toLower(ch) == 'u')\n\t\t{\n\t\t\ttmp ~= toUpper(ch);\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\ttmp ~= ch;\n\t\t}\n\t}\n\treturn tmp;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
