name: HumanEval_5_intersperse
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    for (size_t i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp5km4incx.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp5km4incx.__unittest_L24_C1() [0x427f44]\\n??:? void tmp5km4incx.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x1809b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    return numbers.map!((n,\
    \ inout bool terminate) {\n        if (terminate) return n;\n        terminate\
    \ = true;\n        return n;\n    }).interleave([delimeter]).dropOne().array;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7mxsbbx_.d(13): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mxsbbx_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[][] parts = numbers.array.chunks(2);\n\
    \tstatic if (is(typeof(import std.typecons) == void))\n\t{\n\t\tlong[] result\
    \ = new long[](0);\n\t\tforeach (p; parts)\n\t\t{\n\t\t\tlong[] interspersed;\n\
    \t\t\tif (p.length > 1)\n\t\t\t\tinterspersed = [p[0], delimeter, p[1]];\n\t\t\
    \telse\n\t\t\t\tinterspersed = p;\n\t\t\tresult = result ~ interspersed;\n\t\t\
    }\n\t\treturn result;\n\t}\n\telse\n\t{\n\t\tTuple!(long[], long[]) result = tuple(new\
    \ long[](0), new long[](0));\n\t\tforeach (p; parts)\n\t\t{\n\t\t\tlong[] interspersed;\n\
    \t\t\tif (p.length > 1)\n\t\t\t\tinterspersed = [p[0], delimeter, p[1]];\n\t\t\
    \telse\n\t\t\t\tinterspersed = p;\n\t\t\tresult = tuple(result[0] ~ interspersed,\
    \ result[1]);\n\t\t}\n\t\treturn result[0];\n\t}\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaaofsa49.d(14): Error: found `std` when expecting `(` following\
    \ `import`\\n/tmp/tmpaaofsa49.d(14): Error: found `)` when expecting `.` following\
    \ void\\n/tmp/tmpaaofsa49.d(14): Error: found `)` when expecting identifier following\
    \ `void`.\\n/tmp/tmpaaofsa49.d(15): Error: found `{` when expecting `)`\\n/tmp/tmpaaofsa49.d(16):\
    \ Error: found `long` when expecting `)`\\n/tmp/tmpaaofsa49.d(16): Error: found\
    \ `result` when expecting `)`\\n/tmp/tmpaaofsa49.d(16): Error: found `=` instead\
    \ of statement\\n/tmp/tmpaaofsa49.d(28): Error: declaration expected, not `else`\\\
    n/tmp/tmpaaofsa49.d(31): Error: declaration expected, not `foreach`\\n/tmp/tmpaaofsa49.d(31):\
    \ Error: no identifier for declarator `parts`\\n/tmp/tmpaaofsa49.d(31): Error:\
    \ declaration expected, not `)`\\n/tmp/tmpaaofsa49.d(34): Error: declaration expected,\
    \ not `if`\\n/tmp/tmpaaofsa49.d(36): Error: declaration expected, not `else`\\\
    n/tmp/tmpaaofsa49.d(38): Error: no identifier for declarator `result`\\n/tmp/tmpaaofsa49.d(38):\
    \ Error: declaration expected, not `=`\\n/tmp/tmpaaofsa49.d(39): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaaofsa49.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(num; numbers)\n    {\n        result ~= num;\n       \
    \ if (num != numbers[$-1])\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\n/*\n    >>> findNeighborIndices([], 1)\n    []\n    >>> findNeighborIndices([1,\
    \ 2, 3], 1)\n    [1]\n    >>> findNeighborIndices([1, 2, 3], 2)\n    [0, 2]\n\
    \    >>> findNeighborIndices([1, 2, 3], 3)\n    [1]\n*/\nlong[] findNeighborIndices(long[]\
    \ list, long val) \n{\n    long[] result = new long[0];\n    foreach(num; list)\n\
    \    {\n        if (val == num)\n        {\n            if (num != list[0])\n\
    \                result ~= list.indexOf(num) - 1;\n            if (num != list[$-1])\n\
    \                result ~= list.indexOf(num) + 1;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> filter_except([1, 2, 3, 4, 5], [2, 4])\n    [1, 3, 5]\n\
    */\nlong[] filter_except(long[] list, long[] except) \n{\n    long[] result =\
    \ new long[0];\n    foreach(num; list)\n    {\n        if (!except.contains(num))\n\
    \            result ~= num;\n    }\n    return result;\n}\n/*\n    >>> filter_except([1,\
    \ 2, 3, 4, 5], [2, 4])\n    [1, 3, 5]\n*/\nlong[] filter_except(long[] list, long\
    \ except) \n{\n    long[] result = new long[0];\n    foreach(num; list)\n    {\n\
    \        if (num != except)\n            result ~= num;\n    }\n    return result;\n\
    }\n// Function that returns the shortest route in a grid with blocks\nlong[][]\
    \ get_shortest_path(long[][] grid, long x1, long y1, long x\nunittest\n{\n   \
    \ alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n   \
    \ assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n \
    \   assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpznefzupc.d(77): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznefzupc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \nin {\n    foreach(i, _; numbers)\n\
    \        assert(i >= 0);\n    assert(delimeter >= 0);\n}\nout (result) {\n   \
    \ assert(result.length == numbers.length * 2 - 1);\n    foreach(i, _; result)\n\
    \        assert(i >= 0);\n}\n= intersperse_d(numbers, delimeter, 0);\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpet1htlfx.d(22): Error: declaration expected, not `=`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet1htlfx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if(numbers.length\
    \ == 0)\n    {\n        return [];\n    }\n    else\n    {\n        return [numbers[0],\
    \ delimeter] ~ intersperse(numbers[1..$], delimeter);\n    }\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc7_zjdku.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283f5]\\n??:? void tmpc7_zjdku.__unittest_L22_C1()\
    \ [0x42802d]\\n??:? void tmpc7_zjdku.__modtest() [0x428174]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5bf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b452]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43049d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43094c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430429]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b429]\\n??:? runModuleUnitTests [0x42c395]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288b8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42883f]\\n??:? _d_run_main [0x4287aa]\\n??:? main [0x428187]\\\
    n??:? __libc_start_main [0x36013554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    return intersperseHelper(numbers,\
    \ delimeter);\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcl4oszvg.d(13): Error: undefined identifier `intersperseHelper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcl4oszvg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(index, number; numbers)\n    {\n        result ~= number;\n\
    \        if (index < numbers.length - 1)\n            result ~= delimeter;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    auto result = new long[2 *\
    \ numbers.length - 1];\n    auto j = 0;\n    foreach (n; numbers)\n    {\n   \
    \     result[j] = n;\n        j++;\n        if (j < result.length)\n        {\n\
    \            result[j] = delimeter;\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    size_t j = 0;\n    foreach (i, a; numbers)\n\
    \    {\n        result[j] = a;\n        j += 1;\n        if (i + 1 < numbers.length)\n\
    \        {\n            result[j] = delimeter;\n            j += 1;\n        }\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n\
    \    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\nreal[]\
    \ intersperse(real[] numbers, real delimeter) \n{\n    real[] result = new real[numbers.length\
    \ * 2 - 1];\n    size_t j = 0;\n    foreach (i, a; numbers)\n    {\n        result[j]\
    \ = a;\n        j += 1;\n        if (i + 1 < numbers.length)\n        {\n    \
    \        result[j] = delimeter;\n            j += 1;\n        }\n    }\n    return\
    \ result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42e783]\\n??:? _d_newarrayT\
    \ [0x42a0d8]\\n??:? long[] tmp_lc6puej.intersperse(long[], long) [0x42864b]\\\
    n??:? void tmp_lc6puej.__unittest_L59_C1() [0x428868]\\n??:? void tmp_lc6puej.__modtest()\
    \ [0x428ab8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431361]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431810]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4312ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c0ad]\\n??:? runModuleUnitTests [0x42d019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4291f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42917f]\\n??:? _d_run_main [0x4290ea]\\n??:? main [0x428acb]\\\
    n??:? __libc_start_main [0xfe103554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    int n = numbers.length;\n    for (int i =\
    \ 0; i < n; i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i <\
    \ n - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n Insert a value 'delimeter' between every two consecutive elements of input\
    \ list `values'\n    >>> intersperse([], \"ab\")\n    []\n    >>> intersperse([\"\
    a\", \"b\", \"c\"], \"ab\")\n    [\"a\", \"ab\", \"b\", \"ab\", \"c\"]\n    \n\
    */\nstring[] intersperse(string[] values, string delimeter) \n{\n    string[]\
    \ result = new string[2 * values.length - 1];\n    int n = values.length;\n  \
    \  for (int i = 0; i < n; i++) \n    {\n        result[2 * i] = values[i];\n \
    \       if (i < n - 1)\n            result[2 * i + 1] = delimeter;\n    }\n  \
    \  return result;\n}\n/*\n Insert a value 'delimeter' between every two consecutive\
    \ elements of input list `values'\n    >>> intersperse([], cast(char)0x2020)\n\
    \    []\n    >>> intersperse([\"a\", \"b\", \"c\"], cast(char)0x2020)\n    [\"\
    a\", \"\u2000\", \"b\", \"\u2000\", \"c\"]\n    \n*/\nchar[] intersperse(char[]\
    \ values, char delimeter) \n{\n    char[] result = new char[2 * values.length\
    \ - 1];\n    int n = values.length;\n    for (int i = 0; i < n; i++) \n    {\n\
    \        result[2 * i] = values[i];\n        if (i < n - 1)\n            result[2\
    \ * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n Insert a value 'delimeter'\
    \ between every two consecutive elements of input list `values'\n    >>> intersperse([],\
    \ \"ab\".dup)\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkw37u372.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkw37u372.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{ \n    return staticMap!((n,\
    \ i) => (i % 2) == 0 ? n : delimeter)(numbers);\n}\nlong[] intersperse2(long[]\
    \ numbers, long delimeter)\n{\n    return staticMap!((n, i) => i%2 == 0 ? n :\
    \ delimeter)(numbers);\n}\nlong[] intersperse3(long[] numbers, long delimeter)\n\
    {\n    staticMap!((n, i) => i%2 == 0 ? n : delimeter)(numbers);\n}\n/*\nGiven\
    \ a list of numbers, return the sum of first two number\n    >>> takeSum([1, 2,\
    \ 3])\n    3\n    >>> takeSum([])\n    0\n*/\nlong takeSum(long[] numbers)\n{\n\
    \    return numbers.length > 0 ? numbers[0] + (numbers.length > 1 ? numbers[1]\
    \ : 0) : 0;\n}\nlong takeSum2(long[] numbers)\n{\n    return numbers.length >\
    \ 0 ? numbers[0] + (numbers.length > 1 ? numbers[1] : 0) : 0;\n}\n/*\nTakes two\
    \ lists and returns the longest common sublist.\n    >>> commonSublist([1, 2,\
    \ 3, 4, 5], [3, 4, 5, 6, 7])\n    [3, 4, 5]\n    >>> commonSublist([1, 2, 3, 4,\
    \ 5], [3, 4, 5, 4, 7])\n    [3, 4, 5]\n    >>> commonSublist([1, 2, 3, 4, 5],\
    \ [6, 7, 8, 9, 10])\n    []\n    >>> commonSublist([1, 2, 3, 4, 5], [1, 2, 3,\
    \ 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> commonSublist([1, 2, 3, 4, 5], [1, 2, 3,\
    \ 4, 6])\n    [1, 2, 3, 4]\n*/\nlong[] commonSublist(long[] list1, long[] list2)\n\
    {\n    long[] list = [];\n    size_t length;\n    length = min(list1.length, list2.length);\n\
    \    int\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcr6p0xf.d(57): Error: no identifier for declarator `int`\\n/tmp/tmpvcr6p0xf.d(57):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvcr6p0xf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{ \n    long[] result;\n\
    \    foreach(long n; numbers) \n    {\n        result ~= n;\n        if (n !=\
    \ numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuqbuxifl.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42841d]\\n??:? void tmpuqbuxifl.__unittest_L22_C1()\
    \ [0x4280f0]\\n??:? void tmpuqbuxifl.__modtest() [0x4281a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430771]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcf5]\\n??:? runModuleUnitTests [0x42cc61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428867]\\n??:? _d_run_main [0x4287d2]\\n??:? main [0x4281b3]\\\
    n??:? __libc_start_main [0x64a6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    immutable size = numbers.length;\n\
    \    if (size == 0)\n        return numbers;\n    else\n    {\n        auto result\
    \ = new long[size * 2 - 1];\n        for (size_t i = 0; i < size; i++)\n     \
    \   {\n            result[i * 2] = numbers[i];\n            if (i < size - 1)\n\
    \                result[i * 2 + 1] = delimeter;\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = numbers.dup;\n\
    \    foreach(i, ref number; numbers) \n    {\n        if (i != 0) \n        {\n\
    \            result ~= delimeter;\n        }\n        result ~= number;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz3_5wfgw.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429569]\\n??:? void tmpz3_5wfgw.__unittest_L24_C1()\
    \ [0x428225]\\n??:? void tmpz3_5wfgw.__modtest() [0x4284e0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4291f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b84d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b8dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b7d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4291c9]\\n??:? runModuleUnitTests [0x42e899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429a0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429993]\\n??:? _d_run_main [0x4298fe]\\n??:? main [0x4284f3]\\\
    n??:? __libc_start_main [0xbc8ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (isEmpty(numbers))\n\
    \        return numbers;\n    long[] interspersed = new long[numbers.length *\
    \ 2 - 1];\n    long first = numbers[0];\n    interspersed[0] = first;\n    for\
    \ (long i = 1; i < numbers.length; i++)\n    {\n        interspersed[2 * i - 1]\
    \ = delimeter;\n        interspersed[2 * i] = numbers[i];\n    }\n    return interspersed;\n\
    }\n/*\n Insert a number 'delimeter' between every two consecutive elements of\
    \ input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (isEmpty(numbers))\n        return numbers;\n  \
    \  long[] interspersed = new long[numbers.length * 2 - 1];\n    long first = numbers[0];\n\
    \    interspersed[0] = first;\n    for (long i = 1; i < numbers.length; i++)\n\
    \    {\n        interspersed[2 * i - 1] = delimeter;\n        interspersed[2 *\
    \ i] = numbers[i];\n    }\n    return interspersed;\n}\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (isEmpty(numbers))\n\
    \        return numbers;\n    long[] interspersed = new long[numbers.length *\
    \ 2 - 1];\n    long first = numbers[0];\n    interspersed[0] = first;\n    for\
    \ (long i = 1; i < numbers.length; i++)\n    {\n        interspersed[2 * i - 1]\
    \ = delimeter;\n        interspersed[2 * i] = numbers[\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2hb_sorw.d(66): Error: expression expected, not `unittest`\\\
    n/tmp/tmp2hb_sorw.d(67): Error: found `{` when expecting `,`\\n/tmp/tmp2hb_sorw.d(68):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp2hb_sorw.d(68): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp2hb_sorw.d(68): Error: expression expected,\
    \ not `=`\\n/tmp/tmp2hb_sorw.d(68): Error: found `intersperse` when expecting\
    \ `,`\\n/tmp/tmp2hb_sorw.d(68): Error: expression expected, not `;`\\n/tmp/tmp2hb_sorw.d(70):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp2hb_sorw.d(70): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp2hb_sorw.d(71): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp2hb_sorw.d(72): Error: found `;` when expecting `,`\\n/tmp/tmp2hb_sorw.d(73):\
    \ Error: expression expected, not `}`\\n/tmp/tmp2hb_sorw.d(74): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmp2hb_sorw.d(74): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp2hb_sorw.d(74): Error: expression expected, not `}`\\n/tmp/tmp2hb_sorw.d(74):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp2hb_sorw.d(74): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmp2hb_sorw.d(74): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp2hb_sorw.d(74):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp2hb_sorw.d(74): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hb_sorw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    int[] result = new\
    \ int[0];\n    foreach(int x ; numbers)\n    {\n        result ~= x;\n       \
    \ result ~= delimeter;\n    }\n    return result[0..$-1];\n}\nunittest\n{\n  \
    \  alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n  \
    \  assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2_7pegp.d(14): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `long` to `int`\\n/tmp/tmpd2_7pegp.d(17): Error: cannot append type\
    \ `long` to type `int[]`\\n/tmp/tmpd2_7pegp.d(19): Error: cannot implicitly convert\
    \ expression `result[0..__dollar - 1LU]` of type `int[]` to `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2_7pegp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    auto result = new\
    \ long[numbers.length * 2 - 1];\n    long n = 0;\n    for (long i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[n++] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[n++] = delimeter;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpi_moojfi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpi_moojfi.__unittest_L25_C1() [0x427f44]\\n??:? void tmpi_moojfi.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x1fb2c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{ \n    auto result = to!(long[])([]);\n\
    \    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n != numbers[$-1])\n\
    \            result ~= delimeter;\n    }\n    return result;\n}\n/*\n Find the\
    \ largest number in a list of numbers\n    >>> max([1, 2, 3])\n    3\n*/\nlong\
    \ max(long[] numbers) \n{\n    return numbers.reduce!((a, b) => max(a, b))();\n\
    }\n/*\n Find the smallest number in a list of numbers\n    >>> min([1, 2, 3])\n\
    \    1\n*/\nlong min(long[] numbers) \n{\n    return numbers.reduce!((a, b) =>\
    \ min(a, b))();\n}\n/*\n Calculate the sum of a list of numbers\n    >>> sum([1,\
    \ 2, 3])\n    6\n*/\nlong sum(long[] numbers) \n{\n    return numbers.reduce!((a,\
    \ b) => a + b)();\n}\n/*\n Calculate the average of a list of numbers\n    >>>\
    \ average([1, 2, 3])\n    2\n*/\nreal average(long[] numbers) \n{\n    return\
    \ sum(numbers) / numbers.length;\n}\n/*\n Calculate the variance of a list of\
    \ numbers\n    >>> variance([1, 2, 3])\n    2.0/3\n*/\nreal variance(long[] numbers)\
    \ \n{\n    real avg = average(numbers);\n    return sum(numbers.map!((n) => (n\
    \ - avg) ^^ 2)()) / numbers.length;\n}\n/*\n Calculate the standard deviation\
    \ of a list of numbers\n    >>> standardDeviation([1, 2, 3])\n    sqrt(2.0/3)\n\
    */\nreal standardDeviation(long[] numbers) \n{\n    return sqrt(variance(numbers));\n\
    }\n/*\n Find the difference between two lists\n    >>> diff([1, 2, 3], [1, 2])\n\
    \    [3]\n*/\nlong[] diff(long[] l1, long[] l2) \n{\n    return l1.filter!((\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstfsha7k.d(85): Error: expression expected, not `unittest`\\\
    n/tmp/tmpstfsha7k.d(84): Error: found `{` when expecting `)`\\n/tmp/tmpstfsha7k.d(87):\
    \ Error: found `alias` when expecting `)` following template argument list\\n/tmp/tmpstfsha7k.d(87):\
    \ Error: found `candidate` when expecting `;` following `return` statement\\n/tmp/tmpstfsha7k.d(87):\
    \ Error: found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpstfsha7k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    long[] result = new long[(numbers.length\
    \ - 1) * 2 + 1];\n    foreach (long n; numbers)\n    {\n        result ~= n;\n\
    \        result ~= delimeter;\n    }\n    result.length = result.length - 1;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp97ez62bl.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmp97ez62bl.__unittest_L26_C1()\
    \ [0x428061]\\n??:? void tmp97ez62bl.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42df4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42cdde]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431929]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431dd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4318b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42cdb5]\\n??:? runModuleUnitTests [0x42dd21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428874]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287fb]\\n??:? _d_run_main [0x428766]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0x27b7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
