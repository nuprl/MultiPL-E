{"name": "LeetCodeContests_2811_minimumSum", "language": "py", "prompt": "def minimumSum(n: int, k: int) -> int:\n    \"\"\"You are given two integers,\u00a0n and k.\nAn array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\nReturn the minimum possible sum of a k-avoiding array of length n.\nExample 1:\nInput: n = 5, k = 4\nOutput: 18\nExplanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\nExample 2:\nInput: n = 2, k = 6\nOutput: 3\nExplanation: We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\nConstraints:\n * 1 <= n, k <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2811_minimumSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(5, 4) == 18\n    assert candidate(2, 6) == 3\n    assert candidate(1, 1) == 1\n    assert candidate(1, 2) == 1\n    assert candidate(1, 3) == 1\n    assert candidate(1, 4) == 1\n    assert candidate(1, 5) == 1\n    assert candidate(1, 6) == 1\n    assert candidate(1, 7) == 1\n    assert candidate(1, 8) == 1\n    assert candidate(1, 9) == 1\n    assert candidate(1, 10) == 1\n    assert candidate(1, 11) == 1\n    assert candidate(1, 12) == 1\n    assert candidate(1, 13) == 1\n    assert candidate(1, 14) == 1\n    assert candidate(1, 15) == 1\n    assert candidate(1, 16) == 1\n    assert candidate(1, 17) == 1\n    assert candidate(1, 18) == 1\n    assert candidate(1, 19) == 1\n    assert candidate(1, 20) == 1\n    assert candidate(1, 21) == 1\n    assert candidate(1, 22) == 1\n    assert candidate(1, 23) == 1\n    assert candidate(1, 24) == 1\n    assert candidate(1, 25) == 1\n    assert candidate(1, 26) == 1\n    assert candidate(1, 27) == 1\n    assert candidate(1, 28) == 1\n    assert candidate(1, 29) == 1\n    assert candidate(1, 30) == 1\n    assert candidate(1, 31) == 1\n    assert candidate(1, 32) == 1\n    assert candidate(1, 33) == 1\n    assert candidate(1, 34) == 1\n    assert candidate(1, 35) == 1\n    assert candidate(1, 36) == 1\n    assert candidate(1, 37) == 1\n    assert candidate(1, 38) == 1\n    assert candidate(1, 39) == 1\n    assert candidate(1, 40) == 1\n    assert candidate(1, 41) == 1\n    assert candidate(1, 42) == 1\n    assert candidate(1, 43) == 1\n    assert candidate(1, 44) == 1\n    assert candidate(1, 45) == 1\n    assert candidate(1, 46) == 1\n    assert candidate(1, 47) == 1\n    assert candidate(1, 48) == 1\n    assert candidate(1, 49) == 1\n    assert candidate(1, 50) == 1\n    assert candidate(2, 1) == 3\n    assert candidate(2, 2) == 3\n    assert candidate(2, 3) == 4\n    assert candidate(2, 4) == 3\n    assert candidate(2, 5) == 3\n    assert candidate(2, 7) == 3\n    assert candidate(2, 8) == 3\n    assert candidate(2, 9) == 3\n    assert candidate(2, 10) == 3\n    assert candidate(2, 11) == 3\n    assert candidate(2, 12) == 3\n    assert candidate(2, 13) == 3\n    assert candidate(2, 14) == 3\n    assert candidate(2, 15) == 3\n    assert candidate(2, 16) == 3\n    assert candidate(2, 17) == 3\n    assert candidate(2, 18) == 3\n    assert candidate(2, 19) == 3\n    assert candidate(2, 20) == 3\n    assert candidate(2, 21) == 3\n    assert candidate(2, 22) == 3\n    assert candidate(2, 23) == 3\n    assert candidate(2, 24) == 3\n    assert candidate(2, 25) == 3\n    assert candidate(2, 26) == 3\n    assert candidate(2, 27) == 3\n    assert candidate(2, 28) == 3\n    assert candidate(2, 29) == 3\n    assert candidate(2, 30) == 3\n    assert candidate(2, 31) == 3\n    assert candidate(2, 32) == 3\n    assert candidate(2, 33) == 3\n    assert candidate(2, 34) == 3\n    assert candidate(2, 35) == 3\n    assert candidate(2, 36) == 3\n    assert candidate(2, 37) == 3\n    assert candidate(2, 38) == 3\n    assert candidate(2, 39) == 3\n    assert candidate(2, 40) == 3\n    assert candidate(2, 41) == 3\n    assert candidate(2, 42) == 3\n    assert candidate(2, 43) == 3\n    assert candidate(2, 44) == 3\n    assert candidate(2, 45) == 3\n    assert candidate(2, 46) == 3\n    assert candidate(2, 47) == 3\n    assert candidate(2, 48) == 3\n    assert candidate(2, 49) == 3\n\ndef test_check():\n    check(minimumSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2812_theMaximumAchievableX", "language": "py", "prompt": "def theMaximumAchievableX(num: int, t: int) -> int:\n    \"\"\"You are given two integers, num and t.\nAn integer x is called achievable if it can become equal to num after applying the following operation no more than t times:\n * Increase or decrease x by 1, and simultaneously increase or decrease num by 1.\nReturn the maximum possible achievable number. It can be proven that there exists at least one achievable number.\nExample 1:\nInput: num = 4, t = 1\nOutput: 6\nExplanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation:\n1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\nIt can be proven that there is no achievable number larger than 6.\nExample 2:\nInput: num = 3, t = 2\nOutput: 7\nExplanation: The maximum achievable number is x = 7; after performing these operations, x will equal num:\n1- Decrease x by 1, and increase num by 1. Now, x = 6 and num = 4.\n2- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\nIt can be proven that there is no achievable number larger than 7.\nConstraints:\n * 1 <= num, t\u00a0<= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2812_theMaximumAchievableX.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(4, 1) == 6\n    assert candidate(3, 2) == 7\n    assert candidate(1, 1) == 3\n    assert candidate(1, 2) == 5\n    assert candidate(1, 3) == 7\n    assert candidate(1, 4) == 9\n    assert candidate(1, 5) == 11\n    assert candidate(1, 6) == 13\n    assert candidate(1, 7) == 15\n    assert candidate(1, 8) == 17\n    assert candidate(1, 9) == 19\n    assert candidate(1, 10) == 21\n    assert candidate(1, 11) == 23\n    assert candidate(1, 12) == 25\n    assert candidate(1, 13) == 27\n    assert candidate(1, 14) == 29\n    assert candidate(1, 15) == 31\n    assert candidate(1, 16) == 33\n    assert candidate(1, 17) == 35\n    assert candidate(1, 18) == 37\n    assert candidate(1, 19) == 39\n    assert candidate(1, 20) == 41\n    assert candidate(1, 21) == 43\n    assert candidate(1, 22) == 45\n    assert candidate(1, 23) == 47\n    assert candidate(1, 24) == 49\n    assert candidate(1, 25) == 51\n    assert candidate(1, 26) == 53\n    assert candidate(1, 27) == 55\n    assert candidate(1, 28) == 57\n    assert candidate(1, 29) == 59\n    assert candidate(1, 30) == 61\n    assert candidate(1, 31) == 63\n    assert candidate(1, 32) == 65\n    assert candidate(1, 33) == 67\n    assert candidate(1, 34) == 69\n    assert candidate(1, 35) == 71\n    assert candidate(1, 36) == 73\n    assert candidate(1, 37) == 75\n    assert candidate(1, 38) == 77\n    assert candidate(1, 39) == 79\n    assert candidate(1, 40) == 81\n    assert candidate(1, 41) == 83\n    assert candidate(1, 42) == 85\n    assert candidate(1, 43) == 87\n    assert candidate(1, 44) == 89\n    assert candidate(1, 45) == 91\n    assert candidate(1, 46) == 93\n    assert candidate(1, 47) == 95\n    assert candidate(1, 48) == 97\n    assert candidate(1, 49) == 99\n    assert candidate(1, 50) == 101\n    assert candidate(2, 1) == 4\n    assert candidate(2, 2) == 6\n    assert candidate(2, 3) == 8\n    assert candidate(2, 4) == 10\n    assert candidate(2, 5) == 12\n    assert candidate(2, 6) == 14\n    assert candidate(2, 7) == 16\n    assert candidate(2, 8) == 18\n    assert candidate(2, 9) == 20\n    assert candidate(2, 10) == 22\n    assert candidate(2, 11) == 24\n    assert candidate(2, 12) == 26\n    assert candidate(2, 13) == 28\n    assert candidate(2, 14) == 30\n    assert candidate(2, 15) == 32\n    assert candidate(2, 16) == 34\n    assert candidate(2, 17) == 36\n    assert candidate(2, 18) == 38\n    assert candidate(2, 19) == 40\n    assert candidate(2, 20) == 42\n    assert candidate(2, 21) == 44\n    assert candidate(2, 22) == 46\n    assert candidate(2, 23) == 48\n    assert candidate(2, 24) == 50\n    assert candidate(2, 25) == 52\n    assert candidate(2, 26) == 54\n    assert candidate(2, 27) == 56\n    assert candidate(2, 28) == 58\n    assert candidate(2, 29) == 60\n    assert candidate(2, 30) == 62\n    assert candidate(2, 31) == 64\n    assert candidate(2, 32) == 66\n    assert candidate(2, 33) == 68\n    assert candidate(2, 34) == 70\n    assert candidate(2, 35) == 72\n    assert candidate(2, 36) == 74\n    assert candidate(2, 37) == 76\n    assert candidate(2, 38) == 78\n    assert candidate(2, 39) == 80\n    assert candidate(2, 40) == 82\n    assert candidate(2, 41) == 84\n    assert candidate(2, 42) == 86\n    assert candidate(2, 43) == 88\n    assert candidate(2, 44) == 90\n    assert candidate(2, 45) == 92\n    assert candidate(2, 46) == 94\n    assert candidate(2, 47) == 96\n    assert candidate(2, 48) == 98\n\ndef test_check():\n    check(theMaximumAchievableX)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2832_longestEqualSubarray", "language": "py", "prompt": "from typing import List\n\ndef longestEqualSubarray(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and an integer k.\nA subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.\nReturn the length of the longest possible equal subarray after deleting at most k elements from nums.\nA subarray is a contiguous, possibly empty sequence of elements within an array.\nExample 1:\nInput: nums = [1,3,2,3,1,3], k = 3\nOutput: 3\nExplanation: It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created.\nExample 2:\nInput: nums = [1,1,2,2,1,1], k = 2\nOutput: 4\nExplanation: It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= nums.length\n * 0 <= k <= nums.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2832_longestEqualSubarray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 2, 3, 1, 3], 3) == 3\n    assert candidate([1, 1, 2, 2, 1, 1], 2) == 4\n    assert candidate([1], 0) == 1\n    assert candidate([1], 1) == 1\n    assert candidate([2, 1], 1) == 1\n    assert candidate([2, 2], 1) == 2\n    assert candidate([1, 1], 0) == 2\n    assert candidate([2, 1], 0) == 1\n    assert candidate([1, 2], 1) == 1\n    assert candidate([2, 2], 2) == 2\n    assert candidate([2, 3, 2], 1) == 2\n    assert candidate([3, 2, 2], 1) == 2\n    assert candidate([3, 1, 1], 2) == 2\n    assert candidate([1, 2, 3], 2) == 1\n    assert candidate([1, 2, 3], 3) == 1\n    assert candidate([2, 3, 1], 2) == 1\n    assert candidate([2, 2, 1], 1) == 2\n    assert candidate([1, 3, 2], 3) == 1\n    assert candidate([2, 3, 3], 3) == 2\n    assert candidate([3, 2, 3], 3) == 2\n    assert candidate([2, 2, 3], 0) == 2\n    assert candidate([2, 2, 2], 1) == 3\n    assert candidate([1, 2, 1], 0) == 1\n    assert candidate([3, 3, 3], 2) == 3\n    assert candidate([1, 2, 2], 1) == 2\n    assert candidate([1, 1, 3], 1) == 2\n    assert candidate([1, 2, 3], 1) == 1\n    assert candidate([1, 2, 2], 3) == 2\n    assert candidate([3, 2, 4, 2], 1) == 2\n    assert candidate([3, 4, 2, 1], 0) == 1\n    assert candidate([1, 3, 4, 2], 0) == 1\n    assert candidate([2, 4, 2, 2], 3) == 3\n    assert candidate([4, 2, 2, 3], 1) == 2\n    assert candidate([4, 1, 3, 2], 4) == 1\n    assert candidate([1, 1, 2, 1], 4) == 3\n    assert candidate([2, 4, 1, 3], 3) == 1\n    assert candidate([1, 1, 1, 2], 3) == 3\n    assert candidate([4, 2, 1, 4], 4) == 2\n    assert candidate([1, 1, 4, 1], 4) == 3\n    assert candidate([2, 1, 4, 1], 4) == 2\n    assert candidate([2, 4, 3, 3], 2) == 2\n    assert candidate([1, 2, 2, 4], 3) == 2\n    assert candidate([2, 2, 2, 4], 3) == 3\n    assert candidate([2, 3, 3, 1], 3) == 2\n    assert candidate([2, 4, 1, 4], 1) == 2\n    assert candidate([3, 4, 1, 4], 2) == 2\n    assert candidate([3, 2, 3, 1], 3) == 2\n    assert candidate([3, 1, 1, 3], 3) == 2\n    assert candidate([2, 3, 2, 5, 1], 0) == 1\n    assert candidate([5, 3, 3, 1, 3], 3) == 3\n    assert candidate([4, 4, 2, 2, 4], 1) == 2\n    assert candidate([5, 4, 2, 3, 3], 5) == 2\n    assert candidate([4, 4, 4, 3, 4], 1) == 4\n    assert candidate([1, 5, 5, 5, 3], 2) == 3\n    assert candidate([2, 1, 4, 5, 2], 1) == 1\n    assert candidate([5, 1, 5, 2, 3], 3) == 2\n    assert candidate([5, 3, 2, 3, 4], 1) == 2\n    assert candidate([3, 2, 1, 4, 1], 0) == 1\n    assert candidate([3, 2, 2, 5, 3], 5) == 2\n    assert candidate([2, 2, 4, 4, 2], 1) == 2\n    assert candidate([4, 3, 3, 4, 3], 2) == 3\n    assert candidate([1, 5, 4, 3, 4], 0) == 1\n    assert candidate([4, 4, 2, 5, 3], 0) == 2\n    assert candidate([3, 3, 5, 2, 3], 4) == 3\n    assert candidate([1, 1, 1, 1, 3], 5) == 4\n    assert candidate([1, 3, 2, 5, 1], 1) == 1\n    assert candidate([3, 3, 1, 4, 5], 2) == 2\n    assert candidate([1, 2, 5, 5, 4], 3) == 2\n    assert candidate([3, 1, 5, 3, 1, 1], 0) == 2\n    assert candidate([6, 4, 1, 5, 5, 3], 0) == 2\n    assert candidate([2, 2, 2, 1, 2, 4], 4) == 4\n    assert candidate([1, 1, 2, 2, 6, 2], 1) == 3\n    assert candidate([1, 2, 3, 6, 6, 2], 4) == 2\n    assert candidate([2, 4, 5, 1, 4, 1], 2) == 2\n    assert candidate([1, 5, 6, 4, 6, 3], 3) == 2\n    assert candidate([5, 4, 2, 4, 1, 3], 2) == 2\n    assert candidate([2, 1, 1, 3, 1, 3], 2) == 3\n    assert candidate([2, 4, 6, 6, 6, 4], 3) == 3\n    assert candidate([3, 6, 2, 5, 4, 5], 1) == 2\n    assert candidate([1, 1, 5, 6, 1, 4], 4) == 3\n    assert candidate([4, 6, 6, 6, 2, 4], 3) == 3\n    assert candidate([2, 5, 5, 5, 6, 4], 1) == 3\n    assert candidate([2, 3, 3, 2, 3, 3], 2) == 4\n    assert candidate([5, 2, 5, 3, 3, 2], 6) == 2\n    assert candidate([3, 5, 3, 2, 3, 6], 6) == 3\n    assert candidate([4, 3, 2, 5, 4, 2], 4) == 2\n    assert candidate([1, 2, 4, 2, 1, 3], 3) == 2\n    assert candidate([3, 1, 3, 4, 1, 6], 6) == 2\n    assert candidate([2, 3, 7, 7, 3, 2, 2], 7) == 3\n    assert candidate([5, 6, 7, 7, 4, 4, 2], 5) == 2\n    assert candidate([7, 2, 4, 1, 3, 3, 4], 4) == 2\n    assert candidate([5, 3, 1, 7, 5, 5, 7], 6) == 3\n    assert candidate([4, 2, 6, 2, 3, 4, 6], 6) == 2\n    assert candidate([2, 7, 6, 7, 3, 7, 4], 5) == 3\n    assert candidate([3, 2, 5, 1, 4, 3, 4], 4) == 2\n    assert candidate([2, 3, 3, 7, 2, 5, 1], 2) == 2\n    assert candidate([4, 1, 6, 7, 5, 3, 5], 1) == 2\n    assert candidate([3, 1, 4, 1, 5, 5, 6], 6) == 2\n    assert candidate([1, 5, 5, 7, 7, 7, 4], 0) == 3\n    assert candidate([5, 7, 4, 4, 1, 6, 7], 5) == 2\n\ndef test_check():\n    check(longestEqualSubarray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2834_relocateMarbles", "language": "py", "prompt": "from typing import List\n\ndef relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \"\"\"You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\n * We call a position occupied if there is at least one marble in that position.\n * There may be multiple marbles in a single position.\nExample 1:\nInput: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\nOutput: [5,6,8,9]\nExplanation: Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].\nExample 2:\nInput: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\nOutput: [2]\nExplanation: Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= moveFrom.length <= 105\n * moveFrom.length == moveTo.length\n * 1 <= nums[i], moveFrom[i], moveTo[i] <= 109\n * The test cases are generated such that there is at least a marble in\u00a0moveFrom[i]\u00a0at the moment we want to apply\u00a0the ith\u00a0move.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2834_relocateMarbles.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 6, 7, 8], [1, 7, 2], [2, 9, 5]) == [5, 6, 8, 9]\n    assert candidate([1, 1, 3, 3], [1, 3], [2, 2]) == [2]\n    assert candidate([5, 7, 8, 15], [5, 7, 8, 9], [9, 15, 2, 7]) == [2, 7, 15]\n    assert candidate([4, 6, 6, 9, 18], [18, 6, 17, 4, 9, 19, 2], [23, 17, 20, 19, 11, 2, 20]) == [11, 20, 23]\n    assert candidate([3, 4], [4, 3, 1, 2, 2, 3, 2, 4, 1], [3, 1, 2, 2, 3, 2, 4, 1, 1]) == [1]\n    assert candidate([5, 13, 22, 23, 23, 33], [13, 5, 12], [1, 12, 13]) == [1, 13, 22, 23, 33]\n    assert candidate([21, 24, 35, 72, 77, 82, 82, 96, 97, 97], [82, 76, 3, 97], [76, 3, 52, 27]) == [21, 24, 27, 35, 52, 72, 77, 96]\n    assert candidate([4, 6, 17, 41, 46, 46, 52, 57], [4], [62]) == [6, 17, 41, 46, 52, 57, 62]\n    assert candidate([1, 4, 10, 24, 46, 55, 61, 63, 71], [10, 52, 1, 80, 63, 55, 4, 46, 71, 24], [52, 42, 80, 55, 50, 62, 60, 17, 46, 38]) == [17, 38, 42, 46, 50, 60, 61, 62]\n    assert candidate([8, 9, 16, 17, 23], [8, 5, 16, 2, 9], [5, 20, 2, 18, 22]) == [17, 18, 20, 22, 23]\n    assert candidate([12, 37, 46, 47, 49, 55, 59, 65, 71, 88], [88, 59, 71], [81, 39, 73]) == [12, 37, 39, 46, 47, 49, 55, 65, 73, 81]\n    assert candidate([2, 45, 45, 48, 51, 57, 67, 73, 78, 78], [78, 67, 45, 34, 51, 62, 48, 95, 2, 67], [34, 65, 62, 95, 62, 12, 85, 67, 79, 71]) == [12, 57, 65, 71, 73, 79, 85]\n    assert candidate([1, 2], [1, 2, 3], [2, 3, 2]) == [2]\n    assert candidate([7, 19, 28, 34, 36, 36, 47], [36, 33, 34, 28, 41, 19, 14, 47, 28, 40], [33, 41, 27, 47, 14, 40, 46, 28, 42, 16]) == [7, 16, 27, 42, 46]\n    assert candidate([1, 1, 1], [1], [7]) == [7]\n    assert candidate([1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]) == [1]\n    assert candidate([5, 9, 17, 20, 29, 29], [20, 5, 1, 29, 22, 21, 9, 36, 33, 1], [1, 22, 21, 36, 36, 15, 33, 1, 3, 15]) == [3, 15, 17]\n    assert candidate([1], [1, 1, 1, 1], [1, 1, 1, 1]) == [1]\n    assert candidate([27, 41, 50, 52, 57, 60, 65, 67, 70], [52, 67, 70, 50, 57, 27, 47], [45, 45, 61, 47, 21, 65, 60]) == [21, 41, 45, 60, 61, 65]\n    assert candidate([2, 3, 7], [2, 7, 8, 8, 3, 5, 1, 4], [8, 5, 8, 1, 4, 4, 4, 5]) == [5]\n    assert candidate([4, 6, 8, 10], [8, 6], [4, 3]) == [3, 4, 10]\n    assert candidate([2, 4, 29, 34, 41, 44, 48], [29, 3, 44, 48, 2, 43, 4], [3, 24, 43, 42, 24, 8, 6]) == [6, 8, 24, 34, 41, 42]\n    assert candidate([12, 16, 22, 28, 36, 42, 60, 63], [42, 28, 12, 22], [22, 63, 14, 45]) == [14, 16, 36, 45, 60, 63]\n    assert candidate([12, 18, 21, 21, 31, 38, 39, 41, 84, 90], [41, 31, 12, 84, 9, 39, 21, 62], [24, 17, 58, 9, 62, 36, 23, 90]) == [17, 18, 23, 24, 36, 38, 58, 90]\n    assert candidate([12, 23, 30, 35, 46, 53, 64, 74, 81], [53, 74, 54, 48, 52, 64, 35, 30, 46, 29], [54, 48, 52, 47, 53, 29, 52, 10, 44, 28]) == [10, 12, 23, 28, 44, 47, 52, 53, 81]\n    assert candidate([2, 10, 13, 14, 16, 30], [2, 6, 14, 16, 25, 13, 30], [6, 30, 25, 1, 32, 17, 11]) == [1, 10, 11, 17, 32]\n    assert candidate([1, 6, 10, 11, 18, 22, 30], [10, 18, 1, 30, 6], [1, 37, 28, 38, 15]) == [11, 15, 22, 28, 37, 38]\n    assert candidate([3, 9, 10, 13], [9, 3, 13, 10, 5, 11, 8], [11, 5, 11, 15, 8, 5, 14]) == [5, 14, 15]\n    assert candidate([15, 31, 32, 52, 61, 65, 78, 84, 93, 100], [15, 32, 93, 3, 78, 65, 61, 84], [61, 3, 8, 55, 23, 87, 95, 44]) == [8, 23, 31, 44, 52, 55, 87, 95, 100]\n    assert candidate([1, 2], [1, 2, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 3, 4, 4, 2]) == [2]\n    assert candidate([2, 2, 2], [2, 8, 5, 9], [8, 5, 9, 2]) == [2]\n    assert candidate([3, 10, 11, 27, 58, 59, 61, 66, 68], [59, 61, 3, 15], [15, 68, 77, 52]) == [10, 11, 27, 52, 58, 66, 68, 77]\n    assert candidate([2, 9, 9], [9, 2, 8, 9, 4, 6, 7, 1, 5, 5], [4, 8, 9, 4, 6, 7, 1, 5, 5, 5]) == [5]\n    assert candidate([1, 18, 24, 25, 29, 31], [18, 25, 29, 18, 23], [3, 23, 18, 18, 8]) == [1, 3, 8, 18, 24, 31]\n    assert candidate([2, 18, 38, 38, 48, 50, 51, 61, 71], [61, 71, 2, 18, 47, 22, 24, 51], [58, 38, 22, 47, 68, 24, 47, 60]) == [38, 47, 48, 50, 58, 60, 68]\n    assert candidate([11, 11, 35, 35, 38, 43, 45], [35, 11, 2, 27, 38, 45, 47, 17], [2, 47, 27, 17, 47, 24, 35, 21]) == [21, 24, 35, 43]\n    assert candidate([4, 11, 15, 28, 36, 42, 45, 57], [57, 32, 36, 11, 52, 42, 55, 4], [32, 55, 39, 52, 11, 54, 31, 56]) == [11, 15, 28, 31, 39, 45, 54, 56]\n    assert candidate([2, 4], [4, 2], [4, 1]) == [1, 4]\n    assert candidate([9, 14, 24, 31, 32, 40, 47, 54, 75, 76], [31, 75, 76, 3, 47, 32, 24, 9, 14, 18], [76, 76, 3, 8, 18, 66, 32, 2, 62, 82]) == [2, 8, 32, 40, 54, 62, 66, 82]\n    assert candidate([1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]) == [1]\n    assert candidate([2, 12, 13, 14, 18], [13, 2, 14], [17, 20, 19]) == [12, 17, 18, 19, 20]\n    assert candidate([12, 21, 24, 28, 41, 60, 62, 70, 76], [21, 76, 41, 3], [23, 33, 3, 53]) == [12, 23, 24, 28, 33, 53, 60, 62, 70]\n    assert candidate([7, 29, 40, 43, 48, 56, 60, 72, 81], [56, 60, 6, 62], [62, 6, 34, 17]) == [7, 17, 29, 34, 40, 43, 48, 72, 81]\n    assert candidate([2, 4, 5, 8], [2, 4, 3, 7, 5, 8, 14], [3, 7, 9, 14, 9, 6, 16]) == [6, 9, 16]\n    assert candidate([9, 15, 18, 24, 39, 48, 59, 64], [59, 64, 63, 60, 9], [60, 63, 61, 45, 57]) == [15, 18, 24, 39, 45, 48, 57, 61]\n    assert candidate([2, 8, 8, 9, 11, 21], [8, 11, 30, 21, 14, 27, 9, 22, 2, 7], [30, 27, 22, 14, 7, 3, 1, 21, 4, 16]) == [1, 3, 4, 16, 21]\n    assert candidate([5, 11, 30, 43, 47, 63, 65, 82, 86, 93], [43, 63, 11, 93, 82, 47, 54, 5, 30], [36, 53, 54, 49, 18, 3, 29, 66, 22]) == [3, 18, 22, 29, 36, 49, 53, 65, 66, 86]\n    assert candidate([9, 14, 14, 16, 26, 51, 53, 64, 76], [64, 45, 9, 14, 26, 53, 51, 67, 80], [45, 67, 23, 37, 80, 16, 27, 51, 44]) == [16, 23, 27, 37, 44, 51, 76]\n    assert candidate([16, 21, 21, 25, 39, 41, 44], [41, 21, 45, 29, 35, 39, 29, 25, 28], [21, 45, 29, 35, 33, 29, 20, 28, 45]) == [16, 20, 33, 44, 45]\n    assert candidate([1, 1, 3], [3, 1, 9, 5, 5], [9, 9, 5, 5, 9]) == [9]\n    assert candidate([12, 14, 16, 16, 21, 32], [32, 5, 14, 21, 15, 22, 16], [5, 22, 15, 16, 15, 27, 22]) == [12, 15, 22, 27]\n    assert candidate([1, 5, 9], [1, 5, 9, 3, 8, 5, 9, 1, 5], [8, 3, 9, 1, 5, 8, 1, 5, 2]) == [2, 8]\n    assert candidate([1, 2, 14, 30, 43, 44, 76, 76, 77], [76, 77, 43, 1], [56, 44, 11, 45]) == [2, 11, 14, 30, 44, 45, 56]\n    assert candidate([4, 25, 27, 33, 33, 35], [25, 27, 27, 34, 7, 36], [34, 27, 36, 7, 25, 1]) == [1, 4, 25, 33, 35]\n    assert candidate([3, 7, 18, 25, 37, 48, 48, 62], [48, 18, 62, 48, 2, 18, 56, 53, 37], [15, 48, 56, 2, 18, 55, 53, 40, 22]) == [3, 7, 15, 22, 25, 40, 55]\n    assert candidate([19, 35, 46, 55, 59, 59, 68, 72, 93, 100], [46, 100, 35, 19, 68, 87, 21, 93, 27], [76, 94, 87, 66, 57, 21, 27, 89, 40]) == [40, 55, 57, 59, 66, 72, 76, 89, 94]\n    assert candidate([1, 3], [3, 1, 3, 4, 4], [1, 3, 4, 4, 4]) == [4]\n    assert candidate([22, 30, 36, 40, 44, 48, 50, 59], [30, 44, 64, 59, 4], [64, 4, 50, 25, 36]) == [22, 25, 36, 40, 48, 50]\n    assert candidate([1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1]\n    assert candidate([8, 18, 23, 37, 37, 39, 48], [8, 39, 23, 7, 37, 36], [39, 7, 36, 25, 10, 28]) == [10, 18, 25, 28, 48]\n    assert candidate([1, 4], [1, 2, 4], [2, 3, 1]) == [1, 3]\n    assert candidate([3, 7, 9, 13], [3, 16, 9, 7, 6, 15, 16, 7, 13, 7], [16, 6, 2, 15, 8, 16, 7, 1, 7, 9]) == [1, 2, 8, 9]\n    assert candidate([11, 12, 17, 18, 20], [11, 17], [18, 13]) == [12, 13, 18, 20]\n    assert candidate([5, 11, 17, 21, 25], [17], [14]) == [5, 11, 14, 21, 25]\n    assert candidate([7, 9, 12, 20, 23], [7, 8], [8, 12]) == [9, 12, 20, 23]\n    assert candidate([1], [1, 1], [1, 1]) == [1]\n    assert candidate([10, 13, 17, 49, 56, 57, 59, 62, 68], [49, 62, 59, 45], [58, 64, 45, 77]) == [10, 13, 17, 56, 57, 58, 64, 68, 77]\n    assert candidate([1, 8, 15, 23, 24, 29, 47], [8, 23, 24, 47, 10, 1], [38, 10, 10, 48, 22, 24]) == [15, 22, 24, 29, 38, 48]\n    assert candidate([3, 3], [3, 1, 4, 2, 2, 2, 2, 2, 1], [1, 4, 2, 2, 2, 2, 2, 1, 3]) == [3]\n    assert candidate([4, 8, 8], [8, 7, 7], [7, 7, 8]) == [4, 8]\n    assert candidate([1, 2], [1, 2, 1, 3, 4, 2, 3, 4, 1, 4], [3, 1, 3, 4, 2, 3, 4, 1, 4, 4]) == [4]\n    assert candidate([12, 13, 16, 31, 48, 52, 56, 72, 79], [13, 79, 12, 72, 14, 48, 56, 52], [56, 14, 8, 63, 70, 54, 19, 73]) == [8, 16, 19, 31, 54, 63, 70, 73]\n    assert candidate([3, 7, 7, 14], [3, 16, 7, 15, 12, 5, 14, 16, 13], [16, 15, 5, 12, 16, 14, 9, 13, 5]) == [5, 9]\n    assert candidate([9, 13, 14, 15], [15, 14, 13, 5, 8], [8, 3, 5, 3, 12]) == [3, 9, 12]\n    assert candidate([11, 16, 28, 33, 37, 45, 45, 58, 79], [16, 57, 81, 79, 11], [57, 81, 29, 45, 31]) == [28, 29, 31, 33, 37, 45, 58]\n    assert candidate([1, 6, 7, 7], [6, 8, 8, 12, 15, 8, 9, 15], [8, 8, 12, 15, 8, 9, 15, 8]) == [1, 7, 8]\n    assert candidate([7, 20, 23, 25, 33, 39, 51, 74, 76], [76, 20, 74, 7, 15], [74, 64, 15, 40, 71]) == [23, 25, 33, 39, 40, 51, 64, 71]\n    assert candidate([4, 6, 6], [6, 4, 7, 6, 4, 7, 8, 1, 2, 4], [6, 7, 4, 7, 8, 2, 1, 9, 4, 2]) == [2, 9]\n    assert candidate([8, 14, 17, 19, 21], [19, 8, 14, 21, 17, 1, 14, 18], [14, 18, 14, 1, 18, 23, 10, 12]) == [10, 12, 23]\n    assert candidate([13, 18, 39, 44, 45, 49, 72, 81, 95, 100], [49, 81, 18, 39, 44, 22, 100, 66, 45, 5], [54, 22, 66, 32, 13, 4, 76, 5, 92, 33]) == [4, 13, 32, 33, 54, 72, 76, 92, 95]\n    assert candidate([1, 3], [3, 1, 3, 4, 3, 3, 3, 3, 2], [1, 3, 4, 3, 3, 3, 3, 2, 3]) == [3]\n    assert candidate([2, 4, 5, 13], [13, 5, 2], [1, 9, 10]) == [1, 4, 9, 10]\n    assert candidate([1], [1], [1]) == [1]\n    assert candidate([3, 4, 13, 14, 19], [13, 3, 19, 3, 3, 14, 13, 4, 15, 11], [15, 3, 8, 3, 13, 1, 10, 22, 11, 2]) == [1, 2, 8, 10, 22]\n    assert candidate([3, 6, 9, 11], [9, 3, 8], [7, 8, 9]) == [6, 7, 9, 11]\n    assert candidate([9, 15, 16, 18, 20, 26], [20, 18, 13], [31, 13, 32]) == [9, 15, 16, 26, 31, 32]\n    assert candidate([6, 11, 21, 25, 25], [11, 21, 2, 25, 17, 1], [17, 2, 19, 8, 1, 9]) == [6, 8, 9, 19]\n    assert candidate([2, 6, 8], [2, 6, 8, 2, 9, 2, 7], [8, 2, 2, 9, 2, 7, 8]) == [8]\n    assert candidate([1, 7, 7], [1, 7, 1, 6, 2, 9, 5, 6], [2, 1, 6, 9, 5, 6, 5, 6]) == [5, 6]\n    assert candidate([4, 6, 7, 12, 12, 25, 37], [37, 41, 37, 6, 4, 7, 25], [41, 37, 37, 26, 7, 45, 45]) == [12, 26, 37, 45]\n    assert candidate([3, 4], [4, 3], [2, 1]) == [1, 2]\n    assert candidate([1, 2], [1, 2, 3, 3, 2, 1, 2], [2, 3, 3, 2, 1, 2, 2]) == [2]\n    assert candidate([20, 37, 44, 53, 55, 59, 60, 62], [20, 44, 53, 60, 11, 55, 37, 59], [53, 28, 62, 11, 16, 63, 9, 6]) == [6, 9, 16, 28, 62, 63]\n    assert candidate([2, 4], [4, 2, 2, 1, 4, 2, 2, 3], [2, 2, 1, 4, 2, 2, 3, 4]) == [4]\n    assert candidate([2, 6, 7], [6, 7, 6, 3, 6, 5, 2], [6, 6, 3, 6, 5, 4, 8]) == [4, 8]\n    assert candidate([3, 7, 13, 13], [13, 7, 4, 6], [9, 4, 6, 15]) == [3, 9, 15]\n    assert candidate([2, 3], [2, 3], [1, 1]) == [1]\n    assert candidate([12, 13, 25, 27, 34, 34, 38], [12, 13, 11, 33, 2, 25, 34, 27, 38], [11, 2, 33, 26, 25, 30, 24, 38, 47]) == [24, 26, 30, 47]\n    assert candidate([2, 13, 20, 29, 34, 48, 48], [2, 13], [5, 42]) == [5, 20, 29, 34, 42, 48]\n    assert candidate([19, 30, 31, 41, 47, 54, 57, 62], [41, 31, 62, 30, 54], [38, 49, 10, 60, 31]) == [10, 19, 31, 38, 47, 49, 57, 60]\n\ndef test_check():\n    check(relocateMarbles)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2844_sumOfSquares", "language": "py", "prompt": "from typing import List\n\ndef sumOfSquares(nums: List[int]) -> int:\n    \"\"\"You are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\nExample 1:\nInput: nums = [1,2,3,4]\nOutput: 21\nExplanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4.\nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.\nExample 2:\nInput: nums = [2,7,1,19,18,3]\nOutput: 63\nExplanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6.\nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63.\nConstraints:\n * 1 <= nums.length == n <= 50\n * 1 <= nums[i] <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2844_sumOfSquares.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == 21\n    assert candidate([2, 7, 1, 19, 18, 3]) == 63\n    assert candidate([1]) == 1\n    assert candidate([2]) == 4\n    assert candidate([3]) == 9\n    assert candidate([4]) == 16\n    assert candidate([5]) == 25\n    assert candidate([6]) == 36\n    assert candidate([7]) == 49\n    assert candidate([8]) == 64\n    assert candidate([9]) == 81\n    assert candidate([10]) == 100\n    assert candidate([11]) == 121\n    assert candidate([12]) == 144\n    assert candidate([13]) == 169\n    assert candidate([14]) == 196\n    assert candidate([15]) == 225\n    assert candidate([16]) == 256\n    assert candidate([17]) == 289\n    assert candidate([18]) == 324\n    assert candidate([19]) == 361\n    assert candidate([20]) == 400\n    assert candidate([21]) == 441\n    assert candidate([22]) == 484\n    assert candidate([23]) == 529\n    assert candidate([24]) == 576\n    assert candidate([25]) == 625\n    assert candidate([26]) == 676\n    assert candidate([27]) == 729\n    assert candidate([28]) == 784\n    assert candidate([29]) == 841\n    assert candidate([30]) == 900\n    assert candidate([31]) == 961\n    assert candidate([32]) == 1024\n    assert candidate([33]) == 1089\n    assert candidate([34]) == 1156\n    assert candidate([35]) == 1225\n    assert candidate([36]) == 1296\n    assert candidate([37]) == 1369\n    assert candidate([38]) == 1444\n    assert candidate([39]) == 1521\n    assert candidate([40]) == 1600\n    assert candidate([41]) == 1681\n    assert candidate([42]) == 1764\n    assert candidate([43]) == 1849\n    assert candidate([44]) == 1936\n    assert candidate([45]) == 2025\n    assert candidate([46]) == 2116\n    assert candidate([47]) == 2209\n    assert candidate([48]) == 2304\n    assert candidate([49]) == 2401\n    assert candidate([50]) == 2500\n    assert candidate([16, 16]) == 512\n    assert candidate([13, 36]) == 1465\n    assert candidate([40, 37]) == 2969\n    assert candidate([33, 42]) == 2853\n    assert candidate([46, 9]) == 2197\n    assert candidate([30, 14]) == 1096\n    assert candidate([5, 41]) == 1706\n    assert candidate([17, 9]) == 370\n    assert candidate([29, 21]) == 1282\n    assert candidate([4, 38]) == 1460\n    assert candidate([14, 18]) == 520\n    assert candidate([11, 7]) == 170\n    assert candidate([11, 36]) == 1417\n    assert candidate([18, 26]) == 1000\n    assert candidate([37, 46]) == 3485\n    assert candidate([13, 33]) == 1258\n    assert candidate([39, 1]) == 1522\n    assert candidate([37, 16]) == 1625\n    assert candidate([22, 34]) == 1640\n    assert candidate([4, 50]) == 2516\n    assert candidate([42, 40]) == 3364\n    assert candidate([7, 44]) == 1985\n    assert candidate([21, 27]) == 1170\n    assert candidate([49, 35]) == 3626\n    assert candidate([32, 20]) == 1424\n    assert candidate([30, 12]) == 1044\n    assert candidate([50, 42]) == 4264\n    assert candidate([3, 11]) == 130\n    assert candidate([38, 17]) == 1733\n    assert candidate([50, 32]) == 3524\n    assert candidate([12, 35]) == 1369\n    assert candidate([9, 32]) == 1105\n    assert candidate([6, 11]) == 157\n    assert candidate([11, 39]) == 1642\n    assert candidate([18, 29]) == 1165\n    assert candidate([44, 29]) == 2777\n    assert candidate([50, 13]) == 2669\n    assert candidate([46, 46]) == 4232\n    assert candidate([27, 5]) == 754\n    assert candidate([12, 13]) == 313\n    assert candidate([10, 46]) == 2216\n    assert candidate([37, 32]) == 2393\n    assert candidate([26, 33]) == 1765\n    assert candidate([44, 3]) == 1945\n    assert candidate([9, 16]) == 337\n    assert candidate([7, 21]) == 490\n    assert candidate([23, 33]) == 1618\n    assert candidate([22, 5]) == 509\n\ndef test_check():\n    check(sumOfSquares)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2849_sumImbalanceNumbers", "language": "py", "prompt": "from typing import List\n\ndef sumImbalanceNumbers(nums: List[int]) -> int:\n    \"\"\"    The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\n* 0 <= i < n - 1, and\n* sarr[i+1] - sarr[i] > 1\n    Here, sorted(arr) is the function that returns the sorted version of arr.\n    Given a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    Example 1:\n    Input: nums = [2,3,1,4]\n    Output: 3\n    Explanation: There are 3 subarrays with non-zero imbalance numbers:\n    - Subarray [3, 1] with an imbalance number of 1.\n    - Subarray [3, 1, 4] with an imbalance number of 1.\n    - Subarray [1, 4] with an imbalance number of 1.\n    The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3.\n    Example 2:\n    Input: nums = [1,3,3,3,5]\n    Output: 8\n    Explanation: There are 7 subarrays with non-zero imbalance numbers:\n    - Subarray [1, 3] with an imbalance number of 1.\n    - Subarray [1, 3, 3] with an imbalance number of 1.\n    - Subarray [1, 3, 3, 3] with an imbalance number of 1.\n    - Subarray [1, 3, 3, 3, 5] with an imbalance number of 2.\n    - Subarray [3, 3, 3, 5] with an imbalance number of 1.\n    - Subarray [3, 3, 5] with an imbalance number of 1.\n    - Subarray [3, 5] with an imbalance number of 1.\n    The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8.\n    Constraints:\n* 1 <= nums.length <= 1000\n* 1 <= nums[i] <= nums.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2849_sumImbalanceNumbers.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 1, 4]) == 3\n    assert candidate([1, 3, 3, 3, 5]) == 8\n    assert candidate([1]) == 0\n    assert candidate([1, 1]) == 0\n    assert candidate([1, 2]) == 0\n    assert candidate([2, 1]) == 0\n    assert candidate([2, 2]) == 0\n    assert candidate([1, 1, 1]) == 0\n    assert candidate([1, 1, 2]) == 0\n    assert candidate([1, 1, 3]) == 2\n    assert candidate([1, 2, 1]) == 0\n    assert candidate([1, 2, 2]) == 0\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([1, 3, 1]) == 3\n    assert candidate([1, 3, 2]) == 1\n    assert candidate([1, 3, 3]) == 2\n    assert candidate([2, 1, 1]) == 0\n    assert candidate([2, 1, 2]) == 0\n    assert candidate([2, 1, 3]) == 1\n    assert candidate([2, 2, 1]) == 0\n    assert candidate([2, 2, 2]) == 0\n    assert candidate([2, 2, 3]) == 0\n    assert candidate([2, 3, 1]) == 1\n    assert candidate([2, 3, 2]) == 0\n    assert candidate([2, 3, 3]) == 0\n    assert candidate([3, 1, 1]) == 2\n    assert candidate([3, 1, 2]) == 1\n    assert candidate([3, 1, 3]) == 3\n    assert candidate([3, 2, 1]) == 0\n    assert candidate([3, 2, 2]) == 0\n    assert candidate([3, 2, 3]) == 0\n    assert candidate([3, 3, 1]) == 2\n    assert candidate([3, 3, 2]) == 0\n    assert candidate([3, 3, 3]) == 0\n    assert candidate([1, 1, 1, 1]) == 0\n    assert candidate([1, 1, 1, 2]) == 0\n    assert candidate([1, 1, 1, 3]) == 3\n    assert candidate([1, 1, 1, 4]) == 3\n    assert candidate([1, 1, 2, 1]) == 0\n    assert candidate([1, 1, 2, 2]) == 0\n    assert candidate([1, 1, 2, 3]) == 0\n    assert candidate([1, 1, 2, 4]) == 3\n    assert candidate([1, 1, 3, 1]) == 5\n    assert candidate([1, 1, 3, 2]) == 2\n    assert candidate([1, 1, 3, 3]) == 4\n    assert candidate([1, 1, 3, 4]) == 4\n    assert candidate([1, 1, 4, 1]) == 5\n    assert candidate([1, 1, 4, 2]) == 5\n    assert candidate([1, 1, 4, 3]) == 4\n    assert candidate([1, 1, 4, 4]) == 4\n    assert candidate([1, 2, 1, 1]) == 0\n    assert candidate([1, 2, 1, 2]) == 0\n    assert candidate([1, 2, 1, 3]) == 1\n    assert candidate([1, 2, 1, 4]) == 3\n    assert candidate([1, 2, 2, 1]) == 0\n    assert candidate([1, 2, 2, 2]) == 0\n    assert candidate([1, 2, 2, 3]) == 0\n    assert candidate([1, 2, 2, 4]) == 3\n    assert candidate([1, 2, 3, 1]) == 1\n    assert candidate([1, 2, 3, 2]) == 0\n    assert candidate([1, 2, 3, 3]) == 0\n    assert candidate([1, 2, 3, 4]) == 0\n    assert candidate([1, 2, 4, 1]) == 5\n    assert candidate([1, 2, 4, 2]) == 5\n    assert candidate([1, 2, 4, 3]) == 2\n    assert candidate([1, 2, 4, 4]) == 4\n    assert candidate([1, 3, 1, 1]) == 5\n    assert candidate([1, 3, 1, 2]) == 3\n    assert candidate([1, 3, 1, 3]) == 6\n    assert candidate([1, 3, 1, 4]) == 6\n    assert candidate([1, 3, 2, 1]) == 1\n    assert candidate([1, 3, 2, 2]) == 1\n    assert candidate([1, 3, 2, 3]) == 1\n    assert candidate([1, 3, 2, 4]) == 2\n    assert candidate([1, 3, 3, 1]) == 5\n    assert candidate([1, 3, 3, 2]) == 2\n    assert candidate([1, 3, 3, 3]) == 3\n    assert candidate([1, 3, 3, 4]) == 3\n    assert candidate([1, 3, 4, 1]) == 5\n    assert candidate([1, 3, 4, 2]) == 3\n    assert candidate([1, 3, 4, 3]) == 3\n    assert candidate([1, 3, 4, 4]) == 3\n    assert candidate([1, 4, 1, 1]) == 5\n    assert candidate([1, 4, 1, 2]) == 5\n    assert candidate([1, 4, 1, 3]) == 6\n    assert candidate([1, 4, 1, 4]) == 6\n    assert candidate([1, 4, 2, 1]) == 5\n    assert candidate([1, 4, 2, 2]) == 5\n    assert candidate([1, 4, 2, 3]) == 3\n    assert candidate([1, 4, 2, 4]) == 6\n    assert candidate([1, 4, 3, 1]) == 5\n    assert candidate([1, 4, 3, 2]) == 2\n    assert candidate([1, 4, 3, 3]) == 3\n    assert candidate([1, 4, 3, 4]) == 3\n    assert candidate([1, 4, 4, 1]) == 5\n    assert candidate([1, 4, 4, 2]) == 5\n    assert candidate([1, 4, 4, 3]) == 3\n    assert candidate([1, 4, 4, 4]) == 3\n    assert candidate([2, 1, 1, 1]) == 0\n    assert candidate([2, 1, 1, 2]) == 0\n\ndef test_check():\n    check(sumImbalanceNumbers)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2855_maximumJumps", "language": "py", "prompt": "from typing import List\n\ndef maximumJumps(nums: List[int], target: int) -> int:\n    \"\"\"You are given a 0-indexed array nums of n integers and an integer target.\nYou are initially positioned at index 0. In one step, you can jump from index i to any index j such that:\n * 0 <= i < j < n\n * -target <= nums[j] - nums[i] <= target\nReturn the maximum number of jumps you can make to reach index n - 1.\nIf there is no way to reach index n - 1, return -1.\nExample 1:\nInput: nums = [1,3,6,4,1,2], target = 2\nOutput: 3\nExplanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 3.\n- Jump from index 3 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3.\nExample 2:\nInput: nums = [1,3,6,4,1,2], target = 3\nOutput: 5\nExplanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 2.\n- Jump from index 2 to index 3.\n- Jump from index 3 to index 4.\n- Jump from index 4 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5.\nExample 3:\nInput: nums = [1,3,6,4,1,2], target = 0\nOutput: -1\nExplanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1.\nConstraints:\n * 2 <= nums.length == n <= 1000\n * -109\u00a0<= nums[i]\u00a0<= 109\n * 0 <= target <= 2 * 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2855_maximumJumps.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 6, 4, 1, 2], 2) == 3\n    assert candidate([1, 3, 6, 4, 1, 2], 3) == 5\n    assert candidate([1, 3, 6, 4, 1, 2], 0) == -1\n    assert candidate([0, 1], 0) == -1\n    assert candidate([0, 1], 1) == 1\n    assert candidate([0, 1], 2) == 1\n    assert candidate([1, 0], 0) == -1\n    assert candidate([1, 0], 1) == 1\n    assert candidate([1, 0], 2) == 1\n    assert candidate([0, 1, 2], 0) == -1\n    assert candidate([0, 1, 2], 1) == 2\n    assert candidate([0, 1, 2], 2) == 2\n    assert candidate([0, 1, 2], 3) == 2\n    assert candidate([0, 2, 1], 0) == -1\n    assert candidate([0, 2, 1], 1) == 1\n    assert candidate([0, 2, 1], 2) == 2\n    assert candidate([0, 2, 1], 3) == 2\n    assert candidate([1, 0, 2], 0) == -1\n    assert candidate([1, 0, 2], 1) == 1\n    assert candidate([1, 0, 2], 2) == 2\n    assert candidate([1, 0, 2], 3) == 2\n    assert candidate([1, 2, 0], 0) == -1\n    assert candidate([1, 2, 0], 1) == 1\n    assert candidate([1, 2, 0], 2) == 2\n    assert candidate([1, 2, 0], 3) == 2\n    assert candidate([2, 0, 1], 0) == -1\n    assert candidate([2, 0, 1], 1) == 1\n    assert candidate([2, 0, 1], 2) == 2\n    assert candidate([2, 0, 1], 3) == 2\n    assert candidate([2, 1, 0], 0) == -1\n    assert candidate([2, 1, 0], 1) == 2\n    assert candidate([2, 1, 0], 2) == 2\n    assert candidate([2, 1, 0], 3) == 2\n    assert candidate([0, 1, 2, 3], 0) == -1\n    assert candidate([0, 1, 2, 3], 1) == 3\n    assert candidate([0, 1, 2, 3], 2) == 3\n    assert candidate([0, 1, 2, 3], 3) == 3\n    assert candidate([0, 1, 2, 3], 4) == 3\n    assert candidate([0, 1, 3, 2], 0) == -1\n    assert candidate([0, 1, 3, 2], 1) == 2\n    assert candidate([0, 1, 3, 2], 2) == 3\n    assert candidate([0, 1, 3, 2], 3) == 3\n    assert candidate([0, 1, 3, 2], 4) == 3\n    assert candidate([0, 2, 1, 3], 0) == -1\n    assert candidate([0, 2, 1, 3], 1) == -1\n    assert candidate([0, 2, 1, 3], 2) == 3\n    assert candidate([0, 2, 1, 3], 3) == 3\n    assert candidate([0, 2, 1, 3], 4) == 3\n    assert candidate([0, 2, 3, 1], 0) == -1\n    assert candidate([0, 2, 3, 1], 1) == 1\n    assert candidate([0, 2, 3, 1], 2) == 3\n    assert candidate([0, 2, 3, 1], 3) == 3\n    assert candidate([0, 2, 3, 1], 4) == 3\n    assert candidate([0, 3, 1, 2], 0) == -1\n    assert candidate([0, 3, 1, 2], 1) == 2\n    assert candidate([0, 3, 1, 2], 2) == 2\n    assert candidate([0, 3, 1, 2], 3) == 3\n    assert candidate([0, 3, 1, 2], 4) == 3\n    assert candidate([0, 3, 2, 1], 0) == -1\n    assert candidate([0, 3, 2, 1], 1) == 1\n    assert candidate([0, 3, 2, 1], 2) == 2\n    assert candidate([0, 3, 2, 1], 3) == 3\n    assert candidate([0, 3, 2, 1], 4) == 3\n    assert candidate([1, 0, 2, 3], 0) == -1\n    assert candidate([1, 0, 2, 3], 1) == 2\n    assert candidate([1, 0, 2, 3], 2) == 3\n    assert candidate([1, 0, 2, 3], 3) == 3\n    assert candidate([1, 0, 2, 3], 4) == 3\n    assert candidate([1, 0, 3, 2], 0) == -1\n    assert candidate([1, 0, 3, 2], 1) == 1\n    assert candidate([1, 0, 3, 2], 2) == 2\n    assert candidate([1, 0, 3, 2], 3) == 3\n    assert candidate([1, 0, 3, 2], 4) == 3\n    assert candidate([1, 2, 0, 3], 0) == -1\n    assert candidate([1, 2, 0, 3], 1) == 2\n    assert candidate([1, 2, 0, 3], 2) == 2\n    assert candidate([1, 2, 0, 3], 3) == 3\n    assert candidate([1, 2, 0, 3], 4) == 3\n    assert candidate([1, 2, 3, 0], 0) == -1\n    assert candidate([1, 2, 3, 0], 1) == 1\n    assert candidate([1, 2, 3, 0], 2) == 2\n    assert candidate([1, 2, 3, 0], 3) == 3\n    assert candidate([1, 2, 3, 0], 4) == 3\n    assert candidate([1, 3, 0, 2], 0) == -1\n    assert candidate([1, 3, 0, 2], 1) == 1\n    assert candidate([1, 3, 0, 2], 2) == 2\n    assert candidate([1, 3, 0, 2], 3) == 3\n    assert candidate([1, 3, 0, 2], 4) == 3\n    assert candidate([1, 3, 2, 0], 0) == -1\n    assert candidate([1, 3, 2, 0], 1) == 1\n    assert candidate([1, 3, 2, 0], 2) == 3\n    assert candidate([1, 3, 2, 0], 3) == 3\n    assert candidate([1, 3, 2, 0], 4) == 3\n    assert candidate([2, 0, 1, 3], 0) == -1\n    assert candidate([2, 0, 1, 3], 1) == 1\n    assert candidate([2, 0, 1, 3], 2) == 3\n    assert candidate([2, 0, 1, 3], 3) == 3\n    assert candidate([2, 0, 1, 3], 4) == 3\n    assert candidate([2, 0, 3, 1], 0) == -1\n    assert candidate([2, 0, 3, 1], 1) == 1\n\ndef test_check():\n    check(maximumJumps)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2856_countCompleteSubarrays", "language": "py", "prompt": "from typing import List\n\ndef countCompleteSubarrays(nums: List[int]) -> int:\n    \"\"\"You are given an array nums consisting of positive integers.\nWe call a subarray of an array complete if the following condition is satisfied:\n * The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.\nReturn the number of complete subarrays.\nA subarray is a contiguous non-empty part of an array.\nExample 1:\nInput: nums = [1,3,1,2,2]\nOutput: 4\nExplanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].\nExample 2:\nInput: nums = [5,5,5,5]\nOutput: 10\nExplanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.\nConstraints:\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 2000\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2856_countCompleteSubarrays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 1, 2, 2]) == 4\n    assert candidate([5, 5, 5, 5]) == 10\n    assert candidate([459, 459, 962, 1579, 1435, 756, 1872, 1597]) == 2\n    assert candidate([1786, 1786, 1786, 114]) == 3\n    assert candidate([1632, 1632, 528, 359, 1671, 1632, 511, 1087, 424, 1684]) == 3\n    assert candidate([1430, 12, 1430, 1075, 1722]) == 2\n    assert candidate([1917, 1917, 608, 608, 1313, 751, 558, 1561, 608]) == 4\n    assert candidate([254, 1690, 1690, 1068, 1779]) == 1\n    assert candidate([1116]) == 1\n    assert candidate([1677, 1677, 1352, 1219, 1666, 1677, 1892, 1892, 319]) == 3\n    assert candidate([1386, 1997, 1997, 574, 574, 1360, 989]) == 1\n    assert candidate([50, 48, 1118, 540, 1248, 1984, 1698, 41, 1984, 186]) == 1\n    assert candidate([273, 524, 40, 1323, 1323]) == 2\n    assert candidate([246, 376, 828, 191, 1942, 210]) == 1\n    assert candidate([463, 1497, 1676, 127, 1379, 17, 1075, 190]) == 1\n    assert candidate([765, 1370]) == 1\n    assert candidate([1110, 804, 1110, 839, 728, 839]) == 4\n    assert candidate([1001]) == 1\n    assert candidate([665, 867, 954, 1411, 728, 1006, 372, 1411]) == 2\n    assert candidate([1213, 1203, 1277, 369, 1277]) == 2\n    assert candidate([1898, 370, 822, 1659, 1360, 128, 370, 360, 261, 1898]) == 4\n    assert candidate([1881, 1446]) == 1\n    assert candidate([474, 315, 155, 155, 1986]) == 1\n    assert candidate([1389, 1817, 401, 1067, 1356, 1997]) == 1\n    assert candidate([1586, 1332, 1055, 1586, 1586, 1861, 892, 1445]) == 2\n    assert candidate([1601, 1601]) == 3\n    assert candidate([1417, 1417, 1160, 387, 928, 1572, 1832]) == 2\n    assert candidate([1497, 1237, 1237, 946, 682, 331, 742]) == 1\n    assert candidate([377, 377]) == 3\n    assert candidate([356, 356, 356, 356, 356, 315]) == 5\n    assert candidate([285]) == 1\n    assert candidate([211, 211, 731, 226]) == 2\n    assert candidate([1253, 188, 188, 5, 1393, 1696, 1062]) == 1\n    assert candidate([90, 1297, 482, 482, 90, 1836, 1045, 1497, 482]) == 4\n    assert candidate([1857, 273, 609, 609, 1803, 1491, 223, 609, 1857, 1052]) == 2\n    assert candidate([617, 1014, 679, 934, 955]) == 1\n    assert candidate([577, 577]) == 3\n    assert candidate([1793, 997, 1082, 1411, 997, 546, 224, 336, 307, 336]) == 2\n    assert candidate([1150, 1150]) == 3\n    assert candidate([634]) == 1\n    assert candidate([1454, 1789, 1454]) == 3\n    assert candidate([1657, 1090, 1682, 1376, 547, 547, 407, 755, 1124, 1376]) == 2\n    assert candidate([379]) == 1\n    assert candidate([1673, 1584, 1584, 1055, 1971, 1122, 1086, 1692, 75]) == 1\n    assert candidate([722, 1427]) == 1\n    assert candidate([1641, 448, 1641, 1437, 448, 1406, 1437]) == 6\n    assert candidate([1440, 704, 1440, 1440, 749]) == 2\n    assert candidate([832, 832]) == 3\n    assert candidate([1635, 1759, 1759, 1976, 700]) == 1\n    assert candidate([1577, 1674, 1745, 156, 596, 1973, 1390, 156, 1497, 415]) == 1\n    assert candidate([1646, 1991]) == 1\n    assert candidate([1613, 881, 1660, 1270, 1783, 881, 773, 1783, 1229, 111]) == 1\n    assert candidate([431]) == 1\n    assert candidate([113]) == 1\n    assert candidate([151]) == 1\n    assert candidate([999, 701, 389, 999, 409, 488, 993, 999, 517, 1860]) == 2\n    assert candidate([236, 596, 1263, 1563, 860, 596, 1184, 575]) == 1\n    assert candidate([278, 338]) == 1\n    assert candidate([939]) == 1\n    assert candidate([1293, 564, 614, 694, 1386, 564]) == 2\n    assert candidate([681, 448]) == 1\n    assert candidate([1563, 558, 1778, 1404, 1973]) == 1\n    assert candidate([1508, 1508, 649]) == 2\n    assert candidate([1077, 445, 1947, 445, 789, 789, 789, 956, 1988, 189]) == 1\n    assert candidate([1984, 526, 30, 1205, 1691, 1984, 1241, 280, 280, 1984]) == 6\n    assert candidate([1802, 1876, 1143, 1802, 1012, 1876, 1802, 1821]) == 3\n    assert candidate([1338, 901, 613, 575, 613]) == 2\n    assert candidate([406, 406, 242, 242, 770, 1063, 1436, 1063, 1063]) == 6\n    assert candidate([1235, 1235]) == 3\n    assert candidate([1337, 1088, 1088, 892, 1209, 1269]) == 1\n    assert candidate([1941, 1941]) == 3\n    assert candidate([319]) == 1\n    assert candidate([1891, 1891, 1748, 1748, 923, 1748, 923, 763, 1062, 1748]) == 4\n    assert candidate([1111, 503, 1980]) == 1\n    assert candidate([213, 1666, 469, 1675]) == 1\n    assert candidate([769, 1774, 1654, 928, 1204]) == 1\n    assert candidate([294, 294, 294, 294, 1351, 294, 1351, 62, 585]) == 6\n    assert candidate([1197]) == 1\n    assert candidate([21, 1549, 21, 1549, 1998, 1219, 1549, 1021]) == 3\n    assert candidate([1124, 1124, 556, 1322, 556]) == 4\n    assert candidate([908, 908, 863, 1977, 908, 8, 427, 1322]) == 3\n    assert candidate([770]) == 1\n    assert candidate([517, 1497, 334, 334, 996, 1497, 1394, 534]) == 1\n    assert candidate([564, 750, 750, 750, 1965, 1965, 1402]) == 1\n    assert candidate([403, 1080, 365, 1962, 1589, 1740, 1335, 1335, 1589]) == 3\n    assert candidate([1712, 1621, 1295, 522, 1734, 522, 1371, 1935, 684]) == 1\n    assert candidate([270, 1443, 807, 1704, 1487]) == 1\n    assert candidate([1880, 1880, 1880, 604, 1634, 1412, 1880, 67, 1759, 1488]) == 4\n    assert candidate([540, 1799, 1784, 1799, 972, 1786, 1578, 1480, 178, 532]) == 1\n    assert candidate([1235, 471, 367]) == 1\n    assert candidate([1887, 1373, 190, 1764, 1764, 959, 959, 1373, 17]) == 1\n    assert candidate([1313, 910, 1172, 1541, 1758, 140, 1380, 492, 240, 1664]) == 1\n    assert candidate([381, 1304, 381, 758, 1304, 381, 758]) == 14\n    assert candidate([1517, 665]) == 1\n    assert candidate([1555, 223, 379, 223, 379, 1982]) == 1\n    assert candidate([1268, 1268, 1268, 1268]) == 10\n    assert candidate([1051, 266, 266, 94, 761, 1051, 255]) == 3\n    assert candidate([420, 945, 3, 172]) == 1\n    assert candidate([1045, 1120, 1045, 511, 1045, 1777, 1224, 336, 560, 153]) == 2\n    assert candidate([627, 592, 592, 1416, 370, 229, 526, 633]) == 1\n\ndef test_check():\n    check(countCompleteSubarrays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2866_longestAlternatingSubarray", "language": "py", "prompt": "from typing import List\n\ndef longestAlternatingSubarray(nums: List[int], threshold: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and an integer threshold.\nFind the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions:\n * nums[l] % 2 == 0\n * For all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2\n * For all indices i in the range [l, r], nums[i] <= threshold\nReturn an integer denoting the length of the longest such subarray.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [3,2,5,4], threshold = 5\nOutput: 3\nExplanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\nExample 2:\nInput: nums = [1,2], threshold = 2\nOutput: 1\nExplanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2].\nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length.\nExample 3:\nInput: nums = [2,3,4,5], threshold = 4\nOutput: 3\nExplanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4].\nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\nConstraints:\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\n * 1 <= threshold <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2866_longestAlternatingSubarray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 2, 5, 4], 5) == 3\n    assert candidate([1, 2], 2) == 1\n    assert candidate([2, 3, 4, 5], 4) == 3\n    assert candidate([1], 1) == 0\n    assert candidate([2], 2) == 1\n    assert candidate([3], 3) == 0\n    assert candidate([4], 1) == 0\n    assert candidate([5], 3) == 0\n    assert candidate([6], 5) == 0\n    assert candidate([7], 2) == 0\n    assert candidate([8], 1) == 0\n    assert candidate([9], 7) == 0\n    assert candidate([10], 7) == 0\n    assert candidate([1, 3], 16) == 0\n    assert candidate([1, 6], 2) == 0\n    assert candidate([1, 10], 6) == 0\n    assert candidate([1, 10], 7) == 0\n    assert candidate([2, 2], 18) == 1\n    assert candidate([2, 4], 7) == 1\n    assert candidate([2, 5], 2) == 1\n    assert candidate([2, 6], 15) == 1\n    assert candidate([2, 7], 9) == 2\n    assert candidate([2, 8], 4) == 1\n    assert candidate([2, 8], 8) == 1\n    assert candidate([2, 8], 16) == 1\n    assert candidate([2, 9], 14) == 2\n    assert candidate([3, 1], 9) == 0\n    assert candidate([3, 4], 10) == 1\n    assert candidate([3, 10], 3) == 0\n    assert candidate([4, 2], 11) == 1\n    assert candidate([4, 2], 15) == 1\n    assert candidate([4, 4], 9) == 1\n    assert candidate([4, 7], 8) == 2\n    assert candidate([4, 9], 17) == 2\n    assert candidate([5, 8], 5) == 0\n    assert candidate([5, 8], 15) == 1\n    assert candidate([6, 2], 10) == 1\n    assert candidate([6, 4], 14) == 1\n    assert candidate([6, 4], 16) == 1\n    assert candidate([6, 5], 10) == 2\n    assert candidate([7, 3], 8) == 0\n    assert candidate([7, 4], 7) == 1\n    assert candidate([7, 5], 1) == 0\n    assert candidate([7, 10], 52) == 1\n    assert candidate([7, 17], 31) == 0\n    assert candidate([8, 4], 6) == 1\n    assert candidate([8, 8], 20) == 1\n    assert candidate([9, 2], 11) == 1\n    assert candidate([9, 4], 15) == 1\n    assert candidate([10, 3], 11) == 2\n    assert candidate([10, 4], 7) == 1\n    assert candidate([10, 5], 20) == 2\n    assert candidate([10, 7], 11) == 2\n    assert candidate([10, 8], 4) == 0\n    assert candidate([10, 18], 43) == 1\n    assert candidate([12, 34], 7) == 0\n    assert candidate([12, 35], 8) == 0\n    assert candidate([13, 9], 53) == 0\n    assert candidate([15, 13], 23) == 0\n    assert candidate([15, 15], 18) == 0\n    assert candidate([17, 2], 17) == 1\n    assert candidate([23, 37], 35) == 0\n    assert candidate([24, 11], 54) == 2\n    assert candidate([27, 9], 55) == 0\n    assert candidate([27, 17], 40) == 0\n    assert candidate([33, 4], 43) == 1\n    assert candidate([41, 16], 9) == 0\n    assert candidate([47, 44], 20) == 0\n    assert candidate([49, 39], 52) == 0\n    assert candidate([50, 8], 19) == 1\n    assert candidate([76, 46], 91) == 1\n    assert candidate([1, 1, 7], 4) == 0\n    assert candidate([1, 3, 1], 18) == 0\n    assert candidate([1, 4, 3], 1) == 0\n    assert candidate([1, 5, 3], 8) == 0\n    assert candidate([1, 10, 5], 9) == 0\n    assert candidate([2, 1, 8], 6) == 2\n    assert candidate([2, 10, 5], 7) == 1\n    assert candidate([3, 2, 8], 18) == 1\n    assert candidate([3, 3, 10], 20) == 1\n    assert candidate([3, 4, 2], 19) == 1\n    assert candidate([3, 6, 10], 6) == 1\n    assert candidate([3, 8, 9], 19) == 2\n    assert candidate([4, 3, 1], 4) == 2\n    assert candidate([4, 4, 4], 8) == 1\n    assert candidate([4, 5, 10], 3) == 0\n    assert candidate([4, 10, 2], 4) == 1\n    assert candidate([4, 10, 3], 8) == 1\n    assert candidate([4, 10, 3], 10) == 2\n    assert candidate([4, 40, 8], 45) == 1\n    assert candidate([5, 3, 9], 7) == 0\n    assert candidate([5, 5, 6], 7) == 1\n    assert candidate([6, 2, 2], 16) == 1\n    assert candidate([6, 2, 4], 17) == 1\n    assert candidate([6, 3, 4], 6) == 3\n    assert candidate([6, 5, 2], 17) == 3\n    assert candidate([6, 5, 3], 17) == 2\n    assert candidate([6, 7, 2], 14) == 3\n    assert candidate([7, 1, 10], 9) == 0\n    assert candidate([7, 5, 6], 8) == 1\n\ndef test_check():\n    check(longestAlternatingSubarray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2868_continuousSubarrays", "language": "py", "prompt": "from typing import List\n\ndef continuousSubarrays(nums: List[int]) -> int:\n    \"\"\"    You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:\n* Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.\n    Return the total number of continuous subarrays.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    Example 1:\n    Input: nums = [5,4,2,4]\n    Output: 8\n    Explanation:\n    Continuous subarray of size 1: [5], [4], [2], [4].\n    Continuous subarray of size 2: [5,4], [4,2], [2,4].\n    Continuous subarray of size 3: [4,2,4].\n    Thereare no subarrys of size 4.\n    Total continuous subarrays = 4 + 3 + 1 = 8.\n    It can be shown that there are no more continuous subarrays.\n    Example 2:\n    Input: nums = [1,2,3]\n    Output: 6\n    Explanation:\n    Continuous subarray of size 1: [1], [2], [3].\n    Continuous subarray of size 2: [1,2], [2,3].\n    Continuous subarray of size 3: [1,2,3].\n    Total continuous subarrays = 3 + 2 + 1 = 6.\n    Constraints:\n* 1 <= nums.length <= 105\n* 1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2868_continuousSubarrays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 4, 2, 4]) == 8\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([31, 30, 31, 32]) == 10\n    assert candidate([65, 66, 67, 66, 66, 65, 64, 65, 65, 64]) == 43\n    assert candidate([42, 41, 42, 41, 41, 40, 39, 38]) == 28\n    assert candidate([35, 35, 36, 37, 36, 37, 38, 37, 38]) == 39\n    assert candidate([43, 44, 43, 44]) == 10\n    assert candidate([14, 15, 15, 15, 16, 16, 16, 16, 15, 16]) == 55\n    assert candidate([21]) == 1\n    assert candidate([34, 34, 33, 34, 33, 33, 32, 31, 30, 31]) == 39\n    assert candidate([58, 59, 59, 58, 59]) == 15\n    assert candidate([10, 9, 8, 7, 8, 9, 9]) == 24\n    assert candidate([65, 66, 65, 64, 63, 62, 62]) == 20\n    assert candidate([65, 65, 64, 65, 66, 65]) == 21\n    assert candidate([85, 84, 83, 84, 83, 82]) == 20\n    assert candidate([60, 59, 60]) == 6\n    assert candidate([96, 97, 98]) == 6\n    assert candidate([21, 22, 23, 22, 23]) == 15\n    assert candidate([76, 77, 77, 78, 77, 78, 78]) == 28\n    assert candidate([27, 27, 27, 26, 26, 27, 27, 27, 27]) == 45\n    assert candidate([17]) == 1\n    assert candidate([95]) == 1\n    assert candidate([62]) == 1\n    assert candidate([10, 10, 9, 8, 9, 9, 9, 8, 8]) == 45\n    assert candidate([21, 22, 22, 23, 24, 24, 23, 24, 23, 24]) == 49\n    assert candidate([94, 94, 94, 94, 94, 93, 94]) == 28\n    assert candidate([66, 65, 64, 64, 64, 65, 64, 63]) == 35\n    assert candidate([35, 35, 36, 36, 35]) == 15\n    assert candidate([35, 34, 33, 34, 35, 35, 34, 35, 34]) == 45\n    assert candidate([70, 69, 70, 71, 70, 70, 71, 71]) == 36\n    assert candidate([49, 49, 49, 50, 50, 49, 50, 51, 51]) == 45\n    assert candidate([70, 71, 72, 72, 72]) == 15\n    assert candidate([73, 73, 74, 75, 76, 76, 75, 76]) == 28\n    assert candidate([74, 74, 74, 75, 76, 75, 75, 76, 77, 77]) == 49\n    assert candidate([21, 21, 20, 19, 20, 20, 21, 21]) == 36\n    assert candidate([86, 85]) == 3\n    assert candidate([94, 95, 96, 96, 97, 98, 99, 100, 100]) == 28\n    assert candidate([16, 17, 16]) == 6\n    assert candidate([25, 26, 26, 27, 28, 27, 28, 28, 27, 27]) == 49\n    assert candidate([54]) == 1\n    assert candidate([94, 95, 96, 95, 94, 93, 92, 91]) == 24\n    assert candidate([84, 84, 83]) == 6\n    assert candidate([26, 26]) == 3\n    assert candidate([53, 54, 54, 55]) == 10\n    assert candidate([67, 67, 66, 67, 68, 69, 70, 71, 71]) == 28\n    assert candidate([43, 42, 42, 42, 43]) == 15\n    assert candidate([93, 94, 93]) == 6\n    assert candidate([80, 80]) == 3\n    assert candidate([54, 54, 53, 54, 55, 56, 57, 58, 59]) == 27\n    assert candidate([52, 51, 50, 49, 48, 49, 48, 47, 46]) == 29\n    assert candidate([93, 92, 91, 92, 92, 92, 92]) == 28\n    assert candidate([91, 91, 90, 90, 90, 91, 91, 90]) == 36\n    assert candidate([37, 37, 37, 36]) == 10\n    assert candidate([40, 39, 39, 39, 39, 40, 40, 41, 40, 39]) == 55\n    assert candidate([82, 83, 83, 83, 83, 84]) == 21\n    assert candidate([35, 36, 36, 37, 37, 37, 36, 37, 36]) == 45\n    assert candidate([50, 49, 50, 51, 50]) == 15\n    assert candidate([86, 86, 86, 86, 87]) == 15\n    assert candidate([52]) == 1\n    assert candidate([96, 95, 94, 93]) == 9\n    assert candidate([56, 56, 55, 55, 54, 55, 54, 54, 53, 52]) == 47\n    assert candidate([91]) == 1\n    assert candidate([91, 90, 91, 91]) == 10\n    assert candidate([56, 55, 55, 55]) == 10\n    assert candidate([1, 2, 2, 2, 1, 2, 3, 4, 4, 5]) == 39\n    assert candidate([84, 85, 84, 84, 85, 85, 85]) == 28\n    assert candidate([71, 71, 71, 71]) == 10\n    assert candidate([47, 47, 46]) == 6\n    assert candidate([65]) == 1\n    assert candidate([20, 20, 19, 18]) == 10\n    assert candidate([22, 23, 23, 22, 22, 22, 22]) == 28\n    assert candidate([92, 92]) == 3\n    assert candidate([93, 92, 92, 91, 90, 90, 89, 88]) == 27\n    assert candidate([13, 13, 12, 11]) == 10\n    assert candidate([22, 22, 22, 21, 22, 21]) == 21\n    assert candidate([24, 25, 26, 26, 25, 26, 25, 25, 26]) == 45\n    assert candidate([37, 36]) == 3\n    assert candidate([52, 51]) == 3\n    assert candidate([58]) == 1\n    assert candidate([88, 88, 88, 87, 87, 87, 87, 88, 88]) == 45\n    assert candidate([84, 83, 83, 84, 83, 82, 81]) == 24\n    assert candidate([87, 88, 88, 87, 87, 88, 88, 89]) == 36\n    assert candidate([28, 28, 27]) == 6\n    assert candidate([82, 83, 83, 82]) == 10\n    assert candidate([97, 96, 96, 95, 96, 95]) == 21\n    assert candidate([72, 73, 73, 74, 73, 73]) == 21\n    assert candidate([21, 21, 20]) == 6\n    assert candidate([38, 38]) == 3\n    assert candidate([24, 24, 24, 23, 22, 22, 22, 23]) == 36\n    assert candidate([62, 62]) == 3\n    assert candidate([11, 10, 9, 10, 11]) == 15\n    assert candidate([34, 34, 35, 34, 35, 36, 36]) == 28\n    assert candidate([73, 74, 75, 75]) == 10\n    assert candidate([24, 23, 24, 24]) == 10\n    assert candidate([21, 22, 22, 23, 22, 23, 22, 23, 23, 22]) == 55\n    assert candidate([53, 53, 54, 54, 54]) == 15\n    assert candidate([94, 95, 96, 96, 97, 97, 98, 99]) == 28\n    assert candidate([89, 89, 89, 88, 87, 87]) == 21\n    assert candidate([89, 90]) == 3\n    assert candidate([18, 18]) == 3\n\ndef test_check():\n    check(continuousSubarrays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2869_maxNonDecreasingLength", "language": "py", "prompt": "from typing import List\n\ndef maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"You are given two 0-indexed integer arrays nums1 and nums2 of length n.\nLet's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i].\nYour task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally.\nReturn an integer representing the length of the longest non-decreasing subarray in nums3.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums1 = [2,3,1], nums2 = [1,2,1]\nOutput: 2\nExplanation: One way to construct nums3 is:\nnums3 = [nums1[0], nums2[1], nums2[2]] => [2,2,1].\nThe subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2.\nWe can show that 2 is the maximum achievable length.\nExample 2:\nInput: nums1 = [1,3,2,1], nums2 = [2,2,3,4]\nOutput: 4\nExplanation: One way to construct nums3 is:\nnums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1,2,3,4].\nThe entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.\nExample 3:\nInput: nums1 = [1,1], nums2 = [2,2]\nOutput: 2\nExplanation: One way to construct nums3 is:\nnums3 = [nums1[0], nums1[1]] => [1,1].\nThe entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.\nConstraints:\n * 1 <= nums1.length == nums2.length == n <= 105\n * 1 <= nums1[i], nums2[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2869_maxNonDecreasingLength.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 1], [1, 2, 1]) == 2\n    assert candidate([1, 3, 2, 1], [2, 2, 3, 4]) == 4\n    assert candidate([1, 1], [2, 2]) == 2\n    assert candidate([1], [1]) == 1\n    assert candidate([1], [2]) == 1\n    assert candidate([1, 4], [4, 19]) == 2\n    assert candidate([1, 8], [10, 1]) == 2\n    assert candidate([1, 11], [9, 1]) == 2\n    assert candidate([1, 13], [18, 1]) == 2\n    assert candidate([1, 19], [12, 20]) == 2\n    assert candidate([1, 19], [18, 9]) == 2\n    assert candidate([2, 20], [1, 18]) == 2\n    assert candidate([3, 5], [13, 3]) == 2\n    assert candidate([3, 6], [10, 12]) == 2\n    assert candidate([3, 7], [8, 3]) == 2\n    assert candidate([3, 8], [15, 2]) == 2\n    assert candidate([3, 9], [11, 3]) == 2\n    assert candidate([3, 12], [7, 3]) == 2\n    assert candidate([3, 12], [20, 3]) == 2\n    assert candidate([3, 20], [5, 17]) == 2\n    assert candidate([4, 2], [10, 4]) == 2\n    assert candidate([4, 12], [6, 4]) == 2\n    assert candidate([4, 15], [3, 3]) == 2\n    assert candidate([5, 5], [19, 8]) == 2\n    assert candidate([5, 7], [19, 5]) == 2\n    assert candidate([5, 11], [2, 5]) == 2\n    assert candidate([5, 14], [8, 3]) == 2\n    assert candidate([5, 15], [16, 5]) == 2\n    assert candidate([5, 20], [4, 5]) == 2\n    assert candidate([5, 20], [10, 17]) == 2\n    assert candidate([6, 7], [3, 2]) == 2\n    assert candidate([6, 14], [5, 5]) == 2\n    assert candidate([6, 14], [18, 6]) == 2\n    assert candidate([6, 16], [16, 20]) == 2\n    assert candidate([6, 17], [4, 20]) == 2\n    assert candidate([7, 3], [16, 7]) == 2\n    assert candidate([7, 4], [15, 7]) == 2\n    assert candidate([7, 9], [3, 18]) == 2\n    assert candidate([7, 10], [10, 14]) == 2\n    assert candidate([7, 11], [5, 7]) == 2\n    assert candidate([7, 12], [20, 5]) == 2\n    assert candidate([7, 20], [12, 8]) == 2\n    assert candidate([8, 5], [13, 8]) == 2\n    assert candidate([8, 11], [9, 3]) == 2\n    assert candidate([8, 16], [9, 8]) == 2\n    assert candidate([8, 17], [2, 8]) == 2\n    assert candidate([8, 18], [16, 12]) == 2\n    assert candidate([4, 2], [10, 4]) == 2\n    assert candidate([9, 1], [11, 9]) == 2\n    assert candidate([9, 6], [8, 14]) == 2\n    assert candidate([9, 9], [11, 8]) == 2\n    assert candidate([9, 12], [20, 9]) == 2\n    assert candidate([9, 15], [20, 9]) == 2\n    assert candidate([9, 16], [11, 15]) == 2\n    assert candidate([9, 19], [17, 9]) == 2\n    assert candidate([10, 19], [17, 10]) == 2\n    assert candidate([11, 1], [3, 11]) == 2\n    assert candidate([11, 3], [9, 17]) == 2\n    assert candidate([11, 6], [9, 17]) == 2\n    assert candidate([11, 19], [17, 11]) == 2\n    assert candidate([11, 69], [26, 62]) == 2\n    assert candidate([12, 1], [10, 12]) == 2\n    assert candidate([12, 10], [16, 2]) == 1\n    assert candidate([13, 6], [20, 13]) == 2\n    assert candidate([13, 16], [5, 13]) == 2\n    assert candidate([14, 2], [2, 14]) == 2\n    assert candidate([14, 4], [2, 13]) == 2\n    assert candidate([15, 10], [17, 15]) == 2\n    assert candidate([15, 11], [19, 2]) == 1\n    assert candidate([16, 9], [5, 16]) == 2\n    assert candidate([16, 17], [9, 16]) == 2\n    assert candidate([17, 8], [11, 10]) == 1\n    assert candidate([17, 10], [9, 17]) == 2\n    assert candidate([17, 10], [18, 7]) == 1\n    assert candidate([17, 11], [19, 17]) == 2\n    assert candidate([17, 14], [17, 17]) == 2\n    assert candidate([17, 17], [15, 17]) == 2\n    assert candidate([17, 17], [16, 1]) == 2\n    assert candidate([18, 4], [1, 6]) == 2\n    assert candidate([18, 9], [10, 18]) == 2\n    assert candidate([18, 9], [17, 18]) == 2\n    assert candidate([18, 10], [1, 18]) == 2\n    assert candidate([18, 104], [117, 18]) == 2\n    assert candidate([19, 2], [1, 19]) == 2\n    assert candidate([19, 5], [15, 5]) == 1\n    assert candidate([19, 5], [52, 10]) == 1\n    assert candidate([19, 15], [12, 19]) == 2\n    assert candidate([19, 15], [18, 4]) == 1\n    assert candidate([20, 1], [1, 20]) == 2\n    assert candidate([20, 5], [2, 3]) == 2\n    assert candidate([20, 5], [14, 8]) == 1\n    assert candidate([20, 7], [12, 20]) == 2\n    assert candidate([20, 12], [2, 20]) == 2\n    assert candidate([20, 16], [8, 5]) == 2\n    assert candidate([20, 18], [18, 20]) == 2\n    assert candidate([25, 83], [28, 18]) == 2\n    assert candidate([26, 47], [87, 26]) == 2\n    assert candidate([28, 41], [87, 3]) == 2\n    assert candidate([36, 53], [66, 3]) == 2\n    assert candidate([44, 34], [53, 44]) == 2\n\ndef test_check():\n    check(maxNonDecreasingLength)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2870_alternatingSubarray", "language": "py", "prompt": "from typing import List\n\ndef alternatingSubarray(nums: List[int]) -> int:\n    \"\"\"    You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\n* m is greater than 1.\n* s1 = s0 + 1.\n* The 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.\n    Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    Example 1:\n    Input: nums = [2,3,4,3,4]\n    Output: 4\n    Explanation: The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.\n    Example 2:\n    Input: nums = [4,5,6]\n    Output: 2\n    Explanation: [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.\n    Constraints:\n* 2 <= nums.length <= 100\n* 1 <= nums[i] <= 104\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2870_alternatingSubarray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 4, 3, 4]) == 4\n    assert candidate([4, 5, 6]) == 2\n    assert candidate([31, 32, 31, 32, 33]) == 4\n    assert candidate([21, 9, 5]) == -1\n    assert candidate([42, 43, 44, 43, 44, 43, 44, 45, 46]) == 6\n    assert candidate([13, 14, 15, 14]) == 3\n    assert candidate([74, 75, 74, 75, 74, 75, 74, 75]) == 8\n    assert candidate([77, 78, 79, 78, 79, 78, 79, 78, 79, 80]) == 8\n    assert candidate([88, 42, 53]) == -1\n    assert candidate([64, 65, 64, 65, 64, 65, 66, 65, 66, 65]) == 6\n    assert candidate([99, 100, 99, 100]) == 4\n    assert candidate([21, 22]) == 2\n    assert candidate([23, 24, 23, 24, 25, 24, 25, 24, 25]) == 6\n    assert candidate([20, 9, 15, 15]) == -1\n    assert candidate([92, 93, 92, 93, 92]) == 5\n    assert candidate([24, 25, 26]) == 2\n    assert candidate([51, 52, 53, 52, 53, 52, 53, 54, 53]) == 6\n    assert candidate([65, 66, 65, 66, 67, 68, 69]) == 4\n    assert candidate([29, 2, 5, 24]) == -1\n    assert candidate([26, 27, 26, 27, 28, 27, 28, 27, 28]) == 6\n    assert candidate([21, 22, 21, 22, 21, 22]) == 6\n    assert candidate([94, 95, 94, 95, 94]) == 5\n    assert candidate([82, 83, 84, 83, 84, 83, 84, 83]) == 7\n    assert candidate([14, 30, 29, 49, 3, 23, 44, 21, 26, 52]) == -1\n    assert candidate([4, 5, 4, 5, 6, 5, 6]) == 4\n    assert candidate([62, 63]) == 2\n    assert candidate([24, 25, 26, 25, 26, 25, 26, 25, 26]) == 8\n    assert candidate([55, 56, 55, 56, 55, 56, 55, 56, 57, 56]) == 8\n    assert candidate([52, 77, 42, 21]) == -1\n    assert candidate([80, 81]) == 2\n    assert candidate([50, 51, 50, 51, 50, 51, 50, 51, 50]) == 9\n    assert candidate([83, 84, 83]) == 3\n    assert candidate([17, 18, 17, 18, 19, 18, 19, 20, 19, 20]) == 4\n    assert candidate([5, 14, 8, 12, 5, 4]) == -1\n    assert candidate([35, 36, 35, 36, 35, 36, 35, 36, 35, 36]) == 10\n    assert candidate([8, 9, 8, 9, 8, 9]) == 6\n    assert candidate([59, 60]) == 2\n    assert candidate([55, 56, 55]) == 3\n    assert candidate([47, 46, 65, 37, 24, 54, 39, 70]) == -1\n    assert candidate([45, 46, 45, 46, 45, 46, 45]) == 7\n    assert candidate([78, 79, 78, 79, 78, 79, 78, 79, 80, 79]) == 8\n    assert candidate([65, 66, 65, 66, 65, 66, 67, 68]) == 6\n    assert candidate([62, 63, 62, 63, 62, 63]) == 6\n    assert candidate([7, 10, 5, 2, 11, 3, 9, 12, 9, 11]) == -1\n    assert candidate([79, 80, 79, 80, 79, 80]) == 6\n    assert candidate([19, 20, 21, 20, 21, 22]) == 4\n    assert candidate([84, 85, 86, 85, 86, 85, 86, 87, 88, 87]) == 6\n    assert candidate([54, 55]) == 2\n    assert candidate([71, 14, 24, 13, 21, 14, 18, 84, 37, 2]) == -1\n    assert candidate([26, 27, 26]) == 3\n    assert candidate([53, 54, 53, 54, 53]) == 5\n    assert candidate([67, 68, 67, 68, 67, 68, 69, 70, 69, 70]) == 6\n    assert candidate([85, 86, 85, 86, 85, 86, 85, 86, 85, 86]) == 10\n    assert candidate([22, 16, 27, 22, 44, 10]) == -1\n    assert candidate([27, 28, 27, 28, 27, 28, 27, 28, 29, 28]) == 8\n    assert candidate([54, 55, 54, 55, 54, 55, 54, 55, 56, 57]) == 8\n    assert candidate([24, 25, 26, 27, 28]) == 2\n    assert candidate([55, 56]) == 2\n    assert candidate([13, 6, 6, 8, 12, 7, 1]) == -1\n    assert candidate([40, 41, 40, 41, 40, 41, 40, 41]) == 8\n    assert candidate([10, 11, 10, 11, 10, 11, 12]) == 6\n    assert candidate([58, 59, 58, 59]) == 4\n    assert candidate([1, 15, 44, 74, 56, 41, 48, 71]) == -1\n    assert candidate([89, 90, 89, 90, 89, 90]) == 6\n    assert candidate([4, 5, 4, 5, 4, 5, 6]) == 6\n    assert candidate([50, 51, 52, 53, 52, 53]) == 4\n    assert candidate([44, 45, 46, 45, 46, 45, 46, 47, 48]) == 6\n    assert candidate([16, 3, 25, 12, 2, 19, 1, 26]) == -1\n    assert candidate([17, 18, 19, 20, 19, 20]) == 4\n    assert candidate([91, 92, 93, 92, 93]) == 4\n    assert candidate([28, 29, 28, 29, 28, 29, 30]) == 6\n    assert candidate([88, 89, 88, 89, 88, 89]) == 6\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1\n    assert candidate([32, 33, 32, 33, 32, 33, 34]) == 6\n    assert candidate([61, 62, 61, 62, 63, 62, 63, 64, 63]) == 4\n    assert candidate([6, 7, 6, 7]) == 4\n    assert candidate([20, 21, 20, 21, 20]) == 5\n    assert candidate([14, 6, 21]) == -1\n    assert candidate([12, 13, 12, 13, 12, 13, 12, 13, 12]) == 9\n    assert candidate([33, 34, 33, 34, 33, 34, 33]) == 7\n    assert candidate([92, 93, 92]) == 3\n    assert candidate([93, 94, 95, 94, 95, 96, 95, 96, 97]) == 4\n    assert candidate([8, 4, 27]) == -1\n    assert candidate([30, 31, 32, 31, 32, 33, 34, 33]) == 4\n    assert candidate([26, 27, 26, 27, 26, 27]) == 6\n    assert candidate([67, 68, 69]) == 2\n    assert candidate([83, 84, 85, 84, 85]) == 4\n    assert candidate([6, 26, 4, 2]) == -1\n    assert candidate([81, 82, 81, 82, 81, 82, 81, 82, 83]) == 8\n    assert candidate([58, 59]) == 2\n    assert candidate([82, 83, 82, 83, 82, 83, 82, 83, 82]) == 9\n    assert candidate([48, 49]) == 2\n    assert candidate([8, 6, 2]) == -1\n    assert candidate([69, 70, 69, 70, 69, 70, 69, 70, 69]) == 9\n    assert candidate([28, 29, 28, 29]) == 4\n    assert candidate([82, 83, 82, 83, 84]) == 4\n    assert candidate([97, 98, 97, 98, 97, 98, 97]) == 7\n    assert candidate([2, 2, 1]) == -1\n    assert candidate([84, 85, 84, 85, 84, 85, 84]) == 7\n    assert candidate([21, 22, 21, 22]) == 4\n\ndef test_check():\n    check(alternatingSubarray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2872_maxArrayValue", "language": "py", "prompt": "from typing import List\n\ndef maxArrayValue(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array nums consisting of positive integers.\nYou can do the following operation on the array any number of times:\n * Choose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array.\nReturn the value of the largest element that you can possibly obtain in the final array.\nExample 1:\nInput: nums = [2,3,7,9,3]\nOutput: 21\nExplanation: We can apply the following operations on the array:\n- Choose i = 0. The resulting array will be nums = [5,7,9,3].\n- Choose i = 1. The resulting array will be nums = [5,16,3].\n- Choose i = 0. The resulting array will be nums = [21,3].\nThe largest element in the final array is 21. It can be shown that we cannot obtain a larger element.\nExample 2:\nInput: nums = [5,3,3]\nOutput: 11\nExplanation: We can do the following operations on the array:\n- Choose i = 1. The resulting array will be nums = [5,6].\n- Choose i = 0. The resulting array will be nums = [11].\nThere is only one element in the final array, which is 11.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2872_maxArrayValue.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 7, 9, 3]) == 21\n    assert candidate([5, 3, 3]) == 11\n    assert candidate([77]) == 77\n    assert candidate([34, 95, 50, 12, 25, 100, 21, 3, 25, 16, 76, 73, 93, 46, 18]) == 623\n    assert candidate([40, 15, 35, 98, 77, 79, 24, 62, 53, 84, 97, 16, 30, 22, 49]) == 781\n    assert candidate([64, 35, 42, 19, 95, 8, 83, 89, 33, 21, 97, 11, 51, 93, 36, 34, 67, 53]) == 878\n    assert candidate([65, 68, 55, 6, 79, 30, 81, 25, 61, 2, 28, 59, 63, 15, 35, 8, 10, 83]) == 773\n    assert candidate([56]) == 56\n    assert candidate([100]) == 100\n    assert candidate([35, 23, 71, 38]) == 129\n    assert candidate([56, 67, 18, 81, 95, 41, 39, 56, 63, 70, 56, 31, 84, 46, 28, 38, 27, 56, 13, 10, 58, 16, 85, 21, 63, 8]) == 1134\n    assert candidate([72, 72]) == 144\n    assert candidate([16, 31, 55]) == 102\n    assert candidate([6, 65, 68, 7, 35, 19, 28]) == 228\n    assert candidate([38, 37, 88, 60, 93, 4, 5, 65, 74, 25, 59, 28, 86, 33, 28, 33, 93]) == 849\n    assert candidate([29, 9, 3, 55, 25, 38, 88, 39, 38, 73, 47, 57, 40, 56, 4, 52, 1, 44, 88, 20, 18, 8]) == 786\n    assert candidate([34, 92, 42, 24, 98, 87, 40, 82, 51, 67, 70, 75, 45, 57, 67]) == 931\n    assert candidate([31, 75, 44, 92, 13, 10, 3, 41, 47, 89, 5, 92, 17, 62, 65, 40, 43, 68, 30, 45, 85, 24, 40, 77, 80, 65]) == 1218\n    assert candidate([63, 58, 61, 58, 82, 48, 83, 24, 24, 61, 31, 16, 26, 50]) == 685\n    assert candidate([10, 82, 74, 54, 20, 43, 74, 95, 17, 28, 44, 74, 25, 19, 75, 2, 84, 99]) == 919\n    assert candidate([91, 32, 21, 55, 44, 29, 82, 75, 66, 29, 77, 62, 55, 94, 49, 80, 12, 46, 80, 64, 88, 51, 2, 24, 11, 10, 86, 39, 16]) == 1415\n    assert candidate([18, 16, 56, 64, 82, 25, 16, 2, 19]) == 236\n    assert candidate([29, 79, 47, 55, 13, 47, 48, 91, 29, 28, 34, 85, 98, 44, 93, 56, 24, 77, 61]) == 977\n    assert candidate([74, 8, 1, 57, 25, 62]) == 227\n    assert candidate([25, 36, 55, 32, 15, 16, 73, 67, 82, 23, 17, 29, 78, 34, 4, 91, 1, 1, 55, 65]) == 799\n    assert candidate([6, 36, 69, 97, 86, 44, 27, 46]) == 411\n    assert candidate([18, 36, 100, 34, 31, 89, 96, 6, 73, 10, 82, 20, 26, 13, 24, 51, 87, 70, 63, 36]) == 796\n    assert candidate([86, 57, 57, 56, 38, 97, 82, 48, 33, 55, 19, 21, 57, 85, 11, 11, 71, 94, 61, 41, 1, 78, 39, 45]) == 1243\n    assert candidate([33, 9, 11, 6, 68, 43, 76, 40, 91]) == 377\n    assert candidate([89, 45, 50, 98, 23, 79, 10, 98, 69, 65, 47, 46, 95]) == 814\n    assert candidate([58, 95]) == 153\n    assert candidate([91, 50]) == 91\n    assert candidate([99, 82, 49, 52, 5, 69, 65, 94, 94, 57, 46, 26, 28, 84, 42, 61, 19, 87, 71, 66, 1, 72]) == 1269\n    assert candidate([75, 75, 93, 44, 16, 27, 43, 71, 65, 90, 100, 97, 39, 100, 55, 15, 10, 7, 25, 23, 47]) == 1117\n    assert candidate([65]) == 65\n    assert candidate([50]) == 50\n    assert candidate([56, 8, 10, 87, 83, 79, 33, 72, 32, 59, 75, 2, 46, 9]) == 594\n    assert candidate([26, 77, 78, 94, 90, 90, 57, 100, 60, 1, 98, 85, 78, 77, 63, 30, 88, 60, 41, 55]) == 1348\n    assert candidate([65, 53, 93, 76, 75, 18, 32, 88, 4]) == 500\n    assert candidate([24, 89, 92, 48, 81, 49, 83, 4, 53, 39, 48, 10, 53, 51, 41, 23, 83, 8, 53, 91, 43, 58, 82]) == 1206\n    assert candidate([59, 17, 33]) == 59\n    assert candidate([15, 35, 97, 93, 34, 34, 90, 2, 21]) == 398\n    assert candidate([87, 64, 21, 27, 41, 63, 28, 75, 64, 22, 30, 76, 77, 91, 84, 81, 99, 86, 1, 74, 46, 4, 7]) == 1030\n    assert candidate([89, 49, 59, 59, 2, 77, 55, 44, 51, 47, 100, 77, 30, 71, 47, 100, 13, 17, 12, 38, 26, 55, 89, 41]) == 1207\n    assert candidate([71, 4, 53, 51, 9, 92, 91, 86, 84, 58, 31, 39, 38, 49, 56, 27, 91, 17, 10, 56, 52, 78, 35, 76, 39]) == 1254\n    assert candidate([9, 46, 6, 42, 81, 7, 61, 88, 37, 15, 20, 67]) == 479\n    assert candidate([50, 64, 31, 70, 46, 30, 41, 69, 80, 45, 73, 4, 100, 88, 7, 3, 59]) == 703\n    assert candidate([20, 41, 58, 61, 79, 7, 58, 42, 89, 39]) == 455\n    assert candidate([68, 86, 34, 99, 4, 6, 24, 88, 26, 83, 2, 33, 37, 79, 30, 60, 56, 44, 53, 4, 86, 60, 13, 81, 95, 28, 83, 24]) == 1362\n    assert candidate([5, 61, 59, 13, 21, 90, 32, 93, 84, 16, 71, 78, 53, 90, 5, 50, 47, 85, 83, 72, 88, 20, 97, 28, 73, 75, 59, 34, 21]) == 1489\n    assert candidate([99, 57, 14, 77, 78, 88, 47, 12, 45, 72, 70, 73, 75, 35, 50, 88, 26, 38, 77, 23, 86, 27, 9, 16]) == 1230\n    assert candidate([68, 65, 95, 53, 51, 26, 2, 3, 17, 26, 15, 37, 50, 79, 20, 71, 99, 72, 82, 37, 29, 34, 74, 93]) == 1198\n    assert candidate([68, 21, 61, 74, 38, 91, 99, 32, 98, 12, 52]) == 582\n    assert candidate([98, 95, 15, 53, 31, 15, 9, 24, 59]) == 399\n    assert candidate([51, 18, 21, 99, 6, 55, 41, 20, 74, 43, 98, 41, 58, 29, 75, 16, 8, 83, 23, 79, 73, 68, 95, 10, 67]) == 1174\n    assert candidate([78, 91, 52, 92, 42, 53, 77, 88, 40, 33, 86, 70, 85, 50, 65, 43, 75, 60, 28, 97, 95, 95]) == 1495\n    assert candidate([99, 6]) == 99\n    assert candidate([59, 50, 38, 100, 42, 42, 99, 7]) == 430\n    assert candidate([35, 23, 73, 45, 29, 94, 1, 18, 46, 7, 52, 6, 47, 47, 19, 93, 48, 70, 85, 98, 50, 89, 23]) == 1075\n    assert candidate([2, 55, 19, 10, 28, 45, 86, 31, 45, 32, 38, 95, 65, 23, 50, 39, 51, 24, 40, 15, 16]) == 778\n    assert candidate([31, 59, 12, 90, 39]) == 192\n    assert candidate([53, 87, 11, 58, 79, 42, 44, 24, 68, 61]) == 466\n    assert candidate([20, 45]) == 65\n    assert candidate([85, 36, 99, 11, 91, 88, 55, 25, 68, 88, 27, 98, 7, 14, 40, 27, 18, 51, 90, 21, 77, 12, 87, 11, 37, 80, 70]) == 1343\n    assert candidate([43, 50, 40, 92, 31, 2, 92]) == 350\n    assert candidate([79, 90, 32, 30, 33, 18, 55, 96]) == 433\n    assert candidate([65, 15, 18, 94, 96, 22, 37, 19, 23, 11, 27, 94, 5, 99]) == 625\n    assert candidate([74, 26, 11, 96, 49, 19, 25, 77, 47, 31, 87, 96, 19, 40, 95, 91, 48, 79, 33, 96]) == 1139\n    assert candidate([17, 90, 66]) == 107\n    assert candidate([60, 11, 95, 75, 10, 64, 62, 20]) == 166\n    assert candidate([99, 6, 67, 44, 84, 29, 87, 13, 44, 12, 92, 53, 26, 47, 88, 44, 75, 33, 19]) == 910\n    assert candidate([69, 21, 11, 10, 42, 3, 38, 36, 50, 28, 25, 93, 37, 45, 73, 37, 97]) == 715\n    assert candidate([32, 76, 65, 61, 84, 11, 94, 96, 17, 14, 79, 15, 62]) == 629\n    assert candidate([59, 91, 27, 74, 57, 30, 51, 67, 88, 26, 89, 10, 70, 31, 32, 26, 42]) == 870\n    assert candidate([8, 73, 22, 37, 39, 1, 66, 59, 5, 20, 16, 68, 55, 50, 48, 6, 8, 46, 93, 76, 48, 14, 92]) == 950\n    assert candidate([58, 34, 72, 5, 33, 34, 68, 96, 63, 85, 84, 74, 87, 33, 75, 43, 36, 28, 62, 44, 95, 39, 2]) == 1209\n    assert candidate([49, 88, 44, 17, 36, 65, 94, 92, 75, 23, 67, 55, 68, 80, 95, 11, 68, 66, 77, 66, 3, 32, 16, 81, 34, 20, 56, 87, 87, 29]) == 1652\n    assert candidate([94, 27, 5, 47]) == 94\n    assert candidate([83, 85, 59, 55]) == 168\n    assert candidate([72, 56, 30, 65, 94, 91, 12, 99, 9]) == 519\n    assert candidate([9, 99, 20, 61, 57, 88, 50, 36, 21, 100, 62, 98, 94, 81, 96, 3, 98, 37, 88]) == 1198\n    assert candidate([45, 18, 13, 66, 54, 45, 64, 70, 94, 67, 26, 48, 84, 57, 81, 85, 35, 17, 20, 84, 78, 24, 63, 9]) == 1238\n    assert candidate([5, 38, 82, 83, 92, 97]) == 397\n    assert candidate([95, 15, 19, 26, 59, 58]) == 214\n    assert candidate([94, 75, 16, 33, 2, 70, 56, 4, 64]) == 414\n    assert candidate([64, 50, 26, 66]) == 206\n    assert candidate([3, 48, 11, 71, 57, 72, 83, 61, 59, 25, 36, 29, 11, 69, 75, 48, 44, 44]) == 846\n    assert candidate([88, 7, 38, 15, 43, 8, 87, 7, 25, 2, 51, 29, 74, 34, 84, 87, 83, 34, 74, 22, 45, 96, 71, 4, 23, 28, 27, 68, 61]) == 1254\n    assert candidate([30, 58, 2, 20, 54]) == 164\n    assert candidate([17, 34, 71, 23, 88, 84, 35, 49, 89, 39, 33, 13, 87, 49, 48, 97]) == 856\n    assert candidate([50, 67, 98, 47, 18, 91, 80, 3, 19, 74, 40, 89, 85, 99, 95, 81, 72, 96, 56, 15, 48, 93, 64]) == 1416\n    assert candidate([58, 10, 99, 6, 16, 94, 45, 47, 4, 30, 58]) == 467\n    assert candidate([92, 58, 90, 38, 37, 95, 47, 82, 6, 86, 99, 9, 91, 80, 73, 54, 45]) == 830\n    assert candidate([31, 100, 59, 88, 81, 74, 49, 21, 31, 53, 9, 89, 67, 4, 84, 46, 41]) == 840\n    assert candidate([25, 3, 94, 55, 70, 23, 43, 8, 65, 34, 83, 60, 53, 62, 97, 55, 3, 10]) == 775\n    assert candidate([27, 53, 99, 55, 15, 59, 85, 40, 46, 45, 45, 71, 42, 67]) == 749\n    assert candidate([8, 62, 12, 10, 79, 36, 59, 73, 76, 24, 45, 98, 72, 83, 61, 6, 19, 49]) == 872\n    assert candidate([2, 24, 30, 18, 94, 26, 22, 60, 50, 3, 27, 31]) == 387\n    assert candidate([64, 17, 57, 72, 24, 88, 29, 2, 23, 82, 15, 69, 80, 93, 38, 47, 9, 10, 68, 89, 65, 16]) == 976\n    assert candidate([99, 58, 59, 5, 67, 15, 6, 91, 71, 75, 79, 59, 40, 1, 18, 49, 48, 75, 92, 72, 81, 43, 31, 31, 29, 94, 39]) == 1388\n\ndef test_check():\n    check(maxArrayValue)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2873_findPrimePairs", "language": "py", "prompt": "from typing import List\n\ndef findPrimePairs(n: int) -> List[List[int]]:\n    \"\"\"    You are given an integer n. We say that two integers x and y form a prime number pair if:\n* 1 <= x <= y <= n\n* x + y == n\n* x and y are prime numbers\n    Return the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array.\n    Note: A prime number is a natural number greater than 1 with only two factors, itself and 1.\n    Example 1:\n    Input: n = 10\n    Output: [[3,7],[5,5]]\n    Explanation: In this example, there are two prime pairs that satisfy the criteria.\n    These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.\n    Example 2:\n    Input: n = 2\n    Output: []\n    Explanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array.\n    Constraints:\n* 1 <= n <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2873_findPrimePairs.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(10) == [[3, 7], [5, 5]]\n    assert candidate(2) == []\n    assert candidate(1) == []\n    assert candidate(3) == []\n    assert candidate(4) == [[2, 2]]\n    assert candidate(5) == [[2, 3]]\n    assert candidate(6) == [[3, 3]]\n    assert candidate(7) == [[2, 5]]\n    assert candidate(8) == [[3, 5]]\n    assert candidate(9) == [[2, 7]]\n    assert candidate(11) == []\n    assert candidate(12) == [[5, 7]]\n    assert candidate(13) == [[2, 11]]\n    assert candidate(14) == [[3, 11], [7, 7]]\n    assert candidate(15) == [[2, 13]]\n    assert candidate(16) == [[3, 13], [5, 11]]\n    assert candidate(17) == []\n    assert candidate(18) == [[5, 13], [7, 11]]\n    assert candidate(19) == [[2, 17]]\n    assert candidate(20) == [[3, 17], [7, 13]]\n    assert candidate(21) == [[2, 19]]\n    assert candidate(22) == [[3, 19], [5, 17], [11, 11]]\n    assert candidate(23) == []\n    assert candidate(24) == [[5, 19], [7, 17], [11, 13]]\n    assert candidate(25) == [[2, 23]]\n    assert candidate(26) == [[3, 23], [7, 19], [13, 13]]\n    assert candidate(27) == []\n    assert candidate(28) == [[5, 23], [11, 17]]\n    assert candidate(29) == []\n    assert candidate(30) == [[7, 23], [11, 19], [13, 17]]\n    assert candidate(31) == [[2, 29]]\n    assert candidate(32) == [[3, 29], [13, 19]]\n    assert candidate(33) == [[2, 31]]\n    assert candidate(34) == [[3, 31], [5, 29], [11, 23], [17, 17]]\n    assert candidate(35) == []\n    assert candidate(36) == [[5, 31], [7, 29], [13, 23], [17, 19]]\n    assert candidate(37) == []\n    assert candidate(38) == [[7, 31], [19, 19]]\n    assert candidate(39) == [[2, 37]]\n    assert candidate(40) == [[3, 37], [11, 29], [17, 23]]\n    assert candidate(41) == []\n    assert candidate(42) == [[5, 37], [11, 31], [13, 29], [19, 23]]\n    assert candidate(43) == [[2, 41]]\n    assert candidate(44) == [[3, 41], [7, 37], [13, 31]]\n    assert candidate(45) == [[2, 43]]\n    assert candidate(46) == [[3, 43], [5, 41], [17, 29], [23, 23]]\n    assert candidate(47) == []\n    assert candidate(48) == [[5, 43], [7, 41], [11, 37], [17, 31], [19, 29]]\n    assert candidate(49) == [[2, 47]]\n    assert candidate(50) == [[3, 47], [7, 43], [13, 37], [19, 31]]\n    assert candidate(51) == []\n    assert candidate(52) == [[5, 47], [11, 41], [23, 29]]\n    assert candidate(53) == []\n    assert candidate(54) == [[7, 47], [11, 43], [13, 41], [17, 37], [23, 31]]\n    assert candidate(55) == [[2, 53]]\n    assert candidate(56) == [[3, 53], [13, 43], [19, 37]]\n    assert candidate(57) == []\n    assert candidate(58) == [[5, 53], [11, 47], [17, 41], [29, 29]]\n    assert candidate(59) == []\n    assert candidate(60) == [[7, 53], [13, 47], [17, 43], [19, 41], [23, 37], [29, 31]]\n    assert candidate(61) == [[2, 59]]\n    assert candidate(62) == [[3, 59], [19, 43], [31, 31]]\n    assert candidate(63) == [[2, 61]]\n    assert candidate(64) == [[3, 61], [5, 59], [11, 53], [17, 47], [23, 41]]\n    assert candidate(65) == []\n    assert candidate(66) == [[5, 61], [7, 59], [13, 53], [19, 47], [23, 43], [29, 37]]\n    assert candidate(67) == []\n    assert candidate(68) == [[7, 61], [31, 37]]\n    assert candidate(69) == [[2, 67]]\n    assert candidate(70) == [[3, 67], [11, 59], [17, 53], [23, 47], [29, 41]]\n    assert candidate(71) == []\n    assert candidate(72) == [[5, 67], [11, 61], [13, 59], [19, 53], [29, 43], [31, 41]]\n    assert candidate(73) == [[2, 71]]\n    assert candidate(74) == [[3, 71], [7, 67], [13, 61], [31, 43], [37, 37]]\n    assert candidate(75) == [[2, 73]]\n    assert candidate(76) == [[3, 73], [5, 71], [17, 59], [23, 53], [29, 47]]\n    assert candidate(77) == []\n    assert candidate(78) == [[5, 73], [7, 71], [11, 67], [17, 61], [19, 59], [31, 47], [37, 41]]\n    assert candidate(79) == []\n    assert candidate(80) == [[7, 73], [13, 67], [19, 61], [37, 43]]\n    assert candidate(81) == [[2, 79]]\n    assert candidate(82) == [[3, 79], [11, 71], [23, 59], [29, 53], [41, 41]]\n    assert candidate(83) == []\n    assert candidate(84) == [[5, 79], [11, 73], [13, 71], [17, 67], [23, 61], [31, 53], [37, 47], [41, 43]]\n    assert candidate(85) == [[2, 83]]\n    assert candidate(86) == [[3, 83], [7, 79], [13, 73], [19, 67], [43, 43]]\n    assert candidate(87) == []\n    assert candidate(88) == [[5, 83], [17, 71], [29, 59], [41, 47]]\n    assert candidate(89) == []\n    assert candidate(90) == [[7, 83], [11, 79], [17, 73], [19, 71], [23, 67], [29, 61], [31, 59], [37, 53], [43, 47]]\n    assert candidate(91) == [[2, 89]]\n    assert candidate(92) == [[3, 89], [13, 79], [19, 73], [31, 61]]\n    assert candidate(93) == []\n    assert candidate(94) == [[5, 89], [11, 83], [23, 71], [41, 53], [47, 47]]\n    assert candidate(95) == []\n    assert candidate(96) == [[7, 89], [13, 83], [17, 79], [23, 73], [29, 67], [37, 59], [43, 53]]\n    assert candidate(97) == []\n    assert candidate(98) == [[19, 79], [31, 67], [37, 61]]\n    assert candidate(99) == [[2, 97]]\n    assert candidate(100) == [[3, 97], [11, 89], [17, 83], [29, 71], [41, 59], [47, 53]]\n\ndef test_check():\n    check(findPrimePairs)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2876_numberOfEmployeesWhoMetTarget", "language": "py", "prompt": "from typing import List\n\ndef numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    \"\"\"There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\nThe company requires each employee to work for at least target hours.\nYou are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\nReturn the integer denoting the number of employees who worked at least target hours.\nExample 1:\nInput: hours = [0,1,2,3,4], target = 2\nOutput: 3\nExplanation: The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\nExample 2:\nInput: hours = [5,1,4,2,2], target = 6\nOutput: 0\nExplanation: The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\nConstraints:\n * 1 <= n == hours.length <= 50\n * 0 <=\u00a0hours[i], target <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2876_numberOfEmployeesWhoMetTarget.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([0, 1, 2, 3, 4], 2) == 3\n    assert candidate([5, 1, 4, 2, 2], 6) == 0\n    assert candidate([98], 5) == 1\n    assert candidate([19], 13) == 1\n    assert candidate([70], 13) == 1\n    assert candidate([26], 14) == 1\n    assert candidate([2], 16) == 0\n    assert candidate([77], 19) == 1\n    assert candidate([6], 21) == 0\n    assert candidate([27], 21) == 1\n    assert candidate([36], 22) == 1\n    assert candidate([42], 25) == 1\n    assert candidate([70], 27) == 1\n    assert candidate([2], 28) == 0\n    assert candidate([14], 31) == 0\n    assert candidate([45], 34) == 1\n    assert candidate([44], 35) == 1\n    assert candidate([11], 39) == 0\n    assert candidate([71], 39) == 1\n    assert candidate([91], 45) == 1\n    assert candidate([81], 51) == 1\n    assert candidate([15], 52) == 0\n    assert candidate([90], 59) == 1\n    assert candidate([40], 64) == 0\n    assert candidate([12], 69) == 0\n    assert candidate([83], 70) == 1\n    assert candidate([38], 74) == 0\n    assert candidate([18], 78) == 0\n    assert candidate([60], 83) == 0\n    assert candidate([50], 87) == 0\n    assert candidate([75], 92) == 0\n    assert candidate([91], 96) == 0\n    assert candidate([11], 97) == 0\n    assert candidate([48, 28], 2) == 2\n    assert candidate([38, 46], 3) == 2\n    assert candidate([30, 79], 6) == 2\n    assert candidate([45, 78], 6) == 2\n    assert candidate([20, 69], 10) == 2\n    assert candidate([82, 67], 11) == 2\n    assert candidate([29, 75], 12) == 2\n    assert candidate([97, 37], 17) == 2\n    assert candidate([42, 100], 20) == 2\n    assert candidate([11, 58], 21) == 1\n    assert candidate([12, 46], 21) == 1\n    assert candidate([70, 84], 37) == 2\n    assert candidate([7, 100], 38) == 1\n    assert candidate([47, 94], 40) == 2\n    assert candidate([18, 34], 50) == 0\n    assert candidate([47, 79], 55) == 1\n    assert candidate([74, 99], 56) == 2\n    assert candidate([53, 81], 67) == 1\n    assert candidate([36, 61], 68) == 0\n    assert candidate([48, 98], 71) == 1\n    assert candidate([71, 94], 72) == 1\n    assert candidate([60, 99], 73) == 1\n    assert candidate([12, 12], 74) == 0\n    assert candidate([100, 87], 75) == 2\n    assert candidate([12, 56], 77) == 0\n    assert candidate([15, 36], 86) == 0\n    assert candidate([53, 45], 86) == 0\n    assert candidate([4, 77], 89) == 0\n    assert candidate([23, 29], 93) == 0\n    assert candidate([76, 62, 96], 5) == 3\n    assert candidate([82, 67, 33], 5) == 3\n    assert candidate([28, 96, 39], 10) == 3\n    assert candidate([42, 93, 58], 13) == 3\n    assert candidate([53, 22, 48], 13) == 3\n    assert candidate([68, 81, 61], 13) == 3\n    assert candidate([68, 32, 33], 22) == 3\n    assert candidate([59, 65, 70], 26) == 3\n    assert candidate([15, 43, 21], 29) == 1\n    assert candidate([40, 80, 75], 33) == 3\n    assert candidate([64, 11, 73], 34) == 2\n    assert candidate([1, 74, 34], 44) == 1\n    assert candidate([96, 79, 91], 44) == 3\n    assert candidate([59, 9, 9], 48) == 1\n    assert candidate([79, 48, 62], 53) == 2\n    assert candidate([58, 83, 2], 54) == 2\n    assert candidate([51, 40, 12], 57) == 0\n    assert candidate([54, 2, 80], 60) == 1\n    assert candidate([92, 45, 91], 65) == 2\n    assert candidate([93, 23, 46], 67) == 1\n    assert candidate([17, 60, 1], 70) == 0\n    assert candidate([9, 63, 77], 73) == 1\n    assert candidate([44, 86, 37], 73) == 1\n    assert candidate([75, 37, 68], 73) == 1\n    assert candidate([33, 26, 77], 78) == 0\n    assert candidate([11, 88, 27], 79) == 1\n    assert candidate([12, 48, 44], 80) == 0\n    assert candidate([19, 88, 13], 82) == 1\n    assert candidate([61, 56, 67], 82) == 0\n    assert candidate([46, 24, 38], 84) == 0\n    assert candidate([93, 51, 83], 85) == 1\n    assert candidate([58, 14, 83], 87) == 0\n    assert candidate([52, 33, 56], 89) == 0\n    assert candidate([34, 73, 46], 91) == 0\n    assert candidate([26, 59, 55], 94) == 0\n    assert candidate([41, 89, 34], 100) == 0\n    assert candidate([9, 26, 77, 55], 0) == 4\n    assert candidate([24, 79, 63, 37], 1) == 4\n\ndef test_check():\n    check(numberOfEmployeesWhoMetTarget)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2877_minimumString", "language": "py", "prompt": "def minimumString(a: str, b: str, c: str) -> str:\n    \"\"\"Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings.\nIf there are multiple such strings, return the lexicographically smallest one.\nReturn a string denoting the answer to the problem.\nNotes\n * A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n * A substring is a contiguous sequence of characters within a string.\nExample 1:\nInput: a = \"abc\", b = \"bca\", c = \"aaa\"\nOutput: \"aaabca\"\nExplanation:  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one.\nExample 2:\nInput: a = \"ab\", b = \"ba\", c = \"aba\"\nOutput: \"aba\"\nExplanation: We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.\nConstraints:\n * 1 <= a.length, b.length, c.length <= 100\n * a, b, c consist only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2877_minimumString.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abc, bca, aaa) == 'aaabca'\n    assert candidate(ab, ba, aba) == 'aba'\n    assert candidate(xyyyz, xzyz, zzz) == 'xyyyzxzyzzz'\n    assert candidate(a, a, a) == 'a'\n    assert candidate(a, a, b) == 'ab'\n    assert candidate(a, c, a) == 'ac'\n    assert candidate(a, b, b) == 'ab'\n    assert candidate(a, a, c) == 'ac'\n    assert candidate(a, c, b) == 'abc'\n    assert candidate(c, c, a) == 'ac'\n    assert candidate(k, e, a) == 'aek'\n    assert candidate(a, b, a) == 'ab'\n    assert candidate(b, b, a) == 'ab'\n    assert candidate(b, b, b) == 'b'\n    assert candidate(b, b, c) == 'bc'\n    assert candidate(c, b, b) == 'bc'\n    assert candidate(b, c, c) == 'bc'\n    assert candidate(b, c, a) == 'abc'\n    assert candidate(c, a, c) == 'ac'\n    assert candidate(c, b, c) == 'bc'\n    assert candidate(c, c, c) == 'c'\n    assert candidate(e, k, y) == 'eky'\n    assert candidate(z, p, m) == 'mpz'\n    assert candidate(a, aa, a) == 'aa'\n    assert candidate(ac, a, a) == 'ac'\n    assert candidate(ca, a, a) == 'ca'\n    assert candidate(a, cc, a) == 'acc'\n    assert candidate(a, a, aa) == 'aa'\n    assert candidate(c, a, aa) == 'aac'\n    assert candidate(a, ab, a) == 'ab'\n    assert candidate(ab, b, a) == 'ab'\n    assert candidate(ab, a, c) == 'abc'\n    assert candidate(c, ac, a) == 'ac'\n    assert candidate(ab, a, b) == 'ab'\n    assert candidate(b, a, ba) == 'ba'\n    assert candidate(ba, a, a) == 'ba'\n    assert candidate(b, ba, a) == 'ba'\n    assert candidate(a, bc, a) == 'abc'\n    assert candidate(c, a, bc) == 'abc'\n    assert candidate(a, c, ab) == 'abc'\n    assert candidate(c, a, ac) == 'ac'\n    assert candidate(a, c, ca) == 'ca'\n    assert candidate(c, a, cc) == 'acc'\n    assert candidate(a, ca, a) == 'ca'\n    assert candidate(a, cc, c) == 'acc'\n    assert candidate(aa, a, a) == 'aa'\n    assert candidate(aa, b, a) == 'aab'\n    assert candidate(a, aa, c) == 'aac'\n    assert candidate(b, c, aa) == 'aabc'\n    assert candidate(b, b, ab) == 'ab'\n    assert candidate(ab, b, c) == 'abc'\n    assert candidate(ac, c, b) == 'acb'\n    assert candidate(c, c, ac) == 'ac'\n    assert candidate(ba, b, a) == 'ba'\n    assert candidate(a, b, ca) == 'bca'\n    assert candidate(b, a, aa) == 'aab'\n    assert candidate(b, b, aa) == 'aab'\n    assert candidate(b, ab, a) == 'ab'\n    assert candidate(b, ab, b) == 'ab'\n    assert candidate(ac, b, a) == 'acb'\n    assert candidate(b, b, ac) == 'acb'\n    assert candidate(bb, b, b) == 'bb'\n    assert candidate(b, bc, b) == 'bc'\n    assert candidate(b, b, ca) == 'bca'\n    assert candidate(cb, b, b) == 'cb'\n    assert candidate(b, b, bb) == 'bb'\n    assert candidate(b, a, bc) == 'abc'\n    assert candidate(b, bc, c) == 'bc'\n    assert candidate(b, ab, c) == 'abc'\n    assert candidate(b, bb, c) == 'bbc'\n    assert candidate(c, b, bc) == 'bc'\n    assert candidate(b, cb, c) == 'cb'\n    assert candidate(b, cc, c) == 'bcc'\n    assert candidate(b, cb, a) == 'acb'\n    assert candidate(b, b, cb) == 'cb'\n    assert candidate(c, b, cb) == 'cb'\n    assert candidate(a, ba, b) == 'ba'\n    assert candidate(ba, a, b) == 'ba'\n    assert candidate(ba, b, b) == 'ba'\n    assert candidate(b, ba, c) == 'bac'\n    assert candidate(c, ba, b) == 'bac'\n    assert candidate(c, c, ba) == 'bac'\n    assert candidate(bb, a, b) == 'abb'\n    assert candidate(b, bb, b) == 'bb'\n    assert candidate(c, bb, b) == 'bbc'\n    assert candidate(a, bc, b) == 'abc'\n    assert candidate(bc, b, c) == 'bc'\n    assert candidate(bc, c, b) == 'bc'\n    assert candidate(bc, c, c) == 'bc'\n    assert candidate(ac, a, c) == 'ac'\n    assert candidate(c, c, aa) == 'aac'\n    assert candidate(cb, b, c) == 'cb'\n    assert candidate(c, b, cc) == 'bcc'\n    assert candidate(ba, b, c) == 'bac'\n    assert candidate(aa, c, c) == 'aac'\n    assert candidate(c, bc, c) == 'bc'\n    assert candidate(c, ca, c) == 'ca'\n    assert candidate(c, cb, c) == 'cb'\n    assert candidate(c, c, cc) == 'cc'\n    assert candidate(ca, c, a) == 'ca'\n\ndef test_check():\n    check(minimumString)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2878_checkArray", "language": "py", "prompt": "from typing import List\n\ndef checkArray(nums: List[int], k: int) -> bool:\n    \"\"\"You are given a 0-indexed integer array nums and a positive integer k.\nYou can apply the following operation on the array any number of times:\n * Choose any subarray of size k from the array and decrease all its elements by 1.\nReturn true if you can make all the array elements equal to 0, or false otherwise.\nA subarray is a contiguous non-empty part of an array.\nExample 1:\nInput: nums = [2,2,3,1,1,0], k = 3\nOutput: true\nExplanation: We can do the following operations:\n- Choose the subarray [2,2,3]. The resulting array will be nums = [1,1,2,1,1,0].\n- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,1,0,0,0].\n- Choose the subarray [1,1,1]. The resulting array will be nums = [0,0,0,0,0,0].\nExample 2:\nInput: nums = [1,3,1,1], k = 2\nOutput: false\nExplanation: It is not possible to make all the array elements equal to 0.\nConstraints:\n * 1 <= k <= nums.length <= 105\n * 0 <= nums[i] <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2878_checkArray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 1, 1], 2) == False\n    assert candidate([2, 2, 3, 1, 1, 0], 3) == True\n    assert candidate([24, 24, 14, 37, 31, 88, 94, 38, 94, 0, 100, 100, 4, 46, 5, 50, 0, 33, 22, 25, 0], 10) == False\n    assert candidate([60, 72, 87, 89, 63, 52, 64, 62, 31, 37, 57, 83, 98, 94, 92, 77, 94, 91, 87, 100, 91, 91, 50, 26], 4) == True\n    assert candidate([22, 4, 1, 25, 68, 30, 97, 99, 100, 22, 20, 39, 85, 68, 3, 1, 1, 74], 4) == False\n    assert candidate([63, 40, 30, 0, 72, 53], 1) == True\n    assert candidate([27, 99, 7, 1, 94, 63, 84, 46, 76, 35, 97, 77, 19, 72, 3], 2) == False\n    assert candidate([60, 78, 96, 97, 97, 97, 49, 7, 97, 97, 97, 99, 97, 97, 97, 97, 85, 97, 97, 97, 37, 5, 1], 20) == False\n    assert candidate([34, 34, 99, 93, 93, 26, 99, 100, 94, 94, 82, 86, 100, 100, 87, 100, 100, 100, 100, 100, 63, 100, 100, 66, 17, 10, 8, 7, 3, 1], 23) == False\n    assert candidate([67, 98, 97, 99, 98, 97, 97, 96, 99, 99, 99, 42, 68, 18, 99, 44, 95, 79, 1, 16, 49, 1, 2, 2, 0], 16) == False\n    assert candidate([59, 60, 99, 99, 99, 99, 99, 99, 99, 40, 39, 0], 9) == True\n    assert candidate([12, 87, 91, 18], 3) == False\n    assert candidate([0, 0, 51, 67, 80, 98, 88, 75, 89, 83, 100, 70, 77, 82, 57, 100, 80, 69, 19, 17], 3) == True\n    assert candidate([22], 1) == True\n    assert candidate([52, 92, 51, 24, 23, 79, 100, 94, 78, 96, 38, 14, 72, 27, 99, 94, 32, 67, 43, 31, 88, 8], 4) == False\n    assert candidate([8, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 43, 0], 25) == True\n    assert candidate([0, 0, 39, 84, 86, 94, 55, 10, 8, 0], 4) == True\n    assert candidate([12, 79, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 83, 16, 0], 24) == True\n    assert candidate([15, 11, 99, 86, 58, 23, 82, 100, 100, 80, 58, 58, 84, 57, 0, 25, 6], 3) == False\n    assert candidate([99, 0, 82, 66, 3, 25, 92, 41, 3, 0, 46], 7) == False\n    assert candidate([18, 52, 56, 96, 98, 82, 76, 87, 2, 61, 88, 100], 2) == False\n    assert candidate([0, 6, 100, 74, 4, 50, 100, 92, 18, 70, 15, 88, 0, 24], 9) == False\n    assert candidate([0, 0, 33, 72, 86, 53, 14], 3) == True\n    assert candidate([67, 0, 68, 97, 94], 3) == False\n    assert candidate([0, 0, 8, 64, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 81, 25], 25) == True\n    assert candidate([84, 0, 68, 95, 95, 0, 25, 0, 7, 71, 4, 68, 23, 97, 80, 0], 1) == True\n    assert candidate([95, 92, 99, 99, 2, 100, 100, 100, 100, 100, 100, 100, 8, 57, 65, 69, 69, 100, 100, 100, 100, 100, 100, 100, 100, 0, 79, 72, 32], 12) == False\n    assert candidate([7, 33, 97, 98, 100, 100, 74, 98, 95, 13, 39, 31, 82, 51, 28, 68, 37, 59, 21, 5, 66, 77, 89, 6, 0], 6) == False\n    assert candidate([48, 48, 48, 48, 48], 5) == True\n    assert candidate([42, 60, 56, 99, 72, 2, 100, 51, 65, 14, 13, 51, 1, 55, 56, 61, 99, 49, 96, 2], 3) == False\n    assert candidate([8, 82, 98, 99, 66, 39, 71, 100, 81, 85, 100, 19, 96, 0, 2, 85, 40, 0, 19, 0], 11) == False\n    assert candidate([92, 96, 96, 96, 97, 99, 99, 99, 99, 99, 99, 99, 99, 22, 18, 18, 18, 17, 15, 15, 15, 15, 15, 15, 15, 15], 13) == True\n    assert candidate([89, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], 12) == False\n    assert candidate([4, 19, 0, 74, 0, 26, 94, 25, 99, 35, 0], 10) == False\n    assert candidate([79, 4, 27, 35, 16, 27, 85, 92, 75, 99, 7, 98, 86, 92, 33, 8, 96, 44, 21, 52, 34], 4) == False\n    assert candidate([75, 18, 0, 81, 18, 16, 51, 0], 1) == True\n    assert candidate([74, 74, 74, 74, 74, 74, 74, 74, 74], 9) == True\n    assert candidate([5, 5, 5, 9, 37, 81, 95, 95, 95, 98, 98, 99, 100, 100, 97, 99, 100, 96, 68, 24, 10, 10, 10, 7, 7, 6, 5, 5, 3, 1], 14) == True\n    assert candidate([81, 100, 99, 99, 68, 66, 56, 100, 74, 63, 2, 84, 23, 67, 93, 92, 56, 90, 18, 57, 100, 33, 88, 26, 100, 72, 93, 57, 28, 17], 4) == False\n    assert candidate([62, 76, 96, 12, 0, 20, 63, 29, 96, 97, 8, 18, 56], 1) == True\n    assert candidate([31, 60, 97, 71, 53, 46, 63, 50, 91, 82, 40, 79, 96, 100, 55, 55, 57, 39, 50, 98, 72, 37, 27, 55], 3) == False\n    assert candidate([100, 65, 78, 59, 17, 17], 1) == True\n    assert candidate([57, 10, 53, 20, 40, 42, 64, 94, 82, 67, 100, 3, 22, 67, 95, 28, 61, 74, 67, 99, 100, 46, 67, 67, 76, 31, 99, 26, 85], 24) == False\n    assert candidate([34, 76, 66, 48, 13, 89, 22, 24, 70, 17, 17, 42, 100, 2, 96, 8], 3) == False\n    assert candidate([92, 94, 2, 6, 6], 2) == True\n    assert candidate([100, 17, 95], 3) == False\n    assert candidate([20, 27, 75, 96, 97, 84, 90, 77, 65, 64, 57, 44, 9, 0], 5) == True\n    assert candidate([41, 39, 98, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 37, 5, 2, 1, 0, 0, 92, 0, 0, 0], 15) == False\n    assert candidate([45, 90, 90, 99, 99, 99, 99, 99, 54, 9, 9, 0], 8) == True\n    assert candidate([41, 18, 59, 3, 52, 59, 59, 55, 1, 34, 67, 1, 2, 13, 60, 40, 5, 0, 4, 47, 73, 96, 33, 59, 98], 24) == False\n    assert candidate([53, 88, 96, 97, 97, 97, 97, 97, 97, 97, 44, 9, 1, 0], 10) == True\n    assert candidate([90, 74, 13, 81, 34, 10, 29, 18, 61, 94, 43, 99, 86, 0], 11) == False\n    assert candidate([44, 47, 72, 0, 0, 68, 97, 67], 1) == True\n    assert candidate([77, 78, 19, 97, 79], 2) == True\n    assert candidate([36, 61, 86, 61, 0, 61, 61, 61, 61, 61, 61, 61, 61, 65, 62, 61, 95, 61, 61, 61, 80, 66, 61, 61, 25], 24) == False\n    assert candidate([0, 44, 92, 94, 94, 50, 95, 98, 98, 99, 6, 1, 54, 58, 94, 94, 41, 36], 4) == True\n    assert candidate([60, 71, 76, 93, 98, 98, 98, 98, 38, 27, 22, 5], 8) == True\n    assert candidate([94, 94, 99, 94, 86, 100, 32, 96, 59, 69, 99, 95, 75], 3) == False\n    assert candidate([6, 55, 95, 95, 95, 96, 95, 95, 90, 5, 0], 8) == False\n    assert candidate([62, 90, 90, 90, 99, 57, 61, 96, 96, 97, 99, 78, 84, 0], 5) == False\n    assert candidate([57, 77, 91, 66, 46, 32], 3) == True\n    assert candidate([86, 87, 92, 20, 42, 99, 100, 97, 17, 18, 48, 11, 60, 98, 96, 28, 59, 5, 18, 56, 62, 35, 100, 87, 51, 54, 77, 98, 61], 7) == False\n    assert candidate([21, 26, 20, 2, 38, 22, 0, 96, 79, 93, 9, 67, 34], 12) == False\n    assert candidate([92, 14, 95, 100, 53, 99, 100, 100, 50, 99, 99, 99, 93, 99, 100, 15, 71, 100, 7, 5, 48, 65, 6], 18) == False\n    assert candidate([64, 14, 64, 8, 0, 83, 17, 68, 5, 98, 36], 7) == False\n    assert candidate([50, 50, 50, 50, 93, 92, 84, 96, 96, 96, 96, 96, 96, 96, 96, 46, 46, 46, 46, 33, 4, 1, 0], 15) == False\n    assert candidate([79, 90, 100, 96, 22, 2, 100, 10, 100, 100, 78, 85, 54, 7, 35, 97, 98, 98, 98, 98, 33, 38, 4, 14, 63, 23], 10) == False\n    assert candidate([49, 74, 96, 93, 93, 99, 100, 95, 73, 100, 41, 95, 99, 22, 13, 52, 19, 13, 11, 80], 7) == False\n    assert candidate([6, 100, 100, 100, 100, 100, 98, 4, 74, 89, 89, 89, 85, 85, 15], 6) == True\n    assert candidate([69, 48, 8, 3, 82, 10, 88, 76, 32, 95, 68, 30, 97, 64, 32, 62, 86], 1) == True\n    assert candidate([87, 87, 87], 3) == True\n    assert candidate([88, 98, 99, 99, 100, 100, 58, 82, 85, 87, 86, 86, 40, 6, 2], 6) == True\n    assert candidate([26, 26, 46, 46, 70, 70, 95, 97, 98, 98, 98, 72, 72, 52, 52, 28, 28, 3, 1], 11) == True\n    assert candidate([25], 1) == True\n    assert candidate([71, 87, 87, 96, 99, 36, 61, 87, 98, 97, 93, 96, 71, 59, 75, 71, 27, 26, 18], 5) == True\n    assert candidate([39, 90, 15, 100, 52, 27, 100, 67, 99, 79, 4, 78, 95, 84, 2], 4) == False\n    assert candidate([39, 39, 39, 39, 39, 39, 39, 39, 39, 39], 10) == True\n    assert candidate([58, 72, 93, 99, 99, 64, 50, 29, 23, 23, 0, 0, 0, 0, 0], 5) == True\n    assert candidate([30, 86, 23], 3) == False\n    assert candidate([65, 69, 74, 79, 90, 95, 98, 99, 99, 99, 100, 100, 100, 100, 100, 100, 35, 31, 26, 21, 10, 5, 2, 1, 1, 1, 0, 0], 16) == True\n    assert candidate([69, 2, 71, 4, 97, 97, 100, 26, 100, 100, 100, 100, 100, 77, 13, 8, 13, 3, 3, 72, 0, 0, 0], 13) == False\n    assert candidate([77, 90, 94, 94, 98, 98, 28, 29, 36, 91, 91, 94, 87, 73, 80, 81, 77, 74, 74, 74, 56], 6) == True\n    assert candidate([93], 1) == True\n    assert candidate([70, 91, 100, 17, 80, 94, 35, 83, 33, 0], 4) == False\n    assert candidate([79, 87, 87, 99, 50, 77, 97, 85, 92, 91, 71, 71, 34], 4) == True\n    assert candidate([75, 9, 96, 100, 100, 77, 7, 99, 100, 99, 94, 71, 5, 78, 3, 8, 8, 7, 59, 8, 6], 10) == False\n    assert candidate([36, 37, 69, 88, 88, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60, 59, 27, 8, 8, 0], 21) == True\n    assert candidate([94, 94, 96, 97, 98, 11, 64, 85, 84, 87, 98, 45, 65, 83, 79, 63, 74, 79, 61, 61, 59, 48], 5) == True\n    assert candidate([80, 80, 98, 98, 98, 18, 18, 0, 0], 5) == True\n    assert candidate([14, 100, 17, 100, 13, 85, 100, 100, 14, 100, 100, 1, 83, 0], 11) == False\n    assert candidate([98, 74, 91, 70], 2) == False\n    assert candidate([0, 29, 29, 93, 93, 93, 93, 93, 93, 93, 93, 93, 64, 64], 11) == True\n    assert candidate([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 0], 15) == True\n    assert candidate([34, 89, 92, 96, 96, 98, 99, 98, 79, 4, 100, 100, 12, 99, 100, 44, 100, 66, 25, 8, 4, 98, 2, 1, 97, 70, 1, 15, 0, 88], 17) == False\n    assert candidate([95, 95, 98, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 5, 5, 2, 1, 1, 1], 13) == True\n    assert candidate([15, 58, 78, 10, 68, 49, 100, 94, 30, 14, 72], 5) == False\n    assert candidate([9, 44, 70, 75, 28, 23, 11, 37, 69, 34, 61], 10) == False\n    assert candidate([70, 51, 47, 100, 59, 66, 17, 98, 60], 4) == False\n    assert candidate([92, 33, 58, 88], 2) == False\n    assert candidate([99, 15, 91, 32, 7, 98], 3) == False\n\ndef test_check():\n    check(checkArray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2879_minimumChanges", "language": "py", "prompt": "def minimumChanges(s: str, k: int) -> int:\n    \"\"\"Given a string s and an integer k, partition s into k substrings such that the sum of the number of letter changes required to turn each substring into a semi-palindrome is minimized.\nReturn an integer denoting the minimum number of letter changes required.\nNotes\n * A string is a palindrome if it can be read the same way from left to right and right to left.\n * A string with a length of len is considered a semi-palindrome if there exists a positive integer d such that 1 <= d < len and len % d == 0, and if we take indices that have the same modulo by d, they form a palindrome. For example, \"aa\", \"aba\", \"adbgad\", and, \"abab\" are semi-palindrome and \"a\", \"ab\", and, \"abca\" are not.\n * A substring is a contiguous sequence of characters within a string.\nExample 1:\nInput: s = \"abcac\", k = 2\nOutput: 1\nExplanation: We can divide s into substrings \"ab\" and \"cac\". The string \"cac\" is already a semi-palindrome. If we change \"ab\" to \"aa\", it becomes a semi-palindrome with d = 1.\nIt can be shown that there is no way to divide the string \"abcac\" into two semi-palindrome substrings. Therefore, the answer would be at least 1.\nExample 2:\nInput: s = \"abcdef\", k = 2\nOutput: 2\nExplanation: We can divide it into substrings \"abc\" and \"def\". Each of the substrings \"abc\" and \"def\" requires one change to become a semi-palindrome, so we need 2 changes in total to make all substrings semi-palindrome.\nIt can be shown that we cannot divide the given string into two substrings in a way that it would require less than 2 changes.\nExample 3:\nInput: s = \"aabbaa\", k = 3\nOutput: 0\nExplanation: We can divide it into substrings \"aa\", \"bb\" and \"aa\".\nThe strings \"aa\" and \"bb\" are already semi-palindromes. Thus, the answer is zero.\nConstraints:\n * 2 <= s.length <= 200\n * 1 <= k <= s.length / 2\n * s consists only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2879_minimumChanges.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abcac, 2) == 1\n    assert candidate(abcdef, 2) == 2\n    assert candidate(aabbaa, 3) == 0\n    assert candidate(aq, 1) == 1\n    assert candidate(bb, 1) == 0\n    assert candidate(aac, 1) == 1\n    assert candidate(abcc, 1) == 2\n    assert candidate(acba, 2) == 2\n    assert candidate(edaswf, 1) == 2\n    assert candidate(aabcbaa, 1) == 0\n    assert candidate(dqpldq, 3) == 3\n    assert candidate(eksddulf, 1) == 3\n    assert candidate(aaaaacabbb, 1) == 3\n    assert candidate(aaabacacbb, 1) == 3\n    assert candidate(abbbbacaaa, 1) == 3\n    assert candidate(abcccbaccb, 1) == 2\n    assert candidate(baacbbbaba, 1) == 2\n    assert candidate(babcbaccba, 1) == 1\n    assert candidate(cabbcabcbc, 1) == 3\n    assert candidate(ccbccaaabb, 1) == 4\n    assert candidate(cccbabbbbc, 1) == 2\n    assert candidate(cccccbaaac, 1) == 3\n    assert candidate(dyfnbbbqbm, 1) == 4\n    assert candidate(hafrypzupv, 1) == 4\n    assert candidate(aabcacccabc, 1) == 4\n    assert candidate(abbcaabaaac, 1) == 5\n    assert candidate(baabaabbcb, 2) == 0\n    assert candidate(bbbabcbaccb, 1) == 2\n    assert candidate(bcababccaa, 2) == 1\n    assert candidate(bcacacacaab, 1) == 1\n    assert candidate(bcacccacbaa, 1) == 4\n    assert candidate(bccaaccacb, 2) == 2\n    assert candidate(caacbacbaca, 1) == 4\n    assert candidate(ccccaaacca, 2) == 1\n    assert candidate(efrsgmjneph, 1) == 5\n    assert candidate(ehdvhthgbxq, 1) == 4\n    assert candidate(eymakkvrvc, 2) == 3\n    assert candidate(gilkaelnfr, 2) == 4\n    assert candidate(iiaenfiasiv, 1) == 4\n    assert candidate(piazrazesdk, 1) == 5\n    assert candidate(pypwcllynf, 2) == 3\n    assert candidate(uqicxuvkorn, 1) == 5\n    assert candidate(ziirnywodfz, 1) == 4\n    assert candidate(zpogsiabazr, 1) == 5\n    assert candidate(aacacaacabba, 1) == 2\n    assert candidate(abacacabba, 3) == 0\n    assert candidate(acbcbccccba, 2) == 2\n    assert candidate(bbcaaaaacbb, 2) == 2\n    assert candidate(cbabaabccba, 2) == 1\n    assert candidate(cbacccbabcaa, 1) == 3\n    assert candidate(cbbcbcacca, 3) == 1\n    assert candidate(ccaabbbccacb, 1) == 3\n    assert candidate(ccabcbbcaa, 3) == 1\n    assert candidate(epenvgssid, 3) == 3\n    assert candidate(grllkopehr, 3) == 3\n    assert candidate(iaemfpyhrtgb, 1) == 4\n    assert candidate(iqjvqxzhjc, 3) == 4\n    assert candidate(kpkzjgcvgopr, 1) == 4\n    assert candidate(neocjmpaltv, 2) == 4\n    assert candidate(uvdbxsjyso, 3) == 4\n    assert candidate(wsezruidpcy, 2) == 4\n    assert candidate(ybexlzsvsi, 3) == 3\n    assert candidate(abacabccaa, 4) == 1\n    assert candidate(abccbacbcbc, 3) == 1\n    assert candidate(abccccbaaba, 3) == 2\n    assert candidate(acabbbacacbb, 2) == 1\n    assert candidate(acbbbbccacc, 3) == 1\n    assert candidate(acbcbbaaca, 4) == 2\n    assert candidate(accbabbbaacaa, 1) == 2\n    assert candidate(baaaccbaaa, 4) == 2\n    assert candidate(baababcacc, 4) == 2\n    assert candidate(baabbccbbc, 4) == 2\n    assert candidate(bacbbaaccb, 4) == 2\n    assert candidate(baccbbccab, 4) == 3\n    assert candidate(bbababccabca, 2) == 2\n    assert candidate(bbacbccbca, 4) == 2\n    assert candidate(bbacccbbaabbb, 1) == 4\n    assert candidate(bbccbbbcaab, 3) == 2\n    assert candidate(bbccbcccaba, 3) == 0\n    assert candidate(bcaacaabaa, 4) == 2\n    assert candidate(bcbcbabaabaa, 2) == 1\n    assert candidate(bofqvqapnjo, 3) == 3\n    assert candidate(bvatyzbdffqdp, 1) == 6\n    assert candidate(cabbcbcbcbcca, 1) == 3\n    assert candidate(cbacbbcbccccc, 1) == 3\n    assert candidate(ccaccaacbcaac, 1) == 3\n    assert candidate(ccbabcbabb, 4) == 1\n    assert candidate(ccbacacbcbac, 2) == 2\n    assert candidate(edulrtnsbb, 4) == 3\n    assert candidate(feecuhvurk, 4) == 4\n    assert candidate(ffqbqdocclh, 3) == 2\n    assert candidate(gceeouniipz, 3) == 4\n    assert candidate(gdlitshyeehtx, 1) == 6\n    assert candidate(hpbijyuygkk, 3) == 3\n    assert candidate(kxvwhuewyftpp, 1) == 6\n    assert candidate(mrqvwotsqjtfv, 1) == 6\n    assert candidate(qhzievvxauf, 3) == 4\n    assert candidate(rbiuxrgidyzuu, 1) == 6\n    assert candidate(rkyidomzyud, 3) == 4\n    assert candidate(wvewmaevkzjp, 2) == 3\n\ndef test_check():\n    check(minimumChanges)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2882_numberOfWays", "language": "py", "prompt": "def numberOfWays(n: int, x: int) -> int:\n    \"\"\"Given two positive integers n and x.\nReturn the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.\nSince the result can be very large, return it modulo 109 + 7.\nFor example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.\nExample 1:\nInput: n = 10, x = 2\nOutput: 1\nExplanation: We can express n as the following: n = 32 + 12 = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.\nExample 2:\nInput: n = 4, x = 1\nOutput: 2\nExplanation: We can express n in the following ways:\n- n = 41 = 4.\n- n = 31 + 11 = 4.\nConstraints:\n * 1 <= n <= 300\n * 1 <= x <= 5\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2882_numberOfWays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(10, 2) == 1\n    assert candidate(4, 1) == 2\n    assert candidate(1, 1) == 1\n    assert candidate(1, 2) == 1\n    assert candidate(1, 3) == 1\n    assert candidate(1, 4) == 1\n    assert candidate(1, 5) == 1\n    assert candidate(2, 1) == 1\n    assert candidate(2, 2) == 0\n    assert candidate(2, 3) == 0\n    assert candidate(2, 4) == 0\n    assert candidate(2, 5) == 0\n    assert candidate(3, 1) == 2\n    assert candidate(3, 2) == 0\n    assert candidate(3, 3) == 0\n    assert candidate(3, 4) == 0\n    assert candidate(3, 5) == 0\n    assert candidate(4, 2) == 1\n    assert candidate(4, 3) == 0\n    assert candidate(4, 4) == 0\n    assert candidate(4, 5) == 0\n    assert candidate(5, 1) == 3\n    assert candidate(5, 2) == 1\n    assert candidate(5, 3) == 0\n    assert candidate(5, 4) == 0\n    assert candidate(5, 5) == 0\n    assert candidate(6, 1) == 4\n    assert candidate(6, 2) == 0\n    assert candidate(6, 3) == 0\n    assert candidate(6, 4) == 0\n    assert candidate(6, 5) == 0\n    assert candidate(7, 1) == 5\n    assert candidate(7, 2) == 0\n    assert candidate(7, 3) == 0\n    assert candidate(7, 4) == 0\n    assert candidate(7, 5) == 0\n    assert candidate(8, 1) == 6\n    assert candidate(8, 2) == 0\n    assert candidate(8, 3) == 1\n    assert candidate(8, 4) == 0\n    assert candidate(8, 5) == 0\n    assert candidate(9, 1) == 8\n    assert candidate(9, 2) == 1\n    assert candidate(9, 3) == 1\n    assert candidate(9, 4) == 0\n    assert candidate(9, 5) == 0\n    assert candidate(10, 1) == 10\n    assert candidate(10, 3) == 0\n    assert candidate(10, 4) == 0\n    assert candidate(10, 5) == 0\n    assert candidate(11, 1) == 12\n    assert candidate(11, 2) == 0\n    assert candidate(11, 3) == 0\n    assert candidate(11, 4) == 0\n    assert candidate(11, 5) == 0\n    assert candidate(12, 1) == 15\n    assert candidate(12, 2) == 0\n    assert candidate(12, 3) == 0\n    assert candidate(12, 4) == 0\n    assert candidate(12, 5) == 0\n    assert candidate(13, 1) == 18\n    assert candidate(13, 2) == 1\n    assert candidate(13, 3) == 0\n    assert candidate(13, 4) == 0\n    assert candidate(13, 5) == 0\n    assert candidate(14, 1) == 22\n    assert candidate(14, 2) == 1\n    assert candidate(14, 3) == 0\n    assert candidate(14, 4) == 0\n    assert candidate(14, 5) == 0\n    assert candidate(15, 1) == 27\n    assert candidate(15, 2) == 0\n    assert candidate(15, 3) == 0\n    assert candidate(15, 4) == 0\n    assert candidate(15, 5) == 0\n    assert candidate(16, 1) == 32\n    assert candidate(16, 2) == 1\n    assert candidate(16, 3) == 0\n    assert candidate(16, 4) == 1\n    assert candidate(16, 5) == 0\n    assert candidate(17, 1) == 38\n    assert candidate(17, 2) == 1\n    assert candidate(17, 3) == 0\n    assert candidate(17, 4) == 1\n    assert candidate(17, 5) == 0\n    assert candidate(18, 1) == 46\n    assert candidate(18, 2) == 0\n    assert candidate(18, 3) == 0\n    assert candidate(18, 4) == 0\n    assert candidate(18, 5) == 0\n    assert candidate(19, 1) == 54\n    assert candidate(19, 2) == 0\n    assert candidate(19, 3) == 0\n    assert candidate(19, 4) == 0\n    assert candidate(19, 5) == 0\n    assert candidate(20, 1) == 64\n    assert candidate(20, 2) == 1\n    assert candidate(20, 3) == 0\n    assert candidate(20, 4) == 0\n    assert candidate(20, 5) == 0\n\ndef test_check():\n    check(numberOfWays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2883_minimumBeautifulSubstrings", "language": "py", "prompt": "def minimumBeautifulSubstrings(s: str) -> int:\n    \"\"\"Given a binary string s, partition the string into one or more substrings such that each substring is beautiful.\nA string is beautiful if:\n * It doesn't contain leading zeros.\n * It's the binary representation of a number that is a power of 5.\nReturn the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings,\u00a0return -1.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nInput: s = \"1011\"\nOutput: 2\nExplanation: We can paritition the given string into [\"101\", \"1\"].\n- The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5.\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.\nExample 2:\nInput: s = \"111\"\nOutput: 3\nExplanation: We can paritition the given string into [\"1\", \"1\", \"1\"].\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.\nExample 3:\nInput: s = \"0\"\nOutput: -1\nExplanation: We can not partition the given string into beautiful substrings.\nConstraints:\n * 1 <= s.length <= 15\n * s[i] is either '0' or '1'.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2883_minimumBeautifulSubstrings.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(1011) == 2\n    assert candidate(111) == 3\n    assert candidate(0) == -1\n    assert candidate(100111000110111) == 4\n    assert candidate(100111000111) == 3\n    assert candidate(1001110001111) == 4\n    assert candidate(100111000111101) == 4\n    assert candidate(10110011100011) == 3\n    assert candidate(101101) == 2\n    assert candidate(101101101) == 3\n    assert candidate(101101101101101) == 5\n    assert candidate(1011011011101) == 5\n    assert candidate(10110110111011) == 6\n    assert candidate(101101101111001) == 5\n    assert candidate(1011011011111) == 7\n    assert candidate(101101110011101) == 5\n    assert candidate(10110111001111) == 6\n    assert candidate(1011011101101) == 5\n    assert candidate(101101110110111) == 7\n    assert candidate(101101110111011) == 7\n    assert candidate(1011011101111) == 7\n    assert candidate(101101110111101) == 7\n    assert candidate(10110111011111) == 8\n    assert candidate(101101111001101) == 5\n    assert candidate(10110111101) == 5\n    assert candidate(10110111101101) == 6\n    assert candidate(101101111011011) == 7\n    assert candidate(101101111011101) == 7\n    assert candidate(10110111101111) == 8\n    assert candidate(101101111011111) == 9\n    assert candidate(1011011111) == 6\n    assert candidate(1011011111001) == 5\n    assert candidate(101101111101) == 6\n    assert candidate(1011011111011) == 7\n    assert candidate(10110111110111) == 8\n    assert candidate(10110111111001) == 6\n    assert candidate(101101111110011) == 7\n    assert candidate(10110111111011) == 4\n    assert candidate(101101111110111) == 5\n    assert candidate(101101111111) == 8\n    assert candidate(101101111111101) == 5\n    assert candidate(101110011011) == 4\n    assert candidate(10111001101101) == 4\n    assert candidate(101110011011111) == 7\n    assert candidate(1011100111) == 4\n    assert candidate(10111001110001) == 3\n    assert candidate(10111001110011) == 4\n    assert candidate(1011100111011) == 5\n    assert candidate(10111001110111) == 6\n    assert candidate(10111001111) == 5\n    assert candidate(10111001111001) == 4\n    assert candidate(1011100111101) == 5\n    assert candidate(101110011110111) == 7\n    assert candidate(101110011111001) == 5\n    assert candidate(10111001111101) == 6\n    assert candidate(101110011111011) == 7\n    assert candidate(1011100111111) == 7\n    assert candidate(10111001111111) == 8\n    assert candidate(1011101101) == 4\n    assert candidate(10111011011011) == 6\n    assert candidate(101110110111) == 6\n    assert candidate(101110110111011) == 7\n    assert candidate(1011101101111) == 7\n    assert candidate(101110111001101) == 5\n    assert candidate(101110111001111) == 7\n    assert candidate(10111011101) == 5\n    assert candidate(10111011101111) == 8\n    assert candidate(101110111011111) == 9\n    assert candidate(1011101111) == 6\n    assert candidate(1011101111001) == 5\n    assert candidate(10111011110011) == 6\n    assert candidate(101110111101) == 6\n    assert candidate(1011101111011) == 7\n    assert candidate(10111011111) == 7\n    assert candidate(10111011111001) == 6\n    assert candidate(10111011111011) == 8\n    assert candidate(101110111110111) == 9\n    assert candidate(101110111111001) == 7\n    assert candidate(101110111111011) == 5\n    assert candidate(101110111111101) == 5\n    assert candidate(10111011111111) == 10\n    assert candidate(101110111111111) == 11\n    assert candidate(101111) == 4\n    assert candidate(101111001) == 3\n    assert candidate(1011110011) == 4\n    assert candidate(10111100110111) == 6\n    assert candidate(101111001110001) == 4\n    assert candidate(101111001111101) == 7\n    assert candidate(10111100111111) == 8\n    assert candidate(101111011) == 5\n    assert candidate(10111101101) == 5\n    assert candidate(101111011011) == 6\n    assert candidate(10111101101101) == 6\n    assert candidate(1011110110111) == 7\n    assert candidate(1011110111101) == 7\n    assert candidate(101111011110111) == 9\n    assert candidate(101111011111) == 8\n    assert candidate(1011110111111) == 9\n    assert candidate(101111011111101) == 5\n    assert candidate(10111101111111) == 10\n\ndef test_check():\n    check(minimumBeautifulSubstrings)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2884_longestValidSubstring", "language": "py", "prompt": "from typing import List\n\ndef longestValidSubstring(word: str, forbidden: List[str]) -> int:\n    \"\"\"You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\nExample 1:\nInput: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring.\nExample 2:\nInput: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring.\nConstraints:\n * 1 <= word.length <= 105\n * word consists only of lowercase English letters.\n * 1 <= forbidden.length <= 105\n * 1 <= forbidden[i].length <= 10\n * forbidden[i] consists only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2884_longestValidSubstring.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(cbaaaabc, ['aaa', 'cb']) == 4\n    assert candidate(leetcode, ['de', 'le', 'e']) == 4\n    assert candidate(a, ['n']) == 1\n    assert candidate(a, ['s']) == 1\n    assert candidate(a, ['a']) == 0\n    assert candidate(b, ['g']) == 1\n    assert candidate(b, ['t']) == 1\n    assert candidate(b, ['b']) == 0\n    assert candidate(c, ['k']) == 1\n    assert candidate(c, ['s']) == 1\n    assert candidate(c, ['c']) == 0\n    assert candidate(d, ['h']) == 1\n    assert candidate(d, ['n']) == 1\n    assert candidate(d, ['d']) == 0\n    assert candidate(e, ['s']) == 1\n    assert candidate(e, ['e']) == 0\n    assert candidate(f, ['b']) == 1\n    assert candidate(f, ['s']) == 1\n    assert candidate(f, ['f']) == 0\n    assert candidate(g, ['r']) == 1\n    assert candidate(g, ['y']) == 1\n    assert candidate(g, ['g']) == 0\n    assert candidate(h, ['v']) == 1\n    assert candidate(h, ['b']) == 1\n    assert candidate(h, ['h']) == 0\n    assert candidate(i, ['k']) == 1\n    assert candidate(i, ['y']) == 1\n    assert candidate(i, ['i']) == 0\n    assert candidate(j, ['v']) == 1\n    assert candidate(j, ['u']) == 1\n    assert candidate(j, ['j']) == 0\n    assert candidate(k, ['z']) == 1\n    assert candidate(k, ['o']) == 1\n    assert candidate(k, ['k']) == 0\n    assert candidate(l, ['i']) == 1\n    assert candidate(l, ['r']) == 1\n    assert candidate(l, ['l']) == 0\n    assert candidate(m, ['s']) == 1\n    assert candidate(m, ['g']) == 1\n    assert candidate(m, ['m']) == 0\n    assert candidate(n, ['e']) == 1\n    assert candidate(n, ['i']) == 1\n    assert candidate(n, ['n']) == 0\n    assert candidate(o, ['j']) == 1\n    assert candidate(o, ['f']) == 1\n    assert candidate(o, ['o']) == 0\n    assert candidate(p, ['z']) == 1\n    assert candidate(p, ['i']) == 1\n    assert candidate(p, ['p']) == 0\n    assert candidate(q, ['j']) == 1\n    assert candidate(q, ['z']) == 1\n    assert candidate(q, ['q']) == 0\n    assert candidate(r, ['v']) == 1\n    assert candidate(r, ['p']) == 1\n    assert candidate(r, ['r']) == 0\n    assert candidate(s, ['m']) == 1\n    assert candidate(s, ['x']) == 1\n    assert candidate(s, ['s']) == 0\n    assert candidate(t, ['v']) == 1\n    assert candidate(t, ['m']) == 1\n    assert candidate(t, ['t']) == 0\n    assert candidate(u, ['l']) == 1\n    assert candidate(u, ['n']) == 1\n    assert candidate(u, ['u']) == 0\n    assert candidate(v, ['o']) == 1\n    assert candidate(v, ['v']) == 0\n    assert candidate(w, ['w']) == 0\n    assert candidate(w, ['s']) == 1\n    assert candidate(x, ['r']) == 1\n    assert candidate(x, ['q']) == 1\n    assert candidate(x, ['x']) == 0\n    assert candidate(y, ['w']) == 1\n    assert candidate(y, ['t']) == 1\n    assert candidate(y, ['y']) == 0\n    assert candidate(z, ['l']) == 1\n    assert candidate(z, ['o']) == 1\n    assert candidate(z, ['z']) == 0\n    assert candidate(acbc, ['cbc', 'acb', 'acb', 'acbc']) == 2\n    assert candidate(cabba, ['aaba', 'abba', 'acabb', 'cabb']) == 3\n    assert candidate(bbc, ['baba', 'babc', 'bbc', 'bbc']) == 2\n    assert candidate(acb, ['acb', 'caccc', 'baaab', 'baa']) == 2\n    assert candidate(aaac, ['aaac', 'aac', 'aaa', 'aaac']) == 2\n    assert candidate(ca, ['ababa', 'ca', 'caac', 'babb']) == 1\n    assert candidate(babbb, ['bbb', 'aacb', 'babbb', 'bcab']) == 4\n    assert candidate(cbbba, ['bca', 'cbbba', 'acbcc', 'aabb']) == 4\n    assert candidate(abab, ['aab', 'abab', 'cacb', 'bab']) == 3\n    assert candidate(cbab, ['bbcc', 'aaccc', 'cbab', 'babca']) == 3\n    assert candidate(caaa, ['aaa', 'cbb', 'aaa', 'caaa']) == 3\n    assert candidate(baa, ['aaab', 'bbaa', 'babac', 'baa']) == 2\n    assert candidate(cbcc, ['cbcc', 'baa', 'bbba', 'cac']) == 3\n    assert candidate(cac, ['cccaa', 'baaca', 'cac', 'cac']) == 2\n    assert candidate(cabab, ['cabab', 'abab', 'cabab', 'abab']) == 4\n    assert candidate(caa, ['caa', 'bba', 'acc', 'bcabb']) == 2\n    assert candidate(ba, ['ba', 'ba', 'cab', 'cbcac']) == 1\n    assert candidate(bbc, ['baca', 'bbc', 'bbc', 'caa']) == 2\n    assert candidate(bbb, ['cbaab', 'bbb', 'bbb', 'bab']) == 2\n    assert candidate(bbccc, ['ccc', 'bcba', 'bcc', 'bcc']) == 3\n    assert candidate(bcac, ['bcac', 'caca', 'bcac', 'bca']) == 3\n    assert candidate(ab, ['aca', 'cabcc', 'caba', 'ab']) == 1\n    assert candidate(caa, ['bab', 'babbb', 'abbaa', 'caa']) == 2\n\ndef test_check():\n    check(longestValidSubstring)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2886_finalString", "language": "py", "prompt": "def finalString(s: str) -> str:\n    \"\"\"Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected.\nYou are given a 0-indexed string s, and you type each character of s using your faulty keyboard.\nReturn the final string that will be present on your laptop screen.\nExample 1:\nInput: s = \"string\"\nOutput: \"rtsng\"\nExplanation:\nAfter typing first character, the text on the screen is \"s\".\nAfter the second character, the text is \"st\".\nAfter the third character, the text is \"str\".\nSince the fourth character is an 'i', the text gets reversed and becomes \"rts\".\nAfter the fifth character, the text is \"rtsn\".\nAfter the sixth character, the text is \"rtsng\".\nTherefore, we return \"rtsng\".\nExample 2:\nInput: s = \"poiinter\"\nOutput: \"ponter\"\nExplanation:\nAfter the first character, the text on the screen is \"p\".\nAfter the second character, the text is \"po\".\nSince the third character you type is an 'i', the text gets reversed and becomes \"op\".\nSince the fourth character you type is an 'i', the text gets reversed and becomes \"po\".\nAfter the fifth character, the text is \"pon\".\nAfter the sixth character, the text is \"pont\".\nAfter the seventh character, the text is \"ponte\".\nAfter the eighth character, the text is \"ponter\".\nTherefore, we return \"ponter\".\nConstraints:\n * 1 <= s.length <= 100\n * s consists of lowercase English letters.\n * s[0] != 'i'\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2886_finalString.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(string) == 'rtsng'\n    assert candidate(poiinter) == 'ponter'\n    assert candidate(goci) == 'cog'\n    assert candidate(ksi) == 'sk'\n    assert candidate(fii) == 'f'\n    assert candidate(qskyviiiii) == 'vyksq'\n    assert candidate(pft) == 'pft'\n    assert candidate(viwif) == 'wvf'\n    assert candidate(wiie) == 'we'\n    assert candidate(kiis) == 'ks'\n    assert candidate(xihbosxitx) == 'xsobhxtx'\n    assert candidate(uwioili) == 'lwuo'\n    assert candidate(aapziai) == 'aaapz'\n    assert candidate(pviist) == 'pvst'\n    assert candidate(miiuiei) == 'emu'\n    assert candidate(diiiiq) == 'dq'\n    assert candidate(eirov) == 'erov'\n    assert candidate(niiiiisiii) == 'sn'\n    assert candidate(siiuii) == 'su'\n    assert candidate(piijciivq) == 'pjcvq'\n    assert candidate(tidtwitik) == 'ttdtwk'\n    assert candidate(z) == 'z'\n    assert candidate(ffyuidnn) == 'uyffdnn'\n    assert candidate(xitiiinix) == 'nxtx'\n    assert candidate(ciiiuifab) == 'ucfab'\n    assert candidate(x) == 'x'\n    assert candidate(v) == 'v'\n    assert candidate(liinii) == 'ln'\n    assert candidate(ziii) == 'z'\n    assert candidate(ei) == 'e'\n    assert candidate(tidiiiii) == 'dt'\n    assert candidate(krjiqjii) == 'jrkqj'\n    assert candidate(mxczii) == 'mxcz'\n    assert candidate(bz) == 'bz'\n    assert candidate(zbwri) == 'rwbz'\n    assert candidate(biiq) == 'bq'\n    assert candidate(mmiiliir) == 'mmlr'\n    assert candidate(plibeici) == 'clpbe'\n    assert candidate(cii) == 'c'\n    assert candidate(wiilg) == 'wlg'\n    assert candidate(cdidi) == 'dcd'\n    assert candidate(fsq) == 'fsq'\n    assert candidate(hkjciaiii) == 'ahkjc'\n    assert candidate(l) == 'l'\n    assert candidate(vilcoizi) == 'zvlco'\n    assert candidate(tgigivipx) == 'vgtgpx'\n    assert candidate(ri) == 'r'\n    assert candidate(kficiiioiy) == 'ofkcy'\n    assert candidate(o) == 'o'\n    assert candidate(piifwiiit) == 'wfpt'\n    assert candidate(sifsiui) == 'usfs'\n    assert candidate(sxiuiiiii) == 'usx'\n    assert candidate(tiiiihiw) == 'htw'\n    assert candidate(ko) == 'ko'\n    assert candidate(gagi) == 'gag'\n    assert candidate(yyigiir) == 'yygr'\n    assert candidate(jimiiaci) == 'camj'\n    assert candidate(xiiiei) == 'ex'\n    assert candidate(hwi) == 'wh'\n    assert candidate(ji) == 'j'\n    assert candidate(heii) == 'he'\n    assert candidate(zitjcq) == 'ztjcq'\n    assert candidate(upmipaw) == 'mpupaw'\n    assert candidate(fiixkgp) == 'fxkgp'\n    assert candidate(ldr) == 'ldr'\n    assert candidate(kiboiithi) == 'htobk'\n    assert candidate(svcii) == 'svc'\n    assert candidate(d) == 'd'\n    assert candidate(edgijwiua) == 'wjedgua'\n    assert candidate(wiidqoiwov) == 'oqdwwov'\n    assert candidate(zimxiiqqi) == 'qqxmz'\n    assert candidate(githpgiini) == 'ngphtg'\n    assert candidate(fy) == 'fy'\n    assert candidate(hesi) == 'seh'\n    assert candidate(eiiii) == 'e'\n    assert candidate(be) == 'be'\n    assert candidate(rpi) == 'pr'\n    assert candidate(mi) == 'm'\n    assert candidate(wiiiiii) == 'w'\n    assert candidate(rbiiiii) == 'br'\n    assert candidate(diiii) == 'd'\n    assert candidate(poiiifl) == 'opfl'\n    assert candidate(loifiicii) == 'olfc'\n    assert candidate(bii) == 'b'\n    assert candidate(nirii) == 'nr'\n    assert candidate(wiigipio) == 'pwgo'\n    assert candidate(gimliibin) == 'blmgn'\n    assert candidate(zi) == 'z'\n    assert candidate(tjn) == 'tjn'\n    assert candidate(ly) == 'ly'\n    assert candidate(sqzviyiimi) == 'mysqzv'\n    assert candidate(jhmaxm) == 'jhmaxm'\n    assert candidate(py) == 'py'\n    assert candidate(yyilwiib) == 'yylwb'\n    assert candidate(ryjiilj) == 'ryjlj'\n    assert candidate(tnokpgfii) == 'tnokpgf'\n    assert candidate(niihiliiv) == 'hnlv'\n    assert candidate(gvhms) == 'gvhms'\n    assert candidate(yg) == 'yg'\n    assert candidate(eiiiuizgi) == 'gzeu'\n\ndef test_check():\n    check(finalString)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2887_sortVowels", "language": "py", "prompt": "def sortVowels(s: str) -> str:\n    \"\"\"    Given a 0-indexed string s, permute s to get a new string t such that:\n* All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].\n* The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].\n    Return the resulting string.\n    The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n    Example 1:\n    Input: s = \"lEetcOde\"\n    Output: \"lEOtcede\"\n    Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.\n    Example 2:\n    Input: s = \"lYmpH\"\n    Output: \"lYmpH\"\n    Explanation: There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".\n    Constraints:\n* 1 <= s.length <= 105\n* s consists only of letters of the\u00a0English alphabet\u00a0in uppercase and lowercase.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2887_sortVowels.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(lEetcOde) == 'lEOtcede'\n    assert candidate(lYmpH) == 'lYmpH'\n    assert candidate(mDVD) == 'mDVD'\n    assert candidate(xdX) == 'xdX'\n    assert candidate(xdE) == 'xdE'\n    assert candidate(RiQYo) == 'RiQYo'\n    assert candidate(LQRamBOHfq) == 'LQROmBaHfq'\n    assert candidate(UpjPbEnOj) == 'EpjPbOnUj'\n    assert candidate(ziF) == 'ziF'\n    assert candidate(WxkKdjhL) == 'WxkKdjhL'\n    assert candidate(uZcPmqAd) == 'AZcPmqud'\n    assert candidate(UjshJXjkjS) == 'UjshJXjkjS'\n    assert candidate(nElwWTQHJ) == 'nElwWTQHJ'\n    assert candidate(kwcJqvsgM) == 'kwcJqvsgM'\n    assert candidate(z) == 'z'\n    assert candidate(Pz) == 'Pz'\n    assert candidate(T) == 'T'\n    assert candidate(syRWvFi) == 'syRWvFi'\n    assert candidate(G) == 'G'\n    assert candidate(MuQYHVy) == 'MuQYHVy'\n    assert candidate(gsc) == 'gsc'\n    assert candidate(nynBd) == 'nynBd'\n    assert candidate(qUSUCJeJZt) == 'qUSUCJeJZt'\n    assert candidate(PoEvPD) == 'PEovPD'\n    assert candidate(SrSuArHDvA) == 'SrSAArHDvu'\n    assert candidate(zI) == 'zI'\n    assert candidate(zpVZt) == 'zpVZt'\n    assert candidate(dZVLG) == 'dZVLG'\n    assert candidate(EHhQZGJBbp) == 'EHhQZGJBbp'\n    assert candidate(aPLCji) == 'aPLCji'\n    assert candidate(HSe) == 'HSe'\n    assert candidate(HvDMPPU) == 'HvDMPPU'\n    assert candidate(LYACGrvJLZ) == 'LYACGrvJLZ'\n    assert candidate(RepLvwHFI) == 'RIpLvwHFe'\n    assert candidate(vjbObvLfs) == 'vjbObvLfs'\n    assert candidate(sKQwLo) == 'sKQwLo'\n    assert candidate(PoqU) == 'PUqo'\n    assert candidate(QgUxRvJTfH) == 'QgUxRvJTfH'\n    assert candidate(wUMnwnblpu) == 'wUMnwnblpu'\n    assert candidate(JpqXrPuMd) == 'JpqXrPuMd'\n    assert candidate(wdtDPSQdKl) == 'wdtDPSQdKl'\n    assert candidate(Dl) == 'Dl'\n    assert candidate(v) == 'v'\n    assert candidate(axRukCyOHm) == 'OxRakCyuHm'\n    assert candidate(sQyytiAh) == 'sQyytAih'\n    assert candidate(ieTwHeOR) == 'OeTwHeiR'\n    assert candidate(LLxyZ) == 'LLxyZ'\n    assert candidate(s) == 's'\n    assert candidate(oefu) == 'eofu'\n    assert candidate(XV) == 'XV'\n    assert candidate(VkfjDpSH) == 'VkfjDpSH'\n    assert candidate(rg) == 'rg'\n    assert candidate(ecV) == 'ecV'\n    assert candidate(RUnxytMua) == 'RUnxytMau'\n    assert candidate(gUyMeyzOZo) == 'gOyMUyzeZo'\n    assert candidate(WEir) == 'WEir'\n    assert candidate(zZWs) == 'zZWs'\n    assert candidate(WULsDqIhp) == 'WILsDqUhp'\n    assert candidate(pw) == 'pw'\n    assert candidate(nOWxdSzo) == 'nOWxdSzo'\n    assert candidate(NfK) == 'NfK'\n    assert candidate(wXRFu) == 'wXRFu'\n    assert candidate(XXtjDoinAD) == 'XXtjDAinoD'\n    assert candidate(SGUzEv) == 'SGEzUv'\n    assert candidate(RFOvEt) == 'RFEvOt'\n    assert candidate(umQePdr) == 'emQuPdr'\n    assert candidate(wRqZ) == 'wRqZ'\n    assert candidate(blu) == 'blu'\n    assert candidate(QeOQEatFaW) == 'QEOQaatFeW'\n    assert candidate(jzWiXrYa) == 'jzWaXrYi'\n    assert candidate(xs) == 'xs'\n    assert candidate(DwROc) == 'DwROc'\n    assert candidate(XMhLlJd) == 'XMhLlJd'\n    assert candidate(uAmir) == 'Aimur'\n    assert candidate(PTlFpeAI) == 'PTlFpAIe'\n    assert candidate(XLYy) == 'XLYy'\n    assert candidate(vA) == 'vA'\n    assert candidate(y) == 'y'\n    assert candidate(C) == 'C'\n    assert candidate(wrnMlek) == 'wrnMlek'\n    assert candidate(JWbfCfGgf) == 'JWbfCfGgf'\n    assert candidate(OPGlnq) == 'OPGlnq'\n    assert candidate(DeOMW) == 'DOeMW'\n    assert candidate(xG) == 'xG'\n    assert candidate(ZcaBhfkWC) == 'ZcaBhfkWC'\n    assert candidate(pKa) == 'pKa'\n    assert candidate(DXSEKrfJCe) == 'DXSEKrfJCe'\n    assert candidate(xA) == 'xA'\n    assert candidate(Jb) == 'Jb'\n    assert candidate(SBQT) == 'SBQT'\n    assert candidate(LWRfYb) == 'LWRfYb'\n    assert candidate(tvLWAeGDFK) == 'tvLWAeGDFK'\n    assert candidate(jFkj) == 'jFkj'\n    assert candidate(zC) == 'zC'\n    assert candidate(ikYSsAveh) == 'AkYSsevih'\n    assert candidate(YXkS) == 'YXkS'\n    assert candidate(SOEo) == 'SEOo'\n    assert candidate(qoJx) == 'qoJx'\n    assert candidate(qGJbgTQ) == 'qGJbgTQ'\n    assert candidate(yiYYO) == 'yOYYi'\n\ndef test_check():\n    check(sortVowels)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2888_minimumIndex", "language": "py", "prompt": "from typing import List\n\ndef minimumIndex(nums: List[int]) -> int:\n    \"\"\"An element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element.\nYou are given a 0-indexed integer array nums of length n with one dominant element.\nYou can split nums at an index i into two arrays nums[0, ..., i] and nums[i + 1, ..., n - 1], but the split is only valid if:\n * 0 <= i < n - 1\n * nums[0, ..., i], and nums[i + 1, ..., n - 1] have the same dominant element.\nHere, nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i, ..., j] denotes an empty subarray.\nReturn the minimum index of a valid split. If no valid split exists, return -1.\nExample 1:\nInput: nums = [1,2,2,2]\nOutput: 2\nExplanation: We can split the array at index 2 to obtain arrays [1,2,2] and [2].\nIn array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3.\nIn array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1.\nBoth [1,2,2] and [2] have the same dominant element as nums, so this is a valid split.\nIt can be shown that index 2 is the minimum index of a valid split.\nExample 2:\nInput: nums = [2,1,3,1,1,1,7,1,2,1]\nOutput: 4\nExplanation: We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].\nIn array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nIn array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nBoth [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.\nIt can be shown that index 4 is the minimum index of a valid split.\nExample 3:\nInput: nums = [3,3,3,3,7,2,2]\nOutput: -1\nExplanation: It can be shown that there is no valid split.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 109\n * nums has exactly one dominant element.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2888_minimumIndex.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 2, 2]) == 2\n    assert candidate([2, 1, 3, 1, 1, 1, 7, 1, 2, 1]) == 4\n    assert candidate([3, 3, 3, 3, 7, 2, 2]) == -1\n    assert candidate([1]) == -1\n    assert candidate([1, 1]) == 0\n    assert candidate([1, 1, 1]) == 0\n    assert candidate([1, 1, 1, 1]) == 0\n    assert candidate([1, 1, 1, 2]) == 0\n    assert candidate([1, 1, 1, 3]) == 0\n    assert candidate([1, 1, 1, 4]) == 0\n    assert candidate([1, 1, 2]) == -1\n    assert candidate([1, 1, 2, 1]) == 0\n    assert candidate([1, 1, 3]) == -1\n    assert candidate([1, 1, 3, 1]) == 0\n    assert candidate([1, 1, 4]) == -1\n    assert candidate([1, 1, 4, 1]) == 0\n    assert candidate([1, 2, 1]) == -1\n    assert candidate([1, 2, 1, 1]) == 0\n    assert candidate([1, 2, 2]) == -1\n    assert candidate([1, 3, 1]) == -1\n    assert candidate([1, 3, 1, 1]) == 0\n    assert candidate([1, 3, 3]) == -1\n    assert candidate([1, 3, 3, 3]) == 2\n    assert candidate([1, 4, 1]) == -1\n    assert candidate([1, 4, 1, 1]) == 0\n    assert candidate([1, 4, 4]) == -1\n    assert candidate([1, 4, 4, 4]) == 2\n    assert candidate([2]) == -1\n    assert candidate([2, 1, 1]) == -1\n    assert candidate([2, 1, 1, 1]) == 2\n    assert candidate([2, 1, 2]) == -1\n    assert candidate([2, 1, 2, 2]) == 0\n    assert candidate([2, 2]) == 0\n    assert candidate([2, 2, 1]) == -1\n    assert candidate([2, 2, 1, 2]) == 0\n    assert candidate([2, 2, 2]) == 0\n    assert candidate([2, 2, 2, 1]) == 0\n    assert candidate([2, 2, 2, 2]) == 0\n    assert candidate([2, 2, 2, 3]) == 0\n    assert candidate([2, 2, 2, 4]) == 0\n    assert candidate([2, 2, 3]) == -1\n    assert candidate([2, 2, 3, 2]) == 0\n    assert candidate([2, 2, 4]) == -1\n    assert candidate([2, 2, 4, 2]) == 0\n    assert candidate([2, 3, 2]) == -1\n    assert candidate([2, 3, 2, 2]) == 0\n    assert candidate([2, 3, 3]) == -1\n    assert candidate([2, 3, 3, 3]) == 2\n    assert candidate([2, 4, 2]) == -1\n    assert candidate([2, 4, 2, 2]) == 0\n    assert candidate([2, 4, 4]) == -1\n    assert candidate([2, 4, 4, 4]) == 2\n    assert candidate([3]) == -1\n    assert candidate([3, 1, 1]) == -1\n    assert candidate([3, 1, 1, 1]) == 2\n    assert candidate([3, 1, 3]) == -1\n    assert candidate([3, 1, 3, 3]) == 0\n    assert candidate([3, 2, 2]) == -1\n    assert candidate([3, 2, 2, 2]) == 2\n    assert candidate([3, 2, 3]) == -1\n    assert candidate([3, 2, 3, 3]) == 0\n    assert candidate([3, 3]) == 0\n    assert candidate([3, 3, 1]) == -1\n    assert candidate([3, 3, 1, 3]) == 0\n    assert candidate([3, 3, 2]) == -1\n    assert candidate([3, 3, 2, 3]) == 0\n    assert candidate([3, 3, 3]) == 0\n    assert candidate([3, 3, 3, 1]) == 0\n    assert candidate([3, 3, 3, 2]) == 0\n    assert candidate([3, 3, 3, 3]) == 0\n    assert candidate([3, 3, 3, 4]) == 0\n    assert candidate([3, 3, 4]) == -1\n    assert candidate([3, 3, 4, 3]) == 0\n    assert candidate([3, 4, 3]) == -1\n    assert candidate([3, 4, 3, 3]) == 0\n    assert candidate([3, 4, 4]) == -1\n    assert candidate([3, 4, 4, 4]) == 2\n    assert candidate([4]) == -1\n    assert candidate([4, 1, 1]) == -1\n    assert candidate([4, 1, 1, 1]) == 2\n    assert candidate([4, 1, 4]) == -1\n    assert candidate([4, 1, 4, 4]) == 0\n    assert candidate([4, 2, 2]) == -1\n    assert candidate([4, 2, 2, 2]) == 2\n    assert candidate([4, 2, 4]) == -1\n    assert candidate([4, 2, 4, 4]) == 0\n    assert candidate([4, 3, 3]) == -1\n    assert candidate([4, 3, 3, 3]) == 2\n    assert candidate([4, 3, 4]) == -1\n    assert candidate([4, 3, 4, 4]) == 0\n    assert candidate([4, 4]) == 0\n    assert candidate([4, 4, 1]) == -1\n    assert candidate([4, 4, 1, 4]) == 0\n    assert candidate([4, 4, 2]) == -1\n    assert candidate([4, 4, 2, 4]) == 0\n    assert candidate([4, 4, 3]) == -1\n    assert candidate([4, 4, 3, 4]) == 0\n    assert candidate([4, 4, 4]) == 0\n    assert candidate([4, 4, 4, 1]) == 0\n    assert candidate([4, 4, 4, 2]) == 0\n\ndef test_check():\n    check(minimumIndex)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2889_countBlackBlocks", "language": "py", "prompt": "from typing import List\n\ndef countBlackBlocks(m: int, n: int, coordinates: List[List[int]]) -> List[int]:\n    \"\"\"You are given two integers m and n representing the dimensions of a\u00a00-indexed\u00a0m x n grid.\nYou are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white.\nA block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1].\nReturn a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.\nExample 1:\nInput: m = 3, n = 3, coordinates = [[0,0]]\nOutput: [3,1,0,0,0]\nExplanation: The grid looks like this:\n[https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png]\nThere is only 1 block with one black cell, and it is the block starting with cell [0,0].\nThe other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells.\nThus, we return [3,1,0,0,0].\nExample 2:\nInput: m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]\nOutput: [0,2,2,0,0]\nExplanation: The grid looks like this:\n[https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png]\nThere are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\nThe other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\nTherefore, we return [0,2,2,0,0].\nConstraints:\n * 2 <= m <= 105\n * 2 <= n <= 105\n * 0 <= coordinates.length <= 104\n * coordinates[i].length == 2\n * 0 <= coordinates[i][0] < m\n * 0 <= coordinates[i][1] < n\n * It is guaranteed that coordinates contains pairwise distinct coordinates.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2889_countBlackBlocks.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, 3, [[0, 0]]) == [3, 1, 0, 0, 0]\n    assert candidate(3, 3, [[0, 0], [1, 1], [0, 2]]) == [0, 2, 2, 0, 0]\n    assert candidate(32, 32, [[17, 29], [29, 16], [19, 20], [18, 9], [16, 7], [20, 25], [22, 19], [4, 9], [14, 17], [6, 23], [2, 2], [20, 1], [8, 7], [4, 7], [14, 14], [10, 10], [1, 27], [18, 23], [6, 30], [8, 18], [26, 23], [25, 8], [5, 6], [3, 4]]) == [866, 94, 1, 0, 0]\n    assert candidate(22, 73, [[11, 14], [16, 11], [20, 5], [5, 33], [14, 7], [16, 60], [0, 15], [15, 72], [6, 60], [9, 16], [14, 51], [1, 52], [18, 24], [17, 30], [3, 4], [19, 13], [9, 10], [11, 40], [15, 7], [13, 62], [8, 41], [12, 71], [4, 72], [18, 7], [1, 0], [4, 35], [16, 33], [7, 30], [13, 52], [5, 1], [15, 21], [3, 59], [2, 41], [4, 28]]) == [1387, 122, 3, 0, 0]\n    assert candidate(22, 79, [[11, 43], [17, 56], [11, 58], [19, 68], [5, 10], [18, 35], [18, 27], [10, 53], [1, 72], [4, 64], [4, 72], [3, 76], [18, 36], [14, 47], [12, 57], [10, 11], [13, 5], [17, 39], [1, 4], [3, 32], [6, 34], [2, 62], [8, 35], [9, 18], [12, 77], [8, 43], [1, 49], [15, 14], [15, 27], [4, 68], [19, 24], [9, 19], [17, 3], [3, 51], [5, 61]]) == [1503, 130, 5, 0, 0]\n    assert candidate(3, 89, [[0, 46], [1, 29], [0, 50], [1, 61]]) == [164, 12, 0, 0, 0]\n    assert candidate(25, 97, [[23, 65], [11, 33], [6, 76], [9, 65], [18, 13], [16, 59], [0, 86], [17, 14], [23, 61], [8, 78], [19, 40], [18, 57], [1, 66], [15, 1], [13, 44], [17, 6], [14, 90], [1, 22], [5, 34], [0, 53], [1, 65], [20, 32], [22, 54], [3, 11], [20, 53], [7, 70], [0, 30], [23, 17], [18, 2], [14, 93], [1, 28], [19, 82], [6, 61], [13, 64], [6, 73], [0, 52], [17, 93], [20, 63], [16, 24], [14, 6], [20, 28], [4, 57], [19, 76], [21, 50], [5, 44], [5, 29], [11, 36], [14, 87], [2, 10], [4, 78], [12, 35], [11, 27], [20, 7], [11, 20], [9, 51], [22, 37], [11, 30], [2, 77], [5, 87], [13, 5], [2, 56], [23, 25], [0, 44], [19, 23], [23, 1], [3, 70], [3, 86], [17, 92], [19, 24], [23, 39], [16, 2], [15, 45], [14, 82], [21, 30], [11, 90], [7, 82], [17, 50], [12, 66], [22, 84], [15, 71], [14, 54]]) == [2002, 290, 12, 0, 0]\n    assert candidate(58, 74, [[38, 21], [1, 34], [29, 15], [46, 33], [56, 7], [55, 63], [7, 32], [53, 38], [30, 73], [17, 68], [32, 26], [13, 39], [10, 22], [42, 38], [29, 9], [7, 53], [17, 2], [56, 13], [34, 26], [31, 30], [16, 21], [13, 56], [16, 72], [21, 8], [47, 28], [2, 24], [32, 23], [13, 4], [37, 29], [1, 11], [45, 70], [49, 40], [11, 61], [20, 49], [11, 4], [17, 61], [11, 68], [14, 64], [31, 10], [1, 14], [10, 47], [21, 48], [46, 51], [25, 59], [45, 12], [47, 43], [32, 39], [11, 28], [55, 46], [50, 7]]) == [3964, 196, 1, 0, 0]\n    assert candidate(40, 82, [[11, 63], [20, 43], [16, 53], [33, 52], [7, 30], [36, 2], [25, 65], [10, 31], [4, 29], [31, 17], [14, 52], [36, 32], [35, 68], [26, 8], [20, 68], [21, 45], [7, 46], [32, 15], [33, 13], [30, 4], [32, 9], [32, 78], [32, 66], [27, 58], [20, 14], [12, 29], [8, 80], [2, 1], [1, 0], [34, 41], [1, 3], [1, 74], [0, 69], [21, 7], [36, 16], [0, 21], [4, 80], [33, 78], [18, 11], [18, 50], [17, 63], [24, 29]]) == [3000, 156, 3, 0, 0]\n    assert candidate(57, 92, [[38, 14], [27, 72]]) == [5088, 8, 0, 0, 0]\n    assert candidate(94, 98, [[39, 62], [40, 20], [47, 78], [75, 10], [52, 82], [11, 77], [52, 21], [22, 12], [75, 42], [75, 68], [42, 39], [68, 75], [1, 29], [18, 79], [56, 82], [72, 41], [52, 28], [61, 83], [44, 55], [73, 81], [43, 71], [55, 23], [4, 13], [89, 68], [36, 57], [48, 22], [64, 49], [10, 72], [84, 80], [1, 77], [50, 7], [54, 0], [76, 9], [57, 6], [7, 81], [66, 80]]) == [8880, 140, 1, 0, 0]\n    assert candidate(30, 97, []) == [2784, 0, 0, 0, 0]\n    assert candidate(11, 28, [[7, 24], [8, 22], [1, 5], [6, 21], [0, 22], [0, 15], [4, 16], [2, 11], [0, 11], [1, 3], [3, 26], [1, 20], [5, 27], [9, 8], [7, 25], [0, 19], [3, 21], [2, 13], [6, 7], [5, 13], [0, 1], [4, 18], [4, 1], [2, 24], [7, 17], [3, 15], [9, 18], [1, 25], [3, 18], [4, 27], [4, 20], [4, 7], [9, 12], [7, 1], [3, 12], [5, 26], [5, 23], [2, 4], [3, 5], [6, 18], [4, 10], [8, 8], [2, 7], [7, 15], [5, 0], [4, 9], [8, 1], [8, 0], [1, 17], [3, 9], [2, 10], [1, 13], [0, 10], [8, 14], [1, 21], [1, 10], [7, 8], [4, 6], [7, 23], [0, 20], [8, 13], [3, 24], [1, 15], [5, 24], [4, 11], [9, 14], [4, 12], [7, 2], [2, 25], [2, 9], [6, 14], [0, 25], [7, 4], [4, 2], [6, 1], [4, 8], [6, 17]]) == [83, 107, 63, 17, 0]\n    assert candidate(6, 47, [[1, 1], [1, 23], [1, 5], [0, 22], [1, 12], [0, 24], [4, 24], [2, 8], [1, 11], [0, 31], [1, 39], [0, 43], [2, 18], [1, 17], [1, 3], [3, 10], [0, 26], [2, 38], [1, 0], [3, 37], [3, 2], [1, 26], [4, 34], [3, 24], [0, 23]]) == [159, 58, 11, 2, 0]\n    assert candidate(45, 88, [[13, 14], [6, 48], [4, 20], [18, 57], [2, 48], [0, 70], [42, 71], [20, 70], [29, 11], [34, 24], [24, 28], [38, 45], [31, 73], [41, 85], [18, 69]]) == [3770, 58, 0, 0, 0]\n    assert candidate(7, 36, [[2, 21], [3, 14], [4, 18], [5, 30], [4, 26], [5, 7], [2, 31], [4, 22], [0, 0], [2, 22], [4, 6], [0, 30], [0, 19], [0, 21], [3, 11], [4, 28], [5, 25], [2, 11], [0, 23], [5, 16], [3, 29], [3, 17], [4, 11], [1, 7], [1, 19], [1, 34], [5, 19], [5, 6], [5, 28], [4, 8], [2, 9], [1, 6], [4, 24], [2, 14], [1, 24], [3, 16], [0, 2], [0, 26], [5, 27], [3, 35], [2, 16], [4, 2], [4, 32], [5, 0], [0, 34], [1, 5], [2, 4], [1, 4], [0, 22], [2, 2], [3, 19], [3, 4], [1, 10], [3, 5], [1, 29], [0, 33], [0, 3]]) == [63, 99, 42, 6, 0]\n    assert candidate(59, 60, [[4, 37], [56, 0], [32, 53], [27, 8], [18, 42], [5, 25], [11, 46], [51, 55], [55, 16], [7, 17], [47, 1], [47, 38], [28, 7], [17, 39], [29, 59], [47, 39], [56, 42], [2, 31], [41, 16], [44, 32], [27, 1], [14, 8], [38, 52], [38, 48], [40, 12], [25, 32], [15, 55], [12, 22], [0, 38], [38, 58], [54, 52], [19, 28], [39, 45], [10, 43], [44, 26], [18, 14], [34, 30], [6, 23], [39, 22], [15, 29], [50, 31], [24, 11], [12, 5], [42, 45], [18, 38], [27, 56], [33, 58], [54, 24], [40, 24], [24, 2], [28, 44], [33, 53], [49, 57], [47, 56], [50, 18], [25, 14], [56, 54], [40, 55], [53, 44], [27, 42], [39, 23], [44, 38], [25, 2], [47, 14], [27, 50], [26, 46], [15, 1], [16, 15], [55, 56], [27, 21], [6, 7]]) == [3155, 256, 11, 0, 0]\n    assert candidate(89, 90, [[12, 15], [31, 16], [75, 79], [86, 48], [19, 77], [39, 82], [77, 62], [75, 35], [19, 35]]) == [7796, 36, 0, 0, 0]\n    assert candidate(26, 42, [[7, 13], [1, 3], [11, 32], [5, 8], [11, 4], [9, 24], [0, 0], [18, 20], [13, 35], [19, 31], [15, 35], [1, 41], [18, 40], [18, 41], [14, 11], [20, 0], [11, 6], [14, 16], [0, 11], [4, 36], [9, 12], [20, 36], [14, 33], [6, 34], [0, 12], [22, 6], [22, 34], [13, 6], [12, 1], [4, 23], [6, 18], [11, 38], [19, 17], [22, 27], [21, 6], [3, 35], [9, 11], [23, 6], [22, 29], [8, 5], [6, 26], [3, 18], [0, 2], [3, 41], [24, 6], [24, 1], [7, 9], [8, 35], [0, 6], [6, 23], [13, 40], [10, 38], [10, 20], [21, 7], [20, 11], [10, 11], [19, 3], [14, 9], [1, 5], [3, 30], [9, 9], [17, 34], [18, 16], [3, 26], [18, 19], [17, 16], [2, 17], [5, 22], [5, 41], [16, 32], [9, 7], [1, 36], [6, 30], [6, 38], [9, 20], [4, 28], [12, 8], [7, 26], [5, 30], [2, 27], [3, 32], [11, 7], [7, 41], [8, 4], [10, 34], [19, 19], [13, 32], [23, 25]]) == [739, 246, 37, 3, 0]\n    assert candidate(31, 46, [[5, 31], [13, 5], [6, 32], [3, 24], [5, 41], [22, 22], [18, 38], [29, 11], [25, 28], [10, 43], [29, 5], [10, 28], [21, 2], [27, 1], [4, 42], [18, 2], [22, 26], [22, 4], [2, 26], [21, 4], [5, 32], [0, 43], [24, 32], [2, 30], [18, 44], [18, 43], [7, 36], [15, 13], [11, 29], [6, 17], [10, 7], [15, 8], [4, 11], [9, 7], [28, 1], [0, 15], [21, 19], [6, 0], [24, 19], [1, 0], [15, 30], [1, 18], [4, 24], [1, 9], [24, 16], [22, 28], [4, 35], [14, 15], [27, 23], [13, 1], [2, 8], [4, 20], [19, 30], [15, 11], [0, 34], [27, 21], [10, 1], [10, 33], [11, 26], [13, 40], [11, 45], [25, 4], [28, 28], [4, 7], [7, 29], [3, 45], [20, 17], [25, 38], [27, 41], [23, 35], [19, 10], [2, 7], [0, 25], [4, 18], [23, 37], [6, 38]]) == [1081, 251, 17, 1, 0]\n    assert candidate(11, 21, [[0, 19], [2, 8], [6, 9], [5, 15], [6, 15], [2, 5], [3, 14], [2, 10], [8, 13], [4, 2], [0, 0], [7, 19], [9, 10], [8, 19]]) == [153, 43, 4, 0, 0]\n    assert candidate(76, 95, [[16, 61], [1, 23], [51, 8], [36, 87], [60, 92], [23, 44], [28, 93], [15, 35], [8, 68], [58, 57], [58, 80], [53, 7], [47, 25], [55, 4], [6, 61], [43, 56], [6, 40], [39, 44], [67, 76], [44, 16], [40, 93], [7, 6], [59, 44], [74, 6], [1, 72], [38, 93], [58, 51], [17, 79], [73, 79], [58, 65], [45, 28], [17, 36], [69, 94], [66, 73], [56, 1], [31, 62], [62, 68], [54, 64], [72, 46], [67, 59], [9, 47], [33, 86], [45, 49], [3, 6], [63, 59], [51, 47], [31, 74], [52, 42], [34, 80], [61, 30], [62, 4], [11, 9], [44, 21], [73, 69], [7, 77], [43, 17], [53, 22], [37, 10], [49, 5], [64, 82], [51, 77], [74, 2], [60, 2], [17, 53], [16, 51], [52, 80], [22, 23], [17, 80], [52, 26], [15, 1], [19, 59], [7, 39]]) == [6768, 278, 4, 0, 0]\n    assert candidate(65, 71, [[62, 8], [18, 63], [23, 43], [30, 3], [40, 48], [60, 62], [58, 9], [13, 20], [47, 46], [34, 0], [11, 6], [17, 28], [20, 34], [24, 48], [24, 18], [43, 18], [31, 59], [25, 60], [15, 68], [24, 35], [33, 47], [32, 4], [26, 42], [35, 63], [31, 22], [16, 0], [45, 45], [52, 19], [46, 49], [36, 37], [11, 10], [23, 5], [4, 13], [17, 20], [14, 41], [26, 4], [21, 7], [52, 40], [31, 18], [55, 26], [17, 57], [41, 31], [1, 47], [56, 61], [46, 38], [7, 16], [53, 13], [45, 4], [1, 69], [29, 15], [46, 12], [29, 65], [61, 10], [35, 54], [33, 26], [41, 34], [55, 48], [42, 48], [0, 8], [44, 44], [52, 10], [30, 37], [14, 54], [4, 29], [50, 58], [41, 10], [30, 19], [31, 1], [31, 62], [31, 44], [53, 7], [12, 56], [57, 69], [34, 2], [34, 16], [42, 68], [45, 15], [44, 61], [15, 60], [54, 69], [1, 39], [50, 59], [51, 47], [52, 15], [33, 69], [5, 51], [19, 38], [10, 61], [42, 17], [60, 30]]) == [4131, 344, 5, 0, 0]\n    assert candidate(25, 95, [[8, 74], [20, 10], [18, 56], [23, 20], [7, 16], [7, 5], [23, 52], [19, 31], [11, 93], [0, 68], [4, 3], [21, 52], [17, 61], [7, 65], [11, 20], [1, 61], [20, 63], [9, 71], [11, 63], [11, 61], [0, 74], [17, 60], [16, 12], [3, 54], [23, 66], [23, 37], [14, 0], [19, 64], [18, 82], [4, 87], [14, 82], [23, 3], [11, 86], [3, 64], [9, 32], [14, 8], [1, 24], [21, 20], [21, 38], [22, 27], [21, 82], [10, 58], [19, 5], [22, 57], [18, 44], [10, 83]]) == [2081, 172, 3, 0, 0]\n    assert candidate(40, 84, [[19, 36], [35, 7], [3, 78], [17, 4], [28, 8], [20, 38], [12, 38], [30, 6], [37, 45], [26, 53], [11, 46]]) == [3193, 44, 0, 0, 0]\n    assert candidate(8, 57, [[3, 38], [1, 41], [6, 23], [0, 54], [3, 11], [3, 44], [1, 24], [0, 38], [5, 28]]) == [360, 32, 0, 0, 0]\n    assert candidate(32, 41, [[12, 13], [20, 33], [3, 12], [28, 40], [9, 10], [18, 10], [5, 18], [9, 24], [29, 24], [9, 33], [25, 38], [29, 17], [28, 25], [0, 35], [2, 30], [18, 37], [7, 0], [14, 21], [25, 27], [17, 33], [9, 38], [19, 22], [17, 5], [18, 4], [9, 18], [15, 6], [4, 21], [12, 4], [5, 35], [19, 26], [6, 6], [0, 2], [0, 28], [1, 13], [19, 10], [5, 16], [2, 31], [24, 2], [3, 22], [23, 12], [0, 17], [6, 30], [20, 31], [10, 32], [17, 15], [1, 34], [28, 6], [21, 15], [14, 11], [27, 23], [4, 16], [2, 11], [21, 26], [23, 19], [27, 15], [3, 5], [28, 10], [1, 2], [27, 18], [19, 36], [2, 2], [17, 13], [7, 19], [25, 0], [5, 37], [30, 6], [3, 39], [28, 30], [26, 0], [9, 5], [23, 5], [27, 6], [4, 26], [15, 39], [10, 26]]) == [976, 244, 20, 0, 0]\n    assert candidate(63, 99, [[17, 28], [7, 39], [14, 81], [44, 4], [21, 7], [21, 95], [1, 89], [57, 74], [34, 2], [55, 56], [43, 50], [52, 28], [38, 61], [35, 62], [57, 46], [30, 72], [25, 46], [4, 32], [18, 25], [53, 98]]) == [5998, 78, 0, 0, 0]\n    assert candidate(44, 97, [[17, 3], [29, 4], [40, 71], [32, 45], [3, 59], [22, 34], [11, 17], [17, 43], [4, 32], [8, 8], [19, 43], [12, 19], [32, 57], [9, 15], [7, 46], [4, 39], [11, 26], [17, 87], [21, 70], [12, 58], [35, 88], [12, 72], [23, 61], [23, 43], [3, 86], [31, 30], [17, 26], [14, 22], [16, 77], [41, 73], [39, 91], [41, 74], [15, 78], [31, 36], [11, 45], [9, 57], [25, 68], [42, 28], [5, 60], [38, 72], [26, 14], [33, 48], [39, 50], [38, 33], [41, 21], [39, 86], [29, 64], [4, 69], [37, 25], [28, 85], [9, 32], [9, 76], [13, 25], [26, 43], [10, 79], [2, 2], [23, 85], [39, 29], [34, 47], [13, 17], [34, 59], [27, 84], [29, 93], [17, 89], [23, 27], [9, 16], [39, 64], [3, 37], [41, 75], [32, 26], [27, 11]]) == [3853, 266, 9, 0, 0]\n    assert candidate(45, 53, [[15, 41], [0, 27], [24, 15], [34, 31], [36, 27], [32, 46], [1, 39], [4, 8], [18, 8], [39, 3], [2, 50], [6, 33], [25, 46], [17, 41], [27, 46], [37, 30], [41, 23], [16, 14], [21, 17], [26, 47], [31, 47], [9, 23], [32, 21], [29, 28], [37, 41], [10, 37], [21, 31], [1, 25], [31, 19], [16, 49], [2, 22], [1, 43], [39, 33], [6, 12], [12, 39], [40, 15], [31, 50], [8, 7], [5, 21], [8, 4], [30, 10], [15, 20], [9, 21], [38, 28], [42, 14], [36, 8], [27, 5], [2, 2], [13, 32], [13, 50], [22, 8], [23, 25], [33, 23], [9, 22], [28, 12], [15, 37], [40, 10], [42, 45], [1, 11], [26, 2], [30, 18], [0, 19], [15, 38], [32, 2], [26, 19], [29, 29], [24, 21], [24, 10], [19, 8], [24, 31], [37, 34], [5, 20], [11, 30], [41, 19], [34, 43], [41, 7], [38, 36], [13, 10], [39, 14], [22, 4], [34, 27], [23, 21], [9, 24], [13, 29], [14, 30], [32, 48], [9, 47], [13, 37], [3, 4], [1, 6], [19, 48], [41, 47], [40, 33], [26, 23], [1, 4], [40, 28], [31, 37]]) == [1929, 334, 25, 0, 0]\n    assert candidate(36, 62, [[5, 42], [14, 2], [32, 11], [28, 38], [18, 49], [23, 52], [32, 52], [15, 39], [11, 38], [15, 54], [21, 27], [14, 0], [26, 38], [4, 43], [22, 26], [5, 17]]) == [2075, 58, 2, 0, 0]\n    assert candidate(30, 98, [[10, 13], [23, 8], [9, 69], [20, 70], [17, 12], [12, 39], [7, 72], [14, 0], [5, 45], [21, 24], [10, 88], [2, 8], [22, 86], [2, 28], [20, 62], [6, 82], [27, 10], [7, 28], [12, 79], [21, 38], [24, 92], [0, 47], [8, 8], [26, 3], [20, 57], [12, 36], [21, 47], [19, 12], [20, 35], [28, 26], [4, 61], [5, 90], [0, 48], [14, 50], [3, 63], [17, 93], [12, 5], [12, 94], [7, 25]]) == [2664, 148, 1, 0, 0]\n    assert candidate(20, 41, [[11, 3], [1, 36], [17, 23], [13, 1], [14, 33], [2, 23], [0, 5], [5, 32], [14, 36], [8, 16], [0, 9], [14, 26], [8, 9], [6, 5], [10, 12], [17, 20], [10, 33], [16, 23], [12, 40], [8, 17], [12, 35], [11, 23], [6, 34], [2, 4], [7, 0], [7, 7], [8, 27], [7, 39], [13, 19], [14, 2], [9, 23], [12, 33], [14, 20], [12, 27], [15, 22], [1, 19], [10, 17], [7, 36], [4, 29], [12, 37], [7, 18], [10, 20]]) == [608, 144, 8, 0, 0]\n    assert candidate(60, 73, [[45, 35], [12, 1], [43, 11], [58, 9], [0, 3], [51, 34], [1, 65], [15, 55], [32, 29], [41, 36], [41, 61], [5, 39], [54, 2], [21, 35], [41, 69], [12, 71], [17, 5], [56, 59], [41, 40], [49, 17], [48, 56], [18, 71], [39, 57], [1, 46], [53, 44], [40, 46], [52, 14], [57, 68], [14, 66], [20, 26], [48, 8], [46, 22], [34, 41], [15, 47], [18, 45], [16, 29], [40, 6], [51, 51], [47, 70], [29, 64], [51, 32], [18, 40], [10, 62], [5, 28], [57, 3], [43, 69], [49, 58], [8, 7], [18, 9], [24, 0], [56, 0], [23, 39], [31, 19], [56, 12], [34, 17], [13, 42], [8, 23], [28, 20], [42, 38], [5, 16], [29, 36], [56, 47], [45, 23], [51, 58], [2, 69], [2, 44], [5, 6], [53, 6], [50, 48], [51, 64], [43, 15], [37, 70], [18, 44], [41, 23], [51, 31], [31, 10], [25, 53], [28, 46], [56, 42], [7, 49], [55, 50], [31, 26], [3, 26], [43, 52], [54, 68], [21, 37]]) == [3915, 328, 5, 0, 0]\n    assert candidate(37, 80, [[5, 3], [29, 79], [35, 32], [29, 8], [10, 57]]) == [2826, 18, 0, 0, 0]\n    assert candidate(31, 97, [[29, 40], [29, 6], [11, 73], [10, 81], [12, 92], [23, 62], [16, 86], [26, 0], [9, 95], [17, 17], [22, 60], [27, 15], [15, 70], [7, 18], [1, 27], [18, 51], [14, 38], [2, 42], [26, 43], [0, 52], [1, 69], [23, 50], [26, 68], [24, 53], [23, 31], [7, 78], [18, 23], [14, 96], [25, 49], [23, 74], [11, 35], [5, 14], [24, 35]]) == [2754, 126, 0, 0, 0]\n    assert candidate(17, 43, [[8, 38], [2, 23], [15, 18], [1, 3], [7, 40], [3, 30], [13, 1], [12, 40], [9, 4], [0, 10], [5, 36], [3, 15], [3, 5], [7, 23], [5, 13], [11, 26], [3, 28], [14, 23], [10, 16], [2, 11], [14, 5], [11, 32], [1, 20], [4, 0], [15, 13], [3, 12], [12, 9], [3, 31], [8, 35], [8, 17], [3, 42], [1, 36], [5, 2], [13, 14], [9, 2], [6, 28], [5, 4], [2, 1], [13, 36], [2, 24], [12, 29], [15, 3], [11, 20], [2, 25], [13, 8], [4, 17], [8, 29], [0, 33], [11, 3], [0, 29], [12, 30], [6, 16], [7, 33], [13, 7], [5, 26], [14, 24], [3, 16], [0, 11], [11, 28], [11, 34], [6, 8], [4, 25], [14, 20], [8, 0], [7, 32], [7, 27], [8, 23], [5, 14], [4, 30], [14, 3], [6, 21], [6, 41], [12, 18], [14, 25], [8, 3], [8, 14]]) == [418, 219, 34, 1, 0]\n    assert candidate(12, 73, [[7, 64], [5, 14], [5, 46]]) == [780, 12, 0, 0, 0]\n    assert candidate(36, 91, [[14, 10], [28, 69], [34, 15], [6, 62], [2, 44], [12, 81], [19, 47], [32, 89], [13, 59], [12, 25], [8, 62], [26, 87], [31, 29], [16, 49], [4, 46], [3, 46], [10, 47], [31, 87], [15, 44], [1, 75], [0, 61], [3, 35], [3, 58], [25, 88], [15, 56], [30, 30], [13, 26], [9, 49], [24, 56], [17, 17], [19, 85], [23, 80], [5, 68], [30, 79], [34, 34], [32, 69], [19, 58], [20, 43], [4, 40], [33, 44], [21, 71], [3, 37], [34, 54], [10, 28], [9, 62], [20, 19], [21, 84], [22, 32], [9, 90], [10, 82], [19, 38], [15, 51], [32, 11], [26, 72], [34, 46], [17, 89], [16, 28], [15, 81], [0, 39], [5, 28], [10, 5], [20, 0], [32, 40], [14, 76], [8, 72]]) == [2905, 238, 7, 0, 0]\n    assert candidate(11, 76, [[2, 6], [1, 36], [2, 60], [3, 57], [1, 72], [5, 15], [1, 30], [1, 28], [8, 15], [4, 39], [1, 2], [0, 56], [5, 2], [4, 27], [9, 2], [3, 67], [7, 19], [6, 54], [7, 73], [9, 51], [8, 63], [0, 27], [8, 44], [5, 31], [0, 11]]) == [657, 92, 1, 0, 0]\n    assert candidate(24, 70, [[9, 49], [13, 17], [14, 52], [17, 13], [20, 40], [6, 62], [18, 62], [14, 9], [13, 0], [15, 34], [5, 33], [18, 1], [17, 33], [6, 63], [4, 26], [3, 28], [18, 68], [2, 15], [5, 10], [21, 13], [10, 53], [5, 35], [21, 60], [9, 59], [1, 0], [15, 53], [5, 45], [0, 42], [6, 24], [9, 9], [2, 44], [8, 12], [1, 16], [13, 29], [21, 38], [20, 39], [4, 13], [17, 56], [10, 45], [3, 65], [14, 15], [5, 62], [13, 18], [4, 35], [18, 11], [12, 31], [18, 18], [7, 50], [12, 52], [11, 47], [7, 14], [11, 61], [13, 1], [2, 1], [4, 19], [15, 8], [0, 7], [18, 15], [20, 31], [1, 17], [15, 31], [7, 39], [5, 52], [8, 9], [1, 50], [16, 34], [21, 15], [8, 66], [5, 53], [18, 43], [5, 19], [9, 61], [11, 52], [18, 36], [4, 9], [21, 28], [10, 30], [17, 68], [4, 52], [16, 38], [15, 57], [13, 35], [9, 32], [2, 65], [17, 34], [14, 1], [16, 3]]) == [1290, 258, 35, 4, 0]\n    assert candidate(55, 74, [[33, 73], [38, 37], [4, 69], [23, 58], [47, 17], [48, 36], [46, 42], [6, 63], [22, 23], [36, 57], [20, 38], [42, 66], [31, 6], [13, 3], [5, 40], [25, 28], [50, 7], [6, 7], [23, 66], [29, 17], [5, 67], [41, 63], [2, 53], [3, 24], [25, 49], [43, 18], [27, 11], [37, 72], [30, 14], [16, 70], [22, 71], [0, 48], [21, 4], [8, 9], [38, 57], [14, 12], [13, 54], [11, 40], [10, 28], [9, 49], [31, 24], [11, 28], [11, 51], [10, 62], [46, 39], [3, 35], [23, 15], [52, 25], [37, 55], [28, 63], [1, 2], [26, 12], [29, 30], [44, 62], [35, 34], [25, 31], [8, 63], [8, 6], [38, 14], [19, 14], [8, 28], [26, 14], [27, 36], [20, 61], [23, 12], [15, 20]]) == [3685, 254, 3, 0, 0]\n    assert candidate(6, 79, [[2, 64], [4, 74], [2, 3], [1, 63], [2, 34], [3, 57], [1, 1], [3, 52], [1, 56], [3, 1], [1, 61], [2, 49], [1, 66], [2, 25], [1, 20], [4, 51], [0, 78], [1, 30]]) == [323, 65, 2, 0, 0]\n    assert candidate(36, 75, [[23, 28], [21, 10], [16, 48], [26, 45], [13, 45], [24, 66], [34, 15], [20, 13], [4, 42], [17, 14], [7, 19], [8, 5], [4, 27], [16, 32], [19, 0], [27, 69], [18, 62], [18, 63], [4, 24], [15, 51], [24, 53], [6, 46], [33, 51], [13, 65], [11, 39], [14, 37], [33, 1], [5, 16], [24, 15], [30, 63], [34, 23], [12, 22], [29, 44], [19, 8], [3, 4], [12, 67], [0, 44], [4, 65], [5, 44], [16, 13], [16, 71], [16, 10], [27, 71], [28, 56], [1, 23], [11, 42], [1, 1], [10, 19], [10, 18], [8, 55], [23, 68], [12, 23], [12, 61], [31, 3], [13, 14], [20, 30], [25, 1], [4, 37], [25, 32]]) == [2365, 218, 7, 0, 0]\n    assert candidate(31, 87, [[12, 40], [28, 11], [20, 65], [24, 38], [21, 65], [29, 11], [11, 8], [26, 16], [8, 25], [18, 63], [11, 69], [9, 16], [14, 25], [2, 34], [7, 14], [26, 74], [27, 51], [13, 53], [25, 2], [27, 17], [3, 45], [23, 22], [28, 38], [5, 26], [23, 33], [2, 16], [14, 41], [22, 79], [25, 75], [7, 79], [9, 6], [14, 73], [15, 61], [27, 16], [29, 21], [27, 72], [16, 17], [1, 37]]) == [2437, 135, 7, 1, 0]\n    assert candidate(55, 67, [[44, 3], [12, 10], [20, 17], [41, 24], [25, 40], [21, 46], [5, 9], [34, 64], [29, 40], [49, 32], [19, 37], [42, 61], [35, 46], [49, 52], [16, 65], [4, 32], [20, 48], [5, 59], [28, 26], [2, 3], [40, 28], [20, 35], [4, 29], [47, 20], [3, 8], [26, 39], [7, 54], [8, 10], [37, 5], [33, 13], [3, 44], [14, 63], [21, 24], [26, 17], [11, 60], [19, 44], [46, 23], [37, 6], [9, 64], [15, 36], [1, 36], [44, 31], [3, 24], [13, 3], [49, 39], [28, 11], [21, 32], [27, 34], [44, 52], [51, 51], [17, 50], [49, 47], [0, 5], [11, 51], [37, 23], [45, 45], [50, 19], [33, 51], [14, 36], [7, 44], [3, 36], [7, 27], [18, 54], [31, 4], [15, 12], [38, 38], [52, 33], [36, 16], [25, 42], [28, 37], [24, 50], [26, 24], [48, 26], [2, 24], [33, 10], [10, 9], [25, 26], [15, 64], [52, 58], [0, 44], [7, 48], [32, 43], [10, 6], [43, 11], [50, 53], [43, 26], [13, 45], [50, 28], [40, 0], [31, 50], [42, 51], [4, 59], [18, 62], [26, 45], [22, 44], [37, 58], [38, 43], [5, 53], [23, 1], [21, 21]]) == [3182, 370, 12, 0, 0]\n    assert candidate(19, 40, [[8, 25], [14, 19], [9, 0], [10, 26], [11, 8], [4, 8], [2, 0], [13, 6], [4, 24], [6, 11], [5, 19], [2, 21], [4, 11], [4, 29], [1, 25], [6, 14], [0, 28], [5, 39], [7, 33], [15, 7], [13, 25], [15, 5], [9, 34], [0, 33], [6, 10], [3, 20], [6, 13], [14, 12], [6, 17], [3, 1], [2, 30], [13, 16], [14, 1], [9, 9], [14, 10], [17, 4], [13, 39], [8, 7], [16, 19], [2, 5], [10, 19], [1, 6], [15, 4], [7, 0], [3, 18], [16, 3], [14, 21], [10, 31], [11, 31], [1, 33], [2, 23], [17, 20], [8, 9], [0, 16], [4, 32], [9, 4], [9, 8], [0, 8], [1, 0], [13, 1], [1, 34], [7, 9], [8, 34], [4, 39], [10, 7], [4, 5], [9, 12], [5, 36], [15, 0], [15, 36], [6, 22]]) == [478, 190, 32, 2, 0]\n    assert candidate(16, 27, [[7, 4], [11, 26], [2, 21], [3, 3], [13, 11], [7, 14], [0, 8]]) == [366, 24, 0, 0, 0]\n    assert candidate(34, 39, [[4, 12], [29, 24], [15, 28], [3, 1], [7, 0], [0, 27], [15, 5], [2, 0], [16, 7], [19, 33], [3, 11], [5, 26], [29, 32], [21, 32], [31, 10], [17, 4], [23, 32], [5, 10], [3, 12], [27, 11], [12, 26], [2, 5], [1, 0], [20, 2], [11, 26], [0, 11], [12, 4], [14, 7], [13, 18], [9, 7], [16, 9], [10, 3], [3, 33], [13, 27], [27, 18], [11, 19], [18, 13], [16, 21], [2, 15], [11, 27], [13, 33], [8, 21], [16, 19], [26, 27], [3, 36], [9, 3], [13, 38], [10, 22], [1, 38], [12, 31], [13, 13], [17, 19], [30, 1], [15, 37], [21, 5], [14, 15], [6, 37], [8, 23], [26, 22], [24, 38], [21, 23]]) == [1041, 200, 11, 2, 0]\n    assert candidate(26, 41, [[12, 9], [1, 18], [7, 10], [22, 0], [15, 10], [12, 3], [20, 15], [0, 27], [16, 35], [20, 40], [7, 38], [13, 27], [9, 32], [4, 26], [9, 40], [4, 1], [21, 33], [16, 12], [6, 38], [22, 40], [10, 24], [20, 21], [17, 31], [12, 6], [8, 27], [9, 15], [5, 13], [14, 31], [11, 17], [20, 31], [22, 35], [23, 19], [23, 16], [3, 15], [16, 11], [23, 27], [9, 33], [16, 3], [5, 12], [21, 20], [12, 1], [13, 30], [13, 17], [13, 22], [9, 28], [7, 8], [8, 5], [19, 15], [16, 1], [23, 36], [4, 6], [18, 40], [8, 19], [5, 2], [21, 2], [23, 7]]) == [804, 180, 16, 0, 0]\n    assert candidate(39, 68, [[35, 51], [9, 25], [13, 28], [14, 62], [24, 6]]) == [2526, 20, 0, 0, 0]\n    assert candidate(33, 94, [[15, 21], [0, 63], [25, 30], [11, 77], [6, 65], [14, 5], [3, 18], [30, 61], [21, 52], [17, 8], [10, 69], [24, 84], [19, 18], [10, 75], [4, 47], [8, 9], [17, 22], [3, 70], [30, 90], [22, 58], [15, 84], [4, 78], [8, 15], [20, 18], [23, 60], [26, 83], [27, 14], [5, 31], [2, 48], [18, 48], [16, 33], [6, 31], [1, 82], [5, 46], [19, 13], [0, 86], [3, 44], [9, 49], [13, 47], [0, 4], [31, 52], [6, 68], [15, 79], [29, 47], [6, 4], [5, 33], [10, 9], [30, 50], [9, 77], [13, 79], [20, 87], [11, 27], [23, 86]]) == [2775, 196, 5, 0, 0]\n    assert candidate(65, 78, [[43, 38], [0, 36], [40, 68], [52, 19], [16, 59], [10, 35], [23, 1], [1, 58], [29, 38], [19, 49], [34, 40], [57, 37], [32, 66], [35, 37], [16, 10], [53, 51], [9, 53], [23, 40], [42, 74], [31, 51], [17, 51], [21, 32], [33, 72]]) == [4838, 90, 0, 0, 0]\n    assert candidate(47, 80, [[26, 59], [14, 64], [4, 67], [17, 51], [10, 66], [18, 78], [17, 69], [33, 57], [18, 44], [16, 78], [27, 39], [22, 18], [16, 69], [21, 5], [19, 52], [39, 40], [13, 17], [15, 10], [30, 33], [9, 67], [34, 10], [3, 39], [32, 52], [33, 71], [24, 65], [15, 57], [43, 53]]) == [3529, 102, 3, 0, 0]\n    assert candidate(42, 99, [[27, 29], [39, 18], [40, 17], [36, 14], [17, 76], [15, 67], [2, 41], [37, 70], [34, 67], [36, 15], [23, 57], [7, 46], [7, 42], [3, 91], [3, 32], [17, 30], [35, 37], [25, 91], [32, 83], [20, 81], [20, 19], [23, 51], [17, 10], [23, 61], [18, 24], [3, 13], [16, 48], [0, 88], [31, 81], [4, 20], [34, 95], [30, 22], [28, 58], [4, 50], [1, 77], [4, 13], [7, 37], [13, 1], [28, 75], [28, 77], [4, 4], [31, 20], [40, 6], [18, 65]]) == [3849, 164, 5, 0, 0]\n    assert candidate(77, 80, [[34, 8], [7, 40], [67, 29], [64, 70], [32, 71], [17, 29], [19, 15], [6, 77], [68, 39], [11, 9], [9, 59], [19, 63], [44, 11], [24, 54], [13, 15], [10, 23], [27, 35], [14, 68], [9, 61], [17, 74], [44, 56], [37, 78], [20, 68], [7, 58], [9, 38], [72, 22], [72, 33], [41, 33], [64, 63], [22, 69], [2, 12], [51, 73], [43, 32], [16, 57], [11, 16], [3, 38], [14, 45], [73, 28], [8, 51], [72, 42], [18, 65], [45, 42], [42, 18], [34, 38], [47, 50], [47, 0], [29, 32], [15, 66], [43, 61], [49, 36], [69, 71], [47, 45], [55, 64], [1, 62], [42, 0], [18, 49], [57, 48], [22, 16], [14, 7], [56, 10], [49, 42], [19, 46], [40, 68], [65, 49], [8, 20], [12, 0], [31, 17], [50, 6], [8, 14], [6, 38], [32, 67], [4, 3], [10, 13], [44, 8], [21, 43], [70, 34], [49, 22], [72, 47], [59, 59], [56, 72], [33, 30], [18, 20], [2, 76], [22, 33]]) == [5674, 330, 0, 0, 0]\n    assert candidate(53, 93, []) == [4784, 0, 0, 0, 0]\n    assert candidate(48, 91, [[19, 79], [30, 11], [6, 54], [35, 3], [41, 20], [8, 3], [8, 46], [37, 67], [21, 61], [27, 70], [15, 32], [44, 61], [1, 70], [9, 68], [28, 16], [19, 43], [12, 68], [21, 12], [7, 77], [18, 32], [1, 25], [31, 11], [1, 82], [10, 18], [31, 86], [21, 24], [11, 43], [15, 4], [8, 12], [39, 68], [11, 65], [37, 53], [10, 39], [30, 61], [34, 46], [33, 9], [30, 64], [27, 59], [31, 60], [14, 64], [11, 70], [16, 83], [28, 15], [26, 21], [33, 71], [31, 53], [39, 36], [27, 77], [41, 82], [21, 45], [3, 59], [42, 14], [19, 59], [5, 57]]) == [4019, 206, 5, 0, 0]\n    assert candidate(53, 77, [[29, 74], [44, 76], [10, 11], [11, 14], [45, 0], [41, 19], [32, 49], [21, 50], [14, 41], [7, 74], [42, 47], [50, 19], [6, 34], [47, 0], [19, 64], [39, 25], [49, 46], [45, 1], [9, 67], [51, 19], [6, 59], [24, 52], [40, 61], [48, 23], [23, 49], [4, 64], [40, 27], [49, 42], [17, 30], [13, 14], [3, 49], [41, 14], [36, 0], [5, 32], [6, 1], [4, 27], [11, 22], [26, 37], [5, 61], [22, 15], [42, 1], [9, 33], [20, 25], [44, 38], [46, 16], [10, 20], [45, 13], [31, 27], [27, 70], [22, 11], [28, 17]]) == [3760, 188, 4, 0, 0]\n    assert candidate(12, 69, [[8, 6], [1, 19], [0, 23], [7, 8], [7, 31], [10, 16], [9, 2], [6, 1], [8, 63], [7, 45], [5, 40], [1, 27], [2, 14], [6, 54], [0, 4], [1, 62], [4, 45], [5, 31], [7, 33], [2, 38]]) == [672, 76, 0, 0, 0]\n    assert candidate(49, 78, [[4, 26], [9, 25], [9, 77], [42, 45], [47, 12], [30, 68], [15, 63], [23, 11], [24, 24], [23, 49], [26, 77]]) == [3656, 40, 0, 0, 0]\n    assert candidate(63, 95, [[36, 71], [2, 38], [25, 72], [16, 54], [38, 59], [44, 82], [7, 57], [8, 65], [5, 90], [8, 82], [56, 26], [39, 15], [36, 30], [31, 53], [59, 80], [38, 25], [50, 47], [12, 72], [27, 26], [41, 23], [20, 25], [19, 74], [22, 18], [19, 75], [53, 61], [25, 17], [12, 22], [32, 40], [40, 1], [6, 7], [6, 24], [46, 43], [39, 84], [17, 92], [12, 91], [32, 25], [20, 68], [11, 12], [23, 20], [7, 36], [42, 22], [21, 69], [19, 9], [25, 8], [57, 82], [52, 83], [43, 81], [60, 19], [26, 83], [18, 73], [44, 12], [30, 45], [25, 84], [55, 77], [35, 41], [53, 8], [0, 44], [29, 36], [36, 69], [9, 53], [37, 15], [24, 0], [13, 60], [31, 62], [56, 84], [45, 59], [45, 82], [58, 35], [12, 15], [34, 60], [28, 51], [18, 40], [53, 73], [10, 48], [28, 6], [8, 16], [41, 34], [50, 15], [23, 30], [33, 21], [2, 34]]) == [5517, 302, 9, 0, 0]\n    assert candidate(42, 58, [[35, 34], [26, 21], [17, 14], [34, 44], [12, 51], [1, 33], [23, 17], [30, 54], [25, 46], [39, 12], [21, 13], [26, 37], [13, 38], [37, 10], [27, 57], [3, 14], [19, 31]]) == [2271, 66, 0, 0, 0]\n    assert candidate(6, 12, [[4, 7], [2, 11], [0, 7], [0, 10], [1, 4], [2, 0], [2, 10], [0, 8], [3, 8], [3, 2], [0, 5], [1, 10], [0, 9], [3, 4], [2, 9], [1, 1], [3, 7], [2, 3], [0, 0]]) == [18, 19, 14, 4, 0]\n    assert candidate(51, 77, [[41, 39], [28, 5], [6, 8], [36, 7], [2, 46], [18, 75], [12, 63], [42, 26], [16, 42], [6, 9], [9, 55], [37, 61], [8, 69], [35, 10], [34, 51], [33, 2], [37, 64], [5, 32], [17, 53], [38, 51], [42, 18], [24, 35], [8, 25], [17, 58], [41, 53], [2, 9], [48, 37], [13, 7], [47, 20], [28, 59], [17, 8], [32, 27], [39, 16], [43, 74], [38, 61], [40, 14], [35, 28], [9, 46], [30, 44], [46, 12], [7, 45], [26, 76], [34, 10], [28, 51], [47, 1], [46, 65], [29, 71], [2, 24], [11, 43], [16, 28], [33, 40], [18, 29], [8, 73], [30, 55], [0, 47], [45, 34], [3, 45], [16, 5], [33, 9], [4, 68], [36, 47], [11, 39], [8, 37], [6, 63], [42, 51], [4, 16], [37, 5], [32, 60], [40, 17], [9, 14], [5, 29], [22, 34], [47, 21], [44, 37], [2, 75], [21, 76], [30, 46], [20, 60]]) == [3505, 284, 11, 0, 0]\n    assert candidate(58, 65, [[20, 24], [4, 13], [38, 14], [41, 21], [6, 36], [12, 3], [51, 52], [10, 7], [14, 50], [47, 60], [30, 59], [46, 58], [55, 49], [35, 25], [15, 53], [24, 39], [55, 40], [4, 43], [36, 28], [21, 38], [36, 1], [44, 42], [12, 26], [50, 30], [36, 14], [53, 0], [11, 48], [0, 55], [42, 17], [34, 48], [15, 43], [13, 6], [33, 29], [32, 20], [12, 13], [7, 1], [22, 41], [26, 64], [16, 16], [3, 5], [14, 0], [39, 19], [32, 47], [47, 14], [51, 64], [51, 12], [7, 45], [43, 46], [47, 28], [50, 60], [45, 8], [6, 30], [9, 35], [21, 47], [17, 39]]) == [3438, 210, 0, 0, 0]\n    assert candidate(6, 10, [[2, 7], [0, 4], [3, 3], [0, 2], [3, 0], [4, 2], [2, 1]]) == [25, 18, 2, 0, 0]\n    assert candidate(37, 75, [[34, 9], [30, 27], [20, 54], [35, 35], [24, 8], [0, 68], [22, 23], [10, 20], [4, 32], [8, 20], [33, 6], [7, 63], [17, 72], [8, 37], [28, 48], [25, 24], [25, 74], [20, 38], [9, 51], [10, 74], [3, 37], [20, 17], [11, 31], [14, 67], [19, 26], [34, 7], [31, 51], [5, 47], [24, 28]]) == [2555, 108, 1, 0, 0]\n    assert candidate(32, 90, [[14, 54], [13, 33], [27, 23], [28, 68], [23, 46], [12, 22], [4, 85], [4, 41], [26, 32], [0, 42], [16, 24], [17, 83], [28, 75], [4, 39], [5, 46], [10, 51], [27, 88], [6, 69], [22, 11], [7, 9], [19, 37], [0, 74], [24, 85], [28, 74], [28, 3], [13, 80], [9, 30], [16, 86], [3, 22], [2, 3], [21, 68], [11, 32], [19, 68], [25, 83], [25, 31], [12, 10], [26, 3], [16, 57], [24, 47], [12, 73], [21, 87], [9, 28], [21, 16], [23, 29], [25, 13], [23, 82], [19, 7], [29, 11], [21, 78], [24, 23], [7, 66], [9, 57], [6, 78], [13, 22], [0, 39], [20, 48], [18, 66], [17, 77], [25, 66], [11, 25], [19, 26], [20, 75], [29, 63], [3, 52], [28, 15], [13, 84], [12, 21], [0, 4], [7, 60], [16, 74], [1, 3], [7, 5], [14, 27], [22, 4], [12, 6], [16, 0], [16, 14], [12, 17], [27, 75], [20, 16], [0, 16], [9, 26], [4, 43], [19, 0], [22, 81], [12, 71], [15, 54], [3, 61], [13, 72], [7, 71], [2, 30], [2, 18], [16, 15], [28, 5], [2, 7], [25, 89]]) == [2413, 326, 18, 2, 0]\n    assert candidate(21, 81, [[5, 71], [9, 65], [12, 36], [19, 38], [7, 66], [7, 2], [14, 13], [4, 71], [19, 32], [14, 30], [13, 21], [16, 79], [0, 2], [3, 27], [13, 72], [18, 49], [0, 72], [0, 52], [18, 24], [18, 41], [13, 7], [1, 29], [15, 24], [16, 2], [8, 25], [5, 51], [19, 15], [12, 18], [16, 61], [9, 6], [7, 61], [18, 37], [10, 79], [6, 35], [17, 12], [2, 36], [13, 64], [9, 59], [5, 42], [19, 30], [7, 51], [15, 53], [10, 75], [2, 34], [8, 0], [2, 70], [3, 36], [12, 38], [4, 35], [9, 25], [13, 68], [13, 13], [14, 25], [6, 48], [15, 33], [15, 29]]) == [1396, 192, 12, 0, 0]\n    assert candidate(44, 54, [[37, 23], [27, 31], [19, 28], [30, 2], [15, 29], [4, 40], [7, 47], [36, 18], [17, 49], [18, 51], [29, 42], [8, 34], [28, 51], [17, 27], [18, 49], [26, 16], [34, 39], [11, 19], [20, 43], [23, 47], [25, 0], [20, 32], [16, 5], [29, 30], [22, 3], [4, 12], [13, 8], [5, 6], [35, 40], [15, 49], [27, 14], [37, 8], [41, 15], [0, 16], [37, 37], [38, 31], [36, 52], [18, 22], [30, 3], [31, 18]]) == [2128, 146, 5, 0, 0]\n    assert candidate(2, 52, [[0, 24], [0, 29], [0, 14], [0, 23], [0, 33], [0, 51], [0, 27], [0, 50], [0, 7], [0, 32], [0, 9], [0, 26], [0, 17], [0, 31], [0, 19], [0, 11], [0, 3], [0, 15], [0, 20], [0, 12], [0, 18], [0, 45], [0, 48], [0, 41], [0, 8], [0, 42], [0, 47], [0, 43], [0, 2], [0, 34], [0, 0], [0, 5], [0, 49], [0, 4], [0, 36], [0, 40], [0, 44], [0, 6], [0, 38], [0, 22], [0, 13]]) == [0, 22, 29, 0, 0]\n    assert candidate(3, 75, [[0, 49], [1, 17], [1, 18], [0, 20], [1, 65], [0, 35], [1, 70], [1, 20], [0, 43], [1, 58], [1, 36], [0, 28], [0, 74], [0, 30], [1, 51], [1, 63], [1, 66]]) == [102, 39, 7, 0, 0]\n    assert candidate(33, 93, [[18, 53], [29, 30], [29, 23], [10, 74], [5, 25], [17, 26], [5, 87], [27, 11], [29, 16], [22, 34], [19, 86], [24, 80], [11, 46], [13, 41], [7, 24], [24, 86], [30, 89], [17, 92], [11, 21], [8, 71], [7, 8], [24, 21], [22, 32], [27, 21], [29, 17], [4, 25], [22, 91], [23, 81], [10, 59], [19, 87], [20, 16], [30, 56], [13, 70], [18, 78], [13, 27], [3, 48], [8, 3], [1, 27], [16, 62], [3, 46], [6, 23], [22, 12], [0, 26], [18, 91], [0, 1], [8, 36], [8, 16], [27, 17], [12, 1], [9, 88]]) == [2760, 174, 10, 0, 0]\n    assert candidate(70, 88, [[40, 71], [29, 33], [59, 67], [55, 61], [17, 41]]) == [5983, 20, 0, 0, 0]\n    assert candidate(76, 88, [[39, 76], [42, 86], [4, 51], [60, 0], [5, 28], [1, 46], [28, 25], [21, 12], [5, 39], [19, 20], [71, 58], [70, 25], [38, 32], [42, 51], [49, 62], [39, 20], [48, 24], [10, 14], [17, 85], [27, 2], [5, 40], [56, 23], [21, 67], [15, 28], [15, 84], [73, 34], [50, 81], [20, 68], [0, 30], [30, 53], [33, 82], [58, 65], [4, 7], [73, 50], [55, 25], [45, 59], [69, 78], [63, 47], [19, 83], [46, 41], [23, 66], [0, 76], [63, 18], [1, 3], [18, 71], [27, 79], [51, 21], [9, 46], [48, 30], [11, 30], [67, 74], [74, 9], [8, 8], [29, 9], [66, 4], [52, 42], [21, 56], [40, 74], [16, 57], [54, 64], [41, 4], [20, 64], [28, 9], [55, 85], [13, 35], [15, 33], [43, 43], [24, 61], [11, 52], [34, 70], [19, 66], [23, 57], [68, 86], [58, 53], [23, 19], [46, 10], [59, 49], [66, 9], [24, 64], [23, 36], [20, 10], [1, 68], [12, 20], [8, 73], [59, 41]]) == [6196, 324, 5, 0, 0]\n    assert candidate(77, 92, [[57, 46], [24, 2], [13, 78], [50, 91], [50, 3], [17, 80], [62, 17], [5, 88], [17, 53], [73, 42], [10, 62], [21, 60], [36, 45], [36, 53], [57, 29], [68, 43], [4, 80], [74, 26], [18, 23], [44, 69], [9, 16], [52, 20], [25, 13], [0, 60], [23, 80], [26, 23], [49, 34], [58, 71], [24, 53], [56, 82], [30, 63], [53, 19], [34, 14], [47, 5], [2, 49], [20, 2], [38, 87], [30, 46], [56, 48], [34, 1], [24, 14], [70, 40], [33, 74], [65, 86], [17, 39], [48, 80], [24, 19], [30, 90], [17, 61], [31, 83], [66, 79], [25, 30], [57, 51], [25, 43], [54, 47], [60, 12], [17, 67], [2, 57], [40, 32], [58, 90], [19, 62], [9, 47], [45, 26], [0, 37], [10, 65], [64, 1], [64, 38], [2, 34], [53, 4], [16, 37], [2, 22], [69, 91], [27, 64], [50, 4], [27, 88], [17, 47], [9, 28], [19, 57], [35, 88], [4, 55], [7, 21], [37, 68], [8, 83], [70, 37], [38, 0], [40, 89], [5, 36], [74, 37], [59, 64], [28, 89], [34, 75], [42, 21], [51, 26], [21, 57], [66, 63]]) == [6552, 358, 6, 0, 0]\n    assert candidate(25, 52, [[7, 8], [3, 21], [10, 39], [12, 35], [20, 21], [5, 37], [4, 28], [15, 49], [14, 26], [12, 47], [10, 28]]) == [1180, 44, 0, 0, 0]\n    assert candidate(78, 84, [[70, 29], [22, 36], [60, 16], [39, 28], [67, 15], [50, 11], [69, 28], [24, 32], [48, 52]]) == [6356, 34, 1, 0, 0]\n    assert candidate(46, 76, [[18, 2], [41, 13], [38, 28], [9, 54], [35, 67], [31, 72], [29, 47], [44, 16], [35, 5], [36, 14], [16, 69], [34, 74], [15, 32], [37, 29], [41, 37], [5, 9], [26, 68], [40, 38], [30, 38], [42, 57], [2, 2], [42, 54], [4, 23], [40, 15], [22, 18], [0, 28], [34, 33], [37, 17], [24, 49], [25, 73], [35, 63], [20, 60], [20, 16], [10, 50], [24, 46], [26, 8], [43, 56], [9, 37], [24, 56], [42, 73], [2, 9], [14, 72], [35, 0], [40, 20], [30, 8], [12, 30], [15, 37], [42, 75], [31, 2], [43, 34], [24, 18], [19, 27], [42, 23], [6, 70], [22, 21], [15, 63], [13, 39], [36, 12], [13, 46], [23, 71], [21, 44], [21, 26], [3, 15], [41, 41], [17, 43], [34, 47], [4, 65], [36, 18], [19, 1], [31, 55], [44, 21], [15, 9], [18, 46], [29, 32], [32, 19], [1, 48], [41, 55], [40, 66], [43, 3], [32, 25], [36, 49], [7, 5], [26, 4], [27, 21], [27, 44]]) == [3047, 322, 6, 0, 0]\n    assert candidate(6, 35, [[1, 26], [4, 24], [2, 2], [4, 17], [2, 5], [3, 32], [3, 21], [1, 0], [2, 8], [4, 20], [1, 4], [2, 9], [1, 17], [3, 1], [0, 2], [4, 6], [0, 18], [4, 23], [2, 24], [0, 16], [1, 15], [3, 22], [2, 12], [1, 18], [4, 21], [0, 26], [4, 19], [4, 2], [3, 34], [0, 24], [3, 31], [2, 34], [3, 2], [1, 24], [0, 33], [0, 31]]) == [81, 59, 25, 5, 0]\n    assert candidate(95, 99, [[40, 34], [77, 26], [5, 19], [84, 36], [6, 42], [92, 59], [67, 70], [62, 38], [87, 44], [79, 79], [92, 44], [75, 85], [43, 2], [91, 34], [78, 69], [19, 1], [10, 15], [82, 79], [28, 14], [79, 72], [57, 84], [75, 93], [29, 93], [91, 66], [84, 38], [76, 81], [5, 11], [32, 7], [48, 25], [10, 70], [67, 37], [31, 91], [45, 19], [59, 19], [29, 98], [37, 57], [83, 18], [44, 80], [91, 27], [74, 69], [13, 62], [5, 23], [91, 70], [89, 71], [11, 32], [82, 30], [45, 61], [10, 50], [25, 65], [22, 32], [77, 13], [9, 79], [69, 37], [77, 63], [6, 48], [7, 77], [35, 8], [27, 94], [45, 37], [30, 78], [81, 21], [89, 84], [75, 73], [74, 18], [4, 28], [10, 66], [43, 54], [28, 7], [26, 41], [2, 74], [6, 70], [8, 30], [18, 98], [63, 10], [22, 98]]) == [8918, 294, 0, 0, 0]\n    assert candidate(57, 91, [[42, 12], [38, 56], [28, 82], [54, 52], [24, 5]]) == [5020, 20, 0, 0, 0]\n    assert candidate(60, 73, [[22, 24], [22, 4], [45, 1], [38, 57], [54, 41], [6, 58], [8, 44], [40, 42], [19, 47], [31, 47], [48, 33], [43, 37], [22, 54], [36, 23], [23, 9], [51, 15], [24, 39], [32, 0], [17, 7], [41, 27], [39, 12], [11, 10], [22, 58], [13, 69], [37, 37], [17, 48], [18, 19], [52, 40], [52, 32], [11, 2], [32, 21], [39, 33], [32, 1], [54, 17], [0, 71], [7, 21], [18, 24], [0, 13], [22, 29], [49, 62], [44, 63], [53, 53], [31, 44], [28, 5], [46, 65], [37, 27], [39, 55], [16, 56], [33, 10], [40, 19], [43, 58], [6, 65], [24, 41], [48, 61], [28, 46], [0, 15], [0, 55], [29, 49], [5, 72], [34, 21], [33, 40], [14, 34], [9, 70], [3, 48], [16, 15], [56, 68], [18, 68], [2, 13], [47, 38], [55, 55], [22, 13], [19, 59], [48, 60], [53, 2], [46, 67], [58, 9], [56, 67], [23, 50]]) == [3955, 286, 7, 0, 0]\n    assert candidate(14, 76, [[1, 20], [9, 9], [6, 57], [3, 8], [6, 71], [2, 67], [12, 53], [6, 44], [6, 16], [3, 26], [10, 39], [7, 4]]) == [927, 48, 0, 0, 0]\n    assert candidate(69, 72, [[45, 12], [54, 37], [43, 47], [4, 45], [28, 24], [56, 5], [10, 67], [30, 0], [34, 48], [40, 45], [27, 47], [47, 58], [63, 59], [53, 53], [24, 31], [16, 51], [55, 40], [42, 27], [7, 38], [3, 0], [9, 43], [17, 15], [63, 52], [27, 24], [6, 32], [13, 50], [55, 68], [11, 34], [42, 18], [20, 42], [48, 20], [36, 8], [29, 50], [4, 55], [33, 24], [43, 32], [20, 67], [29, 37], [36, 7], [66, 60], [61, 6], [8, 28], [55, 31], [61, 17], [55, 49], [64, 33], [32, 9], [54, 67], [34, 40], [52, 39], [45, 64], [4, 38], [44, 8], [48, 34], [35, 14], [25, 43], [35, 31], [10, 21], [63, 13], [7, 0], [13, 54], [54, 68], [13, 44], [51, 62], [17, 28], [33, 31], [8, 70], [25, 32], [44, 49], [25, 16], [35, 44], [23, 37], [23, 48], [8, 49], [23, 42]]) == [4543, 277, 7, 1, 0]\n    assert candidate(29, 79, [[26, 78], [24, 55], [3, 8], [3, 55], [12, 76], [11, 23], [4, 52], [5, 73], [27, 21], [8, 19], [14, 54], [10, 4], [8, 23], [13, 16], [4, 1], [21, 47], [11, 15], [2, 26], [24, 59], [12, 22], [2, 69], [20, 1], [10, 74], [25, 53], [0, 13], [9, 28], [7, 4], [10, 76], [13, 75], [24, 25], [14, 19], [12, 7], [5, 53], [5, 59], [7, 41], [8, 25], [7, 65], [23, 48], [18, 37], [7, 67], [2, 76], [8, 64], [22, 46], [2, 16], [20, 31], [7, 38], [13, 66], [22, 30], [17, 23], [22, 60], [4, 10], [6, 37], [5, 33], [19, 58], [22, 53], [9, 53], [4, 22], [12, 4], [2, 51], [3, 63], [4, 18], [22, 43]]) == [1946, 232, 6, 0, 0]\n    assert candidate(6, 58, [[0, 33], [3, 43], [4, 25], [0, 42], [4, 2], [0, 31], [2, 10], [0, 18], [1, 46], [2, 55], [0, 13], [1, 8], [2, 24], [1, 54], [3, 54], [0, 6], [0, 37], [3, 34], [3, 53], [1, 33], [2, 1], [2, 26], [3, 11], [2, 37], [1, 24], [0, 2], [0, 14], [2, 33], [0, 41], [4, 7], [4, 28], [3, 48], [3, 0], [4, 38], [1, 34], [0, 26], [4, 43], [3, 35], [2, 7], [4, 37], [4, 26], [4, 51], [4, 21], [3, 1], [4, 53], [0, 34], [4, 3], [3, 50], [3, 24], [2, 5], [3, 40], [2, 14], [4, 39], [2, 43], [2, 50], [0, 21], [2, 8], [0, 51], [0, 47], [1, 22], [3, 17], [4, 13], [2, 2], [3, 55], [4, 29], [0, 16], [1, 55], [2, 49], [0, 24], [1, 16], [2, 17], [1, 19], [1, 42], [4, 40], [0, 5], [0, 9], [2, 32], [2, 25], [0, 40], [2, 18], [3, 31], [3, 26], [1, 57], [0, 45], [0, 17], [2, 22], [3, 3], [1, 27], [1, 20], [0, 44], [2, 0], [3, 30], [2, 40], [3, 39], [4, 50]]) == [80, 107, 76, 19, 3]\n    assert candidate(28, 64, [[3, 3], [13, 53], [17, 60], [1, 30], [21, 59], [1, 51], [2, 49], [1, 16], [14, 22], [23, 17], [13, 55], [8, 38], [13, 31], [8, 34], [17, 6]]) == [1641, 60, 0, 0, 0]\n    assert candidate(15, 45, [[4, 29], [0, 10], [10, 21], [6, 5], [4, 27], [3, 11], [8, 36], [1, 38], [5, 19], [9, 1], [5, 14], [8, 18], [2, 8], [13, 5], [5, 11], [6, 37], [2, 17], [5, 39], [7, 3], [2, 3], [9, 20], [9, 41], [0, 40], [10, 20], [12, 30], [2, 4], [12, 0], [5, 16], [11, 35], [4, 38], [9, 11], [3, 34], [4, 39], [5, 8], [10, 27], [5, 13], [2, 36], [9, 44], [5, 42], [7, 43], [13, 16], [0, 30], [6, 35], [8, 12], [7, 33], [11, 12], [13, 0], [10, 0], [4, 17], [0, 34], [10, 4], [0, 22], [2, 25], [8, 39], [9, 40], [4, 35], [9, 10], [7, 18], [7, 28], [13, 12], [7, 8], [10, 37], [11, 27], [12, 40], [8, 0], [7, 4]]) == [402, 186, 26, 2, 0]\n    assert candidate(50, 60, [[37, 49], [8, 45], [11, 21], [38, 10], [47, 35], [15, 33], [18, 8], [15, 22], [16, 24], [14, 50], [38, 24], [8, 23], [24, 58], [11, 35], [37, 39], [29, 18], [1, 8], [40, 47], [40, 59], [47, 48], [15, 54], [16, 33], [22, 29], [39, 16], [35, 43], [40, 54], [11, 8], [16, 14], [8, 7], [38, 1], [17, 3], [8, 3], [0, 38], [43, 22], [14, 10], [31, 15], [11, 46], [21, 45], [13, 6], [0, 34], [2, 42], [47, 57], [30, 2], [6, 38], [8, 31], [11, 44], [44, 36], [10, 45], [41, 29], [31, 30], [47, 54], [3, 51], [26, 5], [3, 43], [22, 42], [27, 28], [48, 4], [0, 49], [45, 22], [7, 58], [26, 27], [35, 31], [40, 15], [45, 44], [42, 34], [17, 54]]) == [2642, 242, 7, 0, 0]\n    assert candidate(36, 54, [[7, 0], [22, 50], [2, 41], [33, 48], [1, 26]]) == [1837, 18, 0, 0, 0]\n    assert candidate(26, 68, [[8, 51], [18, 5], [18, 64]]) == [1663, 12, 0, 0, 0]\n    assert candidate(21, 46, [[12, 7], [12, 35], [13, 14], [11, 22], [2, 1], [11, 28], [1, 7], [6, 36], [2, 15], [15, 18], [1, 39], [12, 38], [11, 35], [9, 9], [17, 6], [12, 10]]) == [838, 60, 2, 0, 0]\n    assert candidate(35, 74, [[9, 54], [9, 23], [8, 48], [14, 29], [17, 37], [6, 4], [17, 39], [18, 41], [18, 50], [24, 20], [29, 65], [30, 3], [5, 19], [11, 58], [6, 67], [21, 44], [8, 3], [7, 11], [18, 29], [22, 46], [19, 51], [4, 49], [13, 15], [19, 48], [12, 33], [8, 6], [25, 48], [17, 70], [2, 68], [21, 53], [9, 37], [27, 8], [14, 69], [2, 16], [20, 54], [8, 67], [31, 44], [10, 38], [19, 21], [16, 43], [25, 65], [33, 20], [17, 5], [23, 6], [14, 23], [14, 26], [1, 61], [28, 21], [1, 68], [24, 59], [19, 17], [23, 4], [25, 52], [2, 43], [30, 13], [31, 34], [32, 43], [14, 20], [11, 4], [30, 20], [0, 67], [27, 20], [32, 64], [20, 17], [24, 61], [5, 35], [31, 18], [28, 40], [13, 11], [29, 59], [17, 50], [13, 54], [20, 67], [32, 2], [4, 18]]) == [2197, 272, 13, 0, 0]\n    assert candidate(28, 52, [[3, 23], [24, 28], [7, 19], [11, 12], [4, 27], [3, 17], [8, 41], [20, 30], [23, 24], [1, 41], [12, 30], [2, 50], [18, 36], [5, 7], [1, 42], [7, 0], [10, 51], [20, 46], [20, 24], [19, 7], [23, 28], [26, 8], [17, 31], [22, 7], [22, 26], [15, 8], [19, 27], [16, 33], [15, 39], [13, 51], [20, 47], [3, 39], [25, 36], [25, 37], [10, 0], [19, 26], [8, 9], [12, 31], [19, 44], [8, 1], [3, 12], [8, 5], [23, 46], [22, 15], [18, 2], [22, 10], [24, 43], [16, 9], [18, 22], [22, 8], [20, 6], [3, 1], [8, 17], [25, 1], [9, 32], [11, 34], [7, 44], [2, 38], [13, 37], [26, 1], [2, 26], [14, 38], [6, 36], [22, 24], [6, 27], [18, 38], [25, 41], [22, 39], [18, 51], [2, 18], [12, 24], [4, 14], [21, 38], [6, 44], [18, 25], [12, 1], [12, 4], [1, 22], [12, 40], [18, 11]]) == [1096, 252, 29, 0, 0]\n    assert candidate(5, 56, [[1, 2], [3, 7], [2, 24], [0, 5], [2, 3], [2, 25], [3, 20], [1, 8], [2, 26], [0, 53], [2, 44], [0, 49], [3, 30], [0, 11], [1, 6], [0, 14], [1, 9], [2, 34], [2, 54], [0, 31], [1, 10], [0, 39], [0, 26], [0, 12], [0, 37], [0, 42], [0, 28], [2, 29], [2, 46], [1, 44], [0, 47], [0, 35], [1, 53], [1, 38], [0, 24], [0, 2], [3, 23], [3, 36], [3, 24], [2, 17], [2, 35], [3, 37], [2, 0], [3, 45], [0, 16], [1, 34], [0, 29], [1, 5], [2, 38]]) == [105, 76, 35, 4, 0]\n    assert candidate(36, 38, [[7, 13], [24, 30], [23, 29], [31, 14], [28, 33], [16, 37], [3, 27], [21, 36], [9, 30], [22, 12], [22, 21], [6, 37], [18, 31], [19, 4], [18, 20], [11, 8], [16, 14], [7, 1], [11, 30], [23, 16], [15, 15], [23, 26], [13, 12], [11, 19]]) == [1205, 88, 2, 0, 0]\n    assert candidate(70, 75, [[17, 67], [60, 71], [53, 71], [14, 36], [19, 57], [35, 22], [8, 11], [27, 36], [47, 71], [58, 54], [35, 63], [54, 18], [17, 22], [34, 60], [26, 35], [61, 39], [65, 20], [38, 37], [58, 34], [34, 23], [63, 32], [55, 32], [35, 53], [29, 52], [6, 4], [5, 66], [5, 6], [6, 60], [61, 50], [16, 24], [24, 51], [65, 45], [11, 14], [7, 27], [67, 24], [34, 53], [61, 16], [60, 50], [19, 41], [56, 19], [10, 15], [17, 0], [8, 59], [32, 24], [35, 27], [41, 34], [59, 6], [17, 30]]) == [4923, 176, 7, 0, 0]\n    assert candidate(8, 68, [[5, 36], [4, 65], [1, 9], [5, 49], [5, 34], [6, 59], [5, 27], [4, 2], [6, 53], [6, 22], [4, 60], [3, 65], [6, 16], [2, 56], [0, 27], [6, 25], [3, 32], [5, 2], [3, 63], [0, 58], [0, 37], [6, 44], [0, 61], [6, 37], [1, 36], [2, 1], [1, 4], [6, 24], [5, 12], [5, 23], [0, 57], [4, 59], [1, 44], [2, 51], [5, 1], [0, 8], [5, 22], [4, 3], [5, 0], [5, 45], [2, 8], [1, 12], [1, 8], [2, 10], [0, 48], [1, 55], [1, 14], [3, 12], [5, 39], [1, 31], [1, 27], [0, 31], [4, 61], [0, 54], [2, 46], [4, 66], [6, 32], [5, 53], [3, 11], [5, 4], [2, 21], [1, 49]]) == [288, 140, 35, 6, 0]\n\ndef test_check():\n    check(countBlackBlocks)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2891_maximumBeauty", "language": "py", "prompt": "from typing import List\n\ndef maximumBeauty(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed array nums and a non-negative integer k.\nIn one operation, you can do the following:\n * Choose an index i that hasn't been chosen before from the range [0, nums.length - 1].\n * Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k].\nThe beauty of the array is the length of the longest subsequence consisting of equal elements.\nReturn the maximum possible beauty of the array nums after applying the operation any number of times.\nNote that you can apply the operation to each index only once.\nA\u00a0subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\nExample 1:\nInput: nums = [4,6,1,2], k = 2\nOutput: 3\nExplanation: In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\nExample 2:\nInput: nums = [1,1,1,1], k = 10\nOutput: 4\nExplanation: In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\nConstraints:\n * 1 <= nums.length <= 105\n * 0 <= nums[i], k <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2891_maximumBeauty.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([4, 6, 1, 2], 2) == 3\n    assert candidate([1, 1, 1, 1], 10) == 4\n    assert candidate([12, 71], 10) == 1\n    assert candidate([27, 55], 1) == 1\n    assert candidate([52, 34], 21) == 2\n    assert candidate([76, 0], 16) == 1\n    assert candidate([56, 40], 26) == 2\n    assert candidate([49, 26], 12) == 2\n    assert candidate([69, 66], 14) == 2\n    assert candidate([64, 98], 12) == 1\n    assert candidate([83, 81], 7) == 2\n    assert candidate([44, 93], 15) == 1\n    assert candidate([44, 31], 26) == 2\n    assert candidate([70, 60], 15) == 2\n    assert candidate([60, 22], 11) == 1\n    assert candidate([33, 20], 1) == 1\n    assert candidate([64, 24], 4) == 1\n    assert candidate([59, 20], 28) == 2\n    assert candidate([10, 98], 27) == 1\n    assert candidate([54, 21], 20) == 2\n    assert candidate([61, 11], 15) == 1\n    assert candidate([99, 40], 27) == 1\n    assert candidate([32, 91], 3) == 1\n    assert candidate([91, 57], 21) == 2\n    assert candidate([60, 92], 26) == 2\n    assert candidate([4, 45], 6) == 1\n    assert candidate([24, 35], 6) == 2\n    assert candidate([11, 29], 3) == 1\n    assert candidate([51, 29], 3) == 1\n    assert candidate([43, 21], 14) == 2\n    assert candidate([32, 25], 18) == 2\n    assert candidate([13, 66], 5) == 1\n    assert candidate([89, 71], 28) == 2\n    assert candidate([36, 29], 20) == 2\n    assert candidate([11, 43], 21) == 2\n    assert candidate([15, 36], 4) == 1\n    assert candidate([11, 51], 1) == 1\n    assert candidate([2, 57], 20) == 1\n    assert candidate([94, 66], 26) == 2\n    assert candidate([87, 51], 8) == 1\n    assert candidate([5, 57, 46], 15) == 2\n    assert candidate([81, 46, 85], 23) == 3\n    assert candidate([51, 83, 0], 11) == 1\n    assert candidate([75, 15, 9], 28) == 2\n    assert candidate([10, 59, 86], 23) == 2\n    assert candidate([41, 11, 59], 17) == 2\n    assert candidate([62, 77, 100], 5) == 1\n    assert candidate([27, 35, 15], 6) == 2\n    assert candidate([81, 76, 40], 5) == 2\n    assert candidate([84, 43, 96], 7) == 2\n    assert candidate([62, 1, 93], 30) == 2\n    assert candidate([13, 46, 71], 29) == 3\n    assert candidate([92, 99, 44], 28) == 3\n    assert candidate([73, 30, 40], 26) == 3\n    assert candidate([83, 89, 17], 5) == 2\n    assert candidate([38, 20, 11], 9) == 2\n    assert candidate([63, 56, 23], 14) == 2\n    assert candidate([32, 16, 98], 0) == 1\n    assert candidate([57, 58, 71], 2) == 2\n    assert candidate([61, 50, 35], 2) == 1\n    assert candidate([22, 97, 13], 22) == 2\n    assert candidate([89, 52, 33], 14) == 2\n    assert candidate([89, 4, 77], 20) == 2\n    assert candidate([50, 26, 72], 30) == 3\n    assert candidate([72, 75, 47], 7) == 2\n    assert candidate([23, 1, 73], 25) == 2\n    assert candidate([36, 74, 20], 20) == 2\n    assert candidate([34, 64, 11], 18) == 2\n    assert candidate([29, 94, 45], 27) == 2\n    assert candidate([22, 80, 34], 28) == 2\n    assert candidate([52, 63, 75], 11) == 2\n    assert candidate([53, 63, 93, 89], 23) == 4\n    assert candidate([47, 76, 100, 51], 27) == 4\n    assert candidate([73, 83, 46, 88], 13) == 3\n    assert candidate([50, 28, 30, 51], 2) == 2\n    assert candidate([88, 87, 9, 17], 10) == 2\n    assert candidate([27, 56, 27, 40], 6) == 2\n    assert candidate([88, 19, 2, 30], 6) == 2\n    assert candidate([58, 50, 0, 97], 18) == 2\n    assert candidate([83, 10, 99, 99], 18) == 3\n    assert candidate([58, 75, 1, 25], 12) == 2\n    assert candidate([77, 35, 1, 69], 15) == 2\n    assert candidate([23, 33, 62, 20], 12) == 3\n    assert candidate([42, 34, 18, 0], 5) == 2\n    assert candidate([10, 58, 37, 46], 0) == 1\n    assert candidate([34, 73, 57, 55], 27) == 4\n    assert candidate([53, 100, 74, 5], 4) == 1\n    assert candidate([48, 93, 96, 19], 24) == 3\n    assert candidate([91, 12, 29, 31], 22) == 3\n    assert candidate([48, 9, 35, 36], 12) == 3\n    assert candidate([24, 64, 40, 30], 3) == 2\n    assert candidate([19, 58, 41, 42], 14) == 3\n    assert candidate([72, 44, 29, 76], 4) == 2\n    assert candidate([37, 19, 10, 16], 16) == 4\n    assert candidate([54, 84, 73, 31], 30) == 4\n    assert candidate([83, 92, 30, 60], 19) == 3\n    assert candidate([14, 51, 99, 64], 15) == 2\n    assert candidate([7, 60, 16, 2], 17) == 3\n    assert candidate([7, 89, 54, 54], 5) == 2\n    assert candidate([43, 86, 33, 18], 23) == 3\n\ndef test_check():\n    check(maximumBeauty)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2892_isGood", "language": "py", "prompt": "from typing import List\n\ndef isGood(nums: List[int]) -> bool:\n    \"\"\"You are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\nbase[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\nReturn true if the given array is good, otherwise return false.\nNote: A permutation of integers represents an arrangement of these numbers.\nExample 1:\nInput: nums = [2, 1, 3]\nOutput: false\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\nExample 2:\nInput: nums = [1, 3, 3, 2]\nOutput: true\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.\nExample 3:\nInput: nums = [1, 1]\nOutput: true\nExplanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.\nExample 4:\nInput: nums = [3, 4, 4, 1, 2, 1]\nOutput: false\nExplanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.\nConstraints:\n * 1 <= nums.length <= 100\n * 1 <= num[i] <= 200\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2892_isGood.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 3, 2]) == True\n    assert candidate([2, 1, 3]) == False\n    assert candidate([1, 1]) == True\n    assert candidate([1, 2, 2]) == True\n    assert candidate([3, 4, 4, 1, 2, 1]) == False\n    assert candidate([2, 2, 1]) == True\n    assert candidate([1]) == False\n    assert candidate([2]) == False\n    assert candidate([3]) == False\n    assert candidate([3, 3, 1, 2]) == True\n    assert candidate([1, 3, 4, 4, 2]) == True\n    assert candidate([4]) == False\n    assert candidate([1, 4, 2, 4, 3]) == True\n    assert candidate([5]) == False\n    assert candidate([4, 4, 1, 2, 3]) == True\n    assert candidate([6]) == False\n    assert candidate([4, 4, 2, 3, 1]) == True\n    assert candidate([8]) == False\n    assert candidate([9]) == False\n    assert candidate([5, 5, 1, 3, 2, 4]) == True\n    assert candidate([1, 5, 3, 6, 6, 4, 2]) == True\n    assert candidate([5, 4, 6, 6, 3, 2, 1]) == True\n    assert candidate([10]) == False\n    assert candidate([6, 3, 6, 4, 2, 1, 5]) == True\n    assert candidate([6, 3, 6, 5, 1, 2, 4]) == True\n    assert candidate([12]) == False\n    assert candidate([7, 2, 5, 7, 3, 6, 1, 4]) == True\n    assert candidate([1, 2, 8, 8, 6, 5, 4, 3, 7]) == True\n    assert candidate([1, 8, 4, 8, 2, 7, 6, 3, 5]) == True\n    assert candidate([13]) == False\n    assert candidate([14]) == False\n    assert candidate([2, 8, 6, 1, 7, 5, 3, 4, 8]) == True\n    assert candidate([4, 1, 3, 2, 8, 5, 8, 6, 7]) == True\n    assert candidate([15]) == False\n    assert candidate([7, 2, 1, 5, 6, 8, 8, 4, 3]) == True\n    assert candidate([82]) == False\n    assert candidate([1, 8]) == False\n    assert candidate([8, 6, 2, 5, 7, 4, 1, 8, 3]) == True\n    assert candidate([4, 6, 1, 9, 8, 9, 5, 7, 3, 2]) == True\n    assert candidate([1, 13]) == False\n    assert candidate([2, 3]) == False\n    assert candidate([9, 5, 8, 9, 6, 1, 2, 7, 4, 3]) == True\n    assert candidate([1, 2, 10, 9, 10, 5, 6, 4, 8, 7, 3]) == True\n    assert candidate([1, 9, 2, 6, 5, 4, 7, 10, 3, 10, 8]) == True\n    assert candidate([1, 10, 7, 8, 10, 4, 6, 3, 5, 2, 9]) == True\n    assert candidate([8, 2, 1, 4, 3, 10, 9, 5, 10, 7, 6]) == True\n    assert candidate([10, 9, 5, 3, 6, 4, 2, 10, 8, 7, 1]) == True\n    assert candidate([2, 9]) == False\n    assert candidate([1, 4, 5, 10, 11, 2, 9, 7, 6, 11, 3, 8]) == True\n    assert candidate([2, 11]) == False\n    assert candidate([11, 5, 9, 10, 3, 11, 1, 2, 8, 4, 7, 6]) == True\n    assert candidate([11, 9, 8, 1, 12, 4, 2, 15, 16, 10, 13, 6, 3, 16, 7, 5, 14]) == True\n    assert candidate([11, 16, 9, 5, 14, 13, 4, 1, 3, 16, 15, 8, 10, 7, 12, 2, 6]) == True\n    assert candidate([2, 12]) == False\n    assert candidate([17, 1, 18, 11, 9, 4, 7, 6, 3, 21, 16, 14, 10, 8, 20, 21, 5, 2, 12, 19, 15, 13]) == True\n    assert candidate([3, 1]) == False\n    assert candidate([20, 13, 7, 10, 16, 12, 19, 2, 21, 17, 3, 11, 5, 15, 21, 1, 18, 6, 8, 14, 9, 4]) == True\n    assert candidate([8, 19, 16, 17, 20, 15, 11, 4, 22, 3, 13, 10, 1, 18, 9, 12, 22, 7, 6, 2, 5, 21, 14]) == True\n    assert candidate([22, 1, 17, 13, 8, 22, 9, 5, 21, 6, 14, 12, 10, 11, 2, 18, 4, 7, 19, 20, 3, 15, 16]) == True\n    assert candidate([21, 15, 16, 13, 3, 4, 11, 22, 7, 14, 20, 10, 18, 17, 6, 8, 9, 1, 19, 5, 2, 12, 23, 24, 24]) == True\n    assert candidate([22, 24, 24, 12, 17, 15, 14, 16, 8, 11, 23, 5, 2, 10, 6, 21, 9, 13, 3, 20, 19, 7, 4, 18, 1]) == True\n    assert candidate([3, 2]) == False\n    assert candidate([6, 16, 26, 9, 4, 24, 12, 26, 22, 3, 11, 23, 15, 2, 17, 5, 1, 21, 14, 19, 18, 20, 13, 25, 8, 7, 10]) == True\n    assert candidate([29, 24, 5, 6, 4, 25, 9, 8, 21, 13, 27, 7, 20, 18, 3, 15, 23, 28, 29, 19, 17, 10, 22, 26, 1, 11, 12, 14, 16, 2]) == True\n    assert candidate([25, 21, 6, 10, 20, 15, 16, 26, 7, 3, 30, 1, 12, 29, 11, 30, 14, 19, 2, 28, 23, 9, 8, 24, 17, 5, 4, 27, 22, 18, 13]) == True\n    assert candidate([3, 11]) == False\n    assert candidate([2, 25, 20, 30, 4, 6, 1, 29, 15, 11, 10, 19, 14, 12, 32, 3, 21, 27, 16, 17, 28, 13, 5, 32, 8, 24, 22, 7, 31, 23, 18, 26, 9]) == True\n    assert candidate([4, 10]) == False\n    assert candidate([4, 12]) == False\n    assert candidate([5, 9]) == False\n    assert candidate([5, 12]) == False\n    assert candidate([5, 13]) == False\n    assert candidate([4, 29, 5, 24, 19, 1, 8, 31, 18, 21, 9, 28, 32, 27, 10, 17, 22, 2, 11, 15, 13, 23, 6, 16, 7, 30, 12, 33, 14, 25, 33, 26, 3, 20]) == True\n    assert candidate([6, 1]) == False\n    assert candidate([30, 32, 1, 35, 19, 34, 4, 23, 18, 6, 11, 8, 22, 33, 31, 16, 17, 20, 24, 10, 21, 7, 14, 15, 29, 9, 12, 2, 36, 3, 26, 36, 5, 13, 25, 27, 28]) == True\n    assert candidate([5, 34, 42, 17, 9, 44, 40, 24, 38, 21, 30, 14, 39, 11, 18, 36, 4, 43, 12, 32, 2, 6, 45, 46, 37, 47, 8, 3, 26, 1, 31, 28, 16, 20, 22, 35, 25, 15, 10, 29, 7, 27, 19, 33, 41, 47, 23, 13]) == True\n    assert candidate([6, 7]) == False\n    assert candidate([5, 41, 8, 2, 32, 24, 9, 44, 27, 6, 22, 36, 14, 21, 43, 28, 45, 37, 17, 18, 20, 26, 3, 12, 10, 33, 30, 13, 29, 38, 4, 47, 46, 15, 25, 11, 1, 19, 47, 16, 39, 31, 40, 34, 23, 7, 42, 35]) == True\n    assert candidate([6, 10]) == False\n    assert candidate([6, 12]) == False\n    assert candidate([6, 15]) == False\n    assert candidate([7, 9]) == False\n    assert candidate([8, 4]) == False\n    assert candidate([8, 6]) == False\n    assert candidate([26, 35, 9, 3, 46, 33, 13, 8, 47, 27, 17, 40, 15, 20, 37, 12, 16, 44, 34, 2, 14, 30, 1, 29, 10, 11, 25, 18, 43, 42, 6, 5, 47, 38, 41, 32, 24, 31, 7, 4, 45, 19, 39, 22, 28, 36, 21, 23]) == True\n    assert candidate([8, 9]) == False\n    assert candidate([8, 10]) == False\n    assert candidate([8, 13]) == False\n    assert candidate([32, 39, 25, 49, 6, 48, 9, 7, 34, 3, 8, 26, 14, 27, 43, 30, 1, 21, 36, 10, 31, 38, 40, 12, 2, 46, 20, 15, 11, 24, 22, 28, 33, 4, 19, 18, 44, 41, 35, 29, 16, 37, 45, 47, 49, 23, 42, 13, 5, 17]) == True\n    assert candidate([9, 7]) == False\n    assert candidate([18, 35, 44, 41, 8, 33, 28, 9, 3, 14, 43, 56, 6, 10, 25, 53, 61, 22, 17, 23, 32, 50, 31, 13, 1, 29, 45, 34, 30, 48, 36, 58, 46, 15, 4, 7, 52, 60, 16, 12, 54, 19, 24, 40, 26, 55, 49, 42, 21, 38, 2, 20, 57, 61, 5, 37, 47, 27, 39, 11, 51, 59]) == True\n    assert candidate([9, 9]) == False\n    assert candidate([10, 4]) == False\n    assert candidate([10, 11]) == False\n    assert candidate([11, 1]) == False\n    assert candidate([60, 62, 16, 59, 8, 49, 51, 41, 42, 40, 46, 3, 10, 13, 53, 2, 63, 54, 32, 33, 31, 14, 12, 15, 1, 66, 61, 18, 52, 4, 55, 11, 26, 28, 47, 21, 25, 43, 65, 58, 45, 50, 17, 64, 23, 22, 30, 9, 38, 19, 24, 44, 37, 39, 48, 20, 35, 36, 27, 34, 56, 57, 29, 5, 7, 6, 66]) == True\n    assert candidate([46, 9, 21, 14, 24, 15, 6, 58, 22, 40, 63, 39, 49, 65, 30, 5, 43, 36, 29, 55, 67, 45, 61, 35, 67, 56, 16, 23, 50, 17, 19, 13, 26, 66, 47, 59, 2, 51, 27, 28, 31, 1, 44, 42, 53, 57, 11, 25, 4, 54, 37, 20, 48, 52, 41, 32, 10, 7, 64, 34, 60, 12, 33, 38, 3, 18, 62, 8]) == True\n    assert candidate([11, 5]) == False\n    assert candidate([57, 40, 35, 55, 42, 24, 43, 29, 30, 59, 21, 52, 67, 72, 32, 78, 13, 51, 36, 48, 74, 64, 69, 65, 9, 4, 37, 31, 6, 27, 7, 2, 38, 61, 15, 19, 71, 49, 44, 47, 46, 54, 76, 26, 63, 17, 22, 3, 16, 12, 18, 41, 25, 62, 8, 10, 23, 50, 56, 11, 20, 5, 28, 77, 66, 53, 14, 33, 68, 34, 73, 45, 1, 78, 39, 70, 75, 60, 58]) == True\n    assert candidate([14, 38, 18, 10, 21, 9, 67, 68, 23, 19, 80, 13, 74, 75, 32, 55, 65, 45, 5, 28, 43, 8, 17, 42, 40, 44, 31, 1, 7, 25, 6, 47, 27, 50, 4, 76, 63, 52, 71, 34, 83, 56, 77, 81, 16, 12, 60, 79, 46, 41, 24, 35, 33, 2, 49, 70, 78, 36, 48, 69, 26, 66, 37, 72, 61, 30, 22, 58, 20, 39, 82, 64, 73, 59, 57, 3, 51, 29, 83, 53, 15, 54, 11, 62]) == True\n\ndef test_check():\n    check(isGood)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2893_maxScore", "language": "py", "prompt": "from typing import List\n\ndef maxScore(nums: List[int], x: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and a positive integer x.\nYou are initially at position 0 in the array and you can visit other positions according to the following rules:\n * If you are currently in position i, then you can move to any position j such that i < j.\n * For each position i that you visit, you get a score of nums[i].\n * If you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x.\nReturn the maximum total score you can get.\nNote that initially you have nums[0] points.\nExample 1:\nInput: nums = [2,3,6,1,9,2], x = 5\nOutput: 13\nExplanation: We can visit the following positions in the array: 0 -> 2 -> 3 -> 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13.\nExample 2:\nInput: nums = [2,4,6,8], x = 3\nOutput: 20\nExplanation: All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20.\nConstraints:\n * 2 <= nums.length <= 105\n * 1 <= nums[i], x <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2893_maxScore.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 6, 1, 9, 2], 5) == 13\n    assert candidate([2, 4, 6, 8], 3) == 20\n    assert candidate([38, 92, 23, 30, 25, 96, 6, 71, 78, 77, 33, 23, 71, 48, 87, 77, 53, 28, 6, 20, 90, 83, 42, 21, 64, 95, 84, 29, 22, 21, 33, 36, 53, 51, 85, 25, 80, 56, 71, 69, 5, 21, 4, 84, 28, 16, 65, 7], 52) == 1545\n    assert candidate([18, 13, 60, 61, 57, 21, 10, 98, 51, 3, 13, 36, 72, 70, 68, 62, 52, 83, 63, 63, 53, 42, 59, 98, 95, 48, 22, 64, 94, 80, 14, 14], 2) == 1633\n    assert candidate([90, 87, 79, 59, 91, 19, 96], 51) == 419\n    assert candidate([96, 81, 48, 3, 60, 78, 74, 82, 14, 7, 87, 72, 42, 41, 80, 4, 92, 82, 59, 16, 19, 94, 70, 45, 83, 58, 2, 91, 11, 96, 17, 62, 79, 34, 44, 47, 89, 76, 85, 21, 5, 57, 35, 51], 24) == 1952\n    assert candidate([99, 88, 98, 15, 34, 40, 29, 81, 2, 6, 12, 9, 82, 93, 5, 81, 84, 71, 83, 31, 12, 22, 9, 65, 56, 9, 68, 79, 39, 84, 50, 7, 25, 3, 49], 19) == 1363\n    assert candidate([8, 50, 65, 85, 8, 73, 55, 50, 29, 95, 5, 68, 52, 79], 74) == 470\n    assert candidate([45, 9, 20, 89, 18, 94, 12, 51, 38, 77, 100, 95, 46, 1, 76, 41, 8, 90, 82, 33, 92, 32, 76, 43, 6, 61, 85, 40, 63, 10, 74, 18, 44, 43, 17, 100, 17, 33, 100, 77, 97, 8, 99, 85, 88, 9, 63, 31, 32], 68) == 1694\n    assert candidate([87, 23, 53, 57, 21, 60, 68, 84, 66, 49, 48, 61, 32, 95, 71, 11, 15, 61, 10, 86, 50, 53, 38, 20, 63], 92) == 814\n    assert candidate([39, 47, 76, 64, 90, 17, 30, 57, 19, 40, 9, 76, 68, 33, 36, 61, 19, 93, 8, 1, 31, 2, 55, 70, 24, 85, 97, 40, 35, 93, 56, 67, 64, 67, 52, 2, 75, 13, 89, 97], 77) == 1390\n    assert candidate([92, 87, 85, 27, 27, 10, 24, 94, 26, 78, 24, 61, 4, 46, 3, 76, 29, 65, 52, 61, 34, 67, 74, 61, 90, 40, 81, 60, 10, 98, 87, 57, 28, 77, 55, 33, 10, 91, 57, 72, 3, 72, 4, 39, 99], 70) == 1551\n    assert candidate([20, 90, 68], 39) == 178\n    assert candidate([43, 100, 72, 33, 45, 9, 51, 10, 22, 42, 7, 74, 41, 68, 100, 24, 20, 20, 79, 30, 99, 82], 1) == 1060\n    assert candidate([100, 87, 29, 94, 56, 41, 53, 98, 34, 17, 52, 3, 54, 51, 22, 39, 37, 9, 76], 40) == 670\n    assert candidate([55, 37, 87, 45, 96, 7, 66, 62, 91, 51, 33, 92, 65, 99], 81) == 625\n    assert candidate([2, 75, 65, 43], 39) == 146\n    assert candidate([74, 82, 80, 95, 72, 23, 49, 43, 76, 28, 87, 27, 58, 39, 7, 77, 26, 63, 56, 96, 77, 75, 82, 60, 90, 69, 83, 20, 13, 82, 16, 90, 40, 23, 36, 17, 77, 15, 18, 10], 40) == 1571\n    assert candidate([75, 99, 45, 34, 63, 19, 71, 48, 73, 66, 2, 14, 76, 41, 92, 23, 6, 31, 49, 6, 70, 40, 69, 25, 97, 58, 20, 84, 21, 37, 100, 75, 73, 10, 59, 87, 30], 96) == 1181\n    assert candidate([9, 58, 17, 54, 91, 90, 32, 6, 13, 67, 24, 80, 8, 56, 29, 66, 85, 38, 45, 13, 20, 73, 16, 98, 28, 56, 23, 2, 47, 85, 11, 97, 72, 2, 28, 52, 33], 90) == 886\n    assert candidate([96, 89, 30, 38, 58, 26, 47, 52, 27, 77, 87, 92, 6], 83) == 423\n    assert candidate([35, 11, 46, 34, 57, 2, 21, 98, 85, 7, 65, 26, 22, 14, 48, 14, 38, 72, 56, 63, 73, 11, 70, 92, 62, 3, 9, 72, 32, 99, 8, 71, 85, 66, 73, 29, 74, 88, 41, 24, 21, 40, 41, 19, 49, 90], 11) == 1948\n    assert candidate([31, 17, 68, 37, 56, 25, 43, 71, 46, 59, 6, 30, 98, 69, 91], 78) == 443\n    assert candidate([53, 49, 57, 84, 69, 39, 97, 78, 19, 42, 10, 16, 16, 62, 79, 74, 49, 59, 21, 29, 76, 6, 14, 64, 76, 29, 8, 27, 26], 80) == 855\n    assert candidate([42, 60, 23, 29, 66, 46, 82, 83, 97, 56, 71, 39, 19, 31, 23, 60, 34, 63, 14, 73, 4, 92, 37, 65, 50, 49, 100, 72, 63], 88) == 943\n    assert candidate([79, 60, 100, 62, 25, 2, 86, 9, 66, 67, 20, 14, 92, 27, 93, 52, 12, 67, 9, 8, 69, 21, 31, 77, 71, 52, 60], 84) == 906\n    assert candidate([40, 54, 14, 66, 95, 97, 3, 10, 34, 100, 68, 35, 54, 35, 48, 3, 79, 69, 71, 2, 44, 82, 85, 67, 47, 5, 37, 61, 68, 64, 61, 49, 36, 87, 77, 57, 69, 31, 40, 45, 50, 17, 2, 50, 71], 69) == 1564\n    assert candidate([53, 15, 2, 58, 28, 93, 55, 41, 88, 69, 93, 67, 67, 40, 37, 99, 17, 30, 10, 7, 94, 50, 73, 53, 37, 84, 50, 37, 81, 91, 72, 28, 22, 22, 67], 82) == 1165\n    assert candidate([41, 35, 43, 93, 79, 62, 66, 16, 92, 29, 74, 67, 93, 100, 56, 73], 69) == 714\n    assert candidate([67, 9, 2, 39, 28, 92, 99, 62, 37, 75, 3, 53, 26, 32, 76, 14, 88, 16, 68, 56, 60], 91) == 727\n    assert candidate([95, 29, 91, 86, 23, 30, 46, 95, 6, 84, 62, 23, 71, 6, 13, 19, 25, 65, 29, 6, 65, 92], 28) == 886\n    assert candidate([74, 47, 86, 24, 44, 91, 88, 64, 37], 24) == 436\n    assert candidate([36, 62, 82, 46, 40], 54) == 266\n    assert candidate([66, 28, 100, 33, 15, 47, 80, 43, 61, 16, 10], 3) == 487\n    assert candidate([62, 1, 66, 47, 85, 69, 35, 42, 42, 7, 20, 91], 41) == 436\n    assert candidate([8, 23, 19, 37, 12, 78, 25, 62, 99, 88, 86, 27, 1, 78, 40, 57, 5, 62, 12, 93, 10, 42], 60) == 578\n    assert candidate([35, 49, 85, 37, 74, 50, 77, 21, 68, 49, 86, 92, 36, 31, 70, 66, 10, 75, 6, 70, 55, 72, 40, 99, 24, 74, 55, 46, 4, 46, 22, 36, 58, 36, 68, 68, 54, 9, 36, 76, 57, 83, 86, 92, 6, 47, 44, 31], 55) == 1797\n    assert candidate([75, 96, 53, 79, 89, 57, 75, 94, 24, 75, 71, 8, 44, 70, 12, 92, 38, 24, 3, 38, 88, 10], 31) == 1057\n    assert candidate([93, 68, 62, 23, 56, 95, 7, 38, 43, 87, 76, 60, 34, 32, 40, 4, 49, 15, 41, 18, 76, 50], 46) == 776\n    assert candidate([53, 78, 79, 81, 75, 36, 35, 37], 61) == 360\n    assert candidate([60, 55, 100, 61, 23, 45, 43, 31], 62) == 301\n    assert candidate([98, 48, 29, 44, 96, 57], 40) == 303\n    assert candidate([96, 18, 77, 100, 88, 19, 41, 32, 15, 41, 14], 30) == 405\n    assert candidate([46, 69, 20, 84, 52, 23, 13, 52, 68, 49, 99, 23, 14, 60, 56, 71, 68, 43, 44, 66, 96, 58, 94], 6) == 1208\n    assert candidate([85, 12], 79) == 85\n    assert candidate([63, 95, 35, 79, 39, 14, 55, 5, 44, 57, 31, 23, 67, 61, 75, 61, 40, 51, 55, 27, 53, 100, 15, 100, 23, 89, 76, 99, 31, 47, 49, 52, 47], 49) == 1419\n    assert candidate([60, 94, 97, 97, 57, 16, 45, 84, 10, 44, 16], 10) == 584\n    assert candidate([24, 28, 63, 5, 13, 83, 2, 15, 81, 34, 9, 10, 54, 88, 12, 36, 81, 87, 81, 42, 56, 82, 85, 85, 31, 47, 29, 59, 21, 55, 73, 31, 80, 75, 61, 70, 82, 90, 23, 44, 71, 94], 57) == 1665\n    assert candidate([92, 7, 95, 1, 79, 49, 58, 77, 54, 12, 38, 18, 9, 23, 75, 98, 76, 86, 40, 33, 22, 14, 62, 67, 60, 36, 67, 51, 85, 100, 75, 30, 55, 63, 28, 100, 94, 4], 89) == 1282\n    assert candidate([76, 24, 85, 30, 37, 86, 3, 50, 94, 19, 48, 95, 31], 93) == 441\n    assert candidate([50, 19, 12, 63, 20, 33, 21, 77, 25, 24, 46, 22, 46, 57, 86, 65, 13, 99, 36, 23, 85, 99, 10], 7) == 949\n    assert candidate([68, 26, 50, 20, 54, 30, 12, 66, 30, 75, 31, 89, 78, 30, 17, 38, 97, 15, 43, 39, 82, 25, 3, 78, 66, 6, 68, 86, 29, 20, 99], 97) == 985\n    assert candidate([62, 1, 18, 37, 87, 73, 16], 44) == 233\n    assert candidate([35, 60, 95, 31, 19, 87, 19, 37, 78, 82, 81, 96, 23, 58, 93, 96, 92, 41, 48, 67, 90, 70, 6, 97, 6, 2, 77, 47, 34, 17, 51, 15, 13, 93, 12, 46], 1) == 1895\n    assert candidate([21, 29], 68) == 50\n    assert candidate([37, 98, 2, 60, 89, 82, 99, 80, 28, 54, 12, 15, 16, 88, 82, 72, 63, 8, 45, 56, 99, 19, 29, 38, 26, 35], 94) == 813\n    assert candidate([84, 8, 44, 48, 85, 77, 18, 34, 17, 46, 53, 84, 52, 77, 12, 94, 18, 67, 46, 45], 44) == 684\n    assert candidate([50, 1, 21, 95, 20, 65, 80, 75, 47, 74, 95, 23, 89, 61, 48, 25, 84, 76, 81, 51, 52, 37, 84, 24, 15, 32, 11, 88], 65) == 982\n    assert candidate([54, 2, 22, 17, 41, 23, 51, 16, 5, 42, 12, 77, 9, 71, 92, 87, 78, 50, 14, 74, 72, 42, 90], 52) == 780\n    assert candidate([3, 34, 22, 49, 66, 40, 13, 7, 71, 35, 1, 96, 36, 83, 31, 55, 60, 20, 90, 76, 51, 95, 21, 47, 82, 91, 75, 99, 72, 48, 53, 2, 56, 64], 70) == 1105\n    assert candidate([75, 34, 33, 97, 3, 25, 4, 71, 8, 73], 27) == 377\n    assert candidate([27, 91, 78, 7, 48, 79, 23, 34, 17, 42, 94, 85, 48, 36, 26, 57, 53, 10, 38, 32, 45, 89, 74, 5, 35, 39, 9, 59, 71, 39, 1, 60, 39, 50, 47, 47, 48, 74, 71, 91, 85, 86, 22], 74) == 1292\n    assert candidate([26, 97, 16, 94, 49, 98, 78, 84, 76, 21, 75, 88, 22, 49, 34, 98, 7, 94, 100, 98, 72, 70, 47, 6, 56, 8, 50, 9, 37, 37, 34, 36, 48, 95, 8, 63, 35, 81, 26, 57, 91, 4, 83, 38, 64, 45, 98, 51], 86) == 1919\n    assert candidate([14, 64, 4, 14, 94, 58, 67, 15, 79, 26, 66, 34, 47, 42, 20, 67, 5, 21, 63, 73, 44, 96, 29, 72, 26, 20, 84, 84, 62, 39, 93, 53, 13, 35, 32, 82, 22, 58], 87) == 1252\n    assert candidate([42, 98, 75, 46, 10, 21, 10, 35, 4, 59, 100, 78, 62, 51, 84, 99, 92, 2, 4, 12, 59, 8, 42, 85, 86, 81, 20, 1, 43, 41, 56, 2, 30, 25, 21, 56, 43, 82, 38, 45, 89, 54, 15, 63, 69, 20, 64], 45) == 1442\n    assert candidate([99, 80, 22, 56, 93, 18, 65, 63, 8, 16, 80], 39) == 465\n    assert candidate([2, 17, 64, 100, 23, 2, 8, 93, 31, 6, 16, 28, 32, 98, 18, 33, 22, 54, 73, 35, 47, 16, 76, 74, 17, 5, 6, 1, 7, 19, 100, 17, 70, 98, 94, 5, 78, 38, 10, 80], 59) == 1246\n    assert candidate([15, 10, 55, 18, 55, 54, 63, 79, 97, 9, 98, 10, 95, 3, 88, 43, 75, 17, 19, 36, 64, 44, 85, 10, 45, 42, 58, 75, 79, 7, 55, 75, 50, 89, 8, 89, 58, 87, 30, 36, 59, 59, 25], 4) == 2072\n    assert candidate([97, 60, 79, 8, 79, 39, 37, 66, 78, 58, 32, 59, 83, 23, 36, 82, 34, 70, 17, 17, 33, 91, 1, 55, 54, 45, 30, 11, 30, 19, 8, 8, 98, 36, 39, 30, 87, 34, 99, 83, 6, 90], 91) == 1214\n    assert candidate([52, 83, 17, 67, 51, 47, 8, 86, 59, 56, 96, 74, 36, 38, 73, 96, 95, 50, 25, 45, 5, 48, 16, 3, 65, 22, 92, 11, 80, 46, 15], 4) == 1497\n    assert candidate([38, 97, 36, 48, 88, 68, 66, 39, 40, 36, 39, 53, 96, 21, 3, 28, 86, 94, 31, 53, 76, 24, 54, 45, 10, 99, 92, 21, 52, 25, 15, 42, 12, 17, 89, 51], 14) == 1547\n    assert candidate([6, 13, 9], 98) == 6\n    assert candidate([52, 66, 40, 14, 6, 26, 37, 93, 23, 2, 40, 10, 42, 1, 85, 22, 45, 46, 16, 14, 70, 76, 48, 100, 68, 85, 72, 31, 15, 56, 65, 61, 83, 90, 31, 31, 2, 27, 55, 91, 50, 32], 18) == 1679\n    assert candidate([8, 60, 58], 18) == 126\n    assert candidate([74, 24, 7, 80, 13, 46, 52, 19, 20, 6, 70, 95, 20, 82, 97, 32, 28, 16, 4, 21, 19, 56, 9, 56, 30, 99, 64, 94, 61, 5, 28, 51, 58, 49, 49, 92, 68, 66, 17, 84, 54], 51) == 1331\n    assert candidate([99, 30, 17, 54, 77, 71, 48, 19, 80, 43, 20, 59, 95, 76, 64, 32, 29, 84, 80, 33, 90, 11, 76, 65, 76, 51, 50, 36, 99], 6) == 1533\n    assert candidate([21, 99, 29, 76, 1, 25, 62, 67, 82, 90, 99, 12, 51, 53, 62, 78, 41, 14, 55, 66, 90, 73, 30, 76, 97], 60) == 935\n    assert candidate([59, 78, 89, 17, 43, 89, 21, 43, 73, 76, 68, 94, 69, 76, 26, 3, 86, 65, 45, 29, 68, 53, 41, 87, 79, 37, 11, 55, 82, 97, 9, 48, 64, 13, 56, 56, 60, 22, 22, 50, 23, 51, 14, 36, 2], 81) == 1655\n    assert candidate([5, 2, 24, 57, 9, 5, 71, 90, 20, 80, 9, 99, 45, 27, 60, 7, 65, 23, 55, 46, 49, 57, 7, 22, 28, 35], 77) == 661\n    assert candidate([76, 60, 37, 9, 31, 30, 86, 64, 83, 71, 70, 18, 32, 74, 38, 11, 6, 4, 9, 62, 52, 14, 20, 41, 60, 54, 40, 15, 90, 52, 27, 46, 47, 1, 7, 79, 22, 49, 99, 82], 100) == 1230\n    assert candidate([20, 89, 67, 20, 1, 84, 36, 92, 41, 79, 35, 85, 58, 76, 42, 12, 96, 38, 44, 93, 54, 80, 44, 49, 55, 6, 34, 84, 3, 74, 13], 23) == 1403\n    assert candidate([69, 86, 56, 72, 35, 8, 57, 10, 42, 90, 92, 46, 7, 22, 69, 16, 62, 9, 57, 74, 52, 49, 14, 23, 13, 43, 73, 63, 88, 18, 31, 89, 94, 3, 23, 14, 39, 82, 70, 78], 95) == 1234\n    assert candidate([28, 66, 78, 21, 47, 6, 18, 60, 8, 82, 34, 19, 62, 26, 34, 56, 59, 56, 7, 75, 35, 42, 19, 23, 92, 88, 83, 65, 74, 24, 69, 83, 12, 63, 4, 71, 78, 40, 64, 98, 15, 17, 81, 19], 84) == 1430\n    assert candidate([77, 48, 31, 26], 53) == 108\n    assert candidate([33, 69, 10, 90, 86, 82, 66, 19, 28, 33, 9, 98, 87, 7, 7, 17, 69, 79, 85, 65, 31, 38, 75], 21) == 1042\n    assert candidate([16, 99, 70, 71, 62, 42], 83) == 190\n    assert candidate([55, 64, 59, 68, 50, 32, 56, 75, 84, 53, 97, 7, 40, 62, 56, 80, 36, 52, 43, 77, 82, 47, 7, 96, 94, 43, 77, 71, 36, 92], 48) == 1267\n    assert candidate([61, 12, 92, 54, 88, 10, 49, 19, 83, 24, 82, 29, 64, 96, 67, 12, 27, 97, 15, 96, 35, 43, 92, 96, 28, 84, 49, 72, 16, 92, 29, 41], 73) == 1151\n    assert candidate([90, 84, 13, 56, 24, 54, 29, 20], 31) == 328\n    assert candidate([94, 12, 26, 83, 92, 8, 64, 21, 80, 32, 47, 71, 30], 66) == 460\n    assert candidate([42, 11, 1], 16) == 42\n    assert candidate([22, 56, 65, 84, 34, 80, 56, 63, 22, 52, 94, 29, 99, 45, 20, 66, 50, 62, 44, 10, 3, 70, 13, 23, 99, 99, 71, 61, 11, 28, 48, 66, 41, 4, 5, 18, 22, 44, 36, 92, 10, 90, 20], 36) == 1706\n    assert candidate([6, 45, 84, 69, 49, 47, 49, 13, 6, 25, 82, 38, 1, 4, 99, 68, 89, 78, 53, 29, 73, 96, 71, 58, 88, 18, 97, 61, 37, 80, 20, 93, 77, 38, 84], 40) == 1336\n    assert candidate([85, 71, 5, 91, 31, 75, 36, 4, 42, 81, 92, 42, 40, 14, 57, 72, 33, 66, 4, 1, 26, 81, 45, 56, 64, 76, 43, 39, 53, 9, 37, 38, 53, 26, 2, 55, 6, 70, 9, 45, 35, 60, 73, 38, 62, 58, 3], 86) == 1343\n    assert candidate([32, 53, 27, 49, 7, 40, 22, 85, 53, 46, 28, 95, 59, 85, 78, 16, 15, 63, 24, 64, 90, 9, 84, 9, 66, 41, 75, 8, 22, 53, 72, 29, 15, 32, 49, 29, 37, 66, 82, 63, 59, 58], 70) == 1221\n    assert candidate([76, 100, 47, 98, 31, 46, 73, 18, 40, 46, 4, 70, 33, 43, 58, 21, 72, 24, 97, 17, 18, 61, 86, 9, 8, 96, 54, 55], 43) == 997\n    assert candidate([78, 66, 10, 19, 59, 87, 27, 40, 49, 80, 25, 3, 33, 54, 29, 97, 9, 36, 73, 80, 59, 68], 97) == 626\n    assert candidate([13, 26, 3, 19, 21, 43, 33, 62, 32, 61, 40, 22, 56, 69, 15, 21, 10, 87, 84, 66, 26, 35, 54, 64, 7, 53, 32, 14, 7], 76) == 649\n    assert candidate([73, 93, 27, 67, 11, 40, 18, 88, 78, 77, 79, 80, 15, 100, 83, 33, 36, 63, 90, 44, 89, 23, 25, 79, 56, 41, 8, 62, 32, 98, 58], 10) == 1641\n    assert candidate([38, 97, 76, 72, 85, 23, 70, 90, 89, 1, 65, 50, 1, 93, 41, 33, 94, 43, 45, 39, 98, 52, 85, 18, 70, 79, 79, 33, 22, 93, 72, 25, 20, 42, 19, 66, 64, 64, 95, 29, 3, 75, 54, 40, 17, 86, 71, 23, 26, 23], 66) == 1683\n\ndef test_check():\n    check(maxScore)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2894_findMaximumElegance", "language": "py", "prompt": "from typing import List\n\ndef findMaximumElegance(items: List[List[int]], k: int) -> int:\n    \"\"\"You are given a 0-indexed 2D integer array items of length n and an integer k.\nitems[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\nLet's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\nYour task is to find the maximum elegance from all subsequences of size k in items.\nReturn an integer denoting the maximum elegance of a subsequence of items with size exactly k.\nNote: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\nExample 1:\nInput: items = [[3,2],[5,1],[10,1]], k = 2\nOutput: 17\nExplanation: In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance.\nExample 2:\nInput: items = [[3,1],[3,1],[2,2],[5,3]], k = 3\nOutput: 19\nExplanation: In this example, we have to select a subsequence of size 3.\nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3].\nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3].\nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.\nExample 3:\nInput: items = [[1,1],[2,1],[3,1]], k = 3\nOutput: 7\nExplanation: In this example, we have to select a subsequence of size 3.\nWe should select all the items.\nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1].\nHence, the maximum elegance is 6 + 12 = 7.\nConstraints:\n * 1 <= items.length == n <= 105\n * items[i].length == 2\n * items[i][0] == profiti\n * items[i][1] == categoryi\n * 1 <= profiti <= 109\n * 1 <= categoryi <= n\n * 1 <= k <= n\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2894_findMaximumElegance.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[3, 2], [5, 1], [10, 1]], 2) == 17\n    assert candidate([[3, 1], [3, 1], [2, 2], [5, 3]], 3) == 19\n    assert candidate([[1, 1], [2, 1], [3, 1]], 3) == 7\n    assert candidate([[1, 1], [1, 2]], 2) == 6\n    assert candidate([[1, 1], [4, 1]], 1) == 5\n    assert candidate([[1, 1], [4, 1]], 2) == 6\n    assert candidate([[1, 1], [6, 1]], 1) == 7\n    assert candidate([[1, 1], [6, 1]], 2) == 8\n    assert candidate([[1, 1], [8, 2]], 2) == 13\n    assert candidate([[1, 2], [6, 2]], 1) == 7\n    assert candidate([[1, 2], [10, 1]], 1) == 11\n    assert candidate([[2, 1], [6, 1]], 2) == 9\n    assert candidate([[2, 1], [7, 1]], 2) == 10\n    assert candidate([[2, 1], [9, 2]], 1) == 10\n    assert candidate([[2, 2], [2, 2]], 1) == 3\n    assert candidate([[2, 2], [2, 2]], 2) == 5\n    assert candidate([[2, 2], [3, 1]], 2) == 9\n    assert candidate([[2, 2], [6, 1]], 2) == 12\n    assert candidate([[3, 1], [1, 2]], 2) == 8\n    assert candidate([[3, 1], [9, 1]], 2) == 13\n    assert candidate([[3, 1], [9, 2]], 1) == 10\n    assert candidate([[3, 1], [10, 2]], 2) == 17\n    assert candidate([[3, 2], [3, 1]], 1) == 4\n    assert candidate([[3, 2], [5, 2]], 1) == 6\n    assert candidate([[3, 2], [10, 1]], 2) == 17\n    assert candidate([[3, 2], [10, 2]], 2) == 14\n    assert candidate([[4, 1], [7, 2]], 2) == 15\n    assert candidate([[4, 1], [9, 2]], 1) == 10\n    assert candidate([[4, 2], [2, 1]], 2) == 10\n    assert candidate([[4, 2], [3, 1]], 2) == 11\n    assert candidate([[4, 2], [5, 2]], 1) == 6\n    assert candidate([[4, 2], [7, 2]], 1) == 8\n    assert candidate([[4, 2], [8, 1]], 2) == 16\n    assert candidate([[4, 2], [10, 1]], 2) == 18\n    assert candidate([[5, 1], [4, 2]], 1) == 6\n    assert candidate([[5, 1], [8, 1]], 2) == 14\n    assert candidate([[5, 1], [8, 2]], 1) == 9\n    assert candidate([[5, 1], [9, 1]], 1) == 10\n    assert candidate([[5, 2], [2, 1]], 1) == 6\n    assert candidate([[5, 2], [4, 2]], 2) == 10\n    assert candidate([[5, 2], [5, 1]], 2) == 14\n    assert candidate([[6, 1], [1, 1]], 1) == 7\n    assert candidate([[6, 1], [4, 1]], 1) == 7\n    assert candidate([[6, 1], [7, 1]], 1) == 8\n    assert candidate([[6, 1], [7, 2]], 2) == 17\n    assert candidate([[6, 1], [8, 1]], 2) == 15\n    assert candidate([[6, 1], [8, 2]], 2) == 18\n    assert candidate([[6, 1], [9, 1]], 1) == 10\n    assert candidate([[6, 2], [2, 1]], 1) == 7\n    assert candidate([[6, 2], [4, 2]], 1) == 7\n    assert candidate([[6, 2], [5, 1]], 1) == 7\n    assert candidate([[6, 2], [6, 2]], 1) == 7\n    assert candidate([[6, 2], [6, 2]], 2) == 13\n    assert candidate([[6, 2], [7, 1]], 1) == 8\n    assert candidate([[6, 2], [7, 1]], 2) == 17\n    assert candidate([[6, 2], [8, 2]], 2) == 15\n    assert candidate([[6, 2], [10, 2]], 2) == 17\n    assert candidate([[7, 1], [1, 1]], 1) == 8\n    assert candidate([[7, 1], [3, 2]], 1) == 8\n    assert candidate([[7, 1], [6, 1]], 2) == 14\n    assert candidate([[7, 2], [5, 1]], 2) == 16\n    assert candidate([[7, 2], [5, 2]], 1) == 8\n    assert candidate([[7, 2], [7, 2]], 2) == 15\n    assert candidate([[7, 2], [10, 2]], 2) == 18\n    assert candidate([[8, 1], [2, 1]], 1) == 9\n    assert candidate([[8, 1], [2, 2]], 1) == 9\n    assert candidate([[8, 1], [4, 2]], 1) == 9\n    assert candidate([[8, 1], [5, 1]], 1) == 9\n    assert candidate([[8, 1], [6, 2]], 1) == 9\n    assert candidate([[8, 1], [8, 1]], 2) == 17\n    assert candidate([[8, 1], [9, 1]], 1) == 10\n    assert candidate([[8, 1], [9, 2]], 2) == 21\n    assert candidate([[8, 2], [1, 1]], 1) == 9\n    assert candidate([[8, 2], [1, 2]], 1) == 9\n    assert candidate([[8, 2], [2, 1]], 1) == 9\n    assert candidate([[8, 2], [8, 2]], 1) == 9\n    assert candidate([[8, 2], [9, 1]], 2) == 21\n    assert candidate([[8, 2], [9, 2]], 2) == 18\n    assert candidate([[8, 2], [10, 1]], 2) == 22\n    assert candidate([[9, 1], [1, 1]], 1) == 10\n    assert candidate([[9, 1], [3, 2]], 2) == 16\n    assert candidate([[9, 1], [4, 2]], 2) == 17\n    assert candidate([[9, 1], [6, 2]], 1) == 10\n    assert candidate([[9, 1], [9, 2]], 1) == 10\n    assert candidate([[9, 1], [10, 2]], 1) == 11\n    assert candidate([[9, 2], [1, 2]], 1) == 10\n    assert candidate([[9, 2], [2, 1]], 2) == 15\n    assert candidate([[9, 2], [6, 1]], 2) == 19\n    assert candidate([[9, 2], [6, 2]], 2) == 16\n    assert candidate([[9, 2], [8, 2]], 1) == 10\n    assert candidate([[10, 1], [2, 2]], 1) == 11\n    assert candidate([[10, 1], [4, 2]], 1) == 11\n    assert candidate([[10, 1], [5, 1]], 2) == 16\n    assert candidate([[10, 1], [5, 2]], 2) == 19\n    assert candidate([[10, 1], [7, 1]], 1) == 11\n    assert candidate([[10, 2], [1, 2]], 1) == 11\n    assert candidate([[10, 2], [4, 1]], 1) == 11\n    assert candidate([[10, 2], [5, 1]], 1) == 11\n    assert candidate([[10, 2], [7, 1]], 1) == 11\n    assert candidate([[10, 2], [8, 2]], 2) == 19\n\ndef test_check():\n    check(findMaximumElegance)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2902_maxSum", "language": "py", "prompt": "from typing import List\n\ndef maxSum(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal.\nReturn the maximum sum or -1 if no such pair exists.\nExample 1:\nInput: nums = [51,71,17,24,42]\nOutput: 88\nExplanation:\nFor i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88.\nFor i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\nIt can be shown that there are no other pairs with equal maximum digits, so the answer is 88.\nExample 2:\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: No pair exists in nums with equal maximum digits.\nConstraints:\n * 2 <= nums.length <= 100\n * 1 <= nums[i] <= 104\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2902_maxSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([51, 71, 17, 24, 42]) == 88\n    assert candidate([1, 2, 3, 4]) == -1\n    assert candidate([31, 25, 72, 79, 74]) == 146\n    assert candidate([84, 91, 18, 59, 27, 9, 81, 33, 17, 58]) == 165\n    assert candidate([8, 75, 28, 35, 21, 13, 21]) == 42\n    assert candidate([35, 52, 74, 92, 25, 65, 77, 1, 73, 32]) == 151\n    assert candidate([68, 8, 100, 84, 80, 14, 88]) == 172\n    assert candidate([53, 98, 69, 64, 40, 60, 23]) == 167\n    assert candidate([21, 76]) == -1\n    assert candidate([99, 63, 23, 70, 18, 64]) == 127\n    assert candidate([21, 21, 78]) == 42\n    assert candidate([58, 88, 58, 99, 26, 92]) == 191\n    assert candidate([10, 24, 25, 20, 92, 73, 63, 51]) == 76\n    assert candidate([87, 6, 17, 32, 14, 42, 46, 65, 43, 9]) == 111\n    assert candidate([96, 46, 85, 19, 29]) == 125\n    assert candidate([5, 24]) == -1\n    assert candidate([26, 76, 24, 96, 82, 97, 97, 72, 35]) == 194\n    assert candidate([77, 82, 30, 94]) == -1\n    assert candidate([76, 94, 51, 82, 3, 89, 52, 96]) == 190\n    assert candidate([27, 59, 57, 97, 6, 46, 88, 41, 52, 46]) == 156\n    assert candidate([17, 2]) == -1\n    assert candidate([62, 69]) == -1\n    assert candidate([63, 24, 1]) == -1\n    assert candidate([55, 46, 4, 61, 78, 21, 85, 52, 83, 77]) == 168\n    assert candidate([21, 73, 2, 80, 99, 98, 89]) == 197\n    assert candidate([94, 63, 50, 43, 62, 14, 83, 91]) == 185\n    assert candidate([66, 17, 17, 35, 46, 77, 7, 15, 38]) == 112\n    assert candidate([61, 90, 34, 29, 68, 35]) == 119\n    assert candidate([18, 82, 78]) == 160\n    assert candidate([8, 71, 2, 59, 70, 12]) == 141\n    assert candidate([55, 88, 59]) == -1\n    assert candidate([49, 47, 46, 65, 37, 24, 75, 81, 54, 39]) == 122\n    assert candidate([73, 79, 48, 45, 57, 73, 51, 78, 67, 78]) == 156\n    assert candidate([2, 82, 80, 74, 34, 54, 65]) == 162\n    assert candidate([9, 62, 85, 95, 36, 62, 21, 38, 16, 12]) == 124\n    assert candidate([50, 80, 34, 9, 86, 20, 67, 94, 65, 82]) == 168\n    assert candidate([79, 74, 92, 84, 37, 19]) == 171\n    assert candidate([85, 20, 79]) == -1\n    assert candidate([89, 55, 67, 84, 3]) == -1\n    assert candidate([16, 44, 2, 54, 58, 94]) == -1\n    assert candidate([71, 14, 24, 13, 21, 14, 100, 18, 84, 37]) == 108\n    assert candidate([13, 26]) == -1\n    assert candidate([82, 30, 53, 72, 56, 94, 72, 67]) == 144\n    assert candidate([14, 80, 92, 65, 85, 70]) == 165\n    assert candidate([81, 39, 43, 31, 53, 43, 87, 19, 93]) == 168\n    assert candidate([27, 12, 80, 38, 94, 92, 67, 54, 56, 20]) == 186\n    assert candidate([52, 32, 24, 6, 3, 89, 100, 3, 5, 3]) == 57\n    assert candidate([93, 1, 13, 88, 47, 48, 46, 63]) == 136\n    assert candidate([3, 55, 40, 93, 97, 37, 31, 31]) == 190\n    assert candidate([58, 41, 10, 74, 40, 17]) == 91\n    assert candidate([58, 33, 78, 53, 88, 1, 15, 44, 82]) == 170\n    assert candidate([41, 48, 96, 71, 35, 89, 57, 71]) == 185\n    assert candidate([43, 4, 69, 29, 37, 50]) == 98\n    assert candidate([65, 88, 2]) == -1\n    assert candidate([86, 42, 59, 44, 76, 6]) == 86\n    assert candidate([29, 96, 1, 10, 27, 78, 56, 62]) == 125\n    assert candidate([100, 48, 6]) == -1\n    assert candidate([33, 17]) == -1\n    assert candidate([8, 91]) == -1\n    assert candidate([91, 13, 72, 42, 28]) == -1\n    assert candidate([5, 53, 35, 88, 77, 1, 66, 57]) == 134\n    assert candidate([50, 27, 52, 70, 67, 60, 65]) == 137\n    assert candidate([84, 82, 31, 45, 94, 62, 45, 32]) == 166\n    assert candidate([61, 61, 61, 23, 47, 34, 21, 6, 65, 25]) == 126\n    assert candidate([60, 21, 11, 99]) == -1\n    assert candidate([22, 83, 62, 12, 63, 100, 41, 33]) == 125\n    assert candidate([92, 58, 85]) == 143\n    assert candidate([93, 5, 46, 26, 25, 36, 27, 12, 30]) == 82\n    assert candidate([52, 30, 16]) == -1\n    assert candidate([22, 57, 33, 26, 76, 14, 67]) == 143\n    assert candidate([90, 72, 37, 30]) == 109\n    assert candidate([44, 87, 16]) == -1\n    assert candidate([19, 12, 52, 8, 3, 58]) == 66\n    assert candidate([88, 52, 35, 6, 58, 47, 62, 82, 47, 86]) == 174\n    assert candidate([84, 1, 48, 76, 16, 10, 11, 60]) == 132\n    assert candidate([12, 60, 69, 63, 78, 22, 28]) == 123\n    assert candidate([16, 28, 82, 77, 41, 22]) == 110\n    assert candidate([97, 31, 63, 2, 94, 14, 47]) == 191\n    assert candidate([93, 100, 45, 74, 31, 41, 84, 90, 18, 21]) == 183\n    assert candidate([21, 12, 38, 64, 57, 24]) == 33\n    assert candidate([33, 17, 99, 2, 58, 59, 72, 9, 62]) == 158\n    assert candidate([36, 11, 23, 98, 14, 89, 90, 53]) == 188\n    assert candidate([57, 90, 5, 78, 84, 51]) == 162\n    assert candidate([73, 73, 76, 48, 30]) == 149\n    assert candidate([2, 74, 37, 75]) == 149\n    assert candidate([84, 35, 65, 12]) == -1\n    assert candidate([95, 46, 23, 81, 35]) == -1\n    assert candidate([64, 76, 46, 54, 64, 94, 90, 95]) == 189\n    assert candidate([77, 52, 74, 84, 47, 89, 53]) == 151\n    assert candidate([29, 31, 52, 12, 89, 88, 10, 18]) == 118\n    assert candidate([28, 57, 28, 41, 25, 89, 20]) == 56\n    assert candidate([31, 28]) == -1\n    assert candidate([51, 1, 98, 73, 84, 11, 100, 100, 75]) == 200\n    assert candidate([76, 2, 26, 49, 78, 36, 2, 70, 64]) == 146\n    assert candidate([34, 63, 21, 49]) == -1\n    assert candidate([35, 19, 1, 21, 11, 59, 38]) == 78\n    assert candidate([1, 35, 74, 58, 56, 54, 75]) == 149\n    assert candidate([20, 49]) == -1\n    assert candidate([97, 92, 13, 30]) == 189\n    assert candidate([89, 49, 10, 36, 37]) == 138\n\ndef test_check():\n    check(maxSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2904_minimumOperations", "language": "py", "prompt": "from typing import List\n\ndef minimumOperations(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums of length n.\nThe numbers from 0 to n - 1 are divided into three groups numbered from 1 to 3, where number i belongs to group nums[i]. Notice that some groups may be empty.\nYou are allowed to perform this operation any number of times:\n * Pick number x and change its group. More formally, change nums[x] to any number from 1 to 3.\nA new array res is constructed using the following procedure:\n 1. Sort the numbers in each group independently.\n 2. Append the elements of groups 1, 2, and 3 to res in this order.\nArray nums is called a beautiful array if the constructed array res is sorted in non-decreasing order.\nReturn the minimum number of operations to make nums a beautiful array.\nExample 1:\nInput: nums = [2,1,3,2,1]\nOutput: 3\nExplanation: It's optimal to perform three operations:\n1. change nums[0] to 1.\n2. change nums[2] to 1.\n3. change nums[3] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than three operations.\nExample 2:\nInput: nums = [1,3,2,1,3,3]\nOutput: 2\nExplanation: It's optimal to perform two operations:\n1. change nums[1] to 1.\n2. change nums[2] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than two operations.\nExample 3:\nInput: nums = [2,2,2,2,3,3]\nOutput: 0\nExplanation: It's optimal to not perform operations.\nAfter sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nConstraints:\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 3\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2904_minimumOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 1, 3, 2, 1]) == 3\n    assert candidate([1, 3, 2, 1, 3, 3]) == 2\n    assert candidate([2, 2, 2, 2, 3, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([2]) == 0\n    assert candidate([3]) == 0\n    assert candidate([1, 2]) == 0\n    assert candidate([2, 2]) == 0\n    assert candidate([3, 2]) == 1\n    assert candidate([1, 3]) == 0\n    assert candidate([2, 3]) == 0\n    assert candidate([3, 3]) == 0\n    assert candidate([1, 1, 2]) == 0\n    assert candidate([2, 1, 2]) == 1\n    assert candidate([3, 1, 2]) == 1\n    assert candidate([1, 2, 2]) == 0\n    assert candidate([2, 2, 2]) == 0\n    assert candidate([3, 2, 2]) == 1\n    assert candidate([1, 3, 2]) == 1\n    assert candidate([2, 3, 2]) == 1\n    assert candidate([3, 3, 2]) == 1\n    assert candidate([1, 1, 3]) == 0\n    assert candidate([2, 1, 3]) == 1\n    assert candidate([3, 1, 3]) == 1\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([2, 2, 3]) == 0\n    assert candidate([3, 2, 3]) == 1\n    assert candidate([1, 3, 3]) == 0\n    assert candidate([2, 3, 3]) == 0\n    assert candidate([3, 3, 3]) == 0\n    assert candidate([1, 1, 1, 2]) == 0\n    assert candidate([2, 1, 1, 2]) == 1\n    assert candidate([3, 1, 1, 2]) == 1\n    assert candidate([1, 2, 1, 2]) == 1\n    assert candidate([2, 2, 1, 2]) == 1\n    assert candidate([3, 2, 1, 2]) == 2\n    assert candidate([1, 3, 1, 2]) == 1\n    assert candidate([2, 3, 1, 2]) == 2\n    assert candidate([3, 3, 1, 2]) == 2\n    assert candidate([1, 1, 2, 2]) == 0\n    assert candidate([2, 1, 2, 2]) == 1\n    assert candidate([3, 1, 2, 2]) == 1\n    assert candidate([1, 2, 2, 2]) == 0\n    assert candidate([2, 2, 2, 2]) == 0\n    assert candidate([3, 2, 2, 2]) == 1\n    assert candidate([1, 3, 2, 2]) == 1\n    assert candidate([2, 3, 2, 2]) == 1\n    assert candidate([3, 3, 2, 2]) == 2\n    assert candidate([1, 1, 3, 2]) == 1\n    assert candidate([2, 1, 3, 2]) == 2\n    assert candidate([3, 1, 3, 2]) == 2\n    assert candidate([1, 2, 3, 2]) == 1\n    assert candidate([2, 2, 3, 2]) == 1\n    assert candidate([3, 2, 3, 2]) == 2\n    assert candidate([1, 3, 3, 2]) == 1\n    assert candidate([2, 3, 3, 2]) == 1\n    assert candidate([3, 3, 3, 2]) == 1\n    assert candidate([1, 1, 1, 3]) == 0\n    assert candidate([2, 1, 1, 3]) == 1\n    assert candidate([3, 1, 1, 3]) == 1\n    assert candidate([1, 2, 1, 3]) == 1\n    assert candidate([2, 2, 1, 3]) == 1\n    assert candidate([3, 2, 1, 3]) == 2\n    assert candidate([1, 3, 1, 3]) == 1\n    assert candidate([2, 3, 1, 3]) == 1\n    assert candidate([3, 3, 1, 3]) == 1\n    assert candidate([1, 1, 2, 3]) == 0\n    assert candidate([2, 1, 2, 3]) == 1\n    assert candidate([3, 1, 2, 3]) == 1\n    assert candidate([1, 2, 2, 3]) == 0\n    assert candidate([2, 2, 2, 3]) == 0\n    assert candidate([3, 2, 2, 3]) == 1\n    assert candidate([1, 3, 2, 3]) == 1\n    assert candidate([2, 3, 2, 3]) == 1\n    assert candidate([3, 3, 2, 3]) == 1\n    assert candidate([1, 1, 3, 3]) == 0\n    assert candidate([2, 1, 3, 3]) == 1\n    assert candidate([3, 1, 3, 3]) == 1\n    assert candidate([1, 2, 3, 3]) == 0\n    assert candidate([2, 2, 3, 3]) == 0\n    assert candidate([3, 2, 3, 3]) == 1\n    assert candidate([1, 3, 3, 3]) == 0\n    assert candidate([2, 3, 3, 3]) == 0\n    assert candidate([3, 3, 3, 3]) == 0\n    assert candidate([1, 1, 1, 1, 2]) == 0\n    assert candidate([2, 1, 1, 1, 2]) == 1\n    assert candidate([3, 1, 1, 1, 2]) == 1\n    assert candidate([1, 2, 1, 1, 2]) == 1\n    assert candidate([2, 2, 1, 1, 2]) == 2\n    assert candidate([3, 2, 1, 1, 2]) == 2\n    assert candidate([1, 3, 1, 1, 2]) == 1\n    assert candidate([2, 3, 1, 1, 2]) == 2\n    assert candidate([3, 3, 1, 1, 2]) == 2\n    assert candidate([1, 1, 2, 1, 2]) == 1\n    assert candidate([2, 1, 2, 1, 2]) == 2\n    assert candidate([3, 1, 2, 1, 2]) == 2\n    assert candidate([1, 2, 2, 1, 2]) == 1\n    assert candidate([2, 2, 2, 1, 2]) == 1\n    assert candidate([3, 2, 2, 1, 2]) == 2\n    assert candidate([1, 3, 2, 1, 2]) == 2\n\ndef test_check():\n    check(minimumOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2905_countPalindromePaths", "language": "py", "prompt": "from typing import List\n\ndef countPalindromePaths(parent: List[int], s: str) -> int:\n    \"\"\"You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png]\nInput: parent = [-1,0,0,1,1,2], s = \"acaabc\"\nOutput: 8\nExplanation: The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string \"aca\" which is a palindrome.\n- The pair (1,5) result in the string \"cac\" which is a palindrome.\n- The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\".\nExample 2:\nInput: parent = [-1,0,0,0,0], s = \"aaaaa\"\nOutput: 10\nExplanation: Any pair of nodes (u,v) where u < v is valid.\nConstraints:\n * n == parent.length == s.length\n * 1 <= n <= 105\n * 0 <= parent[i] <= n - 1 for all i >= 1\n * parent[0] == -1\n * parent represents a valid tree.\n * s consists of only lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2905_countPalindromePaths.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([-1, 0, 0, 1, 1, 2], acaabc) == 8\n    assert candidate([-1, 0, 0, 0, 0], aaaaa) == 10\n    assert candidate([-1, 0], pi) == 1\n    assert candidate([-1, 5, 0, 5, 5, 2], xsbcqq) == 7\n    assert candidate([-1, 6, 8, 5, 0, 4, 2, 0, 4], tiaiaivea) == 20\n    assert candidate([-1, 0, 0, 0, 1, 3, 7, 2], pxxgtgpp) == 18\n    assert candidate([-1, 0, 1, 4, 1, 0], hfhmmf) == 12\n    assert candidate([-1, 0, 1], cri) == 2\n    assert candidate([-1, 0, 0, 5, 7, 0, 0, 1, 2, 0], snlzlzngna) == 19\n    assert candidate([-1, 0, 0], sat) == 2\n    assert candidate([-1, 0], ko) == 1\n    assert candidate([-1, 0, 6, 4, 1, 6, 3, 1], jibwrfoi) == 8\n    assert candidate([-1, 4, 0, 4, 6, 0, 5, 5], bhrlorou) == 18\n    assert candidate([-1, 4, 4, 6, 0, 7, 1, 1], boqvndoo) == 18\n    assert candidate([-1, 2, 0, 1, 0], eixnx) == 6\n    assert candidate([-1, 5, 0, 2, 2, 3], jwlllw) == 14\n    assert candidate([-1, 2, 6, 2, 5, 2, 7, 0], pipfippl) == 15\n    assert candidate([-1, 6, 0, 6, 5, 6, 2, 6, 5, 6], zwrdhnhwtf) == 11\n    assert candidate([-1, 4, 1, 1, 5, 0], gndfnj) == 9\n    assert candidate([-1, 0, 0, 0, 1], crwkr) == 7\n    assert candidate([-1, 4, 4, 4, 0, 2, 0], wwwwewd) == 13\n    assert candidate([-1, 2, 0], mwz) == 2\n    assert candidate([-1, 0, 1, 6, 5, 0, 1, 1, 1, 0], mqgmjzrwuq) == 14\n    assert candidate([-1, 2, 3, 0, 3, 3, 3, 3], bnievjov) == 8\n    assert candidate([-1, 0, 0], kyr) == 2\n    assert candidate([-1, 0, 5, 1, 2, 3, 2, 3, 9, 4], xukzwzsnww) == 18\n    assert candidate([-1, 6, 0, 1, 5, 0, 2, 2, 6, 0], snlpzocqpt) == 10\n    assert candidate([-1, 3, 0, 5, 5, 2], pxlxpl) == 12\n    assert candidate([-1, 5, 5, 5, 5, 0], ketewj) == 6\n    assert candidate([-1, 0, 4, 0, 0], zrrqq) == 7\n    assert candidate([-1, 0, 0], qlw) == 2\n    assert candidate([-1, 0, 0], bds) == 2\n    assert candidate([-1, 2, 6, 6, 0, 4, 4, 2], odggsrsp) == 13\n    assert candidate([-1, 0, 1], ldk) == 2\n    assert candidate([-1, 0, 7, 0, 6, 2, 3, 3, 3], elllffflv) == 28\n    assert candidate([-1, 4, 4, 0, 0], ntzhc) == 4\n    assert candidate([-1, 5, 4, 1, 1, 0, 4], gmcmavf) == 8\n    assert candidate([-1, 0, 0, 4, 0], aogkg) == 6\n    assert candidate([-1, 2, 0], xmt) == 2\n    assert candidate([-1, 2, 0], dff) == 3\n    assert candidate([-1, 0, 1, 1], lsvw) == 3\n    assert candidate([-1, 0, 0], ovi) == 2\n    assert candidate([-1, 6, 0, 5, 2, 2, 0, 3], lpnfznpf) == 19\n    assert candidate([-1, 7, 5, 5, 0, 0, 2, 2], hqitxxwi) == 16\n    assert candidate([-1, 2, 0], pyw) == 2\n    assert candidate([-1, 0, 0, 0], ybfa) == 3\n    assert candidate([-1, 3, 6, 6, 6, 0, 0, 4], ulicllkc) == 11\n    assert candidate([-1, 3, 1, 0], ukne) == 3\n    assert candidate([-1, 2, 0, 1, 0, 0], rhlxdd) == 6\n    assert candidate([-1, 4, 5, 0, 2, 0], zenbnb) == 12\n    assert candidate([-1, 0, 5, 4, 5, 1, 3, 9, 7, 4], jigognjnlb) == 12\n    assert candidate([-1, 4, 4, 6, 3, 0, 5, 3, 6], imrcmdkew) == 11\n    assert candidate([-1, 4, 4, 0, 6, 4, 0, 0], dqpipiyz) == 9\n    assert candidate([-1, 0, 0], mgm) == 2\n    assert candidate([-1, 0, 4, 0, 1], pzlob) == 4\n    assert candidate([-1, 8, 0, 8, 8, 3, 4, 4, 0, 6], vvbvyovyvy) == 30\n    assert candidate([-1, 0, 4, 0, 5, 1, 1], dvrvpea) == 9\n    assert candidate([-1, 0, 1], jnx) == 2\n    assert candidate([-1, 0, 1, 2], wxjj) == 5\n    assert candidate([-1, 3, 3, 0, 1, 2, 1], erorchx) == 9\n    assert candidate([-1, 0, 4, 1, 1, 4, 3], ywzwzcw) == 14\n    assert candidate([-1, 4, 6, 2, 3, 3, 0], bititzq) == 10\n    assert candidate([-1, 2, 0], uup) == 2\n    assert candidate([-1, 2, 3, 0, 0], siiou) == 6\n    assert candidate([-1, 2, 0, 2, 0], dilfs) == 4\n    assert candidate([-1, 3, 7, 0, 1, 0, 2, 3, 0], wqojvjoqq) == 22\n    assert candidate([-1, 0], hi) == 1\n    assert candidate([-1, 3, 1, 4, 0, 6, 3, 1], fwvwwqqw) == 21\n    assert candidate([-1, 0, 4, 2, 1, 1, 1], hkmmkmk) == 16\n    assert candidate([-1, 4, 3, 1, 0], bzeez) == 9\n    assert candidate([-1, 3, 3, 0], zyuj) == 3\n    assert candidate([-1, 0, 1, 4, 6, 2, 2], tlcpcll) == 13\n    assert candidate([-1, 2, 0], vjw) == 2\n    assert candidate([-1, 0], nz) == 1\n    assert candidate([-1, 0, 0], iot) == 2\n    assert candidate([-1, 2, 8, 8, 3, 1, 2, 0, 0], rlurrluxm) == 19\n    assert candidate([-1, 5, 0, 0, 0, 4], zxrddx) == 10\n    assert candidate([-1, 0, 1, 2], tffc) == 5\n    assert candidate([-1, 5, 3, 0, 3, 0], ltdewr) == 5\n    assert candidate([-1, 0, 4, 5, 0, 1], gjwwjv) == 9\n    assert candidate([-1, 7, 7, 0, 8, 2, 2, 4, 3, 8], cnssgsoogy) == 20\n    assert candidate([-1, 7, 1, 6, 0, 0, 7, 0], zaceoxax) == 13\n    assert candidate([-1, 0, 1, 0, 3, 0], zrvyyc) == 8\n    assert candidate([-1, 4, 9, 0, 3, 3, 7, 4, 2, 0], qxixxxxxix) == 41\n    assert candidate([-1, 2, 0, 5, 5, 2, 5], hoptvuu) == 9\n    assert candidate([-1, 7, 3, 0, 3, 1, 0, 3], kopflpao) == 13\n    assert candidate([-1, 0, 1, 6, 1, 1, 1], bhhslhl) == 11\n    assert candidate([-1, 0, 0, 1, 2], khhch) == 8\n    assert candidate([-1, 0, 3, 0], koss) == 5\n    assert candidate([-1, 3, 4, 4, 0], owzoq) == 4\n    assert candidate([-1, 2, 0, 1, 1], zqqww) == 8\n    assert candidate([-1, 0, 1, 1, 1, 2, 2], lacccdb) == 13\n    assert candidate([-1, 4, 3, 4, 6, 6, 7, 0, 6], sjoooorrm) == 24\n    assert candidate([-1, 7, 4, 2, 0, 6, 2, 3, 7], guqyxxtau) == 9\n    assert candidate([-1, 4, 4, 0, 0], scicc) == 8\n    assert candidate([-1, 5, 8, 6, 3, 0, 2, 3, 1], naphhahhp) == 29\n    assert candidate([-1, 3, 8, 8, 5, 0, 4, 0, 0, 2], ciiyggofij) == 23\n    assert candidate([-1, 2, 0, 2, 2, 3, 7, 8, 4, 2], stthtthddt) == 34\n    assert candidate([-1, 2, 0, 7, 3, 7, 4, 0], mjjsjdsj) == 18\n    assert candidate([-1, 0], ey) == 1\n\ndef test_check():\n    check(countPalindromePaths)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2914_maximumSafenessFactor", "language": "py", "prompt": "from typing import List\n\ndef maximumSafenessFactor(grid: List[List[int]]) -> int:\n    \"\"\"    You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n* A cell containing a thief if grid[r][c] = 1\n* An empty cell if grid[r][c] = 0\n    You are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\n    The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\n    Return the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\n    An adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\n    The Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n    Example 1:\n    [https://assets.leetcode.com/uploads/2023/07/02/example1.png]\n    Input: grid = [[1,0,0],[0,0,0],[0,0,1]]\n    Output: 0\n    Explanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n    Example 2:\n    [https://assets.leetcode.com/uploads/2023/07/02/example2.png]\n    Input: grid = [[0,0,1],[0,0,0],[0,0,0]]\n    Output: 2\n    Explanation: The path depicted in the picture above has a safeness factor of 2 since:\n    - The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\n    It can be shown that there are no other paths with a higher safeness factor.\n    Example 3:\n    [https://assets.leetcode.com/uploads/2023/07/02/example3.png]\n    Input: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\n    Output: 2\n    Explanation: The path depicted in the picture above has a safeness factor of 2 since:\n    - The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n    - The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\n    It can be shown that there are no other paths with a higher safeness factor.\n    Constraints:\n* 1 <= grid.length == n <= 400\n* grid[i].length == n\n* grid[i][j] is either 0 or 1.\n* There is at least one thief in the grid.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2914_maximumSafenessFactor.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[1, 0, 0], [0, 0, 0], [0, 0, 1]]) == 0\n    assert candidate([[0, 0, 1], [0, 0, 0], [0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]) == 2\n    assert candidate([[1]]) == 0\n    assert candidate([[1, 1], [1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 1], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 1, 0], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 1], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [1, 0, 0], [0, 0, 0]]) == 0\n    assert candidate([[1, 1], [1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 1], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 1, 0], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 1], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 1], [0, 0, 0], [0, 0, 0]]) == 0\n    assert candidate([[1, 1], [0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 1], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 1, 0], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [0, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [0, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [0, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 1], [0, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 0], [1, 1, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 0], [1, 1, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 0], [1, 0, 1]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 0], [1, 0, 0]]) == 0\n    assert candidate([[1, 1, 0], [1, 0, 0], [0, 1, 1]]) == 0\n\ndef test_check():\n    check(maximumSafenessFactor)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2915_countInterestingSubarrays", "language": "py", "prompt": "from typing import List\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums, an integer modulo, and an integer k.\nYour task is to find the count of subarrays that are interesting.\nA subarray nums[l..r] is interesting if the following condition holds:\n * Let cnt be the number of indices i in the range [l, r] such that nums[i] % modulo == k. Then, cnt % modulo == k.\nReturn an integer denoting the count of interesting subarrays.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [3,2,4], modulo = 2, k = 1\nOutput: 3\nExplanation: In this example the interesting subarrays are:\nThe subarray nums[0..0] which is [3].\n- There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k.\n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..1] which is [3,2].\n- There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.\n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..2] which is [3,2,4].\n- There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k.\n- Hence, cnt = 1 and cnt % modulo == k.\nIt can be shown that there are no other interesting subarrays. So, the answer is 3.\nExample 2:\nInput: nums = [3,1,9,6], modulo = 3, k = 0\nOutput: 2\nExplanation: In this example the interesting subarrays are:\nThe subarray nums[0..3] which is [3,1,9,6].\n- There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k.\n- Hence, cnt = 3 and cnt % modulo == k.\nThe subarray nums[1..1] which is [1].\n- There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k.\n- Hence, cnt = 0 and cnt % modulo == k.\nIt can be shown that there are no other interesting subarrays. So, the answer is 2.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 109\n * 1 <= modulo <= 109\n * 0 <= k < modulo\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2915_countInterestingSubarrays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 2, 4], 2, 1) == 3\n    assert candidate([3, 1, 9, 6], 3, 0) == 2\n    assert candidate([11, 12, 21, 31], 10, 1) == 5\n    assert candidate([2, 4], 7, 2) == 0\n    assert candidate([2, 7], 7, 0) == 1\n    assert candidate([2, 45], 13, 2) == 0\n    assert candidate([3, 3], 5, 3) == 0\n    assert candidate([3, 4], 8, 3) == 0\n    assert candidate([4, 5], 1, 0) == 3\n    assert candidate([5, 1], 6, 1) == 2\n    assert candidate([7, 2], 7, 0) == 1\n    assert candidate([7, 4], 7, 0) == 1\n    assert candidate([8, 8], 4, 0) == 0\n    assert candidate([9, 2], 2, 0) == 1\n    assert candidate([18, 43], 3, 0) == 1\n    assert candidate([19, 67], 47, 19) == 0\n    assert candidate([20, 8], 41, 8) == 0\n    assert candidate([26, 5], 21, 5) == 0\n    assert candidate([81, 36], 4, 0) == 1\n    assert candidate([2, 1, 5], 9, 1) == 4\n    assert candidate([2, 2, 5], 3, 2) == 2\n    assert candidate([2, 2, 5], 4, 2) == 2\n    assert candidate([2, 3, 2], 6, 2) == 1\n    assert candidate([3, 2, 5], 1, 0) == 6\n    assert candidate([5, 1, 6], 2, 1) == 3\n    assert candidate([5, 2, 8], 2, 0) == 3\n    assert candidate([6, 5, 6], 6, 0) == 1\n    assert candidate([7, 1, 2], 1, 0) == 6\n    assert candidate([7, 2, 9], 4, 1) == 3\n    assert candidate([7, 5, 6], 4, 1) == 4\n    assert candidate([9, 1, 6], 7, 1) == 4\n    assert candidate([40, 1, 24], 41, 1) == 4\n    assert candidate([48, 36, 27], 9, 0) == 1\n    assert candidate([1, 9, 6, 1], 2, 1) == 6\n    assert candidate([2, 2, 1, 2], 3, 2) == 3\n    assert candidate([3, 5, 4, 2], 5, 0) == 4\n    assert candidate([4, 18, 38, 15], 21, 4) == 0\n    assert candidate([6, 6, 1, 4], 7, 6) == 0\n    assert candidate([7, 5, 2, 1], 1, 0) == 10\n    assert candidate([7, 5, 3, 4], 3, 1) == 6\n    assert candidate([8, 6, 5, 6], 3, 0) == 2\n    assert candidate([8, 7, 3, 2], 6, 2) == 1\n    assert candidate([9, 2, 2, 6], 7, 2) == 3\n    assert candidate([9, 7, 4, 1], 2, 1) == 6\n    assert candidate([9, 7, 8, 9], 5, 4) == 0\n    assert candidate([9, 48, 32, 11], 2, 0) == 6\n    assert candidate([53, 44, 40, 37], 2, 0) == 6\n    assert candidate([91, 5, 60, 93], 59, 1) == 6\n    assert candidate([2, 1, 1, 3, 5], 4, 1) == 6\n    assert candidate([2, 2, 5, 4, 3], 5, 2) == 4\n    assert candidate([2, 2, 5, 6, 1], 1, 0) == 15\n    assert candidate([2, 6, 2, 3, 1], 9, 2) == 3\n    assert candidate([2, 7, 4, 8, 5], 2, 0) == 7\n    assert candidate([4, 2, 1, 8, 8], 3, 2) == 4\n    assert candidate([4, 2, 8, 8, 2], 9, 2) == 2\n    assert candidate([5, 6, 3, 9, 3], 9, 3) == 0\n    assert candidate([6, 7, 1, 9, 2], 1, 0) == 15\n    assert candidate([6, 9, 5, 1, 6], 5, 1) == 7\n    assert candidate([7, 3, 6, 2, 6], 1, 0) == 15\n    assert candidate([7, 7, 9, 5, 8], 4, 1) == 5\n    assert candidate([7, 9, 1, 3, 2], 8, 1) == 5\n    assert candidate([8, 6, 9, 4, 4], 9, 4) == 0\n    assert candidate([8, 8, 6, 8, 9], 9, 8) == 0\n    assert candidate([9, 7, 8, 7, 8], 7, 0) == 3\n    assert candidate([26, 9, 14, 4, 24], 26, 0) == 10\n    assert candidate([31, 30, 24, 34, 20], 22, 2) == 0\n    assert candidate([39, 41, 6, 30, 38], 43, 6) == 0\n    assert candidate([1, 2, 7, 1, 6, 6], 5, 1) == 8\n    assert candidate([1, 6, 2, 1, 9, 7], 3, 1) == 11\n    assert candidate([1, 7, 8, 2, 5, 9], 7, 1) == 10\n    assert candidate([2, 4, 6, 6, 5, 1], 8, 6) == 0\n    assert candidate([2, 8, 2, 9, 2, 8], 5, 2) == 6\n    assert candidate([2, 9, 1, 6, 5, 7], 7, 2) == 5\n    assert candidate([2, 9, 1, 6, 6, 7], 9, 6) == 0\n    assert candidate([2, 9, 6, 8, 8, 3], 1, 0) == 21\n    assert candidate([4, 8, 4, 3, 7, 5], 4, 0) == 6\n    assert candidate([4, 9, 4, 9, 7, 7], 9, 0) == 5\n    assert candidate([5, 3, 7, 9, 8, 7], 3, 0) == 5\n    assert candidate([7, 1, 6, 1, 7, 2], 6, 1) == 7\n    assert candidate([7, 3, 1, 9, 1, 3], 5, 1) == 10\n    assert candidate([7, 4, 9, 8, 3, 4], 1, 0) == 21\n    assert candidate([7, 5, 1, 7, 7, 7], 8, 7) == 0\n    assert candidate([8, 4, 5, 6, 7, 4], 4, 0) == 6\n    assert candidate([8, 7, 3, 8, 4, 8], 8, 0) == 4\n    assert candidate([8, 7, 5, 5, 2, 1], 5, 0) == 6\n    assert candidate([8, 18, 36, 50, 12, 37], 18, 0) == 7\n    assert candidate([9, 9, 6, 7, 2, 3], 5, 2) == 8\n    assert candidate([16, 1, 33, 39, 15, 1], 30, 1) == 12\n    assert candidate([17, 25, 9, 20, 41, 26], 38, 3) == 0\n    assert candidate([21, 26, 39, 21, 31, 49], 22, 21) == 0\n    assert candidate([37, 44, 17, 22, 50, 15], 6, 2) == 4\n    assert candidate([40, 10, 31, 40, 30, 32], 50, 40) == 0\n    assert candidate([40, 22, 22, 35, 2, 16], 24, 16) == 0\n    assert candidate([98, 23, 66, 13, 70, 34], 74, 13) == 0\n    assert candidate([1, 1, 4, 8, 3, 2, 7], 9, 1) == 7\n    assert candidate([1, 8, 6, 3, 2, 8, 8], 2, 0) == 13\n    assert candidate([1, 9, 2, 1, 5, 4, 8], 4, 1) == 8\n    assert candidate([4, 6, 8, 3, 4, 3, 4], 7, 4) == 0\n    assert candidate([5, 4, 5, 8, 9, 1, 9], 4, 1) == 11\n    assert candidate([5, 4, 6, 1, 3, 2, 7], 9, 1) == 16\n\ndef test_check():\n    check(countInterestingSubarrays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2916_canSplitArray", "language": "py", "prompt": "from typing import List\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    \"\"\"You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n non-empty arrays by performing a series of steps.\nIn each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two subarrays, if, for each resulting subarray, at least one of the following holds:\n * The length of the subarray is one, or\n * The sum of elements of the subarray is greater than or equal to m.\nReturn true if you can split the given array into n arrays, otherwise return false.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [2, 2, 1], m = 4\nOutput: true\nExplanation: We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.\nExample 2:\nInput: nums = [2, 1, 3], m = 5\nOutput: false\nExplanation: We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.\nExample 3:\nInput: nums = [2, 3, 3, 2, 3], m = 6\nOutput: true\nExplanation: We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.\nConstraints:\n * 1 <= n == nums.length <= 100\n * 1 <= nums[i] <= 100\n * 1 <= m <= 200\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2916_canSplitArray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 2, 1], 4) == True\n    assert candidate([2, 3, 3, 2, 3], 6) == True\n    assert candidate([1], 1) == True\n    assert candidate([2, 1, 3], 5) == False\n    assert candidate([1, 1, 1], 3) == False\n    assert candidate([2], 1) == True\n    assert candidate([2, 1, 2], 4) == False\n    assert candidate([1, 2, 1], 5) == False\n    assert candidate([2, 2, 2], 5) == False\n    assert candidate([3, 1, 2], 5) == False\n    assert candidate([3], 1) == True\n    assert candidate([1], 2) == True\n    assert candidate([2], 2) == True\n    assert candidate([1, 3, 1], 6) == False\n    assert candidate([1, 3, 2], 6) == False\n    assert candidate([2, 1, 1], 6) == False\n    assert candidate([2, 2, 1], 6) == False\n    assert candidate([2, 2, 3], 6) == False\n    assert candidate([3], 2) == True\n    assert candidate([3, 1, 1], 6) == False\n    assert candidate([3, 1, 3], 6) == False\n    assert candidate([3], 3) == True\n    assert candidate([7], 5) == True\n    assert candidate([4], 7) == True\n    assert candidate([9], 7) == True\n    assert candidate([2], 8) == True\n    assert candidate([3, 2, 2], 6) == False\n    assert candidate([4], 8) == True\n    assert candidate([10], 11) == True\n    assert candidate([6], 12) == True\n    assert candidate([3, 2, 3], 6) == False\n    assert candidate([3, 3, 6], 10) == False\n    assert candidate([2], 14) == True\n    assert candidate([5, 3, 6], 10) == False\n    assert candidate([3], 18) == True\n    assert candidate([4, 6, 5], 12) == False\n    assert candidate([9, 7], 1) == True\n    assert candidate([1, 2], 2) == True\n    assert candidate([9, 1, 7], 14) == False\n    assert candidate([8, 2, 4], 16) == False\n    assert candidate([1, 3], 2) == True\n    assert candidate([2, 1], 2) == True\n    assert candidate([9, 5, 7], 20) == False\n    assert candidate([2, 3], 2) == True\n    assert candidate([1, 2, 1, 1], 4) == False\n    assert candidate([1, 2, 2, 5], 8) == False\n    assert candidate([4, 4, 4, 2], 9) == False\n    assert candidate([3, 2], 2) == True\n    assert candidate([8, 1, 2, 5], 10) == False\n    assert candidate([10, 2, 9, 3], 14) == False\n    assert candidate([3, 3], 2) == True\n    assert candidate([10, 4, 8, 6], 16) == False\n    assert candidate([14, 1, 1, 15], 17) == False\n    assert candidate([6, 11, 2, 12], 18) == False\n    assert candidate([14, 3, 12, 3], 18) == False\n    assert candidate([1, 1], 3) == True\n    assert candidate([1, 2], 3) == True\n    assert candidate([1, 1, 2, 2, 1], 5) == False\n    assert candidate([2, 2, 1, 3, 1], 5) == False\n    assert candidate([1, 3], 3) == True\n    assert candidate([3, 1, 1, 3, 1], 5) == False\n    assert candidate([2, 2], 3) == True\n    assert candidate([2, 3], 3) == True\n    assert candidate([2, 10], 3) == True\n    assert candidate([3, 1], 3) == True\n    assert candidate([3, 3], 3) == True\n    assert candidate([7, 9], 3) == True\n    assert candidate([3, 3, 1, 5, 1], 7) == False\n    assert candidate([1, 4, 2, 4, 2], 8) == False\n    assert candidate([2, 9, 2, 3, 2], 12) == False\n    assert candidate([1, 3], 4) == True\n    assert candidate([2, 2], 4) == True\n    assert candidate([4, 4, 4, 7, 5], 13) == False\n    assert candidate([5, 2, 6, 5, 4], 13) == False\n    assert candidate([2, 3], 4) == True\n    assert candidate([3, 1], 4) == True\n    assert candidate([13, 2, 13, 4, 11], 18) == False\n    assert candidate([5, 6, 10, 7, 4], 19) == False\n    assert candidate([16, 1, 12, 6, 7], 19) == False\n    assert candidate([3, 3], 4) == True\n    assert candidate([9, 9, 8, 10, 8], 20) == False\n    assert candidate([9, 4], 5) == True\n    assert candidate([10, 2], 5) == True\n    assert candidate([16, 2, 2, 16, 2], 20) == False\n    assert candidate([6, 2], 7) == True\n    assert candidate([1, 3, 1, 2, 1, 4], 6) == False\n    assert candidate([5, 1], 8) == True\n    assert candidate([1, 4, 4, 2, 1, 5], 9) == False\n    assert candidate([2, 5], 12) == True\n    assert candidate([10, 9], 15) == True\n    assert candidate([8, 4], 18) == True\n    assert candidate([3, 4, 3, 5, 2, 1], 9) == False\n    assert candidate([3, 7, 2, 8, 2, 4], 11) == False\n    assert candidate([8, 1], 19) == True\n    assert candidate([1, 1, 2], 3) == True\n    assert candidate([5, 1, 1, 9, 1, 5], 11) == False\n    assert candidate([1, 1, 3], 3) == True\n    assert candidate([6, 4, 7, 2, 5, 4], 12) == False\n    assert candidate([1, 2, 1], 3) == True\n    assert candidate([1, 3, 1], 3) == True\n\ndef test_check():\n    check(canSplitArray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2917_countPairs", "language": "py", "prompt": "from typing import List\n\ndef countPairs(nums: List[int], target: int) -> int:\n    \"\"\"Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.\nExample 1:\nInput: nums = [-1,1,2,3,1], target = 2\nOutput: 3\nExplanation: There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\nExample 2:\nInput: nums = [-6,2,5,-2,-7,-1,3], target = -2\nOutput: 10\nExplanation: There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target\nConstraints:\n * 1 <= nums.length == n <= 50\n * -50 <= nums[i], target <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2917_countPairs.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([-1, 1, 2, 3, 1], 2) == 3\n    assert candidate([-6, 2, 5, -2, -7, -1, 3], -2) == 10\n    assert candidate([9, -5, -5, 5, -5, -4, -6, 6, -6], 3) == 27\n    assert candidate([-8, -5, 5, -4, 10], 2) == 6\n    assert candidate([-5, 0, -7, -1, 9, 8, -9, 9], -14) == 1\n    assert candidate([6, -1, 7, 4, 2, 3], 8) == 8\n    assert candidate([2, 8, 2, 8, 7], 10) == 3\n    assert candidate([-6, 1, 1, -1, -10, -7, 1, -5, -4, 0], -15) == 2\n    assert candidate([10, -2, -1, 7, 8, 5, 3, -4, -9], -10) == 2\n    assert candidate([3, 8, -3, 4, 10, -6], 1) == 4\n    assert candidate([-4, -6, -7, 8], -13) == 0\n    assert candidate([-4, 0, 10, 8, -2], 0) == 3\n    assert candidate([-8, -5, -3, 1, -7], -6) == 7\n    assert candidate([4, -8, -2, 5, 2, -9, 6, 5, -4], -4) == 9\n    assert candidate([-1, -5, 4, 4, -10], -6) == 2\n    assert candidate([-5, 4, -6, -5, -10, -1, 10, 3], 6) == 24\n    assert candidate([-9, 6, -4, 10, 1, 8], 11) == 11\n    assert candidate([-10, -6, -8, -9, 6, 6, -6, -6, -3], -2) == 25\n    assert candidate([-7, 7, 6, -9, -4, 10, 8, -8, 2, 2], -1) == 17\n    assert candidate([0, -1, 0, -6, -9], -9) == 2\n    assert candidate([8, -10, -9, 6, -3, 5, -2, -2, -7], -4) == 15\n    assert candidate([-1, 3, 8, 3], 2) == 0\n    assert candidate([7, 2, 9, -10, -4, 4, -3, 0], -20) == 0\n    assert candidate([6, 4, 1, -7], 7) == 4\n    assert candidate([3, 8, 6, -2, 6, 1, 7], 7) == 7\n    assert candidate([1, 3, -10, 5, -8, 0, -5, -9], -7) == 11\n    assert candidate([-6, 9, 2, 4, -9, 2, 4, -6, 6, -9], 11) == 40\n    assert candidate([-10, -7, -5, -1, 2, 4, -6, 6], -3) == 15\n    assert candidate([-1, 0, 1, 9, -2, -8, -8, 7], 1) == 16\n    assert candidate([1, 9, 3, 2, 9, -5, 6, 0, -6, 6], 9) == 29\n    assert candidate([-3, -3, -4, 1, 4, 9], 6) == 11\n    assert candidate([-10, 3, -5, 2, -10, 7, 9], 4) == 14\n    assert candidate([7, 10, 9, 8, -9, 1, -7, 10, -4, 2], 4) == 21\n    assert candidate([9, -9, 0, 5, 4], 14) == 9\n    assert candidate([7, 9, 7, -10, -6, -8, -5], 2) == 14\n    assert candidate([8, -5, 0, 4], 0) == 2\n    assert candidate([5, 2, -1, 9, -1, -1], 4) == 6\n    assert candidate([-7, -4, 3, 9, 10, 5, -1, 1, -7], -4) == 8\n    assert candidate([0, 8, 9, -9, 8, -2, -1, 2, 5], -1) == 7\n    assert candidate([10, 4, -9, 8, -10, 3], -7) == 1\n    assert candidate([-6, -6, 6, -4, -5, -1, 10, -8, 1], -13) == 2\n    assert candidate([7, 3, -4, 1, -9, -8, 10, 4, -1], -2) == 13\n    assert candidate([4, 3, -3, 1, -3, -1], -2) == 3\n    assert candidate([10, -8, -9, -7, 2, -10, 4, 7, 6, 6], 14) == 41\n    assert candidate([9, -5, -4, -2, 9], 4) == 3\n    assert candidate([-1, 2, -3, -4, -10, -8, 2], -1) == 16\n    assert candidate([-8, -9, -10, 0, -5, -5], -15) == 3\n    assert candidate([-8, 9, -10, 2, -10, -6, -1, -8], -4) == 19\n    assert candidate([4, -7, 8, 7, -4, 3, 7, 7, -2, -10], 4) == 25\n    assert candidate([6, 3, 4, 5, -4], 0) == 1\n    assert candidate([2, -4, 5, 3, 7, 10, 9, -1, 9, 0], 9) == 23\n    assert candidate([-2, -5, 9, -3, -8, 5, -1, 3, -9], 1) == 23\n    assert candidate([0, -2, -3, -1, -6, -7, 3], -10) == 1\n    assert candidate([10, 4, -3, 9, -8, 6], 14) == 11\n    assert candidate([-10, -6, 6, -7, 1, -7, 9, 3, 1], 15) == 35\n    assert candidate([2, -3, -6, -2, 5], -4) == 3\n    assert candidate([-10, -8, 8, -2], 0) == 4\n    assert candidate([-2, 2, -7, -5, 1, 6, 8], 0) == 9\n    assert candidate([4, -4, -5, -8, 9], -10) == 2\n    assert candidate([-5, -4, -6, -7, 9, -10, 0, 4, 9, -1], -7) == 13\n    assert candidate([-10, -6, 6, -3, 10, -6, 4, -8], -9) == 8\n    assert candidate([-8, -1, -9, 1], -17) == 0\n    assert candidate([6, -4, 2, 1, 10, -1], 1) == 4\n    assert candidate([9, 4, -8, 8, 9, -4], -16) == 0\n    assert candidate([9, -4, 8, -9, -2, -2], -11) == 1\n    assert candidate([-7, 1, 3, 7, 6, 3], 10) == 12\n    assert candidate([10, 10, -2, -4], 8) == 3\n    assert candidate([-3, 2, 6, -6, 9], 3) == 4\n    assert candidate([5, 0, 2, 4, 2, -7], 2) == 5\n    assert candidate([4, -5, -4, -2, -9, -6, -10, -10, 2, -8], -19) == 1\n    assert candidate([-10, 10, -9, -2, 3, -2, -7, -1, -6, 7], -17) == 1\n    assert candidate([-9, -9, 3, 7, -9, -10, 2, 3, -4], -13) == 7\n    assert candidate([-5, -4, -10, 7], 14) == 6\n    assert candidate([-3, 4, -6, -6, 1, -10, -1, -8], -11) == 7\n    assert candidate([-7, 1, -5, 8, -7, -3, 2, -2, -2, 7], -5) == 14\n    assert candidate([8, 0, -8, -8, -1, 5], 0) == 8\n    assert candidate([9, 7, 2, 4, 3], 7) == 2\n    assert candidate([8, -1, -5, 7, 7, 5, -6, 2], -2) == 5\n    assert candidate([-1, 3, 3, 3, 9], 8) == 6\n    assert candidate([-8, 0, -1, -6, -9, 2, 3, 1], -9) == 4\n    assert candidate([3, -3, -7, -6, -5, -2], -2) == 12\n    assert candidate([3, 6, 0, -4, -2, 5], -6) == 0\n    assert candidate([-8, 9, 2, 5, 9, -4, 3], 6) == 12\n    assert candidate([0, -6, -5, -8, -4, 0, 7], 7) == 19\n    assert candidate([0, 9, 2, -4], -8) == 0\n    assert candidate([-7, 9, -3, -5, -9, -3, -8, -2, 1, 2], -8) == 15\n    assert candidate([4, 10, -7, 0, -3, 5, 9, 6, 8, -4], 13) == 34\n    assert candidate([2, -6, 0, 5, -9, -8, 6, 5], -3) == 11\n    assert candidate([-4, 6, -2, 10, -5, -7, -8, -1], -5) == 13\n    assert candidate([10, 4, 8, -1, 9, -5, -1, -7, -9], 19) == 35\n    assert candidate([-6, 5, 3, -2, 0, 3, -7, -7], -8) == 5\n    assert candidate([-3, -1, 7, 4, -10, -6, 2], -4) == 7\n    assert candidate([-7, 8, 3, -1, 2, 1, -10], -7) == 5\n    assert candidate([7, -3, -5, 9, -10, -1, -3, -3, -3, 1], 6) == 36\n    assert candidate([-5, -10, -7, -3, -2, -2], -15) == 1\n    assert candidate([-4, 6, -9, -8, -9, -9], -17) == 3\n    assert candidate([-3, -8, -6, -4, -8, -10, -2, 5, -2], 1) == 32\n    assert candidate([1, 1, -6, 8, 2, 10, -7, -9, -9], -7) == 10\n    assert candidate([-9, -6, -3, 5, -4], 2) == 9\n    assert candidate([-5, 10, -5, 1, 7, -8, 8, -6, -6], 2) == 19\n\ndef test_check():\n    check(countPairs)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2919_maxIncreasingGroups", "language": "py", "prompt": "from typing import List\n\ndef maxIncreasingGroups(usageLimits: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array usageLimits of length n.\nYour task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions:\n * Each group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group.\n * Each group (except the first one) must have a length strictly greater than the previous group.\nReturn an integer denoting the maximum number of groups you can create while satisfying these conditions.\nExample 1:\nInput: usageLimits = [1,2,5]\nOutput: 3\nExplanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [2].\nGroup 2 contains the numbers [1,2].\nGroup 3 contains the numbers [0,1,2].\nIt can be shown that the maximum number of groups is 3.\nSo, the output is 3.\nExample 2:\nInput: usageLimits = [2,1,2]\nOutput: 2\nExplanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nGroup 2 contains the numbers [1,2].\nIt can be shown that the maximum number of groups is 2.\nSo, the output is 2.\nExample 3:\nInput: usageLimits = [1,1]\nOutput: 1\nExplanation: In this example, we can use both 0 and 1 at most once.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nIt can be shown that the maximum number of groups is 1.\nSo, the output is 1.\nConstraints:\n * 1 <= usageLimits.length <= 105\n * 1 <= usageLimits[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2919_maxIncreasingGroups.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 5]) == 3\n    assert candidate([2, 1, 2]) == 2\n    assert candidate([1, 1]) == 1\n    assert candidate([1, 4]) == 2\n    assert candidate([1, 5]) == 2\n    assert candidate([1, 7]) == 2\n    assert candidate([1, 8]) == 2\n    assert candidate([2, 1]) == 2\n    assert candidate([2, 2]) == 2\n    assert candidate([2, 3]) == 2\n    assert candidate([2, 4]) == 2\n    assert candidate([2, 5]) == 2\n    assert candidate([2, 7]) == 2\n    assert candidate([2, 8]) == 2\n    assert candidate([2, 9]) == 2\n    assert candidate([3, 1]) == 2\n    assert candidate([3, 4]) == 2\n    assert candidate([3, 7]) == 2\n    assert candidate([3, 10]) == 2\n    assert candidate([4, 1]) == 2\n    assert candidate([4, 2]) == 2\n    assert candidate([4, 4]) == 2\n    assert candidate([4, 5]) == 2\n    assert candidate([4, 7]) == 2\n    assert candidate([4, 10]) == 2\n    assert candidate([5, 8]) == 2\n    assert candidate([5, 10]) == 2\n    assert candidate([6, 2]) == 2\n    assert candidate([6, 3]) == 2\n    assert candidate([6, 4]) == 2\n    assert candidate([6, 5]) == 2\n    assert candidate([6, 6]) == 2\n    assert candidate([6, 7]) == 2\n    assert candidate([6, 9]) == 2\n    assert candidate([6, 19]) == 2\n    assert candidate([7, 1]) == 2\n    assert candidate([7, 2]) == 2\n    assert candidate([7, 3]) == 2\n    assert candidate([7, 4]) == 2\n    assert candidate([7, 7]) == 2\n    assert candidate([7, 13]) == 2\n    assert candidate([8, 3]) == 2\n    assert candidate([8, 6]) == 2\n    assert candidate([9, 1]) == 2\n    assert candidate([9, 3]) == 2\n    assert candidate([9, 4]) == 2\n    assert candidate([9, 6]) == 2\n    assert candidate([9, 8]) == 2\n    assert candidate([9, 10]) == 2\n    assert candidate([10, 2]) == 2\n    assert candidate([10, 3]) == 2\n    assert candidate([10, 8]) == 2\n    assert candidate([10, 11]) == 2\n    assert candidate([13, 11]) == 2\n    assert candidate([13, 13]) == 2\n    assert candidate([16, 9]) == 2\n    assert candidate([18, 6]) == 2\n    assert candidate([32, 42]) == 2\n    assert candidate([1, 1, 5]) == 2\n    assert candidate([1, 1, 10]) == 2\n    assert candidate([1, 4, 3]) == 3\n    assert candidate([1, 4, 5]) == 3\n    assert candidate([1, 6, 4]) == 3\n    assert candidate([1, 6, 8]) == 3\n    assert candidate([1, 7, 19]) == 3\n    assert candidate([1, 8, 6]) == 3\n    assert candidate([1, 9, 5]) == 3\n    assert candidate([1, 9, 6]) == 3\n    assert candidate([1, 10, 6]) == 3\n    assert candidate([2, 2, 2]) == 3\n    assert candidate([2, 3, 8]) == 3\n    assert candidate([2, 6, 10]) == 3\n    assert candidate([2, 7, 2]) == 3\n    assert candidate([2, 7, 7]) == 3\n    assert candidate([2, 8, 7]) == 3\n    assert candidate([2, 9, 9]) == 3\n    assert candidate([3, 1, 1]) == 2\n    assert candidate([3, 5, 5]) == 3\n    assert candidate([3, 5, 8]) == 3\n    assert candidate([3, 6, 5]) == 3\n    assert candidate([3, 7, 4]) == 3\n    assert candidate([3, 7, 10]) == 3\n    assert candidate([3, 8, 1]) == 3\n    assert candidate([3, 9, 9]) == 3\n    assert candidate([3, 10, 9]) == 3\n    assert candidate([4, 2, 5]) == 3\n    assert candidate([4, 2, 15]) == 3\n    assert candidate([4, 5, 5]) == 3\n    assert candidate([4, 7, 9]) == 3\n    assert candidate([4, 8, 2]) == 3\n    assert candidate([4, 8, 4]) == 3\n    assert candidate([4, 10, 3]) == 3\n    assert candidate([4, 10, 4]) == 3\n    assert candidate([5, 1, 5]) == 3\n    assert candidate([5, 2, 9]) == 3\n    assert candidate([5, 2, 10]) == 3\n    assert candidate([5, 6, 1]) == 3\n    assert candidate([5, 6, 5]) == 3\n    assert candidate([5, 7, 4]) == 3\n    assert candidate([5, 10, 3]) == 3\n\ndef test_check():\n    check(maxIncreasingGroups)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2920_minimumSeconds", "language": "py", "prompt": "from typing import List\n\ndef minimumSeconds(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array nums containing n integers.\nAt each second, you perform the following operation on the array:\n * For every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n].\nNote that all the elements get replaced simultaneously.\nReturn the minimum number of seconds needed to make all elements in the array nums equal.\nExample 1:\nInput: nums = [1,2,1,2]\nOutput: 1\nExplanation: We can equalize the array in 1 second in the following way:\n- At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.\nExample 2:\nInput: nums = [2,1,3,3,2]\nOutput: 2\nExplanation: We can equalize the array in 2 seconds in the following way:\n- At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.\nExample 3:\nInput: nums = [5,5,5,5]\nOutput: 0\nExplanation: We don't need to perform any operations as all elements in the initial array are the same.\nConstraints:\n * 1 <= n == nums.length <= 105\n * 1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2920_minimumSeconds.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 1, 2]) == 1\n    assert candidate([2, 1, 3, 3, 2]) == 2\n    assert candidate([5, 5, 5, 5]) == 0\n    assert candidate([4, 18]) == 1\n    assert candidate([11, 7]) == 1\n    assert candidate([14, 2]) == 1\n    assert candidate([14, 9]) == 1\n    assert candidate([20, 1]) == 1\n    assert candidate([17, 15]) == 1\n    assert candidate([11, 13]) == 1\n    assert candidate([7, 13]) == 1\n    assert candidate([18, 17]) == 1\n    assert candidate([15, 17]) == 1\n    assert candidate([13, 8]) == 1\n    assert candidate([12, 16]) == 1\n    assert candidate([12, 8]) == 1\n    assert candidate([18, 16]) == 1\n    assert candidate([16, 16]) == 0\n    assert candidate([6, 12]) == 1\n    assert candidate([9, 6]) == 1\n    assert candidate([2, 17]) == 1\n    assert candidate([7, 5]) == 1\n    assert candidate([15, 6]) == 1\n    assert candidate([3, 14]) == 1\n    assert candidate([6, 16]) == 1\n    assert candidate([3, 16]) == 1\n    assert candidate([11, 9]) == 1\n    assert candidate([4, 15]) == 1\n    assert candidate([16, 2]) == 1\n    assert candidate([12, 7]) == 1\n    assert candidate([7, 9]) == 1\n    assert candidate([7, 3]) == 1\n    assert candidate([8, 4]) == 1\n    assert candidate([4, 11]) == 1\n    assert candidate([6, 15]) == 1\n    assert candidate([9, 7]) == 1\n    assert candidate([19, 4]) == 1\n    assert candidate([17, 6]) == 1\n    assert candidate([18, 10]) == 1\n    assert candidate([8, 3]) == 1\n    assert candidate([11, 4, 10]) == 1\n    assert candidate([5, 3, 13]) == 1\n    assert candidate([2, 1, 15]) == 1\n    assert candidate([17, 13, 9]) == 1\n    assert candidate([2, 15, 12]) == 1\n    assert candidate([16, 12, 13]) == 1\n    assert candidate([1, 12, 19]) == 1\n    assert candidate([4, 3, 3]) == 1\n    assert candidate([15, 11, 3]) == 1\n    assert candidate([15, 18, 16]) == 1\n    assert candidate([20, 6, 7]) == 1\n    assert candidate([9, 4, 7]) == 1\n    assert candidate([20, 11, 6]) == 1\n    assert candidate([11, 8, 16]) == 1\n    assert candidate([1, 4, 12]) == 1\n    assert candidate([18, 12, 19]) == 1\n    assert candidate([8, 11, 5]) == 1\n    assert candidate([6, 10, 6]) == 1\n    assert candidate([3, 10, 16]) == 1\n    assert candidate([15, 6, 15]) == 1\n    assert candidate([9, 5, 1]) == 1\n    assert candidate([15, 15, 18]) == 1\n    assert candidate([3, 16, 13]) == 1\n    assert candidate([9, 3, 6]) == 1\n    assert candidate([4, 14, 9]) == 1\n    assert candidate([15, 2, 20]) == 1\n    assert candidate([13, 7, 19]) == 1\n    assert candidate([19, 19, 12]) == 1\n    assert candidate([8, 6, 1]) == 1\n    assert candidate([19, 10, 19]) == 1\n    assert candidate([6, 9, 17]) == 1\n    assert candidate([3, 19, 8, 12]) == 2\n    assert candidate([6, 9, 14, 16]) == 2\n    assert candidate([19, 12, 14, 16]) == 2\n    assert candidate([12, 20, 13, 19]) == 2\n    assert candidate([12, 14, 13, 8]) == 2\n    assert candidate([8, 13, 3, 3]) == 1\n    assert candidate([5, 11, 7, 15]) == 2\n    assert candidate([7, 11, 7, 5]) == 1\n    assert candidate([1, 8, 7, 15]) == 2\n    assert candidate([13, 1, 19, 3]) == 2\n    assert candidate([19, 15, 19, 1]) == 1\n    assert candidate([7, 13, 20, 9]) == 2\n    assert candidate([1, 18, 16, 6]) == 2\n    assert candidate([9, 16, 6, 13]) == 2\n    assert candidate([11, 9, 5, 1]) == 2\n    assert candidate([6, 3, 15, 10]) == 2\n    assert candidate([12, 1, 9, 19]) == 2\n    assert candidate([15, 14, 14, 19]) == 1\n    assert candidate([2, 5, 13, 5]) == 1\n    assert candidate([4, 8, 8, 13]) == 1\n    assert candidate([3, 9, 10, 13]) == 2\n    assert candidate([7, 17, 11, 8]) == 2\n    assert candidate([4, 5, 15, 11]) == 2\n    assert candidate([11, 15, 19, 12]) == 2\n    assert candidate([8, 20, 5, 10]) == 2\n    assert candidate([5, 3, 5, 17]) == 1\n    assert candidate([14, 19, 8, 8]) == 1\n    assert candidate([16, 20, 4, 13]) == 2\n    assert candidate([17, 16, 2, 16]) == 1\n\ndef test_check():\n    check(minimumSeconds)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2921_countSteppingNumbers", "language": "py", "prompt": "def countSteppingNumbers(low: str, high: str) -> int:\n    \"\"\"Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high].\nA stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\nReturn an integer denoting the count of stepping numbers in the inclusive range [low, high].\nSince the answer may be very large, return it modulo 109 + 7.\nNote: A stepping number should not have a leading zero.\nExample 1:\nInput: low = \"1\", high = \"11\"\nOutput: 10\nExplanation: The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.\nExample 2:\nInput: low = \"90\", high = \"101\"\nOutput: 2\nExplanation: The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2.\nConstraints:\n * 1 <= int(low) <= int(high) < 10100\n * 1 <= low.length, high.length <= 100\n * low and high consist of only digits.\n * low and high don't have any leading zeros.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2921_countSteppingNumbers.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(1, 11) == 10\n    assert candidate(90, 101) == 2\n    assert candidate(2, 40) == 14\n    assert candidate(26, 60) == 6\n    assert candidate(40, 70) == 6\n    assert candidate(46, 66) == 3\n    assert candidate(58, 58) == 0\n    assert candidate(23, 99) == 14\n    assert candidate(44, 86) == 7\n    assert candidate(20, 111) == 16\n    assert candidate(70, 75) == 0\n    assert candidate(37, 111) == 12\n    assert candidate(17, 149) == 18\n    assert candidate(21, 145) == 18\n    assert candidate(47, 124) == 12\n    assert candidate(81, 91) == 2\n    assert candidate(18, 159) == 18\n    assert candidate(85, 92) == 2\n    assert candidate(66, 112) == 7\n    assert candidate(84, 102) == 4\n    assert candidate(41, 156) == 14\n    assert candidate(64, 135) == 10\n    assert candidate(57, 143) == 10\n    assert candidate(85, 116) == 4\n    assert candidate(103, 104) == 0\n    assert candidate(98, 118) == 2\n    assert candidate(28, 197) == 16\n    assert candidate(6, 220) == 26\n    assert candidate(106, 121) == 1\n    assert candidate(7, 226) == 25\n    assert candidate(105, 136) == 2\n    assert candidate(30, 221) == 18\n    assert candidate(113, 139) == 2\n    assert candidate(44, 210) == 14\n    assert candidate(13, 242) == 22\n    assert candidate(12, 257) == 23\n    assert candidate(70, 205) == 8\n    assert candidate(55, 229) == 13\n    assert candidate(16, 276) == 22\n    assert candidate(140, 153) == 0\n    assert candidate(79, 218) == 8\n    assert candidate(99, 200) == 3\n    assert candidate(90, 210) == 5\n    assert candidate(123, 186) == 1\n    assert candidate(149, 160) == 0\n    assert candidate(138, 180) == 0\n    assert candidate(160, 163) == 0\n    assert candidate(79, 246) == 10\n    assert candidate(137, 189) == 0\n    assert candidate(163, 163) == 0\n    assert candidate(37, 289) == 18\n    assert candidate(79, 255) == 10\n    assert candidate(140, 197) == 0\n    assert candidate(22, 317) == 21\n    assert candidate(146, 199) == 0\n    assert candidate(57, 288) == 14\n    assert candidate(109, 237) == 6\n    assert candidate(48, 299) == 16\n    assert candidate(158, 194) == 0\n    assert candidate(29, 326) == 22\n    assert candidate(133, 223) == 2\n    assert candidate(109, 249) == 6\n    assert candidate(20, 341) == 24\n    assert candidate(9, 352) == 29\n    assert candidate(115, 253) == 6\n    assert candidate(181, 188) == 0\n    assert candidate(120, 250) == 6\n    assert candidate(100, 273) == 7\n    assert candidate(105, 269) == 6\n    assert candidate(189, 190) == 0\n    assert candidate(148, 237) == 4\n    assert candidate(126, 267) == 4\n    assert candidate(141, 252) == 4\n    assert candidate(185, 209) == 0\n    assert candidate(14, 381) == 26\n    assert candidate(7, 388) == 31\n    assert candidate(15, 383) == 26\n    assert candidate(78, 325) == 13\n    assert candidate(131, 274) == 4\n    assert candidate(177, 230) == 2\n    assert candidate(66, 346) == 17\n    assert candidate(144, 271) == 4\n    assert candidate(96, 322) == 9\n    assert candidate(112, 307) == 6\n    assert candidate(73, 349) == 16\n    assert candidate(128, 296) == 4\n    assert candidate(189, 237) == 4\n    assert candidate(141, 286) == 4\n    assert candidate(47, 382) == 20\n    assert candidate(27, 411) == 24\n    assert candidate(16, 423) == 26\n    assert candidate(22, 417) == 25\n    assert candidate(174, 266) == 4\n    assert candidate(101, 342) == 9\n    assert candidate(76, 370) == 16\n    assert candidate(147, 301) == 4\n    assert candidate(72, 376) == 16\n    assert candidate(154, 297) == 4\n    assert candidate(15, 439) == 28\n    assert candidate(73, 381) == 16\n\ndef test_check():\n    check(countSteppingNumbers)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2952_minimumTime", "language": "py", "prompt": "from typing import List\n\ndef minimumTime(nums1: List[int], nums2: List[int], x: int) -> int:\n    \"\"\"    You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\n* Choose an index 0 <= i < nums1.length and make nums1[i] = 0.\n    You are also given an integer x.\n    Return the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.\n    Example 1:\n    Input: nums1 = [1,2,3], nums2 = [1,2,3], x = 4\n    Output: 3\n    Explanation:\n    For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6].\n    For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9].\n    For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0].\n    Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n    Example 2:\n    Input: nums1 = [1,2,3], nums2 = [3,3,3], x = 4\n    Output: -1\n    Explanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n    Constraints:\n* 1 <= nums1.length <= 103\n* 1 <= nums1[i] <= 103\n* 0 <= nums2[i] <= 103\n* nums1.length == nums2.length\n* 0 <= x <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2952_minimumTime.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3], [1, 2, 3], 4) == 3\n    assert candidate([1, 2, 3], [3, 3, 3], 4) == -1\n    assert candidate([4, 4, 9, 10], [4, 4, 1, 3], 16) == 4\n    assert candidate([5, 3], [3, 2], 4) == 2\n    assert candidate([4, 5, 3, 2, 3, 9, 5, 7, 10, 4], [4, 4, 0, 4, 1, 2, 4, 0, 4, 0], 47) == -1\n    assert candidate([7, 9, 8, 5, 8, 3], [0, 1, 4, 2, 3, 1], 37) == 2\n    assert candidate([8, 2, 3], [1, 4, 2], 13) == 0\n    assert candidate([4, 7, 2, 3, 4, 3, 10, 8], [3, 4, 0, 1, 1, 0, 2, 2], 36) == 4\n    assert candidate([2, 10, 10, 4, 6, 3], [1, 0, 0, 1, 3, 1], 35) == 0\n    assert candidate([9, 5, 3], [4, 1, 3], 17) == 0\n    assert candidate([1, 7, 9, 4, 8, 8, 1], [2, 2, 3, 2, 0, 1, 0], 20) == 6\n    assert candidate([9, 2, 8, 3, 1, 9, 7, 6], [0, 3, 4, 1, 3, 4, 2, 1], 40) == 8\n    assert candidate([10], [3], 10) == 0\n    assert candidate([7, 6, 8, 2, 8, 9, 3, 3], [2, 2, 4, 0, 0, 2, 2, 3], 45) == 5\n    assert candidate([4, 9, 5, 2, 3], [4, 2, 0, 4, 0], 18) == 3\n    assert candidate([2, 10, 2, 7, 8, 9, 7, 6, 6], [4, 2, 1, 4, 3, 2, 4, 4, 4], 55) == -1\n    assert candidate([6, 8, 10, 7, 10, 9], [4, 2, 0, 4, 4, 2], 38) == 5\n    assert candidate([9, 2, 8, 5, 8, 3, 5, 2, 2], [4, 3, 4, 2, 0, 1, 4, 4, 2], 41) == -1\n    assert candidate([5, 3, 2, 3, 10, 4, 7, 9, 1, 10], [2, 0, 2, 0, 3, 3, 4, 4, 0, 1], 30) == -1\n    assert candidate([2, 3, 5], [0, 0, 1], 8) == 1\n    assert candidate([7, 9, 7, 9], [4, 2, 0, 4], 32) == 0\n    assert candidate([8, 5, 6, 4, 7, 6, 3, 9, 4], [0, 4, 2, 4, 3, 3, 1, 4, 4], 38) == -1\n    assert candidate([3, 1, 1, 1], [0, 0, 3, 0], 3) == 2\n    assert candidate([6, 6, 8, 7, 1, 7], [2, 2, 1, 1, 2, 3], 27) == 5\n    assert candidate([10, 5], [1, 3], 14) == 1\n    assert candidate([10, 7, 1, 2, 6], [4, 3, 2, 2, 4], 17) == -1\n    assert candidate([9, 5, 6, 1, 9, 4, 5, 7], [0, 4, 0, 2, 2, 3, 2, 4], 24) == -1\n    assert candidate([4, 1, 2, 4, 10, 7, 8], [0, 2, 0, 4, 0, 2, 1], 18) == 5\n    assert candidate([4], [0], 4) == 0\n    assert candidate([4, 7, 1, 7, 5, 10], [0, 4, 3, 2, 3, 1], 29) == 4\n    assert candidate([9, 8, 9, 7, 4, 6, 8, 6, 4], [4, 3, 3, 3, 1, 2, 2, 1, 0], 42) == -1\n    assert candidate([8, 3, 2], [3, 1, 3], 7) == 3\n    assert candidate([6, 5, 2, 8, 8, 1, 6, 4], [1, 2, 1, 0, 1, 0, 3, 1], 23) == 6\n    assert candidate([3, 8, 5, 4, 10, 2], [4, 1, 4, 2, 1, 0], 26) == 4\n    assert candidate([5, 3], [0, 3], 4) == 2\n    assert candidate([8], [4], 7) == 1\n    assert candidate([1, 8, 6, 8, 6], [3, 0, 2, 4, 0], 16) == 4\n    assert candidate([8, 6], [0, 3], 14) == 0\n    assert candidate([3, 4, 5, 2, 4, 10, 6, 3, 6, 4], [3, 0, 0, 2, 4, 2, 4, 1, 2, 1], 28) == -1\n    assert candidate([3, 2, 5, 8, 8], [1, 3, 2, 1, 0], 20) == 3\n    assert candidate([9, 2, 8, 7, 5, 2, 3, 2], [3, 2, 3, 0, 4, 3, 1, 4], 37) == -1\n    assert candidate([6, 4, 3, 1, 10, 5, 10, 3, 5, 9], [0, 4, 1, 2, 1, 2, 3, 3, 4, 2], 41) == -1\n    assert candidate([6, 10, 7, 10, 6, 7, 7, 4], [1, 3, 0, 0, 1, 2, 1, 3], 55) == 1\n    assert candidate([6, 4, 3, 1], [1, 1, 3, 3], 7) == -1\n    assert candidate([2, 10, 8, 10, 1, 4, 7, 10, 5, 1], [4, 3, 1, 2, 3, 1, 3, 2, 2, 1], 29) == -1\n    assert candidate([2, 8, 5], [2, 0, 2], 14) == 1\n    assert candidate([7, 10, 1, 3, 7, 3, 2], [1, 1, 3, 0, 2, 2, 3], 22) == 7\n    assert candidate([6, 4, 2, 3, 8, 6, 6, 8, 10], [2, 1, 4, 1, 2, 1, 0, 1, 4], 39) == 9\n    assert candidate([4, 4, 8, 10, 2, 7, 9, 8, 1, 8], [1, 0, 4, 0, 3, 3, 1, 2, 2, 1], 44) == 10\n    assert candidate([2, 4, 1, 8, 3, 9], [0, 2, 0, 0, 0, 4], 21) == 1\n    assert candidate([6, 10], [2, 1], 8) == 1\n    assert candidate([8, 6], [3, 0], 10) == 1\n    assert candidate([5, 5, 5, 10], [0, 1, 0, 3], 21) == 1\n    assert candidate([7, 1, 1, 2, 9, 3, 3, 2, 2], [0, 1, 4, 3, 4, 1, 2, 1, 2], 15) == -1\n    assert candidate([10, 4, 1, 10, 7, 5, 6, 3, 2, 10], [4, 0, 4, 0, 3, 4, 3, 0, 0, 3], 50) == 9\n    assert candidate([9, 4, 6, 2], [3, 4, 0, 4], 15) == 4\n    assert candidate([7, 3, 9, 2, 9, 10, 7, 10, 10, 4], [1, 4, 2, 1, 4, 1, 1, 0, 3, 4], 69) == 8\n    assert candidate([4, 5, 6], [4, 4, 0], 13) == 2\n    assert candidate([2, 3, 3, 4, 4], [2, 2, 1, 1, 1], 12) == 5\n    assert candidate([4, 5, 5, 3, 7], [3, 3, 2, 0, 4], 21) == 4\n    assert candidate([1, 3, 3, 4], [1, 3, 2, 3], 6) == -1\n    assert candidate([9, 1, 8, 9, 7, 2], [3, 3, 0, 2, 3, 4], 26) == 6\n    assert candidate([5, 5, 6, 8, 6, 1, 5, 7, 8], [2, 1, 0, 3, 2, 2, 2, 2, 4], 33) == -1\n    assert candidate([2, 9, 5, 5, 6, 7, 7, 9], [1, 3, 0, 3, 3, 3, 4, 2], 47) == 8\n    assert candidate([3], [0], 2) == 1\n    assert candidate([3, 6, 4, 8, 7, 9, 3, 3, 9], [4, 3, 2, 0, 0, 3, 3, 1, 4], 34) == -1\n    assert candidate([8], [1], 6) == 1\n    assert candidate([1, 7, 6, 2, 9], [4, 2, 3, 3, 0], 23) == 4\n    assert candidate([9, 10, 10, 5, 2, 4], [2, 4, 0, 3, 3, 4], 40) == 0\n    assert candidate([9, 10, 9, 4, 8, 9, 10, 7, 5], [2, 0, 3, 0, 2, 4, 3, 2, 4], 69) == 7\n    assert candidate([1, 7, 2, 7], [1, 0, 2, 3], 10) == 2\n    assert candidate([10, 4], [2, 4], 10) == 1\n    assert candidate([2, 10, 3, 6, 2, 10, 4], [4, 1, 4, 4, 4, 0, 0], 30) == 7\n    assert candidate([5, 9, 6], [1, 3, 2], 20) == 0\n    assert candidate([4, 5, 2, 4, 2, 7], [0, 0, 0, 0, 3, 0], 23) == 1\n    assert candidate([8], [0], 7) == 1\n    assert candidate([3], [3], 3) == 0\n    assert candidate([6, 1, 10, 10], [3, 2, 4, 0], 13) == 3\n    assert candidate([8, 9, 2, 10, 10, 1, 5], [4, 3, 3, 0, 2, 1, 2], 38) == 5\n    assert candidate([10, 2], [3, 4], 10) == 1\n    assert candidate([8, 9, 2], [2, 4, 1], 16) == 1\n    assert candidate([4, 2, 3], [4, 2, 2], 4) == -1\n    assert candidate([9, 8, 7, 6, 5, 1, 4], [2, 4, 1, 2, 3, 3, 0], 28) == 7\n    assert candidate([3, 4, 10, 1, 2, 4, 10, 3, 7, 2], [4, 0, 0, 1, 1, 4, 4, 4, 2, 1], 44) == -1\n    assert candidate([3, 5, 5, 1, 6, 4, 3], [1, 3, 4, 3, 3, 1, 4], 23) == -1\n    assert candidate([3, 8, 10, 2, 5, 10], [4, 0, 3, 2, 4, 3], 37) == 4\n    assert candidate([8, 8, 10, 8, 9, 6, 1, 8], [2, 0, 0, 1, 2, 1, 0, 4], 38) == 4\n    assert candidate([10, 7, 3, 10, 7, 6, 6, 10], [1, 2, 4, 0, 3, 4, 0, 3], 41) == 7\n    assert candidate([6, 7, 4, 1, 9, 6], [3, 3, 3, 0, 0, 1], 32) == 2\n    assert candidate([2], [2], 1) == 1\n    assert candidate([8, 9, 4, 5, 6, 7], [0, 3, 4, 3, 3, 1], 27) == 6\n    assert candidate([7], [1], 3) == 1\n    assert candidate([9], [0], 5) == 1\n    assert candidate([7, 2, 2, 2, 7, 4, 2, 10, 8], [4, 3, 2, 4, 4, 0, 1, 1, 2], 31) == -1\n    assert candidate([7, 2, 6, 4, 9, 9, 1, 9, 6, 7], [0, 1, 3, 2, 3, 3, 4, 2, 2, 1], 58) == -1\n    assert candidate([6, 8, 2, 3, 9, 8, 10, 9, 9], [1, 4, 2, 3, 2, 0, 1, 1, 3], 40) == -1\n    assert candidate([1, 1, 5], [4, 4, 2], 3) == -1\n    assert candidate([7, 5, 8, 3, 10, 2, 4, 8, 7], [4, 4, 2, 4, 2, 3, 1, 1, 1], 49) == -1\n    assert candidate([4, 7, 2, 6, 9, 2], [1, 2, 1, 4, 1, 3], 28) == 3\n    assert candidate([3, 6, 3, 9, 5], [0, 4, 0, 3, 1], 23) == 1\n\ndef test_check():\n    check(minimumTime)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2953_countPairs", "language": "py", "prompt": "from typing import List\n\ndef countPairs(coordinates: List[List[int]], k: int) -> int:\n    \"\"\"You are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane.\nWe define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation.\nReturn the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.\nExample 1:\nInput: coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5\nOutput: 2\nExplanation: We can choose the following pairs:\n- (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n- (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5.\nExample 2:\nInput: coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0\nOutput: 10\nExplanation: Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.\nConstraints:\n * 2 <= coordinates.length <= 50000\n * 0 <= xi, yi <= 106\n * 0 <= k <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2953_countPairs.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[1, 2], [4, 2], [1, 3], [5, 2]], 5) == 2\n    assert candidate([[1, 3], [1, 3], [1, 3], [1, 3], [1, 3]], 0) == 10\n    assert candidate([[27, 94], [61, 68], [47, 0], [100, 4], [127, 89], [61, 103], [26, 4], [51, 54], [91, 26], [98, 23], [80, 74], [19, 93]], 95) == 5\n    assert candidate([[39, 29], [98, 59], [65, 77], [41, 26], [95, 12], [71, 66], [41, 93], [28, 33], [96, 40], [39, 8], [106, 54], [8, 49], [68, 59], [21, 15], [3, 66], [77, 85], [111, 51]], 21) == 6\n    assert candidate([[100, 32], [69, 8], [85, 31], [69, 47], [62, 34], [102, 43], [81, 39], [90, 0], [123, 6], [79, 18], [21, 94], [13, 36], [49, 97], [76, 59], [42, 74], [60, 68], [21, 11], [71, 21], [64, 13], [64, 95], [5, 85], [118, 53], [70, 44], [38, 57], [32, 119], [80, 61], [13, 68], [43, 108], [86, 49]], 39) == 20\n    assert candidate([[60, 55], [35, 32], [99, 2], [58, 57], [16, 2], [43, 28], [30, 35], [35, 83], [104, 41], [20, 69], [58, 14], [12, 92], [71, 49], [7, 82], [65, 68], [9, 40], [15, 56], [57, 46], [21, 8], [37, 64], [42, 94], [73, 91], [12, 121], [10, 21], [41, 89]], 54) == 10\n    assert candidate([[94, 23], [86, 58], [126, 55], [107, 23], [121, 60], [89, 28], [123, 15], [127, 3], [100, 49], [5, 3], [81, 49], [93, 0], [95, 37], [92, 25]], 53) == 18\n    assert candidate([[40, 54], [8, 68], [33, 11], [51, 93], [95, 95], [17, 53], [35, 39], [59, 42], [28, 63], [41, 63], [54, 0], [88, 31], [5, 107], [32, 124], [74, 64], [15, 27], [61, 92], [16, 47], [62, 22], [2, 28], [27, 14], [53, 39], [21, 91], [7, 11]], 60) == 11\n    assert candidate([[28, 14], [2, 13], [28, 14], [4, 7], [23, 1], [54, 0], [43, 22], [98, 16]], 33) == 5\n    assert candidate([[84, 92], [84, 92], [84, 92], [84, 92], [84, 92], [54, 59], [84, 92], [93, 44]], 0) == 15\n    assert candidate([[10, 57], [12, 62], [92, 44], [7, 60], [8, 55], [13, 50], [5, 55], [71, 82], [64, 26], [68, 43], [61, 88], [9, 44], [95, 16], [17, 16], [12, 53], [9, 59], [81, 44], [3, 56], [70, 94], [0, 58], [84, 29], [13, 63], [79, 87], [19, 39], [74, 35], [92, 7], [31, 6], [2, 50]], 13) == 19\n    assert candidate([[56, 47], [26, 50], [51, 2], [40, 7], [24, 34], [55, 2], [13, 92], [57, 50], [47, 35], [32, 96], [14, 0], [4, 84], [86, 95]], 56) == 4\n    assert candidate([[34, 60], [17, 93], [87, 90], [32, 125], [71, 27], [27, 26], [127, 115], [91, 27], [63, 68], [97, 48], [69, 73], [120, 78], [43, 55], [101, 125], [86, 87], [12, 35], [5, 20], [46, 12], [17, 24], [107, 62], [86, 88], [26, 80], [30, 41], [110, 114]], 81) == 17\n    assert candidate([[65, 19], [12, 80], [90, 64], [38, 68], [17, 25], [49, 36], [91, 47], [20, 31], [81, 54], [83, 20], [90, 100], [0, 6], [93, 121]], 36) == 3\n    assert candidate([[24, 75], [22, 67]], 23) == 0\n    assert candidate([[42, 32], [62, 60], [57, 61], [100, 56], [91, 62], [57, 21], [100, 56], [63, 63], [45, 52], [59, 75], [32, 61], [57, 43], [61, 57], [64, 52], [24, 54], [92, 15], [53, 25], [84, 63], [1, 18], [21, 57], [29, 9], [68, 91], [22, 43], [105, 27]], 48) == 18\n    assert candidate([[70, 98], [79, 66], [71, 63], [111, 94], [3, 50], [64, 111], [98, 67], [23, 41], [66, 14], [40, 19], [15, 13], [32, 86], [59, 58], [73, 94], [18, 10], [77, 50], [20, 60], [66, 8], [15, 30], [71, 2], [55, 9]], 60) == 7\n    assert candidate([[5, 100], [60, 9], [84, 65], [38, 66], [83, 35], [17, 80], [88, 76], [80, 101], [55, 74], [46, 62], [28, 73], [54, 40], [119, 71], [10, 94], [45, 82], [20, 90], [47, 27], [41, 97], [66, 5], [33, 0], [101, 5], [89, 125], [6, 58], [61, 107], [25, 17], [104, 0], [29, 2]], 73) == 15\n    assert candidate([[29, 23], [8, 19], [26, 5], [12, 25], [37, 2], [37, 27], [18, 68], [3, 53], [81, 85], [27, 94], [29, 39], [41, 64], [26, 28], [23, 80], [13, 46], [5, 68], [16, 18], [21, 77]], 25) == 8\n    assert candidate([[90, 31], [113, 54], [92, 36], [67, 49], [123, 124], [127, 112], [16, 24], [85, 50], [58, 94], [115, 48], [83, 30], [51, 112], [39, 23], [0, 21], [27, 44], [99, 100], [122, 63], [34, 39], [25, 48], [44, 49], [84, 97], [31, 61]], 84) == 10\n    assert candidate([[51, 47], [51, 47], [8, 14], [82, 68], [55, 85], [8, 14], [51, 47], [87, 97], [75, 65], [78, 10], [51, 47], [87, 97], [74, 19], [51, 47], [56, 66], [8, 14], [78, 10], [74, 66], [65, 92], [51, 47], [3, 31]], 0) == 20\n    assert candidate([[25, 82], [86, 89], [25, 82], [47, 118], [14, 58], [22, 51], [0, 93], [26, 9], [67, 27], [43, 22], [78, 49], [82, 15], [93, 22], [67, 34], [54, 43], [61, 55], [74, 77], [115, 108], [54, 55], [9, 30], [31, 3], [26, 5], [60, 49]], 90) == 22\n    assert candidate([[29, 23], [48, 3], [58, 62], [16, 19], [0, 30], [59, 5], [96, 50], [7, 46], [5, 18], [42, 32], [78, 55]], 17) == 3\n    assert candidate([[47, 68], [55, 68], [36, 73], [33, 70], [36, 81], [60, 81], [32, 18], [38, 95], [34, 75], [33, 5], [33, 78], [32, 10], [36, 93], [56, 77], [43, 17], [99, 70], [15, 77], [42, 87], [30, 18], [36, 56], [47, 68], [45, 70], [48, 77], [53, 94], [0, 86], [53, 9], [68, 35], [32, 77], [95, 90]], 24) == 31\n    assert candidate([[5, 100], [19, 21], [83, 36], [24, 59], [92, 49], [6, 73], [57, 78], [69, 33], [3, 81], [53, 59], [23, 40], [6, 21], [57, 55], [98, 43], [33, 15], [8, 83], [29, 29], [85, 41], [47, 64], [10, 32], [82, 94], [14, 29], [13, 99], [19, 20], [85, 108], [41, 9]], 78) == 12\n    assert candidate([[8, 94], [19, 13], [72, 75], [17, 8], [57, 45], [17, 15], [14, 95], [74, 78], [17, 15], [9, 95], [79, 76], [13, 91], [28, 76], [94, 12], [11, 90], [94, 11], [94, 11], [15, 89], [20, 13], [23, 14], [22, 8], [21, 71]], 7) == 24\n    assert candidate([[37, 76], [109, 71], [66, 1], [55, 6], [90, 22], [71, 24], [3, 19], [46, 24], [74, 74], [85, 94], [2, 96], [1, 48], [31, 86], [22, 78], [93, 80], [3, 112], [11, 11], [98, 18], [81, 86], [55, 54], [82, 18], [127, 23]], 83) == 11\n    assert candidate([[9, 25], [56, 25], [7, 58], [9, 48], [77, 55], [6, 10], [33, 98], [22, 26], [41, 57], [18, 4], [40, 74]], 49) == 8\n    assert candidate([[91, 12], [86, 8], [74, 12], [85, 58], [65, 10], [49, 51], [43, 83], [34, 91], [89, 63], [26, 44], [68, 6], [71, 8], [92, 12], [49, 79], [64, 26], [0, 87], [22, 85], [15, 72], [17, 54], [33, 37], [70, 9], [88, 95], [85, 67], [32, 85], [94, 69], [87, 77]], 17) == 16\n    assert candidate([[54, 60], [31, 62], [76, 56], [79, 44]], 52) == 0\n    assert candidate([[41, 13], [15, 74], [43, 51], [44, 10], [49, 72], [63, 48], [50, 40], [90, 86], [105, 13], [11, 118], [55, 8], [3, 39], [27, 3], [55, 72], [33, 98], [10, 59], [40, 45], [10, 59], [40, 30], [97, 43], [96, 55], [47, 32], [43, 86], [57, 61], [1, 64]], 64) == 23\n    assert candidate([[29, 96], [82, 101], [1, 88], [9, 100], [55, 42], [37, 77], [89, 95], [40, 10], [111, 114], [89, 53], [91, 33], [93, 18], [90, 14], [50, 49], [27, 91], [99, 92], [26, 15], [69, 17], [61, 64]], 84) == 7\n    assert candidate([[57, 88], [83, 2], [82, 23], [19, 7], [43, 84], [54, 87], [51, 38], [61, 68], [68, 31], [74, 49], [64, 80], [2, 19], [18, 73], [52, 73], [75, 26], [32, 71], [91, 83], [84, 15], [49, 76]], 30) == 8\n    assert candidate([[34, 96], [53, 25], [97, 70], [48, 31], [48, 20], [54, 26], [42, 99], [52, 24], [56, 100], [35, 106], [16, 71], [34, 69], [42, 72], [28, 8], [35, 97], [103, 67], [12, 81], [8, 86]], 11) == 10\n    assert candidate([[60, 56], [48, 34], [21, 82], [63, 26], [97, 51], [35, 63], [39, 29], [5, 46], [16, 115], [19, 71], [34, 54], [6, 65], [11, 21], [54, 66], [2, 103], [13, 64], [30, 73], [23, 58], [31, 75], [6, 63], [16, 66], [21, 100]], 38) == 10\n    assert candidate([[5, 28], [16, 39], [38, 16], [21, 34], [5, 22], [73, 52], [3, 24], [24, 37], [11, 26]], 10) == 5\n    assert candidate([[34, 76], [50, 71], [55, 74], [36, 6], [56, 77], [56, 86], [9, 25], [7, 38], [34, 76], [96, 85], [29, 32]], 27) == 8\n    assert candidate([[69, 99], [60, 80], [59, 72], [74, 67], [34, 78], [73, 95], [65, 72], [86, 64], [42, 89], [90, 25], [84, 48]], 31) == 8\n    assert candidate([[50, 75], [84, 10], [3, 1], [8, 12], [41, 82], [68, 39], [55, 31], [4, 103], [50, 19], [15, 85], [20, 50], [118, 81], [47, 14], [1, 40], [1, 58], [8, 58], [18, 110], [62, 10], [98, 69], [25, 31], [99, 10], [74, 29], [124, 73]], 98) == 15\n    assert candidate([[65, 100], [43, 13], [80, 116], [40, 82], [50, 5], [53, 14], [62, 16], [38, 8], [83, 107], [56, 11], [82, 92], [62, 16], [59, 21], [38, 8], [55, 50], [67, 76], [36, 65]], 33) == 14\n    assert candidate([[52, 32], [42, 21], [1, 56], [93, 52], [85, 87], [14, 58], [39, 21], [3, 105], [18, 13], [5, 119], [108, 77], [91, 81], [22, 71], [76, 39], [2, 59], [23, 54], [83, 26], [28, 23], [33, 69], [27, 91], [92, 19], [53, 5], [39, 32], [14, 124]], 83) == 21\n    assert candidate([[84, 63], [92, 55], [56, 94], [89, 27], [53, 93], [85, 80], [65, 91], [77, 16], [28, 99], [48, 86], [54, 44], [33, 47], [47, 10], [11, 62], [2, 17]], 16) == 4\n    assert candidate([[78, 84], [91, 79], [1, 35], [73, 76], [89, 92], [69, 94], [78, 1], [27, 71], [17, 58], [18, 33], [82, 67], [24, 59], [23, 53], [82, 86]], 21) == 8\n    assert candidate([[29, 53], [40, 74], [42, 73], [24, 53], [79, 50], [13, 7], [43, 72], [26, 54], [41, 75], [66, 27], [43, 72], [81, 75], [47, 73], [74, 43], [97, 60], [42, 76], [46, 77], [21, 69], [88, 77]], 5) == 16\n    assert candidate([[21, 95], [53, 15], [71, 7], [22, 40], [8, 89], [66, 62]], 74) == 1\n    assert candidate([[93, 3], [89, 13], [70, 48], [75, 6], [43, 82], [121, 49], [80, 1], [122, 45], [57, 45], [96, 96], [86, 82], [46, 62], [63, 79], [10, 6], [55, 36], [63, 61], [79, 99]], 92) == 8\n    assert candidate([[0, 36], [77, 49], [25, 41]], 98) == 1\n    assert candidate([[42, 18], [48, 0], [64, 62], [61, 7], [33, 51], [50, 26], [1, 91], [24, 92]], 44) == 4\n    assert candidate([[69, 94], [83, 39], [2, 37], [117, 117], [82, 54], [20, 84], [91, 88], [67, 63], [43, 69], [109, 42], [9, 69], [46, 42], [60, 99], [69, 74], [81, 80], [12, 19]], 91) == 11\n    assert candidate([[75, 44], [90, 42], [62, 96], [80, 91], [82, 78], [77, 42]], 23) == 3\n    assert candidate([[81, 20], [74, 53], [70, 49], [99, 66], [11, 88]], 60) == 2\n    assert candidate([[33, 37], [35, 52], [49, 38], [47, 32], [98, 98], [84, 83], [50, 54], [45, 34], [105, 106], [54, 44], [80, 57], [96, 80], [83, 81], [36, 22]], 19) == 7\n    assert candidate([[45, 38], [47, 5], [13, 69], [88, 65], [123, 11], [15, 30], [91, 45], [66, 100], [25, 50], [63, 10], [46, 70], [36, 77], [27, 9], [78, 91]], 98) == 6\n    assert candidate([[71, 58], [60, 37], [27, 97], [7, 56], [56, 126], [24, 59], [46, 76], [15, 79], [18, 3], [98, 8], [110, 62], [76, 30], [38, 63]], 66) == 8\n    assert candidate([[21, 80], [17, 111], [0, 126], [20, 81], [50, 76], [80, 32], [7, 97], [21, 19], [50, 91], [58, 68], [55, 4], [37, 56], [20, 42], [6, 35], [38, 72], [96, 6], [11, 70], [10, 91], [11, 94], [46, 88], [81, 64], [37, 78], [15, 75], [90, 79], [13, 103], [46, 66], [2, 95]], 67) == 26\n    assert candidate([[65, 15], [73, 72], [60, 97], [101, 107], [3, 2], [4, 20], [90, 74], [71, 7], [113, 95], [39, 17], [87, 56], [2, 76], [27, 122], [48, 41]], 79) == 9\n    assert candidate([[82, 41], [27, 65], [94, 92], [15, 82], [56, 69], [30, 57], [28, 28], [5, 53], [100, 2], [112, 44], [23, 6], [92, 29], [18, 69], [124, 26], [125, 88], [97, 54], [7, 31], [50, 80]], 39) == 7\n    assert candidate([[72, 31], [86, 19], [63, 97], [11, 118], [8, 67], [14, 6], [6, 69], [51, 1], [70, 34], [98, 68], [84, 29], [47, 37], [94, 75], [73, 15], [34, 59], [71, 42], [45, 98], [22, 52], [70, 94], [67, 78], [64, 110], [104, 5], [65, 28], [87, 100], [93, 10]], 75) == 10\n    assert candidate([[90, 16], [30, 5], [16, 71], [21, 75], [33, 55], [76, 76], [16, 50], [19, 42], [18, 59], [30, 46], [6, 21], [19, 73], [35, 78], [36, 98], [30, 77], [6, 65], [87, 31], [69, 46], [62, 42], [14, 50], [44, 29], [86, 56]], 17) == 5\n    assert candidate([[27, 30], [15, 52], [26, 30], [26, 30], [15, 53], [75, 57], [27, 30], [95, 67], [26, 31], [27, 31], [15, 53], [90, 84], [27, 30], [90, 85], [10, 3], [48, 59]], 1) == 15\n    assert candidate([[6, 12], [53, 6], [16, 65], [22, 42], [66, 85]], 54) == 1\n    assert candidate([[45, 11], [43, 19], [35, 27], [43, 13], [38, 28], [41, 59], [68, 39], [29, 47]], 30) == 5\n    assert candidate([[39, 98], [1, 97], [41, 90], [1, 83], [65, 2], [7, 27], [79, 51], [124, 88], [32, 97]], 87) == 2\n    assert candidate([[54, 49], [98, 5], [98, 25], [75, 53], [117, 42], [111, 6], [31, 85], [124, 49], [120, 115]], 70) == 4\n    assert candidate([[33, 9], [59, 5], [71, 12], [36, 2], [6, 92], [32, 81], [45, 72], [54, 67], [17, 83], [64, 19], [24, 68], [58, 56], [69, 87], [76, 23], [86, 14], [40, 25], [50, 38], [50, 71]], 38) == 8\n    assert candidate([[7, 7], [44, 51], [93, 41], [43, 37], [31, 2], [39, 52], [12, 68], [92, 78], [59, 78], [95, 70], [62, 45], [30, 79], [7, 17], [3, 89], [60, 35]], 29) == 6\n    assert candidate([[77, 91], [3, 84], [91, 18], [83, 18], [56, 94], [92, 19], [69, 83], [88, 0], [73, 95], [65, 87], [95, 89], [90, 90], [19, 36], [94, 1], [20, 18], [14, 62], [77, 62], [76, 92], [14, 55], [22, 39], [75, 95], [94, 17], [21, 38]], 8) == 10\n    assert candidate([[27, 49], [44, 38], [99, 7], [32, 33], [60, 98], [98, 84], [93, 89], [85, 80]], 95) == 1\n    assert candidate([[86, 74], [117, 67], [106, 78], [66, 82], [15, 75], [76, 72], [116, 64], [85, 51], [109, 87], [75, 69], [103, 89], [80, 20], [101, 95], [124, 76], [91, 53], [100, 84], [112, 108], [45, 94], [14, 96]], 44) == 19\n    assert candidate([[43, 81], [53, 103], [106, 66], [75, 67], [88, 96], [112, 90], [23, 87], [26, 70], [75, 78], [102, 100], [82, 15], [69, 5], [32, 106], [38, 116], [10, 32], [48, 46], [7, 93], [61, 43], [11, 38], [4, 99], [58, 4], [29, 10], [28, 6], [40, 80], [7, 110], [95, 91], [24, 56], [92, 53]], 84) == 19\n    assert candidate([[28, 78], [90, 77], [51, 40], [67, 125], [31, 62], [19, 116], [3, 79], [61, 5], [39, 7], [27, 9], [56, 33], [100, 69], [30, 72], [0, 66], [17, 54], [123, 6], [87, 72], [11, 25], [24, 49], [103, 81], [37, 58], [26, 53], [23, 45], [120, 1], [39, 96], [58, 84], [97, 5]], 73) == 17\n    assert candidate([[63, 22], [10, 98], [61, 3], [7, 4], [0, 111], [56, 17], [50, 11], [30, 97], [16, 2], [59, 77], [4, 48], [42, 94], [63, 1], [42, 3], [13, 9], [27, 100], [60, 30], [1, 34], [54, 43], [3, 32], [15, 60], [39, 9], [52, 82], [19, 7], [42, 82], [88, 96]], 23) == 18\n    assert candidate([[76, 84], [58, 43], [15, 66], [83, 35], [38, 10], [12, 44], [70, 34], [20, 36], [13, 29], [17, 24], [53, 100]], 61) == 3\n    assert candidate([[5, 32], [28, 98], [26, 96], [30, 100], [29, 101], [32, 50], [0, 73], [29, 101], [65, 92], [54, 15], [1, 36], [68, 46], [98, 62], [67, 90], [28, 98], [12, 81], [16, 83], [55, 77], [49, 14], [0, 12], [25, 101], [27, 99], [4, 47], [19, 99], [63, 62], [56, 92]], 8) == 18\n    assert candidate([[95, 54], [53, 94], [90, 47], [89, 90], [90, 47], [73, 36], [73, 84], [72, 49], [63, 91], [39, 66], [57, 80], [80, 59]], 30) == 8\n    assert candidate([[66, 53], [64, 2], [94, 55], [85, 23], [74, 7], [18, 83], [32, 95], [55, 13], [81, 34], [25, 125], [73, 75], [49, 32], [57, 19], [0, 19], [72, 79], [65, 8], [118, 38], [44, 44], [68, 16], [62, 62], [0, 116], [60, 21]], 57) == 7\n    assert candidate([[38, 73], [37, 117], [95, 92], [28, 22], [16, 64], [53, 0], [65, 85], [91, 16], [82, 28], [57, 9], [53, 75], [47, 45], [30, 43], [91, 47], [56, 94], [53, 39]], 63) == 5\n    assert candidate([[11, 11], [96, 86], [86, 64], [94, 11], [121, 100], [68, 1], [84, 54], [21, 40], [8, 3], [96, 44], [96, 127], [42, 25], [43, 119], [94, 10], [71, 0], [84, 96], [79, 73], [37, 11], [74, 15], [4, 53], [27, 59], [0, 67]], 83) == 13\n    assert candidate([[0, 8], [45, 94], [87, 72], [12, 98], [4, 16], [91, 88], [26, 100], [8, 31], [56, 89], [13, 54], [22, 26], [2, 18], [7, 36], [19, 13], [61, 72], [44, 10], [44, 87], [1, 38], [25, 23], [24, 36], [21, 50], [27, 13], [95, 68], [15, 13], [54, 68], [5, 62]], 28) == 17\n    assert candidate([[97, 95], [100, 90], [99, 87], [100, 80], [102, 82], [4, 7], [0, 69], [99, 89]], 10) == 6\n    assert candidate([[22, 68], [75, 70], [67, 78]], 95) == 2\n    assert candidate([[36, 33], [73, 78], [41, 27], [58, 34], [10, 67]], 80) == 1\n    assert candidate([[2, 37], [39, 2], [12, 57], [33, 38], [73, 36], [85, 22], [9, 95], [31, 64], [22, 3]], 76) == 4\n    assert candidate([[44, 0], [95, 53], [37, 6], [40, 4], [5, 73], [33, 2], [16, 71], [36, 8], [87, 50], [31, 71], [83, 57], [4, 31], [35, 79], [12, 70], [93, 55], [21, 77], [97, 9], [95, 53], [10, 73], [78, 100], [22, 48], [87, 50], [74, 64]], 15) == 17\n    assert candidate([[16, 39], [17, 57], [14, 38], [22, 62], [69, 40], [2, 53], [23, 63], [20, 35], [25, 49]], 31) == 15\n    assert candidate([[0, 46], [13, 69], [38, 80], [60, 17], [72, 83], [27, 78], [21, 9], [9, 29], [84, 39], [59, 117], [79, 65], [1, 116], [90, 71], [53, 91], [46, 3], [100, 73], [105, 23], [12, 81], [113, 84], [111, 25], [27, 1], [48, 49], [51, 53], [93, 83], [48, 29], [27, 21], [9, 71]], 91) == 19\n    assert candidate([[50, 93], [12, 98], [26, 22], [50, 19], [20, 70], [53, 119], [1, 127], [38, 100], [52, 116], [89, 71], [9, 98], [34, 94], [12, 98], [29, 119], [60, 29], [97, 81], [102, 84], [13, 15], [10, 28], [40, 26], [16, 87], [45, 83], [55, 83], [62, 35], [30, 94], [7, 75], [14, 86], [16, 12], [73, 88], [60, 124]], 78) == 26\n    assert candidate([[19, 26], [2, 28], [3, 10], [42, 61], [56, 56]], 23) == 3\n    assert candidate([[56, 55], [42, 83], [35, 97], [28, 32], [52, 76], [34, 20], [68, 88], [90, 38], [99, 76], [32, 20], [22, 85], [50, 34], [4, 11], [17, 92], [59, 80], [66, 65], [47, 60]], 59) == 6\n    assert candidate([[87, 78], [72, 88], [82, 69], [88, 79], [36, 24], [42, 15], [66, 94], [32, 10], [92, 71], [46, 89], [74, 86], [37, 23], [61, 44], [66, 87], [35, 17], [91, 78], [43, 15], [61, 75], [62, 70], [61, 70], [34, 7], [85, 64], [35, 20], [42, 22], [41, 27], [82, 85], [90, 89], [41, 13]], 16) == 20\n    assert candidate([[48, 86], [98, 33], [46, 68], [91, 21], [39, 73]], 22) == 1\n    assert candidate([[71, 47], [68, 44], [65, 45], [97, 43], [97, 45], [97, 45], [71, 41], [103, 43], [96, 20], [99, 41], [57, 4], [17, 77], [68, 44], [16, 72], [17, 75], [64, 69], [19, 75], [99, 41], [2, 21], [71, 47], [91, 4], [57, 2]], 6) == 21\n    assert candidate([[5, 11], [16, 87], [48, 55], [26, 15], [41, 58], [12, 14], [81, 66], [30, 5]], 14) == 2\n    assert candidate([[85, 89], [119, 89], [34, 16], [54, 41], [55, 29], [33, 34], [54, 30], [80, 74], [12, 92], [42, 49], [69, 7], [47, 13], [26, 38], [39, 96], [61, 58], [24, 48], [46, 47]], 34) == 6\n    assert candidate([[35, 45], [58, 17], [64, 60], [117, 23], [18, 63], [26, 55], [65, 54]], 85) == 4\n    assert candidate([[60, 1], [57, 6], [39, 3], [58, 7], [61, 14], [19, 80], [46, 0], [84, 35], [43, 3], [46, 4], [48, 71], [48, 75], [85, 40], [46, 45], [6, 20], [35, 7], [57, 6], [51, 78], [68, 25], [17, 0]], 12) == 12\n    assert candidate([[95, 0], [36, 24], [68, 27], [80, 14], [39, 2], [93, 52], [107, 52], [86, 63], [82, 13], [55, 14], [8, 52], [99, 20], [101, 36], [50, 70], [26, 98], [95, 41]], 54) == 8\n    assert candidate([[43, 14], [55, 83], [33, 89], [44, 74], [46, 84], [51, 87], [61, 69], [1, 89]], 32) == 10\n    assert candidate([[88, 15], [93, 65], [52, 39], [20, 24], [100, 36], [39, 17], [26, 77], [52, 39], [47, 83], [98, 99], [43, 28], [72, 29], [21, 48], [43, 32], [60, 108], [44, 47], [45, 125], [84, 94]], 83) == 13\n    assert candidate([[12, 2], [43, 87], [21, 100], [79, 63], [5, 6], [70, 75], [20, 55], [23, 55], [17, 31], [121, 89], [27, 71], [27, 22], [42, 34], [15, 14], [16, 40], [49, 68], [30, 48], [45, 43], [88, 23], [47, 15], [16, 41], [8, 5]], 81) == 8\n\ndef test_check():\n    check(countPairs)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2954_maxSum", "language": "py", "prompt": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    \"\"\"You are given an integer array nums and two positive integers m and k.\nReturn the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.\nA subarray of nums is almost unique if it contains at least m distinct elements.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [2,6,7,3,1,7], m = 3, k = 4\nOutput: 18\nExplanation: There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\nExample 2:\nInput: nums = [5,9,9,2,4,5,4], m = 1, k = 3\nOutput: 23\nExplanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\nExample 3:\nInput: nums = [1,2,1,2,1,2,1], m = 3, k = 3\nOutput: 0\nExplanation: There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\nConstraints:\n * 1 <= nums.length <= 2 * 104\n * 1 <= m <= k <= nums.length\n * 1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2954_maxSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 6, 7, 3, 1, 7], 3, 4) == 18\n    assert candidate([5, 9, 9, 2, 4, 5, 4], 1, 3) == 23\n    assert candidate([1, 2, 1, 2, 1, 2, 1], 3, 3) == 0\n    assert candidate([1], 1, 1) == 1\n    assert candidate([1, 1], 2, 2) == 0\n    assert candidate([1, 1, 1], 1, 1) == 1\n    assert candidate([1, 1, 1, 1], 1, 1) == 1\n    assert candidate([1, 1, 1, 2], 2, 4) == 5\n    assert candidate([1, 1, 1, 3], 2, 2) == 4\n    assert candidate([1, 1, 1, 4], 2, 4) == 7\n    assert candidate([1, 1, 2], 1, 1) == 2\n    assert candidate([1, 1, 2, 1], 2, 2) == 3\n    assert candidate([1, 1, 2, 2], 1, 3) == 5\n    assert candidate([1, 1, 2, 3], 1, 1) == 3\n    assert candidate([1, 1, 2, 4], 1, 1) == 4\n    assert candidate([1, 1, 3], 1, 2) == 4\n    assert candidate([1, 1, 3, 1], 2, 4) == 6\n    assert candidate([1, 1, 3, 2], 1, 2) == 5\n    assert candidate([1, 1, 3, 3], 1, 1) == 3\n    assert candidate([1, 1, 3, 4], 1, 1) == 4\n    assert candidate([1, 1, 4], 1, 3) == 6\n    assert candidate([1, 1, 4, 1], 1, 3) == 6\n    assert candidate([1, 1, 4, 2], 2, 2) == 6\n    assert candidate([1, 1, 4, 3], 1, 1) == 4\n    assert candidate([1, 1, 4, 4], 3, 3) == 0\n    assert candidate([1, 2], 1, 2) == 3\n    assert candidate([1, 2, 1], 1, 1) == 2\n    assert candidate([1, 2, 1, 1], 1, 2) == 3\n    assert candidate([1, 2, 1, 2], 2, 4) == 6\n    assert candidate([1, 2, 1, 3], 1, 4) == 7\n    assert candidate([1, 2, 1, 4], 2, 4) == 8\n    assert candidate([1, 2, 2], 2, 2) == 3\n    assert candidate([1, 2, 2, 1], 2, 2) == 3\n    assert candidate([1, 2, 2, 2], 1, 1) == 2\n    assert candidate([1, 2, 2, 3], 3, 3) == 0\n    assert candidate([1, 2, 2, 4], 1, 4) == 9\n    assert candidate([1, 2, 3], 1, 2) == 5\n    assert candidate([1, 2, 3, 1], 1, 1) == 3\n    assert candidate([1, 2, 3, 2], 1, 1) == 3\n    assert candidate([1, 2, 3, 3], 2, 3) == 8\n    assert candidate([1, 2, 3, 4], 1, 2) == 7\n    assert candidate([1, 2, 4], 1, 1) == 4\n    assert candidate([1, 2, 4, 1], 1, 1) == 4\n    assert candidate([1, 2, 4, 2], 1, 1) == 4\n    assert candidate([1, 2, 4, 3], 1, 1) == 4\n    assert candidate([1, 2, 4, 4], 1, 2) == 8\n    assert candidate([1, 3], 1, 1) == 3\n    assert candidate([1, 3, 1], 1, 1) == 3\n    assert candidate([1, 3, 1, 1], 2, 3) == 5\n    assert candidate([1, 3, 1, 2], 4, 4) == 0\n    assert candidate([1, 3, 1, 3], 2, 2) == 4\n    assert candidate([1, 3, 1, 4], 1, 1) == 4\n    assert candidate([1, 3, 2], 1, 2) == 5\n    assert candidate([1, 3, 2, 1], 2, 2) == 5\n    assert candidate([1, 3, 2, 2], 1, 2) == 5\n    assert candidate([1, 3, 2, 3], 1, 3) == 8\n    assert candidate([1, 3, 2, 4], 3, 3) == 9\n    assert candidate([1, 3, 3], 2, 3) == 7\n    assert candidate([1, 3, 3, 1], 2, 4) == 8\n    assert candidate([1, 3, 3, 2], 2, 3) == 8\n    assert candidate([1, 3, 3, 3], 1, 2) == 6\n    assert candidate([1, 3, 3, 4], 2, 4) == 11\n    assert candidate([1, 3, 4], 1, 1) == 4\n    assert candidate([1, 3, 4, 1], 2, 4) == 9\n    assert candidate([1, 3, 4, 2], 3, 4) == 10\n    assert candidate([1, 3, 4, 3], 1, 1) == 4\n    assert candidate([1, 3, 4, 4], 1, 2) == 8\n    assert candidate([1, 4], 1, 1) == 4\n    assert candidate([1, 4, 1], 1, 1) == 4\n    assert candidate([1, 4, 1, 1], 1, 3) == 6\n    assert candidate([1, 4, 1, 2], 1, 1) == 4\n    assert candidate([1, 4, 1, 3], 1, 1) == 4\n    assert candidate([1, 4, 1, 4], 2, 3) == 9\n    assert candidate([1, 4, 2], 3, 3) == 7\n    assert candidate([1, 4, 2, 1], 2, 2) == 6\n    assert candidate([1, 4, 2, 2], 1, 1) == 4\n    assert candidate([1, 4, 2, 3], 3, 3) == 9\n    assert candidate([1, 4, 2, 4], 1, 3) == 10\n    assert candidate([1, 4, 3], 3, 3) == 8\n    assert candidate([1, 4, 3, 1], 1, 2) == 7\n    assert candidate([1, 4, 3, 2], 1, 1) == 4\n    assert candidate([1, 4, 3, 3], 2, 2) == 7\n    assert candidate([1, 4, 3, 4], 3, 3) == 8\n    assert candidate([1, 4, 4], 2, 3) == 9\n    assert candidate([1, 4, 4, 1], 1, 1) == 4\n    assert candidate([1, 4, 4, 2], 1, 2) == 8\n    assert candidate([1, 4, 4, 3], 3, 4) == 12\n    assert candidate([1, 4, 4, 4], 3, 3) == 0\n    assert candidate([2], 1, 1) == 2\n    assert candidate([2, 1], 2, 2) == 3\n    assert candidate([2, 1, 1], 1, 1) == 2\n    assert candidate([2, 1, 1, 1], 4, 4) == 0\n    assert candidate([2, 1, 1, 2], 2, 4) == 6\n    assert candidate([2, 1, 1, 3], 3, 3) == 0\n    assert candidate([2, 1, 1, 4], 2, 2) == 5\n    assert candidate([2, 1, 2], 1, 3) == 5\n    assert candidate([2, 1, 2, 1], 2, 2) == 3\n    assert candidate([2, 1, 2, 2], 1, 1) == 2\n    assert candidate([2, 1, 2, 3], 1, 3) == 6\n    assert candidate([2, 1, 2, 4], 1, 3) == 7\n\ndef test_check():\n    check(maxSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2955_accountBalanceAfterPurchase", "language": "py", "prompt": "def accountBalanceAfterPurchase(purchaseAmount: int) -> int:\n    \"\"\"Initially, you have a bank account balance of 100 dollars.\nYou are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars.\nAt the store where you will make the purchase, the purchase amount is rounded to the nearest multiple of 10. In other words, you pay a non-negative amount, roundedAmount, such that roundedAmount is a multiple of 10 and abs(roundedAmount - purchaseAmount) is minimized.\nIf there is more than one nearest multiple of 10, the largest multiple is chosen.\nReturn an integer denoting your account balance after making a purchase worth purchaseAmount dollars from the store.\nNote: 0 is considered to be a multiple of 10 in this problem.\nExample 1:\nInput: purchaseAmount = 9\nOutput: 90\nExplanation: In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.\nExample 2:\nInput: purchaseAmount = 15\nOutput: 80\nExplanation: In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\nHence, your account balance becomes 100 - 20 = 80.\nConstraints:\n * 0 <= purchaseAmount <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2955_accountBalanceAfterPurchase.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(9) == 90\n    assert candidate(15) == 80\n    assert candidate(10) == 90\n    assert candidate(11) == 90\n    assert candidate(12) == 90\n    assert candidate(13) == 90\n    assert candidate(14) == 90\n    assert candidate(16) == 80\n    assert candidate(17) == 80\n    assert candidate(18) == 80\n    assert candidate(19) == 80\n    assert candidate(1) == 100\n    assert candidate(2) == 100\n    assert candidate(3) == 100\n    assert candidate(4) == 100\n    assert candidate(5) == 90\n    assert candidate(6) == 90\n    assert candidate(7) == 90\n    assert candidate(8) == 90\n    assert candidate(20) == 80\n    assert candidate(21) == 80\n    assert candidate(22) == 80\n    assert candidate(23) == 80\n    assert candidate(24) == 80\n    assert candidate(25) == 70\n    assert candidate(26) == 70\n    assert candidate(27) == 70\n    assert candidate(28) == 70\n    assert candidate(29) == 70\n    assert candidate(30) == 70\n    assert candidate(31) == 70\n    assert candidate(32) == 70\n    assert candidate(33) == 70\n    assert candidate(34) == 70\n    assert candidate(35) == 60\n    assert candidate(36) == 60\n    assert candidate(37) == 60\n    assert candidate(38) == 60\n    assert candidate(39) == 60\n    assert candidate(40) == 60\n    assert candidate(41) == 60\n    assert candidate(42) == 60\n    assert candidate(43) == 60\n    assert candidate(44) == 60\n    assert candidate(45) == 50\n    assert candidate(46) == 50\n    assert candidate(47) == 50\n    assert candidate(48) == 50\n    assert candidate(49) == 50\n    assert candidate(50) == 50\n    assert candidate(51) == 50\n    assert candidate(52) == 50\n    assert candidate(53) == 50\n    assert candidate(54) == 50\n    assert candidate(55) == 40\n    assert candidate(56) == 40\n    assert candidate(57) == 40\n    assert candidate(58) == 40\n    assert candidate(59) == 40\n    assert candidate(60) == 40\n    assert candidate(61) == 40\n    assert candidate(62) == 40\n    assert candidate(63) == 40\n    assert candidate(64) == 40\n    assert candidate(65) == 30\n    assert candidate(66) == 30\n    assert candidate(67) == 30\n    assert candidate(68) == 30\n    assert candidate(69) == 30\n    assert candidate(70) == 30\n    assert candidate(71) == 30\n    assert candidate(72) == 30\n    assert candidate(73) == 30\n    assert candidate(74) == 30\n    assert candidate(75) == 20\n    assert candidate(76) == 20\n    assert candidate(77) == 20\n    assert candidate(78) == 20\n    assert candidate(79) == 20\n    assert candidate(80) == 20\n    assert candidate(81) == 20\n    assert candidate(82) == 20\n    assert candidate(83) == 20\n    assert candidate(84) == 20\n    assert candidate(85) == 10\n    assert candidate(86) == 10\n    assert candidate(87) == 10\n    assert candidate(88) == 10\n    assert candidate(89) == 10\n    assert candidate(90) == 10\n    assert candidate(91) == 10\n    assert candidate(92) == 10\n    assert candidate(93) == 10\n    assert candidate(94) == 10\n    assert candidate(95) == 0\n    assert candidate(96) == 0\n    assert candidate(97) == 0\n    assert candidate(98) == 0\n    assert candidate(99) == 0\n    assert candidate(100) == 0\n\ndef test_check():\n    check(accountBalanceAfterPurchase)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2977_isAcronym", "language": "py", "prompt": "from typing import List\n\ndef isAcronym(words: List[str], s: str) -> bool:\n    \"\"\"Given an array of strings words and a string s, determine if s is an acronym of words.\nThe string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\nReturn true if s is an acronym of words, and false otherwise.\nExample 1:\nInput: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\nOutput: true\nExplanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym.\nExample 2:\nInput: words = [\"an\",\"apple\"], s = \"a\"\nOutput: false\nExplanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively.\nThe acronym formed by concatenating these characters is \"aa\".\nHence, s = \"a\" is not the acronym.\nExample 3:\nInput: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\nOutput: true\nExplanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\".\nHence, s = \"ngguoy\" is the acronym.\nConstraints:\n * 1 <= words.length <= 100\n * 1 <= words[i].length <= 10\n * 1 <= s.length <= 100\n * words[i] and s consist of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2977_isAcronym.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(['an', 'apple'], a) == False\n    assert candidate(['alice', 'bob', 'charlie'], abc) == True\n    assert candidate(['never', 'gonna', 'give', 'up', 'on', 'you'], ngguoy) == True\n    assert candidate(['ad', 'uadhrwxki'], au) == True\n    assert candidate(['afqcpzsx', 'icenu'], yi) == False\n    assert candidate(['afkc', 'icxufam'], ai) == True\n    assert candidate(['ahbibag', 'aoximesw'], aa) == True\n    assert candidate(['auqoc', 'koioxa'], ak) == True\n    assert candidate(['b', 'x'], bx) == True\n    assert candidate(['c', 'df'], bd) == False\n    assert candidate(['dv', 'g'], sg) == False\n    assert candidate(['dvn', 'acafe'], dp) == False\n    assert candidate(['bpctc', 'kaqquqbpmw'], bk) == True\n    assert candidate(['c', 'evlvvhrsqa'], ce) == True\n    assert candidate(['dwrvgkxdtm', 'wy'], hw) == False\n    assert candidate(['eceekigel', 'gmgdfvsrkw'], wg) == False\n    assert candidate(['cfsrsyt', 'md'], cm) == True\n    assert candidate(['envpklvi', 'jpymde'], en) == False\n    assert candidate(['espleklys', 'dg'], ea) == False\n    assert candidate(['euptjhixnu', 'fwci'], kf) == False\n    assert candidate(['ddnlfpvy', 'exs'], de) == True\n    assert candidate(['deacf', 'hldiauk'], dh) == True\n    assert candidate(['dllcn', 'tnzrnzypg'], dt) == True\n    assert candidate(['dmekslxlpo', 'wqdgxqwdk'], dw) == True\n    assert candidate(['eyzywjsxza', 'jxeimcc'], ex) == False\n    assert candidate(['f', 'oylvtltvo'], ho) == False\n    assert candidate(['eo', 'e'], ee) == True\n    assert candidate(['eucvcqdgg', 'qtdwhygerb'], eq) == True\n    assert candidate(['fnpow', 'ysqwqli'], jy) == False\n    assert candidate(['gpqyvv', 'kihi'], ik) == False\n    assert candidate(['exrgiw', 'irexgmrl'], ei) == True\n    assert candidate(['ez', 'acnmits'], ea) == True\n    assert candidate(['fvkekkv', 'jfbv'], fj) == True\n    assert candidate(['kncge', 'nje'], kw) == False\n    assert candidate(['fyocwzlz', 'lz'], fl) == True\n    assert candidate(['mnh', 'clep'], pc) == False\n    assert candidate(['mnpdwq', 'hziusbxr'], mg) == False\n    assert candidate(['g', 'r'], gr) == True\n    assert candidate(['n', 'fddigeie'], hf) == False\n    assert candidate(['gle', 'irt'], gi) == True\n    assert candidate(['h', 'xhtkcj'], hx) == True\n    assert candidate(['n', 'ityua'], ei) == False\n    assert candidate(['nmxysdim', 'xnpqsauh'], ne) == False\n    assert candidate(['ovdhflcck', 'ndd'], oi) == False\n    assert candidate(['piiyodecdf', 'wdwfxsjfou'], pp) == False\n    assert candidate(['hdmwkr', 'jfrqh'], hj) == True\n    assert candidate(['hflf', 'fvnotmdcpw'], hf) == True\n    assert candidate(['hnwphhozqw', 'cfhsjlqj'], hc) == True\n    assert candidate(['pxcsaaa', 'lrvxsc'], pz) == False\n    assert candidate(['htlsq', 'y'], hy) == True\n    assert candidate(['iakfeop', 'pd'], ip) == True\n    assert candidate(['qir', 'qyyzmntl'], qa) == False\n    assert candidate(['iakfmr', 'gzggxzwor'], ig) == True\n    assert candidate(['jna', 'rjdbu'], jr) == True\n    assert candidate(['qunqyc', 'ouzjotitvn'], co) == False\n    assert candidate(['rdednrsn', 'yfrgdeapme'], ny) == False\n    assert candidate(['rtnbfaemv', 'kgpcwaoik'], rf) == False\n    assert candidate(['s', 'n'], sx) == False\n    assert candidate(['siiyqtkyis', 'mogzgabcgk'], fm) == False\n    assert candidate(['tit', 'pmuqzrs'], tz) == False\n    assert candidate(['uip', 'hhstwupgg'], eh) == False\n    assert candidate(['uyj', 'jlfnksqlt'], ur) == False\n    assert candidate(['kabfejv', 'g'], kg) == True\n    assert candidate(['w', 'eshensjifo'], ez) == False\n    assert candidate(['khhhdsaevp', 'dnod'], kd) == True\n    assert candidate(['wefmc', 'tmunsmg'], jt) == False\n    assert candidate(['wo', 'jhaabx'], wx) == False\n    assert candidate(['kltil', 'mubemf'], km) == True\n    assert candidate(['kxkvhylsh', 'gyshntskq'], kg) == True\n    assert candidate(['wseopbedw', 'iihrgujev'], wq) == False\n    assert candidate(['kzxp', 'fy'], kf) == True\n    assert candidate(['wvdx', 'jerzn'], cj) == False\n    assert candidate(['y', 'qppnclhhbd'], mq) == False\n    assert candidate(['yegnsnddq', 'kusrkz'], bk) == False\n    assert candidate(['couqsa', 'sncuru', 'jhgxpxipg'], csa) == False\n    assert candidate(['csm', 'hexhvojfj', 'l'], chh) == False\n    assert candidate(['lbor', 'zx'], lz) == True\n    assert candidate(['losinu', 'ptsjoihvj'], lp) == True\n    assert candidate(['maczdfm', 'ywj'], my) == True\n    assert candidate(['d', 'geviina', 'tyljs'], dvt) == False\n    assert candidate(['mammhva', 'igyzbwpj'], mi) == True\n    assert candidate(['ecmlkida', 'vrjwdpe', 'vocff'], hvv) == False\n    assert candidate(['emqlklvrw', 'das', 'bzuq'], edm) == False\n    assert candidate(['hawikjbs', 'qi', 'ssvgttkzd'], rornirdphvargyce) == False\n    assert candidate(['hd', 'f', 'meivn'], hpm) == False\n    assert candidate(['mqhptbyzzv', 'mfubjraiqz'], mm) == True\n    assert candidate(['mvftnzftb', 'ga'], mg) == True\n    assert candidate(['ncgutvi', 'rsh'], nr) == True\n    assert candidate(['ntf', 'txayzc'], nt) == True\n    assert candidate(['nubibbe', 'wzwdrjcck'], nw) == True\n    assert candidate(['hphfek', 'kezkkq', 'oh'], hmo) == False\n    assert candidate(['odtclcvcj', 'ufhrhk'], ou) == True\n    assert candidate(['ojcn', 'naujlz'], on) == True\n    assert candidate(['iho', 'ignyipken', 'q'], wiq) == False\n    assert candidate(['olynt', 'xf'], ox) == True\n    assert candidate(['ir', 'wzhmxee', 'kjfwful'], iwn) == False\n    assert candidate(['ixo', 'wigba', 'raaphui'], dwr) == False\n    assert candidate(['opup', 'eme'], oe) == True\n    assert candidate(['kmmoq', 'aoh', 'hznkpurdh'], kar) == False\n    assert candidate(['ottxwi', 'akpixfvbel'], oa) == True\n\ndef test_check():\n    check(isAcronym)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2978_checkStrings", "language": "py", "prompt": "def checkStrings(s1: str, s2: str) -> bool:\n    \"\"\"You are given two strings s1 and s2, both of length n, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\n * Choose any two indices i and j such that i < j and the difference j - i is even, then swap the two characters at those indices in the string.\nReturn true if you can make the strings s1 and s2 equal, and\u00a0false otherwise.\nExample 1:\nInput: s1 = \"abcdba\", s2 = \"cabdab\"\nOutput: true\nExplanation: We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\".\n- Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\".\n- Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2.\nExample 2:\nInput: s1 = \"abe\", s2 = \"bea\"\nOutput: false\nExplanation: It is not possible to make the two strings equal.\nConstraints:\n * n == s1.length == s2.length\n * 1 <= n <= 105\n * s1 and s2 consist only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2978_checkStrings.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abe, bea) == False\n    assert candidate(abcdba, cabdab) == True\n    assert candidate(ublnlasppynwgx, ganplbuylnswpx) == True\n    assert candidate(jghn, jghn) == True\n    assert candidate(pqtsprqmvi, qrvqpitmps) == True\n    assert candidate(aavizsxpqhxztrwi, zvisqatzpaxhixwr) == False\n    assert candidate(slmqqdbrwyvm, qyldmmwsrqvb) == False\n    assert candidate(shvqocguj, vqsghujco) == False\n    assert candidate(ktjpralqanofuuqsyal, qjlornpasktfuyluaqa) == False\n    assert candidate(mgflranpdjdkrh, fpcgobmkdxbzyl) == False\n    assert candidate(usvpwcehhvlg, ehuvvshcwplg) == True\n    assert candidate(jh, fy) == False\n    assert candidate(kfqofkvsoiiirznw, hosthwbinxrsikkf) == False\n    assert candidate(ppmfd, pfdpm) == True\n    assert candidate(ntuuwwh, jyjwmdf) == False\n    assert candidate(lcgcm, brdxe) == False\n    assert candidate(hjswnccgwjcapko, acwjnjoscchgwpk) == False\n    assert candidate(epjtzubboiallzd, dboilpzzjteualb) == True\n    assert candidate(c, c) == True\n    assert candidate(oziiqbotydegrm, ytizriobogqmed) == True\n    assert candidate(ztmuzn, muztzn) == True\n    assert candidate(jkzcqlh, hkqczlj) == True\n    assert candidate(qnh, cmq) == False\n    assert candidate(azagmtvhske, mkazstvhage) == True\n    assert candidate(jitb, zqbg) == False\n    assert candidate(tgznpamgczyvqjzvp, mpyzvzzjvaqntgpgc) == False\n    assert candidate(tcl, lct) == True\n    assert candidate(datuhdkoqe, hetddokuqa) == True\n    assert candidate(ztnpdilyrxz, yxzitnrdlzp) == False\n    assert candidate(vx, zv) == False\n    assert candidate(tpfcyceq, fceqtpyc) == True\n    assert candidate(rcugebinbszkhy, zkebryhcbginus) == True\n    assert candidate(ryykp, rkpyy) == True\n    assert candidate(lpyfmysemgoxgawwr, wfoyspygralemxgwm) == True\n    assert candidate(bfylavpyffcnj, cljfbfyvpnayf) == True\n    assert candidate(chhbmikpp, hpcimbkhp) == True\n    assert candidate(nateujd, jeutnad) == False\n    assert candidate(sxrjofoedghtplnex, sgdeolnepthfojrxx) == True\n    assert candidate(ajvfujrczdciilihi, jcriaviuiflicdhzj) == False\n    assert candidate(gajpuahzcexdunltldh, xxatubgvqzmxjvzcxah) == False\n    assert candidate(hnisnfvikgrhkfoe, hgkivsifrekfonnh) == True\n    assert candidate(fvfsxftpuemgpnkzz, mgknxpuztffvzepsf) == True\n    assert candidate(zrwzpibwp, pwpiwzbrz) == True\n    assert candidate(zoqpcssnhugxffcptsj, chgospjssfxnfpcuqzt) == False\n    assert candidate(ldpjhj, jdlpjh) == False\n    assert candidate(zodbh, pqdpy) == False\n    assert candidate(mdcvitezgqur, mvigcqrdeztu) == False\n    assert candidate(rdyau, dyrau) == False\n    assert candidate(pyymcw, ptlqxp) == False\n    assert candidate(ebicv, vibce) == False\n    assert candidate(xkzknvrbvajwbj, rnkwzbvvxkjbja) == False\n    assert candidate(zoxpiqxvnk, xvkpxinqoz) == False\n    assert candidate(obhmqltgmoszljeyh, ogmmlbhoeysjtlhzq) == True\n    assert candidate(wfsdirrheuglhfkbjk, wfsuhhglifkrebrdjk) == True\n    assert candidate(shn, hsn) == False\n    assert candidate(xdicugry, igucxdry) == True\n    assert candidate(bkfmkrbybim, brbimkkmbyf) == True\n    assert candidate(dwowyfgreakdvfi, yfiddfvwerkaowg) == True\n    assert candidate(bdywnvbgmum, guymbwdbnmv) == False\n    assert candidate(tmujoqerfvupnyy, uvortyfmuqypnje) == True\n    assert candidate(hggckwudke, ylkgulkehd) == False\n    assert candidate(zrppcm, okurkg) == False\n    assert candidate(ennl, ennl) == True\n    assert candidate(spznlxodciidngyvvkl, lnvnzdixivoglydscpk) == False\n    assert candidate(nxezcoklmdbekyjp, cdkenlkyeomxjzbp) == True\n    assert candidate(yui, iyu) == False\n    assert candidate(zphe, hpze) == True\n    assert candidate(oyjngnej, oynjjeng) == False\n    assert candidate(kvwdssgl, wskxsdgv) == False\n    assert candidate(ozzfbhzkowpcv, vzpwzkbhzfoco) == True\n    assert candidate(h, h) == True\n    assert candidate(mqkdv, kqvdm) == True\n    assert candidate(hphfqesitgprud, tpisuhqhfgdrpe) == False\n    assert candidate(yrbto, orytb) == True\n    assert candidate(lvahby, ilbyaz) == False\n    assert candidate(bbaiabphflgyfo, bhglybaoaipbff) == False\n    assert candidate(uielps, uselpi) == True\n    assert candidate(ftyhgkgwg, gtfhgwgky) == True\n    assert candidate(mzrfxrwlliuoi, llrouzirwimfx) == True\n    assert candidate(drofbzocwolcznzfi, wzocdnirzfbclozfo) == True\n    assert candidate(popefwbkepdxy, pxbwpeekfoypd) == True\n    assert candidate(swgzqluzcvhskegvdry, seuwkvclqzyvdsgrgzh) == True\n    assert candidate(hik, ihk) == False\n    assert candidate(zq, zq) == True\n    assert candidate(igdzd, phcyi) == False\n    assert candidate(cazutcxkhcklpuogt, ockghuukctcztxapl) == False\n    assert candidate(bx, bx) == True\n    assert candidate(bkujvjwgjzxdzuw, zgjubjwkwzxdujv) == True\n    assert candidate(ujpudt, dtujpu) == True\n    assert candidate(hkalpd, hlpkad) == True\n    assert candidate(kbcpjzadbv, dsgzcapzao) == False\n    assert candidate(rubbbf, rbbubf) == True\n    assert candidate(ybudbyrlmiddsxks, nuyyabyisyptvdnb) == False\n    assert candidate(wiijtcgqez, ctqzwjgiei) == False\n    assert candidate(bgalfvefwmhodexazkd, fbgmdfholzakvxaweed) == False\n    assert candidate(oxlphorosradotpshnt, hdotpaoorosrlhtsxpn) == False\n    assert candidate(mnvnzakjaymsxhojq, oaxjoeanksmyqmglm) == False\n    assert candidate(hsm, hsm) == True\n    assert candidate(qgloiyhewunm, qehuwonmiylg) == True\n    assert candidate(drdu, dudr) == True\n\ndef test_check():\n    check(checkStrings)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2979_maximizeTheProfit", "language": "py", "prompt": "from typing import List\n\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \"\"\"You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.\nAdditionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.\nAs a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.\nReturn the maximum amount of gold you can earn.\nNote that different buyers can't buy the same house, and some houses may remain unsold.\nExample 1:\nInput: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\nOutput: 3\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.\nExample 2:\nInput: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\nOutput: 10\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2nd buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.\nConstraints:\n * 1 <= n <= 105\n * 1 <= offers.length <= 105\n * offers[i].length == 3\n * 0 <= starti <= endi <= n - 1\n * 1 <= goldi <= 103\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2979_maximizeTheProfit.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(5, [[0, 0, 1], [0, 2, 2], [1, 3, 2]]) == 3\n    assert candidate(5, [[0, 0, 1], [0, 2, 10], [1, 3, 2]]) == 10\n    assert candidate(4, [[1, 3, 10], [1, 3, 3], [0, 0, 1], [0, 0, 7]]) == 17\n    assert candidate(4, [[0, 0, 6], [1, 2, 8], [0, 3, 7], [2, 2, 5], [0, 1, 5], [2, 3, 2], [0, 2, 8], [2, 3, 10], [0, 3, 2]]) == 16\n    assert candidate(15, [[5, 5, 10], [2, 6, 6], [8, 11, 5], [7, 11, 9], [2, 4, 1], [3, 8, 5], [0, 6, 9], [0, 10, 5], [5, 10, 8], [4, 5, 1]]) == 20\n    assert candidate(10, [[1, 6, 1], [0, 1, 10], [3, 6, 2], [0, 5, 10], [0, 0, 3], [0, 0, 4], [1, 1, 4], [0, 6, 7], [4, 4, 1]]) == 12\n    assert candidate(11, [[7, 8, 6], [6, 6, 4], [4, 6, 9], [6, 7, 4], [5, 5, 8], [1, 5, 9], [7, 7, 8], [1, 2, 5], [0, 2, 9], [1, 3, 8], [0, 2, 7], [2, 2, 8]]) == 29\n    assert candidate(3, [[0, 0, 6], [0, 1, 8], [1, 2, 1], [0, 1, 4], [0, 1, 2], [0, 0, 7], [0, 0, 6], [0, 0, 5]]) == 8\n    assert candidate(4, [[0, 1, 9], [1, 1, 4]]) == 9\n    assert candidate(11, [[1, 10, 6], [1, 10, 5], [0, 2, 7], [0, 0, 8], [8, 10, 7]]) == 15\n    assert candidate(3, [[0, 1, 8], [1, 1, 6], [2, 2, 7], [0, 2, 6], [0, 2, 2], [0, 0, 6], [0, 0, 9], [0, 1, 4]]) == 22\n    assert candidate(6, [[0, 2, 4]]) == 4\n    assert candidate(10, [[5, 9, 3], [1, 5, 8], [0, 0, 6], [5, 8, 10]]) == 16\n    assert candidate(5, [[1, 1, 3], [1, 1, 3], [0, 0, 8], [1, 3, 8], [0, 2, 1], [3, 3, 9], [0, 0, 7], [0, 2, 3], [0, 0, 5], [0, 3, 10], [1, 3, 10], [4, 4, 6], [0, 1, 1], [2, 4, 10]]) == 26\n    assert candidate(13, [[2, 2, 5], [1, 8, 10], [2, 3, 3]]) == 10\n    assert candidate(2, [[1, 1, 8], [1, 1, 8], [1, 1, 10], [1, 1, 7], [0, 0, 7], [0, 0, 3], [0, 1, 8], [0, 0, 4], [0, 0, 4], [0, 0, 7], [0, 0, 10], [0, 1, 4], [1, 1, 1], [0, 1, 5]]) == 20\n    assert candidate(3, [[0, 1, 7], [1, 1, 3], [0, 0, 2], [1, 1, 6], [0, 0, 10], [1, 1, 7], [0, 2, 3], [0, 1, 2], [0, 0, 7]]) == 17\n    assert candidate(5, [[0, 0, 5], [1, 3, 9], [0, 2, 2], [1, 1, 6], [1, 2, 10], [0, 2, 10], [1, 1, 3]]) == 15\n    assert candidate(10, [[0, 1, 9], [5, 6, 10], [1, 3, 8], [1, 9, 7], [7, 8, 1], [2, 7, 1], [0, 8, 7], [1, 6, 6], [1, 4, 4], [0, 5, 4], [0, 0, 3], [0, 8, 6]]) == 22\n    assert candidate(4, [[0, 0, 1], [0, 0, 10], [0, 2, 1], [0, 0, 6], [0, 3, 10], [0, 1, 5], [1, 2, 10], [0, 0, 2], [3, 3, 1], [0, 0, 9], [0, 1, 2], [0, 0, 4], [1, 3, 5], [1, 1, 1]]) == 21\n    assert candidate(9, [[0, 3, 10], [5, 6, 5], [1, 5, 2], [1, 8, 9], [1, 1, 9], [1, 7, 1], [3, 7, 9], [2, 3, 2], [4, 6, 1], [4, 5, 7], [2, 2, 2], [6, 8, 10], [1, 3, 10], [1, 4, 10]]) == 28\n    assert candidate(10, [[0, 2, 2]]) == 2\n    assert candidate(10, [[2, 7, 4], [2, 4, 9], [1, 8, 7], [0, 4, 3]]) == 9\n    assert candidate(6, [[0, 1, 4], [1, 2, 4], [0, 1, 10], [1, 2, 4], [2, 2, 5], [1, 1, 8], [2, 3, 2], [4, 4, 4], [0, 0, 3]]) == 20\n    assert candidate(1, [[0, 0, 8], [0, 0, 3], [0, 0, 8], [0, 0, 8], [0, 0, 5], [0, 0, 9], [0, 0, 6], [0, 0, 1], [0, 0, 8], [0, 0, 1], [0, 0, 5], [0, 0, 9], [0, 0, 2]]) == 9\n    assert candidate(15, [[8, 10, 5], [4, 12, 6], [6, 11, 7], [8, 11, 3], [7, 13, 1], [7, 7, 8], [8, 10, 5], [0, 11, 3], [1, 1, 9], [2, 11, 6], [3, 11, 8]]) == 22\n    assert candidate(10, [[5, 6, 9], [0, 2, 9]]) == 18\n    assert candidate(11, [[7, 9, 5], [0, 0, 8], [6, 6, 3], [4, 9, 1], [3, 7, 5], [0, 4, 7]]) == 16\n    assert candidate(7, [[0, 2, 9], [2, 4, 8], [0, 3, 6], [4, 4, 10], [2, 2, 2], [1, 1, 10], [0, 0, 8], [4, 4, 9], [4, 4, 4], [3, 3, 5], [2, 5, 2], [0, 3, 6], [3, 4, 5]]) == 35\n    assert candidate(9, [[3, 8, 1], [0, 6, 7], [0, 3, 6], [1, 6, 2], [2, 3, 10], [3, 3, 2], [1, 2, 2], [1, 3, 9], [0, 0, 7], [1, 2, 9], [5, 5, 4], [5, 6, 6], [1, 5, 5], [0, 1, 2], [0, 6, 1]]) == 24\n    assert candidate(8, [[0, 0, 7], [0, 1, 8], [1, 1, 1], [2, 2, 7], [2, 3, 1]]) == 15\n    assert candidate(8, [[6, 6, 5], [0, 1, 7], [1, 7, 10]]) == 12\n    assert candidate(13, [[0, 9, 5], [6, 8, 7], [0, 0, 3], [4, 4, 2], [1, 9, 7], [9, 12, 9], [1, 2, 9], [1, 1, 10], [3, 3, 3], [0, 3, 3], [4, 8, 5], [0, 0, 9], [7, 10, 7]]) == 40\n    assert candidate(11, [[2, 5, 1]]) == 1\n    assert candidate(3, [[0, 0, 9], [0, 2, 6], [1, 1, 1], [1, 2, 10], [0, 0, 10], [0, 0, 4], [0, 2, 7], [0, 0, 1], [0, 0, 9], [2, 2, 5]]) == 20\n    assert candidate(5, [[1, 1, 3], [1, 2, 1], [0, 2, 3], [1, 1, 10], [3, 3, 3], [2, 4, 3], [0, 3, 5], [4, 4, 2], [2, 3, 10], [3, 3, 8], [3, 3, 9], [0, 2, 8], [0, 2, 2], [1, 1, 3], [0, 0, 8]]) == 30\n    assert candidate(13, [[6, 9, 3], [6, 9, 6], [5, 12, 10], [11, 12, 4], [4, 4, 2], [0, 7, 8], [2, 6, 6], [6, 6, 4]]) == 12\n    assert candidate(3, [[0, 2, 9], [1, 1, 8], [0, 1, 1], [2, 2, 4], [2, 2, 1], [0, 0, 4], [1, 1, 9], [0, 0, 6], [0, 1, 7]]) == 19\n    assert candidate(3, [[1, 2, 8], [0, 0, 1], [0, 1, 1], [0, 0, 3], [1, 2, 2], [0, 0, 7], [0, 0, 10], [1, 1, 6]]) == 18\n    assert candidate(2, [[0, 0, 3], [1, 1, 10], [0, 1, 6]]) == 13\n    assert candidate(3, [[0, 0, 9], [1, 1, 1], [0, 2, 7], [1, 1, 7], [1, 2, 6], [0, 0, 8], [0, 2, 3], [1, 2, 10], [2, 2, 3], [2, 2, 5]]) == 21\n    assert candidate(5, [[2, 3, 2], [0, 1, 7], [0, 1, 1], [0, 0, 9], [2, 4, 1], [3, 4, 5], [1, 3, 10], [0, 0, 8]]) == 19\n    assert candidate(15, [[4, 6, 9], [4, 10, 9], [3, 5, 4], [0, 2, 6], [3, 13, 7], [1, 11, 6], [1, 8, 4], [4, 12, 4], [3, 8, 8], [13, 13, 7], [4, 12, 3]]) == 22\n    assert candidate(8, [[1, 5, 9], [0, 4, 9], [0, 0, 3], [1, 2, 9], [0, 0, 10], [4, 7, 9], [7, 7, 2], [0, 2, 6], [1, 1, 5], [1, 4, 3], [2, 4, 8], [0, 1, 1], [2, 3, 1]]) == 28\n    assert candidate(4, [[0, 2, 7], [2, 3, 9], [2, 3, 2], [1, 2, 1], [1, 2, 9], [0, 3, 7], [0, 2, 9], [1, 2, 8], [0, 3, 10], [0, 3, 8], [0, 0, 5], [2, 2, 6]]) == 14\n    assert candidate(12, [[0, 0, 4], [5, 8, 2], [2, 2, 10], [3, 5, 7], [1, 2, 1], [5, 7, 8], [8, 11, 3]]) == 25\n    assert candidate(2, [[0, 0, 7], [0, 1, 3], [0, 0, 8]]) == 8\n    assert candidate(4, [[2, 3, 8], [0, 1, 1], [3, 3, 2]]) == 9\n    assert candidate(14, [[2, 12, 4], [7, 11, 4], [4, 4, 5], [0, 1, 6], [3, 4, 1], [4, 11, 9], [10, 12, 7], [7, 12, 1], [11, 11, 1], [0, 0, 5], [12, 12, 8], [6, 7, 6]]) == 26\n    assert candidate(10, [[1, 4, 6], [7, 9, 9], [1, 4, 5], [8, 8, 2], [4, 7, 1], [6, 8, 8], [2, 3, 1], [0, 1, 4]]) == 15\n    assert candidate(7, [[2, 5, 5], [1, 2, 9], [1, 3, 7], [2, 4, 3], [0, 0, 6], [0, 0, 1], [4, 4, 9], [1, 5, 7], [2, 2, 10]]) == 25\n    assert candidate(11, [[0, 4, 10]]) == 10\n    assert candidate(3, [[0, 1, 10], [1, 2, 2], [0, 2, 6], [0, 0, 1], [0, 0, 3], [0, 1, 8], [0, 0, 2], [2, 2, 8], [0, 0, 3], [2, 2, 3], [1, 2, 6], [0, 0, 4], [1, 2, 5]]) == 18\n    assert candidate(14, [[11, 11, 4], [1, 11, 10], [11, 12, 2], [7, 8, 2]]) == 10\n    assert candidate(2, [[0, 0, 1], [0, 0, 1], [1, 1, 9], [0, 0, 1], [1, 1, 2], [0, 1, 10]]) == 10\n    assert candidate(6, [[0, 5, 6], [1, 2, 10], [0, 2, 4], [2, 4, 5], [4, 4, 6], [2, 2, 2], [0, 0, 7], [2, 5, 9], [2, 2, 3]]) == 23\n    assert candidate(6, [[0, 0, 7], [2, 5, 5]]) == 12\n    assert candidate(10, [[2, 3, 2], [0, 1, 6], [0, 0, 2], [1, 1, 5], [3, 3, 8], [2, 8, 7], [1, 7, 8], [0, 1, 4], [7, 7, 8], [1, 3, 7], [5, 5, 10], [2, 6, 6], [0, 0, 4], [5, 7, 4], [1, 9, 4]]) == 35\n    assert candidate(10, [[0, 2, 4], [1, 4, 7], [0, 1, 10], [0, 5, 1]]) == 10\n    assert candidate(12, [[0, 5, 6], [4, 10, 9], [7, 11, 10], [10, 11, 1], [6, 10, 1], [2, 2, 6]]) == 16\n    assert candidate(11, [[3, 7, 8], [2, 7, 10], [3, 9, 3]]) == 10\n    assert candidate(4, [[0, 0, 3], [0, 2, 6], [0, 0, 1], [1, 1, 2], [0, 2, 8], [1, 1, 3], [1, 3, 8], [1, 1, 10], [1, 2, 7], [1, 1, 8], [0, 0, 9]]) == 19\n    assert candidate(1, [[0, 0, 9]]) == 9\n    assert candidate(3, [[0, 1, 5], [0, 0, 5], [0, 0, 6], [0, 1, 6], [0, 2, 10], [1, 2, 6], [0, 0, 9], [1, 2, 9]]) == 18\n    assert candidate(4, [[0, 0, 2], [2, 3, 9], [0, 1, 8], [0, 0, 9], [0, 0, 1], [3, 3, 9], [1, 2, 1], [1, 3, 5], [0, 1, 4], [0, 1, 4]]) == 19\n    assert candidate(3, [[0, 0, 7], [2, 2, 1], [1, 1, 3], [0, 0, 3], [1, 1, 7], [0, 1, 5], [0, 2, 3], [1, 1, 5], [0, 1, 10], [1, 1, 5], [1, 1, 6], [0, 1, 3], [0, 0, 8], [1, 2, 7], [1, 1, 4]]) == 16\n    assert candidate(14, [[5, 7, 2], [1, 5, 3], [11, 13, 2], [12, 12, 5], [4, 5, 6], [5, 10, 2], [4, 10, 8], [1, 1, 4], [4, 4, 2], [3, 7, 9], [5, 10, 1], [0, 3, 2]]) == 18\n    assert candidate(11, [[1, 1, 5], [4, 4, 9], [0, 0, 1], [1, 3, 3], [3, 7, 4], [3, 9, 6], [7, 10, 2], [3, 7, 5], [4, 4, 8], [7, 8, 10], [1, 3, 7], [1, 4, 5], [0, 0, 10]]) == 36\n    assert candidate(13, [[4, 9, 9], [1, 9, 8], [1, 9, 8], [0, 0, 8], [8, 11, 3], [2, 3, 6], [9, 9, 10], [5, 12, 1], [4, 6, 4]]) == 28\n    assert candidate(5, [[2, 2, 7], [0, 2, 10], [2, 3, 10]]) == 10\n    assert candidate(10, [[0, 4, 6], [1, 1, 1], [0, 5, 1], [1, 6, 3], [8, 9, 1], [2, 3, 7], [2, 3, 10], [1, 2, 1], [0, 0, 8], [3, 5, 5], [0, 0, 10]]) == 22\n    assert candidate(4, [[0, 1, 1], [0, 0, 9], [1, 1, 8], [3, 3, 1], [1, 1, 5], [0, 0, 9], [0, 1, 9], [0, 0, 7], [2, 2, 2], [2, 3, 5], [1, 1, 10], [1, 2, 8]]) == 24\n    assert candidate(7, [[0, 1, 9], [0, 1, 4], [0, 0, 3], [0, 0, 1], [1, 6, 5], [4, 6, 9], [4, 5, 7], [0, 0, 3], [1, 5, 9], [0, 2, 2]]) == 18\n    assert candidate(12, [[8, 8, 6], [8, 8, 6], [1, 10, 7], [0, 0, 3], [9, 10, 7], [1, 7, 2], [1, 1, 1], [2, 3, 6], [0, 11, 1], [1, 8, 5], [1, 5, 7], [1, 2, 4], [9, 9, 5], [0, 3, 1]]) == 23\n    assert candidate(15, [[5, 6, 3], [2, 2, 7], [0, 0, 5], [1, 7, 10], [11, 14, 5], [13, 14, 1], [2, 12, 1], [0, 4, 5], [0, 6, 2], [6, 9, 10], [3, 5, 2], [0, 1, 1], [1, 14, 1], [1, 6, 1]]) == 29\n    assert candidate(7, [[1, 1, 5], [1, 1, 4], [0, 0, 9], [1, 1, 6], [0, 6, 4], [2, 6, 3], [2, 5, 9], [0, 6, 3], [0, 2, 1], [1, 1, 6], [4, 5, 5]]) == 24\n    assert candidate(1, [[0, 0, 5], [0, 0, 3], [0, 0, 4], [0, 0, 8], [0, 0, 10], [0, 0, 6], [0, 0, 7], [0, 0, 7], [0, 0, 7], [0, 0, 3], [0, 0, 4], [0, 0, 5]]) == 10\n    assert candidate(7, [[2, 2, 3], [2, 6, 4], [4, 6, 5], [0, 0, 4], [1, 1, 4], [2, 3, 1], [2, 4, 3], [0, 2, 8], [1, 3, 10], [1, 3, 2], [1, 6, 7], [0, 6, 9], [2, 2, 2], [1, 1, 9], [4, 4, 2]]) == 21\n    assert candidate(12, [[0, 0, 7], [0, 2, 3], [0, 7, 2], [2, 3, 1], [2, 11, 6], [2, 10, 2], [1, 3, 6], [4, 7, 9], [7, 9, 3], [4, 6, 1], [5, 6, 8], [0, 2, 4], [0, 0, 3], [5, 5, 9], [2, 5, 3]]) == 25\n    assert candidate(9, [[1, 8, 4], [5, 6, 5], [0, 2, 6], [4, 5, 4]]) == 11\n    assert candidate(8, [[0, 4, 6], [2, 3, 6], [2, 5, 9], [2, 6, 7], [6, 6, 5], [4, 4, 4], [1, 1, 5], [2, 5, 7]]) == 20\n    assert candidate(13, [[0, 6, 10]]) == 10\n    assert candidate(6, [[0, 1, 2], [0, 0, 9], [3, 3, 10], [0, 3, 7], [0, 0, 2], [0, 0, 3], [2, 2, 2], [2, 3, 2], [5, 5, 6], [0, 1, 2], [0, 5, 2]]) == 27\n    assert candidate(14, [[3, 12, 7], [1, 3, 2], [4, 11, 3], [0, 1, 7], [1, 5, 2], [1, 1, 4]]) == 14\n    assert candidate(14, [[0, 0, 3], [0, 1, 3], [1, 11, 3], [6, 7, 6], [7, 7, 5], [1, 2, 8], [7, 10, 9]]) == 20\n    assert candidate(13, [[0, 12, 7], [2, 2, 4], [2, 2, 8], [3, 3, 2], [1, 11, 5], [1, 7, 2]]) == 10\n    assert candidate(1, [[0, 0, 2], [0, 0, 8], [0, 0, 1]]) == 8\n    assert candidate(1, [[0, 0, 1], [0, 0, 4], [0, 0, 7], [0, 0, 2], [0, 0, 5], [0, 0, 1], [0, 0, 4], [0, 0, 2], [0, 0, 6], [0, 0, 6], [0, 0, 3], [0, 0, 3]]) == 7\n    assert candidate(1, [[0, 0, 6], [0, 0, 6], [0, 0, 3], [0, 0, 6], [0, 0, 6], [0, 0, 10], [0, 0, 1], [0, 0, 2]]) == 10\n    assert candidate(9, [[4, 6, 7], [1, 3, 10]]) == 17\n    assert candidate(13, [[2, 6, 3], [1, 12, 6], [2, 11, 3], [7, 7, 2], [5, 12, 4], [0, 1, 2], [0, 1, 8], [1, 1, 3], [6, 6, 4], [8, 9, 7], [8, 8, 2], [2, 2, 2], [0, 0, 9], [9, 11, 7], [8, 9, 7]]) == 29\n    assert candidate(8, [[0, 1, 8], [0, 0, 6], [5, 5, 9]]) == 17\n    assert candidate(1, [[0, 0, 10], [0, 0, 3], [0, 0, 8], [0, 0, 9], [0, 0, 1], [0, 0, 8], [0, 0, 2], [0, 0, 7], [0, 0, 10], [0, 0, 8], [0, 0, 5], [0, 0, 3], [0, 0, 2], [0, 0, 4]]) == 10\n    assert candidate(9, [[0, 2, 6], [1, 3, 5], [1, 1, 5], [2, 3, 10], [4, 8, 4], [5, 8, 5], [6, 6, 10]]) == 25\n    assert candidate(6, [[0, 0, 7]]) == 7\n    assert candidate(8, [[1, 1, 5], [1, 2, 9], [1, 2, 6], [0, 3, 6], [1, 1, 10], [3, 4, 1], [3, 5, 3], [1, 5, 8], [0, 2, 6], [5, 7, 9]]) == 20\n    assert candidate(14, [[3, 4, 4], [6, 8, 1], [0, 4, 1]]) == 5\n    assert candidate(11, [[4, 4, 2], [1, 2, 7], [2, 8, 10], [1, 1, 3], [8, 10, 4], [1, 2, 1], [4, 6, 10]]) == 21\n    assert candidate(11, [[1, 8, 1], [1, 5, 5], [0, 1, 3], [10, 10, 10], [1, 1, 8], [1, 2, 1], [2, 3, 10], [2, 10, 10], [2, 2, 9], [0, 9, 4]]) == 28\n    assert candidate(6, [[2, 2, 6], [0, 1, 2], [2, 2, 2]]) == 8\n\ndef test_check():\n    check(maximizeTheProfit)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2998_countSymmetricIntegers", "language": "py", "prompt": "def countSymmetricIntegers(low: int, high: int) -> int:\n    \"\"\"You are given two positive integers low and high.\nAn integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.\nReturn the number of symmetric integers in the range [low, high].\nExample 1:\nInput: low = 1, high = 100\nOutput: 9\nExplanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.\nExample 2:\nInput: low = 1200, high = 1230\nOutput: 4\nExplanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.\nConstraints:\n * 1 <= low <= high <= 104\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2998_countSymmetricIntegers.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(1, 100) == 9\n    assert candidate(1200, 1230) == 4\n    assert candidate(1, 1) == 0\n    assert candidate(1, 2) == 0\n    assert candidate(1, 3) == 0\n    assert candidate(1, 4) == 0\n    assert candidate(1, 5) == 0\n    assert candidate(1, 6) == 0\n    assert candidate(1, 7) == 0\n    assert candidate(1, 8) == 0\n    assert candidate(1, 9) == 0\n    assert candidate(1, 10) == 0\n    assert candidate(1, 11) == 1\n    assert candidate(1, 12) == 1\n    assert candidate(1, 13) == 1\n    assert candidate(1, 14) == 1\n    assert candidate(1, 15) == 1\n    assert candidate(1, 16) == 1\n    assert candidate(1, 17) == 1\n    assert candidate(1, 18) == 1\n    assert candidate(1, 19) == 1\n    assert candidate(1, 20) == 1\n    assert candidate(1, 21) == 1\n    assert candidate(1, 22) == 2\n    assert candidate(1, 23) == 2\n    assert candidate(1, 24) == 2\n    assert candidate(1, 25) == 2\n    assert candidate(1, 26) == 2\n    assert candidate(1, 27) == 2\n    assert candidate(1, 28) == 2\n    assert candidate(1, 29) == 2\n    assert candidate(1, 30) == 2\n    assert candidate(1, 31) == 2\n    assert candidate(1, 32) == 2\n    assert candidate(1, 33) == 3\n    assert candidate(1, 34) == 3\n    assert candidate(1, 35) == 3\n    assert candidate(1, 36) == 3\n    assert candidate(1, 37) == 3\n    assert candidate(1, 38) == 3\n    assert candidate(1, 39) == 3\n    assert candidate(1, 40) == 3\n    assert candidate(1, 41) == 3\n    assert candidate(1, 42) == 3\n    assert candidate(1, 43) == 3\n    assert candidate(1, 44) == 4\n    assert candidate(1, 45) == 4\n    assert candidate(1, 46) == 4\n    assert candidate(1, 47) == 4\n    assert candidate(1, 48) == 4\n    assert candidate(100, 1782) == 44\n    assert candidate(1, 49) == 4\n    assert candidate(1, 50) == 4\n    assert candidate(1, 51) == 4\n    assert candidate(1, 52) == 4\n    assert candidate(1, 53) == 4\n    assert candidate(1, 54) == 4\n    assert candidate(1, 55) == 5\n    assert candidate(1, 56) == 5\n    assert candidate(1, 57) == 5\n    assert candidate(1, 58) == 5\n    assert candidate(1, 59) == 5\n    assert candidate(1, 60) == 5\n    assert candidate(2, 2) == 0\n    assert candidate(2, 3) == 0\n    assert candidate(2, 4) == 0\n    assert candidate(2, 5) == 0\n    assert candidate(2, 6) == 0\n    assert candidate(2, 7) == 0\n    assert candidate(2, 8) == 0\n    assert candidate(2, 9) == 0\n    assert candidate(2, 10) == 0\n    assert candidate(2, 11) == 1\n    assert candidate(2, 12) == 1\n    assert candidate(2, 13) == 1\n    assert candidate(2, 14) == 1\n    assert candidate(2, 15) == 1\n    assert candidate(2, 16) == 1\n    assert candidate(2, 17) == 1\n    assert candidate(2, 18) == 1\n    assert candidate(2, 19) == 1\n    assert candidate(2, 20) == 1\n    assert candidate(2, 21) == 1\n    assert candidate(2, 22) == 2\n    assert candidate(2, 23) == 2\n    assert candidate(2, 24) == 2\n    assert candidate(2, 25) == 2\n    assert candidate(2, 26) == 2\n    assert candidate(2, 27) == 2\n    assert candidate(2, 28) == 2\n    assert candidate(2, 29) == 2\n    assert candidate(2, 30) == 2\n    assert candidate(2, 31) == 2\n    assert candidate(2, 32) == 2\n    assert candidate(2, 33) == 3\n    assert candidate(2, 34) == 3\n    assert candidate(2, 35) == 3\n    assert candidate(2, 36) == 3\n    assert candidate(2, 37) == 3\n    assert candidate(2, 38) == 3\n\ndef test_check():\n    check(countSymmetricIntegers)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_2999_canBeEqual", "language": "py", "prompt": "def canBeEqual(s1: str, s2: str) -> bool:\n    \"\"\"You are given two strings s1 and s2, both of length 4, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\n * Choose any two indices i and j such that j - i = 2, then swap the two characters at those indices in the string.\nReturn true if you can make the strings s1 and s2 equal, and false otherwise.\nExample 1:\nInput: s1 = \"abcd\", s2 = \"cdab\"\nOutput: true\nExplanation: We can do the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\".\n- Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2.\nExample 2:\nInput: s1 = \"abcd\", s2 = \"dacb\"\nOutput: false\nExplanation: It is not possible to make the two strings equal.\nConstraints:\n * s1.length == s2.length == 4\n * s1 and s2 consist only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2999_canBeEqual.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abcd, cdab) == True\n    assert candidate(abcd, dacb) == False\n    assert candidate(gudo, ogdu) == False\n    assert candidate(bnxw, bwxn) == True\n    assert candidate(zzon, zozn) == False\n    assert candidate(cmpr, rmcp) == False\n    assert candidate(qnde, flsi) == False\n    assert candidate(vofo, oofv) == False\n    assert candidate(xsvc, vcxs) == True\n    assert candidate(hvsz, hzsv) == True\n    assert candidate(ifjz, jzfi) == False\n    assert candidate(zrmq, mrzq) == True\n    assert candidate(hazw, pfmp) == False\n    assert candidate(kina, kina) == True\n    assert candidate(fymg, famj) == False\n    assert candidate(riti, riti) == True\n    assert candidate(goze, gezo) == True\n    assert candidate(seeo, vfvm) == False\n    assert candidate(ybyd, himj) == False\n    assert candidate(gcdm, dmgc) == True\n    assert candidate(kvne, nekv) == True\n    assert candidate(cbyo, cbyo) == True\n    assert candidate(fezu, zufe) == True\n    assert candidate(homs, fhdu) == False\n    assert candidate(zlek, zlek) == True\n    assert candidate(bxqt, xbtq) == False\n    assert candidate(waso, wyjd) == False\n    assert candidate(nibi, seua) == False\n    assert candidate(oynw, sgxl) == False\n    assert candidate(ehui, uhei) == True\n    assert candidate(vchn, jfwr) == False\n    assert candidate(zgmt, zgmt) == True\n    assert candidate(eobz, boez) == True\n    assert candidate(zpzg, zzpg) == False\n    assert candidate(bbfp, fbbp) == True\n    assert candidate(vxqp, xpvq) == False\n    assert candidate(ihtv, ixji) == False\n    assert candidate(ahsk, aksh) == True\n    assert candidate(zexw, miva) == False\n    assert candidate(iicq, ihda) == False\n    assert candidate(kunv, ziac) == False\n    assert candidate(gqzd, gqzd) == True\n    assert candidate(ppeb, ebpp) == True\n    assert candidate(uouc, ucuo) == True\n    assert candidate(laxa, xala) == True\n    assert candidate(rbwe, wbre) == True\n    assert candidate(mswt, wsmt) == True\n    assert candidate(yfyz, deyv) == False\n    assert candidate(jlai, alji) == True\n    assert candidate(uliu, bsmu) == False\n    assert candidate(bhag, kuws) == False\n    assert candidate(bvwr, wrbv) == True\n    assert candidate(safs, safs) == True\n    assert candidate(hzfp, hpfz) == True\n    assert candidate(xide, dixe) == True\n    assert candidate(qpye, qpye) == True\n    assert candidate(zaus, zsua) == True\n    assert candidate(lpsc, cslp) == False\n    assert candidate(taxc, taxc) == True\n    assert candidate(kkjc, kcjk) == True\n    assert candidate(pshr, prhs) == True\n    assert candidate(kpdr, djoe) == False\n    assert candidate(vzla, lzva) == True\n    assert candidate(tcar, tacr) == False\n    assert candidate(zkyt, yfzr) == False\n    assert candidate(puwg, pgwu) == True\n    assert candidate(ownv, ovnw) == True\n    assert candidate(rayz, bpnf) == False\n    assert candidate(zbwg, wbzg) == True\n    assert candidate(rypk, pyrk) == True\n    assert candidate(qchw, bcqn) == False\n    assert candidate(qtpf, qfpt) == True\n    assert candidate(apnl, nlap) == True\n    assert candidate(pkmh, mkph) == True\n    assert candidate(ouxw, xuow) == True\n    assert candidate(dlgd, gdld) == False\n    assert candidate(xbcx, cxxb) == True\n    assert candidate(eaba, uaul) == False\n    assert candidate(fyro, rofy) == True\n    assert candidate(bzqb, bzqb) == True\n    assert candidate(zyjv, xjzr) == False\n    assert candidate(jdvv, djvv) == False\n    assert candidate(nyxb, ocry) == False\n    assert candidate(gxlx, lxgx) == True\n    assert candidate(kgkr, krkg) == True\n    assert candidate(edfw, fdew) == True\n    assert candidate(vxkq, kqxv) == False\n    assert candidate(qnjc, jivc) == False\n    assert candidate(zzaf, azzf) == True\n    assert candidate(esgr, gres) == True\n    assert candidate(meuu, yqlh) == False\n    assert candidate(gjda, djga) == True\n    assert candidate(qaqz, qaqz) == True\n    assert candidate(legy, lyge) == True\n    assert candidate(eeum, emue) == True\n    assert candidate(vsvs, vsvs) == True\n    assert candidate(mxlk, mxlk) == True\n    assert candidate(nbre, renb) == True\n    assert candidate(erfk, gmfy) == False\n    assert candidate(gsic, snvs) == False\n\ndef test_check():\n    check(canBeEqual)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3000_minAbsoluteDifference", "language": "py", "prompt": "from typing import List\n\ndef minAbsoluteDifference(nums: List[int], x: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and an integer x.\nFind the minimum absolute difference between two elements in the array that are at least x indices apart.\nIn other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized.\nReturn an integer denoting the minimum absolute difference between two elements that are at least x indices apart.\nExample 1:\nInput: nums = [4,3,2,4], x = 2\nOutput: 0\nExplanation: We can select nums[0] = 4 and nums[3] = 4.\nThey are at least 2 indices apart, and their absolute difference is the minimum, 0.\nIt can be shown that 0 is the optimal answer.\nExample 2:\nInput: nums = [5,3,2,10,15], x = 1\nOutput: 1\nExplanation: We can select nums[1] = 3 and nums[2] = 2.\nThey are at least 1 index apart, and their absolute difference is the minimum, 1.\nIt can be shown that 1 is the optimal answer.\nExample 3:\nInput: nums = [1,2,3,4], x = 3\nOutput: 3\nExplanation: We can select nums[0] = 1 and nums[3] = 4.\nThey are at least 3 indices apart, and their absolute difference is the minimum, 3.\nIt can be shown that 3 is the optimal answer.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 109\n * 0 <= x < nums.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3000_minAbsoluteDifference.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([4, 3, 2, 4], 2) == 0\n    assert candidate([5, 3, 2, 10, 15], 1) == 1\n    assert candidate([1, 2, 3, 4], 3) == 3\n    assert candidate([1, 67], 1) == 66\n    assert candidate([7, 398], 1) == 391\n    assert candidate([12, 141], 1) == 129\n    assert candidate([21, 75], 1) == 54\n    assert candidate([22, 147], 1) == 125\n    assert candidate([25, 197], 1) == 172\n    assert candidate([27, 275], 1) == 248\n    assert candidate([37, 192], 1) == 155\n    assert candidate([41, 163], 1) == 122\n    assert candidate([45, 49], 1) == 4\n    assert candidate([48, 195], 1) == 147\n    assert candidate([68, 68], 1) == 0\n    assert candidate([71, 4], 1) == 67\n    assert candidate([72, 169], 1) == 97\n    assert candidate([74, 62], 1) == 12\n    assert candidate([75, 1], 1) == 74\n    assert candidate([76, 49], 1) == 27\n    assert candidate([88, 72], 1) == 16\n    assert candidate([99, 370], 1) == 271\n    assert candidate([103, 39], 1) == 64\n    assert candidate([109, 99], 1) == 10\n    assert candidate([111, 161], 1) == 50\n    assert candidate([113, 117], 1) == 4\n    assert candidate([119, 184], 1) == 65\n    assert candidate([122, 118], 1) == 4\n    assert candidate([123, 13], 1) == 110\n    assert candidate([123, 162], 1) == 39\n    assert candidate([126, 69], 1) == 57\n    assert candidate([127, 18], 1) == 109\n    assert candidate([127, 346], 1) == 219\n    assert candidate([132, 110], 1) == 22\n    assert candidate([134, 23], 1) == 111\n    assert candidate([136, 150], 1) == 14\n    assert candidate([139, 215], 1) == 76\n    assert candidate([153, 3], 1) == 150\n    assert candidate([156, 67], 1) == 89\n    assert candidate([160, 168], 1) == 8\n    assert candidate([161, 93], 1) == 68\n    assert candidate([164, 81], 1) == 83\n    assert candidate([167, 83], 1) == 84\n    assert candidate([174, 58], 1) == 116\n    assert candidate([174, 102], 1) == 72\n    assert candidate([175, 137], 1) == 38\n    assert candidate([176, 99], 1) == 77\n    assert candidate([178, 179], 1) == 1\n    assert candidate([228, 359], 1) == 131\n    assert candidate([243, 280], 1) == 37\n    assert candidate([283, 62], 1) == 221\n    assert candidate([288, 149], 1) == 139\n    assert candidate([293, 278], 1) == 15\n    assert candidate([327, 425], 1) == 98\n    assert candidate([337, 187], 1) == 150\n    assert candidate([346, 160], 1) == 186\n    assert candidate([347, 369], 1) == 22\n    assert candidate([355, 199], 1) == 156\n    assert candidate([413, 311], 1) == 102\n    assert candidate([417, 320], 1) == 97\n    assert candidate([418, 131], 1) == 287\n    assert candidate([3274, 71], 1) == 3203\n    assert candidate([5, 14, 81], 2) == 76\n    assert candidate([9, 25, 15], 2) == 6\n    assert candidate([9, 113, 136], 1) == 23\n    assert candidate([13, 19, 12], 1) == 1\n    assert candidate([13, 94, 59], 2) == 46\n    assert candidate([14, 111, 16], 1) == 2\n    assert candidate([17, 173, 69], 1) == 52\n    assert candidate([24, 39, 28], 2) == 4\n    assert candidate([32, 129, 93], 1) == 36\n    assert candidate([33, 18, 131], 1) == 15\n    assert candidate([36, 19, 27], 2) == 9\n    assert candidate([40, 18, 17], 1) == 1\n    assert candidate([43, 49, 20], 2) == 23\n    assert candidate([44, 186, 163], 2) == 119\n    assert candidate([56, 23, 158], 1) == 33\n    assert candidate([62, 37, 182], 2) == 120\n    assert candidate([63, 116, 12], 2) == 51\n    assert candidate([66, 345, 278], 2) == 212\n    assert candidate([67, 81, 165], 2) == 98\n    assert candidate([70, 184, 70], 2) == 0\n    assert candidate([73, 106, 172], 1) == 33\n    assert candidate([74, 199, 57], 1) == 17\n    assert candidate([83, 14, 14], 1) == 0\n    assert candidate([86, 1, 129], 2) == 43\n    assert candidate([87, 194, 107], 1) == 20\n    assert candidate([88, 75, 122], 2) == 34\n    assert candidate([93, 96, 28], 1) == 3\n    assert candidate([95, 86, 132], 2) == 37\n    assert candidate([96, 41, 24], 1) == 17\n    assert candidate([116, 6, 3], 1) == 3\n    assert candidate([120, 102, 184], 1) == 18\n    assert candidate([123, 113, 20], 1) == 10\n    assert candidate([125, 14, 141], 1) == 16\n    assert candidate([126, 2, 180], 1) == 54\n    assert candidate([136, 24, 114], 1) == 22\n    assert candidate([136, 177, 98], 2) == 38\n    assert candidate([136, 177, 123], 1) == 13\n    assert candidate([136, 178, 18], 2) == 118\n\ndef test_check():\n    check(minAbsoluteDifference)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3001_maximumScore", "language": "py", "prompt": "from typing import List\n\ndef maximumScore(nums: List[int], k: int) -> int:\n    \"\"\"You are given an array nums of n positive integers and an integer k.\nInitially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:\n * Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously.\n * Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index.\n * Multiply your score by x.\nHere, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.\nThe prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.\nReturn the maximum possible score after applying at most k operations.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nInput: nums = [8,3,9,3,8], k = 2\nOutput: 81\nExplanation: To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain.\nExample 2:\nInput: nums = [19,12,14,6,10,18], k = 3\nOutput: 4788\nExplanation: To get a score of 4788, we can apply the following operations:\n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain.\nConstraints:\n * 1 <= nums.length == n <= 105\n * 1 <= nums[i] <= 105\n * 1 <= k <= min(n * (n + 1) / 2, 109)\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3001_maximumScore.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([8, 3, 9, 3, 8], 2) == 81\n    assert candidate([19, 12, 14, 6, 10, 18], 3) == 4788\n    assert candidate([3289, 2832, 14858, 22011], 6) == 256720975\n    assert candidate([1, 7, 11, 1, 5], 14) == 823751938\n    assert candidate([1, 1, 2, 18, 1, 9, 3, 1], 32) == 346264255\n    assert candidate([1, 1, 1], 2) == 1\n    assert candidate([1, 2, 1, 12, 1, 3], 3) == 1728\n    assert candidate([12, 5, 1, 6, 9, 1, 17, 14], 12) == 62996359\n    assert candidate([1], 1) == 1\n    assert candidate([1, 10, 15, 1, 3], 13) == 499978741\n    assert candidate([6, 1, 13, 10, 1, 17, 6], 27) == 630596200\n    assert candidate([1, 14], 1) == 14\n    assert candidate([2, 1, 14, 5, 18, 1, 8, 5], 34) == 799392504\n    assert candidate([5, 12, 11, 15, 10, 18], 18) == 557423913\n    assert candidate([4, 1], 3) == 16\n    assert candidate([1, 2, 5, 1, 10, 1, 1], 20) == 600000014\n    assert candidate([13, 16, 12, 15, 12, 1, 13, 1, 18, 1], 46) == 912532739\n    assert candidate([10, 11], 3) == 1100\n    assert candidate([15, 16, 12, 1, 10, 14], 19) == 311972352\n    assert candidate([14, 12, 5, 2, 14], 6) == 7529536\n    assert candidate([1, 13, 12, 1, 9, 12, 1, 18], 31) == 846374420\n    assert candidate([1, 6, 14, 10, 16], 4) == 43904\n    assert candidate([14, 1, 9, 1, 10], 3) == 2744\n    assert candidate([13, 1, 1, 15, 9, 1, 1], 22) == 925331761\n    assert candidate([1, 17, 3, 9, 10, 17, 1, 1, 1, 11], 22) == 407065837\n    assert candidate([1, 1, 1], 5) == 1\n    assert candidate([1, 13, 4, 1, 1], 14) == 206765780\n    assert candidate([3, 1, 3, 10, 2, 16], 16) == 996976007\n    assert candidate([1, 2, 1, 1, 16, 8, 11, 6], 27) == 33977400\n    assert candidate([1, 10, 13, 1, 9, 15, 1], 2) == 225\n    assert candidate([18, 1], 3) == 324\n    assert candidate([16], 1) == 16\n    assert candidate([14, 6, 18, 10, 1, 8, 1, 17], 25) == 677968714\n    assert candidate([15, 16, 12], 6) == 7776000\n    assert candidate([1, 10, 1, 2], 7) == 2000000\n    assert candidate([13, 1, 10, 1, 15, 6, 1, 12, 6], 10) == 650386593\n    assert candidate([1, 15, 5, 1, 1, 15, 1, 1], 17) == 10486853\n    assert candidate([1, 9], 2) == 81\n    assert candidate([13, 8, 14, 6, 3, 14, 13, 10, 1], 21) == 247566578\n    assert candidate([4], 1) == 4\n    assert candidate([1, 12, 5, 1, 12], 15) == 209137175\n    assert candidate([1, 5, 1, 11], 4) == 3025\n    assert candidate([3, 6, 17, 1, 1, 17, 18, 12, 16, 5], 9) == 359288982\n    assert candidate([2, 2, 15, 2, 15, 15], 10) == 650386593\n    assert candidate([1, 12], 1) == 12\n    assert candidate([2, 11, 1, 1], 2) == 121\n    assert candidate([11, 15, 18, 4, 11, 7, 1, 1], 32) == 179964426\n    assert candidate([10, 1, 15], 1) == 15\n    assert candidate([10, 1, 1, 9, 14, 6, 4, 18, 8], 10) == 420565606\n    assert candidate([6, 8], 3) == 288\n    assert candidate([13, 1, 10, 6], 4) == 16900\n    assert candidate([8, 10, 16, 1, 1, 1], 2) == 256\n    assert candidate([11, 2, 1], 4) == 2662\n    assert candidate([15], 1) == 15\n    assert candidate([5, 5, 16, 12, 8, 1, 1, 7, 12], 34) == 15762264\n    assert candidate([1, 1], 1) == 1\n    assert candidate([3, 18, 12, 8, 1, 3, 6], 23) == 18966086\n    assert candidate([13, 1, 5, 6], 8) == 14236560\n    assert candidate([1, 1, 15, 1, 9, 1, 1], 23) == 929527145\n    assert candidate([6, 2, 1, 17, 9, 14, 1], 25) == 808455901\n    assert candidate([1, 18], 3) == 324\n    assert candidate([1, 10], 2) == 100\n    assert candidate([17], 1) == 17\n    assert candidate([18, 13, 12, 1, 11], 8) == 537271275\n    assert candidate([10, 14, 18, 6, 12, 14, 3, 13], 23) == 795923147\n    assert candidate([16, 1, 14, 13, 3, 1], 6) == 9834496\n    assert candidate([10, 4, 4, 3, 10, 1], 15) == 997200007\n    assert candidate([2, 4, 1, 5, 14, 13, 13, 17], 19) == 241329678\n    assert candidate([6, 1, 15, 1, 13], 12) == 820232542\n    assert candidate([14, 13, 1, 14], 5) == 537824\n    assert candidate([10, 4, 12, 12, 16, 9, 1, 18], 36) == 892891506\n    assert candidate([6], 1) == 6\n    assert candidate([12], 1) == 12\n    assert candidate([10, 17, 17, 15, 1, 15, 1], 19) == 301460564\n    assert candidate([10, 3, 1, 1, 4, 2, 14], 10) == 295359475\n    assert candidate([10, 12], 3) == 1200\n    assert candidate([9, 10, 2, 3, 2, 1, 11, 1, 1, 13], 49) == 900432644\n    assert candidate([1, 10, 18, 18, 3, 1, 8, 1, 15, 15], 18) == 38759446\n    assert candidate([15, 1, 11, 13, 16], 14) == 753886562\n    assert candidate([12, 1, 6, 1, 1, 4, 8, 17, 18, 1], 2) == 324\n    assert candidate([1, 1, 1, 17, 8, 18, 8, 1], 14) == 958387476\n    assert candidate([7, 1, 6, 9, 11, 7, 13, 12, 1], 39) == 21295572\n    assert candidate([12, 1, 1, 15, 2, 1, 1, 16, 1, 1], 8) == 294967268\n    assert candidate([3, 14, 13, 1, 11, 1, 1, 1], 22) == 810815174\n    assert candidate([14, 3, 6, 6, 1, 7, 13, 16], 28) == 312142986\n    assert candidate([3, 4, 4, 15, 18, 12, 6], 8) == 428674972\n    assert candidate([6, 15, 17, 9, 9, 17], 5) == 1419857\n    assert candidate([2, 12, 1, 11, 12], 5) == 248832\n    assert candidate([1, 15, 15], 4) == 50625\n    assert candidate([7, 11, 3, 1, 12, 10], 15) == 784368200\n    assert candidate([18, 1, 11, 15, 16, 18, 18, 13, 10, 10], 41) == 911212578\n    assert candidate([11, 15, 2, 14, 6, 15], 2) == 225\n    assert candidate([11, 2, 15, 1, 1, 11, 7, 1], 16) == 734032462\n    assert candidate([1, 6, 12, 4, 10, 13, 7, 6, 17, 1], 50) == 377786273\n    assert candidate([1, 5, 4, 18, 12, 1, 1, 1, 7, 12], 3) == 5832\n    assert candidate([5, 1, 17, 10, 12], 9) == 467999979\n    assert candidate([6, 1, 1, 4, 10, 15, 16, 8], 12) == 999939527\n    assert candidate([1, 1], 3) == 1\n    assert candidate([8], 1) == 8\n    assert candidate([9, 8, 14, 1, 14, 14, 5, 1, 6], 44) == 439903801\n\ndef test_check():\n    check(maximumScore)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3017_numberOfBeautifulIntegers", "language": "py", "prompt": "def numberOfBeautifulIntegers(low: int, high: int, k: int) -> int:\n    \"\"\"You are given positive integers low, high, and k.\nA number is beautiful if it meets both of the following conditions:\n * The count of even digits in the number is equal to the count of odd digits.\n * The number is divisible by k.\nReturn the number of beautiful integers in the range [low, high].\nExample 1:\nInput: low = 10, high = 20, k = 3\nOutput: 2\nExplanation: There are 2 beautiful integers in the given range: [12,18].\n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range.\nExample 2:\nInput: low = 1, high = 10, k = 1\nOutput: 1\nExplanation: There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range.\nExample 3:\nInput: low = 5, high = 5, k = 2\nOutput: 0\nExplanation: There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\nConstraints:\n * 0 < low <= high <= 109\n * 0 < k <= 20\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3017_numberOfBeautifulIntegers.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(10, 20, 3) == 2\n    assert candidate(1, 10, 1) == 1\n    assert candidate(5, 5, 2) == 0\n    assert candidate(3, 31, 16) == 1\n    assert candidate(25, 31, 11) == 0\n    assert candidate(9, 25, 4) == 2\n    assert candidate(58, 72, 16) == 0\n    assert candidate(5, 79, 12) == 3\n    assert candidate(26, 74, 7) == 4\n    assert candidate(36, 65, 7) == 3\n    assert candidate(12, 84, 8) == 4\n    assert candidate(13, 91, 13) == 3\n    assert candidate(8, 18, 4) == 2\n    assert candidate(22, 59, 6) == 3\n    assert candidate(15, 27, 9) == 2\n    assert candidate(4, 9, 19) == 0\n    assert candidate(14, 81, 17) == 1\n    assert candidate(12, 33, 18) == 1\n    assert candidate(10, 17, 8) == 1\n    assert candidate(42, 58, 3) == 2\n    assert candidate(22, 42, 4) == 2\n    assert candidate(5, 8, 5) == 0\n    assert candidate(12, 75, 13) == 2\n    assert candidate(2, 28, 1) == 9\n    assert candidate(29, 35, 17) == 1\n    assert candidate(13, 21, 9) == 1\n    assert candidate(1, 13, 15) == 0\n    assert candidate(12, 21, 16) == 1\n    assert candidate(47, 72, 13) == 2\n    assert candidate(1, 35, 12) == 1\n    assert candidate(38, 52, 4) == 1\n    assert candidate(10, 74, 3) == 11\n    assert candidate(60, 92, 11) == 0\n    assert candidate(3, 25, 15) == 0\n    assert candidate(63, 65, 20) == 0\n    assert candidate(22, 77, 7) == 4\n    assert candidate(1, 1, 4) == 0\n    assert candidate(28, 73, 20) == 0\n    assert candidate(21, 32, 6) == 1\n    assert candidate(43, 43, 11) == 0\n    assert candidate(31, 68, 16) == 1\n    assert candidate(1, 8, 4) == 0\n    assert candidate(47, 100, 18) == 3\n    assert candidate(45, 84, 19) == 1\n    assert candidate(31, 80, 11) == 0\n    assert candidate(14, 14, 5) == 0\n    assert candidate(21, 88, 10) == 3\n    assert candidate(11, 42, 3) == 6\n    assert candidate(19, 53, 16) == 1\n    assert candidate(57, 98, 6) == 4\n    assert candidate(57, 69, 9) == 1\n    assert candidate(17, 64, 1) == 23\n    assert candidate(29, 40, 15) == 1\n    assert candidate(36, 60, 3) == 3\n    assert candidate(16, 23, 13) == 0\n    assert candidate(36, 99, 3) == 11\n    assert candidate(23, 83, 4) == 6\n    assert candidate(4, 5, 9) == 0\n    assert candidate(15, 21, 2) == 2\n    assert candidate(51, 76, 7) == 3\n    assert candidate(24, 34, 8) == 1\n    assert candidate(24, 99, 1) == 38\n    assert candidate(37, 63, 10) == 1\n    assert candidate(19, 23, 6) == 0\n    assert candidate(35, 70, 17) == 0\n    assert candidate(3, 18, 19) == 0\n    assert candidate(30, 64, 12) == 1\n    assert candidate(3, 12, 9) == 0\n    assert candidate(14, 21, 16) == 1\n    assert candidate(19, 21, 12) == 0\n    assert candidate(54, 78, 16) == 0\n    assert candidate(24, 36, 20) == 0\n    assert candidate(54, 58, 13) == 0\n    assert candidate(74, 88, 12) == 0\n    assert candidate(45, 58, 14) == 1\n    assert candidate(51, 99, 8) == 3\n    assert candidate(8, 26, 13) == 0\n    assert candidate(12, 92, 3) == 15\n    assert candidate(18, 91, 11) == 0\n    assert candidate(14, 53, 15) == 2\n    assert candidate(4, 10, 11) == 0\n    assert candidate(7, 24, 5) == 1\n    assert candidate(1, 25, 8) == 1\n    assert candidate(7, 20, 15) == 0\n    assert candidate(51, 92, 1) == 21\n    assert candidate(73, 73, 3) == 0\n    assert candidate(50, 63, 19) == 0\n    assert candidate(30, 51, 19) == 1\n    assert candidate(2, 65, 7) == 5\n    assert candidate(49, 87, 20) == 0\n    assert candidate(3, 6, 1) == 0\n    assert candidate(16, 17, 6) == 0\n    assert candidate(17, 32, 16) == 1\n    assert candidate(13, 14, 6) == 0\n    assert candidate(25, 42, 11) == 0\n    assert candidate(18, 46, 5) == 3\n    assert candidate(1, 65, 6) == 5\n    assert candidate(6, 43, 15) == 1\n    assert candidate(5, 9, 12) == 0\n    assert candidate(1, 75, 9) == 7\n\ndef test_check():\n    check(numberOfBeautifulIntegers)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3019_furthestDistanceFromOrigin", "language": "py", "prompt": "def furthestDistanceFromOrigin(moves: str) -> int:\n    \"\"\"You are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0.\nIn the ith move, you can choose one of the following directions:\n * move to the left if moves[i] = 'L' or moves[i] = '_'\n * move to the right if moves[i] = 'R' or moves[i] = '_'\nReturn the distance from the origin of the furthest point you can get to after n moves.\nExample 1:\nInput: moves = \"L_RL__R\"\nOutput: 3\nExplanation: The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\".\nExample 2:\nInput: moves = \"_R__LL_\"\nOutput: 5\nExplanation: The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\".\nExample 3:\nInput: moves = \"_______\"\nOutput: 7\nExplanation: The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\".\nConstraints:\n * 1 <= moves.length == n <= 50\n * moves consists only of characters 'L', 'R' and '_'.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3019_furthestDistanceFromOrigin.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(L_RL__R) == 3\n    assert candidate(_R__LL_) == 5\n    assert candidate(_______) == 7\n    assert candidate(L) == 1\n    assert candidate(R) == 1\n    assert candidate(_) == 1\n    assert candidate(LL) == 2\n    assert candidate(LR) == 0\n    assert candidate(L_) == 2\n    assert candidate(RL) == 0\n    assert candidate(RR) == 2\n    assert candidate(R_) == 2\n    assert candidate(_L) == 2\n    assert candidate(_R) == 2\n    assert candidate(__) == 2\n    assert candidate(LLL) == 3\n    assert candidate(LLR) == 1\n    assert candidate(LL_) == 3\n    assert candidate(LRL) == 1\n    assert candidate(LRR) == 1\n    assert candidate(LR_) == 1\n    assert candidate(L_L) == 3\n    assert candidate(L_R) == 1\n    assert candidate(L__) == 3\n    assert candidate(RLL) == 1\n    assert candidate(RLR) == 1\n    assert candidate(RL_) == 1\n    assert candidate(RRL) == 1\n    assert candidate(RRR) == 3\n    assert candidate(RR_) == 3\n    assert candidate(R_L) == 1\n    assert candidate(R_R) == 3\n    assert candidate(R__) == 3\n    assert candidate(_LL) == 3\n    assert candidate(_LR) == 1\n    assert candidate(_L_) == 3\n    assert candidate(_RL) == 1\n    assert candidate(_RR) == 3\n    assert candidate(_R_) == 3\n    assert candidate(__L) == 3\n    assert candidate(__R) == 3\n    assert candidate(___) == 3\n    assert candidate(LLLL) == 4\n    assert candidate(LLLR) == 2\n    assert candidate(LLL_) == 4\n    assert candidate(LLRL) == 2\n    assert candidate(LLRR) == 0\n    assert candidate(LLR_) == 2\n    assert candidate(LL_L) == 4\n    assert candidate(LL_R) == 2\n    assert candidate(LL__) == 4\n    assert candidate(LRLL) == 2\n    assert candidate(LRLR) == 0\n    assert candidate(LRL_) == 2\n    assert candidate(LRRL) == 0\n    assert candidate(LRRR) == 2\n    assert candidate(LRR_) == 2\n    assert candidate(LR_L) == 2\n    assert candidate(LR_R) == 2\n    assert candidate(LR__) == 2\n    assert candidate(L_LL) == 4\n    assert candidate(L_LR) == 2\n    assert candidate(L_L_) == 4\n    assert candidate(L_RL) == 2\n    assert candidate(L_RR) == 2\n    assert candidate(L_R_) == 2\n    assert candidate(L__L) == 4\n    assert candidate(L__R) == 2\n    assert candidate(L___) == 4\n    assert candidate(RLLL) == 2\n    assert candidate(RLLR) == 0\n    assert candidate(RLL_) == 2\n    assert candidate(RLRL) == 0\n    assert candidate(RLRR) == 2\n    assert candidate(RLR_) == 2\n    assert candidate(RL_L) == 2\n    assert candidate(RL_R) == 2\n    assert candidate(RL__) == 2\n    assert candidate(RRLL) == 0\n    assert candidate(RRLR) == 2\n    assert candidate(RRL_) == 2\n    assert candidate(RRRL) == 2\n    assert candidate(RRRR) == 4\n    assert candidate(RRR_) == 4\n    assert candidate(RR_L) == 2\n    assert candidate(RR_R) == 4\n    assert candidate(RR__) == 4\n    assert candidate(R_LL) == 2\n    assert candidate(R_LR) == 2\n    assert candidate(R_L_) == 2\n    assert candidate(R_RL) == 2\n    assert candidate(R_RR) == 4\n    assert candidate(R_R_) == 4\n    assert candidate(R__L) == 2\n    assert candidate(R__R) == 4\n    assert candidate(R___) == 4\n    assert candidate(_LLL) == 4\n    assert candidate(_LLR) == 2\n    assert candidate(_LL_) == 4\n    assert candidate(_LRL) == 2\n\ndef test_check():\n    check(furthestDistanceFromOrigin)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3024_numberOfWays", "language": "py", "prompt": "def numberOfWays(s: str, t: str, k: int) -> int:\n    \"\"\"    You are given two strings s and t of equal length n. You can perform the following operation on the string s:\n* Remove a suffix of s of length l where 0 < l < n and append it at the start of s.\n  For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.\n    You are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.\n    Since the answer can be large, return it modulo 109 + 7.\n    Example 1:\n    Input: s = \"abcd\", t = \"cdab\", k = 2\n    Output: 2\n    Explanation:\n    First way:\n    In first operation, choose suffix from index = 3, so resulting s = \"dabc\".\n    In second operation, choose suffix from index = 3, so resulting s = \"cdab\".\n    Second way:\n    In first operation, choose suffix from index = 1, so resulting s = \"bcda\".\n    In second operation, choose suffix from index = 1, so resulting s = \"cdab\".\n    Example 2:\n    Input: s = \"ababab\", t = \"ababab\", k = 1\n    Output: 2\n    Explanation:\n    First way:\n    Choose suffix from index = 2, so resulting s = \"ababab\".\n    Second way:\n    Choose suffix from index = 4, so resulting s = \"ababab\".\n    Constraints:\n* 2 <= s.length <= 5 * 105\n* 1 <= k <= 1015\n* s.length == t.length\n* s and t consist of only lowercase English alphabets.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3024_numberOfWays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abcd, cdab, 2) == 2\n    assert candidate(ababab, ababab, 1) == 2\n    assert candidate(goxoq, dfqgl, 244326024901249) == 0\n    assert candidate(ceoceo, eoceoc, 4) == 208\n    assert candidate(ib, ib, 10) == 1\n    assert candidate(ttttttt, ttttttt, 5) == 7776\n    assert candidate(aaaa, aaaa, 8) == 6561\n    assert candidate(meplrmeplr, eplrmeplrm, 7) == 956594\n    assert candidate(dsmn, smnd, 3) == 7\n    assert candidate(jjj, jjj, 10) == 1024\n    assert candidate(rrrrr, rrrrr, 1) == 4\n    assert candidate(fefe, fefe, 9) == 9841\n    assert candidate(pfly, wvqr, 840550364246523) == 0\n    assert candidate(ltjwwltjww, jwwltjwwlt, 1) == 2\n    assert candidate(mb, mb, 3) == 0\n    assert candidate(jjjjjjjjjj, jjjjjjjjjj, 3) == 729\n    assert candidate(oqytlmi, lmioqyt, 8) == 239945\n    assert candidate(hpcg, pcgh, 5) == 61\n    assert candidate(bqbqbqbqbq, bqbqbqbqbq, 9) == 193710244\n    assert candidate(ccccccccc, ccccccccc, 7) == 2097152\n    assert candidate(jjjjjjjjjj, jjjjjjjjjj, 9) == 387420489\n    assert candidate(qqqq, qqqq, 9) == 19683\n    assert candidate(loppaqg, nvbxtmh, 104865546226045) == 0\n    assert candidate(qqqqqqqqqq, qqqqqqqqqq, 3) == 729\n    assert candidate(qsqsqsqsqs, qsqsqsqsqs, 2) == 41\n    assert candidate(nnnnn, nnnnn, 5) == 1024\n    assert candidate(klncccd, klncccd, 1) == 0\n    assert candidate(qqqqq, qqqqq, 9) == 262144\n    assert candidate(qvxrlh, hqvxrl, 6) == 2604\n    assert candidate(uuuu, uuuu, 9) == 19683\n    assert candidate(sss, sss, 7) == 128\n    assert candidate(gggggggggg, gggggggggg, 1) == 9\n    assert candidate(ks, cj, 400700574233583) == 0\n    assert candidate(lllllllll, lllllllll, 5) == 32768\n    assert candidate(uhixx, xxuhi, 3) == 13\n    assert candidate(vkrvkrvkr, rvkrvkrvk, 2) == 21\n    assert candidate(xtxtxtxt, xtxtxtxt, 8) == 2882401\n    assert candidate(nzybrhi, rhinzyb, 6) == 6665\n    assert candidate(ff, ff, 4) == 1\n    assert candidate(ubagdasws, aswsubagd, 9) == 14913081\n    assert candidate(aaaaa, aaaaa, 10) == 1048576\n    assert candidate(iiiiiiiiii, iiiiiiiiii, 4) == 6561\n    assert candidate(nnjqjmgome, gbfuecwlqc, 359221508193514) == 0\n    assert candidate(slmzyj, slmzyj, 4) == 105\n    assert candidate(vfyxl, vfyxl, 10) == 209716\n    assert candidate(sxzfvsxzfv, vsxzfvsxzf, 2) == 16\n    assert candidate(kalt, ltka, 7) == 547\n    assert candidate(jj, jj, 7) == 1\n    assert candidate(bcriunp, criunpb, 2) == 5\n    assert candidate(rutmzyj, zyjrutm, 6) == 6665\n    assert candidate(vvvvv, vvvvv, 3) == 64\n    assert candidate(hlld, hlld, 9) == 4920\n    assert candidate(kctcsgswa, qfyyjeohe, 966836940319300) == 0\n    assert candidate(otwqxmpktt, totwqxmpkt, 7) == 478297\n    assert candidate(kkkkkkk, kkkkkkk, 7) == 279936\n    assert candidate(iyl, iyl, 6) == 22\n    assert candidate(glao, ogla, 10) == 14762\n    assert candidate(jp, jp, 8) == 1\n    assert candidate(uuuuuu, uuuuuu, 7) == 78125\n    assert candidate(achach, achach, 10) == 3255209\n    assert candidate(uuuuuuuu, uuuuuuuu, 7) == 823543\n    assert candidate(gjh, jhg, 9) == 171\n    assert candidate(cliuw, fphcn, 647756904366432) == 0\n    assert candidate(zmcum, mzmcu, 1) == 1\n    assert candidate(ll, ll, 5) == 1\n    assert candidate(ccccc, ccccc, 1) == 4\n    assert candidate(rrrr, rrrr, 1) == 3\n    assert candidate(ih, hi, 8) == 0\n    assert candidate(qfgihqrw, rwqfgihq, 8) == 720600\n    assert candidate(cd, cd, 2) == 1\n    assert candidate(oooooooooo, oooooooooo, 4) == 6561\n    assert candidate(wp, wp, 6) == 1\n    assert candidate(rqq, nln, 776508964349618) == 0\n    assert candidate(rr, rr, 9) == 1\n    assert candidate(knwppsd, psdknwp, 2) == 5\n    assert candidate(epfeepfe, feepfeep, 9) == 10088402\n    assert candidate(wwwww, wwwww, 9) == 262144\n    assert candidate(cdcdcdcd, cdcdcdcd, 6) == 58825\n    assert candidate(uphfr, fruph, 7) == 3277\n    assert candidate(cocococo, cocococo, 3) == 171\n    assert candidate(vhzjo, jovhz, 1) == 1\n    assert candidate(bbbbbbbbbb, bbbbbbbbbb, 1) == 9\n    assert candidate(pgnrstuh, yjzhldlg, 618648276258027) == 0\n    assert candidate(cccccc, cccccc, 5) == 3125\n    assert candidate(kkkkkkk, kkkkkkk, 3) == 216\n    assert candidate(lxqqzsvej, svejlxqqz, 3) == 57\n    assert candidate(lllll, lllll, 3) == 64\n    assert candidate(hhhhhhhhhh, hhhhhhhhhh, 8) == 43046721\n    assert candidate(gggg, gggg, 5) == 243\n    assert candidate(jj, jj, 6) == 1\n    assert candidate(uuuuuuuuu, uuuuuuuuu, 10) == 73741817\n    assert candidate(qvx, vxq, 8) == 85\n    assert candidate(nolnqlgqcs, jkguybcfcu, 179216079747558) == 0\n    assert candidate(xpk, xpk, 6) == 22\n    assert candidate(xzoyb, bxzoy, 5) == 205\n    assert candidate(krxjvvg, krxjvvg, 2) == 6\n    assert candidate(ks, sk, 2) == 0\n    assert candidate(ty, ty, 6) == 1\n    assert candidate(otototot, totototo, 7) == 411772\n    assert candidate(uoaowbdznp, npuoaowbdz, 10) == 348678440\n\ndef test_check():\n    check(numberOfWays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3025_minOperations", "language": "py", "prompt": "from typing import List\n\ndef minOperations(nums: List[int], target: int) -> int:\n    \"\"\"You are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target.\nIn one operation, you must apply the following changes to the array:\n * Choose any element of the array nums[i] such that nums[i] > 1.\n * Remove nums[i] from the array.\n * Add two occurrences of nums[i] / 2 to the end of nums.\nReturn the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nInput: nums = [1,2,8], target = 7\nOutput: 1\nExplanation: In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7.\nExample 2:\nInput: nums = [1,32,1,2], target = 12\nOutput: 2\nExplanation: In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12.\nExample 3:\nInput: nums = [1,32,1], target = 35\nOutput: -1\nExplanation: It can be shown that no sequence of operations results in a subsequence that sums up to 35.\nConstraints:\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 230\n * nums consists only of non-negative powers of two.\n * 1 <= target < 231\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3025_minOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 8], 7) == 1\n    assert candidate([1, 32, 1, 2], 12) == 2\n    assert candidate([1, 32, 1], 35) == -1\n    assert candidate([1], 1) == 0\n    assert candidate([16, 128, 32], 1) == 4\n    assert candidate([1, 1], 2) == 0\n    assert candidate([64, 128, 128], 2) == 5\n    assert candidate([2], 2) == 0\n    assert candidate([32, 256, 4], 2) == 1\n    assert candidate([1, 1, 1], 3) == 0\n    assert candidate([1, 256, 16, 128], 3) == 3\n    assert candidate([1, 2], 3) == 0\n    assert candidate([16, 16, 4], 3) == 2\n    assert candidate([1, 1, 1, 1], 4) == 0\n    assert candidate([128, 1, 128, 1, 64], 4) == 4\n    assert candidate([2, 1, 1], 4) == 0\n    assert candidate([8, 2, 64, 32], 4) == 1\n    assert candidate([16, 128, 8, 1, 1], 4) == 1\n    assert candidate([1, 2, 1], 4) == 0\n    assert candidate([128, 8, 8, 2], 4) == 1\n    assert candidate([2, 2], 4) == 0\n    assert candidate([128, 32, 16], 4) == 2\n    assert candidate([4], 4) == 0\n    assert candidate([128, 32, 256], 4) == 3\n    assert candidate([1, 1, 1, 1, 1], 5) == 0\n    assert candidate([1, 1, 128, 256, 1, 16], 5) == 2\n    assert candidate([2, 1, 1, 1], 5) == 0\n    assert candidate([32, 1, 8, 1, 64], 5) == 1\n    assert candidate([128, 256, 32, 1, 1, 1], 5) == 3\n    assert candidate([1, 1, 2, 1], 5) == 0\n    assert candidate([16, 16, 1, 1, 128], 5) == 2\n    assert candidate([2, 2, 1], 5) == 0\n    assert candidate([64, 32, 2, 8], 5) == 2\n    assert candidate([1, 4], 5) == 0\n    assert candidate([8, 64, 128], 5) == 3\n    assert candidate([1, 1, 1, 1, 1, 1], 6) == 0\n    assert candidate([128, 1, 256, 1, 1, 1, 32], 6) == 3\n    assert candidate([1, 1, 1, 1, 2], 6) == 0\n    assert candidate([1, 256, 1, 1, 8, 64], 6) == 1\n    assert candidate([1, 128, 1, 128, 1, 8, 1], 6) == 1\n    assert candidate([1, 1, 1, 2, 1], 6) == 0\n    assert candidate([64, 1, 16, 1, 1, 64], 6) == 2\n    assert candidate([2, 1, 2, 1], 6) == 0\n    assert candidate([2, 1, 8, 64, 64], 6) == 1\n    assert candidate([4, 1, 1], 6) == 0\n    assert candidate([16, 64, 4, 128], 6) == 3\n    assert candidate([1, 1, 1, 8, 128, 1, 8], 6) == 1\n    assert candidate([1, 2, 1, 1, 1], 6) == 0\n    assert candidate([64, 128, 1, 32, 1, 2], 6) == 3\n    assert candidate([1, 1, 1, 256, 1, 8, 64], 6) == 1\n    assert candidate([1, 128, 1, 256, 32, 1], 6) == 3\n    assert candidate([1, 2, 1, 2], 6) == 0\n    assert candidate([256, 2, 32, 32, 1], 6) == 3\n    assert candidate([1, 16, 1, 1, 1, 16, 256], 6) == 2\n    assert candidate([1, 1, 2, 1, 1], 6) == 0\n    assert candidate([1, 1, 64, 8, 16, 1], 6) == 1\n    assert candidate([1, 16, 128, 1, 1, 32, 1], 6) == 2\n    assert candidate([128, 1, 1, 1, 64, 32], 6) == 3\n    assert candidate([64, 16, 16, 1, 1], 6) == 2\n    assert candidate([32, 1, 1, 32, 1, 64, 1], 6) == 3\n    assert candidate([8, 64, 2, 1, 1, 8], 6) == 1\n    assert candidate([1, 1, 256, 1, 64, 1, 128], 6) == 4\n    assert candidate([1, 1, 64, 64, 32, 2], 6) == 3\n    assert candidate([2, 32, 128, 1, 64], 6) == 3\n    assert candidate([2, 2, 2], 6) == 0\n    assert candidate([64, 8, 2, 128], 6) == 1\n    assert candidate([4, 2], 6) == 0\n    assert candidate([8, 8, 16], 6) == 2\n    assert candidate([1, 1, 1, 1, 1, 1, 1], 7) == 0\n    assert candidate([1, 1, 1, 1, 128, 1, 64, 8], 7) == 1\n    assert candidate([2, 1, 1, 1, 1, 1], 7) == 0\n    assert candidate([1, 2, 64, 32, 16, 1, 1], 7) == 2\n    assert candidate([1, 1, 1, 16, 128, 256, 1, 1], 7) == 2\n    assert candidate([1, 1, 1, 2, 1, 1], 7) == 0\n    assert candidate([2, 8, 8, 1, 128, 1, 1], 7) == 1\n    assert candidate([1, 2, 1, 1, 2], 7) == 0\n    assert candidate([32, 1, 2, 1, 256, 128], 7) == 3\n    assert candidate([1, 1, 1, 4], 7) == 0\n    assert candidate([1, 8, 256, 32, 1], 7) == 2\n    assert candidate([64, 1, 1, 1, 16, 1, 64, 1], 7) == 2\n    assert candidate([1, 1, 1, 1, 2, 1], 7) == 0\n    assert candidate([1, 256, 1, 8, 1, 2, 16], 7) == 1\n    assert candidate([32, 1, 1, 1, 32, 32, 1, 1], 7) == 3\n    assert candidate([1, 2, 1, 1, 1, 1], 7) == 0\n    assert candidate([64, 1, 32, 256, 1, 1, 1], 7) == 3\n    assert candidate([2, 1, 2, 1, 1], 7) == 0\n    assert candidate([2, 32, 32, 32, 2, 1], 7) == 3\n    assert candidate([1, 1, 8, 1, 1, 64, 1, 128], 7) == 1\n    assert candidate([1, 1, 1, 1, 1, 2], 7) == 0\n    assert candidate([64, 128, 2, 128, 1, 1, 1], 7) == 4\n    assert candidate([1, 1, 1, 128, 8, 32, 1, 1], 7) == 1\n    assert candidate([64, 256, 1, 1, 1, 32, 2], 7) == 3\n    assert candidate([1, 2, 2, 1, 1], 7) == 0\n    assert candidate([1, 256, 64, 2, 1, 128], 7) == 4\n    assert candidate([256, 1, 1, 1, 64, 1, 1, 64], 7) == 4\n    assert candidate([2, 1, 8, 256, 1, 128, 1], 7) == 1\n    assert candidate([1, 1, 16, 1, 1, 256, 1, 128], 7) == 2\n    assert candidate([1, 8, 128, 1, 1, 1, 256], 7) == 1\n    assert candidate([2, 2, 1, 1, 1], 7) == 0\n    assert candidate([64, 2, 64, 1, 32, 1], 7) == 3\n\ndef test_check():\n    check(minOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3026_minimumPossibleSum", "language": "py", "prompt": "def minimumPossibleSum(n: int, target: int) -> int:\n    \"\"\"You are given positive integers n and target.\nAn array nums is beautiful if it meets the following conditions:\n * nums.length == n.\n * nums consists of pairwise distinct positive integers.\n * There doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.\nReturn the minimum possible sum that a beautiful array could have modulo 109 + 7.\nExample 1:\nInput: n = 2, target = 3\nOutput: 4\nExplanation: We can see that nums = [1,3] is beautiful.\n- The array nums has length n = 2.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 4 is the minimum possible sum that a beautiful array could have.\nExample 2:\nInput: n = 3, target = 3\nOutput: 8\nExplanation: We can see that nums = [1,3,4] is beautiful.\n- The array nums has length n = 3.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 8 is the minimum possible sum that a beautiful array could have.\nExample 3:\nInput: n = 1, target = 1\nOutput: 1\nExplanation: We can see, that nums = [1] is beautiful.\nConstraints:\n * 1 <= n <= 109\n * 1 <= target <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3026_minimumPossibleSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(2, 3) == 4\n    assert candidate(3, 3) == 8\n    assert candidate(1, 1) == 1\n    assert candidate(16, 6) == 162\n    assert candidate(16, 32) == 136\n    assert candidate(13, 50) == 91\n    assert candidate(36, 21) == 926\n    assert candidate(40, 17) == 1076\n    assert candidate(37, 46) == 1011\n    assert candidate(33, 7) == 651\n    assert candidate(42, 46) == 1321\n    assert candidate(46, 29) == 1529\n    assert candidate(9, 43) == 45\n    assert candidate(30, 31) == 690\n    assert candidate(14, 47) == 105\n    assert candidate(5, 3) == 19\n    assert candidate(41, 23) == 1191\n    assert candidate(17, 13) == 219\n    assert candidate(9, 13) == 63\n    assert candidate(29, 18) == 595\n    assert candidate(21, 14) == 315\n    assert candidate(4, 6) == 12\n    assert candidate(38, 15) == 958\n    assert candidate(14, 7) == 138\n    assert candidate(18, 26) == 231\n    assert candidate(11, 15) == 94\n    assert candidate(7, 8) == 37\n    assert candidate(11, 22) == 66\n    assert candidate(36, 11) == 821\n    assert candidate(18, 29) == 227\n    assert candidate(26, 17) == 495\n    assert candidate(37, 13) == 889\n    assert candidate(46, 38) == 1567\n    assert candidate(13, 7) == 121\n    assert candidate(33, 34) == 817\n    assert candidate(39, 12) == 945\n    assert candidate(1, 45) == 1\n    assert candidate(37, 36) == 1026\n    assert candidate(16, 19) == 199\n    assert candidate(22, 15) == 358\n    assert candidate(34, 42) == 855\n    assert candidate(50, 22) == 1665\n    assert candidate(42, 44) == 1323\n    assert candidate(40, 8) == 928\n    assert candidate(7, 19) == 28\n    assert candidate(44, 10) == 1146\n    assert candidate(21, 6) == 267\n    assert candidate(27, 26) == 546\n    assert candidate(49, 4) == 1272\n    assert candidate(35, 2) == 630\n    assert candidate(32, 29) == 780\n    assert candidate(20, 41) == 210\n    assert candidate(30, 48) == 603\n    assert candidate(12, 34) == 78\n    assert candidate(50, 44) == 1863\n    assert candidate(42, 26) == 1251\n    assert candidate(3, 18) == 6\n    assert candidate(11, 3) == 76\n    assert candidate(38, 29) == 1077\n    assert candidate(17, 24) == 208\n    assert candidate(50, 31) == 1800\n    assert candidate(32, 41) == 768\n    assert candidate(12, 24) == 78\n    assert candidate(35, 43) == 924\n    assert candidate(9, 47) == 45\n    assert candidate(32, 26) == 756\n    assert candidate(6, 42) == 21\n    assert candidate(11, 1) == 66\n    assert candidate(11, 24) == 66\n    assert candidate(39, 38) == 1140\n    assert candidate(18, 8) == 213\n    assert candidate(29, 5) == 489\n    assert candidate(44, 6) == 1072\n    assert candidate(29, 30) == 631\n    assert candidate(13, 47) == 91\n    assert candidate(46, 21) == 1441\n    assert candidate(46, 6) == 1167\n    assert candidate(27, 30) == 546\n    assert candidate(5, 35) == 15\n    assert candidate(12, 32) == 78\n    assert candidate(13, 39) == 91\n    assert candidate(10, 11) == 80\n    assert candidate(46, 14) == 1315\n    assert candidate(37, 18) == 927\n    assert candidate(32, 8) == 612\n    assert candidate(26, 14) == 465\n    assert candidate(33, 41) == 821\n    assert candidate(44, 39) == 1465\n    assert candidate(3, 21) == 6\n    assert candidate(9, 11) == 65\n    assert candidate(16, 43) == 136\n    assert candidate(7, 22) == 28\n    assert candidate(21, 49) == 231\n    assert candidate(23, 16) == 381\n    assert candidate(33, 32) == 816\n    assert candidate(22, 1) == 253\n    assert candidate(5, 47) == 15\n    assert candidate(38, 7) == 846\n    assert candidate(38, 24) == 1027\n    assert candidate(13, 36) == 91\n\ndef test_check():\n    check(minimumPossibleSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3031_constructProductMatrix", "language": "py", "prompt": "from typing import List\n\ndef constructProductMatrix(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"    Given a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met:\n* Each element p[i][j] is calculated as the product of all elements in grid except for the element grid[i][j]. This product is then taken modulo 12345.\n    Return the product matrix of grid.\n    Example 1:\n    Input: grid = [[1,2],[3,4]]\n    Output: [[24,12],[8,6]]\n    Explanation: p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\n    p[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\n    p[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\n    p[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\n    So the answer is [[24,12],[8,6]].\n    Example 2:\n    Input: grid = [[12345],[2],[1]]\n    Output: [[2],[0],[0]]\n    Explanation: p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\n    p[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\n    p[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\n    So the answer is [[2],[0],[0]].\n    Constraints:\n* 1 <= n == grid.length\u00a0<= 105\n* 1 <= m == grid[i].length\u00a0<= 105\n* 2 <= n * m <= 105\n* 1 <= grid[i][j] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3031_constructProductMatrix.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[1, 2], [3, 4]]) == [[24, 12], [8, 6]]\n    assert candidate([[12345], [2], [1]]) == [[2], [0], [0]]\n    assert candidate([[1], [2]]) == [[2], [1]]\n    assert candidate([[1, 2]]) == [[2, 1]]\n    assert candidate([[12345, 12345]]) == [[0, 0]]\n    assert candidate([[1], [4]]) == [[4], [1]]\n    assert candidate([[3], [4]]) == [[4], [3]]\n    assert candidate([[4], [3]]) == [[3], [4]]\n    assert candidate([[1, 1, 1]]) == [[1, 1, 1]]\n    assert candidate([[2, 1, 1]]) == [[1, 2, 2]]\n    assert candidate([[3], [5], [2]]) == [[10], [6], [15]]\n    assert candidate([[1, 2], [1, 1], [6, 4]]) == [[48, 24], [48, 48], [8, 12]]\n    assert candidate([[1, 2, 2], [1, 4, 3]]) == [[48, 24, 24], [48, 12, 16]]\n    assert candidate([[2], [7], [2], [6]]) == [[84], [24], [84], [28]]\n    assert candidate([[3], [4], [7], [7]]) == [[196], [147], [84], [84]]\n    assert candidate([[3, 1, 1], [1, 3, 4]]) == [[12, 36, 36], [36, 12, 9]]\n    assert candidate([[4], [8], [3], [7]]) == [[168], [84], [224], [96]]\n    assert candidate([[5], [8], [8], [3]]) == [[192], [120], [120], [320]]\n    assert candidate([[6], [5], [8], [5]]) == [[200], [240], [150], [240]]\n    assert candidate([[8], [1], [3], [8]]) == [[24], [192], [64], [24]]\n    assert candidate([[1], [10], [3], [10], [9]]) == [[2700], [270], [900], [270], [300]]\n    assert candidate([[1, 1, 1, 1, 1]]) == [[1, 1, 1, 1, 1]]\n    assert candidate([[1, 1, 2, 2, 1]]) == [[4, 4, 2, 2, 4]]\n    assert candidate([[1, 2, 3], [3, 3, 5], [3, 4, 2]]) == [[6480, 3240, 2160], [2160, 2160, 1296], [2160, 1620, 3240]]\n    assert candidate([[2], [7], [5], [3], [4]]) == [[420], [120], [168], [280], [210]]\n    assert candidate([[2, 2, 2, 2, 1]]) == [[8, 8, 8, 8, 16]]\n    assert candidate([[2, 2, 4, 4], [3, 2, 1, 4]]) == [[768, 768, 384, 384], [512, 768, 1536, 384]]\n    assert candidate([[2, 4, 1, 1], [3, 4, 4, 1]]) == [[192, 96, 384, 384], [128, 96, 96, 384]]\n    assert candidate([[3, 1, 1, 4], [1, 4, 1, 1]]) == [[16, 48, 48, 12], [48, 12, 48, 48]]\n    assert candidate([[3, 2, 5], [6, 4, 3], [6, 3, 1]]) == [[615, 7095, 7776], [6480, 9720, 615], [6480, 615, 1845]]\n    assert candidate([[5, 5, 5], [4, 3, 1], [4, 5, 1]]) == [[6000, 6000, 6000], [7500, 10000, 5310], [7500, 6000, 5310]]\n    assert candidate([[6, 3], [1, 5], [2, 7], [6, 5]]) == [[6300, 255], [765, 7560], [6555, 5400], [6300, 7560]]\n    assert candidate([[6, 3, 2], [2, 3, 1], [5, 5, 4]]) == [[3600, 7200, 10800], [10800, 7200, 9255], [4320, 4320, 5400]]\n    assert candidate([[6, 5, 3], [4, 4, 5], [3, 2, 5]]) == [[11310, 6165, 10275], [4620, 4620, 6165], [10275, 9240, 6165]]\n    assert candidate([[8], [5], [5], [9], [8]]) == [[1800], [2880], [2880], [1600], [1800]]\n    assert candidate([[10], [5], [6], [8], [6]]) == [[1440], [2880], [2400], [1800], [2400]]\n    assert candidate([[10], [9], [3], [4], [3]]) == [[324], [360], [1080], [810], [1080]]\n    assert candidate([[1, 1, 1, 2, 2, 1]]) == [[4, 4, 4, 2, 2, 4]]\n    assert candidate([[1, 1, 2, 1, 2, 1]]) == [[4, 4, 2, 4, 2, 4]]\n    assert candidate([[1, 1, 2, 1, 2, 2]]) == [[8, 8, 4, 8, 4, 4]]\n    assert candidate([[1, 1, 2, 2, 1, 2]]) == [[8, 8, 4, 4, 8, 4]]\n    assert candidate([[1, 1, 2, 2, 2, 2]]) == [[16, 16, 8, 8, 8, 8]]\n    assert candidate([[1, 1, 3, 3], [3, 4, 4, 2], [6, 6, 3, 4]]) == [[2898, 2898, 966, 966], [966, 6897, 6897, 1449], [483, 483, 966, 6897]]\n    assert candidate([[1, 2, 1, 1, 1, 2]]) == [[4, 2, 4, 4, 4, 2]]\n    assert candidate([[1, 2, 1, 1, 2, 2]]) == [[8, 4, 8, 8, 4, 4]]\n    assert candidate([[1, 2, 2, 4, 3], [3, 4, 1, 4, 2]]) == [[4608, 2304, 2304, 1152, 1536], [1536, 1152, 4608, 1152, 2304]]\n    assert candidate([[1, 3, 1, 3, 1], [2, 1, 3, 2, 3]]) == [[324, 108, 324, 108, 324], [162, 324, 108, 162, 108]]\n    assert candidate([[1, 3, 3, 3, 4], [2, 2, 1, 4, 4]]) == [[6912, 2304, 2304, 2304, 1728], [3456, 3456, 6912, 1728, 1728]]\n    assert candidate([[1, 4, 5], [1, 3, 2], [7, 2, 6], [6, 2, 2]]) == [[7365, 11100, 11349], [7365, 6570, 9855], [9870, 9855, 3285], [3285, 9855, 9855]]\n    assert candidate([[1, 6, 6, 4], [4, 1, 2, 5], [5, 4, 6, 2]]) == [[12105, 8190, 8190, 12285], [12285, 12105, 12225, 4890], [4890, 12285, 8190, 12225]]\n    assert candidate([[2, 1, 3, 2, 1], [3, 1, 3, 1, 2]]) == [[108, 216, 72, 108, 216], [72, 216, 72, 216, 108]]\n    assert candidate([[2, 2, 2, 1, 1, 1]]) == [[4, 4, 4, 8, 8, 8]]\n    assert candidate([[2, 2, 2, 2, 1, 2]]) == [[16, 16, 16, 16, 32, 16]]\n    assert candidate([[2, 2, 3, 2, 3], [3, 1, 3, 2, 4]]) == [[2592, 2592, 1728, 2592, 1728], [1728, 5184, 1728, 2592, 1296]]\n    assert candidate([[2, 3, 4], [2, 4, 2], [1, 8, 1], [8, 8, 8]]) == [[8697, 5798, 10521], [8697, 10521, 8697], [5049, 11433, 5049], [11433, 11433, 11433]]\n    assert candidate([[2, 4, 4, 5], [5, 5, 1, 4], [4, 2, 2, 5]]) == [[10405, 11375, 11375, 9100], [9100, 9100, 8465, 11375], [11375, 10405, 10405, 9100]]\n    assert candidate([[3, 4, 1, 1], [3, 1, 4, 4], [1, 5, 1, 5]]) == [[4800, 3600, 2055, 2055], [4800, 2055, 3600, 3600], [2055, 2880, 2055, 2880]]\n    assert candidate([[3, 4, 6, 3], [4, 5, 4, 4], [5, 2, 6, 3]]) == [[11625, 11805, 11985, 11625], [11805, 6975, 11805, 11805], [6975, 11265, 11985, 11625]]\n    assert candidate([[4, 1, 4, 4, 4], [2, 2, 2, 3, 3]]) == [[4608, 6087, 4608, 4608, 4608], [9216, 9216, 9216, 6144, 6144]]\n    assert candidate([[4, 8, 8], [6, 2, 5], [7, 3, 7], [6, 3, 5]]) == [[3525, 7935, 7935], [6465, 7050, 2820], [7305, 585, 7305], [6465, 585, 2820]]\n    assert candidate([[6], [8], [2], [12], [6], [4]]) == [[4608], [3456], [1479], [2304], [4608], [6912]]\n    assert candidate([[6, 2, 5, 2], [5, 5, 2, 3], [4, 6, 5, 2]]) == [[3990, 11970, 12195, 11970], [12195, 12195, 11970, 7980], [5985, 3990, 12195, 11970]]\n    assert candidate([[6, 3, 4, 3], [6, 4, 2, 5], [3, 3, 6, 1]]) == [[9795, 7245, 8520, 7245], [9795, 8520, 4695, 4347], [7245, 7245, 9795, 9390]]\n    assert candidate([[6, 5, 6, 6], [3, 2, 6, 4], [1, 3, 4, 1]]) == [[2415, 2898, 2415, 2415], [4830, 7245, 2415, 9795], [2145, 4830, 9795, 2145]]\n    assert candidate([[7], [11], [12], [7], [12], [7]]) == [[3546], [12], [8241], [3546], [8241], [3546]]\n    assert candidate([[7, 4, 5], [2, 1, 2], [5, 3, 8], [3, 6, 7]]) == [[12135, 5805, 2175], [11610, 10875, 11610], [2175, 7740, 9075], [7740, 3870, 12135]]\n    assert candidate([[8], [6], [7], [2], [7], [4]]) == [[2352], [3136], [2688], [9408], [2688], [4704]]\n    assert candidate([[8], [6], [7], [5], [3], [6]]) == [[3780], [5040], [4320], [6048], [10080], [5040]]\n    assert candidate([[8, 1], [9, 6], [2, 4], [1, 3], [3, 6]]) == [[10983, 1449], [8391, 6414], [6897, 9621], [1449, 483], [483, 6414]]\n    assert candidate([[8, 4, 3], [7, 7, 4], [1, 2, 3], [5, 2, 4]]) == [[8955, 5565, 11535], [3180, 3180, 5565], [9915, 11130, 11535], [1983, 11130, 5565]]\n    assert candidate([[12], [8], [4], [3], [9], [5]]) == [[4320], [6480], [615], [4935], [5760], [10368]]\n    assert candidate([[1, 1, 1, 1, 2, 2, 2]]) == [[8, 8, 8, 8, 4, 4, 4]]\n    assert candidate([[1, 1, 1, 2, 1, 1, 1]]) == [[2, 2, 2, 1, 2, 2, 2]]\n    assert candidate([[1, 1, 2, 1, 2, 1, 2]]) == [[8, 8, 4, 8, 4, 8, 4]]\n    assert candidate([[1, 1, 6, 5, 6], [1, 6, 6, 2, 5], [3, 4, 1, 1, 4]]) == [[11805, 11805, 12255, 4830, 12255], [11805, 12255, 12255, 12075, 4830], [12165, 12210, 11805, 11805, 12210]]\n    assert candidate([[1, 2, 1, 1, 1, 2, 2]]) == [[8, 4, 8, 8, 8, 4, 4]]\n    assert candidate([[1, 2, 1, 2, 2, 1, 1]]) == [[8, 4, 8, 4, 4, 8, 8]]\n    assert candidate([[1, 3, 1, 2, 1, 2], [3, 2, 3, 4, 2, 3]]) == [[5184, 1728, 5184, 2592, 5184, 2592], [1728, 2592, 1728, 1296, 2592, 1728]]\n    assert candidate([[1, 3, 5, 2], [1, 3, 6, 5], [8, 1, 2, 7], [6, 2, 3, 5]]) == [[2895, 9195, 10455, 7620], [2895, 9195, 10770, 10455], [1905, 2895, 7620, 10995], [10770, 7620, 9195, 10455]]\n    assert candidate([[1, 4, 4, 4, 3, 3], [1, 1, 3, 4, 4, 1]]) == [[2958, 6912, 6912, 6912, 9216, 9216], [2958, 2958, 9216, 6912, 6912, 2958]]\n    assert candidate([[1, 5, 5, 6], [4, 7, 6, 1], [2, 3, 3, 6], [3, 6, 3, 7]]) == [[6570, 11190, 11190, 1095], [7815, 11520, 1095, 6570], [3285, 2190, 2190, 1095], [2190, 1095, 2190, 11520]]\n    assert candidate([[1, 6, 4, 4, 1], [6, 2, 5, 1, 4], [6, 4, 3, 5, 6]]) == [[3705, 10905, 10185, 10185, 3705], [10905, 8025, 3210, 3705, 10185], [10905, 10185, 9465, 3210, 10905]]\n    assert candidate([[1, 7, 2, 8], [3, 7, 2, 5], [2, 3, 5, 6], [5, 4, 2, 7]]) == [[4065, 7635, 8205, 11310], [9585, 7635, 8205, 8220], [8205, 9585, 8220, 10965], [8220, 10275, 8205, 7635]]\n    assert candidate([[2, 1, 1, 1, 1, 2, 2]]) == [[4, 8, 8, 8, 8, 4, 4]]\n    assert candidate([[2, 1, 1, 1, 2, 2, 1]]) == [[4, 8, 8, 8, 4, 4, 8]]\n    assert candidate([[2, 1, 2, 2, 2, 2, 2]]) == [[32, 64, 32, 32, 32, 32, 32]]\n    assert candidate([[2, 1, 3, 2, 4, 4], [1, 3, 2, 2, 4, 1]]) == [[4608, 9216, 3072, 4608, 2304, 2304], [9216, 3072, 4608, 4608, 2304, 9216]]\n    assert candidate([[2, 2, 2, 2, 1, 2, 1]]) == [[16, 16, 16, 16, 32, 16, 32]]\n    assert candidate([[2, 4, 3, 3, 3, 4], [3, 1, 4, 3, 4, 2]]) == [[966, 483, 8874, 8874, 8874, 483], [8874, 1932, 483, 8874, 483, 966]]\n    assert candidate([[2, 5, 4, 8], [4, 6, 3, 3], [1, 5, 1, 4], [8, 6, 6, 5]]) == [[30, 4950, 15, 6180], [15, 4125, 8250, 8250], [60, 4950, 60, 15], [6180, 4125, 4125, 4950]]\n    assert candidate([[2, 7], [10, 12], [2, 4], [8, 11], [2, 12], [11, 2]]) == [[8340, 5910], [6606, 5505], [8340, 4170], [2085, 8250], [8340, 5505], [8250, 8340]]\n    assert candidate([[2, 9], [1, 4], [10, 12], [2, 7], [4, 10], [10, 8]]) == [[3435, 10365], [6870, 7890], [5625, 10860], [3435, 2745], [7890, 5625], [5625, 3945]]\n    assert candidate([[3], [9], [5], [1], [4], [14], [12]]) == [[5550], [10080], [5799], [4305], [10335], [6480], [7560]]\n    assert candidate([[3, 2, 2, 2, 4, 3], [4, 1, 3, 1, 1, 2]]) == [[2304, 3456, 3456, 3456, 1728, 2304], [1728, 6912, 2304, 6912, 6912, 3456]]\n    assert candidate([[3, 2, 4, 2, 2, 3], [2, 2, 4, 1, 2, 3]]) == [[9216, 1479, 6912, 1479, 1479, 9216], [1479, 1479, 6912, 2958, 1479, 9216]]\n    assert candidate([[3, 6, 2, 2, 5], [1, 4, 3, 4, 1], [4, 5, 2, 4, 4]]) == [[7590, 3795, 11385, 11385, 2085], [10425, 11865, 7590, 11865, 10425], [11865, 2085, 11385, 11865, 11865]]\n    assert candidate([[4, 1, 5, 4, 5], [6, 5, 3, 4, 4], [3, 2, 6, 2, 3]]) == [[6945, 3090, 8025, 6945, 8025], [8745, 8025, 5145, 6945, 6945], [5145, 1545, 8745, 1545, 5145]]\n    assert candidate([[4, 3, 9], [3, 9, 10], [9, 7, 8], [8, 4, 7], [6, 1, 3]]) == [[3255, 225, 75], [225, 75, 11178], [75, 1860, 7800], [7800, 3255, 1860], [6285, 675, 225]]\n    assert candidate([[5, 1, 1, 1, 5], [3, 4, 2, 6, 6], [3, 3, 2, 5, 1]]) == [[6105, 5835, 5835, 5835, 6105], [6060, 4545, 9090, 3030, 3030], [6060, 6060, 9090, 6105, 5835]]\n    assert candidate([[5, 3], [9, 2], [2, 6], [4, 9], [12, 2], [10, 4]]) == [[1050, 5865], [10185, 2625], [2625, 9105], [7485, 10185], [10725, 2625], [525, 7485]]\n\ndef test_check():\n    check(constructProductMatrix)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3032_getMaxFunctionValue", "language": "py", "prompt": "from typing import List\n\ndef getMaxFunctionValue(receiver: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array receiver of length n and an integer k.\nThere are n players having a unique id in the range [0, n - 1] who will play a ball passing game, and receiver[i] is the id of the player who receives passes from the player with id i. Players can pass to themselves, i.e. receiver[i] may be equal to i.\nYou must choose one of the n players as the starting player for the game, and the ball will be passed exactly k times starting from the chosen player.\nFor a chosen starting player having id x, we define a function f(x) that denotes the sum of x and the ids of all players who receive the ball during the k passes, including repetitions. In other words, f(x) = x + receiver[x] + receiver[receiver[x]] + ... + receiver(k)[x].\nYour task is to choose a starting player having id x that maximizes the value of f(x).\nReturn an integer denoting the maximum value of the function.\nNote: receiver may contain duplicates.\nExample 1:\nPass Number Sender ID Receiver ID x + Receiver IDs \u00a0 \u00a0 \u00a0 2 1 2 1 3 2 1 0 3 3 0 2 5 4 2 1 6\nInput: receiver = [2,0,1], k = 4\nOutput: 6\nExplanation: The table above shows a simulation of the game starting with the player having id x = 2.\nFrom the table, f(2) is equal to 6.\nIt can be shown that 6 is the maximum achievable value of the function.\nHence, the output is 6.\nExample 2:\nPass Number Sender ID Receiver ID x + Receiver IDs \u00a0 \u00a0 \u00a0 4 1 4 3 7 2 3 2 9 3 2 1 10\nInput: receiver = [1,1,1,2,3], k = 3\nOutput: 10\nExplanation: The table above shows a simulation of the game starting with the player having id x = 4.\nFrom the table, f(4) is equal to 10.\nIt can be shown that 10 is the maximum achievable value of the function.\nHence, the output is 10.\nConstraints:\n * 1 <= receiver.length == n <= 105\n * 0 <= receiver[i] <= n - 1\n * 1 <= k <= 1010\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3032_getMaxFunctionValue.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 0, 1], 4) == 6\n    assert candidate([1, 1, 1, 2, 3], 3) == 10\n    assert candidate([0], 1) == 0\n    assert candidate([0], 2) == 0\n    assert candidate([0], 3) == 0\n    assert candidate([0], 100) == 0\n    assert candidate([0, 0], 1) == 1\n    assert candidate([0, 0], 7) == 1\n    assert candidate([0, 0], 10) == 1\n    assert candidate([0, 0], 13) == 1\n    assert candidate([0, 0], 16) == 1\n    assert candidate([0, 1], 1) == 2\n    assert candidate([0, 1], 3) == 4\n    assert candidate([0, 1], 5) == 6\n    assert candidate([0, 1], 8) == 9\n    assert candidate([0, 1], 13) == 14\n    assert candidate([0, 1], 14) == 15\n    assert candidate([0, 1], 15) == 16\n    assert candidate([1, 0], 5) == 3\n    assert candidate([1, 0], 6) == 4\n    assert candidate([1, 0], 7) == 4\n    assert candidate([1, 0], 10) == 6\n    assert candidate([1, 0], 12) == 7\n    assert candidate([1, 0], 14) == 8\n    assert candidate([1, 0], 57) == 29\n    assert candidate([1, 1], 1) == 2\n    assert candidate([1, 1], 2) == 3\n    assert candidate([1, 1], 7) == 8\n    assert candidate([0, 0, 0], 1) == 2\n    assert candidate([0, 0, 0], 4) == 2\n    assert candidate([0, 0, 0], 6) == 2\n    assert candidate([0, 0, 0], 10) == 2\n    assert candidate([0, 0, 1], 3) == 3\n    assert candidate([0, 0, 1], 9) == 3\n    assert candidate([0, 0, 2], 11) == 24\n    assert candidate([0, 0, 2], 14) == 30\n    assert candidate([0, 0, 2], 82) == 166\n    assert candidate([0, 1, 0], 5) == 6\n    assert candidate([0, 1, 1], 2) == 4\n    assert candidate([0, 1, 2], 3) == 8\n    assert candidate([0, 1, 2], 6) == 14\n    assert candidate([1, 0, 0], 6) == 5\n    assert candidate([1, 0, 1], 2) == 3\n    assert candidate([1, 0, 2], 10) == 22\n    assert candidate([1, 1, 1], 4) == 6\n    assert candidate([1, 1, 1], 6) == 8\n    assert candidate([1, 1, 2], 8) == 18\n    assert candidate([1, 2, 0], 3) == 5\n    assert candidate([1, 2, 0], 8) == 9\n    assert candidate([1, 2, 1], 6) == 11\n    assert candidate([1, 2, 2], 7) == 16\n    assert candidate([2, 0, 2], 6) == 14\n    assert candidate([2, 1, 0], 3) == 4\n    assert candidate([2, 1, 0], 8) == 10\n    assert candidate([2, 1, 0], 10) == 12\n    assert candidate([2, 1, 1], 4) == 6\n    assert candidate([2, 1, 2], 2) == 6\n    assert candidate([2, 1, 2], 15) == 32\n    assert candidate([2, 2, 0], 4) == 6\n    assert candidate([2, 2, 0], 9) == 11\n    assert candidate([2, 2, 1], 1) == 3\n    assert candidate([2, 2, 1], 10) == 17\n    assert candidate([2, 2, 2], 15) == 32\n    assert candidate([0, 0, 3, 0], 4) == 5\n    assert candidate([0, 1, 0, 1], 11) == 14\n    assert candidate([0, 1, 1, 3], 5) == 18\n    assert candidate([0, 2, 1, 3], 5) == 18\n    assert candidate([0, 2, 3, 1], 6) == 15\n    assert candidate([0, 2, 3, 3], 8) == 27\n    assert candidate([0, 2, 3, 3], 15) == 48\n    assert candidate([0, 3, 3, 0], 10) == 5\n    assert candidate([1, 0, 0, 2], 9) == 9\n    assert candidate([1, 0, 1, 2], 15) == 12\n    assert candidate([1, 0, 3, 1], 6) == 8\n    assert candidate([1, 0, 3, 2], 2) == 8\n    assert candidate([1, 1, 0, 0], 2) == 4\n    assert candidate([1, 1, 0, 3], 3) == 12\n    assert candidate([1, 1, 1, 3], 7) == 24\n    assert candidate([1, 2, 0, 0], 14) == 16\n    assert candidate([1, 2, 0, 1], 5) == 9\n    assert candidate([1, 2, 3, 1], 47) == 96\n    assert candidate([1, 3, 0, 1], 2) == 7\n    assert candidate([1, 3, 3, 0], 7) == 13\n    assert candidate([2, 0, 0, 1], 9) == 12\n    assert candidate([2, 0, 0, 2], 12) == 15\n    assert candidate([2, 0, 2, 0], 5) == 12\n    assert candidate([2, 1, 0, 0], 8) == 11\n    assert candidate([2, 1, 0, 1], 97) == 100\n    assert candidate([2, 2, 2, 0], 1) == 4\n    assert candidate([2, 2, 3, 2], 8) == 23\n    assert candidate([2, 3, 2, 1], 56) == 115\n    assert candidate([2, 3, 3, 1], 15) == 33\n    assert candidate([2, 3, 3, 3], 2) == 9\n    assert candidate([3, 0, 0, 1], 4) == 8\n    assert candidate([3, 0, 0, 2], 85) == 145\n    assert candidate([3, 0, 1, 3], 9) == 30\n    assert candidate([3, 1, 1, 2], 7) == 11\n    assert candidate([3, 1, 2, 0], 60) == 122\n    assert candidate([3, 2, 0, 3], 12) == 39\n    assert candidate([3, 3, 0, 1], 1) == 4\n\ndef test_check():\n    check(getMaxFunctionValue)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3034_numberOfPoints", "language": "py", "prompt": "from typing import List\n\ndef numberOfPoints(nums: List[List[int]]) -> int:\n    \"\"\"You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.\nReturn the number of integer points on the line that are covered with any part of a car.\nExample 1:\nInput: nums = [[3,6],[1,5],[4,7]]\nOutput: 7\nExplanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\nExample 2:\nInput: nums = [[1,3],[5,8]]\nOutput: 7\nExplanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\nConstraints:\n * 1 <= nums.length <= 100\n * nums[i].length == 2\n * 1 <= starti\u00a0<= endi\u00a0<= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3034_numberOfPoints.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[3, 6], [1, 5], [4, 7]]) == 7\n    assert candidate([[1, 3], [5, 8]]) == 7\n    assert candidate([[4, 4], [9, 10], [9, 10], [3, 8]]) == 8\n    assert candidate([[2, 5], [3, 8], [1, 6], [4, 10]]) == 10\n    assert candidate([[2, 3], [3, 9], [5, 7], [4, 10], [9, 10]]) == 9\n    assert candidate([[4, 10]]) == 7\n    assert candidate([[1, 9], [2, 10], [6, 7], [8, 9], [5, 8], [1, 3]]) == 10\n    assert candidate([[5, 10], [3, 8], [3, 9]]) == 8\n    assert candidate([[2, 3], [3, 10], [5, 8], [4, 8], [2, 7], [3, 4], [3, 10], [7, 8]]) == 9\n    assert candidate([[1, 3], [2, 4], [6, 6], [6, 9], [2, 10], [4, 10], [3, 6], [1, 4], [1, 3]]) == 10\n    assert candidate([[4, 10], [3, 9], [3, 5], [4, 10], [7, 10], [1, 7], [7, 9], [4, 8]]) == 10\n    assert candidate([[1, 6], [6, 7], [1, 6], [1, 3], [1, 8], [2, 9], [3, 8], [1, 9]]) == 9\n    assert candidate([[1, 6], [8, 10], [3, 7], [6, 10], [3, 10], [1, 10], [7, 8]]) == 10\n    assert candidate([[6, 8], [2, 8], [3, 9], [3, 5], [6, 10], [1, 2], [5, 5]]) == 10\n    assert candidate([[4, 5], [5, 9], [2, 3], [5, 10], [1, 9], [1, 8], [2, 9], [2, 10]]) == 10\n    assert candidate([[8, 9], [6, 7], [6, 9], [3, 5], [7, 10], [5, 9], [10, 10]]) == 8\n    assert candidate([[6, 8], [7, 10], [9, 10], [6, 10], [1, 10], [5, 10]]) == 10\n    assert candidate([[9, 9], [2, 8], [5, 8], [3, 5], [2, 2], [7, 9], [5, 10]]) == 9\n    assert candidate([[3, 9], [5, 9]]) == 7\n    assert candidate([[5, 10], [2, 3], [3, 10], [4, 7], [1, 9], [5, 10], [2, 6], [1, 7], [8, 9], [2, 9]]) == 10\n    assert candidate([[2, 3], [2, 3], [1, 5]]) == 5\n    assert candidate([[4, 7], [4, 7]]) == 4\n    assert candidate([[7, 9], [5, 9], [2, 10], [9, 9], [5, 8], [4, 6], [6, 7], [3, 9], [2, 4]]) == 9\n    assert candidate([[5, 9], [7, 7], [3, 10], [7, 9], [3, 4], [1, 1], [1, 1], [1, 7], [1, 2], [6, 6]]) == 10\n    assert candidate([[7, 8], [1, 7], [5, 5], [4, 4], [5, 8], [2, 6]]) == 8\n    assert candidate([[3, 5], [8, 8], [5, 10], [1, 7], [2, 6], [7, 10], [6, 6], [5, 9], [8, 9], [5, 6]]) == 10\n    assert candidate([[4, 9]]) == 6\n    assert candidate([[2, 7], [1, 9], [5, 6], [6, 8], [1, 10]]) == 10\n    assert candidate([[1, 4], [2, 4], [7, 10], [2, 8], [1, 6], [1, 10], [3, 5]]) == 10\n    assert candidate([[1, 4]]) == 4\n    assert candidate([[6, 9], [4, 7]]) == 6\n    assert candidate([[5, 7]]) == 3\n    assert candidate([[1, 9], [6, 8], [4, 7], [7, 9], [8, 9], [7, 9], [4, 6], [6, 8], [4, 9], [8, 8]]) == 9\n    assert candidate([[3, 6], [3, 5], [1, 9], [3, 4], [3, 8], [2, 7], [3, 8], [2, 8]]) == 9\n    assert candidate([[2, 5], [8, 8], [1, 6], [4, 4], [4, 5], [2, 4]]) == 7\n    assert candidate([[4, 7], [2, 6]]) == 6\n    assert candidate([[5, 8], [4, 10], [2, 9]]) == 9\n    assert candidate([[5, 9], [2, 4], [2, 6]]) == 8\n    assert candidate([[2, 3], [1, 7], [1, 8], [7, 9], [1, 5]]) == 9\n    assert candidate([[6, 8], [6, 7], [1, 6], [2, 10], [2, 2], [6, 8], [2, 8], [8, 9]]) == 10\n    assert candidate([[3, 4], [2, 5], [4, 10], [3, 6], [4, 6], [1, 8], [2, 6], [6, 9], [4, 10], [3, 6]]) == 10\n    assert candidate([[3, 5], [2, 5], [8, 8]]) == 5\n    assert candidate([[5, 8], [1, 3], [8, 8]]) == 7\n    assert candidate([[2, 8], [5, 7], [2, 3], [2, 7], [5, 8], [1, 10], [4, 7], [10, 10], [6, 10]]) == 10\n    assert candidate([[1, 3], [5, 10], [3, 10], [5, 9]]) == 10\n    assert candidate([[4, 10], [3, 6]]) == 8\n    assert candidate([[7, 8], [6, 10], [7, 8], [6, 10], [7, 10]]) == 5\n    assert candidate([[7, 7], [4, 4], [2, 7], [2, 3], [4, 6], [4, 8]]) == 7\n    assert candidate([[3, 4], [1, 4], [4, 8], [1, 7], [2, 10], [8, 10]]) == 10\n    assert candidate([[1, 4], [7, 10], [1, 5], [8, 9], [3, 5], [3, 8], [6, 7], [3, 5], [1, 3], [2, 8]]) == 10\n    assert candidate([[1, 6], [5, 10], [7, 8], [7, 10], [1, 3]]) == 10\n    assert candidate([[2, 3], [4, 4], [2, 7], [5, 5], [4, 7], [6, 9], [2, 4]]) == 8\n    assert candidate([[6, 8], [6, 8], [6, 10]]) == 5\n    assert candidate([[3, 10], [3, 5], [2, 3], [7, 9]]) == 9\n    assert candidate([[4, 4], [8, 10], [2, 7], [8, 9], [1, 8], [1, 3], [1, 9], [7, 7], [3, 6], [3, 5]]) == 10\n    assert candidate([[2, 6], [1, 4], [3, 8], [1, 9]]) == 9\n    assert candidate([[1, 2], [1, 9], [2, 9], [6, 10], [3, 5], [1, 2]]) == 10\n    assert candidate([[6, 7], [1, 10], [4, 4], [5, 5], [5, 10], [2, 3], [2, 8], [9, 10]]) == 10\n    assert candidate([[1, 1], [2, 9], [3, 3], [2, 2], [2, 4], [8, 9], [3, 9]]) == 9\n    assert candidate([[4, 6], [1, 10], [4, 10], [1, 10], [5, 7]]) == 10\n    assert candidate([[2, 3], [9, 10], [2, 9], [2, 8], [8, 9], [1, 2]]) == 10\n    assert candidate([[4, 9], [4, 6], [2, 7], [1, 9], [6, 10], [7, 10], [3, 9], [2, 9]]) == 10\n    assert candidate([[7, 10], [4, 10], [4, 10], [4, 5], [3, 10], [2, 4], [8, 9], [3, 9], [4, 5], [6, 9]]) == 9\n    assert candidate([[2, 7], [2, 5], [3, 3], [4, 4], [5, 6], [3, 4], [4, 10], [5, 5], [4, 5]]) == 9\n    assert candidate([[3, 7], [7, 8], [2, 6], [10, 10], [1, 4]]) == 9\n    assert candidate([[3, 4], [3, 8], [5, 8]]) == 6\n    assert candidate([[6, 9], [1, 8], [7, 9]]) == 9\n    assert candidate([[7, 8], [1, 5]]) == 7\n    assert candidate([[5, 10], [5, 9], [5, 6], [6, 8], [1, 5], [7, 8], [3, 5]]) == 10\n    assert candidate([[6, 8]]) == 3\n    assert candidate([[5, 5], [5, 9], [2, 8], [5, 9], [5, 6]]) == 8\n    assert candidate([[7, 9], [3, 8], [1, 8], [8, 8], [5, 9], [1, 3], [2, 6]]) == 9\n    assert candidate([[3, 6], [4, 8], [7, 9], [3, 3], [9, 10], [5, 8], [1, 2], [7, 8], [3, 10]]) == 10\n    assert candidate([[1, 8], [4, 5], [1, 5], [6, 7], [2, 9]]) == 9\n    assert candidate([[6, 8], [2, 8], [6, 9], [10, 10], [2, 5], [4, 6], [1, 10], [8, 8], [9, 10]]) == 10\n    assert candidate([[9, 10], [4, 8], [9, 10], [5, 7], [2, 5], [2, 7], [6, 10], [5, 7], [9, 10]]) == 9\n    assert candidate([[1, 7], [2, 7], [2, 4], [6, 7]]) == 7\n    assert candidate([[2, 10], [4, 5], [4, 10]]) == 9\n    assert candidate([[2, 10], [3, 6], [2, 10], [4, 10], [4, 9], [10, 10], [1, 1]]) == 10\n    assert candidate([[3, 5], [6, 9], [4, 7], [6, 6], [4, 5], [2, 4], [2, 7]]) == 8\n    assert candidate([[1, 1], [1, 7]]) == 7\n    assert candidate([[1, 8], [2, 8]]) == 8\n    assert candidate([[3, 7]]) == 5\n    assert candidate([[1, 6], [10, 10], [5, 7], [2, 9]]) == 10\n    assert candidate([[7, 8]]) == 2\n    assert candidate([[2, 10], [1, 10], [5, 9], [7, 7], [1, 6], [3, 5], [2, 9], [2, 10], [7, 10]]) == 10\n    assert candidate([[3, 8], [2, 9], [6, 10], [4, 8], [3, 4], [2, 3], [5, 9], [1, 5], [7, 9]]) == 10\n    assert candidate([[6, 7], [1, 5], [4, 6], [4, 9], [6, 8], [1, 7], [5, 10], [3, 4]]) == 10\n    assert candidate([[1, 2], [4, 10], [3, 7], [2, 10], [1, 2], [3, 4], [9, 9], [5, 9], [3, 7], [3, 5]]) == 10\n    assert candidate([[1, 6], [3, 4], [4, 8], [8, 10], [3, 8]]) == 10\n    assert candidate([[3, 6], [8, 10], [2, 5], [9, 10], [2, 8], [5, 10], [7, 10], [8, 8], [8, 10], [8, 9]]) == 9\n    assert candidate([[1, 8], [2, 6], [2, 3], [3, 6], [1, 10], [5, 8]]) == 10\n    assert candidate([[3, 7], [7, 10], [6, 6], [4, 10], [5, 10], [2, 8], [1, 10], [7, 8], [6, 6], [4, 7]]) == 10\n    assert candidate([[6, 9]]) == 4\n    assert candidate([[7, 8], [1, 1], [4, 10], [1, 9], [2, 6], [4, 6], [8, 9], [4, 5]]) == 10\n    assert candidate([[2, 7], [7, 10], [7, 8], [3, 5], [1, 7], [1, 4]]) == 10\n    assert candidate([[2, 9]]) == 8\n    assert candidate([[7, 9], [2, 2], [2, 7]]) == 8\n    assert candidate([[2, 10], [8, 9], [6, 8], [9, 10]]) == 9\n    assert candidate([[3, 3]]) == 1\n\ndef test_check():\n    check(numberOfPoints)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3045_minimumRightShifts", "language": "py", "prompt": "from typing import List\n\ndef minimumRightShifts(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible.\nA right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.\nExample 1:\nInput: nums = [3,4,5,1,2]\nOutput: 2\nExplanation:\nAfter the first right shift, nums = [2,3,4,5,1].\nAfter the second right shift, nums = [1,2,3,4,5].\nNow nums is sorted; therefore the answer is 2.\nExample 2:\nInput: nums = [1,3,5]\nOutput: 0\nExplanation: nums is already sorted therefore, the answer is 0.\nExample 3:\nInput: nums = [2,1,4]\nOutput: -1\nExplanation: It's impossible to sort the array using right shifts.\nConstraints:\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\n * nums contains distinct integers.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3045_minimumRightShifts.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 4, 5, 1, 2]) == 2\n    assert candidate([1, 3, 5]) == 0\n    assert candidate([2, 1, 4]) == -1\n    assert candidate([31, 72, 79, 25]) == 1\n    assert candidate([27, 33, 42, 58, 81, 8, 9, 17]) == 3\n    assert candidate([72, 13, 21, 35, 52]) == 4\n    assert candidate([65, 73, 77, 1]) == 1\n    assert candidate([100, 8, 14, 68, 80, 84]) == 5\n    assert candidate([53, 60, 64, 69, 98, 40]) == 1\n    assert candidate([21]) == 0\n    assert candidate([78, 12, 18, 21, 23, 36, 64, 70]) == 7\n    assert candidate([25, 26, 53, 91, 92, 99, 10, 24]) == 2\n    assert candidate([63, 51, 65, 87, 6, 17, 32, 14, 42, 46]) == -1\n    assert candidate([43, 46, 75, 76, 85, 96, 9, 19, 25]) == 3\n    assert candidate([5]) == 0\n    assert candidate([35, 72, 76, 82, 96, 97, 24, 26]) == 2\n    assert candidate([82, 30, 94, 55, 76, 51, 3, 89, 52, 96]) == -1\n    assert candidate([57, 59, 88, 97, 6, 27, 41, 46, 52]) == 5\n    assert candidate([17]) == 0\n    assert candidate([62]) == 0\n    assert candidate([24, 46, 55, 61, 71, 78, 1, 4]) == 2\n    assert candidate([83, 2, 21, 42, 73, 77, 80]) == 6\n    assert candidate([83, 94, 14, 43, 50, 62, 63]) == 5\n    assert candidate([38, 46, 66, 77, 7, 15, 17, 35]) == 4\n    assert candidate([35, 68, 82, 90, 9, 18, 29, 34]) == 4\n    assert candidate([71]) == 0\n    assert candidate([71, 73, 88, 12, 49, 55, 59, 70]) == 5\n    assert candidate([54, 65, 75, 81, 24, 37]) == 2\n    assert candidate([57, 67, 73, 78, 79, 2, 45, 48, 51]) == 4\n    assert candidate([36, 62, 65, 85, 95, 9, 21]) == 2\n    assert candidate([68, 12]) == 1\n    assert candidate([34, 9, 86, 20, 67, 94, 65, 82, 40, 79]) == -1\n    assert candidate([92, 84, 37, 19, 16, 85, 20, 79, 25, 89]) == -1\n    assert candidate([3, 16, 38, 44, 67, 79, 84]) == 0\n    assert candidate([14, 24, 58, 69, 71, 94, 13]) == 1\n    assert candidate([100, 18]) == 1\n    assert candidate([13]) == 0\n    assert candidate([94, 30, 53, 56, 67, 72, 82]) == 6\n    assert candidate([92, 14, 65, 80, 85]) == 4\n    assert candidate([43, 53, 81, 87, 93, 19, 31, 39]) == 3\n    assert candidate([80, 38]) == 1\n    assert candidate([52, 72, 78, 83, 85, 99, 20]) == 1\n    assert candidate([3, 6, 89]) == 0\n    assert candidate([3]) == 0\n    assert candidate([55, 56, 63, 91, 3, 46]) == 2\n    assert candidate([58, 10, 31, 37, 41]) == 4\n    assert candidate([17, 33, 53, 58, 78]) == 0\n    assert candidate([82, 44]) == 1\n    assert candidate([89, 96, 35, 48, 57, 71]) == 4\n    assert candidate([43, 69, 4, 29, 37]) == 3\n    assert candidate([65, 88]) == 0\n    assert candidate([42, 44, 59, 76, 86]) == 0\n    assert candidate([29, 56, 78, 96, 1, 10, 27]) == 3\n    assert candidate([48, 100]) == 0\n    assert candidate([4, 33, 17, 3, 8, 91, 28, 13, 72, 42]) == -1\n    assert candidate([5, 35, 53, 56]) == 0\n    assert candidate([65, 67, 70, 27, 41, 50, 52, 57, 60]) == 6\n    assert candidate([94, 32, 45, 62]) == 3\n    assert candidate([23, 25, 34, 47, 61, 65, 6, 21]) == 2\n    assert candidate([99, 11, 12, 21, 22, 55, 62, 83]) == 7\n    assert candidate([92, 13, 33, 58, 61, 85]) == 5\n    assert candidate([46]) == 0\n    assert candidate([12, 27, 30, 36]) == 0\n    assert candidate([33, 44, 57, 16, 22, 26, 30]) == 4\n    assert candidate([67, 24]) == 1\n    assert candidate([12, 44, 83, 87]) == 0\n    assert candidate([19, 52, 3, 8, 12]) == 3\n    assert candidate([82, 86, 88, 6, 35, 47, 52, 58, 62]) == 6\n    assert candidate([48]) == 0\n    assert candidate([60, 11]) == 1\n    assert candidate([69, 60]) == 1\n    assert candidate([22, 28, 36, 16, 82, 77, 41, 85, 44, 97]) == -1\n    assert candidate([63, 94, 2, 14]) == 2\n    assert candidate([41, 45, 74, 84, 90, 93, 100, 18, 31]) == 2\n    assert candidate([21, 38, 57, 64, 12]) == 1\n    assert candidate([99, 2, 9, 17, 33, 58, 59, 72]) == 7\n    assert candidate([36, 89, 90, 98, 11, 14, 23]) == 3\n    assert candidate([84, 90, 5, 57, 78]) == 3\n    assert candidate([48, 73, 76, 30]) == 1\n    assert candidate([74]) == 0\n    assert candidate([21, 84, 35, 65, 12, 74, 30, 95, 46, 23]) == -1\n    assert candidate([64, 76, 46, 53, 54]) == 3\n    assert candidate([77, 84, 89, 47, 52, 74]) == 3\n    assert candidate([12, 29, 31, 52, 88, 89, 10]) == 1\n    assert candidate([20, 25, 28, 41, 57, 89]) == 0\n    assert candidate([1, 28, 51, 59]) == 0\n    assert candidate([59, 76, 2, 26, 49, 78, 36, 70, 64, 24]) == -1\n    assert candidate([35, 43, 49, 63, 21]) == 1\n    assert candidate([1, 35, 38, 47, 54, 56, 58, 74]) == 0\n    assert candidate([49, 94, 97]) == 0\n    assert candidate([32, 30]) == 1\n    assert candidate([37, 36]) == 1\n    assert candidate([31, 41, 65, 14]) == 1\n    assert candidate([45, 57, 73, 77, 17, 30, 42, 43]) == 4\n    assert candidate([17, 65, 11]) == 1\n    assert candidate([32, 84, 93, 31, 61, 78, 15, 52, 100, 65]) == -1\n    assert candidate([61, 72, 90, 3, 8, 17, 23, 55]) == 5\n    assert candidate([19, 30, 44, 95, 13]) == 1\n    assert candidate([42, 46, 66, 71, 87, 3, 4, 5, 14]) == 4\n    assert candidate([13, 57, 7]) == 1\n\ndef test_check():\n    check(minimumRightShifts)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3046_minimumOperations", "language": "py", "prompt": "def minimumOperations(num: str) -> int:\n    \"\"\"You are given a 0-indexed string num representing a non-negative integer.\nIn one operation, you can pick any digit of num and delete it. Note that if you delete all the digits of num, num becomes 0.\nReturn the minimum number of operations required to make num special.\nAn integer x is considered special if it is divisible by 25.\nExample 1:\nInput: num = \"2245047\"\nOutput: 2\nExplanation: Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.\nExample 2:\nInput: num = \"2908305\"\nOutput: 3\nExplanation: Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.\nExample 3:\nInput: num = \"10\"\nOutput: 1\nExplanation: Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\nConstraints:\n * 1 <= num.length <= 100\n * num only consists of digits '0' through '9'.\n * num does not contain any leading zeros.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3046_minimumOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(2245047) == 2\n    assert candidate(2908305) == 3\n    assert candidate(10) == 1\n    assert candidate(1) == 1\n    assert candidate(2) == 1\n    assert candidate(3) == 1\n    assert candidate(4) == 1\n    assert candidate(5) == 1\n    assert candidate(6) == 1\n    assert candidate(7) == 1\n    assert candidate(8) == 1\n    assert candidate(9) == 1\n    assert candidate(11) == 2\n    assert candidate(12) == 2\n    assert candidate(13) == 2\n    assert candidate(14) == 2\n    assert candidate(15) == 2\n    assert candidate(16) == 2\n    assert candidate(17) == 2\n    assert candidate(18) == 2\n    assert candidate(19) == 2\n    assert candidate(20) == 1\n    assert candidate(21) == 2\n    assert candidate(22) == 2\n    assert candidate(23) == 2\n    assert candidate(24) == 2\n    assert candidate(25) == 0\n    assert candidate(26) == 2\n    assert candidate(27) == 2\n    assert candidate(28) == 2\n    assert candidate(29) == 2\n    assert candidate(30) == 1\n    assert candidate(31) == 2\n    assert candidate(32) == 2\n    assert candidate(33) == 2\n    assert candidate(34) == 2\n    assert candidate(35) == 2\n    assert candidate(36) == 2\n    assert candidate(37) == 2\n    assert candidate(38) == 2\n    assert candidate(39) == 2\n    assert candidate(40) == 1\n    assert candidate(41) == 2\n    assert candidate(42) == 2\n    assert candidate(43) == 2\n    assert candidate(44) == 2\n    assert candidate(45) == 2\n    assert candidate(46) == 2\n    assert candidate(47) == 2\n    assert candidate(48) == 2\n    assert candidate(49) == 2\n    assert candidate(50) == 0\n    assert candidate(51) == 2\n    assert candidate(52) == 2\n    assert candidate(53) == 2\n    assert candidate(54) == 2\n    assert candidate(55) == 2\n    assert candidate(56) == 2\n    assert candidate(57) == 2\n    assert candidate(58) == 2\n    assert candidate(59) == 2\n    assert candidate(60) == 1\n    assert candidate(61) == 2\n    assert candidate(62) == 2\n    assert candidate(63) == 2\n    assert candidate(64) == 2\n    assert candidate(65) == 2\n    assert candidate(66) == 2\n    assert candidate(67) == 2\n    assert candidate(68) == 2\n    assert candidate(69) == 2\n    assert candidate(70) == 1\n    assert candidate(71) == 2\n    assert candidate(72) == 2\n    assert candidate(73) == 2\n    assert candidate(74) == 2\n    assert candidate(75) == 0\n    assert candidate(76) == 2\n    assert candidate(77) == 2\n    assert candidate(78) == 2\n    assert candidate(79) == 2\n    assert candidate(80) == 1\n    assert candidate(81) == 2\n    assert candidate(82) == 2\n    assert candidate(83) == 2\n    assert candidate(84) == 2\n    assert candidate(85) == 2\n    assert candidate(86) == 2\n    assert candidate(87) == 2\n    assert candidate(88) == 2\n    assert candidate(89) == 2\n    assert candidate(90) == 1\n    assert candidate(91) == 2\n    assert candidate(92) == 2\n    assert candidate(93) == 2\n    assert candidate(94) == 2\n    assert candidate(95) == 2\n    assert candidate(96) == 2\n    assert candidate(97) == 2\n    assert candidate(98) == 2\n\ndef test_check():\n    check(minimumOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3047_maximumSum", "language": "py", "prompt": "from typing import List\n\ndef maximumSum(nums: List[int]) -> int:\n    \"\"\"You are given a 1-indexed array nums of n integers.\nA set of numbers is complete if the product of every pair of its elements is a perfect square.\nFor a subset of the indices set {1, 2, ..., n} represented as {i1, i2, ..., ik}, we define its element-sum as: nums[i1] + nums[i2] + ... + nums[ik].\nReturn the maximum element-sum of a complete subset of the indices set {1, 2, ..., n}.\nA perfect square is a number that can be expressed as the product of an integer by itself.\nExample 1:\nInput: nums = [8,7,3,5,7,2,4,9]\nOutput: 16\nExplanation: Apart from the subsets consisting of a single index, there are two other complete subsets of indices: {1,4} and {2,8}.\nThe sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 8 + 5 = 13.\nThe sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 7 + 9 = 16.\nHence, the maximum element-sum of a complete subset of indices is 16.\nExample 2:\nInput: nums = [5,10,3,10,1,13,7,9,4]\nOutput: 19\nExplanation: Apart from the subsets consisting of a single index, there are four other complete subsets of indices: {1,4}, {1,9}, {2,8}, {4,9}, and {1,4,9}.\nThe sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 5 + 10 = 15.\nThe sum of the elements corresponding to indices 1 and 9 is equal to nums[1] + nums[9] = 5 + 4 = 9.\nThe sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 10 + 9 = 19.\nThe sum of the elements corresponding to indices 4 and 9 is equal to nums[4] + nums[9] = 10 + 4 = 14.\nThe sum of the elements corresponding to indices 1, 4, and 9 is equal to nums[1] + nums[4] + nums[9] = 5 + 10 + 4 = 19.\nHence, the maximum element-sum of a complete subset of indices is 19.\nConstraints:\n * 1 <= n == nums.length <= 104\n * 1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3047_maximumSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([8, 7, 3, 5, 7, 2, 4, 9]) == 16\n    assert candidate([5, 10, 3, 10, 1, 13, 7, 9, 4]) == 19\n    assert candidate([1, 1, 1, 1]) == 2\n    assert candidate([1, 100, 100, 1]) == 100\n    assert candidate([998244353, 998244353, 998244353, 998244353]) == 1996488706\n    assert candidate([1000000000, 1, 1, 1000000000]) == 2000000000\n    assert candidate([1, 1, 1000000000, 1]) == 1000000000\n    assert candidate([5, 10, 3, 10, 1, 13, 7, 20, 4]) == 30\n    assert candidate([5, 3, 3, 10, 1, 13, 7, 67, 4]) == 70\n    assert candidate([35, 45, 29, 16, 42, 49, 25, 19, 46]) == 97\n    assert candidate([34, 43, 47, 50, 45]) == 84\n    assert candidate([4, 31, 45, 34, 44]) == 45\n    assert candidate([12, 5, 49, 26]) == 49\n    assert candidate([41]) == 41\n    assert candidate([38, 9, 37, 11, 20, 43]) == 49\n    assert candidate([47, 50, 17, 49, 12, 22]) == 96\n    assert candidate([23, 13, 17, 3, 21, 23]) == 26\n    assert candidate([38, 28]) == 38\n    assert candidate([16, 31, 37, 29, 28, 34, 25, 36]) == 67\n    assert candidate([19, 46, 37, 44, 4, 40, 24, 17, 49]) == 112\n    assert candidate([28, 40, 37]) == 40\n    assert candidate([19, 6, 30, 23, 25, 45, 15, 2, 3, 46]) == 46\n    assert candidate([5, 16, 4, 13, 37, 44, 49, 7]) == 49\n    assert candidate([40, 8, 19, 26]) == 66\n    assert candidate([3, 37, 2]) == 37\n    assert candidate([1, 5, 35, 20, 32, 18, 6, 49, 34, 15]) == 55\n    assert candidate([25, 31, 4, 20, 45]) == 45\n    assert candidate([32, 3, 25, 15, 37, 37, 21, 24, 8, 33]) == 55\n    assert candidate([13]) == 13\n    assert candidate([41, 25, 20, 28, 40, 22, 37, 43, 6, 32]) == 75\n    assert candidate([23, 9, 7, 24, 30, 34, 10, 47]) == 56\n    assert candidate([11, 31, 1, 34, 8, 20, 15, 20, 49]) == 94\n    assert candidate([41, 21, 4, 15, 25, 38, 26, 7, 6]) == 62\n    assert candidate([46, 31, 28, 34, 12, 40, 11, 31, 8, 25]) == 88\n    assert candidate([50]) == 50\n    assert candidate([41, 43, 17, 35]) == 76\n    assert candidate([20, 6]) == 20\n    assert candidate([43, 18, 10, 19, 20, 9, 49]) == 62\n    assert candidate([3, 39, 29, 5, 6, 36, 38, 26, 14, 10]) == 65\n    assert candidate([47, 2, 48, 16, 10, 3, 45, 20, 39]) == 102\n    assert candidate([11, 47, 27, 17, 7]) == 47\n    assert candidate([48, 17, 41, 23, 40, 9, 3, 26, 44, 34]) == 115\n    assert candidate([47, 2, 42, 10, 15, 44, 35, 50]) == 57\n    assert candidate([45, 48, 50, 24, 23, 14, 2, 33]) == 81\n    assert candidate([7, 39, 27, 39, 43, 42, 31, 37, 15]) == 76\n    assert candidate([10, 36, 23, 31]) == 41\n    assert candidate([27, 27, 13, 37]) == 64\n    assert candidate([34, 17, 26, 13]) == 47\n    assert candidate([9, 42]) == 42\n    assert candidate([23, 42, 4, 28, 30, 36, 30, 39]) == 81\n    assert candidate([10, 28, 28, 21, 25, 14, 38]) == 38\n    assert candidate([40, 34, 26, 9, 23, 15, 23, 27, 49]) == 98\n    assert candidate([27, 42, 40, 2, 1]) == 42\n    assert candidate([48, 19, 21, 21, 32, 20, 50, 41, 49, 30]) == 118\n    assert candidate([10, 13, 6, 39, 9]) == 49\n    assert candidate([50, 37, 24, 4, 10, 43, 35]) == 54\n    assert candidate([39, 24]) == 39\n    assert candidate([21]) == 21\n    assert candidate([20, 15]) == 20\n    assert candidate([23, 27, 42, 3, 33, 36, 43, 32, 27, 48, 40, 22, 5, 36, 48]) == 64\n    assert candidate([39, 46, 12, 14, 25, 37, 24, 44, 6, 38, 4]) == 90\n    assert candidate([36, 5, 23, 17, 32, 47, 23, 41, 18, 44, 21, 4, 22, 6, 21]) == 71\n    assert candidate([46, 26, 37, 17, 15, 26, 45, 45, 17, 42, 16, 14, 36, 40]) == 80\n    assert candidate([46, 40, 16, 48, 24, 1, 13, 15, 6, 5, 12, 15, 4]) == 100\n    assert candidate([11, 27, 28, 26, 4, 22, 10, 49, 4, 23, 30, 6, 5]) == 76\n    assert candidate([37, 17, 17, 18, 10, 28, 47, 38, 43, 20, 10]) == 98\n    assert candidate([12, 17, 9, 30, 38, 20, 28, 36, 34, 15, 4, 15, 48]) == 76\n    assert candidate([28, 32, 22, 9, 33, 26, 10, 15, 15, 37, 33, 48, 2, 14, 35]) == 70\n    assert candidate([35, 28, 45, 34, 49, 45, 38, 15, 36, 33, 15, 16]) == 105\n    assert candidate([50, 18, 24, 30, 6, 49, 3, 20, 22, 19, 25, 35, 30, 33]) == 102\n    assert candidate([10, 19, 37, 1, 31, 6, 2, 37, 10, 1, 36, 48, 7, 40]) == 85\n    assert candidate([45, 49, 32, 44, 12, 39, 8, 7, 3, 48, 37, 27, 41, 20, 18]) == 92\n    assert candidate([40, 9, 16, 40, 9, 28, 29, 36, 4, 17, 29]) == 84\n    assert candidate([21, 32, 24, 39, 2, 13, 37, 33, 50, 43, 9, 43, 14]) == 110\n    assert candidate([36, 25, 21, 29, 42, 40, 16, 41, 22, 24, 45, 7, 33]) == 87\n    assert candidate([32, 33, 7, 45, 23, 13, 45, 4, 15, 12]) == 92\n    assert candidate([10, 7, 1, 15, 12, 22, 34, 3, 36, 44, 10, 12]) == 61\n    assert candidate([26, 4, 44, 3, 37, 50, 27, 22, 48, 14, 12, 3, 39, 31]) == 77\n    assert candidate([47, 48, 8, 24, 1, 17, 32, 13, 19, 25, 15, 30, 12]) == 90\n    assert candidate([31, 18, 11, 28, 7, 34, 32, 38, 47, 44, 1, 13, 46]) == 106\n    assert candidate([47, 12, 35, 10, 37, 36, 44, 38, 19, 31, 28, 21, 3, 34]) == 76\n    assert candidate([19, 47, 46, 5, 7, 42, 35, 3, 39, 2, 1, 31]) == 77\n    assert candidate([15, 50, 14, 27, 37, 44, 11, 38, 23, 39, 27, 36, 22]) == 88\n    assert candidate([31, 31, 18, 24, 9, 27, 33, 10, 23, 38, 44, 4, 17, 11, 14]) == 78\n    assert candidate([38, 27, 13, 20, 36, 23, 6, 7, 37, 20, 49, 31, 25, 12]) == 95\n    assert candidate([6, 21, 11, 15, 17, 47, 50, 14, 24, 18, 38, 19, 48, 43]) == 50\n    assert candidate([31, 4, 1, 5, 50, 46, 14, 17, 13, 14, 17, 39, 46, 18]) == 50\n    assert candidate([39, 13, 6, 45, 44, 14, 44, 37, 24, 20, 21, 47, 6, 6, 5]) == 108\n    assert candidate([17, 16, 48, 41, 7, 39, 50, 29, 2, 33]) == 60\n    assert candidate([3, 8, 19, 47, 29, 4, 16, 31, 11, 30]) == 61\n    assert candidate([20, 1, 46, 36, 35, 32, 49, 14, 48, 25, 17, 50, 22]) == 104\n    assert candidate([49, 20, 12, 42, 33, 21, 29, 30, 35, 4, 5, 50]) == 126\n    assert candidate([36, 1, 8, 14, 39, 2, 31, 23, 10, 46, 42]) == 60\n    assert candidate([33, 29, 23, 4, 48, 31, 31, 26, 11, 39]) == 55\n    assert candidate([33, 36, 31, 21, 2, 41, 14, 36, 6, 1, 22, 13, 34]) == 72\n    assert candidate([35, 32, 43, 20, 4, 13, 6, 19, 36, 20]) == 91\n    assert candidate([16, 41, 16, 41, 11, 39, 40, 7, 24, 28, 13]) == 81\n    assert candidate([32, 24, 29, 24, 29, 45, 10, 37, 22, 35, 37, 28, 15]) == 78\n    assert candidate([45, 8, 19, 1, 33, 2, 32, 40, 16, 33, 44, 27]) == 62\n    assert candidate([3, 42, 14, 18, 1, 20, 19, 7, 37, 3, 2, 3, 48]) == 58\n\ndef test_check():\n    check(maximumSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3056_isReachableAtTime", "language": "py", "prompt": "def isReachableAtTime(sx: int, sy: int, fx: int, fy: int, t: int) -> bool:\n    \"\"\"You are given four integers sx, sy, fx, fy, and a non-negative integer t.\nIn an infinite 2D grid, you start at the cell (sx, sy). Each second, you must move to any of its adjacent cells.\nReturn true if you can reach cell (fx, fy) after exactly t seconds, or false otherwise.\nA cell's adjacent cells are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/05/example2.svg]\nInput: sx = 2, sy = 4, fx = 7, fy = 7, t = 6\nOutput: true\nExplanation: Starting at cell (2, 4), we can reach cell (7, 7) in exactly 6 seconds by going through the cells depicted in the picture above.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/05/example1.svg]\nInput: sx = 3, sy = 1, fx = 7, fy = 3, t = 3\nOutput: false\nExplanation: Starting at cell (3, 1), it takes at least 4 seconds to reach cell (7, 3) by going through the cells depicted in the picture above. Hence, we cannot reach cell (7, 3) at the third second.\nConstraints:\n * 1 <= sx, sy, fx, fy <= 109\n * 0 <= t <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3056_isReachableAtTime.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, 1, 7, 3, 3) == False\n    assert candidate(2, 4, 7, 7, 6) == True\n    assert candidate(1, 1, 1, 2, 0) == False\n    assert candidate(1, 1, 2, 4, 0) == False\n    assert candidate(1, 1, 3, 4, 1) == False\n    assert candidate(1, 1, 3, 5, 1) == False\n    assert candidate(1, 1, 1, 1, 3) == True\n    assert candidate(1, 1, 1, 3, 2) == True\n    assert candidate(1, 1, 4, 1, 0) == False\n    assert candidate(1, 1, 4, 2, 1) == False\n    assert candidate(1, 1, 1, 4, 3) == True\n    assert candidate(1, 1, 1, 5, 8) == True\n    assert candidate(1, 1, 2, 1, 2) == True\n    assert candidate(1, 1, 4, 3, 2) == False\n    assert candidate(1, 1, 2, 2, 1) == True\n    assert candidate(1, 1, 4, 4, 0) == False\n    assert candidate(1, 1, 5, 1, 0) == False\n    assert candidate(1, 1, 2, 3, 2) == True\n    assert candidate(1, 1, 5, 2, 0) == False\n    assert candidate(1, 1, 2, 5, 6) == True\n    assert candidate(1, 1, 3, 1, 3) == True\n    assert candidate(1, 1, 3, 2, 4) == True\n    assert candidate(1, 1, 3, 3, 9) == True\n    assert candidate(1, 1, 4, 5, 9) == True\n    assert candidate(1, 1, 5, 3, 9) == True\n    assert candidate(1, 1, 5, 4, 0) == False\n    assert candidate(1, 2, 1, 1, 2) == True\n    assert candidate(1, 1, 5, 5, 0) == False\n    assert candidate(1, 2, 1, 2, 1) == False\n    assert candidate(1, 2, 1, 3, 6) == True\n    assert candidate(1, 2, 1, 4, 4) == True\n    assert candidate(1, 2, 2, 5, 0) == False\n    assert candidate(1, 2, 3, 4, 0) == False\n    assert candidate(1, 2, 1, 5, 5) == True\n    assert candidate(1, 2, 3, 5, 0) == False\n    assert candidate(1, 2, 4, 1, 0) == False\n    assert candidate(1, 2, 2, 1, 10) == True\n    assert candidate(1, 2, 2, 2, 9) == True\n    assert candidate(1, 2, 2, 3, 1) == True\n    assert candidate(1, 2, 4, 2, 1) == False\n    assert candidate(1, 2, 2, 4, 2) == True\n    assert candidate(1, 2, 4, 3, 1) == False\n    assert candidate(1, 2, 4, 4, 0) == False\n    assert candidate(1, 2, 3, 1, 2) == True\n    assert candidate(1, 2, 3, 2, 2) == True\n    assert candidate(1, 2, 4, 5, 2) == False\n    assert candidate(1, 2, 3, 3, 4) == True\n    assert candidate(1, 2, 5, 1, 0) == False\n    assert candidate(1, 2, 5, 3, 0) == False\n    assert candidate(1, 2, 5, 2, 4) == True\n    assert candidate(1, 2, 5, 4, 0) == False\n    assert candidate(1, 3, 1, 1, 2) == True\n    assert candidate(1, 3, 1, 2, 3) == True\n    assert candidate(1, 2, 5, 5, 2) == False\n    assert candidate(1, 3, 2, 1, 0) == False\n    assert candidate(1, 3, 2, 4, 0) == False\n    assert candidate(1, 3, 1, 3, 0) == True\n    assert candidate(1, 3, 1, 4, 4) == True\n    assert candidate(1, 3, 1, 5, 4) == True\n    assert candidate(1, 3, 2, 2, 2) == True\n    assert candidate(1, 3, 2, 3, 3) == True\n    assert candidate(1, 3, 3, 1, 3) == True\n    assert candidate(1, 3, 2, 5, 0) == False\n    assert candidate(1, 3, 4, 1, 1) == False\n    assert candidate(1, 3, 3, 2, 2) == True\n    assert candidate(1, 3, 3, 3, 8) == True\n    assert candidate(1, 3, 4, 5, 1) == False\n    assert candidate(1, 3, 5, 1, 3) == False\n    assert candidate(1, 3, 5, 2, 2) == False\n    assert candidate(1, 3, 5, 3, 3) == False\n    assert candidate(1, 3, 5, 4, 3) == False\n    assert candidate(1, 3, 5, 5, 1) == False\n    assert candidate(1, 3, 3, 4, 4) == True\n    assert candidate(1, 3, 3, 5, 2) == True\n    assert candidate(1, 4, 1, 2, 1) == False\n    assert candidate(1, 3, 4, 2, 3) == True\n    assert candidate(1, 3, 4, 3, 10) == True\n    assert candidate(1, 3, 4, 4, 10) == True\n    assert candidate(1, 4, 1, 1, 4) == True\n    assert candidate(1, 4, 1, 3, 1) == True\n    assert candidate(1, 4, 1, 4, 6) == True\n    assert candidate(1, 4, 2, 2, 0) == False\n    assert candidate(1, 4, 1, 5, 6) == True\n    assert candidate(1, 4, 2, 4, 0) == False\n    assert candidate(1, 4, 2, 1, 4) == True\n    assert candidate(1, 4, 3, 3, 0) == False\n    assert candidate(1, 4, 2, 3, 3) == True\n    assert candidate(1, 4, 2, 5, 3) == True\n    assert candidate(1, 4, 3, 1, 4) == True\n    assert candidate(1, 4, 3, 2, 5) == True\n    assert candidate(1, 4, 4, 1, 7) == True\n    assert candidate(1, 4, 3, 4, 1) == False\n    assert candidate(1, 4, 4, 4, 10) == True\n    assert candidate(1, 4, 4, 5, 3) == True\n    assert candidate(1, 4, 3, 5, 0) == False\n    assert candidate(1, 4, 4, 2, 0) == False\n    assert candidate(1, 4, 4, 3, 1) == False\n    assert candidate(1, 4, 5, 2, 1) == False\n    assert candidate(1, 4, 5, 4, 3) == False\n    assert candidate(1, 4, 5, 5, 0) == False\n\ndef test_check():\n    check(isReachableAtTime)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3057_countKSubsequencesWithMaxBeauty", "language": "py", "prompt": "def countKSubsequencesWithMaxBeauty(s: str, k: int) -> int:\n    \"\"\"You are given a string s and an integer k.\nA k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once.\nLet f(c) denote the number of times the character c occurs in s.\nThe beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence.\nFor example, consider s = \"abbbdd\" and k = 2:\n * f('a') = 1, f('b') = 3, f('d') = 2\n * Some k-subsequences of s are:\n   * \"abbbdd\" -> \"ab\" having a beauty of f('a') + f('b') = 4\n   * \"abbbdd\" -> \"ad\" having a beauty of f('a') + f('d') = 3\n   * \"abbbdd\" -> \"bd\" having a beauty of f('b') + f('d') = 5\nReturn an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7.\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\nNotes\n * f(c) is the number of times a character c occurs in s, not a k-subsequence.\n * Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\nExample 1:\nInput: s = \"bcca\", k = 2\nOutput: 4\nExplanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are:\nbcca having a beauty of f('b') + f('c') = 3\nbcca having a beauty of f('b') + f('c') = 3\nbcca having a beauty of f('b') + f('a') = 2\nbcca having a beauty of f('c') + f('a') = 3\nbcca having a beauty of f('c') + f('a') = 3\nThere are 4 k-subsequences that have the maximum beauty, 3.\nHence, the answer is 4.\nExample 2:\nInput: s = \"abbcd\", k = 4\nOutput: 2\nExplanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1.\nThe k-subsequences of s are:\nabbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5\nabbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5\nThere are 2 k-subsequences that have the maximum beauty, 5.\nHence, the answer is 2.\nConstraints:\n * 1 <= s.length <= 2 * 105\n * 1 <= k <= s.length\n * s consists only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3057_countKSubsequencesWithMaxBeauty.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(bcca, 2) == 4\n    assert candidate(abbcd, 4) == 2\n    assert candidate(am, 2) == 1\n    assert candidate(az, 2) == 1\n    assert candidate(ci, 1) == 2\n    assert candidate(dd, 2) == 0\n    assert candidate(di, 2) == 1\n    assert candidate(dw, 2) == 1\n    assert candidate(ef, 1) == 2\n    assert candidate(gq, 2) == 1\n    assert candidate(hj, 1) == 2\n    assert candidate(hx, 1) == 2\n    assert candidate(ii, 2) == 0\n    assert candidate(il, 2) == 1\n    assert candidate(jb, 1) == 2\n    assert candidate(kx, 1) == 2\n    assert candidate(qh, 2) == 1\n    assert candidate(qk, 2) == 1\n    assert candidate(qr, 2) == 1\n    assert candidate(rg, 2) == 1\n    assert candidate(rn, 1) == 2\n    assert candidate(st, 1) == 2\n    assert candidate(tb, 1) == 2\n    assert candidate(tl, 2) == 1\n    assert candidate(xc, 2) == 1\n    assert candidate(auy, 1) == 3\n    assert candidate(axm, 3) == 1\n    assert candidate(dqc, 1) == 3\n    assert candidate(fkp, 2) == 3\n    assert candidate(fmk, 2) == 3\n    assert candidate(fvl, 3) == 1\n    assert candidate(hcx, 3) == 1\n    assert candidate(iua, 3) == 1\n    assert candidate(kzb, 2) == 3\n    assert candidate(mhb, 3) == 1\n    assert candidate(nzo, 1) == 3\n    assert candidate(oof, 3) == 0\n    assert candidate(rfh, 2) == 3\n    assert candidate(sty, 1) == 3\n    assert candidate(sue, 3) == 1\n    assert candidate(tba, 3) == 1\n    assert candidate(tmc, 1) == 3\n    assert candidate(wes, 2) == 3\n    assert candidate(wvl, 1) == 3\n    assert candidate(xho, 2) == 3\n    assert candidate(xke, 2) == 3\n    assert candidate(ysu, 3) == 1\n    assert candidate(yxn, 2) == 3\n    assert candidate(zco, 1) == 3\n    assert candidate(zpq, 3) == 1\n    assert candidate(axgn, 4) == 1\n    assert candidate(dfyq, 2) == 6\n    assert candidate(dogq, 2) == 6\n    assert candidate(drbs, 2) == 6\n    assert candidate(elex, 4) == 0\n    assert candidate(fsaj, 1) == 4\n    assert candidate(fxau, 2) == 6\n    assert candidate(glbq, 4) == 1\n    assert candidate(hzcj, 4) == 1\n    assert candidate(minc, 3) == 4\n    assert candidate(nkim, 1) == 4\n    assert candidate(otpl, 2) == 6\n    assert candidate(pvrz, 4) == 1\n    assert candidate(qwmy, 4) == 1\n    assert candidate(rliu, 4) == 1\n    assert candidate(tpig, 2) == 6\n    assert candidate(ucvh, 4) == 1\n    assert candidate(vevt, 2) == 4\n    assert candidate(xstt, 3) == 2\n    assert candidate(ypmv, 3) == 4\n    assert candidate(znoq, 3) == 4\n    assert candidate(bicnt, 1) == 5\n    assert candidate(bnhom, 5) == 1\n    assert candidate(culhr, 5) == 1\n    assert candidate(dpfki, 1) == 5\n    assert candidate(dscbu, 2) == 10\n    assert candidate(edwlo, 3) == 10\n    assert candidate(ggsgo, 3) == 3\n    assert candidate(guzzf, 4) == 2\n    assert candidate(gzzzl, 3) == 3\n    assert candidate(kjojr, 3) == 6\n    assert candidate(kvsds, 5) == 0\n    assert candidate(ljdvp, 1) == 5\n    assert candidate(mdccc, 5) == 0\n    assert candidate(mmqny, 4) == 2\n    assert candidate(mrbrj, 2) == 6\n    assert candidate(pwtbx, 4) == 5\n    assert candidate(qcxkr, 3) == 10\n    assert candidate(qvauy, 1) == 5\n    assert candidate(tzwoq, 3) == 10\n    assert candidate(ufxge, 4) == 5\n    assert candidate(unzxd, 4) == 5\n    assert candidate(vhqqj, 3) == 6\n    assert candidate(vnkbt, 1) == 5\n    assert candidate(wpbkz, 2) == 10\n    assert candidate(xdgvy, 1) == 5\n    assert candidate(yelem, 5) == 0\n    assert candidate(zwkhq, 3) == 10\n    assert candidate(anxnfi, 5) == 2\n    assert candidate(cfbyuf, 5) == 2\n\ndef test_check():\n    check(countKSubsequencesWithMaxBeauty)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3058_maxKDivisibleComponents", "language": "py", "prompt": "from typing import List\n\ndef maxKDivisibleComponents(n: int, edges: List[List[int]], values: List[int], k: int) -> int:\n    \"\"\"There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k.\nA valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes.\nReturn the maximum number of components in any valid split.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/07/example12-cropped2svg.jpg]\nInput: n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6\nOutput: 2\nExplanation: We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/07/example21svg-1.jpg]\nInput: n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3\nOutput: 3\nExplanation: We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components.\nConstraints:\n * 1 <= n <= 3 * 104\n * edges.length == n - 1\n * edges[i].length == 2\n * 0 <= ai, bi < n\n * values.length == n\n * 0 <= values[i] <= 109\n * 1 <= k <= 109\n * Sum of values is divisible by k.\n * The input is generated such that edges represents a valid tree.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3058_maxKDivisibleComponents.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(5, [[0, 2], [1, 2], [1, 3], [2, 4]], [1, 8, 1, 4, 4], 6) == 2\n    assert candidate(7, [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]], [3, 0, 6, 1, 5, 2, 1], 3) == 3\n    assert candidate(1, [], [0], 1) == 1\n    assert candidate(1, [], [10000], 100) == 1\n    assert candidate(2, [[1, 0]], [0, 0], 100000000) == 2\n    assert candidate(2, [[0, 1]], [1, 2], 1) == 2\n    assert candidate(2, [[1, 0]], [10000, 10000], 4) == 2\n    assert candidate(3, [[0, 2], [2, 1]], [0, 0, 0], 1) == 3\n    assert candidate(3, [[1, 0], [2, 0]], [1, 1, 2], 2) == 2\n    assert candidate(3, [[1, 2], [2, 0]], [0, 2, 2], 4) == 2\n    assert candidate(3, [[1, 0], [0, 2]], [0, 1, 2], 3) == 1\n    assert candidate(4, [[0, 1], [1, 2], [2, 3]], [0, 0, 0, 0], 9999999) == 4\n    assert candidate(9, [[1, 2], [1, 7], [0, 6], [0, 8], [0, 3], [3, 4], [0, 5], [2, 5]], [1, 4, 4, 0, 2, 1, 1, 6, 2], 7) == 2\n    assert candidate(9, [[5, 0], [5, 1], [1, 6], [1, 7], [5, 8], [0, 3], [2, 4], [5, 2]], [3, 0, 10, 0, 6, 1, 1, 3, 0], 8) == 4\n    assert candidate(6, [[5, 0], [1, 4], [4, 3], [4, 2], [5, 4]], [1, 2, 2, 2, 0, 2], 3) == 2\n    assert candidate(4, [[0, 3], [1, 2], [0, 2]], [12, 6, 0, 18], 6) == 4\n    assert candidate(10, [[8, 7], [8, 3], [7, 6], [6, 2], [6, 4], [3, 9], [4, 1], [6, 0], [2, 5]], [2, 2, 2, 0, 1, 3, 1, 0, 3, 1], 1) == 10\n    assert candidate(8, [[0, 4], [4, 1], [0, 3], [1, 2], [0, 5], [5, 7], [1, 6]], [2, 6, 2, 2, 2, 0, 0, 0], 7) == 4\n    assert candidate(9, [[1, 5], [5, 2], [1, 8], [2, 0], [2, 6], [1, 7], [6, 4], [7, 3]], [8, 8, 12, 12, 8, 8, 8, 8, 4], 4) == 9\n    assert candidate(7, [[0, 3], [3, 2], [3, 5], [0, 6], [0, 1], [6, 4]], [12, 6, 6, 12, 18, 18, 12], 6) == 7\n    assert candidate(4, [[1, 3], [0, 2], [1, 0]], [2, 6, 1, 9], 3) == 3\n    assert candidate(5, [[2, 0], [0, 1], [2, 3], [2, 4]], [0, 2, 10, 0, 18], 6) == 3\n    assert candidate(6, [[3, 5], [3, 0], [5, 2], [5, 4], [3, 1]], [3, 3, 0, 18, 0, 0], 8) == 4\n    assert candidate(10, [[9, 5], [4, 9], [5, 8], [3, 6], [8, 6], [0, 1], [9, 0], [6, 2], [3, 7]], [10, 14, 12, 4, 12, 1, 8, 36, 12, 11], 12) == 7\n    assert candidate(7, [[3, 0], [0, 4], [2, 6], [3, 6], [2, 1], [1, 5]], [5, 36, 21, 7, 36, 36, 15], 12) == 5\n    assert candidate(5, [[2, 3], [2, 0], [2, 4], [3, 1]], [3, 0, 3, 15, 3], 8) == 2\n    assert candidate(10, [[9, 1], [1, 7], [7, 3], [3, 6], [1, 8], [9, 4], [3, 0], [3, 5], [9, 2]], [9, 9, 18, 9, 9, 18, 9, 9, 18, 27], 9) == 10\n    assert candidate(4, [[2, 1], [2, 0], [2, 3]], [2, 0, 8, 10], 5) == 3\n    assert candidate(5, [[2, 4], [4, 0], [0, 1], [0, 3]], [10, 20, 10, 30, 30], 10) == 5\n    assert candidate(10, [[5, 6], [5, 4], [5, 1], [5, 0], [1, 7], [0, 8], [0, 2], [8, 9], [3, 8]], [4, 0, 2, 9, 2, 8, 0, 2, 0, 0], 9) == 5\n    assert candidate(9, [[5, 6], [5, 1], [6, 0], [6, 8], [8, 2], [7, 3], [8, 3], [8, 4]], [33, 11, 33, 6, 11, 11, 33, 16, 33], 11) == 8\n    assert candidate(4, [[3, 0], [0, 2], [3, 1]], [8, 8, 12, 4], 4) == 4\n    assert candidate(8, [[1, 6], [5, 7], [6, 7], [3, 2], [3, 4], [4, 0], [1, 2]], [6, 6, 6, 6, 3, 8, 15, 6], 7) == 3\n    assert candidate(9, [[7, 8], [4, 6], [8, 6], [3, 0], [3, 5], [5, 1], [1, 2], [7, 0]], [5, 0, 1, 1, 1, 3, 9, 30, 10], 10) == 4\n    assert candidate(4, [[2, 1], [1, 0], [2, 3]], [1, 0, 1, 2], 2) == 2\n    assert candidate(4, [[1, 2], [1, 0], [2, 3]], [2, 1, 0, 1], 1) == 4\n    assert candidate(4, [[2, 1], [2, 3], [2, 0]], [3, 6, 9, 6], 3) == 4\n    assert candidate(7, [[0, 4], [0, 1], [4, 6], [4, 3], [6, 5], [2, 4]], [2, 0, 2, 0, 0, 0, 0], 2) == 7\n    assert candidate(9, [[6, 0], [1, 2], [6, 2], [2, 3], [3, 7], [3, 8], [0, 5], [3, 4]], [1, 1, 0, 3, 3, 3, 1, 1, 3], 1) == 9\n    assert candidate(5, [[0, 4], [0, 1], [1, 3], [0, 2]], [2, 12, 14, 0, 0], 7) == 4\n    assert candidate(6, [[1, 2], [0, 5], [5, 4], [0, 3], [2, 0]], [2, 2, 2, 0, 0, 2], 2) == 6\n    assert candidate(10, [[3, 1], [1, 4], [4, 5], [3, 0], [4, 7], [7, 2], [0, 9], [0, 8], [1, 6]], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], 1) == 10\n    assert candidate(5, [[3, 1], [0, 3], [4, 2], [1, 2]], [3, 1, 3, 2, 6], 3) == 4\n    assert candidate(10, [[6, 3], [3, 9], [3, 7], [3, 4], [7, 8], [8, 0], [8, 5], [3, 2], [0, 1]], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0], 1) == 10\n    assert candidate(5, [[4, 3], [3, 1], [1, 2], [1, 0]], [8, 6, 0, 8, 2], 8) == 3\n    assert candidate(8, [[1, 3], [0, 3], [7, 4], [4, 6], [0, 7], [0, 2], [4, 5]], [12, 10, 6, 2, 6, 12, 3, 9], 6) == 5\n    assert candidate(9, [[5, 4], [2, 1], [2, 0], [0, 7], [7, 8], [5, 2], [6, 3], [2, 3]], [1, 2, 3, 2, 2, 4, 4, 0, 0], 6) == 5\n    assert candidate(7, [[4, 6], [4, 2], [2, 1], [2, 5], [4, 3], [0, 5]], [27, 0, 1, 1, 4, 2, 1], 9) == 3\n    assert candidate(7, [[4, 6], [0, 2], [0, 5], [2, 3], [3, 1], [4, 2]], [1, 0, 0, 1, 2, 0, 0], 2) == 5\n    assert candidate(9, [[3, 2], [2, 1], [1, 4], [4, 6], [4, 8], [6, 0], [0, 5], [5, 7]], [10, 10, 15, 5, 5, 15, 15, 10, 15], 5) == 9\n    assert candidate(10, [[9, 6], [9, 0], [9, 3], [3, 8], [6, 5], [0, 7], [8, 2], [6, 4], [4, 1]], [0, 0, 3, 0, 0, 0, 3, 0, 3, 3], 4) == 6\n    assert candidate(8, [[4, 3], [3, 6], [6, 1], [6, 7], [1, 2], [7, 0], [4, 5]], [30, 10, 10, 20, 10, 10, 30, 10], 10) == 8\n    assert candidate(4, [[2, 1], [1, 0], [0, 3]], [9, 6, 6, 9], 3) == 4\n    assert candidate(5, [[3, 4], [3, 2], [4, 0], [2, 1]], [3, 2, 2, 3, 1], 1) == 5\n    assert candidate(5, [[1, 3], [3, 4], [4, 2], [2, 0]], [27, 14, 0, 0, 4], 9) == 3\n    assert candidate(4, [[1, 2], [2, 0], [0, 3]], [3, 1, 2, 3], 1) == 4\n    assert candidate(7, [[6, 1], [6, 4], [1, 3], [3, 0], [2, 5], [4, 2]], [33, 18, 7, 22, 11, 4, 4], 11) == 5\n    assert candidate(10, [[6, 2], [5, 2], [0, 3], [0, 7], [0, 1], [6, 7], [2, 4], [8, 9], [5, 9]], [3, 0, 1, 0, 3, 3, 2, 0, 6, 3], 3) == 9\n    assert candidate(8, [[6, 1], [0, 5], [5, 7], [5, 2], [5, 4], [1, 4], [0, 3]], [15, 24, 9, 12, 0, 3, 24, 9], 12) == 5\n    assert candidate(6, [[3, 1], [3, 5], [1, 4], [1, 0], [3, 2]], [12, 12, 36, 12, 24, 36], 12) == 6\n    assert candidate(7, [[6, 4], [6, 5], [3, 1], [1, 0], [0, 2], [4, 2]], [0, 0, 0, 1, 0, 0, 1], 1) == 7\n    assert candidate(8, [[6, 1], [2, 0], [0, 7], [1, 2], [4, 5], [7, 5], [1, 3]], [1, 14, 5, 21, 18, 3, 7, 1], 7) == 5\n    assert candidate(4, [[1, 3], [1, 0], [1, 2]], [18, 18, 9, 27], 9) == 4\n    assert candidate(5, [[1, 2], [1, 3], [3, 4], [1, 0]], [2, 3, 0, 0, 0], 1) == 5\n    assert candidate(5, [[2, 3], [2, 4], [4, 1], [2, 0]], [0, 0, 1, 0, 0], 1) == 5\n    assert candidate(6, [[1, 4], [1, 3], [1, 2], [4, 0], [2, 5]], [0, 3, 0, 0, 0, 0], 1) == 6\n    assert candidate(6, [[4, 1], [0, 2], [4, 2], [3, 5], [1, 5]], [3, 9, 6, 3, 9, 6], 3) == 6\n    assert candidate(4, [[1, 3], [0, 2], [1, 2]], [4, 1, 0, 3], 4) == 3\n    assert candidate(7, [[4, 5], [5, 2], [2, 0], [0, 6], [5, 3], [2, 1]], [15, 15, 10, 5, 2, 8, 5], 5) == 6\n    assert candidate(5, [[2, 4], [2, 0], [0, 3], [2, 1]], [36, 24, 10, 24, 2], 12) == 4\n    assert candidate(7, [[2, 4], [2, 1], [2, 5], [1, 3], [4, 0], [1, 6]], [2, 0, 2, 2, 0, 2, 0], 4) == 2\n    assert candidate(4, [[3, 2], [2, 1], [2, 0]], [6, 2, 2, 6], 8) == 1\n    assert candidate(10, [[7, 4], [7, 2], [4, 1], [6, 5], [6, 0], [7, 6], [1, 8], [9, 3], [7, 9]], [12, 4, 3, 2, 1, 18, 3, 3, 22, 20], 11) == 4\n    assert candidate(5, [[0, 3], [3, 2], [3, 1], [0, 4]], [12, 36, 36, 36, 12], 12) == 5\n    assert candidate(5, [[0, 1], [1, 2], [2, 3], [3, 4]], [3, 0, 0, 18, 3], 8) == 1\n    assert candidate(4, [[3, 2], [3, 0], [3, 1]], [9, 0, 15, 3], 9) == 3\n    assert candidate(5, [[0, 2], [0, 3], [3, 4], [1, 3]], [3, 3, 0, 0, 0], 1) == 5\n    assert candidate(5, [[1, 4], [1, 3], [0, 3], [1, 2]], [10, 2, 15, 2, 1], 5) == 3\n    assert candidate(6, [[1, 4], [4, 5], [0, 3], [1, 0], [0, 2]], [6, 9, 6, 3, 6, 3], 3) == 6\n    assert candidate(6, [[5, 1], [0, 1], [2, 4], [2, 3], [1, 4]], [21, 4, 3, 1, 3, 3], 7) == 3\n    assert candidate(6, [[5, 1], [1, 2], [5, 3], [1, 4], [2, 0]], [0, 4, 0, 2, 0, 2], 4) == 5\n    assert candidate(10, [[3, 6], [3, 4], [6, 0], [3, 9], [5, 7], [6, 5], [0, 2], [6, 1], [9, 8]], [0, 12, 12, 3, 9, 8, 3, 4, 12, 3], 6) == 6\n    assert candidate(7, [[0, 2], [2, 5], [2, 3], [5, 4], [2, 1], [3, 6]], [9, 9, 3, 6, 3, 0, 0], 10) == 2\n    assert candidate(6, [[4, 1], [4, 5], [4, 2], [4, 0], [3, 1]], [0, 6, 6, 22, 2, 8], 11) == 3\n    assert candidate(8, [[2, 7], [1, 4], [2, 4], [4, 3], [2, 5], [7, 0], [7, 6]], [12, 3, 12, 4, 1, 8, 12, 12], 4) == 7\n    assert candidate(5, [[0, 3], [0, 1], [0, 2], [0, 4]], [3, 3, 0, 18, 0], 8) == 3\n    assert candidate(4, [[2, 0], [2, 1], [0, 3]], [10, 15, 5, 15], 5) == 4\n    assert candidate(7, [[2, 5], [5, 1], [5, 4], [1, 6], [4, 3], [3, 0]], [0, 0, 6, 2, 0, 2, 2], 6) == 3\n    assert candidate(8, [[5, 2], [2, 4], [5, 1], [5, 3], [1, 0], [2, 6], [2, 7]], [18, 9, 9, 9, 27, 9, 9, 18], 9) == 8\n    assert candidate(7, [[5, 6], [6, 4], [5, 2], [6, 3], [1, 0], [5, 1]], [9, 21, 6, 20, 2, 8, 4], 10) == 3\n    assert candidate(8, [[3, 1], [3, 0], [0, 4], [3, 5], [7, 6], [1, 6], [6, 2]], [10, 10, 5, 15, 5, 15, 3, 2], 5) == 7\n    assert candidate(5, [[2, 4], [2, 1], [2, 0], [0, 3]], [1, 2, 1, 0, 2], 6) == 2\n    assert candidate(8, [[1, 0], [0, 2], [0, 6], [2, 5], [1, 3], [2, 4], [2, 7]], [0, 3, 18, 9, 0, 0, 0, 3], 11) == 4\n    assert candidate(9, [[5, 0], [2, 4], [0, 2], [2, 3], [4, 1], [2, 7], [8, 6], [0, 8]], [10, 10, 2, 20, 18, 20, 6, 10, 24], 10) == 7\n    assert candidate(10, [[0, 9], [9, 7], [1, 4], [0, 4], [8, 2], [4, 2], [2, 3], [3, 5], [0, 6]], [6, 4, 6, 18, 8, 18, 12, 18, 6, 12], 6) == 9\n    assert candidate(7, [[4, 2], [6, 4], [5, 3], [3, 1], [4, 5], [2, 0]], [9, 3, 0, 9, 9, 15, 18], 9) == 5\n    assert candidate(5, [[2, 3], [3, 1], [3, 0], [1, 4]], [0, 0, 3, 0, 3], 2) == 2\n    assert candidate(10, [[3, 6], [4, 3], [0, 8], [0, 5], [8, 9], [0, 1], [8, 7], [5, 2], [3, 8]], [6, 6, 0, 4, 7, 0, 3, 0, 3, 6], 7) == 6\n    assert candidate(6, [[2, 3], [4, 5], [4, 1], [2, 4], [2, 0]], [20, 0, 30, 30, 12, 8], 10) == 5\n    assert candidate(9, [[5, 7], [5, 4], [5, 6], [7, 2], [7, 1], [4, 3], [2, 0], [3, 8]], [6, 6, 6, 18, 6, 12, 18, 6, 6], 6) == 9\n\ndef test_check():\n    check(maxKDivisibleComponents)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3079_minOperationsQueries", "language": "py", "prompt": "from typing import List\n\ndef minOperationsQueries(n: int, edges: List[List[int]], queries: List[List[int]]) -> List[int]:\n    \"\"\"There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value.\nNote that:\n * Queries are independent of each other, meaning that the tree returns to its initial state on each new query.\n * The path from ai to bi is a sequence of distinct nodes starting with node ai and ending with node bi such that every two adjacent nodes in the sequence share an edge in the tree.\nReturn an array answer of length m where answer[i] is the answer to the ith query.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/11/graph-6-1.png]\nInput: n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]\nOutput: [0,0,1,3]\nExplanation: In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\nIn the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\nIn the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\nIn the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/11/graph-9-1.png]\nInput: n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]\nOutput: [1,2,2,3]\nExplanation: In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\nIn the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\nIn the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\nIn the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.\nConstraints:\n * 1 <= n <= 104\n * edges.length == n - 1\n * edges[i].length == 3\n * 0 <= ui, vi < n\n * 1 <= wi <= 26\n * The input is generated such that edges represents a valid tree.\n * 1 <= queries.length == m <= 2 * 104\n * queries[i].length == 2\n * 0 <= ai, bi < n\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3079_minOperationsQueries.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(7, [[0, 1, 1], [1, 2, 1], [2, 3, 1], [3, 4, 2], [4, 5, 2], [5, 6, 2]], [[0, 3], [3, 6], [2, 6], [0, 6]]) == [0, 0, 1, 3]\n    assert candidate(8, [[1, 2, 6], [1, 3, 4], [2, 4, 6], [2, 5, 3], [3, 6, 6], [3, 0, 8], [7, 0, 2]], [[4, 6], [0, 4], [6, 5], [7, 4]]) == [1, 2, 2, 3]\n    assert candidate(1, [], [[0, 0]]) == [0]\n    assert candidate(2, [[0, 1, 26]], [[0, 1], [0, 0], [1, 1]]) == [0, 0, 0]\n    assert candidate(3, [[2, 1, 1], [2, 0, 2]], [[0, 1], [0, 2], [1, 2], [0, 0], [1, 1], [2, 2]]) == [1, 0, 0, 0, 0, 0]\n    assert candidate(6, [[1, 3, 3], [4, 1, 3], [0, 3, 5], [5, 4, 2], [2, 5, 1]], [[2, 1], [2, 0], [3, 0], [2, 2], [2, 5], [4, 1], [5, 2]]) == [2, 3, 0, 0, 0, 0, 0]\n    assert candidate(7, [[2, 1, 2], [4, 2, 4], [5, 2, 4], [3, 4, 5], [6, 3, 5], [0, 6, 5]], [[4, 4], [6, 2], [3, 4], [6, 1], [2, 0], [4, 2], [5, 0], [3, 2], [3, 5]]) == [0, 1, 0, 2, 1, 0, 2, 1, 1]\n    assert candidate(5, [[1, 2, 1], [4, 1, 5], [3, 2, 3], [0, 1, 2]], [[1, 2], [0, 4], [0, 0], [4, 3], [4, 2], [0, 2], [3, 3], [3, 2]]) == [0, 1, 0, 2, 1, 1, 0, 0]\n    assert candidate(10, [[9, 7, 1], [5, 9, 2], [0, 9, 4], [3, 9, 5], [1, 9, 5], [4, 0, 4], [2, 0, 2], [8, 7, 4], [6, 3, 2]], [[4, 3], [8, 1], [9, 6], [7, 0], [1, 1], [5, 0], [4, 8], [3, 6], [8, 2], [9, 7]]) == [1, 2, 1, 1, 0, 1, 1, 0, 2, 0]\n    assert candidate(10, [[7, 1, 2], [9, 7, 3], [8, 7, 1], [3, 7, 4], [4, 8, 2], [5, 7, 2], [6, 4, 5], [0, 1, 4], [2, 1, 5]], [[0, 4], [9, 6], [8, 0], [2, 6], [5, 9], [3, 2], [4, 1], [9, 4]]) == [2, 3, 2, 3, 1, 2, 1, 2]\n    assert candidate(5, [[4, 2, 4], [3, 4, 3], [0, 4, 1], [1, 3, 1]], [[4, 3], [3, 1], [1, 1], [4, 2], [1, 4], [2, 3], [3, 3], [4, 1]]) == [0, 0, 0, 0, 1, 1, 0, 1]\n    assert candidate(6, [[4, 0, 4], [1, 0, 5], [3, 4, 4], [5, 0, 4], [2, 4, 4]], [[4, 4], [1, 2], [4, 0], [0, 4], [4, 3], [1, 4], [3, 2], [3, 5], [5, 2]]) == [0, 1, 0, 0, 0, 1, 0, 0, 0]\n    assert candidate(6, [[4, 3, 2], [5, 3, 2], [1, 4, 5], [0, 4, 2], [2, 1, 1]], [[0, 4], [2, 1], [5, 4], [2, 0], [4, 2], [4, 5], [3, 3], [5, 0], [3, 5], [5, 2]]) == [0, 0, 0, 2, 1, 0, 0, 0, 0, 2]\n    assert candidate(5, [[0, 1, 5], [2, 0, 1], [3, 0, 1], [4, 2, 1]], [[2, 1], [4, 3], [4, 2], [1, 4], [0, 2], [2, 2], [3, 2], [1, 3]]) == [1, 0, 0, 1, 0, 0, 0, 1]\n    assert candidate(9, [[6, 2, 1], [5, 2, 1], [4, 2, 2], [7, 4, 4], [1, 7, 4], [0, 1, 4], [3, 2, 2], [8, 3, 1]], [[4, 4], [7, 4], [2, 4], [6, 2], [1, 1], [6, 8], [5, 7], [4, 2], [2, 6]]) == [0, 0, 0, 0, 0, 1, 2, 0, 0]\n    assert candidate(8, [[6, 1, 2], [2, 1, 5], [3, 6, 1], [7, 1, 3], [5, 7, 4], [4, 7, 5], [0, 5, 5]], [[4, 0], [7, 1], [3, 4], [4, 6], [5, 7], [4, 5], [3, 3], [0, 2], [7, 2], [1, 0]]) == [1, 0, 3, 2, 0, 1, 0, 2, 1, 2]\n    assert candidate(10, [[5, 3, 5], [6, 3, 1], [1, 6, 4], [2, 6, 3], [9, 1, 5], [4, 3, 5], [7, 3, 4], [0, 1, 1], [8, 6, 4]], [[6, 5], [6, 8], [0, 3], [5, 1], [5, 7], [2, 3], [7, 9], [9, 8], [5, 9], [3, 5]]) == [1, 0, 1, 2, 1, 1, 2, 1, 2, 0]\n    assert candidate(5, [[0, 3, 2], [4, 3, 2], [2, 3, 3], [1, 4, 5]], [[2, 1], [0, 0], [4, 3], [1, 1], [2, 0], [3, 0], [2, 3], [1, 0]]) == [2, 0, 0, 0, 1, 0, 0, 1]\n    assert candidate(7, [[1, 2, 4], [3, 2, 4], [6, 2, 4], [0, 6, 5], [4, 6, 1], [5, 1, 5]], [[4, 4], [5, 5], [0, 4], [0, 0], [5, 4], [5, 1], [2, 3], [2, 2], [3, 2], [4, 1]]) == [0, 0, 1, 0, 2, 0, 0, 0, 0, 1]\n    assert candidate(10, [[7, 0, 2], [4, 0, 2], [6, 7, 3], [1, 6, 4], [9, 1, 3], [8, 1, 4], [3, 6, 3], [2, 7, 5], [5, 7, 5]], [[6, 2], [0, 4], [5, 1], [2, 3], [4, 7], [8, 9], [4, 8], [9, 1], [6, 3], [1, 9]]) == [1, 0, 2, 1, 0, 1, 3, 0, 0, 0]\n    assert candidate(9, [[1, 5, 4], [4, 5, 1], [0, 4, 2], [8, 0, 2], [6, 1, 5], [3, 8, 5], [2, 3, 2], [7, 5, 2]], [[0, 1], [0, 4], [3, 1], [1, 1], [5, 4], [7, 0], [5, 1], [8, 0], [0, 3], [4, 7]]) == [2, 0, 3, 0, 0, 1, 0, 0, 1, 1]\n    assert candidate(10, [[4, 8, 4], [5, 4, 3], [6, 5, 3], [7, 4, 3], [2, 8, 5], [9, 4, 4], [1, 6, 1], [3, 9, 5], [0, 8, 2]], [[8, 8], [9, 0], [6, 2], [2, 1], [7, 7], [8, 7], [9, 6], [5, 0], [7, 5]]) == [0, 1, 2, 3, 0, 1, 1, 2, 0]\n    assert candidate(10, [[4, 3, 1], [9, 3, 1], [2, 3, 5], [1, 4, 2], [5, 4, 2], [0, 2, 5], [7, 1, 3], [6, 2, 2], [8, 0, 4]], [[0, 7], [9, 3], [5, 8], [9, 6], [5, 7], [1, 4], [2, 9], [0, 8], [3, 5]]) == [3, 0, 3, 2, 1, 0, 1, 0, 1]\n    assert candidate(10, [[4, 0, 1], [7, 4, 1], [3, 0, 3], [1, 7, 4], [6, 7, 1], [9, 7, 5], [5, 4, 5], [2, 9, 1], [8, 9, 2]], [[6, 2], [8, 1], [1, 1], [6, 4], [2, 9], [5, 0], [2, 5], [9, 7], [1, 9], [2, 8]]) == [1, 2, 0, 0, 0, 1, 2, 0, 1, 1]\n    assert candidate(7, [[6, 5, 4], [0, 5, 5], [4, 0, 1], [1, 6, 4], [3, 1, 5], [2, 3, 1]], [[4, 1], [0, 2], [3, 3], [2, 6], [5, 6], [0, 5], [5, 3], [1, 3], [5, 2]]) == [2, 3, 0, 2, 0, 0, 1, 0, 2]\n    assert candidate(7, [[2, 3, 2], [4, 2, 2], [0, 2, 4], [5, 3, 5], [6, 3, 2], [1, 3, 4]], [[6, 2], [4, 6], [2, 0], [3, 0], [0, 2], [0, 5], [5, 3], [3, 5]]) == [0, 0, 0, 1, 0, 2, 0, 0]\n    assert candidate(9, [[7, 6, 2], [3, 7, 5], [4, 3, 4], [2, 6, 5], [8, 4, 5], [5, 2, 3], [1, 2, 4], [0, 6, 2]], [[4, 4], [3, 8], [0, 4], [8, 1], [3, 1], [7, 0], [4, 5], [3, 6], [4, 7]]) == [0, 1, 2, 3, 2, 0, 3, 1, 1]\n    assert candidate(6, [[4, 1, 3], [2, 4, 4], [5, 2, 5], [3, 1, 5], [0, 4, 2]], [[3, 4], [4, 3], [0, 3], [4, 2], [3, 0], [3, 3], [5, 3], [5, 2]]) == [1, 1, 2, 0, 2, 0, 2, 0]\n    assert candidate(8, [[0, 3, 3], [4, 0, 5], [5, 4, 2], [6, 3, 1], [1, 3, 3], [2, 3, 2], [7, 3, 4]], [[6, 2], [4, 0], [3, 4], [2, 7], [4, 3], [7, 0], [7, 3], [7, 6], [6, 3], [4, 1]]) == [1, 0, 1, 1, 1, 1, 0, 1, 0, 1]\n    assert candidate(5, [[0, 3, 2], [2, 0, 2], [4, 3, 3], [1, 2, 3]], [[0, 1], [2, 1], [4, 3], [1, 4], [2, 3], [0, 2], [3, 3], [3, 2], [1, 3]]) == [1, 0, 0, 2, 0, 0, 0, 0, 1]\n    assert candidate(10, [[8, 0, 5], [6, 0, 4], [7, 6, 3], [3, 7, 5], [5, 3, 5], [2, 8, 5], [1, 8, 4], [4, 6, 3], [9, 4, 4]], [[9, 0], [3, 4], [6, 5], [0, 3], [2, 3], [1, 7], [7, 6], [5, 0], [2, 5]]) == [1, 1, 1, 2, 2, 2, 0, 2, 2]\n    assert candidate(9, [[2, 3, 1], [4, 2, 1], [1, 3, 3], [0, 4, 3], [5, 2, 3], [7, 2, 1], [8, 5, 3], [6, 4, 2]], [[7, 7], [4, 3], [3, 1], [5, 4], [1, 8], [1, 4], [7, 3], [7, 6], [8, 2], [3, 5]]) == [0, 0, 0, 1, 1, 1, 0, 1, 0, 1]\n    assert candidate(5, [[4, 1, 4], [3, 1, 5], [0, 4, 3], [2, 1, 4]], [[0, 1], [2, 4], [1, 2], [0, 4], [3, 4], [0, 0], [1, 1]]) == [1, 0, 0, 0, 1, 0, 0]\n    assert candidate(4, [[1, 2, 4], [3, 2, 5], [0, 1, 5]], [[1, 2], [3, 1], [1, 1], [2, 0], [3, 0], [3, 3]]) == [0, 1, 0, 1, 1, 0]\n    assert candidate(4, [[1, 2, 3], [0, 2, 1], [3, 2, 5]], [[3, 1], [1, 1], [3, 0], [2, 3], [3, 3], [2, 2], [1, 0], [3, 2]]) == [1, 0, 1, 0, 0, 0, 1, 0]\n    assert candidate(8, [[4, 6, 3], [7, 4, 1], [3, 7, 4], [1, 4, 1], [0, 6, 4], [5, 7, 3], [2, 1, 3]], [[2, 4], [6, 2], [7, 1], [5, 1], [4, 2], [1, 7], [1, 3], [3, 5]]) == [1, 1, 0, 1, 1, 0, 1, 1]\n    assert candidate(9, [[1, 7, 4], [5, 1, 2], [6, 1, 4], [2, 5, 2], [3, 2, 5], [8, 3, 2], [0, 3, 2], [4, 5, 2]], [[7, 4], [4, 0], [3, 4], [6, 1], [0, 3], [3, 3], [6, 0], [5, 3], [3, 2], [6, 3]]) == [1, 1, 1, 0, 0, 0, 2, 1, 0, 2]\n    assert candidate(5, [[0, 3, 4], [2, 0, 5], [4, 2, 1], [1, 4, 4]], [[0, 1], [0, 4], [4, 1], [2, 0], [4, 2], [0, 2], [3, 3], [1, 0], [1, 3]]) == [2, 1, 0, 0, 0, 0, 0, 2, 2]\n    assert candidate(8, [[5, 4, 1], [0, 5, 3], [2, 0, 5], [3, 5, 4], [7, 2, 4], [1, 7, 5], [6, 5, 2]], [[2, 4], [4, 0], [6, 5], [5, 4], [5, 1], [0, 6], [6, 0], [3, 5]]) == [2, 1, 0, 0, 2, 1, 1, 0]\n    assert candidate(8, [[4, 2, 3], [3, 2, 3], [6, 3, 3], [7, 4, 5], [5, 3, 4], [0, 6, 5], [1, 5, 3]], [[0, 1], [2, 4], [3, 4], [4, 2], [7, 3], [4, 5], [3, 6], [6, 6], [6, 3]]) == [2, 0, 0, 0, 1, 1, 0, 0, 0]\n    assert candidate(10, [[2, 4, 2], [1, 2, 4], [5, 2, 1], [0, 1, 1], [9, 4, 4], [7, 9, 1], [3, 9, 5], [8, 5, 1], [6, 2, 5]], [[1, 2], [4, 0], [8, 4], [0, 3], [6, 7], [3, 3], [1, 6], [3, 2], [9, 1], [7, 8]]) == [0, 2, 1, 3, 3, 0, 1, 2, 1, 2]\n    assert candidate(5, [[0, 1, 5], [4, 1, 5], [3, 4, 4], [2, 0, 2]], [[2, 4], [1, 2], [0, 4], [3, 4], [0, 0], [4, 3], [1, 1], [1, 4], [3, 0], [0, 2]]) == [1, 1, 0, 0, 0, 0, 0, 0, 1, 0]\n    assert candidate(8, [[0, 2, 5], [7, 2, 2], [1, 7, 4], [5, 0, 1], [4, 2, 2], [3, 2, 3], [6, 4, 3]], [[7, 4], [0, 4], [6, 5], [0, 0], [6, 1], [2, 0], [5, 7], [7, 2], [2, 2], [1, 0]]) == [0, 1, 3, 0, 2, 0, 2, 0, 0, 2]\n    assert candidate(8, [[7, 5, 4], [0, 5, 3], [6, 7, 5], [3, 0, 3], [2, 6, 3], [4, 2, 4], [1, 4, 3]], [[5, 5], [7, 1], [3, 4], [2, 7], [4, 3], [6, 1], [1, 4], [3, 0], [6, 0]]) == [0, 2, 3, 1, 3, 1, 0, 0, 2]\n    assert candidate(5, [[4, 0, 4], [2, 4, 4], [3, 2, 1], [1, 4, 4]], [[0, 1], [0, 4], [3, 4], [4, 3], [1, 1], [1, 4], [0, 2], [3, 3], [1, 3]]) == [0, 0, 1, 1, 0, 0, 0, 0, 1]\n    assert candidate(4, [[0, 2, 1], [3, 2, 2], [1, 2, 1]], [[0, 3], [2, 3], [0, 2], [3, 3], [2, 2], [1, 0]]) == [1, 0, 0, 0, 0, 0]\n    assert candidate(5, [[4, 2, 5], [1, 4, 5], [0, 4, 4], [3, 4, 4]], [[0, 1], [0, 4], [3, 1], [0, 3], [4, 2], [3, 0], [1, 4], [1, 0]]) == [1, 0, 1, 0, 0, 0, 0, 1]\n    assert candidate(4, [[1, 3, 4], [2, 3, 5], [0, 3, 2]], [[1, 2], [0, 3], [2, 0], [3, 0], [0, 2], [2, 2], [3, 2], [1, 3]]) == [1, 0, 1, 0, 1, 0, 0, 0]\n    assert candidate(9, [[5, 8, 2], [3, 8, 3], [6, 5, 3], [7, 5, 3], [1, 6, 1], [0, 8, 1], [4, 5, 2], [2, 1, 4]], [[8, 8], [3, 4], [6, 5], [2, 7], [8, 1], [6, 7], [2, 5], [3, 5]]) == [0, 1, 0, 2, 2, 0, 2, 1]\n    assert candidate(10, [[4, 5, 5], [1, 4, 3], [8, 4, 5], [2, 1, 3], [0, 1, 2], [6, 0, 1], [7, 0, 1], [3, 7, 4], [9, 2, 1]], [[3, 8], [1, 5], [0, 3], [4, 6], [4, 2], [2, 3], [6, 3], [2, 5], [9, 1], [1, 9]]) == [4, 1, 1, 2, 0, 3, 1, 1, 1, 1]\n    assert candidate(8, [[0, 5, 5], [2, 0, 2], [3, 5, 2], [1, 5, 1], [7, 1, 5], [4, 0, 4], [6, 2, 4]], [[7, 4], [0, 4], [7, 1], [6, 4], [5, 0], [5, 6], [2, 2], [2, 5]]) == [2, 0, 0, 1, 0, 2, 0, 1]\n    assert candidate(9, [[0, 3, 1], [4, 0, 5], [8, 4, 5], [5, 8, 4], [1, 4, 3], [6, 4, 4], [7, 0, 1], [2, 5, 5]], [[1, 2], [8, 4], [2, 1], [6, 5], [3, 4], [4, 0], [2, 0], [6, 0], [7, 8], [2, 8]]) == [2, 0, 2, 1, 1, 0, 1, 1, 1, 1]\n    assert candidate(5, [[1, 2, 5], [4, 2, 5], [0, 4, 2], [3, 1, 1]], [[0, 4], [0, 0], [4, 3], [1, 4], [3, 0], [2, 3], [2, 2], [1, 0], [1, 3]]) == [0, 0, 1, 0, 2, 1, 0, 1, 0]\n    assert candidate(7, [[4, 1, 3], [5, 4, 5], [0, 1, 2], [2, 4, 3], [3, 4, 2], [6, 1, 5]], [[2, 4], [4, 0], [1, 2], [3, 4], [1, 5], [6, 1], [2, 0], [3, 5]]) == [0, 1, 0, 0, 1, 0, 1, 1]\n    assert candidate(9, [[8, 5, 5], [0, 5, 3], [4, 5, 3], [6, 5, 2], [1, 0, 2], [3, 6, 4], [2, 4, 2], [7, 3, 3]], [[0, 4], [7, 7], [1, 5], [8, 7], [1, 1], [5, 1], [2, 3], [8, 3], [3, 6], [3, 2]]) == [0, 0, 1, 3, 0, 1, 2, 2, 0, 2]\n    assert candidate(9, [[6, 3, 1], [1, 6, 1], [8, 3, 2], [7, 1, 1], [0, 8, 2], [5, 3, 2], [4, 3, 5], [2, 6, 4]], [[8, 1], [8, 7], [6, 1], [7, 3], [1, 0], [1, 6], [0, 8], [1, 3], [5, 2]]) == [1, 1, 0, 0, 2, 0, 0, 0, 2]\n    assert candidate(9, [[2, 0, 1], [5, 0, 1], [3, 2, 4], [4, 5, 2], [1, 4, 3], [7, 3, 5], [6, 1, 1], [8, 5, 5]], [[4, 0], [7, 1], [6, 5], [4, 1], [8, 7], [5, 7], [2, 3], [1, 7], [1, 3], [5, 2]]) == [1, 4, 2, 0, 3, 2, 0, 4, 3, 0]\n    assert candidate(5, [[3, 4, 2], [2, 3, 2], [0, 4, 3], [1, 0, 1]], [[4, 4], [0, 1], [4, 0], [1, 2], [0, 0], [1, 4], [2, 3], [0, 2]]) == [0, 0, 0, 2, 0, 1, 0, 1]\n    assert candidate(4, [[3, 2, 1], [0, 3, 2], [1, 3, 4]], [[0, 1], [1, 2], [3, 1], [1, 1], [2, 0], [0, 2], [2, 2], [1, 0]]) == [1, 1, 0, 0, 1, 1, 0, 1]\n    assert candidate(5, [[0, 2, 2], [4, 0, 5], [3, 2, 2], [1, 3, 3]], [[2, 4], [1, 2], [0, 0], [0, 3], [4, 2], [3, 0], [1, 0], [3, 2], [1, 3]]) == [1, 1, 0, 0, 1, 0, 1, 0, 0]\n    assert candidate(7, [[5, 2, 2], [3, 5, 2], [1, 5, 2], [0, 3, 4], [6, 2, 2], [4, 0, 4]], [[1, 5], [2, 0], [6, 4], [0, 5], [2, 2], [5, 3], [1, 3], [3, 5]]) == [0, 1, 2, 1, 0, 0, 0, 0]\n    assert candidate(4, [[0, 3, 3], [1, 3, 1], [2, 1, 2]], [[0, 1], [1, 2], [2, 1], [0, 0], [3, 1], [1, 1], [0, 2], [2, 2], [1, 0], [3, 2]]) == [1, 0, 0, 0, 0, 0, 2, 0, 1, 1]\n    assert candidate(6, [[0, 5, 3], [2, 5, 4], [4, 5, 1], [3, 4, 4], [1, 3, 5]], [[4, 4], [2, 1], [4, 1], [3, 1], [0, 3], [2, 2], [1, 0], [1, 3]]) == [0, 2, 1, 0, 2, 0, 3, 0]\n    assert candidate(8, [[0, 7, 1], [4, 7, 4], [3, 7, 5], [1, 3, 2], [5, 4, 3], [2, 3, 3], [6, 0, 4]], [[4, 4], [7, 4], [1, 2], [7, 7], [0, 0], [6, 1], [0, 6], [2, 6], [4, 1], [4, 7]]) == [0, 0, 1, 0, 0, 3, 0, 3, 2, 0]\n    assert candidate(5, [[0, 3, 3], [2, 0, 1], [1, 2, 5], [4, 0, 3]], [[0, 4], [2, 1], [3, 4], [0, 0], [4, 3], [3, 1], [1, 1], [0, 2], [4, 1]]) == [0, 0, 0, 0, 0, 2, 0, 0, 2]\n    assert candidate(7, [[4, 1, 3], [2, 1, 2], [0, 4, 3], [6, 0, 3], [3, 4, 2], [5, 0, 5]], [[0, 1], [6, 2], [5, 4], [1, 4], [3, 0], [0, 2], [5, 6], [3, 6], [1, 0], [6, 3]]) == [0, 1, 1, 0, 1, 1, 1, 1, 0, 1]\n    assert candidate(9, [[8, 0, 4], [4, 8, 5], [1, 8, 1], [7, 0, 2], [2, 7, 4], [3, 0, 1], [6, 0, 1], [5, 2, 1]], [[4, 4], [0, 4], [3, 4], [2, 7], [0, 0], [8, 7], [8, 6], [0, 5], [6, 6], [8, 5]]) == [0, 1, 2, 0, 0, 1, 1, 2, 0, 2]\n    assert candidate(9, [[0, 4, 2], [5, 4, 3], [8, 5, 1], [2, 5, 5], [7, 2, 5], [1, 0, 5], [3, 4, 1], [6, 2, 5]], [[6, 5], [8, 1], [0, 0], [1, 4], [7, 3], [8, 6], [4, 8], [1, 0], [3, 5]]) == [0, 3, 0, 1, 2, 1, 1, 0, 1]\n    assert candidate(7, [[0, 5, 2], [2, 5, 5], [4, 2, 3], [3, 5, 2], [6, 3, 5], [1, 3, 4]], [[0, 1], [3, 4], [4, 1], [4, 2], [3, 0], [4, 5], [0, 5], [3, 2], [1, 3]]) == [1, 2, 3, 0, 0, 1, 0, 1, 0]\n    assert candidate(9, [[0, 6, 3], [1, 0, 1], [4, 1, 5], [3, 1, 4], [2, 3, 4], [5, 6, 2], [8, 0, 2], [7, 5, 4]], [[7, 4], [3, 8], [8, 4], [2, 1], [6, 8], [1, 4], [7, 6], [4, 1], [7, 8], [5, 2]]) == [4, 2, 2, 0, 1, 0, 1, 0, 2, 3]\n    assert candidate(6, [[0, 4, 5], [1, 0, 3], [5, 0, 5], [2, 1, 3], [3, 4, 2]], [[1, 2], [5, 5], [4, 3], [2, 0], [5, 1], [0, 5], [5, 3], [5, 2]]) == [0, 0, 0, 0, 1, 0, 1, 1]\n    assert candidate(10, [[6, 7, 1], [5, 7, 1], [0, 5, 1], [8, 7, 2], [3, 6, 2], [4, 8, 2], [1, 3, 1], [2, 6, 4], [9, 6, 5]], [[0, 7], [7, 7], [4, 3], [4, 9], [9, 8], [0, 5], [9, 1], [4, 7], [9, 4]]) == [0, 0, 1, 2, 2, 0, 2, 0, 2]\n    assert candidate(4, [[3, 0, 5], [1, 0, 5], [2, 0, 5]], [[0, 1], [1, 2], [2, 1], [3, 1], [1, 1], [3, 0], [2, 3]]) == [0, 0, 0, 0, 0, 0, 0]\n    assert candidate(9, [[6, 8, 4], [7, 6, 2], [1, 7, 1], [4, 6, 4], [0, 7, 2], [5, 4, 5], [3, 5, 2], [2, 0, 5]], [[4, 3], [6, 4], [1, 4], [2, 2], [7, 5], [1, 3], [7, 8], [0, 8]]) == [1, 0, 2, 0, 2, 3, 1, 1]\n    assert candidate(8, [[5, 3, 1], [0, 5, 3], [1, 5, 2], [7, 3, 5], [4, 0, 2], [6, 4, 4], [2, 0, 1]], [[0, 7], [2, 7], [5, 4], [4, 6], [5, 1], [0, 2], [5, 0], [5, 6], [2, 2], [1, 6]]) == [2, 2, 1, 0, 0, 0, 0, 2, 0, 2]\n    assert candidate(7, [[2, 5, 2], [6, 2, 1], [3, 6, 2], [1, 5, 1], [4, 3, 3], [0, 2, 2]], [[0, 4], [2, 1], [6, 1], [5, 4], [0, 3], [6, 4], [0, 5], [3, 2], [6, 3]]) == [2, 1, 1, 2, 1, 1, 0, 1, 0]\n    assert candidate(7, [[2, 3, 5], [6, 2, 1], [0, 3, 4], [1, 0, 4], [5, 1, 1], [4, 2, 1]], [[4, 4], [0, 4], [3, 4], [0, 0], [1, 1], [0, 3], [0, 6], [0, 2], [3, 3], [6, 0]]) == [0, 2, 1, 0, 0, 0, 2, 1, 0, 2]\n    assert candidate(6, [[0, 2, 2], [4, 2, 1], [5, 4, 5], [1, 0, 4], [3, 4, 5]], [[0, 4], [3, 4], [3, 1], [1, 1], [5, 4], [2, 0], [2, 2], [5, 2]]) == [1, 0, 3, 0, 0, 0, 0, 1]\n    assert candidate(9, [[3, 7, 2], [1, 7, 3], [4, 3, 5], [6, 4, 3], [8, 1, 2], [5, 1, 2], [2, 6, 1], [0, 5, 2]], [[3, 8], [2, 4], [8, 1], [6, 8], [7, 3], [3, 0], [1, 0], [8, 2], [7, 5], [8, 5]]) == [1, 1, 0, 3, 0, 1, 0, 4, 1, 0]\n    assert candidate(9, [[1, 4, 3], [3, 4, 3], [8, 4, 4], [7, 1, 5], [2, 7, 3], [5, 8, 4], [6, 7, 4], [0, 2, 4]], [[4, 4], [0, 7], [1, 8], [8, 3], [3, 3], [5, 0], [7, 6], [6, 6], [2, 5], [4, 1]]) == [0, 1, 1, 1, 0, 3, 0, 0, 3, 0]\n    assert candidate(9, [[6, 5, 3], [3, 5, 3], [2, 5, 5], [1, 5, 2], [8, 2, 3], [7, 6, 3], [4, 7, 2], [0, 7, 4]], [[2, 4], [8, 1], [8, 7], [6, 1], [4, 6], [0, 3], [3, 2], [3, 0], [0, 8], [3, 5]]) == [2, 2, 1, 1, 1, 1, 1, 1, 2, 0]\n    assert candidate(6, [[3, 5, 4], [4, 3, 5], [0, 5, 2], [1, 4, 3], [2, 5, 4]], [[1, 2], [1, 5], [5, 4], [5, 1], [1, 4], [0, 2], [0, 5], [2, 5], [1, 3], [5, 2]]) == [2, 2, 1, 2, 0, 1, 0, 0, 1, 0]\n    assert candidate(5, [[3, 0, 1], [2, 3, 1], [4, 2, 1], [1, 0, 3]], [[4, 0], [3, 4], [4, 3], [3, 1], [2, 0], [3, 3], [3, 2], [1, 3]]) == [0, 0, 0, 1, 0, 0, 0, 1]\n    assert candidate(6, [[4, 2, 1], [3, 4, 4], [1, 2, 5], [5, 2, 3], [0, 3, 5]], [[5, 5], [0, 4], [3, 1], [5, 4], [0, 3], [1, 4], [0, 5], [3, 2], [2, 5]]) == [0, 1, 2, 1, 0, 1, 3, 1, 0]\n    assert candidate(6, [[3, 5, 2], [1, 3, 5], [2, 3, 4], [0, 1, 5], [4, 1, 3]], [[0, 1], [1, 1], [5, 3], [5, 1], [4, 5], [0, 2], [3, 3], [0, 5], [1, 0], [3, 5]]) == [0, 0, 0, 1, 2, 1, 0, 1, 0, 0]\n    assert candidate(7, [[2, 3, 3], [1, 2, 1], [0, 3, 5], [5, 1, 2], [6, 5, 4], [4, 6, 2]], [[6, 2], [4, 0], [0, 4], [2, 3], [0, 2], [3, 3], [5, 0], [0, 5], [1, 3], [3, 5]]) == [2, 4, 4, 0, 1, 0, 3, 3, 1, 2]\n    assert candidate(7, [[2, 5, 1], [1, 2, 2], [3, 2, 4], [0, 5, 1], [4, 5, 1], [6, 3, 2]], [[2, 4], [3, 1], [0, 3], [5, 1], [4, 2], [5, 0], [2, 2], [1, 3]]) == [0, 1, 1, 1, 0, 0, 0, 1]\n    assert candidate(8, [[5, 6, 2], [7, 6, 1], [3, 5, 2], [1, 6, 3], [0, 1, 1], [4, 6, 5], [2, 7, 3]], [[6, 2], [7, 1], [7, 7], [4, 2], [3, 0], [2, 3], [7, 6], [5, 3], [7, 5]]) == [1, 1, 0, 2, 2, 2, 0, 0, 1]\n    assert candidate(5, [[3, 1, 5], [0, 1, 3], [2, 3, 5], [4, 3, 3]], [[0, 1], [4, 0], [0, 4], [4, 3], [0, 3], [1, 4], [0, 2], [3, 3], [2, 2], [1, 3]]) == [0, 1, 1, 0, 1, 1, 1, 0, 0, 0]\n    assert candidate(6, [[2, 0, 1], [1, 0, 1], [3, 2, 5], [5, 2, 4], [4, 2, 4]], [[2, 4], [3, 4], [0, 0], [4, 1], [0, 3], [5, 1], [0, 2], [4, 5], [0, 5], [1, 3]]) == [0, 1, 0, 1, 1, 1, 0, 0, 1, 1]\n    assert candidate(10, [[2, 9, 2], [5, 2, 3], [7, 5, 1], [0, 5, 1], [8, 2, 3], [4, 9, 3], [3, 5, 2], [1, 0, 4], [6, 4, 3]], [[9, 3], [0, 0], [9, 9], [4, 1], [9, 6], [3, 7], [4, 2], [9, 7], [5, 2]]) == [1, 0, 0, 3, 0, 1, 1, 2, 0]\n    assert candidate(5, [[4, 0, 4], [2, 0, 1], [3, 0, 4], [1, 3, 5]], [[3, 4], [0, 0], [3, 1], [2, 0], [2, 3], [3, 3], [1, 3]]) == [0, 0, 0, 0, 1, 0, 0]\n    assert candidate(8, [[5, 3, 2], [2, 3, 2], [0, 5, 4], [1, 5, 1], [4, 0, 3], [6, 1, 1], [7, 3, 3]], [[0, 1], [5, 5], [7, 7], [2, 1], [3, 1], [4, 6], [2, 0], [7, 6], [5, 3], [7, 5]]) == [1, 0, 0, 1, 1, 2, 1, 2, 0, 1]\n    assert candidate(5, [[0, 3, 1], [2, 0, 2], [1, 3, 2], [4, 1, 4]], [[0, 4], [3, 4], [0, 0], [1, 1], [2, 0], [3, 0], [2, 3], [4, 1]]) == [2, 1, 0, 0, 0, 0, 1, 0]\n    assert candidate(5, [[3, 4, 3], [0, 3, 1], [1, 4, 3], [2, 0, 1]], [[0, 1], [4, 4], [4, 0], [2, 1], [4, 3], [3, 1], [0, 2], [3, 3], [1, 3]]) == [1, 0, 1, 2, 0, 0, 0, 0, 0]\n    assert candidate(7, [[1, 0, 2], [4, 1, 5], [5, 0, 2], [6, 5, 3], [2, 5, 5], [3, 4, 3]], [[4, 4], [2, 4], [6, 4], [1, 4], [5, 0], [5, 6], [2, 2], [1, 3]]) == [0, 2, 2, 0, 0, 0, 0, 1]\n    assert candidate(9, [[6, 8, 1], [1, 6, 2], [0, 8, 2], [4, 8, 5], [3, 4, 4], [5, 8, 4], [2, 5, 2], [7, 1, 2]], [[0, 0], [8, 1], [8, 3], [1, 7], [2, 6], [3, 3], [0, 5], [2, 2], [7, 5], [2, 5]]) == [0, 1, 1, 0, 2, 0, 1, 0, 2, 0]\n    assert candidate(9, [[0, 1, 5], [8, 1, 4], [2, 8, 1], [3, 2, 1], [6, 3, 2], [4, 2, 3], [7, 8, 2], [5, 2, 3]], [[8, 8], [6, 2], [3, 7], [1, 8], [2, 0], [1, 4], [6, 3], [7, 8], [5, 2]]) == [0, 1, 1, 0, 2, 2, 0, 0, 0]\n    assert candidate(8, [[4, 5, 2], [7, 4, 2], [0, 5, 2], [6, 0, 1], [2, 6, 1], [3, 2, 1], [1, 7, 5]], [[4, 4], [3, 7], [4, 6], [5, 7], [3, 0], [0, 2], [1, 7], [3, 6], [4, 7]]) == [0, 3, 1, 0, 0, 0, 0, 0, 0]\n    assert candidate(9, [[5, 8, 1], [4, 8, 2], [1, 5, 1], [7, 8, 5], [0, 8, 2], [6, 1, 5], [2, 8, 3], [3, 1, 2]], [[6, 2], [2, 7], [5, 4], [1, 8], [5, 7], [3, 0], [6, 6], [0, 8]]) == [2, 1, 1, 0, 1, 2, 0, 0]\n\ndef test_check():\n    check(minOperationsQueries)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3080_maxSubarrays", "language": "py", "prompt": "from typing import List\n\ndef maxSubarrays(nums: List[int]) -> int:\n    \"\"\"You are given an array nums consisting of non-negative integers.\nWe define the score of subarray nums[l..r] such that l <= r as nums[l] AND nums[l + 1] AND ... AND nums[r] where AND is the bitwise AND operation.\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n * Each element of the array belongs to exactly one subarray.\n * The sum of scores of the subarrays is the minimum possible.\nReturn the maximum number of subarrays in a split that satisfies the conditions above.\nA subarray is a contiguous part of an array.\nExample 1:\nInput: nums = [1,0,2,0,1,2]\nOutput: 3\nExplanation: We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\nExample 2:\nInput: nums = [5,7,1,3]\nOutput: 1\nExplanation: We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\nConstraints:\n * 1 <= nums.length <= 105\n * 0 <= nums[i] <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3080_maxSubarrays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 0, 2, 0, 1, 2]) == 3\n    assert candidate([5, 7, 1, 3]) == 1\n    assert candidate([1, 0, 2, 1]) == 2\n    assert candidate([0]) == 1\n    assert candidate([0, 0]) == 2\n    assert candidate([100000]) == 1\n    assert candidate([1, 2, 2, 1]) == 2\n    assert candidate([30, 18, 19, 20, 11, 21, 12, 22, 26]) == 2\n    assert candidate([0, 8, 0, 0, 0, 23]) == 4\n    assert candidate([8, 10, 23, 26, 21, 28, 21, 14, 21, 14, 9, 16, 24, 29, 7, 26]) == 4\n    assert candidate([18, 12, 16, 28, 7, 15, 24, 7, 8, 26, 22, 6, 23, 7, 17, 1, 16]) == 6\n    assert candidate([22]) == 1\n    assert candidate([15, 24, 20, 28, 11, 16, 0, 0, 0, 22, 7, 18]) == 5\n    assert candidate([0, 0, 27]) == 2\n    assert candidate([18, 7, 20, 10, 0, 14, 0, 28, 7, 0, 0, 9, 12, 0]) == 6\n    assert candidate([0, 29, 16, 0, 6, 17]) == 3\n    assert candidate([4, 7, 13, 0, 23, 6, 4]) == 1\n    assert candidate([4, 27]) == 1\n    assert candidate([29, 5, 0, 25, 0, 15, 19, 24, 20, 0, 23]) == 4\n    assert candidate([24, 6]) == 1\n    assert candidate([13, 20, 16, 16, 27, 0, 7, 18, 3, 0, 23, 16, 25, 0, 5, 1, 4]) == 5\n    assert candidate([0, 0, 30, 20, 6, 13]) == 2\n    assert candidate([21, 24, 8, 8, 20, 12, 24, 28, 17, 9, 17]) == 3\n    assert candidate([0, 0, 18, 0, 0, 4, 5, 25, 0, 0, 0, 30, 0, 18, 0, 0, 12, 21, 21, 18]) == 12\n    assert candidate([12, 3, 0, 27, 23, 0, 29, 18, 0, 0, 0, 20, 29, 0, 2, 0, 17, 10, 0, 0]) == 11\n    assert candidate([26, 28, 7, 14, 24, 15, 1, 16, 5, 24, 4, 10, 24]) == 4\n    assert candidate([30, 11, 0, 9, 15, 0, 0, 0]) == 4\n    assert candidate([16, 18, 14, 6, 25, 30, 7, 0, 22, 0, 15, 0]) == 5\n    assert candidate([16, 12, 6, 21, 26, 25, 2, 0, 6, 0, 13]) == 5\n    assert candidate([13, 1, 13, 18, 2, 15, 15, 27, 3, 3, 14, 12, 23, 8, 29, 10, 29, 15, 10]) == 3\n    assert candidate([0, 29, 0, 28, 20, 0, 21, 8, 0, 0, 26, 8, 0, 0, 8, 12]) == 8\n    assert candidate([0, 18, 0, 0, 0, 22, 0, 15]) == 5\n    assert candidate([0, 30, 26]) == 1\n    assert candidate([0, 1, 3, 29, 16, 0, 0, 0, 11]) == 5\n    assert candidate([0, 10, 11, 14, 0, 19, 1, 0, 28, 10, 27, 27, 25, 17, 0, 25, 19]) == 5\n    assert candidate([18, 4, 0, 6, 0, 10, 23, 3, 26, 0]) == 4\n    assert candidate([11, 22, 22, 22, 18, 15, 8, 8, 19, 12, 20, 11]) == 3\n    assert candidate([0, 23, 0, 0, 0, 17, 0, 0]) == 6\n    assert candidate([0, 23, 0, 14, 4, 5, 23, 23, 8, 8, 15, 0, 0, 13, 6, 26, 0]) == 7\n    assert candidate([0, 3, 0, 16, 15, 0, 1, 0, 24, 16, 27, 0, 23, 15, 0, 13, 0, 0]) == 9\n    assert candidate([12, 0, 16, 0, 0, 0, 29, 18]) == 4\n    assert candidate([0, 27, 15, 13]) == 1\n    assert candidate([15, 10, 0, 2, 0, 3, 8, 0, 0, 26, 25, 27, 0, 0, 0, 28, 0, 10, 27, 3]) == 9\n    assert candidate([11, 10, 12, 6, 15, 25, 17, 21, 22]) == 2\n    assert candidate([2, 19, 13]) == 1\n    assert candidate([27, 4]) == 1\n    assert candidate([0, 0, 12, 0, 7, 0, 18, 26, 9, 29, 0, 4, 30, 21, 0, 1]) == 7\n    assert candidate([6, 8, 0, 0, 25, 0, 30, 18, 18, 0]) == 5\n    assert candidate([21, 5, 18, 18, 18, 0, 0, 17, 0]) == 4\n    assert candidate([25, 29, 23, 27]) == 1\n    assert candidate([28, 28, 0, 16, 21, 27, 12, 3, 10, 0, 19, 0, 0]) == 5\n    assert candidate([9, 2, 22, 14, 17, 3, 21, 1, 29, 3, 30, 13, 16, 17, 25, 26, 17]) == 4\n    assert candidate([0, 9, 4, 25, 21, 0, 25, 11, 13, 9, 0, 0, 19, 0, 16, 8, 17, 26, 0, 0]) == 9\n    assert candidate([11, 0, 0, 2, 3, 0, 9, 26, 0, 0, 25, 7, 1, 12, 16, 14]) == 7\n    assert candidate([7, 11, 27, 13, 23, 16, 13, 5, 27, 5, 16]) == 2\n    assert candidate([18]) == 1\n    assert candidate([20, 19, 2, 20, 26, 1, 17, 6, 23, 25, 7, 14, 16, 8]) == 5\n    assert candidate([28, 0, 29, 9, 0, 11, 13, 22, 10, 16, 21, 30, 18, 19, 0, 0, 0]) == 7\n    assert candidate([20, 26, 0, 0, 0, 11, 30]) == 3\n    assert candidate([16, 12, 0, 2, 15, 30, 0, 16, 7, 25]) == 4\n    assert candidate([0, 7, 16, 17, 29, 0, 18, 0, 14, 21, 17, 2, 28, 7, 26, 0, 14]) == 7\n    assert candidate([29, 0, 19, 23, 13]) == 1\n    assert candidate([0, 13, 1, 12, 18, 24, 11, 26, 7]) == 3\n    assert candidate([7, 26, 28, 12, 24, 10, 11, 26, 19, 29, 1, 26]) == 3\n    assert candidate([28, 15, 24, 9, 0]) == 1\n    assert candidate([22, 6, 21, 16, 24, 7, 18, 25, 25, 26, 15, 10, 26, 22, 23, 15]) == 3\n    assert candidate([0, 23, 0, 1, 26, 5, 18, 12, 25, 23, 5, 19]) == 5\n    assert candidate([16, 19, 0, 0]) == 2\n    assert candidate([13]) == 1\n    assert candidate([8, 9]) == 1\n    assert candidate([0, 0, 0, 11, 0, 24, 8, 0, 0, 17, 21, 7, 0, 25, 25]) == 7\n    assert candidate([0, 0, 10, 0, 0, 30, 5, 0]) == 5\n    assert candidate([29, 22, 30, 22, 19, 26]) == 1\n    assert candidate([17, 15, 14, 24, 30, 14, 25, 28, 10, 11]) == 1\n    assert candidate([0, 0, 13, 2, 12, 2, 27]) == 4\n    assert candidate([0, 18, 9, 0, 20, 0, 30, 22, 0]) == 5\n    assert candidate([2, 6, 23, 0, 0, 6, 12, 22, 0, 19, 18, 0, 0, 14, 19, 3, 11, 28, 0, 17]) == 7\n    assert candidate([16, 12, 7]) == 1\n    assert candidate([0, 22, 0, 0, 0, 26, 7]) == 4\n    assert candidate([0, 19, 5, 25, 0, 0, 4, 0, 0, 1, 0, 10, 25, 2, 3]) == 7\n    assert candidate([7, 8, 18, 14, 4, 6, 22, 22, 7]) == 2\n    assert candidate([8, 9, 13, 0, 0, 20]) == 2\n    assert candidate([29, 20, 13, 11, 19, 27, 20, 4, 24, 20, 10, 21, 18, 26, 3, 23, 15, 18, 23, 25]) == 5\n    assert candidate([25, 0, 18, 13, 22, 5, 0, 0]) == 4\n    assert candidate([9, 3, 0, 2, 18, 11, 15, 1, 10, 0, 0, 16, 0, 11]) == 5\n    assert candidate([9, 0, 0, 11, 14, 0, 23, 0]) == 4\n    assert candidate([6, 3, 22, 28, 0, 0, 25, 2, 23, 0, 0, 23, 15, 0]) == 7\n    assert candidate([0, 10, 11, 25, 14]) == 1\n    assert candidate([26, 9, 27, 25, 30, 25, 10, 3, 14, 29, 2, 6, 5, 7, 8, 18]) == 3\n    assert candidate([5, 9, 0, 28, 23, 11, 1, 3]) == 2\n    assert candidate([0, 22, 3, 0, 15, 0, 11, 3, 20, 23, 0, 7, 13, 20, 11, 6, 19]) == 6\n    assert candidate([0, 16, 6]) == 2\n    assert candidate([26, 9, 20, 26, 22, 12, 18, 21, 23, 30, 3, 9, 12, 19, 16]) == 4\n    assert candidate([14, 10, 8]) == 1\n    assert candidate([0, 0, 0, 19, 0]) == 4\n    assert candidate([3, 27]) == 1\n    assert candidate([7, 14, 27]) == 1\n    assert candidate([16, 4, 29, 17, 0, 0, 13, 22, 1, 6, 0, 29, 1, 3, 0, 7]) == 6\n    assert candidate([5, 0, 0, 9, 0, 0, 19, 0, 0, 0, 0, 7, 19, 14, 3, 0, 10, 29]) == 9\n    assert candidate([16, 22, 0, 0, 0, 0, 27, 0, 0, 0, 24, 22, 0, 0]) == 9\n\ndef test_check():\n    check(maxSubarrays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3081_minLengthAfterRemovals", "language": "py", "prompt": "from typing import List\n\ndef minLengthAfterRemovals(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed sorted array of integers nums.\nYou can perform the following operation any number of times:\n * Choose two indices, i and j, where i < j, such that nums[i] < nums[j].\n * Then, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed.\nReturn an integer that denotes the minimum length of nums after performing the operation any number of times (including zero).\nNote that nums is sorted in non-decreasing order.\nExample 1:\nInput: nums = [1,3,4,9]\nOutput: 0\nExplanation: Initially, nums = [1, 3, 4, 9].\nIn the first operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 1 < 3.\nRemove indices 0 and 1, and nums becomes [4, 9].\nFor the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 4 < 9.\nRemove indices 0 and 1, and nums becomes an empty array [].\nHence, the minimum length achievable is 0.\nExample 2:\nInput: nums = [2,3,6,9]\nOutput: 0\nExplanation: Initially, nums = [2, 3, 6, 9].\nIn the first operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 2 < 6.\nRemove indices 0 and 2, and nums becomes [3, 9].\nFor the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 3 < 9.\nRemove indices 0 and 1, and nums becomes an empty array [].\nHence, the minimum length achievable is 0.\nExample 3:\nInput: nums = [1,1,2]\nOutput: 1\nExplanation: Initially, nums = [1, 1, 2].\nIn an operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 1 < 2.\nRemove indices 0 and 2, and nums becomes [1].\nIt is no longer possible to perform an operation on the array.\nHence, the minimum achievable length is 1.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 109\n * nums is sorted in non-decreasing order.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3081_minLengthAfterRemovals.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 4, 9]) == 0\n    assert candidate([2, 3, 6, 9]) == 0\n    assert candidate([1, 1, 2]) == 1\n    assert candidate([1]) == 1\n    assert candidate([2]) == 1\n    assert candidate([3]) == 1\n    assert candidate([5]) == 1\n    assert candidate([1, 1]) == 2\n    assert candidate([1, 2]) == 0\n    assert candidate([1, 4]) == 0\n    assert candidate([2, 3]) == 0\n    assert candidate([3, 3]) == 2\n    assert candidate([4, 5]) == 0\n    assert candidate([1, 1, 1]) == 3\n    assert candidate([1, 2, 2]) == 1\n    assert candidate([1, 3, 3]) == 1\n    assert candidate([2, 2, 2]) == 3\n    assert candidate([2, 3, 3]) == 1\n    assert candidate([2, 3, 4]) == 1\n    assert candidate([3, 4, 5]) == 1\n    assert candidate([1, 1, 1, 1]) == 4\n    assert candidate([1, 1, 2, 2]) == 0\n    assert candidate([1, 1, 3, 3]) == 0\n    assert candidate([2, 3, 3, 3]) == 2\n    assert candidate([1, 1, 1, 1, 1]) == 5\n    assert candidate([1, 1, 2, 3, 3]) == 1\n    assert candidate([1, 1, 2, 5, 6]) == 1\n    assert candidate([1, 3, 3, 3, 4]) == 1\n    assert candidate([2, 3, 4, 4, 4]) == 1\n    assert candidate([1, 1, 1, 1, 1, 1]) == 6\n    assert candidate([1, 1, 2, 3, 4, 4]) == 0\n    assert candidate([1, 1, 4, 4, 5, 5]) == 0\n    assert candidate([1, 2, 2, 2, 3, 3]) == 0\n    assert candidate([1, 2, 3, 3, 3, 3]) == 2\n    assert candidate([3, 4, 7, 8, 9, 9]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1]) == 7\n    assert candidate([1, 1, 1, 1, 2, 2, 2]) == 1\n    assert candidate([1, 1, 1, 1, 2, 3, 3]) == 1\n    assert candidate([1, 1, 1, 2, 2, 3, 3]) == 1\n    assert candidate([1, 1, 1, 3, 3, 3, 3]) == 1\n    assert candidate([1, 1, 2, 2, 3, 3, 4]) == 1\n    assert candidate([1, 1, 2, 3, 4, 5, 5]) == 1\n    assert candidate([1, 2, 3, 3, 3, 3, 3]) == 3\n    assert candidate([2, 2, 2, 3, 3, 3, 3]) == 1\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1]) == 8\n    assert candidate([1, 1, 1, 1, 2, 2, 2, 2]) == 0\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 5]) == 0\n    assert candidate([1, 1, 3, 4, 4, 4, 5, 5]) == 0\n    assert candidate([1, 2, 2, 2, 4, 4, 4, 5]) == 0\n    assert candidate([2, 3, 3, 3, 4, 4, 5, 5]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 2, 2]) == 5\n    assert candidate([1, 1, 1, 1, 2, 2, 2, 3, 3]) == 1\n    assert candidate([1, 1, 1, 2, 2, 2, 2, 2, 2]) == 3\n    assert candidate([1, 1, 1, 5, 5, 5, 5, 5, 5]) == 3\n    assert candidate([1, 1, 2, 2, 2, 2, 3, 3, 3]) == 1\n    assert candidate([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 1\n    assert candidate([1, 2, 4, 4, 5, 5, 5, 6, 6]) == 1\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10\n    assert candidate([1, 1, 1, 1, 1, 2, 2, 2, 3, 4]) == 0\n    assert candidate([1, 1, 1, 1, 2, 2, 2, 2, 2, 2]) == 2\n    assert candidate([1, 1, 2, 2, 2, 3, 3, 3, 3, 3]) == 0\n    assert candidate([1, 1, 2, 2, 2, 3, 3, 3, 3, 4]) == 0\n    assert candidate([1, 2, 2, 4, 5, 6, 6, 7, 7, 8]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 11\n    assert candidate([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) == 1\n    assert candidate([1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2]) == 5\n    assert candidate([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]) == 1\n    assert candidate([1, 1, 1, 2, 2, 3, 4, 6, 6, 8, 8]) == 1\n    assert candidate([1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3]) == 1\n    assert candidate([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == 1\n    assert candidate([1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4]) == 1\n    assert candidate([1, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6]) == 1\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 12\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2]) == 6\n    assert candidate([1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4]) == 0\n    assert candidate([1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 6\n    assert candidate([1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5]) == 0\n    assert candidate([1, 1, 1, 2, 4, 4, 4, 4, 4, 5, 6, 6]) == 0\n    assert candidate([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3]) == 4\n    assert candidate([1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 5, 5]) == 0\n    assert candidate([1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 13\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 4, 4]) == 1\n    assert candidate([1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 5]) == 1\n    assert candidate([1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3]) == 1\n    assert candidate([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 6, 7]) == 1\n    assert candidate([1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 6, 7, 7]) == 1\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 14\n    assert candidate([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == 0\n    assert candidate([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 4\n    assert candidate([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5]) == 0\n    assert candidate([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6]) == 0\n    assert candidate([1, 1, 2, 2, 2, 3, 3, 3, 5, 6, 7, 9, 9, 10]) == 0\n    assert candidate([1, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == 0\n    assert candidate([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]) == 0\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) == 5\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]) == 3\n    assert candidate([1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4, 4, 5, 5, 5]) == 1\n    assert candidate([1, 1, 1, 3, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9]) == 1\n\ndef test_check():\n    check(minLengthAfterRemovals)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3091_countSubMultisets", "language": "py", "prompt": "from typing import List\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    \"\"\"You are given a 0-indexed array nums of non-negative integers, and two integers l and r.\nReturn the count of sub-multisets within nums where the sum of elements in each subset falls within the inclusive range of [l, r].\nSince the answer may be large, return it modulo 109 + 7.\nA sub-multiset is an unordered collection of elements of the array in which a given value x can occur 0, 1, ..., occ[x] times, where occ[x] is the number of occurrences of x in the array.\nNote that:\n * Two sub-multisets are the same if sorting both sub-multisets results in identical multisets.\n * The sum of an empty multiset is 0.\nExample 1:\nInput: nums = [1,2,2,3], l = 6, r = 6\nOutput: 1\nExplanation: The only subset of nums that has a sum of 6 is {1, 2, 3}.\nExample 2:\nInput: nums = [2,1,4,2,7], l = 1, r = 5\nOutput: 7\nExplanation: The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.\nExample 3:\nInput: nums = [1,2,1,3,5,2], l = 3, r = 5\nOutput: 9\nExplanation: The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.\nConstraints:\n * 1 <= nums.length <= 2 * 104\n * 0 <= nums[i] <= 2 * 104\n * Sum of nums does not exceed 2 * 104.\n * 0 <= l <= r <= 2 * 104\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3091_countSubMultisets.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 2, 3], 6, 6) == 1\n    assert candidate([2, 1, 4, 2, 7], 1, 5) == 7\n    assert candidate([1, 2, 1, 3, 5, 2], 3, 5) == 9\n    assert candidate([0, 0, 1, 2, 3], 2, 3) == 9\n    assert candidate([0, 0, 0, 0, 0], 0, 0) == 6\n    assert candidate([0, 0, 0, 1, 2, 5, 2, 3], 0, 3) == 20\n    assert candidate([1, 1], 2, 2) == 1\n    assert candidate([1, 1, 1], 2, 2) == 1\n    assert candidate([1, 1, 2], 2, 4) == 4\n    assert candidate([1, 2, 1], 2, 2) == 2\n    assert candidate([1, 2, 2], 3, 5) == 3\n    assert candidate([2, 1, 1], 1, 2) == 3\n    assert candidate([2, 1, 2], 2, 2) == 1\n    assert candidate([2, 2, 1], 4, 5) == 2\n    assert candidate([2, 2, 2], 3, 6) == 2\n    assert candidate([1, 1, 1, 1], 3, 3) == 1\n    assert candidate([1, 1, 1, 2], 1, 1) == 1\n    assert candidate([1, 1, 1, 3], 4, 4) == 1\n    assert candidate([1, 1, 2, 1], 3, 4) == 3\n    assert candidate([1, 1, 2, 2], 2, 3) == 3\n    assert candidate([1, 1, 2, 3], 4, 5) == 4\n    assert candidate([1, 1, 3, 1], 2, 3) == 3\n    assert candidate([1, 1, 3, 2], 6, 6) == 1\n    assert candidate([1, 1, 3, 3], 8, 8) == 1\n    assert candidate([1, 2, 1, 1], 3, 3) == 2\n    assert candidate([1, 2, 1, 2], 4, 5) == 3\n    assert candidate([1, 2, 1, 3], 4, 7) == 6\n    assert candidate([1, 2, 2, 1], 4, 5) == 3\n    assert candidate([1, 2, 2, 2], 1, 7) == 7\n    assert candidate([1, 2, 2, 3], 3, 8) == 9\n    assert candidate([1, 2, 3, 1], 1, 4) == 7\n    assert candidate([1, 2, 3, 2], 4, 8) == 7\n    assert candidate([1, 2, 3, 3], 6, 6) == 2\n    assert candidate([1, 3, 1, 1], 6, 6) == 1\n    assert candidate([1, 3, 1, 2], 7, 7) == 1\n    assert candidate([1, 3, 1, 3], 5, 6) == 2\n    assert candidate([1, 3, 2, 1], 2, 2) == 2\n    assert candidate([1, 3, 2, 2], 7, 8) == 2\n    assert candidate([1, 3, 2, 3], 1, 9) == 11\n    assert candidate([1, 3, 3, 1], 7, 7) == 1\n    assert candidate([1, 3, 3, 2], 1, 6) == 8\n    assert candidate([1, 3, 3, 3], 9, 10) == 2\n    assert candidate([2, 1, 1, 1], 2, 3) == 4\n    assert candidate([2, 1, 1, 2], 1, 4) == 6\n    assert candidate([2, 1, 1, 3], 7, 7) == 1\n    assert candidate([2, 1, 2, 1], 3, 3) == 1\n    assert candidate([2, 1, 2, 2], 6, 7) == 2\n    assert candidate([2, 1, 2, 3], 7, 7) == 1\n    assert candidate([2, 1, 3, 1], 4, 4) == 2\n    assert candidate([2, 1, 3, 2], 3, 4) == 4\n    assert candidate([2, 1, 3, 3], 1, 5) == 6\n    assert candidate([2, 2, 1, 1], 6, 6) == 1\n    assert candidate([2, 2, 1, 2], 2, 4) == 3\n    assert candidate([2, 2, 1, 3], 6, 8) == 3\n    assert candidate([2, 2, 2, 1], 4, 7) == 4\n    assert candidate([2, 2, 2, 2], 3, 7) == 2\n    assert candidate([2, 2, 2, 3], 5, 6) == 2\n    assert candidate([2, 2, 3, 1], 7, 7) == 1\n    assert candidate([2, 2, 3, 2], 5, 9) == 4\n    assert candidate([2, 2, 3, 3], 4, 10) == 6\n    assert candidate([2, 3, 1, 1], 4, 6) == 5\n    assert candidate([2, 3, 1, 2], 3, 4) == 4\n    assert candidate([2, 3, 1, 3], 2, 8) == 9\n    assert candidate([2, 3, 2, 1], 3, 3) == 2\n    assert candidate([2, 3, 2, 2], 3, 3) == 1\n    assert candidate([2, 3, 2, 3], 5, 6) == 2\n    assert candidate([2, 3, 3, 1], 9, 9) == 1\n    assert candidate([2, 3, 3, 2], 8, 8) == 1\n    assert candidate([2, 3, 3, 3], 3, 5) == 2\n    assert candidate([3, 1, 1, 1], 4, 4) == 1\n    assert candidate([3, 1, 1, 2], 7, 7) == 1\n    assert candidate([3, 1, 1, 3], 1, 1) == 1\n    assert candidate([3, 1, 2, 1], 4, 4) == 2\n    assert candidate([3, 1, 2, 2], 3, 8) == 9\n    assert candidate([3, 1, 2, 3], 5, 9) == 6\n    assert candidate([3, 1, 3, 1], 1, 4) == 4\n    assert candidate([3, 1, 3, 2], 3, 5) == 4\n    assert candidate([3, 1, 3, 3], 9, 10) == 2\n    assert candidate([3, 2, 1, 1], 1, 5) == 9\n    assert candidate([3, 2, 1, 2], 1, 6) == 9\n    assert candidate([3, 2, 1, 3], 5, 7) == 4\n    assert candidate([3, 2, 2, 1], 4, 4) == 2\n    assert candidate([3, 2, 2, 2], 6, 7) == 2\n    assert candidate([3, 2, 2, 3], 2, 7) == 6\n    assert candidate([3, 2, 3, 1], 2, 3) == 3\n    assert candidate([3, 2, 3, 2], 8, 10) == 2\n    assert candidate([3, 2, 3, 3], 1, 11) == 7\n    assert candidate([3, 3, 1, 1], 8, 8) == 1\n    assert candidate([3, 3, 1, 2], 2, 5) == 5\n    assert candidate([3, 3, 1, 3], 1, 7) == 5\n    assert candidate([3, 3, 2, 1], 4, 6) == 4\n    assert candidate([3, 3, 2, 2], 7, 10) == 3\n    assert candidate([3, 3, 2, 3], 4, 10) == 4\n    assert candidate([3, 3, 3, 1], 6, 9) == 3\n    assert candidate([3, 3, 3, 2], 11, 11) == 1\n    assert candidate([3, 3, 3, 3], 8, 9) == 1\n    assert candidate([1, 1, 1, 1, 1], 3, 5) == 3\n    assert candidate([1, 1, 1, 1, 2], 2, 5) == 7\n    assert candidate([1, 1, 1, 1, 3], 6, 7) == 2\n    assert candidate([1, 1, 1, 1, 4], 8, 8) == 1\n\ndef test_check():\n    check(countSubMultisets)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3092_minimumMoves", "language": "py", "prompt": "from typing import List\n\ndef minimumMoves(grid: List[List[int]]) -> int:\n    \"\"\"You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\nReturn the minimum number of moves required to place one stone in each cell.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/23/example1-3.svg]\nInput: grid = [[1,1,0],[1,1,1],[1,2,1]]\nOutput: 3\nExplanation: One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/23/example2-2.svg]\nInput: grid = [[1,3,0],[1,0,0],[1,0,3]]\nOutput: 4\nExplanation: One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell.\nConstraints:\n * grid.length == grid[i].length == 3\n * 0 <= grid[i][j] <= 9\n * Sum of grid is equal to 9.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3092_minimumMoves.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[1, 1, 0], [1, 1, 1], [1, 2, 1]]) == 3\n    assert candidate([[1, 3, 0], [1, 0, 0], [1, 0, 3]]) == 4\n    assert candidate([[1, 2, 2], [1, 1, 0], [0, 1, 1]]) == 4\n    assert candidate([[1, 3, 3], [1, 0, 0], [0, 1, 0]]) == 7\n    assert candidate([[3, 2, 0], [0, 1, 0], [0, 3, 0]]) == 7\n    assert candidate([[1, 0, 4], [2, 0, 0], [2, 0, 0]]) == 6\n    assert candidate([[0, 1, 3], [3, 1, 0], [0, 1, 0]]) == 5\n    assert candidate([[3, 0, 0], [0, 2, 1], [1, 0, 2]]) == 5\n    assert candidate([[1, 0, 0], [4, 1, 1], [0, 2, 0]]) == 7\n    assert candidate([[0, 2, 3], [2, 0, 1], [0, 1, 0]]) == 6\n    assert candidate([[4, 0, 0], [0, 0, 2], [3, 0, 0]]) == 8\n    assert candidate([[3, 0, 0], [4, 1, 0], [1, 0, 0]]) == 10\n    assert candidate([[0, 2, 1], [1, 2, 0], [3, 0, 0]]) == 5\n    assert candidate([[1, 3, 0], [0, 0, 1], [2, 1, 1]]) == 3\n    assert candidate([[3, 0, 0], [1, 0, 1], [0, 2, 2]]) == 6\n    assert candidate([[4, 2, 2], [0, 1, 0], [0, 0, 0]]) == 10\n    assert candidate([[3, 2, 1], [1, 1, 0], [1, 0, 0]]) == 9\n    assert candidate([[0, 3, 0], [2, 0, 0], [1, 3, 0]]) == 6\n    assert candidate([[0, 0, 0], [3, 0, 0], [4, 2, 0]]) == 13\n    assert candidate([[1, 1, 2], [0, 0, 0], [0, 4, 1]]) == 5\n    assert candidate([[4, 0, 0], [0, 0, 0], [1, 2, 2]]) == 6\n    assert candidate([[1, 3, 1], [0, 0, 0], [1, 2, 1]]) == 5\n    assert candidate([[3, 1, 0], [1, 2, 2], [0, 0, 0]]) == 6\n    assert candidate([[2, 3, 2], [0, 1, 0], [0, 0, 1]]) == 7\n    assert candidate([[0, 1, 4], [0, 3, 0], [0, 1, 0]]) == 8\n    assert candidate([[0, 1, 0], [1, 4, 0], [0, 3, 0]]) == 7\n    assert candidate([[0, 0, 1], [0, 0, 3], [2, 2, 1]]) == 7\n    assert candidate([[1, 0, 1], [1, 2, 0], [1, 0, 3]]) == 3\n    assert candidate([[0, 0, 0], [4, 1, 2], [1, 1, 0]]) == 7\n    assert candidate([[2, 2, 1], [0, 2, 1], [0, 1, 0]]) == 6\n    assert candidate([[1, 0, 0], [0, 2, 0], [4, 2, 0]]) == 10\n    assert candidate([[2, 0, 1], [4, 0, 0], [0, 2, 0]]) == 6\n    assert candidate([[0, 0, 3], [0, 2, 0], [1, 3, 0]]) == 7\n    assert candidate([[2, 0, 1], [1, 0, 0], [4, 0, 1]]) == 7\n    assert candidate([[0, 1, 0], [1, 0, 3], [0, 3, 1]]) == 6\n    assert candidate([[0, 3, 1], [0, 0, 0], [3, 1, 1]]) == 6\n    assert candidate([[3, 0, 1], [0, 3, 1], [0, 0, 1]]) == 5\n    assert candidate([[0, 4, 0], [1, 0, 0], [0, 2, 2]]) == 5\n    assert candidate([[4, 2, 0], [0, 0, 0], [1, 1, 1]]) == 7\n    assert candidate([[0, 2, 0], [2, 1, 2], [0, 2, 0]]) == 4\n    assert candidate([[0, 1, 0], [2, 1, 1], [4, 0, 0]]) == 8\n    assert candidate([[0, 4, 1], [1, 0, 1], [0, 0, 2]]) == 6\n    assert candidate([[1, 0, 0], [0, 0, 0], [1, 3, 4]]) == 9\n    assert candidate([[0, 7, 1], [0, 1, 0], [0, 0, 0]]) == 13\n    assert candidate([[0, 1, 1], [0, 2, 1], [2, 0, 2]]) == 4\n    assert candidate([[0, 2, 0], [3, 0, 0], [3, 1, 0]]) == 8\n    assert candidate([[0, 0, 0], [2, 0, 2], [0, 2, 3]]) == 8\n    assert candidate([[0, 3, 4], [0, 1, 0], [1, 0, 0]]) == 9\n    assert candidate([[1, 0, 0], [0, 0, 1], [7, 0, 0]]) == 13\n    assert candidate([[0, 0, 2], [2, 0, 0], [1, 4, 0]]) == 6\n    assert candidate([[2, 0, 1], [1, 3, 0], [0, 2, 0]]) == 5\n    assert candidate([[1, 0, 2], [2, 3, 0], [1, 0, 0]]) == 6\n    assert candidate([[1, 1, 2], [0, 0, 0], [3, 1, 1]]) == 4\n    assert candidate([[0, 2, 0], [0, 1, 0], [0, 0, 6]]) == 10\n    assert candidate([[1, 1, 1], [3, 0, 0], [2, 1, 0]]) == 5\n    assert candidate([[2, 0, 0], [2, 0, 1], [3, 1, 0]]) == 8\n    assert candidate([[1, 1, 0], [0, 2, 2], [0, 3, 0]]) == 4\n    assert candidate([[1, 0, 3], [1, 1, 0], [1, 0, 2]]) == 3\n    assert candidate([[1, 3, 0], [2, 0, 0], [3, 0, 0]]) == 7\n    assert candidate([[1, 0, 1], [0, 0, 1], [0, 1, 5]]) == 10\n    assert candidate([[2, 0, 0], [0, 2, 1], [1, 1, 2]]) == 4\n    assert candidate([[1, 2, 3], [1, 0, 1], [0, 0, 1]]) == 8\n    assert candidate([[0, 2, 3], [1, 0, 0], [0, 1, 2]]) == 6\n    assert candidate([[4, 1, 0], [0, 1, 1], [2, 0, 0]]) == 8\n    assert candidate([[2, 0, 1], [1, 0, 1], [1, 2, 1]]) == 2\n    assert candidate([[3, 0, 3], [0, 0, 0], [1, 1, 1]]) == 5\n    assert candidate([[0, 0, 0], [3, 4, 2], [0, 0, 0]]) == 7\n    assert candidate([[2, 1, 2], [0, 0, 1], [3, 0, 0]]) == 6\n    assert candidate([[1, 0, 0], [0, 3, 3], [0, 0, 2]]) == 7\n    assert candidate([[0, 2, 0], [1, 0, 1], [1, 3, 1]]) == 5\n    assert candidate([[0, 1, 0], [2, 0, 4], [1, 0, 1]]) == 5\n    assert candidate([[1, 0, 3], [0, 0, 2], [0, 1, 2]]) == 7\n    assert candidate([[2, 1, 1], [0, 0, 0], [0, 1, 4]]) == 6\n    assert candidate([[2, 0, 1], [0, 2, 0], [1, 3, 0]]) == 5\n    assert candidate([[2, 0, 2], [0, 0, 2], [0, 0, 3]]) == 6\n    assert candidate([[0, 2, 2], [2, 0, 1], [1, 1, 0]]) == 4\n    assert candidate([[0, 0, 1], [2, 3, 2], [1, 0, 0]]) == 4\n    assert candidate([[1, 1, 0], [3, 0, 4], [0, 0, 0]]) == 6\n    assert candidate([[1, 0, 0], [0, 0, 0], [5, 1, 2]]) == 11\n    assert candidate([[1, 0, 0], [3, 5, 0], [0, 0, 0]]) == 9\n    assert candidate([[3, 1, 1], [1, 1, 0], [2, 0, 0]]) == 8\n    assert candidate([[0, 1, 3], [0, 0, 1], [1, 2, 1]]) == 6\n    assert candidate([[0, 0, 0], [1, 2, 0], [3, 0, 3]]) == 7\n    assert candidate([[0, 0, 0], [1, 2, 2], [2, 0, 2]]) == 5\n    assert candidate([[4, 0, 0], [2, 3, 0], [0, 0, 0]]) == 10\n    assert candidate([[1, 1, 0], [1, 0, 1], [4, 1, 0]]) == 8\n    assert candidate([[0, 0, 1], [0, 1, 2], [1, 0, 4]]) == 10\n    assert candidate([[0, 1, 3], [2, 0, 0], [0, 3, 0]]) == 6\n    assert candidate([[0, 0, 0], [5, 0, 1], [1, 1, 1]]) == 7\n    assert candidate([[0, 1, 1], [0, 0, 3], [2, 1, 1]]) == 5\n    assert candidate([[2, 0, 1], [0, 0, 1], [2, 2, 1]]) == 3\n    assert candidate([[3, 0, 2], [2, 1, 0], [0, 0, 1]]) == 6\n    assert candidate([[0, 0, 2], [0, 0, 2], [4, 0, 1]]) == 6\n    assert candidate([[3, 0, 0], [0, 2, 0], [0, 0, 4]]) == 8\n    assert candidate([[0, 1, 3], [1, 0, 0], [0, 4, 0]]) == 6\n    assert candidate([[2, 1, 2], [0, 2, 1], [1, 0, 0]]) == 4\n    assert candidate([[0, 0, 2], [1, 0, 3], [1, 0, 2]]) == 6\n    assert candidate([[0, 2, 2], [0, 1, 4], [0, 0, 0]]) == 10\n    assert candidate([[1, 0, 1], [0, 0, 5], [1, 1, 0]]) == 6\n    assert candidate([[3, 1, 0], [0, 0, 0], [0, 1, 4]]) == 8\n\ndef test_check():\n    check(minimumMoves)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3093_sumIndicesWithKSetBits", "language": "py", "prompt": "from typing import List\n\ndef sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and an integer k.\nReturn an integer that denotes the sum of elements in nums whose corresponding indices have exactly k set bits in their binary representation.\nThe set bits in an integer are the 1's present when it is written in binary.\n * For example, the binary representation of 21 is 10101, which has 3 set bits.\nExample 1:\nInput: nums = [5,10,1,5,2], k = 1\nOutput: 13\nExplanation: The binary representation of the indices are:\n0 = 0002\n1 = 0012\n2 = 0102\n3 = 0112\n4 = 1002\nIndices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13.\nExample 2:\nInput: nums = [4,3,2,1], k = 2\nOutput: 1\nExplanation: The binary representation of the indices are:\n0 = 002\n1 = 012\n2 = 102\n3 = 112\nOnly index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1.\nConstraints:\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 105\n * 0 <= k <= 10\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3093_sumIndicesWithKSetBits.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 10, 1, 5, 2], 1) == 13\n    assert candidate([4, 3, 2, 1], 2) == 1\n    assert candidate([1], 0) == 1\n    assert candidate([100000], 0) == 100000\n    assert candidate([2, 2], 1) == 2\n    assert candidate([2, 4], 1) == 4\n    assert candidate([2, 7], 1) == 7\n    assert candidate([3, 3], 1) == 3\n    assert candidate([3, 9], 1) == 9\n    assert candidate([4, 7], 1) == 7\n    assert candidate([4, 8], 1) == 8\n    assert candidate([6, 6], 1) == 6\n    assert candidate([7, 2], 1) == 2\n    assert candidate([7, 4], 1) == 4\n    assert candidate([8, 4], 1) == 4\n    assert candidate([8, 9], 1) == 9\n    assert candidate([9, 9], 1) == 9\n    assert candidate([15, 43], 1) == 43\n    assert candidate([35, 86], 1) == 86\n    assert candidate([36, 14], 1) == 14\n    assert candidate([47, 61], 1) == 61\n    assert candidate([60, 46], 1) == 46\n    assert candidate([70, 7], 1) == 7\n    assert candidate([1, 51, 55], 1) == 106\n    assert candidate([2, 2, 5], 1) == 7\n    assert candidate([2, 3, 2], 1) == 5\n    assert candidate([3, 2, 5], 1) == 7\n    assert candidate([3, 7, 5], 1) == 12\n    assert candidate([4, 5, 9], 1) == 14\n    assert candidate([5, 5, 5], 1) == 10\n    assert candidate([5, 7, 7], 1) == 14\n    assert candidate([6, 2, 1], 1) == 3\n    assert candidate([6, 9, 8], 1) == 17\n    assert candidate([7, 1, 2], 1) == 3\n    assert candidate([7, 9, 1], 1) == 10\n    assert candidate([8, 5, 4], 1) == 9\n    assert candidate([9, 1, 6], 1) == 7\n    assert candidate([9, 3, 5], 1) == 8\n    assert candidate([57, 48, 69], 1) == 117\n    assert candidate([78, 37, 59], 1) == 96\n    assert candidate([96, 71, 53], 1) == 124\n    assert candidate([900, 914, 367], 1) == 1281\n    assert candidate([1, 4, 9, 2], 2) == 2\n    assert candidate([1, 5, 9, 5], 2) == 5\n    assert candidate([1, 8, 5, 6], 1) == 13\n    assert candidate([2, 2, 1, 2], 1) == 3\n    assert candidate([2, 4, 5, 2], 2) == 2\n    assert candidate([2, 5, 8, 1], 1) == 13\n    assert candidate([2, 7, 3, 9], 1) == 10\n    assert candidate([3, 5, 4, 2], 2) == 2\n    assert candidate([4, 1, 6, 3], 2) == 3\n    assert candidate([6, 3, 8, 8], 2) == 8\n    assert candidate([6, 6, 1, 4], 2) == 4\n    assert candidate([7, 1, 9, 6], 2) == 6\n    assert candidate([7, 5, 2, 1], 1) == 7\n    assert candidate([7, 5, 3, 4], 1) == 8\n    assert candidate([7, 8, 6, 2], 1) == 14\n    assert candidate([8, 3, 9, 8], 2) == 8\n    assert candidate([8, 7, 3, 2], 2) == 2\n    assert candidate([9, 4, 2, 2], 1) == 6\n    assert candidate([9, 6, 8, 8], 1) == 14\n    assert candidate([9, 7, 8, 9], 2) == 9\n    assert candidate([9, 40, 73, 19], 2) == 19\n    assert candidate([41, 51, 58, 2], 1) == 109\n    assert candidate([44, 96, 36, 56], 2) == 56\n    assert candidate([1, 1, 3, 1, 6], 2) == 1\n    assert candidate([2, 1, 1, 3, 5], 1) == 7\n    assert candidate([2, 5, 4, 3, 1], 2) == 3\n    assert candidate([3, 2, 7, 1, 5], 1) == 14\n    assert candidate([4, 2, 8, 8, 2], 2) == 8\n    assert candidate([4, 3, 7, 8, 8], 2) == 8\n    assert candidate([4, 6, 2, 2, 7], 1) == 15\n    assert candidate([4, 7, 5, 1, 1], 2) == 1\n    assert candidate([5, 6, 6, 6, 3], 1) == 15\n    assert candidate([6, 4, 8, 4, 2], 2) == 4\n    assert candidate([7, 7, 9, 5, 8], 1) == 24\n    assert candidate([7, 9, 1, 3, 2], 2) == 3\n    assert candidate([8, 5, 6, 9, 7], 2) == 9\n    assert candidate([8, 6, 9, 4, 4], 2) == 4\n    assert candidate([8, 8, 2, 9, 2], 1) == 12\n    assert candidate([9, 3, 7, 9, 6], 1) == 16\n    assert candidate([9, 5, 5, 5, 5], 1) == 15\n    assert candidate([27, 73, 37, 82, 78], 1) == 188\n    assert candidate([36, 28, 94, 49, 79], 2) == 49\n    assert candidate([48, 54, 75, 72, 77], 1) == 206\n    assert candidate([574, 419, 838, 216, 442], 1) == 1699\n    assert candidate([1, 1, 1, 2, 5, 7], 2) == 9\n    assert candidate([2, 6, 6, 8, 6, 4], 2) == 12\n    assert candidate([2, 8, 2, 9, 2, 8], 2) == 17\n    assert candidate([2, 9, 1, 6, 5, 7], 2) == 13\n    assert candidate([2, 9, 1, 6, 6, 7], 2) == 13\n    assert candidate([3, 5, 4, 5, 8, 9], 1) == 17\n    assert candidate([5, 5, 3, 7, 9, 7], 1) == 17\n    assert candidate([5, 9, 4, 8, 7, 2], 2) == 10\n    assert candidate([5, 9, 6, 6, 4, 5], 2) == 11\n    assert candidate([6, 4, 7, 8, 4, 7], 2) == 15\n    assert candidate([6, 8, 6, 2, 7, 3], 2) == 5\n    assert candidate([7, 2, 5, 4, 4, 4], 1) == 11\n    assert candidate([7, 2, 9, 7, 8, 7], 2) == 14\n    assert candidate([7, 6, 6, 7, 6, 1], 2) == 8\n\ndef test_check():\n    check(sumIndicesWithKSetBits)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3094_minOperations", "language": "py", "prompt": "from typing import List\n\ndef minOperations(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array nums consisting of positive integers.\nThere are two types of operations that you can apply on the array any number of times:\n * Choose two elements with equal values and delete them from the array.\n * Choose three elements with equal values and delete them from the array.\nReturn the minimum number of operations required to make the array empty, or -1 if it is not possible.\nExample 1:\nInput: nums = [2,3,3,2,2,4,2,3,4]\nOutput: 4\nExplanation: We can apply the following operations to make the array empty:\n- Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n- Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n- Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n- Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\nIt can be shown that we cannot make the array empty in less than 4 operations.\nExample 2:\nInput: nums = [2,1,2,2,3,3]\nOutput: -1\nExplanation: It is impossible to empty the array.\nConstraints:\n * 2 <= nums.length <= 105\n * 1 <= nums[i] <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3094_minOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 3, 2, 2, 4, 2, 3, 4]) == 4\n    assert candidate([2, 1, 2, 2, 3, 3]) == -1\n    assert candidate([3, 3]) == 1\n    assert candidate([14, 12, 14, 14, 12, 14, 14, 12, 12, 12, 12, 14, 14, 12, 14, 14, 14, 12, 12]) == 7\n    assert candidate([2, 2, 2, 2, 2, 2, 2, 2, 2]) == 3\n    assert candidate([15, 3, 3, 15, 15, 13, 8, 15, 6, 15, 3, 1, 8, 8, 15]) == -1\n    assert candidate([19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]) == 5\n    assert candidate([13, 7, 13, 7, 13, 7, 13, 13, 7]) == 4\n    assert candidate([5, 5]) == 1\n    assert candidate([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 5\n    assert candidate([3, 14, 3, 14, 3, 14, 14, 3, 3, 14, 14, 14, 3, 14, 14, 3, 14, 14, 14, 3]) == 7\n    assert candidate([16, 16, 16, 19, 16, 3, 16, 8, 16, 16, 16, 19, 3, 16, 16]) == -1\n    assert candidate([11, 11, 11, 11, 19, 11, 11, 11, 11, 11, 19, 11, 11, 11, 11, 11, 19]) == 6\n    assert candidate([1, 1, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1]) == 5\n    assert candidate([16, 16, 16, 3, 16, 16, 3]) == 3\n    assert candidate([14, 4, 4, 19, 19]) == -1\n    assert candidate([1, 14, 1, 1, 1]) == -1\n    assert candidate([3, 10, 11, 3, 3, 11, 3, 3, 3, 3, 3, 3, 3, 3, 10, 3, 3, 3]) == 7\n    assert candidate([3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8]) == 5\n    assert candidate([9, 9, 9]) == 1\n    assert candidate([6, 6, 6, 6, 6, 8, 8, 8, 8, 6, 8, 6, 15, 15, 6, 15, 6, 6]) == 7\n    assert candidate([9, 19, 19, 19, 9, 9, 19, 19, 19, 9, 9, 19, 9, 19, 19, 19]) == 6\n    assert candidate([9, 4, 9, 20, 20, 4, 20]) == 3\n    assert candidate([6, 9, 18, 16, 18, 1, 9, 1, 1, 1, 1, 16, 1, 6, 1, 1, 9, 6]) == 7\n    assert candidate([11, 18, 11, 18, 11, 18, 11]) == 3\n    assert candidate([20, 20, 20, 20, 20]) == 2\n    assert candidate([12, 7, 7]) == -1\n    assert candidate([10, 7, 9, 9, 10, 9, 9, 10, 10, 9, 10, 9, 10, 10]) == -1\n    assert candidate([9, 9, 9, 8, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9]) == -1\n    assert candidate([5, 5, 18, 1, 5, 5]) == -1\n    assert candidate([13, 13, 16, 4, 16, 13, 2, 16, 16, 16, 2, 16, 6, 16, 13, 18, 9]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 7, 8]) == 6\n    assert candidate([20, 20, 19, 19, 20, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20]) == 7\n    assert candidate([4, 4, 20, 20, 4, 20, 1, 4, 4, 4, 4, 4, 4, 4, 20, 4, 4]) == -1\n    assert candidate([16, 17, 17, 8, 17, 17, 16, 8, 17, 16, 17]) == 4\n    assert candidate([10, 10, 10, 9, 10, 10, 10, 9, 10, 18, 10, 4, 20, 2, 10, 10]) == -1\n    assert candidate([11, 20, 20, 11, 11, 20, 14, 20, 11, 11, 20, 1]) == -1\n    assert candidate([14, 14, 14, 14, 15, 20, 15]) == -1\n    assert candidate([17, 7, 17, 5, 17, 17, 17, 7, 17, 17, 17, 17, 5, 17, 17, 7, 5]) == 6\n    assert candidate([4, 4, 4, 4, 4, 4, 4, 4, 4]) == 3\n    assert candidate([17, 17]) == 1\n    assert candidate([15, 2, 15, 2, 8, 15, 15, 15, 15, 15, 15, 8, 2]) == 5\n    assert candidate([1, 12, 12, 1, 1, 1, 1, 12, 1]) == 3\n    assert candidate([12, 4, 9, 10, 17, 12, 5, 17, 4, 12, 12, 12, 4, 10, 4]) == -1\n    assert candidate([7, 7, 7, 7, 7, 7, 7, 16, 7, 7, 7, 16, 7, 16, 7, 16, 16, 16, 16, 7]) == 8\n    assert candidate([20, 20, 20, 20, 19]) == -1\n    assert candidate([13, 13, 13, 13, 13, 13, 13, 13]) == 3\n    assert candidate([15, 12, 18, 18, 15, 15, 15, 12, 12, 12, 12, 12, 12, 15, 18]) == 6\n    assert candidate([14, 14, 14, 1]) == -1\n    assert candidate([2, 2, 2, 2, 2, 2, 8, 2, 8, 2, 2, 2, 2]) == 5\n    assert candidate([10, 16, 6, 6, 10, 6]) == -1\n    assert candidate([18, 17, 3, 18, 6, 13, 3, 6, 14, 6, 15, 3]) == -1\n    assert candidate([15, 15]) == 1\n    assert candidate([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 4\n    assert candidate([11, 4, 4, 18, 11, 12, 18, 18, 12, 4, 4, 12, 4]) == 5\n    assert candidate([2, 5, 20, 20, 5, 20, 20, 16, 20, 20, 20, 20, 20, 20, 3, 20, 20, 20]) == -1\n    assert candidate([12, 13, 13, 13, 12, 13, 13, 13, 13, 13, 11, 13, 13, 13]) == -1\n    assert candidate([1, 1, 1, 1]) == 2\n    assert candidate([10, 10, 10, 10, 3, 10, 10, 3, 10]) == 4\n    assert candidate([7, 14, 7, 7, 2, 2, 7]) == -1\n    assert candidate([1, 10, 1, 10, 1]) == 2\n    assert candidate([11, 11, 11, 11, 11, 11, 11, 11, 11, 11]) == 4\n    assert candidate([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) == 7\n    assert candidate([13, 13, 13, 13, 13, 13, 13]) == 3\n    assert candidate([19, 19, 19, 19, 18, 19, 15, 7, 19, 19, 15, 5]) == -1\n    assert candidate([2, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]) == -1\n    assert candidate([19, 16, 19, 19, 16, 16, 16, 16]) == 3\n    assert candidate([15, 15, 15, 15, 15, 15, 11, 13, 15, 15, 11, 15, 13, 15, 11, 13]) == 6\n    assert candidate([15, 16, 16, 15, 16]) == 2\n    assert candidate([9, 7, 14, 9, 14, 7, 7, 9, 9, 9, 9, 9, 9, 14, 14]) == 6\n    assert candidate([12, 16, 5, 5, 7, 10, 2, 16, 12, 7, 2, 12, 5, 16, 2, 11]) == -1\n    assert candidate([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]) == 6\n    assert candidate([18, 13, 13, 18, 18, 13, 13, 18, 13, 13]) == 4\n    assert candidate([4, 4, 8, 10, 8, 10, 19, 19, 19, 19, 8, 8, 19, 4]) == 6\n    assert candidate([1, 18, 14, 16, 14]) == -1\n    assert candidate([7, 7, 7, 7, 3, 7, 7, 3, 7, 7]) == 4\n    assert candidate([13, 13]) == 1\n    assert candidate([6, 11, 6, 8, 6, 13, 17, 14]) == -1\n    assert candidate([10, 2, 2, 10]) == 2\n    assert candidate([19, 17, 17, 17, 17, 17, 17, 17, 19, 19, 19, 17, 19, 17]) == 5\n    assert candidate([4, 16, 12, 7, 16, 16, 16]) == -1\n    assert candidate([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]) == 5\n    assert candidate([6, 6, 6, 13, 6, 18, 13, 18, 5, 18, 12, 3, 12, 12, 18, 6, 18, 3, 18, 6]) == -1\n    assert candidate([4, 4, 3, 3, 4, 4]) == 3\n    assert candidate([11, 11, 11, 11, 9, 11, 9, 9, 11, 11, 9, 9, 11, 11, 9]) == 5\n    assert candidate([16, 16]) == 1\n    assert candidate([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 5\n    assert candidate([17, 16, 16, 17, 16, 16, 16]) == 3\n    assert candidate([10, 18, 10, 10]) == -1\n    assert candidate([8, 8]) == 1\n    assert candidate([8, 6, 6, 6, 8, 8, 6, 8, 8, 6, 8, 6, 8, 8, 6, 6, 6, 8]) == 6\n    assert candidate([15, 14, 20, 15, 20, 14, 14, 14, 20, 14, 20, 20]) == 5\n    assert candidate([19, 3, 3, 3, 3, 3, 3, 15, 17, 3, 3, 18, 10, 17, 17, 15, 17, 3, 3]) == -1\n    assert candidate([1, 1, 16, 2, 16, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 16]) == 6\n    assert candidate([1, 1, 4, 4, 4]) == 2\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 7\n    assert candidate([16, 18, 18, 20]) == -1\n    assert candidate([2, 2, 2, 20, 15, 2, 20, 15, 2, 15]) == 4\n    assert candidate([16, 16, 16, 16, 16]) == 2\n    assert candidate([1, 14, 14, 14, 14, 1, 14, 14, 1, 14, 14, 14, 14, 1, 14, 14, 1, 14]) == 7\n\ndef test_check():\n    check(minOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3095_maxNumberOfAlloys", "language": "py", "prompt": "from typing import List\n\ndef maxNumberOfAlloys(n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n    \"\"\"You are the owner of a company that creates alloys using various types of metals. There are n different types of metals available, and you have access to k machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\nFor the ith machine to create an alloy, it needs composition[i][j] units of metal of type j. Initially, you have stock[i] units of metal type i, and purchasing one unit of metal type i costs cost[i] coins.\nGiven integers n, k, budget, a 1-indexed 2D array composition, and 1-indexed arrays stock and cost, your goal is to maximize the number of alloys the company can create while staying within the budget of budget coins.\nAll alloys must be created with the same machine.\nReturn the maximum number of alloys that the company can create.\nExample 1:\nInput: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]\nOutput: 2\nExplanation: It is optimal to use the 1st machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1st type.\n- 2 units of metal of the 2nd type.\n- 2 units of metal of the 3rd type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys.\nExample 2:\nInput: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]\nOutput: 5\nExplanation: It is optimal to use the 2nd machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1st type.\n- 5 units of metal of the 2nd type.\n- 0 units of metal of the 3rd type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys.\nExample 3:\nInput: n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]\nOutput: 2\nExplanation: It is optimal to use the 3rd machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1st type.\n- 1 unit of metal of the 2nd type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys.\nConstraints:\n * 1 <= n, k <= 100\n * 0 <= budget <= 108\n * composition.length == k\n * composition[i].length == n\n * 1 <= composition[i][j] <= 100\n * stock.length == cost.length == n\n * 0 <= stock[i] <= 108\n * 1 <= cost[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3095_maxNumberOfAlloys.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, 2, 15, [[1, 1, 1], [1, 1, 10]], [0, 0, 0], [1, 2, 3]) == 2\n    assert candidate(3, 2, 15, [[1, 1, 1], [1, 1, 10]], [0, 0, 100], [1, 2, 3]) == 5\n    assert candidate(2, 3, 10, [[2, 1], [1, 2], [1, 1]], [1, 1], [5, 5]) == 2\n    assert candidate(4, 4, 17, [[10, 10, 1, 5], [9, 7, 7, 1], [6, 3, 5, 9], [2, 10, 2, 7]], [9, 8, 2, 7], [9, 2, 6, 10]) == 1\n    assert candidate(4, 9, 55, [[8, 3, 4, 2], [3, 9, 5, 5], [1, 7, 9, 8], [7, 6, 5, 1], [4, 6, 9, 4], [6, 8, 7, 1], [5, 10, 3, 4], [10, 1, 2, 4], [10, 3, 7, 2]], [9, 1, 10, 0], [3, 4, 9, 9]) == 1\n    assert candidate(10, 10, 142, [[5, 3, 7, 3, 5, 5, 1, 6, 4, 3], [4, 8, 10, 8, 8, 3, 10, 6, 3, 8], [10, 2, 5, 10, 9, 2, 8, 5, 10, 7], [10, 8, 8, 8, 10, 8, 9, 6, 1, 8], [6, 2, 2, 3, 6, 3, 1, 10, 5, 8], [10, 7, 3, 10, 7, 6, 6, 10, 4, 5], [10, 2, 8, 10, 1, 8, 7, 6, 6, 7], [4, 1, 9, 6, 8, 8, 7, 1, 1, 4], [10, 9, 1, 2, 6, 4, 6, 8, 9, 4], [5, 6, 7, 2, 7, 10, 7, 8, 3, 5]], [0, 6, 3, 0, 0, 8, 1, 2, 8, 6], [2, 2, 2, 7, 4, 2, 10, 8, 9, 8]) == 1\n    assert candidate(9, 3, 90, [[10, 9, 1, 3, 3, 5, 5, 10, 7], [2, 6, 4, 9, 9, 1, 9, 6, 7], [1, 4, 7, 6, 7, 7, 10, 6, 6]], [3, 10, 10, 8, 10, 5, 7, 1, 2], [9, 8, 10, 9, 9, 3, 9, 5, 8]) == 1\n    assert candidate(8, 4, 196, [[5, 2, 3, 4, 7, 3, 3, 1], [1, 5, 9, 9, 6, 1, 9, 7], [5, 8, 3, 10, 2, 4, 8, 7], [9, 9, 5, 9, 6, 8, 4, 3]], [3, 5, 3, 6, 1, 5, 8, 1], [4, 5, 4, 9, 4, 8, 7, 5]) == 2\n    assert candidate(2, 5, 48, [[6, 3], [9, 5], [1, 9], [1, 8], [3, 3]], [4, 8], [10, 1]) == 5\n    assert candidate(3, 8, 50, [[10, 8, 5], [9, 8, 8], [2, 3, 1], [6, 2, 7], [5, 5, 3], [3, 5, 6], [8, 2, 9], [10, 2, 1]], [3, 9, 5], [1, 10, 6]) == 4\n    assert candidate(6, 1, 195, [[4, 7, 7, 9, 6, 9]], [7, 4, 1, 4, 4, 0], [6, 6, 9, 10, 7, 9]) == 0\n    assert candidate(10, 4, 149, [[9, 10, 1, 7, 6, 4, 9, 5, 7, 8], [9, 7, 2, 10, 7, 9, 10, 10, 1, 8], [1, 10, 9, 3, 5, 6, 6, 1, 8, 4], [9, 6, 2, 3, 9, 10, 6, 8, 7, 3]], [5, 0, 7, 5, 7, 8, 2, 2, 6, 10], [7, 5, 3, 3, 10, 9, 9, 3, 6, 8]) == 1\n    assert candidate(5, 3, 110, [[5, 8, 9, 3, 10], [10, 10, 2, 1, 9], [7, 8, 2, 3, 4]], [7, 3, 4, 8, 4], [2, 2, 6, 5, 7]) == 2\n    assert candidate(2, 3, 12, [[5, 9], [7, 8], [1, 1]], [0, 9], [8, 5]) == 1\n    assert candidate(9, 5, 172, [[8, 8, 7, 6, 5, 3, 6, 10, 8], [9, 5, 4, 5, 9, 9, 2, 8, 5], [1, 9, 7, 8, 4, 10, 5, 1, 2], [10, 10, 4, 4, 5, 5, 5, 5, 9], [7, 10, 4, 7, 9, 6, 3, 1, 8]], [5, 0, 10, 0, 0, 8, 10, 9, 8], [3, 7, 6, 10, 10, 5, 2, 10, 6]) == 0\n    assert candidate(7, 10, 31, [[10, 6, 2, 1, 6, 3, 9], [9, 7, 1, 4, 3, 3, 6], [4, 8, 3, 10, 7, 2, 10], [8, 1, 3, 3, 9, 3, 6], [6, 3, 2, 4, 9, 7, 5], [4, 2, 10, 2, 9, 8, 2], [9, 3, 6, 1, 3, 8, 1], [9, 5, 6, 9, 4, 10, 3], [1, 8, 8, 2, 5, 4, 10], [1, 6, 6, 6, 10, 6, 4]], [3, 9, 10, 4, 4, 8, 9], [6, 6, 9, 2, 1, 9, 6]) == 1\n    assert candidate(4, 9, 103, [[5, 9, 6, 3], [1, 5, 7, 5], [5, 4, 10, 6], [2, 2, 4, 6], [1, 1, 2, 2], [10, 6, 5, 4], [9, 7, 8, 9], [3, 7, 8, 2], [8, 2, 4, 4]], [7, 7, 7, 3], [4, 7, 6, 10]) == 5\n    assert candidate(10, 1, 197, [[7, 6, 6, 1, 2, 4, 8, 6, 4, 10]], [1, 3, 2, 1, 3, 4, 2, 6, 1, 1], [10, 6, 2, 1, 6, 2, 6, 5, 9, 8]) == 0\n    assert candidate(10, 4, 152, [[1, 7, 1, 3, 9, 6, 8, 9, 10, 4], [8, 8, 9, 3, 10, 10, 4, 3, 2, 2], [3, 6, 4, 6, 1, 9, 4, 1, 4, 5], [2, 5, 1, 8, 3, 10, 6, 3, 8, 4]], [7, 2, 9, 6, 9, 4, 6, 6, 3, 6], [8, 2, 3, 9, 1, 10, 1, 9, 5, 4]) == 1\n    assert candidate(6, 9, 72, [[1, 10, 8, 5, 4, 3], [6, 7, 3, 6, 10, 3], [10, 9, 8, 6, 2, 10], [8, 9, 10, 7, 9, 10], [2, 7, 2, 7, 6, 9], [4, 2, 8, 2, 7, 9], [2, 1, 1, 8, 8, 9], [5, 7, 1, 7, 3, 5], [4, 4, 4, 3, 10, 4]], [3, 3, 1, 6, 10, 8], [1, 8, 9, 8, 3, 3]) == 1\n    assert candidate(1, 10, 177, [[6], [3], [8], [8], [7], [7], [4], [5], [10], [1]], [2], [7]) == 27\n    assert candidate(2, 6, 196, [[6, 5], [7, 10], [3, 10], [5, 8], [5, 7], [5, 6]], [6, 3], [3, 4]) == 5\n    assert candidate(7, 9, 148, [[5, 8, 7, 7, 5, 8, 4], [8, 6, 2, 6, 3, 3, 2], [5, 6, 9, 6, 6, 2, 5], [8, 2, 10, 5, 4, 5, 10], [2, 8, 10, 4, 9, 6, 1], [4, 1, 2, 2, 5, 5, 5], [9, 9, 1, 4, 1, 4, 4], [3, 8, 4, 4, 10, 4, 6], [8, 2, 8, 4, 5, 5, 10]], [7, 8, 7, 9, 3, 8, 2], [7, 5, 4, 5, 1, 3, 10]) == 2\n    assert candidate(8, 5, 151, [[5, 9, 10, 2, 8, 10, 2, 8], [1, 5, 8, 9, 3, 4, 6, 6], [10, 10, 10, 6, 1, 7, 9, 4], [6, 7, 6, 2, 10, 8, 6, 10], [5, 2, 6, 2, 8, 1, 6, 2]], [0, 6, 2, 2, 9, 8, 0, 3], [6, 7, 4, 6, 10, 3, 5, 1]) == 1\n    assert candidate(8, 3, 187, [[1, 4, 8, 6, 8, 5, 1, 4], [10, 9, 4, 3, 1, 2, 5, 9], [4, 10, 7, 8, 7, 7, 1, 9]], [2, 6, 4, 0, 2, 8, 2, 3], [9, 2, 5, 7, 6, 10, 2, 7]) == 1\n    assert candidate(1, 3, 90, [[5], [3], [9]], [5], [10]) == 4\n    assert candidate(10, 5, 91, [[7, 8, 3, 2, 9, 3, 4, 4, 2, 3], [3, 2, 4, 1, 4, 5, 10, 9, 10, 7], [1, 4, 3, 4, 9, 5, 2, 2, 9, 9], [6, 9, 9, 6, 2, 7, 1, 10, 5, 3], [10, 7, 8, 2, 2, 2, 9, 6, 1, 4]], [9, 5, 5, 0, 0, 8, 1, 4, 5, 3], [7, 3, 6, 4, 10, 10, 5, 4, 2, 1]) == 0\n    assert candidate(8, 3, 97, [[3, 3, 7, 1, 5, 5, 8, 2], [10, 5, 1, 3, 1, 5, 1, 5], [7, 2, 2, 10, 7, 10, 6, 8]], [1, 1, 8, 3, 0, 1, 0, 6], [4, 1, 4, 5, 5, 3, 5, 4]) == 1\n    assert candidate(9, 3, 19, [[5, 9, 4, 6, 6, 1, 4, 5, 3], [6, 9, 2, 3, 5, 4, 1, 4, 5], [6, 10, 5, 4, 7, 5, 3, 4, 3]], [8, 7, 6, 3, 4, 7, 7, 0, 4], [10, 8, 1, 6, 9, 7, 3, 7, 3]) == 0\n    assert candidate(8, 2, 168, [[5, 7, 8, 6, 7, 4, 10, 8], [3, 7, 7, 4, 8, 9, 9, 9]], [6, 4, 5, 10, 2, 5, 3, 8], [5, 1, 10, 3, 4, 4, 7, 4]) == 1\n    assert candidate(3, 3, 108, [[6, 1, 10], [5, 3, 6], [2, 8, 7]], [3, 9, 7], [4, 2, 3]) == 3\n    assert candidate(10, 5, 197, [[7, 2, 9, 6, 2, 3, 8, 9, 10, 10], [2, 1, 7, 7, 3, 1, 3, 8, 1, 2], [4, 5, 1, 3, 6, 3, 2, 4, 4, 6], [8, 5, 9, 10, 8, 3, 7, 10, 1, 7], [8, 3, 2, 4, 1, 5, 3, 6, 9, 6]], [5, 2, 9, 8, 1, 3, 6, 4, 2, 3], [6, 6, 10, 4, 9, 5, 2, 6, 4, 6]) == 2\n    assert candidate(8, 8, 90, [[6, 6, 9, 7, 6, 7, 7, 5], [5, 10, 4, 2, 8, 5, 6, 6], [7, 7, 1, 10, 3, 3, 2, 2], [7, 9, 8, 10, 7, 10, 8, 2], [7, 1, 2, 2, 1, 2, 3, 6], [2, 8, 10, 10, 6, 2, 6, 3], [3, 2, 2, 2, 4, 7, 4, 3], [2, 5, 3, 2, 3, 7, 6, 4]], [1, 1, 6, 10, 3, 0, 8, 6], [3, 2, 1, 3, 2, 3, 8, 7]) == 2\n    assert candidate(4, 7, 87, [[8, 8, 5, 3], [7, 8, 8, 9], [1, 7, 3, 10], [4, 3, 9, 8], [4, 7, 2, 2], [5, 8, 2, 2], [6, 1, 2, 7]], [3, 7, 9, 8], [6, 3, 1, 4]) == 2\n    assert candidate(2, 3, 184, [[7, 1], [6, 7], [4, 6]], [1, 6], [8, 2]) == 4\n    assert candidate(4, 3, 25, [[7, 4, 5, 3], [10, 8, 1, 2], [6, 4, 3, 4]], [1, 3, 0, 5], [1, 2, 6, 4]) == 1\n    assert candidate(10, 8, 33, [[3, 2, 9, 8, 3, 7, 10, 2, 6, 7], [6, 6, 5, 6, 3, 3, 4, 6, 5, 7], [6, 8, 5, 10, 8, 4, 1, 8, 4, 2], [7, 10, 7, 10, 4, 4, 10, 7, 5, 3], [2, 6, 3, 3, 8, 8, 2, 6, 4, 2], [2, 2, 2, 4, 8, 2, 7, 3, 7, 4], [10, 9, 7, 9, 9, 2, 3, 9, 2, 1], [8, 9, 10, 7, 10, 9, 7, 2, 3, 8]], [0, 2, 5, 5, 8, 2, 5, 9, 1, 1], [3, 4, 10, 5, 8, 8, 8, 9, 8, 7]) == 0\n    assert candidate(7, 9, 8, [[5, 4, 8, 9, 2, 2, 2], [2, 8, 7, 6, 8, 10, 3], [6, 8, 4, 4, 5, 4, 10], [5, 3, 7, 8, 2, 2, 9], [8, 4, 3, 2, 6, 4, 3], [5, 2, 8, 5, 4, 5, 10], [9, 5, 4, 9, 6, 5, 7], [10, 1, 6, 7, 2, 7, 5], [3, 6, 9, 9, 3, 7, 6]], [3, 9, 1, 5, 1, 7, 9], [5, 7, 1, 6, 8, 3, 9]) == 0\n    assert candidate(1, 3, 96, [[4], [8], [3]], [0], [6]) == 5\n    assert candidate(4, 2, 113, [[6, 9, 5, 7], [4, 9, 7, 1]], [4, 1, 0, 4], [9, 2, 3, 5]) == 2\n    assert candidate(6, 6, 97, [[9, 3, 10, 2, 6, 3], [9, 4, 3, 7, 1, 7], [10, 10, 9, 2, 1, 6], [4, 5, 2, 3, 3, 10], [2, 6, 8, 3, 6, 1], [4, 9, 6, 10, 3, 10]], [2, 8, 10, 8, 9, 0], [4, 5, 6, 3, 10, 1]) == 2\n    assert candidate(9, 6, 18, [[5, 10, 2, 4, 3, 3, 2, 10, 3], [2, 7, 1, 7, 10, 7, 8, 8, 7], [6, 2, 10, 2, 4, 3, 4, 8, 9], [5, 7, 2, 10, 6, 10, 4, 10, 3], [1, 9, 4, 4, 9, 9, 4, 2, 6], [7, 5, 1, 4, 10, 9, 2, 2, 3]], [5, 4, 0, 1, 1, 6, 1, 8, 0], [8, 1, 6, 5, 10, 4, 10, 9, 7]) == 0\n    assert candidate(2, 10, 197, [[8, 1], [7, 4], [2, 3], [10, 3], [6, 3], [9, 8], [8, 7], [3, 4], [2, 6], [4, 5]], [5, 9], [10, 2]) == 10\n    assert candidate(10, 4, 115, [[4, 6, 5, 10, 9, 5, 2, 2, 10, 1], [6, 7, 2, 2, 4, 10, 3, 8, 3, 7], [1, 9, 10, 5, 4, 6, 2, 1, 8, 4], [7, 10, 9, 5, 10, 6, 9, 5, 8, 4]], [7, 8, 8, 8, 6, 10, 7, 8, 2, 3], [3, 5, 1, 8, 7, 7, 10, 4, 7, 8]) == 1\n    assert candidate(6, 3, 168, [[1, 2, 10, 5, 5, 8], [1, 3, 6, 1, 3, 6], [8, 5, 6, 6, 5, 10]], [7, 0, 3, 1, 6, 8], [5, 6, 2, 5, 3, 1]) == 4\n    assert candidate(4, 1, 13, [[6, 10, 1, 10]], [2, 9, 7, 3], [7, 8, 5, 5]) == 0\n    assert candidate(1, 3, 144, [[4], [10], [9]], [10], [1]) == 38\n    assert candidate(8, 4, 34, [[9, 1, 1, 9, 1, 10, 6, 4], [10, 8, 6, 5, 7, 5, 2, 9], [7, 4, 5, 10, 7, 2, 6, 2], [3, 8, 3, 6, 9, 9, 10, 5]], [9, 9, 6, 5, 5, 7, 5, 4], [7, 4, 2, 2, 8, 10, 10, 4]) == 0\n    assert candidate(10, 3, 64, [[7, 2, 7, 4, 4, 6, 8, 3, 5, 6], [10, 10, 6, 5, 4, 7, 5, 1, 3, 2], [10, 10, 8, 4, 6, 8, 9, 1, 8, 10]], [8, 9, 7, 3, 10, 6, 6, 0, 6, 10], [7, 8, 4, 6, 9, 7, 7, 8, 2, 9]) == 1\n    assert candidate(9, 5, 37, [[7, 5, 8, 5, 3, 1, 4, 10, 6], [4, 5, 5, 5, 7, 4, 2, 8, 1], [3, 8, 3, 6, 7, 9, 10, 2, 7], [5, 3, 5, 1, 10, 3, 4, 10, 6], [6, 2, 9, 3, 10, 6, 3, 9, 7]], [1, 4, 1, 7, 10, 8, 8, 3, 6], [7, 4, 2, 7, 3, 10, 9, 8, 10]) == 0\n    assert candidate(3, 10, 67, [[5, 3, 10], [7, 5, 4], [3, 9, 9], [10, 2, 9], [9, 4, 8], [8, 5, 7], [5, 2, 3], [1, 7, 2], [3, 9, 1], [7, 1, 4]], [2, 9, 4], [4, 9, 1]) == 3\n    assert candidate(4, 7, 113, [[6, 10, 4, 10], [7, 8, 1, 1], [1, 5, 4, 1], [4, 7, 8, 9], [7, 9, 2, 4], [5, 1, 10, 4], [3, 3, 9, 4]], [0, 5, 5, 10], [1, 10, 8, 4]) == 2\n    assert candidate(10, 7, 128, [[5, 1, 1, 4, 5, 9, 2, 9, 2, 2], [6, 10, 4, 8, 3, 10, 8, 4, 5, 10], [3, 3, 8, 5, 2, 6, 4, 5, 4, 8], [5, 5, 4, 1, 3, 2, 10, 5, 3, 10], [9, 4, 2, 4, 2, 4, 7, 7, 1, 4], [9, 2, 10, 5, 1, 5, 5, 9, 5, 6], [10, 7, 9, 1, 4, 7, 6, 7, 5, 7]], [3, 8, 4, 5, 3, 5, 4, 10, 4, 9], [4, 1, 8, 4, 2, 9, 1, 2, 1, 10]) == 2\n    assert candidate(1, 7, 48, [[1], [5], [9], [6], [4], [2], [4]], [6], [1]) == 54\n    assert candidate(9, 4, 21, [[7, 2, 7, 7, 8, 1, 6, 7, 3], [8, 10, 4, 3, 7, 2, 3, 2, 5], [6, 9, 3, 2, 7, 6, 10, 6, 5], [10, 2, 4, 10, 7, 9, 5, 8, 6]], [9, 10, 5, 2, 10, 9, 8, 10, 10], [6, 5, 2, 8, 10, 1, 2, 7, 1]) == 1\n    assert candidate(8, 8, 164, [[8, 8, 7, 7, 4, 8, 8, 3], [8, 1, 5, 9, 4, 5, 10, 8], [6, 3, 7, 5, 5, 5, 8, 7], [7, 1, 6, 2, 6, 10, 5, 6], [9, 10, 1, 10, 3, 8, 9, 9], [1, 5, 5, 4, 5, 10, 5, 9], [8, 3, 5, 3, 5, 4, 7, 1], [10, 2, 3, 6, 2, 4, 8, 6]], [10, 3, 10, 2, 1, 4, 8, 8], [2, 9, 7, 7, 4, 3, 2, 10]) == 2\n    assert candidate(1, 6, 149, [[4], [8], [1], [9], [1], [9]], [6], [7]) == 27\n    assert candidate(6, 7, 136, [[8, 9, 8, 5, 9, 8], [4, 2, 1, 9, 3, 8], [6, 8, 3, 1, 9, 9], [8, 1, 4, 5, 2, 7], [4, 5, 6, 3, 4, 9], [5, 9, 8, 2, 1, 10], [10, 10, 9, 9, 2, 8]], [4, 1, 2, 9, 9, 2], [8, 1, 7, 8, 1, 1]) == 2\n    assert candidate(6, 1, 55, [[3, 5, 3, 8, 9, 8]], [9, 7, 0, 1, 9, 4], [3, 3, 1, 1, 1, 2]) == 1\n    assert candidate(3, 1, 195, [[7, 3, 7]], [0, 10, 7], [7, 6, 10]) == 2\n    assert candidate(1, 8, 69, [[8], [9], [10], [10], [4], [4], [7], [6]], [10], [9]) == 4\n    assert candidate(9, 2, 176, [[8, 10, 1, 2, 6, 3, 5, 7, 7], [4, 6, 4, 8, 4, 5, 3, 6, 6]], [10, 9, 1, 3, 10, 1, 10, 5, 2], [3, 8, 8, 2, 5, 6, 5, 8, 1]) == 1\n    assert candidate(8, 3, 17, [[3, 1, 4, 8, 7, 8, 5, 5], [7, 10, 6, 6, 3, 10, 10, 9], [5, 6, 7, 1, 4, 7, 5, 1]], [0, 4, 0, 4, 4, 9, 2, 1], [10, 1, 3, 9, 9, 3, 1, 10]) == 0\n    assert candidate(1, 9, 109, [[8], [10], [4], [3], [9], [7], [9], [8], [7]], [10], [9]) == 7\n    assert candidate(7, 6, 130, [[4, 2, 10, 2, 2, 9, 4], [9, 4, 8, 8, 4, 9, 9], [9, 10, 7, 8, 7, 1, 4], [8, 2, 5, 5, 6, 4, 7], [9, 8, 4, 3, 8, 6, 2], [1, 2, 3, 9, 4, 10, 1]], [10, 1, 7, 10, 1, 10, 5], [3, 7, 6, 5, 1, 5, 7]) == 2\n    assert candidate(1, 8, 48, [[5], [6], [10], [9], [2], [8], [9], [8]], [9], [5]) == 9\n    assert candidate(10, 3, 124, [[5, 8, 7, 1, 7, 7, 5, 4, 5, 2], [9, 1, 2, 8, 2, 8, 3, 5, 2, 4], [7, 4, 6, 4, 4, 2, 4, 10, 4, 8]], [9, 8, 7, 0, 9, 1, 4, 3, 1, 1], [9, 3, 5, 4, 3, 5, 2, 10, 7, 4]) == 1\n    assert candidate(7, 10, 177, [[1, 8, 4, 1, 9, 7, 4], [8, 1, 3, 3, 9, 4, 5], [8, 5, 4, 2, 9, 9, 10], [2, 10, 3, 3, 3, 10, 8], [6, 3, 1, 3, 7, 1, 7], [3, 5, 7, 6, 8, 10, 10], [2, 10, 10, 2, 2, 7, 7], [3, 2, 10, 9, 4, 1, 2], [2, 7, 1, 8, 2, 7, 10], [10, 9, 2, 8, 10, 1, 4]], [0, 3, 5, 10, 0, 9, 9], [3, 5, 4, 8, 10, 1, 2]) == 1\n    assert candidate(6, 3, 135, [[7, 8, 3, 4, 10, 5], [6, 5, 10, 3, 1, 1], [5, 2, 9, 9, 8, 1]], [10, 0, 5, 1, 0, 7], [3, 10, 3, 3, 3, 8]) == 1\n    assert candidate(10, 1, 131, [[10, 2, 8, 4, 3, 6, 10, 8, 8, 6]], [1, 7, 10, 1, 4, 8, 4, 6, 7, 0], [1, 10, 9, 3, 9, 8, 3, 2, 9, 6]) == 1\n    assert candidate(10, 7, 79, [[3, 8, 9, 10, 7, 3, 8, 4, 2, 2], [7, 9, 1, 1, 2, 1, 8, 7, 5, 7], [5, 9, 6, 2, 9, 4, 10, 1, 8, 5], [4, 3, 7, 2, 4, 7, 4, 6, 2, 10], [4, 5, 2, 5, 5, 2, 7, 7, 1, 8], [9, 2, 9, 4, 9, 4, 7, 3, 4, 4], [8, 4, 10, 8, 2, 8, 7, 5, 6, 10]], [0, 4, 5, 5, 7, 9, 9, 7, 3, 0], [10, 8, 1, 2, 7, 7, 4, 7, 6, 6]) == 0\n    assert candidate(8, 7, 86, [[10, 5, 6, 8, 9, 10, 6, 5], [7, 8, 9, 9, 3, 3, 9, 4], [5, 4, 4, 4, 10, 2, 6, 3], [9, 7, 1, 10, 10, 4, 4, 6], [10, 9, 10, 3, 4, 2, 9, 4], [2, 1, 4, 8, 3, 6, 4, 1], [1, 8, 2, 2, 3, 3, 10, 8]], [0, 6, 0, 5, 6, 0, 10, 1], [7, 9, 10, 10, 5, 5, 7, 1]) == 1\n    assert candidate(6, 8, 48, [[10, 2, 1, 4, 9, 1], [5, 10, 6, 3, 3, 9], [10, 10, 10, 9, 2, 9], [1, 5, 2, 2, 10, 9], [7, 9, 10, 5, 10, 3], [3, 3, 10, 5, 6, 2], [6, 6, 6, 8, 9, 9], [2, 4, 2, 7, 3, 3]], [5, 6, 5, 1, 3, 5], [4, 3, 8, 6, 1, 7]) == 1\n    assert candidate(2, 8, 44, [[8, 5], [1, 6], [3, 10], [4, 6], [5, 8], [10, 5], [7, 5], [5, 1]], [8, 0], [8, 6]) == 2\n    assert candidate(9, 3, 107, [[8, 1, 9, 10, 10, 5, 4, 9, 1], [8, 10, 6, 8, 10, 2, 10, 9, 4], [9, 6, 4, 7, 10, 2, 7, 4, 2]], [9, 2, 4, 1, 1, 3, 8, 9, 0], [6, 2, 8, 3, 1, 3, 5, 9, 9]) == 1\n    assert candidate(3, 5, 125, [[10, 8, 9], [10, 7, 8], [7, 7, 6], [9, 2, 5], [8, 4, 6]], [8, 3, 1], [4, 10, 10]) == 1\n    assert candidate(6, 10, 118, [[10, 7, 8, 10, 5, 9], [2, 4, 4, 5, 4, 2], [6, 7, 2, 6, 3, 10], [3, 8, 10, 8, 1, 6], [2, 9, 3, 8, 5, 5], [1, 6, 8, 1, 7, 7], [4, 9, 1, 8, 9, 5], [9, 4, 10, 4, 1, 4], [1, 5, 10, 2, 5, 3], [2, 1, 3, 3, 2, 9]], [9, 6, 2, 2, 6, 5], [2, 1, 7, 5, 10, 9]) == 2\n    assert candidate(1, 2, 148, [[1], [8]], [4], [2]) == 78\n    assert candidate(5, 5, 91, [[2, 4, 10, 5, 5], [4, 3, 8, 8, 10], [9, 6, 2, 7, 3], [7, 7, 3, 6, 6], [6, 4, 5, 3, 4]], [6, 4, 7, 3, 3], [4, 10, 9, 7, 3]) == 1\n    assert candidate(8, 5, 143, [[8, 3, 3, 6, 2, 5, 8, 9], [6, 8, 3, 6, 4, 10, 10, 6], [9, 6, 10, 9, 6, 5, 1, 1], [1, 1, 10, 3, 4, 10, 2, 2], [10, 6, 4, 9, 9, 3, 9, 2]], [2, 1, 4, 5, 6, 8, 2, 8], [1, 8, 3, 9, 9, 7, 1, 8]) == 1\n    assert candidate(4, 9, 172, [[9, 2, 2, 2], [4, 5, 3, 2], [4, 6, 1, 9], [5, 3, 3, 5], [2, 4, 3, 9], [7, 4, 4, 3], [1, 3, 2, 6], [7, 2, 5, 4], [4, 4, 2, 2]], [6, 7, 5, 2], [2, 8, 5, 2]) == 5\n    assert candidate(5, 2, 110, [[2, 8, 10, 7, 4], [5, 3, 5, 5, 5]], [6, 8, 8, 1, 6], [8, 5, 8, 6, 7]) == 1\n    assert candidate(3, 10, 21, [[9, 8, 5], [2, 9, 9], [2, 6, 8], [7, 4, 10], [10, 8, 6], [2, 6, 5], [6, 6, 8], [4, 7, 7], [8, 9, 10], [6, 1, 7]], [6, 4, 10], [7, 9, 4]) == 1\n    assert candidate(5, 1, 176, [[5, 6, 2, 5, 4]], [1, 4, 3, 10, 7], [10, 9, 9, 8, 10]) == 1\n    assert candidate(9, 1, 112, [[10, 4, 3, 5, 2, 10, 10, 8, 9]], [4, 4, 3, 0, 5, 0, 7, 6, 2], [7, 9, 8, 9, 2, 6, 10, 5, 5]) == 0\n    assert candidate(8, 9, 41, [[10, 6, 7, 3, 6, 9, 9, 8], [5, 9, 5, 2, 4, 10, 2, 5], [4, 10, 9, 3, 5, 10, 7, 1], [8, 3, 1, 4, 2, 5, 3, 1], [1, 10, 10, 10, 7, 1, 10, 4], [6, 9, 7, 10, 8, 7, 6, 9], [4, 9, 10, 4, 10, 7, 1, 7], [3, 5, 9, 5, 2, 8, 3, 10], [8, 7, 1, 9, 3, 8, 6, 3]], [5, 4, 10, 10, 7, 8, 7, 6], [5, 1, 10, 4, 9, 9, 4, 6]) == 1\n    assert candidate(2, 10, 2, [[9, 6], [10, 1], [7, 3], [5, 5], [7, 6], [10, 2], [7, 3], [7, 6], [7, 3], [2, 7]], [6, 10], [1, 4]) == 1\n    assert candidate(2, 7, 168, [[8, 2], [4, 7], [8, 3], [1, 6], [3, 3], [9, 7], [8, 4]], [1, 7], [5, 3]) == 8\n    assert candidate(8, 9, 195, [[2, 5, 4, 2, 2, 4, 4, 1], [5, 4, 5, 8, 9, 1, 2, 5], [1, 10, 3, 9, 6, 7, 1, 3], [4, 10, 3, 3, 6, 4, 7, 6], [4, 3, 10, 2, 7, 8, 4, 9], [4, 1, 6, 2, 8, 7, 3, 3], [10, 7, 5, 2, 1, 5, 4, 5], [7, 4, 3, 10, 4, 10, 1, 2], [9, 7, 9, 8, 9, 2, 3, 10]], [1, 1, 7, 10, 1, 6, 3, 9], [1, 4, 7, 6, 4, 5, 5, 2]) == 3\n    assert candidate(7, 6, 167, [[2, 2, 3, 4, 6, 2, 4], [5, 7, 3, 7, 4, 6, 7], [5, 7, 4, 10, 5, 1, 1], [2, 3, 10, 6, 9, 5, 6], [3, 9, 7, 8, 5, 10, 2], [6, 7, 8, 8, 1, 6, 6]], [10, 10, 8, 9, 7, 8, 4], [2, 6, 1, 9, 9, 9, 8]) == 2\n    assert candidate(6, 9, 73, [[1, 1, 9, 4, 1, 7], [6, 8, 7, 7, 6, 2], [2, 1, 5, 10, 2, 5], [3, 10, 7, 7, 5, 10], [6, 1, 6, 8, 4, 6], [3, 10, 10, 9, 8, 2], [10, 8, 7, 7, 4, 2], [10, 2, 3, 8, 7, 4], [7, 5, 9, 10, 4, 3]], [1, 9, 8, 6, 10, 6], [6, 3, 9, 7, 1, 4]) == 1\n    assert candidate(5, 3, 128, [[4, 6, 5, 5, 1], [1, 4, 8, 8, 7], [3, 3, 5, 4, 5]], [6, 8, 8, 0, 2], [2, 4, 9, 7, 6]) == 2\n    assert candidate(10, 7, 96, [[9, 3, 10, 2, 8, 6, 1, 7, 2, 4], [2, 10, 4, 5, 5, 3, 7, 5, 2, 10], [8, 7, 7, 10, 6, 6, 3, 2, 3, 8], [8, 1, 5, 4, 7, 8, 1, 9, 2, 10], [6, 7, 10, 9, 8, 8, 8, 3, 1, 2], [1, 6, 9, 1, 8, 4, 9, 4, 9, 7], [5, 6, 5, 2, 1, 8, 9, 4, 3, 6]], [4, 6, 3, 0, 7, 0, 7, 10, 8, 10], [4, 3, 6, 5, 6, 2, 7, 3, 1, 3]) == 1\n    assert candidate(5, 9, 81, [[4, 4, 9, 5, 5], [7, 9, 10, 6, 8], [4, 7, 4, 2, 10], [2, 9, 6, 9, 8], [2, 5, 7, 3, 4], [4, 9, 9, 2, 5], [5, 6, 1, 2, 9], [5, 3, 8, 7, 8], [8, 6, 9, 9, 3]], [2, 9, 6, 5, 3], [3, 3, 8, 7, 6]) == 1\n    assert candidate(10, 10, 102, [[9, 4, 10, 4, 9, 4, 3, 2, 2, 4], [10, 8, 3, 4, 5, 6, 4, 10, 2, 7], [4, 1, 10, 9, 4, 5, 7, 9, 6, 8], [1, 5, 9, 7, 8, 5, 10, 3, 8, 7], [6, 2, 10, 2, 8, 10, 7, 5, 10, 7], [7, 2, 2, 6, 8, 7, 9, 10, 6, 8], [9, 4, 8, 3, 10, 3, 2, 5, 6, 6], [3, 1, 3, 5, 10, 5, 8, 8, 1, 10], [6, 4, 3, 9, 3, 8, 8, 6, 3, 5], [8, 9, 1, 2, 7, 8, 1, 10, 8, 1]], [3, 6, 1, 3, 3, 7, 7, 2, 2, 2], [3, 10, 9, 7, 1, 3, 2, 9, 7, 3]) == 0\n    assert candidate(6, 6, 115, [[2, 5, 8, 6, 2, 3], [7, 10, 7, 2, 10, 5], [2, 7, 10, 10, 3, 8], [3, 3, 8, 4, 3, 10], [10, 10, 4, 10, 4, 3], [8, 9, 9, 5, 7, 5]], [7, 1, 10, 7, 6, 2], [3, 8, 9, 7, 8, 4]) == 1\n    assert candidate(8, 10, 19, [[7, 6, 3, 10, 2, 9, 7, 2], [5, 10, 3, 3, 10, 6, 6, 10], [10, 4, 9, 10, 10, 7, 7, 9], [10, 6, 9, 3, 4, 9, 9, 5], [7, 1, 3, 4, 8, 2, 8, 8], [9, 2, 3, 1, 1, 2, 2, 5], [2, 6, 9, 3, 7, 9, 5, 8], [3, 10, 5, 2, 8, 5, 8, 10], [8, 10, 1, 1, 2, 1, 7, 8], [10, 8, 4, 8, 5, 5, 10, 2]], [6, 0, 9, 2, 5, 0, 10, 8], [2, 4, 9, 8, 4, 10, 3, 1]) == 0\n    assert candidate(7, 10, 179, [[10, 5, 2, 6, 5, 2, 7], [1, 6, 8, 2, 4, 8, 3], [8, 6, 1, 2, 7, 7, 4], [4, 1, 9, 6, 3, 8, 10], [7, 6, 3, 5, 3, 4, 2], [8, 10, 9, 3, 8, 1, 5], [5, 4, 1, 7, 7, 6, 3], [10, 9, 8, 1, 10, 4, 8], [9, 4, 6, 2, 3, 3, 9], [6, 5, 2, 3, 10, 6, 8]], [9, 0, 2, 10, 3, 7, 6], [6, 2, 7, 10, 1, 2, 7]) == 2\n    assert candidate(9, 10, 123, [[4, 9, 5, 9, 9, 4, 8, 10, 10], [3, 1, 5, 8, 4, 4, 8, 6, 3], [5, 7, 2, 8, 2, 7, 3, 9, 5], [9, 4, 6, 7, 2, 3, 4, 3, 3], [3, 6, 2, 1, 3, 7, 10, 7, 3], [2, 6, 9, 7, 5, 7, 3, 10, 1], [1, 7, 10, 6, 9, 6, 6, 9, 8], [10, 8, 2, 1, 6, 8, 3, 8, 6], [6, 5, 1, 3, 5, 1, 2, 3, 1], [8, 2, 6, 1, 8, 8, 3, 2, 1]], [2, 6, 3, 4, 6, 1, 7, 2, 6], [5, 5, 9, 1, 5, 10, 4, 1, 2]) == 2\n    assert candidate(6, 1, 161, [[4, 6, 9, 8, 5, 5]], [7, 4, 5, 1, 9, 4], [6, 5, 5, 6, 3, 1]) == 1\n\ndef test_check():\n    check(maxNumberOfAlloys)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3104_countWays", "language": "py", "prompt": "from typing import List\n\ndef countWays(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums of length n where n is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\nThe ith student will become happy if one of these two conditions is met:\n * The student is selected and the total number of selected students is strictly greater than nums[i].\n * The student is not selected and the total number of selected students is strictly less than nums[i].\nReturn the number of ways to select a group of students so that everyone remains happy.\nExample 1:\nInput: nums = [1,1]\nOutput: 2\nExplanation:\nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group.\nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\nExample 2:\nInput: nums = [6,0,3,3,6,7,2,7]\nOutput: 3\nExplanation:\nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group.\nConstraints:\n * 1 <= nums.length <= 105\n * 0 <= nums[i] < nums.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3104_countWays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 1]) == 2\n    assert candidate([6, 0, 3, 3, 6, 7, 2, 7]) == 3\n    assert candidate([1, 1, 0, 1]) == 1\n    assert candidate([5, 0, 3, 4, 2, 1, 2, 4]) == 1\n    assert candidate([0, 4, 4, 4, 4, 4, 2]) == 2\n    assert candidate([0, 1, 5, 6, 8, 7, 4, 7, 2]) == 2\n    assert candidate([0]) == 1\n    assert candidate([2, 2, 7, 1, 2, 2, 4, 7]) == 3\n    assert candidate([0, 2, 2, 2, 3, 3, 3, 3]) == 2\n    assert candidate([7, 7, 7, 7, 7, 7, 7, 7, 2]) == 2\n    assert candidate([4, 2, 3, 6, 6, 0, 6, 8, 3]) == 3\n    assert candidate([0, 0, 1, 7, 2, 0, 6, 5]) == 1\n    assert candidate([6, 6, 6, 6, 6, 6, 6, 7, 1, 7]) == 2\n    assert candidate([2, 2, 4, 5, 0, 1, 4, 4, 7]) == 1\n    assert candidate([4, 4, 4, 4, 4]) == 2\n    assert candidate([0, 4, 0, 3, 4]) == 2\n    assert candidate([6, 5, 5, 8, 4, 2, 6, 4, 8]) == 3\n    assert candidate([0, 9, 4, 6, 8, 8, 1, 7, 4, 7]) == 2\n    assert candidate([1, 0, 0]) == 1\n    assert candidate([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 2\n    assert candidate([4, 5, 0, 4, 2, 0, 2]) == 1\n    assert candidate([8, 1, 2, 1, 2, 1, 2, 4, 0]) == 1\n    assert candidate([0, 1]) == 1\n    assert candidate([8, 4, 1, 8, 8, 7, 4, 5, 3]) == 2\n    assert candidate([1, 1, 0, 2, 5, 5, 4]) == 1\n    assert candidate([6, 3, 1, 5, 5, 4, 5]) == 2\n    assert candidate([0, 1, 1, 5, 5, 5, 5, 5, 5]) == 2\n    assert candidate([2, 3, 5, 3, 0, 3]) == 2\n    assert candidate([2, 2, 2, 0, 2]) == 2\n    assert candidate([1, 1, 1]) == 2\n    assert candidate([7, 7, 7, 7, 7, 7, 7, 7, 4, 5]) == 2\n    assert candidate([2, 2, 2, 2, 4]) == 2\n    assert candidate([3, 3, 3, 3]) == 2\n    assert candidate([1, 0]) == 1\n    assert candidate([6, 6, 6, 6, 6, 6, 6, 0, 4, 9]) == 2\n    assert candidate([4, 4, 4, 4, 4, 5]) == 2\n    assert candidate([2, 3, 2, 1]) == 2\n    assert candidate([3, 3, 3, 3, 2, 2, 2, 2, 1]) == 2\n    assert candidate([1, 5, 3, 0, 3, 6, 2]) == 1\n    assert candidate([1, 1, 1, 1, 1]) == 2\n    assert candidate([0, 0]) == 1\n    assert candidate([4, 4, 4, 4, 4, 0, 1]) == 2\n    assert candidate([4, 3, 1, 5, 1, 4, 2, 1, 6]) == 2\n    assert candidate([6, 4, 0, 7, 5, 7, 5, 6, 0]) == 2\n    assert candidate([5, 5, 5, 5, 5, 5]) == 2\n    assert candidate([0, 3, 4, 3, 4, 1]) == 2\n    assert candidate([1, 1, 1, 3]) == 2\n    assert candidate([0, 1, 0]) == 1\n    assert candidate([1, 1, 0]) == 1\n    assert candidate([1, 7, 6, 4, 1, 2, 1, 6, 4]) == 2\n    assert candidate([2, 2, 2, 4, 4, 4, 4, 4]) == 3\n    assert candidate([1, 3, 5, 2, 4, 6, 7, 5, 6]) == 2\n    assert candidate([1, 1, 1, 1, 2, 2, 2, 3]) == 2\n    assert candidate([3, 5, 3, 2, 0, 3, 3, 7]) == 2\n    assert candidate([6, 6, 6, 6, 6, 6, 6]) == 2\n    assert candidate([7, 9, 0, 3, 6, 9, 4, 0, 8, 7]) == 2\n    assert candidate([0, 0, 0]) == 1\n    assert candidate([2, 2, 2, 2, 1, 3, 3, 6]) == 2\n    assert candidate([2, 2, 2, 2, 2, 2, 6]) == 2\n    assert candidate([5, 3, 9, 2, 4, 2, 1, 2, 8, 6]) == 2\n    assert candidate([2, 2, 2, 0, 0, 6, 6, 2, 5, 4]) == 1\n    assert candidate([2, 0, 1]) == 1\n    assert candidate([2, 2, 0]) == 2\n    assert candidate([2, 2, 2, 2, 1, 0]) == 1\n    assert candidate([2, 2, 2, 2, 4, 5, 0]) == 2\n    assert candidate([0, 1, 2]) == 1\n    assert candidate([1, 1, 3, 3, 3, 3, 7, 8, 2]) == 2\n    assert candidate([1, 2, 0, 4, 4]) == 2\n    assert candidate([1, 1, 0, 0]) == 1\n    assert candidate([1, 7, 8, 7, 1, 0, 7, 3, 8]) == 2\n    assert candidate([2, 2, 2, 1]) == 2\n    assert candidate([1, 8, 6, 3, 3, 4, 3, 2, 3]) == 2\n    assert candidate([8, 1, 6, 4, 1, 2, 2, 3, 3]) == 2\n    assert candidate([2, 2, 2, 1, 1, 5]) == 2\n    assert candidate([1, 3, 3, 3, 2]) == 2\n    assert candidate([1, 3, 2, 3]) == 2\n    assert candidate([1, 1, 2]) == 2\n    assert candidate([0, 3, 6, 3, 0, 2, 3]) == 1\n    assert candidate([7, 7, 7, 7, 7, 7, 7, 7, 2, 0]) == 2\n    assert candidate([5, 4, 4, 4, 4, 7, 1, 4]) == 2\n    assert candidate([3, 3, 3, 3, 0]) == 2\n    assert candidate([7, 7, 4, 0, 2, 1, 5, 2]) == 2\n    assert candidate([0, 2, 2]) == 2\n    assert candidate([7, 7, 7, 7, 7, 7, 7, 7]) == 2\n    assert candidate([2, 2, 0, 3]) == 2\n    assert candidate([3, 3, 3, 3, 0, 5]) == 2\n    assert candidate([4, 4, 4, 2, 5, 0]) == 2\n    assert candidate([1, 1, 3, 2]) == 2\n    assert candidate([0, 3, 0, 2, 4]) == 1\n    assert candidate([0, 3, 3, 3, 3, 1, 1]) == 1\n    assert candidate([0, 4, 1, 2, 0, 6, 6]) == 2\n    assert candidate([4, 4, 4, 4, 4, 5, 3, 6, 5, 5]) == 2\n    assert candidate([2, 0, 1, 0]) == 1\n    assert candidate([0, 5, 5, 5, 5, 5, 5]) == 2\n    assert candidate([0, 5, 4, 4, 3, 5]) == 2\n    assert candidate([6, 6, 6, 6, 6, 6, 6, 2, 7]) == 2\n    assert candidate([1, 5, 3, 7, 2, 3, 1, 2, 8]) == 2\n    assert candidate([3, 3, 3, 3, 2]) == 2\n    assert candidate([3, 3, 3, 3, 0, 2]) == 2\n    assert candidate([2, 3, 9, 0, 1, 3, 9, 2, 6, 1]) == 2\n\ndef test_check():\n    check(countWays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3105_minEdgeReversals", "language": "py", "prompt": "from typing import List\n\ndef minEdgeReversals(n: int, edges: List[List[int]]) -> List[int]:\n    \"\"\"There is a simple directed graph with n nodes labeled from 0 to n - 1. The graph would form a tree if its edges were bi-directional.\nYou are given an integer n and a 2D integer array edges, where edges[i] = [ui, vi] represents a directed edge going from node ui to node vi.\nAn edge reversal changes the direction of an edge, i.e., a directed edge going from node ui to node vi becomes a directed edge going from node vi to node ui.\nFor every node i in the range [0, n - 1], your task is to independently calculate the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nReturn an integer array answer, where answer[i] is the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/26/image-20230826221104-3.png]\nInput: n = 4, edges = [[2,0],[2,1],[1,3]]\nOutput: [1,1,0,2]\nExplanation: The image above shows the graph formed by the edges.\nFor node 0: after reversing the edge [2,0], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 1.\nFor node 1: after reversing the edge [2,1], it is possible to reach any other node starting from node 1.\nSo, answer[1] = 1.\nFor node 2: it is already possible to reach any other node starting from node 2.\nSo, answer[2] = 0.\nFor node 3: after reversing the edges [1,3] and [2,1], it is possible to reach any other node starting from node 3.\nSo, answer[3] = 2.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/26/image-20230826225541-2.png]\nInput: n = 3, edges = [[1,2],[2,0]]\nOutput: [2,0,1]\nExplanation: The image above shows the graph formed by the edges.\nFor node 0: after reversing the edges [2,0] and [1,2], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 2.\nFor node 1: it is already possible to reach any other node starting from node 1.\nSo, answer[1] = 0.\nFor node 2: after reversing the edge [1, 2], it is possible to reach any other node starting from node 2.\nSo, answer[2] = 1.\nConstraints:\n * 2 <= n <= 105\n * edges.length == n - 1\n * edges[i].length == 2\n * 0 <= ui == edges[i][0] < n\n * 0 <= vi == edges[i][1] < n\n * ui != vi\n * The input is generated such\u00a0that if the edges were bi-directional, the graph would be a tree.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3105_minEdgeReversals.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(4, [[2, 0], [2, 1], [1, 3]]) == [1, 1, 0, 2]\n    assert candidate(3, [[1, 2], [2, 0]]) == [2, 0, 1]\n    assert candidate(2, [[0, 1]]) == [0, 1]\n    assert candidate(3, [[2, 0], [2, 1]]) == [1, 1, 0]\n    assert candidate(4, [[0, 1], [3, 0], [2, 3]]) == [2, 3, 0, 1]\n    assert candidate(4, [[0, 2], [0, 3], [3, 1]]) == [0, 2, 1, 1]\n    assert candidate(4, [[0, 3], [1, 2], [2, 3]]) == [2, 1, 2, 3]\n    assert candidate(4, [[0, 3], [1, 2], [3, 1]]) == [0, 2, 3, 1]\n    assert candidate(4, [[0, 3], [2, 1], [3, 1]]) == [1, 3, 2, 2]\n    assert candidate(4, [[1, 0], [2, 0], [3, 2]]) == [3, 2, 2, 1]\n    assert candidate(5, [[0, 1], [0, 4], [2, 3], [4, 2]]) == [0, 1, 2, 3, 1]\n    assert candidate(5, [[0, 1], [2, 0], [0, 4], [3, 4]]) == [2, 3, 1, 2, 3]\n    assert candidate(5, [[0, 2], [0, 1], [3, 1], [4, 1]]) == [2, 3, 3, 2, 2]\n    assert candidate(5, [[0, 2], [0, 1], [3, 1], [4, 3]]) == [2, 3, 3, 2, 1]\n    assert candidate(5, [[0, 2], [1, 3], [1, 4], [2, 4]]) == [1, 2, 2, 3, 3]\n    assert candidate(5, [[0, 2], [1, 3], [2, 3], [4, 2]]) == [2, 3, 3, 4, 2]\n    assert candidate(5, [[0, 2], [2, 1], [2, 3], [4, 3]]) == [1, 3, 2, 3, 2]\n    assert candidate(5, [[0, 3], [0, 4], [1, 2], [4, 1]]) == [0, 2, 3, 1, 1]\n    assert candidate(5, [[1, 0], [3, 0], [0, 4], [2, 3]]) == [3, 2, 1, 2, 4]\n    assert candidate(5, [[3, 0], [0, 4], [1, 3], [2, 3]]) == [3, 1, 1, 2, 4]\n    assert candidate(6, [[0, 1], [0, 5], [1, 2], [3, 2], [2, 4]]) == [1, 2, 3, 2, 4, 2]\n    assert candidate(6, [[0, 1], [2, 1], [1, 5], [2, 3], [4, 3]]) == [2, 3, 2, 3, 2, 4]\n    assert candidate(6, [[0, 2], [0, 3], [0, 1], [0, 5], [1, 4]]) == [0, 1, 1, 1, 2, 1]\n    assert candidate(6, [[0, 2], [1, 3], [1, 2], [2, 4], [2, 5]]) == [1, 1, 2, 2, 3, 3]\n    assert candidate(6, [[0, 4], [1, 2], [3, 1], [5, 1], [4, 5]]) == [1, 4, 5, 3, 2, 3]\n    assert candidate(6, [[1, 0], [0, 4], [2, 4], [2, 3], [3, 5]]) == [2, 1, 2, 3, 3, 4]\n    assert candidate(6, [[1, 0], [3, 1], [1, 4], [2, 5], [4, 5]]) == [3, 2, 3, 1, 3, 4]\n    assert candidate(7, [[0, 5], [2, 0], [1, 3], [6, 2], [4, 3], [3, 5]]) == [5, 4, 4, 5, 4, 6, 3]\n    assert candidate(7, [[0, 6], [2, 1], [6, 1], [2, 5], [5, 3], [6, 4]]) == [1, 3, 2, 4, 3, 3, 2]\n    assert candidate(7, [[5, 0], [2, 0], [6, 1], [2, 4], [2, 3], [3, 6]]) == [2, 4, 1, 2, 2, 1, 3]\n    assert candidate(8, [[0, 4], [0, 3], [7, 0], [1, 4], [2, 5], [2, 3], [6, 5]]) == [4, 4, 4, 5, 5, 5, 4, 3]\n    assert candidate(8, [[0, 5], [1, 0], [1, 6], [1, 2], [2, 3], [2, 7], [4, 7]]) == [2, 1, 2, 3, 2, 3, 2, 3]\n    assert candidate(8, [[1, 0], [7, 1], [2, 6], [5, 2], [3, 6], [5, 4], [5, 7]]) == [4, 3, 2, 2, 2, 1, 3, 2]\n    assert candidate(8, [[2, 0], [5, 0], [3, 1], [1, 4], [6, 2], [4, 5], [7, 5]]) == [7, 4, 6, 3, 5, 6, 5, 5]\n    assert candidate(8, [[4, 0], [0, 1], [1, 3], [3, 2], [6, 2], [2, 7], [5, 7]]) == [3, 4, 6, 5, 2, 6, 5, 7]\n    assert candidate(8, [[4, 0], [7, 1], [2, 3], [7, 2], [5, 3], [4, 6], [7, 6]]) == [3, 3, 3, 4, 2, 3, 3, 2]\n    assert candidate(9, [[0, 5], [0, 2], [0, 7], [0, 4], [7, 1], [3, 2], [6, 3], [8, 4]]) == [3, 5, 4, 3, 4, 4, 2, 4, 3]\n    assert candidate(9, [[0, 5], [0, 6], [0, 2], [5, 1], [7, 2], [4, 2], [3, 6], [8, 4]]) == [4, 6, 5, 4, 4, 5, 5, 4, 3]\n    assert candidate(9, [[0, 5], [7, 0], [1, 6], [1, 3], [2, 8], [3, 4], [3, 7], [7, 8]]) == [4, 1, 3, 2, 3, 5, 2, 3, 4]\n    assert candidate(9, [[2, 0], [1, 6], [1, 5], [2, 3], [2, 5], [4, 5], [5, 7], [8, 7]]) == [4, 3, 3, 4, 3, 4, 4, 5, 4]\n    assert candidate(9, [[7, 0], [0, 6], [1, 2], [2, 6], [3, 6], [4, 5], [5, 8], [8, 6]]) == [7, 6, 7, 7, 5, 6, 8, 6, 7]\n    assert candidate(10, [[0, 1], [0, 2], [2, 4], [6, 2], [3, 9], [5, 4], [4, 8], [5, 7], [9, 6]]) == [4, 5, 5, 2, 6, 5, 4, 6, 7, 3]\n    assert candidate(10, [[0, 3], [0, 5], [0, 1], [8, 1], [6, 1], [2, 3], [4, 6], [9, 4], [5, 7]]) == [5, 6, 5, 6, 4, 6, 5, 7, 5, 3]\n    assert candidate(10, [[0, 5], [1, 3], [1, 9], [2, 7], [4, 2], [6, 3], [3, 4], [5, 4], [7, 8]]) == [3, 3, 6, 4, 5, 4, 3, 7, 8, 4]\n    assert candidate(10, [[1, 0], [0, 5], [6, 0], [2, 3], [4, 2], [2, 6], [8, 2], [2, 9], [8, 7]]) == [5, 4, 3, 4, 2, 6, 4, 3, 2, 4]\n    assert candidate(10, [[6, 0], [7, 0], [4, 1], [1, 9], [2, 7], [9, 2], [3, 7], [5, 7], [8, 9]]) == [9, 5, 7, 7, 4, 7, 8, 8, 5, 6]\n    assert candidate(10, [[7, 0], [1, 2], [1, 9], [2, 3], [2, 8], [5, 3], [4, 6], [6, 7], [7, 9]]) == [5, 4, 5, 6, 2, 5, 3, 4, 6, 5]\n    assert candidate(10, [[7, 0], [1, 5], [2, 6], [8, 2], [7, 3], [4, 5], [5, 6], [9, 7], [8, 9]]) == [6, 3, 4, 6, 3, 4, 5, 5, 3, 4]\n    assert candidate(11, [[0, 1], [1, 2], [8, 1], [2, 4], [3, 9], [3, 7], [6, 4], [5, 7], [5, 6], [10, 8]]) == [5, 6, 7, 6, 8, 6, 7, 7, 5, 7, 4]\n    assert candidate(11, [[0, 3], [0, 2], [1, 4], [1, 5], [2, 9], [3, 5], [7, 6], [7, 9], [7, 8], [8, 10]]) == [2, 3, 3, 3, 4, 4, 4, 3, 4, 4, 5]\n    assert candidate(11, [[0, 3], [0, 7], [0, 9], [0, 10], [1, 4], [4, 2], [2, 6], [6, 3], [5, 6], [7, 8]]) == [5, 2, 4, 6, 3, 4, 5, 6, 7, 6, 6]\n    assert candidate(11, [[2, 0], [0, 9], [1, 5], [2, 8], [3, 5], [3, 8], [9, 4], [9, 6], [6, 10], [7, 10]]) == [4, 3, 3, 3, 6, 4, 6, 6, 4, 5, 7]\n    assert candidate(11, [[6, 0], [0, 1], [1, 4], [2, 8], [9, 3], [4, 10], [5, 8], [5, 6], [6, 9], [10, 7]]) == [3, 4, 1, 4, 5, 1, 2, 7, 2, 3, 6]\n    assert candidate(11, [[7, 0], [1, 0], [1, 6], [5, 1], [4, 2], [8, 2], [9, 2], [7, 3], [5, 9], [10, 5]]) == [6, 5, 6, 6, 5, 4, 6, 5, 5, 5, 3]\n    assert candidate(11, [[8, 0], [6, 1], [7, 1], [1, 10], [3, 2], [4, 3], [3, 8], [5, 8], [8, 9], [9, 10]]) == [7, 7, 6, 5, 4, 5, 6, 6, 6, 7, 8]\n    assert candidate(11, [[10, 0], [1, 2], [1, 10], [2, 8], [3, 9], [3, 5], [4, 6], [7, 4], [4, 8], [5, 8]]) == [6, 4, 5, 4, 5, 5, 6, 4, 6, 5, 5]\n    assert candidate(12, [[0, 10], [1, 3], [1, 10], [2, 7], [2, 11], [3, 4], [5, 9], [5, 11], [6, 9], [9, 8], [9, 10]]) == [5, 5, 4, 6, 7, 4, 4, 5, 6, 5, 6, 5]\n    assert candidate(12, [[3, 0], [10, 0], [6, 0], [1, 9], [3, 2], [4, 6], [4, 7], [5, 11], [11, 7], [8, 10], [9, 11]]) == [9, 5, 9, 8, 7, 6, 8, 8, 7, 6, 8, 7]\n    assert candidate(12, [[4, 0], [11, 0], [1, 9], [1, 3], [6, 2], [2, 7], [2, 3], [3, 10], [4, 10], [5, 6], [10, 8]]) == [7, 5, 5, 6, 6, 3, 4, 6, 8, 6, 7, 6]\n    assert candidate(12, [[10, 0], [0, 3], [1, 6], [1, 8], [1, 5], [2, 3], [2, 4], [3, 5], [4, 7], [4, 11], [10, 9]]) == [3, 4, 3, 4, 4, 5, 5, 5, 5, 3, 2, 5]\n    assert candidate(13, [[0, 5], [1, 10], [2, 4], [2, 7], [10, 2], [3, 5], [5, 12], [11, 6], [6, 12], [8, 10], [8, 11], [10, 9]]) == [5, 4, 6, 5, 7, 6, 6, 7, 4, 6, 5, 5, 7]\n    assert candidate(13, [[0, 11], [1, 4], [1, 8], [1, 3], [3, 2], [10, 3], [12, 3], [12, 5], [6, 11], [10, 7], [9, 10], [11, 12]]) == [4, 6, 8, 7, 7, 7, 4, 7, 7, 5, 6, 5, 6]\n    assert candidate(13, [[5, 0], [0, 2], [0, 9], [10, 1], [6, 1], [7, 2], [2, 6], [3, 7], [8, 4], [4, 11], [4, 12], [9, 12]]) == [6, 9, 7, 5, 7, 5, 8, 6, 6, 7, 8, 8, 8]\n    assert candidate(13, [[7, 0], [3, 1], [2, 4], [2, 8], [10, 2], [3, 10], [9, 5], [5, 7], [6, 11], [6, 12], [12, 7], [10, 12]]) == [7, 4, 5, 3, 6, 5, 4, 6, 6, 4, 4, 5, 5]\n    assert candidate(14, [[0, 1], [0, 7], [2, 6], [2, 8], [11, 3], [4, 12], [4, 11], [5, 10], [7, 11], [13, 7], [8, 10], [10, 9], [9, 12]]) == [7, 8, 5, 10, 8, 6, 6, 8, 6, 8, 7, 9, 9, 7]\n    assert candidate(14, [[0, 1], [1, 2], [2, 8], [9, 2], [6, 2], [13, 2], [3, 4], [5, 4], [7, 5], [6, 10], [12, 6], [11, 7], [11, 10]]) == [6, 7, 8, 9, 10, 9, 7, 8, 9, 7, 8, 7, 6, 7]\n    assert candidate(14, [[0, 2], [0, 3], [0, 13], [1, 3], [2, 4], [8, 2], [11, 3], [12, 3], [4, 6], [5, 7], [7, 9], [7, 11], [10, 12]]) == [7, 7, 8, 8, 9, 5, 10, 6, 7, 7, 6, 7, 7, 8]\n    assert candidate(14, [[0, 4], [0, 8], [1, 3], [1, 13], [2, 9], [4, 11], [4, 12], [5, 11], [8, 6], [13, 6], [7, 9], [7, 8], [10, 8]]) == [6, 6, 6, 7, 7, 7, 8, 6, 7, 7, 6, 8, 8, 7]\n    assert candidate(14, [[0, 6], [5, 0], [2, 0], [12, 1], [13, 2], [12, 3], [4, 7], [5, 7], [7, 12], [8, 13], [9, 11], [9, 10], [10, 13]]) == [7, 9, 6, 9, 6, 6, 8, 7, 4, 3, 4, 4, 8, 5]\n    assert candidate(14, [[0, 9], [0, 11], [0, 5], [1, 6], [1, 11], [7, 2], [3, 5], [3, 12], [3, 13], [11, 4], [6, 10], [9, 7], [11, 8]]) == [2, 2, 5, 2, 4, 3, 3, 4, 4, 3, 4, 3, 3, 3]\n    assert candidate(14, [[0, 11], [1, 2], [1, 10], [1, 6], [3, 6], [4, 11], [10, 4], [5, 12], [13, 6], [8, 7], [8, 9], [8, 12], [8, 13]]) == [7, 5, 6, 5, 7, 4, 6, 5, 4, 5, 6, 8, 5, 5]\n    assert candidate(14, [[1, 0], [1, 8], [7, 2], [2, 11], [2, 13], [3, 9], [8, 3], [3, 11], [4, 12], [4, 8], [5, 11], [6, 10], [10, 12]]) == [7, 6, 8, 8, 6, 8, 5, 7, 7, 9, 6, 9, 7, 9]\n    assert candidate(14, [[1, 0], [11, 0], [6, 0], [7, 2], [2, 8], [10, 3], [4, 10], [5, 12], [12, 6], [13, 6], [7, 10], [9, 8], [8, 12]]) == [11, 10, 7, 8, 6, 8, 10, 6, 8, 7, 7, 10, 9, 9]\n    assert candidate(14, [[3, 0], [5, 0], [0, 7], [1, 8], [1, 4], [12, 2], [4, 3], [10, 3], [12, 5], [13, 6], [7, 13], [9, 10], [10, 11]]) == [7, 4, 6, 6, 5, 6, 10, 8, 5, 4, 5, 6, 5, 9]\n    assert candidate(15, [[0, 5], [1, 9], [4, 1], [1, 5], [14, 1], [2, 5], [4, 3], [4, 6], [5, 11], [5, 7], [10, 6], [7, 8], [13, 7], [14, 12]]) == [6, 6, 6, 6, 5, 7, 6, 8, 9, 7, 5, 8, 6, 7, 5]\n    assert candidate(15, [[0, 6], [13, 0], [1, 2], [10, 1], [3, 12], [4, 11], [5, 12], [10, 7], [9, 7], [7, 13], [11, 8], [8, 9], [12, 11], [13, 14]]) == [10, 8, 9, 3, 4, 3, 11, 8, 6, 7, 7, 5, 4, 9, 10]\n    assert candidate(15, [[0, 7], [12, 1], [5, 2], [4, 2], [3, 8], [3, 14], [12, 4], [4, 7], [5, 6], [10, 5], [11, 5], [6, 9], [7, 14], [13, 12]]) == [7, 7, 8, 8, 7, 7, 8, 8, 9, 9, 6, 6, 6, 5, 9]\n    assert candidate(15, [[1, 0], [10, 1], [2, 8], [2, 3], [5, 3], [4, 8], [9, 5], [6, 12], [7, 12], [8, 7], [9, 11], [11, 10], [10, 13], [10, 14]]) == [7, 6, 4, 5, 4, 4, 6, 6, 5, 3, 5, 4, 7, 6, 6]\n    assert candidate(15, [[2, 0], [0, 7], [0, 5], [1, 6], [1, 7], [3, 4], [8, 4], [10, 4], [5, 12], [5, 10], [11, 7], [9, 13], [10, 14], [13, 14]]) == [7, 7, 6, 9, 10, 8, 8, 8, 9, 8, 9, 7, 9, 9, 10]\n    assert candidate(15, [[8, 0], [1, 0], [1, 13], [1, 14], [9, 2], [3, 13], [4, 11], [4, 14], [5, 8], [12, 6], [9, 6], [7, 8], [14, 9], [10, 13]]) == [8, 7, 10, 7, 7, 6, 10, 6, 7, 9, 7, 8, 9, 8, 8]\n    assert candidate(15, [[12, 0], [0, 8], [1, 3], [2, 1], [2, 7], [12, 2], [9, 3], [4, 11], [11, 5], [5, 7], [6, 13], [6, 9], [8, 14], [10, 12]]) == [7, 8, 7, 9, 5, 7, 7, 8, 8, 8, 5, 6, 6, 8, 9]\n    assert candidate(15, [[12, 0], [1, 12], [1, 7], [2, 12], [3, 7], [3, 14], [4, 6], [5, 6], [5, 7], [6, 8], [6, 10], [11, 6], [7, 13], [9, 14]]) == [8, 6, 6, 6, 6, 6, 7, 7, 8, 6, 8, 6, 7, 8, 7]\n    assert candidate(16, [[0, 1], [5, 0], [0, 2], [0, 4], [2, 12], [10, 3], [3, 15], [4, 7], [8, 6], [6, 9], [7, 14], [7, 13], [11, 9], [13, 9], [10, 13]]) == [5, 6, 6, 8, 6, 4, 8, 7, 7, 9, 7, 8, 7, 8, 8, 9]\n    assert candidate(16, [[2, 0], [0, 4], [4, 1], [1, 11], [5, 2], [8, 3], [4, 3], [4, 13], [14, 4], [7, 5], [5, 12], [6, 9], [12, 9], [10, 14], [11, 15]]) == [7, 9, 6, 9, 8, 5, 6, 4, 8, 7, 6, 10, 6, 9, 7, 11]\n    assert candidate(16, [[8, 0], [1, 6], [10, 1], [8, 2], [3, 15], [14, 4], [12, 5], [13, 5], [8, 6], [6, 9], [6, 13], [11, 7], [7, 13], [15, 10], [11, 14]]) == [8, 7, 8, 4, 9, 10, 8, 8, 7, 9, 6, 7, 9, 9, 8, 5]\n    assert candidate(17, [[0, 4], [0, 9], [13, 1], [5, 1], [6, 2], [13, 2], [3, 8], [3, 15], [3, 9], [4, 5], [5, 10], [11, 6], [7, 16], [12, 9], [16, 9], [12, 14]]) == [7, 10, 10, 7, 8, 9, 9, 6, 8, 8, 10, 8, 7, 9, 8, 8, 7]\n    assert candidate(17, [[0, 7], [15, 1], [2, 3], [2, 7], [3, 8], [15, 3], [5, 4], [4, 16], [6, 14], [16, 7], [16, 9], [10, 14], [10, 16], [16, 11], [12, 14], [15, 13]]) == [8, 9, 8, 9, 7, 6, 7, 9, 10, 9, 7, 9, 7, 9, 8, 8, 8]\n    assert candidate(17, [[0, 10], [12, 0], [0, 14], [0, 7], [0, 16], [1, 8], [1, 7], [2, 8], [3, 5], [4, 15], [5, 9], [11, 5], [14, 6], [11, 7], [15, 8], [13, 16]]) == [8, 8, 8, 8, 7, 9, 10, 9, 9, 10, 9, 8, 7, 8, 9, 8, 9]\n    assert candidate(17, [[0, 12], [1, 2], [1, 13], [1, 14], [4, 3], [3, 15], [5, 4], [10, 6], [14, 6], [6, 15], [7, 11], [8, 11], [13, 9], [10, 11], [15, 12], [16, 15]]) == [11, 8, 9, 10, 9, 8, 10, 9, 9, 10, 9, 10, 12, 9, 9, 11, 10]\n    assert candidate(17, [[0, 13], [15, 0], [1, 5], [1, 6], [11, 1], [1, 13], [8, 2], [3, 16], [4, 16], [7, 14], [11, 8], [9, 10], [9, 16], [14, 12], [14, 15], [15, 16]]) == [8, 8, 9, 7, 7, 9, 9, 5, 8, 7, 8, 7, 7, 9, 6, 7, 8]\n    assert candidate(17, [[8, 0], [0, 10], [6, 1], [1, 15], [15, 2], [3, 2], [12, 3], [9, 4], [5, 7], [13, 7], [9, 10], [10, 11], [10, 14], [13, 12], [16, 12], [14, 15]]) == [9, 11, 13, 12, 10, 10, 10, 11, 8, 9, 10, 11, 11, 10, 11, 12, 10]\n    assert candidate(17, [[10, 0], [0, 5], [1, 8], [1, 16], [7, 2], [2, 8], [3, 5], [8, 3], [4, 11], [13, 4], [16, 6], [16, 9], [14, 12], [14, 13], [14, 15], [15, 16]]) == [8, 6, 6, 8, 7, 9, 8, 5, 7, 8, 7, 8, 6, 6, 5, 6, 7]\n    assert candidate(18, [[0, 3], [16, 1], [1, 10], [2, 13], [2, 8], [14, 3], [4, 12], [5, 10], [13, 6], [7, 11], [10, 7], [9, 7], [14, 8], [9, 8], [9, 17], [12, 14], [13, 15]]) == [9, 8, 9, 10, 7, 8, 11, 10, 10, 9, 9, 11, 8, 10, 9, 11, 7, 10]\n    assert candidate(18, [[0, 10], [0, 17], [1, 3], [1, 2], [2, 9], [2, 17], [16, 3], [4, 7], [4, 13], [4, 6], [5, 12], [5, 17], [6, 17], [8, 15], [11, 8], [16, 11], [13, 14]]) == [6, 5, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 7, 6, 7, 8, 5, 7]\n    assert candidate(18, [[11, 0], [5, 1], [1, 10], [1, 3], [1, 17], [14, 2], [2, 13], [3, 13], [4, 7], [4, 12], [4, 17], [6, 17], [7, 8], [15, 9], [16, 11], [11, 14], [14, 15]]) == [7, 7, 8, 8, 7, 6, 7, 8, 9, 9, 8, 6, 8, 9, 7, 8, 5, 8]\n    assert candidate(19, [[0, 3], [0, 5], [4, 0], [12, 1], [1, 5], [2, 17], [2, 4], [3, 13], [4, 8], [5, 7], [18, 6], [18, 8], [14, 9], [9, 15], [16, 9], [10, 12], [11, 17], [12, 16]]) == [8, 8, 6, 9, 7, 9, 8, 10, 8, 9, 6, 6, 7, 10, 8, 10, 8, 7, 7]\n    assert candidate(19, [[0, 5], [0, 9], [14, 1], [2, 11], [3, 12], [3, 8], [10, 3], [4, 13], [4, 12], [6, 17], [10, 7], [7, 14], [8, 11], [16, 8], [9, 14], [9, 17], [15, 17], [15, 18]]) == [7, 10, 9, 8, 8, 8, 8, 8, 9, 8, 7, 10, 9, 9, 9, 8, 8, 9, 9]\n    assert candidate(19, [[0, 12], [13, 1], [12, 1], [14, 2], [2, 11], [3, 9], [11, 3], [15, 4], [4, 11], [5, 12], [17, 6], [8, 7], [8, 10], [16, 8], [9, 12], [11, 18], [16, 18], [17, 18]]) == [11, 13, 8, 10, 8, 11, 10, 11, 10, 11, 11, 9, 12, 12, 7, 7, 9, 9, 10]\n    assert candidate(19, [[0, 18], [8, 1], [5, 1], [9, 2], [6, 2], [3, 11], [17, 3], [4, 12], [4, 6], [18, 4], [14, 5], [5, 16], [6, 7], [16, 7], [17, 7], [15, 8], [10, 14], [14, 13]]) == [8, 11, 12, 12, 10, 10, 11, 12, 10, 11, 8, 13, 11, 10, 9, 9, 11, 11, 9]\n    assert candidate(19, [[1, 0], [0, 13], [15, 0], [1, 9], [5, 2], [2, 13], [3, 12], [3, 16], [4, 12], [5, 7], [8, 6], [12, 8], [16, 10], [13, 10], [17, 11], [13, 11], [14, 13], [15, 18]]) == [9, 8, 9, 9, 9, 8, 12, 9, 11, 9, 11, 11, 10, 10, 9, 8, 10, 10, 9]\n\ndef test_check():\n    check(minEdgeReversals)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3106_lengthOfLongestSubsequence", "language": "py", "prompt": "from typing import List\n\ndef lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    \"\"\"You are given a 0-indexed array of integers nums, and an integer target.\nReturn the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nInput: nums = [1,2,3,4,5], target = 9\nOutput: 3\nExplanation: There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.\nExample 2:\nInput: nums = [4,1,3,2,1,5], target = 7\nOutput: 4\nExplanation: There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.\nExample 3:\nInput: nums = [1,1,5,4,5], target = 3\nOutput: -1\nExplanation: It can be shown that nums has no subsequence that sums up to 3.\nConstraints:\n * 1 <= nums.length <= 1000\n * 1 <= nums[i] <= 1000\n * 1 <= target <= 1000\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3106_lengthOfLongestSubsequence.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 9) == 3\n    assert candidate([4, 1, 3, 2, 1, 5], 7) == 4\n    assert candidate([1, 1, 5, 4, 5], 3) == -1\n    assert candidate([1000], 12) == -1\n    assert candidate([1000], 1000) == 1\n    assert candidate([1, 2], 10) == -1\n    assert candidate([1, 1000], 5) == -1\n    assert candidate([2, 3], 3) == 1\n    assert candidate([2, 3], 5) == 2\n    assert candidate([2, 3, 5], 5) == 2\n    assert candidate([1, 3, 3, 7], 1000) == -1\n    assert candidate([1, 3, 3, 7], 2) == -1\n    assert candidate([1, 3, 3, 8], 7) == 3\n    assert candidate([1, 1, 2, 1], 2) == 2\n    assert candidate([1, 1, 1, 1], 5) == -1\n    assert candidate([1, 1, 1, 2], 3) == 3\n    assert candidate([9, 12, 8, 4, 11, 13, 15, 7, 5], 84) == 9\n    assert candidate([11, 5, 9, 11, 12, 13, 12, 5, 1, 8], 87) == 10\n    assert candidate([9, 11, 11, 15, 4, 14, 3, 2, 13, 7], 89) == 10\n    assert candidate([11, 13, 6, 13, 10], 53) == 5\n    assert candidate([10, 3, 5, 11, 6, 12], 47) == 6\n    assert candidate([13, 3, 6, 6, 6, 15, 4], 53) == 7\n    assert candidate([1, 6, 15, 6, 14, 13, 14], 69) == 7\n    assert candidate([10, 7, 8, 14, 15], 54) == 5\n    assert candidate([14, 15, 8, 10, 8, 7], 62) == 6\n    assert candidate([7, 9, 14, 14, 9, 14, 5, 12, 10], 94) == 9\n    assert candidate([1, 10, 6, 14, 5, 13, 3, 7, 10, 10], 79) == 10\n    assert candidate([5, 2, 8, 6, 7, 12, 13, 4, 1], 58) == 9\n    assert candidate([12, 8, 2, 4, 1], 27) == 5\n    assert candidate([10, 14, 11, 13, 2, 11], 61) == 6\n    assert candidate([10, 2, 13, 5, 7, 15], 52) == 6\n    assert candidate([3, 1, 10, 1, 10, 1, 2, 9, 5, 13], 55) == 10\n    assert candidate([5, 13, 2, 13, 9, 4, 5, 7], 58) == 8\n    assert candidate([1, 15, 5, 12, 13, 10, 14, 8], 78) == 8\n    assert candidate([7, 4, 14, 10, 13], 48) == 5\n    assert candidate([6, 14, 14, 6, 2, 9, 1, 4, 10], 66) == 9\n    assert candidate([14, 15, 7, 5, 7, 10, 6, 14, 10, 11], 99) == 10\n    assert candidate([15, 13, 8, 8, 6], 50) == 5\n    assert candidate([2, 6, 8, 9, 13, 3], 41) == 6\n    assert candidate([13, 15, 9, 3, 8, 1, 9, 2, 15, 5], 80) == 10\n    assert candidate([5, 13, 9, 11, 6, 1], 45) == 6\n    assert candidate([7, 10, 15, 7, 14, 2], 55) == 6\n    assert candidate([12, 14, 13, 13, 13], 65) == 5\n    assert candidate([12, 8, 7, 9, 3, 10, 3, 8, 2], 62) == 9\n    assert candidate([11, 1, 14, 13, 14, 4, 14, 11], 82) == 8\n    assert candidate([5, 9, 11, 2, 5, 2, 7, 11, 5, 3], 60) == 10\n    assert candidate([5, 15, 3, 13, 14, 15, 10], 75) == 7\n    assert candidate([10, 8, 2, 2, 9], 31) == 5\n    assert candidate([7, 15, 4, 3, 9, 15, 12, 1, 12], 78) == 9\n    assert candidate([3, 1, 12, 15, 5, 10], 46) == 6\n    assert candidate([5, 3, 12, 7, 5, 2, 12, 10, 12, 5], 73) == 10\n    assert candidate([6, 10, 3, 1, 7, 11, 9, 8, 13, 12], 80) == 10\n    assert candidate([11, 3, 4, 11, 9], 38) == 5\n    assert candidate([15, 12, 12, 13, 6, 6, 4, 1], 69) == 8\n    assert candidate([9, 2, 10, 7, 10, 11, 14, 11, 8], 82) == 9\n    assert candidate([4, 4, 3, 9, 6, 8, 4, 7, 7], 52) == 9\n    assert candidate([10, 14, 4, 15, 9, 5], 57) == 6\n    assert candidate([4, 13, 2, 3, 13, 11, 8, 6], 60) == 8\n    assert candidate([1, 7, 8, 14, 15, 9, 8, 10, 13, 7], 92) == 10\n    assert candidate([7, 7, 6, 14, 7, 4], 45) == 6\n    assert candidate([9, 10, 9, 7, 14, 3, 6, 4, 6], 68) == 9\n    assert candidate([15, 13, 14, 5, 7, 13, 11, 14], 92) == 8\n    assert candidate([1, 1, 10, 12, 5, 6, 15, 6, 8], 64) == 9\n    assert candidate([14, 13, 13, 11, 14, 13, 8], 86) == 7\n    assert candidate([3, 14, 4, 2, 10, 3, 7], 43) == 7\n    assert candidate([6, 1, 3, 11, 9, 2, 10, 6, 12], 60) == 9\n    assert candidate([6, 2, 5, 4, 12], 29) == 5\n    assert candidate([7, 11, 15, 1, 9, 9, 11], 63) == 7\n    assert candidate([7, 12, 10, 15, 6, 15, 14, 2], 81) == 8\n    assert candidate([12, 3, 10, 12, 13, 3, 4, 7, 15], 79) == 9\n    assert candidate([14, 6, 11, 2, 10, 1, 12, 9, 2], 67) == 9\n    assert candidate([5, 8, 12, 6, 15, 13, 11], 70) == 7\n    assert candidate([11, 6, 1, 6, 2, 6, 15], 47) == 7\n    assert candidate([12, 7, 15, 10, 5, 4, 7, 12, 12], 84) == 9\n    assert candidate([11, 4, 4, 9, 10, 7, 12], 57) == 7\n    assert candidate([4, 12, 15, 6, 15, 1, 4, 4, 2], 63) == 9\n    assert candidate([3, 13, 4, 15, 1], 36) == 5\n    assert candidate([14, 3, 7, 14, 7, 7, 1, 6], 59) == 8\n    assert candidate([15, 13, 1, 14, 6, 8], 57) == 6\n    assert candidate([14, 2, 3, 10, 15], 44) == 5\n    assert candidate([5, 5, 3, 7, 12, 10, 11], 53) == 7\n    assert candidate([3, 7, 3, 5, 3, 14, 8], 43) == 7\n    assert candidate([5, 7, 9, 14, 9, 14, 4, 1, 4], 67) == 9\n    assert candidate([12, 7, 8, 6, 3, 9, 7, 3, 4, 4], 63) == 10\n    assert candidate([9, 12, 1, 4, 9, 6, 15, 9, 7], 72) == 9\n    assert candidate([9, 13, 12, 10, 4, 9, 9, 4, 4, 13], 87) == 10\n    assert candidate([13, 5, 6, 8, 2, 13, 1, 5, 6], 59) == 9\n    assert candidate([7, 9, 8, 9, 9, 3, 5], 50) == 7\n    assert candidate([15, 1, 14, 8, 2, 1, 10, 15, 15], 81) == 9\n    assert candidate([13, 14, 1, 9, 12, 2], 51) == 6\n    assert candidate([13, 12, 12, 13, 8, 11, 3, 14, 13], 99) == 9\n    assert candidate([2, 2, 1, 12, 10, 7, 11, 5, 5], 55) == 9\n    assert candidate([13, 10, 3, 4, 10, 3], 43) == 6\n    assert candidate([8, 9, 1, 5, 8, 7, 6, 8], 52) == 8\n    assert candidate([10, 1, 4, 10, 9, 13, 14], 61) == 7\n    assert candidate([3, 14, 11, 4, 7, 9, 7, 6, 8, 11], 80) == 10\n    assert candidate([4, 11, 6, 6, 14, 12, 2, 9, 1], 65) == 9\n    assert candidate([9, 2, 15, 12, 15, 6, 4, 12], 75) == 8\n    assert candidate([4, 3, 5, 3, 2], 17) == 5\n    assert candidate([4, 3, 13, 6, 9], 35) == 5\n\ndef test_check():\n    check(lengthOfLongestSubsequence)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3107_maxSpending", "language": "py", "prompt": "from typing import List\n\ndef maxSpending(values: List[List[int]]) -> int:\n    \"\"\"You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1.\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can:\n * Pick any shop i.\n * Buy the rightmost available item j for the price of values[i][j] * d. That is, find the greatest index j such that item j was never bought before, and buy it for the price of values[i][j] * d.\nNote that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop.\nReturn the maximum amount of money that can be spent on buying all m * n products.\nExample 1:\nInput: values = [[8,5,2],[6,4,1],[9,7,3]]\nOutput: 285\nExplanation: On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products.\nExample 2:\nInput: values = [[10,8,6,4,2],[9,7,5,3,2]]\nOutput: 386\nExplanation: On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.\nConstraints:\n * 1 <= m == values.length <= 10\n * 1 <= n == values[i].length <= 104\n * 1 <= values[i][j] <= 106\n * values[i] are sorted in non-increasing order.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3107_maxSpending.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[8, 5, 2], [6, 4, 1], [9, 7, 3]]) == 285\n    assert candidate([[10, 8, 6, 4, 2], [9, 7, 5, 3, 2]]) == 386\n    assert candidate([[1000000]]) == 1000000\n    assert candidate([[1]]) == 1\n    assert candidate([[1], [2]]) == 5\n    assert candidate([[2], [1]]) == 5\n    assert candidate([[1], [1]]) == 3\n    assert candidate([[5, 2]]) == 12\n    assert candidate([[5, 5]]) == 15\n    assert candidate([[7, 5]]) == 19\n    assert candidate([[3, 2, 1]]) == 14\n    assert candidate([[2, 2, 1]]) == 11\n    assert candidate([[3, 3, 2]]) == 17\n    assert candidate([[3], [2], [1]]) == 14\n    assert candidate([[2], [10], [1]]) == 35\n    assert candidate([[1000000, 1000000, 1000000]]) == 6000000\n    assert candidate([[1000000, 1000000, 1000000, 1000000]]) == 10000000\n    assert candidate([[1000000], [1000000], [1000000], [1000000]]) == 10000000\n    assert candidate([[1000000, 1000000], [1000000, 1000000]]) == 10000000\n    assert candidate([[2, 1], [4, 3]]) == 30\n    assert candidate([[3, 1], [4, 2]]) == 30\n    assert candidate([[4, 1], [3, 2]]) == 30\n    assert candidate([[15, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 9, 9, 8, 7, 5, 5, 5, 1]]) == 2162\n    assert candidate([[13, 13, 11, 7, 2, 1], [13, 10, 10, 6, 3, 3]]) == 776\n    assert candidate([[12, 6], [13, 5], [13, 3], [6, 6], [15, 6], [5, 4], [6, 1]]) == 971\n    assert candidate([[15, 15, 14, 14, 14, 10, 10, 9, 9, 8, 8, 8, 7, 7, 7, 4]]) == 1585\n    assert candidate([[11, 10], [10, 1], [14, 6], [13, 5], [7, 3], [10, 10], [10, 5]]) == 1061\n    assert candidate([[15, 13, 12, 7, 6, 4, 1]]) == 298\n    assert candidate([[8, 2], [4, 1], [10, 4]]) == 133\n    assert candidate([[10, 4], [13, 2], [7, 5], [15, 11]]) == 380\n    assert candidate([[13, 10, 10, 9, 8, 5, 5, 2, 1, 1]]) == 465\n    assert candidate([[15, 14, 8, 7, 5, 5, 1]]) == 283\n    assert candidate([[15, 15, 14, 14, 14, 14, 13, 11, 10, 10, 10, 9, 7, 7, 6, 6, 4, 4, 2, 1]]) == 2449\n    assert candidate([[15, 14, 11, 10, 10, 6, 2], [13, 8, 8, 6, 6, 3, 2]]) == 1084\n    assert candidate([[15, 15, 14, 13, 13, 12, 11, 9, 9, 9, 8, 6, 5, 5, 4, 3, 2, 1, 1]]) == 2030\n    assert candidate([[15, 10, 7], [14, 2, 2], [14, 13, 12], [13, 13, 10]]) == 975\n    assert candidate([[10, 9, 3, 3], [11, 8, 7, 2], [14, 14, 13, 1], [14, 14, 11, 4], [13, 11, 9, 5]]) == 2338\n    assert candidate([[11, 7, 5, 2], [15, 5, 5, 3]]) == 307\n    assert candidate([[15, 10, 10, 9, 8, 7, 4, 2, 2]]) == 425\n    assert candidate([[15, 13, 12, 12, 10, 5, 4, 3, 1]]) == 484\n    assert candidate([[12, 12, 12, 11, 10, 10, 7, 7, 6, 5, 5, 3, 2, 1]]) == 979\n    assert candidate([[15, 13, 13, 13, 12, 12, 11, 11, 10, 9, 9, 9, 8, 6, 6, 4, 4, 3, 2, 1]]) == 2253\n    assert candidate([[14, 11], [11, 8], [10, 4], [4, 3], [9, 6], [8, 4], [7, 7], [10, 4], [14, 4]]) == 1621\n    assert candidate([[14, 13, 13, 11, 11, 8, 8, 7, 6, 4, 3, 2, 1]]) == 912\n    assert candidate([[15, 14, 14, 10, 10, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 4, 4, 3, 3]]) == 1823\n    assert candidate([[14, 13, 11, 10, 10, 1, 1], [15, 12, 8, 6, 6, 5, 5]]) == 1120\n    assert candidate([[15, 14, 13, 12, 11, 10, 10, 10, 9, 7, 6, 6, 4, 3, 3, 3, 2, 2, 1]]) == 1860\n    assert candidate([[12, 6, 5, 4, 2]]) == 109\n    assert candidate([[15, 15, 14, 13, 12, 12, 12, 11, 10, 10, 9, 9, 9, 8, 7, 6, 3, 2]]) == 2006\n    assert candidate([[15, 14, 12, 11, 10, 10, 7, 6, 2, 1]]) == 610\n    assert candidate([[15, 13, 12, 11, 8, 6, 5]]) == 328\n    assert candidate([[15, 15, 12, 10, 9, 7, 7, 6, 6, 5, 4, 2, 1]]) == 896\n    assert candidate([[15, 15, 12, 12, 10, 10, 9, 7, 6, 4, 4, 4, 1]]) == 969\n    assert candidate([[15, 14, 14, 13, 8, 7, 7, 4, 3, 3, 2, 1]]) == 792\n    assert candidate([[15, 15, 14, 14, 14, 13, 10, 8, 6, 6, 5, 5, 3, 3, 2, 2, 1]]) == 1634\n    assert candidate([[14, 12, 11, 10, 10, 8, 7, 7, 5, 5, 3, 3, 3]]) == 855\n    assert candidate([[14, 14, 9, 9, 4, 4, 1], [12, 12, 9, 8, 7, 6, 3]]) == 1060\n    assert candidate([[15, 15, 15, 13, 12, 12, 10, 9, 9, 9, 9, 7, 6, 4, 4, 4, 1]]) == 1727\n    assert candidate([[9, 4], [13, 4], [13, 9], [6, 5], [8, 2], [13, 1]]) == 732\n    assert candidate([[14, 9, 9, 9, 8, 7, 5], [15, 14, 10, 8, 5, 3, 1]]) == 1094\n    assert candidate([[15, 15, 14, 13, 10, 3, 1]]) == 354\n    assert candidate([[13, 12], [13, 12], [11, 8], [14, 3]]) == 441\n    assert candidate([[13, 12, 11, 10, 7, 5, 5, 1]]) == 358\n    assert candidate([[15, 10, 9, 8, 8, 7, 7, 5, 4, 3, 1]]) == 582\n    assert candidate([[10, 10, 6, 4, 1], [14, 13, 13, 11, 9], [14, 11, 7, 4, 3]]) == 1302\n    assert candidate([[15, 14, 12, 12, 11, 11, 10, 9, 9, 8, 8, 6, 6, 4, 2, 2, 1]]) == 1596\n    assert candidate([[12, 5, 4, 3, 3, 2, 1, 1], [13, 11, 9, 9, 6, 4, 3, 1]]) == 1019\n    assert candidate([[15, 15, 13, 11, 10, 10, 7, 1, 1]]) == 526\n    assert candidate([[14, 12, 10, 4, 3, 1], [12, 12, 8, 7, 6, 2], [15, 13, 8, 5, 4, 1]]) == 1719\n    assert candidate([[13, 8, 8, 8, 5, 4, 3], [15, 13, 9, 8, 7, 3, 2]]) == 1006\n    assert candidate([[13, 13, 12, 12, 9]]) == 186\n    assert candidate([[10, 3], [11, 9], [10, 5], [8, 7], [6, 1]]) == 472\n    assert candidate([[15, 15, 12, 12, 11, 10, 9, 8, 2, 2, 1, 1, 1]]) == 941\n    assert candidate([[14, 14, 13, 13, 11, 11, 10, 10, 10, 9, 8, 8, 7, 7, 6, 6, 5, 4, 3]]) == 2023\n    assert candidate([[11, 10, 9, 7, 6, 5, 3, 1], [14, 14, 10, 9, 7, 4, 4, 3]]) == 1270\n    assert candidate([[6, 2], [10, 2], [13, 5], [8, 7], [10, 3], [13, 2], [13, 6]]) == 972\n    assert candidate([[15, 15, 15, 14, 13, 12, 6, 5, 5, 4]]) == 694\n    assert candidate([[11, 9], [8, 1], [2, 1], [15, 13], [12, 4], [14, 5], [13, 4]]) == 1113\n    assert candidate([[15, 14, 14, 13, 12, 11, 10, 10, 5, 4, 2]]) == 800\n    assert candidate([[13, 12, 12, 6, 5, 5, 4, 2, 2, 2, 1]]) == 523\n    assert candidate([[13, 8], [15, 1], [9, 1], [13, 1]]) == 372\n    assert candidate([[12, 8, 4, 1], [14, 8, 8, 3]]) == 335\n    assert candidate([[15, 14, 14, 13, 13, 13, 12, 12, 9, 9, 8, 7, 6, 5, 5, 5, 4, 3, 1]]) == 2113\n    assert candidate([[13, 9, 8, 2, 1], [9, 4, 3, 2, 1], [10, 8, 6, 3, 1]]) == 877\n    assert candidate([[8, 6], [13, 1], [12, 8], [8, 7]]) == 342\n    assert candidate([[9, 7], [15, 15], [9, 8], [6, 1], [11, 4]]) == 585\n    assert candidate([[14, 9, 9, 8, 6, 4, 2]]) == 257\n    assert candidate([[15, 13, 11, 11, 10, 9, 5, 5, 4, 4, 4, 4, 3, 2]]) == 968\n    assert candidate([[13, 7, 7, 4], [8, 8, 6, 6]]) == 305\n    assert candidate([[15, 13, 12, 10, 10, 10, 9, 9, 9, 8, 7, 6, 6, 5, 4, 4, 2, 1, 1]]) == 1805\n    assert candidate([[13, 13, 1], [11, 5, 4], [14, 5, 1], [15, 5, 2], [10, 1, 1], [15, 12, 1]]) == 1714\n    assert candidate([[15, 15, 14, 14, 11, 10, 10, 8, 8, 8, 3, 1, 1]]) == 1050\n    assert candidate([[3, 3], [15, 10], [14, 9]]) == 236\n    assert candidate([[14, 13, 11, 10, 9, 7, 2]]) == 314\n    assert candidate([[11, 7], [5, 3], [11, 6], [6, 1], [15, 13]]) == 550\n    assert candidate([[14, 13, 13, 12, 12, 12, 11, 11, 9, 8, 8, 6, 5, 5, 5, 5, 3, 3, 2]]) == 1962\n    assert candidate([[14, 14, 13, 13, 13, 12, 12, 11, 10, 9, 9, 8, 8, 7, 3, 2, 2]]) == 1750\n    assert candidate([[15, 8], [12, 2], [15, 10], [9, 3], [5, 4], [14, 2], [7, 6]]) == 1091\n    assert candidate([[15, 9, 7, 3, 3], [7, 6, 4, 3, 2], [15, 9, 8, 4, 4], [15, 10, 9, 7, 4]]) == 1952\n    assert candidate([[12, 12, 10, 8, 8, 8, 8, 6, 2, 2, 1]]) == 585\n\ndef test_check():\n    check(maxSpending)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3112_countPaths", "language": "py", "prompt": "from typing import List\n\ndef countPaths(n: int, edges: List[List[int]]) -> int:\n    \"\"\"There is an undirected tree with n nodes labeled from 1 to n. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nReturn the number of valid paths in the tree.\nA path (a, b) is valid if there exists exactly one prime number among the node labels in the path from a to b.\nNote that:\n * The path (a, b) is a sequence of distinct nodes starting with node a and ending with node b such that every two adjacent nodes in the sequence share an edge in the tree.\n * Path (a, b) and path (b, a) are considered the same and counted only once.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/27/example1.png]\nInput: n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\nOutput: 4\nExplanation: The pairs with exactly one prime number on the path between them are:\n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/27/example2.png]\nInput: n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\nOutput: 6\nExplanation: The pairs with exactly one prime number on the path between them are:\n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths.\nConstraints:\n * 1 <= n <= 105\n * edges.length == n - 1\n * edges[i].length == 2\n * 1 <= ui, vi <= n\n * The input is generated such that edges represent a valid tree.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3112_countPaths.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(5, [[1, 2], [1, 3], [2, 4], [2, 5]]) == 4\n    assert candidate(6, [[1, 2], [1, 3], [2, 4], [3, 5], [3, 6]]) == 6\n    assert candidate(1, []) == 0\n    assert candidate(2, [[2, 1]]) == 1\n    assert candidate(4, [[1, 2], [4, 1], [3, 4]]) == 4\n    assert candidate(5, [[1, 3], [4, 3], [2, 3], [5, 2]]) == 3\n    assert candidate(5, [[1, 5], [2, 1], [4, 5], [3, 2]]) == 4\n    assert candidate(5, [[2, 3], [4, 2], [1, 3], [5, 1]]) == 3\n    assert candidate(5, [[4, 1], [5, 4], [2, 1], [3, 4]]) == 6\n    assert candidate(5, [[3, 5], [1, 5], [4, 3], [2, 5]]) == 2\n    assert candidate(4, [[2, 1], [4, 2], [3, 2]]) == 3\n    assert candidate(5, [[1, 4], [2, 4], [3, 2], [5, 4]]) == 4\n    assert candidate(5, [[5, 4], [3, 4], [1, 4], [2, 4]]) == 6\n    assert candidate(4, [[3, 4], [1, 3], [2, 4]]) == 4\n    assert candidate(10, [[10, 9], [2, 10], [1, 10], [3, 2], [6, 10], [4, 3], [8, 6], [5, 8], [7, 6]]) == 16\n    assert candidate(8, [[7, 2], [6, 2], [5, 2], [1, 2], [4, 7], [8, 1], [3, 6]]) == 7\n    assert candidate(5, [[3, 2], [4, 3], [5, 4], [1, 4]]) == 4\n    assert candidate(9, [[7, 4], [3, 4], [5, 4], [1, 5], [6, 4], [9, 5], [8, 7], [2, 8]]) == 17\n    assert candidate(9, [[1, 8], [5, 8], [4, 8], [6, 5], [3, 1], [9, 1], [7, 4], [2, 8]]) == 21\n    assert candidate(10, [[2, 9], [7, 2], [10, 9], [5, 7], [4, 5], [6, 7], [8, 2], [1, 5], [3, 10]]) == 11\n    assert candidate(8, [[6, 1], [8, 1], [3, 6], [4, 1], [7, 3], [2, 8], [5, 1]]) == 12\n    assert candidate(10, [[9, 1], [8, 9], [5, 9], [10, 8], [7, 5], [2, 8], [3, 8], [6, 7], [4, 1]]) == 16\n    assert candidate(5, [[5, 3], [4, 5], [2, 5], [1, 4]]) == 2\n    assert candidate(7, [[7, 6], [2, 6], [5, 2], [3, 5], [4, 5], [1, 6]]) == 5\n    assert candidate(8, [[4, 5], [8, 4], [6, 4], [2, 5], [1, 6], [3, 1], [7, 8]]) == 12\n    assert candidate(10, [[9, 6], [5, 6], [10, 6], [8, 5], [4, 8], [3, 9], [1, 3], [2, 6], [7, 1]]) == 22\n    assert candidate(5, [[1, 4], [2, 4], [5, 4], [3, 4]]) == 6\n    assert candidate(10, [[9, 4], [7, 9], [10, 9], [6, 7], [8, 7], [2, 7], [3, 2], [1, 9], [5, 10]]) == 19\n    assert candidate(7, [[4, 7], [6, 7], [1, 7], [3, 7], [2, 6], [5, 6]]) == 8\n    assert candidate(5, [[1, 4], [2, 1], [5, 2], [3, 1]]) == 4\n    assert candidate(5, [[4, 5], [2, 5], [1, 4], [3, 1]]) == 4\n    assert candidate(10, [[4, 3], [5, 3], [1, 4], [7, 5], [6, 3], [8, 3], [9, 1], [10, 8], [2, 10]]) == 19\n    assert candidate(5, [[1, 3], [4, 1], [2, 1], [5, 1]]) == 6\n    assert candidate(7, [[5, 2], [3, 5], [4, 5], [1, 2], [6, 2], [7, 2]]) == 4\n    assert candidate(5, [[3, 4], [1, 4], [5, 3], [2, 5]]) == 2\n    assert candidate(8, [[1, 8], [2, 1], [6, 8], [3, 6], [4, 3], [5, 8], [7, 2]]) == 13\n    assert candidate(9, [[2, 1], [6, 1], [8, 2], [9, 8], [4, 9], [7, 9], [3, 1], [5, 2]]) == 16\n    assert candidate(5, [[4, 3], [5, 4], [1, 5], [2, 3]]) == 4\n    assert candidate(8, [[2, 4], [3, 4], [6, 4], [7, 3], [8, 7], [5, 6], [1, 5]]) == 10\n    assert candidate(6, [[3, 6], [1, 3], [2, 3], [5, 2], [4, 5]]) == 4\n    assert candidate(10, [[7, 5], [4, 7], [10, 5], [6, 5], [8, 6], [2, 8], [9, 4], [3, 10], [1, 9]]) == 11\n    assert candidate(8, [[3, 2], [8, 3], [7, 3], [6, 2], [4, 7], [5, 6], [1, 8]]) == 5\n    assert candidate(8, [[2, 6], [3, 6], [5, 2], [1, 6], [7, 2], [8, 1], [4, 1]]) == 8\n    assert candidate(9, [[3, 7], [6, 7], [4, 7], [1, 6], [8, 4], [9, 1], [2, 7], [5, 2]]) == 11\n    assert candidate(6, [[6, 2], [5, 6], [1, 2], [3, 2], [4, 3]]) == 5\n    assert candidate(6, [[6, 2], [1, 6], [3, 1], [5, 3], [4, 3]]) == 7\n    assert candidate(8, [[2, 3], [8, 3], [5, 3], [6, 3], [4, 3], [7, 8], [1, 2]]) == 8\n    assert candidate(7, [[4, 6], [5, 6], [7, 6], [3, 4], [2, 6], [1, 5]]) == 11\n    assert candidate(6, [[4, 2], [5, 4], [1, 5], [6, 1], [3, 1]]) == 8\n    assert candidate(6, [[4, 1], [6, 1], [5, 4], [3, 5], [2, 1]]) == 6\n    assert candidate(7, [[6, 7], [1, 6], [4, 6], [2, 7], [3, 2], [5, 7]]) == 3\n    assert candidate(6, [[4, 3], [5, 3], [6, 5], [2, 4], [1, 5]]) == 5\n    assert candidate(10, [[2, 5], [3, 5], [10, 2], [8, 3], [7, 5], [4, 3], [1, 8], [9, 5], [6, 8]]) == 9\n    assert candidate(8, [[2, 8], [1, 8], [5, 2], [4, 5], [6, 5], [7, 2], [3, 5]]) == 5\n    assert candidate(8, [[7, 2], [6, 7], [5, 7], [8, 6], [1, 7], [3, 5], [4, 2]]) == 6\n    assert candidate(7, [[5, 7], [3, 5], [2, 7], [4, 3], [6, 3], [1, 4]]) == 5\n    assert candidate(7, [[2, 3], [1, 3], [7, 3], [4, 1], [6, 3], [5, 1]]) == 7\n    assert candidate(7, [[4, 2], [6, 4], [1, 6], [7, 6], [5, 2], [3, 7]]) == 6\n    assert candidate(6, [[3, 4], [6, 3], [1, 4], [5, 4], [2, 6]]) == 8\n    assert candidate(10, [[2, 7], [1, 2], [8, 7], [4, 2], [6, 8], [10, 7], [5, 4], [9, 8], [3, 6]]) == 14\n    assert candidate(8, [[6, 2], [7, 2], [5, 6], [8, 2], [3, 6], [1, 8], [4, 2]]) == 11\n    assert candidate(10, [[9, 6], [1, 9], [2, 1], [8, 1], [10, 6], [7, 6], [3, 8], [4, 3], [5, 3]]) == 21\n    assert candidate(8, [[4, 6], [1, 6], [7, 6], [2, 1], [8, 7], [5, 6], [3, 5]]) == 13\n    assert candidate(7, [[3, 7], [6, 7], [4, 6], [1, 3], [5, 3], [2, 3]]) == 3\n    assert candidate(10, [[2, 9], [3, 9], [8, 9], [10, 3], [1, 9], [4, 8], [7, 10], [6, 1], [5, 10]]) == 18\n    assert candidate(8, [[5, 6], [3, 6], [7, 5], [4, 6], [8, 6], [2, 3], [1, 3]]) == 10\n    assert candidate(9, [[9, 3], [4, 3], [2, 9], [7, 3], [8, 7], [1, 7], [5, 4], [6, 2]]) == 10\n    assert candidate(6, [[5, 1], [2, 1], [4, 2], [6, 5], [3, 4]]) == 7\n    assert candidate(7, [[3, 6], [2, 6], [5, 6], [7, 2], [1, 6], [4, 2]]) == 9\n    assert candidate(5, [[1, 5], [3, 5], [4, 3], [2, 5]]) == 2\n    assert candidate(8, [[2, 8], [6, 2], [1, 2], [4, 1], [7, 2], [3, 2], [5, 7]]) == 9\n    assert candidate(9, [[5, 3], [1, 3], [7, 3], [4, 5], [6, 7], [8, 7], [9, 5], [2, 5]]) == 7\n    assert candidate(10, [[8, 10], [3, 10], [1, 8], [7, 8], [6, 10], [2, 3], [5, 8], [9, 5], [4, 6]]) == 21\n    assert candidate(10, [[4, 8], [6, 8], [9, 4], [1, 6], [5, 8], [2, 8], [10, 9], [7, 6], [3, 5]]) == 18\n    assert candidate(9, [[4, 6], [9, 4], [3, 6], [7, 6], [1, 4], [5, 9], [2, 7], [8, 4]]) == 15\n    assert candidate(7, [[7, 6], [2, 6], [1, 7], [3, 2], [5, 2], [4, 5]]) == 5\n    assert candidate(9, [[1, 8], [5, 8], [3, 8], [2, 1], [9, 2], [7, 1], [6, 5], [4, 9]]) == 17\n    assert candidate(7, [[3, 5], [4, 3], [6, 5], [2, 4], [7, 3], [1, 4]]) == 5\n    assert candidate(10, [[5, 2], [8, 5], [10, 5], [3, 8], [4, 2], [1, 4], [9, 10], [7, 5], [6, 8]]) == 12\n    assert candidate(8, [[7, 4], [1, 4], [5, 7], [6, 1], [8, 5], [3, 8], [2, 6]]) == 8\n    assert candidate(10, [[8, 2], [7, 8], [9, 2], [4, 2], [6, 4], [3, 9], [5, 4], [1, 9], [10, 8]]) == 24\n    assert candidate(8, [[3, 8], [2, 8], [1, 8], [6, 8], [4, 3], [7, 6], [5, 2]]) == 13\n    assert candidate(9, [[5, 4], [2, 4], [9, 5], [3, 2], [7, 3], [1, 4], [8, 2], [6, 4]]) == 14\n    assert candidate(10, [[10, 8], [5, 10], [1, 10], [3, 10], [7, 3], [2, 10], [6, 8], [9, 6], [4, 6]]) == 18\n    assert candidate(9, [[6, 7], [5, 7], [8, 7], [9, 6], [2, 5], [4, 5], [1, 8], [3, 6]]) == 11\n    assert candidate(10, [[1, 6], [9, 1], [5, 9], [10, 6], [4, 9], [8, 9], [7, 8], [2, 1], [3, 1]]) == 24\n    assert candidate(8, [[4, 5], [3, 4], [6, 5], [1, 4], [2, 3], [8, 4], [7, 3]]) == 10\n    assert candidate(7, [[7, 4], [6, 4], [2, 6], [5, 6], [3, 2], [1, 5]]) == 9\n    assert candidate(10, [[3, 2], [5, 3], [1, 2], [9, 5], [7, 5], [6, 3], [4, 3], [8, 6], [10, 1]]) == 8\n    assert candidate(8, [[2, 8], [5, 2], [4, 2], [7, 4], [3, 2], [1, 3], [6, 3]]) == 7\n    assert candidate(6, [[6, 3], [2, 3], [4, 2], [5, 2], [1, 6]]) == 3\n    assert candidate(9, [[7, 3], [5, 3], [4, 3], [9, 7], [6, 5], [8, 3], [2, 4], [1, 5]]) == 8\n    assert candidate(5, [[1, 2], [5, 1], [4, 5], [3, 4]]) == 5\n    assert candidate(9, [[8, 3], [6, 8], [2, 8], [4, 3], [5, 4], [7, 5], [9, 4], [1, 5]]) == 15\n    assert candidate(5, [[2, 1], [4, 2], [5, 1], [3, 2]]) == 4\n    assert candidate(6, [[4, 2], [6, 2], [3, 2], [1, 6], [5, 2]]) == 5\n    assert candidate(10, [[10, 5], [3, 10], [4, 3], [8, 3], [7, 4], [1, 7], [6, 5], [9, 1], [2, 5]]) == 14\n    assert candidate(9, [[4, 7], [6, 4], [8, 4], [2, 8], [5, 2], [9, 7], [1, 6], [3, 7]]) == 13\n    assert candidate(10, [[7, 3], [1, 3], [2, 3], [10, 2], [4, 2], [8, 1], [9, 4], [5, 3], [6, 3]]) == 10\n    assert candidate(7, [[4, 7], [2, 7], [3, 4], [1, 7], [6, 4], [5, 4]]) == 9\n\ndef test_check():\n    check(countPaths)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3114_maximumSumOfHeights", "language": "py", "prompt": "from typing import List\n\ndef maximumSumOfHeights(maxHeights: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array maxHeights of n integers.\nYou are tasked with building n towers in the coordinate line. The ith tower is built at coordinate i and has a height of heights[i].\nA configuration of towers is beautiful if the following conditions hold:\n 1. 1 <= heights[i] <= maxHeights[i]\n 2. heights is a mountain array.\nArray heights is a mountain if there exists an index i such that:\n * For all 0 < j <= i, heights[j - 1] <= heights[j]\n * For all i <= k < n - 1, heights[k + 1] <= heights[k]\nReturn the maximum possible sum of heights of a beautiful configuration of towers.\nExample 1:\nInput: maxHeights = [5,3,4,1,1]\nOutput: 13\nExplanation: One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\nExample 2:\nInput: maxHeights = [6,5,3,9,2,7]\nOutput: 22\nExplanation: One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\nExample 3:\nInput: maxHeights = [3,2,5,5,2,3]\nOutput: 18\nExplanation: One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2.\nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\nConstraints:\n * 1 <= n == maxHeights <= 103\n * 1 <= maxHeights[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3114_maximumSumOfHeights.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 3, 4, 1, 1]) == 13\n    assert candidate([6, 5, 3, 9, 2, 7]) == 22\n    assert candidate([3, 2, 5, 5, 2, 3]) == 18\n    assert candidate([1000000000]) == 1000000000\n    assert candidate([1]) == 1\n    assert candidate([933754743]) == 933754743\n    assert candidate([1, 1000000000]) == 1000000001\n    assert candidate([1000000000, 1000000000]) == 2000000000\n    assert candidate([999999999, 1000000000]) == 1999999999\n    assert candidate([1000000000, 999999999]) == 1999999999\n    assert candidate([30, 1]) == 31\n    assert candidate([1, 12, 19]) == 32\n    assert candidate([1000000000, 1000000000, 1000000000]) == 3000000000\n    assert candidate([999999999, 1000000000, 999999999]) == 2999999998\n    assert candidate([1000000000, 999999999, 999999998]) == 2999999997\n    assert candidate([999999998, 999999999, 1000000000]) == 2999999997\n    assert candidate([1, 1, 1]) == 3\n    assert candidate([1, 1, 4, 3, 3, 3, 6]) == 20\n    assert candidate([2, 4, 1, 3, 5]) == 11\n    assert candidate([1, 5, 2, 5, 6, 4, 6, 3, 4, 5]) == 33\n    assert candidate([3, 6, 3, 5, 5, 1, 2, 5, 5, 6]) == 24\n    assert candidate([1, 6, 5, 6, 2, 4, 1, 5]) == 23\n    assert candidate([5, 1, 6, 5, 4, 4, 2]) == 23\n    assert candidate([3, 4, 3, 1, 1, 3]) == 13\n    assert candidate([4, 1, 6, 5, 3, 6]) == 19\n    assert candidate([3, 5, 5, 6, 4, 6, 5, 6]) == 35\n    assert candidate([6, 4, 3, 3]) == 16\n    assert candidate([6, 4, 3, 6, 1, 2, 2, 3]) == 20\n    assert candidate([6, 5, 1, 4, 6, 1, 5]) == 16\n    assert candidate([2, 3, 4, 4, 3, 2, 3, 5, 5, 5]) == 30\n    assert candidate([5, 4, 6, 1, 2]) == 16\n    assert candidate([1, 4, 2]) == 7\n    assert candidate([5, 2, 4, 4]) == 12\n    assert candidate([1, 5, 5, 3, 3]) == 17\n    assert candidate([3, 1, 1, 4, 5, 5, 4, 6]) == 25\n    assert candidate([1, 4, 3, 4, 5, 1]) == 17\n    assert candidate([5, 5, 3, 1, 1, 2, 5, 5]) == 18\n    assert candidate([3, 1, 3, 2, 6, 1, 4, 4, 6]) == 20\n    assert candidate([5, 3, 3]) == 11\n    assert candidate([5, 2, 1, 4, 3, 5]) == 14\n    assert candidate([1, 3, 2, 1]) == 7\n    assert candidate([1, 3, 6]) == 10\n    assert candidate([5, 5, 5, 3, 3, 3, 3]) == 27\n    assert candidate([1, 3, 3, 2, 1, 2]) == 11\n    assert candidate([5, 5, 4, 1, 4, 4, 5, 6, 4]) == 27\n    assert candidate([3, 5, 5, 6, 2]) == 21\n    assert candidate([4, 6, 6, 1]) == 17\n    assert candidate([4, 2, 6, 1, 4, 1, 5, 3, 6]) == 18\n    assert candidate([4, 1, 6, 3, 6, 6]) == 20\n    assert candidate([5, 2, 1, 4, 1, 6, 1, 5, 3, 4]) == 18\n    assert candidate([1, 4, 6, 3, 5, 1]) == 18\n    assert candidate([6, 1, 2, 5]) == 9\n    assert candidate([6, 1, 5, 1, 6, 2, 2]) == 14\n    assert candidate([6, 1, 2, 3, 4, 4]) == 15\n    assert candidate([6, 1, 5]) == 8\n    assert candidate([1, 6, 6, 3, 5, 6, 1, 1]) == 24\n    assert candidate([2, 6, 1, 5, 1, 2, 3]) == 13\n    assert candidate([3, 5, 1, 6, 3, 6]) == 15\n    assert candidate([4, 4, 5, 3]) == 16\n    assert candidate([3, 5, 4, 4, 3, 1, 1, 6]) == 22\n    assert candidate([5, 6, 4, 4, 5, 1, 2, 3, 5, 6]) == 28\n    assert candidate([2, 5, 1, 5, 5]) == 13\n    assert candidate([1, 2, 6, 2, 6, 5, 5]) == 23\n    assert candidate([1, 1, 6, 4, 5]) == 16\n    assert candidate([3, 4, 1, 6, 2]) == 11\n    assert candidate([1, 3, 3, 5, 6, 4, 6, 5, 2, 2]) == 34\n    assert candidate([2, 4, 6, 4, 6, 3, 1, 5, 6]) == 26\n    assert candidate([1, 6, 1, 6, 4]) == 13\n    assert candidate([4, 2, 1]) == 7\n    assert candidate([1, 2, 4, 1]) == 8\n    assert candidate([1, 3, 3, 2, 5, 1, 4, 3, 1, 5]) == 17\n    assert candidate([4, 3, 1, 4]) == 9\n    assert candidate([5, 1, 3, 4, 5]) == 14\n    assert candidate([1, 5, 4, 2]) == 12\n    assert candidate([2, 6, 4, 3, 2, 2, 2, 5, 6, 5]) == 30\n    assert candidate([2, 6, 1, 2, 1, 1, 2, 4]) == 14\n    assert candidate([1, 2, 5, 3, 3, 3, 5]) == 20\n    assert candidate([2, 5, 2, 2, 1]) == 12\n    assert candidate([3, 5, 3, 4]) == 14\n    assert candidate([4, 6, 6, 3, 4, 1, 6]) == 24\n    assert candidate([2, 3, 5, 3, 4, 1, 1, 1, 3, 2]) == 21\n    assert candidate([6, 6, 5, 3, 5, 4, 5]) == 29\n    assert candidate([5, 5, 2, 2, 4, 2, 3, 2, 4, 4]) == 26\n    assert candidate([1, 2, 5]) == 8\n    assert candidate([3, 6, 2, 4, 5, 2, 2, 5, 1]) == 22\n    assert candidate([6, 2, 6, 3, 4, 6, 2]) == 22\n    assert candidate([6, 2, 5]) == 10\n    assert candidate([5, 4, 2, 6]) == 13\n    assert candidate([2, 6, 5, 3]) == 16\n    assert candidate([4, 5, 4, 1, 6, 5, 1, 3]) == 18\n    assert candidate([4, 1, 2, 4, 6, 2, 6, 3]) == 20\n    assert candidate([6, 4, 4, 4, 2]) == 20\n    assert candidate([5, 5, 4, 2]) == 16\n    assert candidate([5, 3, 3, 4, 2, 2, 1, 4]) == 20\n    assert candidate([6, 5, 6, 6, 6]) == 28\n    assert candidate([6, 3, 5, 6, 2, 2, 3]) == 23\n    assert candidate([4, 6, 4, 5]) == 18\n    assert candidate([3, 5, 4, 2, 1, 1, 5, 6, 1]) == 19\n    assert candidate([2, 3, 5, 6, 2, 4]) == 20\n    assert candidate([4, 5, 2, 1, 4, 6, 6, 1, 6, 2]) == 23\n\ndef test_check():\n    check(maximumSumOfHeights)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3140_countVisitedNodes", "language": "py", "prompt": "from typing import List\n\ndef countVisitedNodes(edges: List[int]) -> List[int]:\n    \"\"\"There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.\nYou are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].\nConsider the following process on the graph:\n * You start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.\nReturn an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/08/31/graaphdrawio-1.png]\nInput: edges = [1,2,0,0]\nOutput: [3,3,3,4]\nExplanation: We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/08/31/graaph2drawio.png]\nInput: edges = [1,2,3,4,0]\nOutput: [5,5,5,5,5]\nExplanation: Starting from any node we can visit every node in the graph in the process.\nConstraints:\n * n == edges.length\n * 2 <= n <= 105\n * 0 <= edges[i] <= n - 1\n * edges[i] != i\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3140_countVisitedNodes.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 0, 0]) == [3, 3, 3, 4]\n    assert candidate([1, 2, 3, 4, 0]) == [5, 5, 5, 5, 5]\n    assert candidate([3, 6, 1, 0, 5, 7, 4, 3]) == [2, 7, 8, 2, 5, 4, 6, 3]\n    assert candidate([7, 0, 7, 0, 5, 3, 3, 0]) == [2, 3, 3, 3, 5, 4, 4, 2]\n    assert candidate([6, 3, 6, 1, 0, 8, 0, 6, 6]) == [2, 2, 3, 2, 3, 4, 2, 3, 3]\n    assert candidate([8, 17, 14, 8, 14, 12, 16, 11, 4, 14, 19, 6, 8, 8, 2, 10, 2, 1, 1, 18]) == [5, 2, 2, 5, 3, 6, 4, 6, 4, 3, 5, 5, 5, 5, 2, 6, 3, 2, 3, 4]\n    assert candidate([11, 9, 6, 8, 3, 2, 8, 11, 14, 2, 3, 7, 2, 2, 1]) == [3, 6, 6, 7, 8, 7, 6, 2, 6, 6, 8, 2, 7, 7, 6]\n    assert candidate([9, 4, 4, 8, 5, 2, 3, 6, 5, 5]) == [5, 4, 3, 5, 3, 3, 6, 7, 4, 4]\n    assert candidate([1, 0, 1, 1]) == [2, 2, 3, 3]\n    assert candidate([4, 0, 3, 2, 3]) == [4, 5, 2, 2, 3]\n    assert candidate([7, 7, 0, 9, 5, 6, 10, 16, 7, 4, 15, 13, 2, 16, 1, 7, 6]) == [6, 6, 7, 9, 7, 6, 5, 5, 6, 8, 5, 7, 8, 6, 7, 5, 5]\n    assert candidate([2, 6, 3, 1, 5, 3, 5]) == [6, 4, 5, 4, 5, 4, 4]\n    assert candidate([15, 4, 13, 12, 12, 2, 11, 6, 14, 10, 15, 3, 5, 5, 2, 4]) == [7, 6, 3, 5, 5, 3, 7, 8, 5, 8, 7, 6, 4, 3, 4, 6]\n    assert candidate([1, 5, 0, 5, 2, 7, 1, 2]) == [5, 5, 5, 6, 6, 5, 6, 5]\n    assert candidate([9, 6, 13, 1, 11, 4, 17, 9, 2, 18, 15, 4, 14, 15, 7, 2, 18, 16, 1]) == [7, 5, 3, 6, 2, 3, 5, 7, 4, 6, 4, 2, 9, 3, 8, 3, 5, 5, 5]\n    assert candidate([18, 18, 4, 6, 1, 8, 14, 4, 16, 11, 13, 6, 10, 10, 6, 18, 14, 11, 4]) == [4, 3, 4, 3, 3, 5, 2, 4, 4, 4, 2, 3, 3, 2, 2, 4, 3, 4, 3]\n    assert candidate([5, 4, 1, 6, 3, 10, 3, 10, 11, 10, 8, 1]) == [9, 4, 5, 2, 3, 8, 2, 8, 6, 8, 7, 5]\n    assert candidate([8, 6, 3, 1, 0, 6, 8, 1, 4, 7, 8]) == [3, 5, 7, 6, 3, 5, 4, 6, 3, 7, 4]\n    assert candidate([9, 5, 18, 15, 8, 4, 3, 3, 18, 5, 13, 0, 1, 18, 9, 6, 18, 9, 14, 15]) == [7, 7, 7, 3, 6, 6, 3, 4, 6, 6, 8, 8, 8, 7, 6, 3, 7, 7, 6, 4]\n    assert candidate([5, 2, 1, 0, 6, 9, 10, 12, 12, 2, 16, 2, 9, 17, 0, 4, 9, 6]) == [5, 2, 2, 6, 7, 4, 6, 5, 5, 3, 5, 3, 4, 8, 6, 8, 4, 7]\n    assert candidate([6, 4, 1, 2, 3, 2, 0]) == [2, 4, 4, 4, 4, 5, 2]\n    assert candidate([1, 13, 4, 12, 15, 11, 1, 8, 15, 10, 1, 3, 0, 3, 2, 2]) == [5, 5, 3, 5, 3, 7, 6, 5, 4, 7, 6, 6, 5, 5, 4, 3]\n    assert candidate([2, 2, 0]) == [2, 3, 2]\n    assert candidate([11, 8, 8, 11, 5, 8, 9, 11, 6, 8, 0, 12, 9, 12]) == [6, 4, 4, 6, 5, 4, 3, 6, 3, 3, 7, 5, 4, 5]\n    assert candidate([2, 3, 6, 8, 0, 4, 8, 6, 1]) == [6, 3, 5, 3, 7, 8, 4, 5, 3]\n    assert candidate([2, 7, 17, 14, 3, 14, 11, 12, 9, 0, 15, 18, 1, 18, 0, 19, 11, 4, 1, 0]) == [6, 3, 6, 6, 6, 7, 6, 3, 8, 7, 9, 5, 3, 5, 6, 8, 6, 6, 4, 7]\n    assert candidate([5, 17, 10, 13, 16, 4, 7, 10, 19, 6, 15, 6, 9, 0, 1, 0, 12, 18, 10, 16]) == [10, 13, 11, 12, 10, 10, 10, 10, 12, 10, 10, 11, 10, 11, 14, 10, 10, 12, 11, 11]\n    assert candidate([1, 2, 6, 6, 1, 4, 4]) == [5, 4, 4, 5, 4, 5, 4]\n    assert candidate([2, 0, 0, 2]) == [2, 3, 2, 3]\n    assert candidate([12, 10, 5, 0, 12, 8, 0, 4, 3, 1, 9, 4, 6]) == [3, 3, 7, 4, 4, 6, 3, 5, 5, 3, 3, 5, 3]\n    assert candidate([8, 4, 0, 0, 8, 2, 3, 8, 7]) == [3, 4, 4, 4, 3, 5, 5, 2, 2]\n    assert candidate([6, 7, 1, 10, 2, 10, 3, 5, 10, 4, 2]) == [8, 5, 5, 6, 6, 5, 7, 5, 6, 7, 5]\n    assert candidate([2, 7, 5, 4, 8, 7, 2, 3, 0]) == [7, 8, 7, 7, 7, 7, 8, 7, 7]\n    assert candidate([2, 3, 1, 1, 0, 4]) == [4, 2, 3, 2, 5, 6]\n    assert candidate([5, 2, 3, 1, 3, 1]) == [5, 3, 3, 3, 4, 4]\n    assert candidate([7, 6, 12, 0, 1, 9, 13, 6, 9, 6, 0, 0, 3, 9, 12, 13, 0]) == [5, 4, 8, 6, 5, 4, 3, 4, 4, 3, 6, 6, 7, 3, 8, 4, 6]\n    assert candidate([1, 4, 9, 11, 11, 11, 14, 10, 11, 14, 2, 0, 14, 5, 10]) == [4, 4, 4, 5, 4, 5, 5, 5, 5, 4, 4, 4, 5, 6, 4]\n    assert candidate([4, 3, 3, 1, 3]) == [4, 2, 3, 2, 3]\n    assert candidate([7, 7, 6, 8, 0, 7, 8, 0, 0, 10, 9]) == [2, 3, 5, 4, 3, 3, 4, 2, 3, 2, 2]\n    assert candidate([16, 5, 11, 9, 7, 17, 16, 8, 14, 5, 5, 1, 0, 8, 0, 16, 14, 15, 19, 4]) == [3, 7, 9, 8, 6, 6, 4, 5, 4, 7, 7, 8, 4, 5, 3, 4, 3, 5, 8, 7]\n    assert candidate([1, 8, 10, 6, 2, 1, 8, 9, 6, 12, 5, 10, 3]) == [4, 3, 6, 3, 7, 4, 2, 6, 2, 5, 5, 6, 4]\n    assert candidate([4, 0, 1, 5, 0, 2]) == [2, 3, 4, 6, 2, 5]\n    assert candidate([9, 13, 1, 2, 13, 1, 0, 5, 10, 8, 2, 2, 3, 12]) == [9, 5, 5, 5, 6, 6, 10, 7, 7, 8, 6, 6, 5, 5]\n    assert candidate([12, 13, 16, 11, 17, 11, 2, 15, 12, 14, 4, 9, 3, 4, 17, 3, 4, 9]) == [7, 6, 6, 5, 4, 5, 7, 7, 7, 3, 5, 4, 6, 5, 3, 6, 5, 3]\n    assert candidate([2, 0, 1]) == [3, 3, 3]\n    assert candidate([7, 10, 15, 18, 7, 1, 7, 16, 11, 8, 2, 13, 13, 15, 16, 0, 18, 5, 16]) == [4, 8, 6, 3, 4, 9, 4, 3, 8, 9, 7, 7, 7, 6, 3, 5, 2, 10, 2]\n    assert candidate([1, 2, 0]) == [3, 3, 3]\n    assert candidate([10, 13, 4, 11, 11, 6, 9, 2, 7, 4, 5, 7, 0, 11]) == [9, 6, 4, 5, 4, 7, 6, 4, 5, 5, 8, 4, 10, 5]\n    assert candidate([12, 15, 15, 2, 10, 1, 5, 6, 1, 2, 11, 13, 10, 4, 2, 0, 1]) == [6, 8, 8, 9, 4, 9, 10, 11, 9, 9, 4, 4, 5, 4, 9, 7, 9]\n    assert candidate([1, 0]) == [2, 2]\n    assert candidate([7, 17, 3, 7, 7, 12, 15, 1, 14, 15, 16, 3, 13, 0, 3, 8, 0, 11, 1]) == [6, 5, 6, 5, 6, 9, 9, 5, 7, 9, 8, 5, 8, 7, 6, 8, 7, 5, 6]\n    assert candidate([9, 4, 6, 2, 8, 6, 7, 4, 9, 8, 0, 2, 7]) == [3, 4, 6, 7, 3, 6, 5, 4, 2, 2, 4, 7, 5]\n    assert candidate([13, 10, 6, 12, 12, 3, 4, 3, 10, 12, 1, 7, 8, 12, 9]) == [6, 2, 7, 5, 5, 6, 6, 6, 3, 5, 2, 7, 4, 5, 6]\n    assert candidate([10, 3, 4, 4, 5, 7, 2, 9, 7, 0, 5]) == [5, 8, 7, 7, 6, 5, 8, 5, 6, 5, 5]\n    assert candidate([2, 4, 0, 4, 2]) == [2, 4, 2, 4, 3]\n    assert candidate([2, 2, 1]) == [3, 2, 2]\n    assert candidate([19, 15, 1, 6, 8, 15, 5, 6, 4, 4, 19, 13, 3, 0, 15, 10, 13, 5, 6, 3]) == [7, 7, 8, 6, 2, 6, 6, 7, 2, 3, 6, 9, 7, 8, 7, 6, 9, 7, 7, 6]\n    assert candidate([11, 9, 5, 0, 5, 3, 9, 8, 1, 10, 4, 4]) == [5, 8, 6, 5, 5, 5, 8, 10, 9, 7, 6, 5]\n    assert candidate([13, 10, 12, 11, 5, 17, 0, 10, 7, 16, 5, 4, 9, 3, 15, 5, 4, 1]) == [9, 4, 9, 7, 5, 4, 10, 5, 6, 7, 4, 6, 8, 8, 6, 5, 6, 4]\n    assert candidate([7, 0, 9, 0, 7, 6, 2, 0, 7, 7]) == [2, 3, 4, 3, 3, 6, 5, 2, 3, 3]\n    assert candidate([1, 0, 0]) == [2, 2, 3]\n    assert candidate([5, 9, 10, 17, 12, 3, 15, 5, 0, 3, 15, 5, 5, 15, 17, 5, 13, 15, 1]) == [5, 6, 6, 4, 6, 4, 5, 5, 6, 5, 5, 5, 5, 5, 5, 4, 6, 4, 7]\n    assert candidate([1, 5, 1, 8, 1, 0, 1, 4, 6]) == [3, 3, 4, 6, 4, 3, 4, 5, 5]\n    assert candidate([5, 3, 3, 4, 1, 4]) == [5, 3, 4, 3, 3, 4]\n    assert candidate([7, 12, 12, 5, 10, 11, 5, 0, 3, 12, 12, 9, 1, 3, 7]) == [2, 2, 3, 6, 4, 5, 6, 2, 7, 3, 3, 4, 2, 7, 3]\n    assert candidate([3, 3, 3, 1]) == [3, 2, 3, 2]\n    assert candidate([13, 3, 15, 10, 12, 7, 13, 15, 3, 0, 1, 5, 15, 12, 10, 9]) == [5, 3, 6, 3, 6, 7, 6, 6, 4, 5, 3, 8, 5, 5, 4, 5]\n    assert candidate([8, 9, 0, 9, 0, 0, 9, 0, 7, 6, 5, 0]) == [3, 3, 4, 3, 4, 4, 2, 3, 3, 2, 5, 4]\n    assert candidate([2, 0, 7, 7, 3, 3, 0, 4, 5, 8]) == [5, 6, 4, 3, 3, 4, 6, 3, 5, 6]\n    assert candidate([13, 8, 7, 13, 10, 6, 11, 13, 13, 6, 8, 6, 0, 10]) == [4, 4, 5, 4, 4, 3, 2, 4, 3, 3, 3, 2, 5, 3]\n    assert candidate([12, 14, 5, 17, 7, 0, 15, 18, 5, 10, 6, 18, 10, 11, 1, 1, 18, 16, 0]) == [7, 2, 9, 11, 10, 8, 4, 9, 9, 6, 5, 9, 6, 10, 2, 3, 9, 10, 8]\n    assert candidate([8, 6, 17, 7, 12, 10, 13, 14, 10, 10, 2, 15, 11, 5, 4, 13, 12, 12]) == [10, 10, 8, 12, 9, 8, 9, 11, 9, 9, 8, 8, 8, 8, 10, 8, 9, 8]\n    assert candidate([1, 0, 1, 1, 1]) == [2, 2, 3, 3, 3]\n    assert candidate([17, 16, 15, 5, 11, 4, 4, 10, 14, 1, 17, 1, 4, 3, 12, 17, 14, 10]) == [3, 6, 4, 8, 6, 7, 7, 3, 7, 7, 2, 6, 6, 9, 6, 3, 6, 2]\n    assert candidate([14, 10, 16, 16, 12, 13, 13, 16, 13, 14, 15, 14, 1, 4, 13, 11, 4, 7]) == [9, 8, 10, 10, 8, 9, 9, 10, 9, 9, 8, 8, 8, 8, 8, 8, 9, 11]\n    assert candidate([2, 3, 0, 1]) == [2, 2, 2, 2]\n    assert candidate([8, 0, 11, 2, 0, 12, 0, 4, 11, 12, 0, 7, 3]) == [5, 6, 6, 7, 5, 9, 6, 5, 5, 9, 6, 5, 8]\n    assert candidate([3, 0, 1, 0]) == [2, 3, 4, 2]\n    assert candidate([1, 3, 0, 1, 10, 11, 2, 6, 0, 5, 1, 4]) == [3, 2, 4, 2, 4, 6, 5, 6, 4, 7, 3, 5]\n    assert candidate([1, 16, 10, 6, 15, 10, 7, 9, 2, 15, 5, 6, 13, 1, 0, 16, 13]) == [4, 3, 3, 8, 5, 2, 7, 6, 4, 5, 2, 8, 4, 3, 5, 4, 3]\n    assert candidate([4, 15, 10, 11, 0, 7, 9, 10, 1, 2, 9, 12, 5, 10, 6, 13]) == [2, 6, 3, 8, 2, 5, 4, 4, 7, 3, 3, 7, 6, 4, 5, 5]\n    assert candidate([4, 9, 8, 9, 1, 4, 7, 11, 5, 6, 4, 6, 4, 4, 2]) == [7, 5, 9, 5, 6, 7, 3, 3, 8, 4, 7, 3, 7, 7, 10]\n    assert candidate([16, 14, 1, 6, 6, 1, 1, 15, 16, 16, 13, 14, 9, 3, 3, 11, 10]) == [8, 4, 5, 4, 5, 5, 4, 7, 8, 8, 6, 5, 9, 5, 4, 6, 7]\n    assert candidate([6, 11, 15, 7, 5, 8, 11, 5, 14, 2, 6, 0, 8, 5, 13, 5]) == [3, 4, 6, 6, 5, 4, 3, 5, 4, 7, 4, 3, 5, 4, 4, 5]\n    assert candidate([14, 17, 11, 8, 5, 4, 10, 17, 3, 3, 2, 17, 13, 1, 17, 5, 5, 0]) == [3, 4, 5, 2, 2, 2, 7, 4, 2, 3, 6, 4, 6, 5, 3, 3, 3, 3]\n    assert candidate([1, 6, 8, 6, 2, 4, 2, 5, 9, 3]) == [7, 6, 5, 5, 6, 7, 5, 8, 5, 5]\n    assert candidate([1, 5, 4, 1, 5, 3, 4, 0]) == [4, 3, 5, 3, 4, 3, 5, 5]\n    assert candidate([17, 4, 3, 7, 3, 1, 15, 15, 13, 18, 4, 14, 1, 10, 13, 1, 0, 15, 16]) == [7, 5, 6, 5, 5, 6, 6, 5, 8, 10, 6, 9, 6, 7, 8, 5, 8, 6, 9]\n    assert candidate([12, 2, 6, 6, 7, 8, 8, 13, 1, 12, 15, 1, 8, 3, 8, 2, 6]) == [6, 4, 4, 5, 8, 5, 4, 7, 4, 6, 6, 5, 5, 6, 5, 5, 5]\n    assert candidate([3, 0, 0, 2]) == [3, 4, 3, 3]\n    assert candidate([5, 0, 1, 1, 2, 0]) == [2, 3, 4, 4, 5, 2]\n    assert candidate([16, 2, 13, 6, 7, 10, 1, 1, 7, 14, 7, 13, 9, 16, 4, 8, 15]) == [8, 7, 7, 9, 8, 9, 8, 7, 7, 10, 8, 8, 11, 7, 9, 7, 7]\n    assert candidate([14, 5, 0, 16, 7, 15, 1, 18, 18, 6, 11, 15, 0, 2, 3, 0, 17, 4, 12]) == [9, 12, 10, 9, 9, 11, 13, 9, 10, 14, 12, 11, 9, 11, 9, 10, 9, 9, 9]\n    assert candidate([7, 8, 1, 9, 7, 10, 1, 4, 2, 0, 9]) == [3, 3, 3, 5, 2, 6, 4, 2, 3, 4, 5]\n    assert candidate([5, 3, 6, 2, 1, 3, 1, 3]) == [6, 4, 4, 4, 5, 5, 4, 5]\n    assert candidate([8, 14, 5, 13, 6, 9, 8, 11, 9, 4, 11, 14, 5, 12, 10, 10, 12]) == [5, 4, 6, 8, 4, 5, 4, 4, 4, 4, 3, 3, 6, 7, 3, 4, 7]\n    assert candidate([6, 13, 11, 11, 6, 3, 3, 6, 1, 12, 4, 7, 14, 11, 0, 10]) == [5, 6, 5, 4, 5, 5, 4, 4, 7, 8, 6, 4, 7, 5, 6, 7]\n    assert candidate([12, 8, 6, 1, 5, 0, 1, 1, 11, 0, 12, 2, 0]) == [2, 5, 5, 6, 4, 3, 5, 6, 5, 3, 3, 5, 2]\n    assert candidate([8, 2, 7, 17, 5, 1, 5, 17, 10, 2, 12, 3, 1, 0, 11, 3, 7, 4]) == [10, 6, 6, 7, 6, 6, 7, 6, 9, 7, 8, 8, 7, 11, 9, 8, 7, 6]\n    assert candidate([4, 2, 4, 2, 3]) == [4, 4, 3, 3, 3]\n\ndef test_check():\n    check(countVisitedNodes)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3141_minSizeSubarray", "language": "py", "prompt": "from typing import List\n\ndef minSizeSubarray(nums: List[int], target: int) -> int:\n    \"\"\"You are given a 0-indexed array nums and an integer target.\nA 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.\nReturn the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.\nExample 1:\nInput: nums = [1,2,3], target = 5\nOutput: 2\nExplanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.\nExample 2:\nInput: nums = [1,1,1,2,3], target = 4\nOutput: 2\nExplanation: In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.\nExample 3:\nInput: nums = [2,4,6,8], target = 3\nOutput: -1\nExplanation: In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 105\n * 1 <= target <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3141_minSizeSubarray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3], 5) == 2\n    assert candidate([1, 1, 1, 2, 3], 4) == 2\n    assert candidate([2, 4, 6, 8], 3) == -1\n    assert candidate([2, 1, 5, 7, 7, 1, 6, 3], 39) == 9\n    assert candidate([17, 4, 3, 14, 17, 6, 15], 85) == -1\n    assert candidate([18, 3, 11, 19, 7, 16, 6, 7, 3, 6, 18, 9, 9, 1, 14, 17, 15, 14, 12, 10], 7) == 1\n    assert candidate([2, 3, 5, 2, 3, 4, 4, 1, 3, 5, 2, 2, 5, 1, 1, 2, 5], 19) == 6\n    assert candidate([4, 1, 5, 7, 1, 6, 1, 7, 2, 2, 5, 5, 5, 6, 3], 20) == 5\n    assert candidate([7, 3, 5], 36) == -1\n    assert candidate([1, 11, 6, 4, 13], 22) == 4\n    assert candidate([1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1], 83) == 53\n    assert candidate([4, 3, 5, 4, 5, 4, 4, 4, 5, 7, 4, 5, 6, 3, 1, 4, 6, 3, 7], 15) == 3\n    assert candidate([1, 2, 3, 2, 1, 5, 3, 4, 5], 53) == 19\n    assert candidate([2, 5, 6, 4], 95) == 22\n    assert candidate([6, 6, 4, 5, 2, 8, 1, 8, 7, 6, 6, 7, 4, 1, 9, 6, 8, 8], 55) == 9\n    assert candidate([1, 2, 8, 19, 17, 2, 3, 11, 8, 12, 16, 18, 7], 36) == 2\n    assert candidate([12, 14, 4, 14, 13, 16, 5], 36) == -1\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 37) == 37\n    assert candidate([5, 7, 2, 6, 4, 1, 6, 7, 1, 4, 7, 6, 7, 7, 6, 6, 4, 6, 8], 90) == 17\n    assert candidate([3, 5, 15, 17, 6, 17, 10, 15, 10, 4, 6], 25) == 2\n    assert candidate([14, 5], 23) == -1\n    assert candidate([1, 1, 5, 9], 68) == -1\n    assert candidate([11, 1, 17, 14, 9, 16, 5, 3, 7, 16, 14, 18, 17, 10], 82) == 6\n    assert candidate([9, 6, 8, 4, 3, 4, 6, 4, 7, 2, 6, 9, 2, 4, 5, 4], 71) == 14\n    assert candidate([2, 4, 4, 3, 2, 3, 2, 5, 3, 1, 5, 1, 4, 2, 6], 23) == 7\n    assert candidate([3, 6], 66) == 15\n    assert candidate([1, 4, 8, 5, 9, 8, 8, 2, 3, 1, 6, 2, 7, 5, 5, 3, 3, 5, 6], 57) == 10\n    assert candidate([1, 6, 5, 5, 1, 1, 2, 5, 3, 1, 5, 3, 2, 4, 6, 6], 56) == 16\n    assert candidate([5, 3, 5, 4, 3, 1, 3, 3, 1, 3, 3, 5, 5, 4, 5, 5, 5, 5], 8) == 2\n    assert candidate([2, 2, 1, 3, 2, 2, 2, 3, 3, 2, 1, 3, 3, 2, 3, 3], 93) == 40\n    assert candidate([5, 1, 4, 1, 5, 6], 71) == 19\n    assert candidate([3, 5, 6, 6, 1, 8, 4, 9, 6, 2, 3, 9, 6, 8, 7, 3, 6, 1, 8, 6], 60) == 11\n    assert candidate([12, 15, 9, 3, 3, 12, 13, 14, 7, 11, 7, 15, 12, 5, 11], 18) == 2\n    assert candidate([3, 11, 10, 12, 9, 13, 9], 19) == -1\n    assert candidate([3, 4, 4], 35) == -1\n    assert candidate([4, 5, 2, 5, 5, 5, 1], 87) == 23\n    assert candidate([2, 13, 15, 3, 6, 7, 16, 7, 9, 10, 4, 3, 12, 9, 13, 2, 9, 13, 15], 4) == 1\n    assert candidate([1, 2, 16, 10, 15, 15, 13, 11, 10, 6, 12, 15, 9], 30) == 2\n    assert candidate([3, 5], 85) == 21\n    assert candidate([1, 4, 3, 1, 4, 4, 2, 3], 6) == 2\n    assert candidate([2, 10, 12, 10, 4, 4, 12, 5, 12, 12, 5], 33) == 4\n    assert candidate([5, 9, 7, 10, 4, 7, 9, 11, 6, 3, 1, 8, 6, 1, 11, 1, 1], 72) == 11\n    assert candidate([19, 18, 6], 56) == -1\n    assert candidate([3, 5, 7, 6, 5, 3, 7, 7, 1, 5, 3, 1, 5, 6, 3, 1, 6, 1, 3], 20) == 4\n    assert candidate([5, 5, 4, 1, 2, 2, 2, 3, 2, 4, 2, 5], 56) == 16\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1], 22) == 22\n    assert candidate([1, 2], 72) == 48\n    assert candidate([4, 3, 6, 6, 2, 6, 1, 6, 7, 5, 7, 6, 1, 5, 7], 82) == -1\n    assert candidate([4, 1, 5, 2, 3, 1, 2, 4, 1, 5, 3, 3, 5, 2, 6, 6, 5, 2, 1], 63) == 20\n    assert candidate([8, 2, 5, 4, 1, 6, 6, 6, 6, 4, 4, 5, 5, 9, 6, 6, 9, 2], 4) == 1\n    assert candidate([18, 12, 13, 9, 17, 11], 82) == -1\n    assert candidate([13, 3, 1, 5, 13, 7, 12, 5], 35) == 5\n    assert candidate([4, 10, 12, 6, 2, 2, 4, 12, 6, 1, 1, 2, 2, 10, 6, 11, 5, 4, 9], 49) == 7\n    assert candidate([8], 68) == -1\n    assert candidate([7, 2, 6, 7, 6, 4, 4, 1, 6, 4, 1, 7, 7, 2, 2, 4, 4, 4], 29) == 6\n    assert candidate([4, 7, 6, 12, 10, 13, 7, 6, 6, 1, 15, 2, 4, 8, 12], 43) == 6\n    assert candidate([4, 10], 10) == 1\n    assert candidate([4, 3, 2, 4, 5, 3, 7, 12, 2, 2, 10], 43) == 8\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 58) == 58\n    assert candidate([1, 1, 1, 1, 1], 20) == 20\n    assert candidate([4, 3], 23) == -1\n    assert candidate([3, 2, 1, 3, 2, 1, 3, 1, 1, 1, 2, 1, 2, 1, 2, 3, 3, 1], 78) == 41\n    assert candidate([3, 2, 4, 2, 4, 2, 5, 4, 5, 3, 4, 4, 2, 4, 4, 1], 19) == 5\n    assert candidate([17], 1) == -1\n    assert candidate([10, 12, 1, 11, 9, 5, 4, 5, 1, 10, 8, 12, 5, 4], 82) == 10\n    assert candidate([6], 44) == -1\n    assert candidate([4, 6, 2, 6, 3, 5, 2, 5, 5, 4, 3, 1, 5, 4, 5, 5, 4, 5, 5, 6], 12) == 3\n    assert candidate([14, 4, 13, 12, 18, 8, 4, 15, 4, 14, 17, 4, 2], 8) == 1\n    assert candidate([4, 4, 6, 5, 3, 4, 1, 4, 2, 6, 3], 32) == 9\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 28) == 28\n    assert candidate([5, 10, 1, 3, 14, 7, 13, 6, 5, 7, 10, 3, 10, 5, 8, 5, 7, 5, 6, 7], 25) == 4\n    assert candidate([12, 3, 4, 10, 5, 8, 12, 7, 12, 7, 5, 8, 4, 8, 11, 11], 48) == -1\n    assert candidate([3, 11, 5, 5, 3, 10, 12, 12, 12, 3, 10], 88) == -1\n    assert candidate([8, 2, 10, 5], 28) == -1\n    assert candidate([3, 5, 1, 4, 5, 2, 5, 3, 1, 2, 1, 1, 1, 3, 3, 3, 5], 68) == 23\n    assert candidate([1, 4, 1, 4, 4], 21) == -1\n    assert candidate([15, 8, 8, 19, 8, 12, 15, 3, 15, 8, 10, 9], 77) == 7\n    assert candidate([4, 4], 80) == 20\n    assert candidate([4, 9, 3, 7, 5, 4, 5, 1, 3, 5], 69) == 14\n    assert candidate([2, 8, 2, 8, 1, 5, 8, 9, 3, 4, 6, 6, 6, 1, 7, 9], 93) == 17\n    assert candidate([7, 11, 14, 12, 3, 16, 11, 9], 10) == -1\n    assert candidate([2, 1, 2, 1, 3, 2, 1, 1, 2], 17) == 10\n    assert candidate([5, 20, 18, 2, 8], 45) == 4\n    assert candidate([2, 1, 2, 1, 2, 1, 1, 1, 2, 2], 58) == 38\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 17) == 17\n    assert candidate([18, 6, 8, 17, 3, 10, 14, 12, 4, 13, 12, 10, 5, 18, 11], 95) == 9\n    assert candidate([19, 12, 14], 57) == 4\n    assert candidate([3, 13, 14], 11) == -1\n    assert candidate([17, 6, 8, 7, 4, 6, 6, 3, 8, 1, 8, 10, 18, 13, 2], 32) == 3\n    assert candidate([3, 12, 4, 9, 5, 2, 2, 9, 9, 6, 9, 11, 9], 41) == -1\n    assert candidate([3, 14, 2, 9, 5, 14, 15, 4, 3, 4, 17, 11], 3) == 1\n    assert candidate([2, 5, 3, 6, 3, 6, 1, 1, 5, 1], 37) == -1\n    assert candidate([13, 6, 4, 7, 3, 6, 4, 10, 13, 10, 5, 4, 2, 1, 7, 11, 3, 3, 12], 51) == 7\n    assert candidate([1, 10, 9, 16, 3, 10, 2, 5, 1, 10], 83) == 11\n    assert candidate([2, 10, 13, 3, 4, 19, 14, 20, 11, 15, 4, 3, 17, 8, 2, 3, 1, 13, 8], 1) == 1\n    assert candidate([4, 5, 5, 3, 5, 4, 2, 11, 5, 9, 4, 6], 41) == 7\n    assert candidate([2, 8, 9, 6, 11, 17, 3, 6, 9, 7, 2, 8, 9, 11, 19], 39) == 3\n    assert candidate([8, 13, 9, 5, 8, 6, 17, 16, 14, 7, 10, 15, 16], 8) == 1\n    assert candidate([10, 20, 16, 1, 11, 18, 13, 6, 13, 6, 9, 14, 16, 12, 13, 7, 19], 59) == 5\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 6) == 6\n\ndef test_check():\n    check(minSizeSubarray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3143_getWordsInLongestSubsequence", "language": "py", "prompt": "from typing import List\n\ndef getWordsInLongestSubsequence(n: int, words: List[str], groups: List[int]) -> List[str]:\n    \"\"\"You are given an integer n, a 0-indexed string array words, and a 0-indexed binary array groups, both arrays having length n.\nYou need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik - 1] having length k, groups[ij] != groups[ij + 1], for each j where 0 < j + 1 < k.\nReturn a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.\nA subsequence of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\nNote: strings in words may be unequal in length.\nExample 1:\nInput: n = 3, words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\nOutput: [\"e\",\"b\"]\nExplanation: A subsequence that can be selected is [0,2] because groups[0] != groups[2].\nSo, a valid answer is [words[0],words[2]] = [\"e\",\"b\"].\nAnother subsequence that can be selected is [1,2] because groups[1] != groups[2].\nThis results in [words[1],words[2]] = [\"a\",\"b\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.\nExample 2:\nInput: n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\nOutput: [\"a\",\"b\",\"c\"]\nExplanation: A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].\nSo, a valid answer is [words[0],words[1],words[2]] = [\"a\",\"b\",\"c\"].\nAnother subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].\nThis results in [words[0],words[1],words[3]] = [\"a\",\"b\",\"d\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\nConstraints:\n * 1 <= n == words.length == groups.length <= 100\n * 1 <= words[i].length <= 10\n * 0 <= groups[i] < 2\n * words consists of distinct strings.\n * words[i] consists of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3143_getWordsInLongestSubsequence.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, ['e', 'a', 'b'], [0, 0, 1]) == ['e', 'b']\n    assert candidate(4, ['a', 'b', 'c', 'd'], [1, 0, 1, 1]) == ['a', 'b', 'c']\n    assert candidate(1, ['c'], [0]) == ['c']\n    assert candidate(1, ['d'], [1]) == ['d']\n    assert candidate(1, ['e'], [0]) == ['e']\n    assert candidate(1, ['fe'], [0]) == ['fe']\n    assert candidate(1, ['frl'], [1]) == ['frl']\n    assert candidate(1, ['ha'], [1]) == ['ha']\n    assert candidate(1, ['l'], [0]) == ['l']\n    assert candidate(1, ['n'], [1]) == ['n']\n    assert candidate(1, ['s'], [1]) == ['s']\n    assert candidate(2, ['d', 'g'], [0, 1]) == ['d', 'g']\n    assert candidate(2, ['lr', 'h'], [0, 0]) == ['lr']\n    assert candidate(2, ['wx', 'h'], [0, 1]) == ['wx', 'h']\n    assert candidate(2, ['yw', 'n'], [0, 1]) == ['yw', 'n']\n    assert candidate(2, ['z', 'n'], [0, 0]) == ['z']\n    assert candidate(2, ['zr', 'a'], [0, 0]) == ['zr']\n    assert candidate(3, ['h', 'vv', 'kp'], [0, 1, 0]) == ['h', 'vv', 'kp']\n    assert candidate(3, ['m', 'v', 'y'], [0, 1, 0]) == ['m', 'v', 'y']\n    assert candidate(3, ['o', 'cfy', 'en'], [1, 0, 0]) == ['o', 'cfy']\n    assert candidate(3, ['tu', 'rv', 'bn'], [0, 0, 0]) == ['tu']\n    assert candidate(4, ['c', 'f', 'y', 'i'], [1, 0, 1, 1]) == ['c', 'f', 'y']\n    assert candidate(4, ['c', 'w', 'h', 's'], [0, 0, 0, 1]) == ['c', 's']\n    assert candidate(4, ['d', 'a', 'v', 'b'], [1, 0, 0, 1]) == ['d', 'a', 'b']\n    assert candidate(4, ['hh', 'svj', 'a', 'nr'], [1, 1, 1, 1]) == ['hh']\n    assert candidate(4, ['im', 'j', 'xq', 'cjs'], [1, 0, 0, 1]) == ['im', 'j', 'cjs']\n    assert candidate(4, ['m', 'dkg', 'r', 'h'], [1, 1, 1, 0]) == ['m', 'h']\n    assert candidate(4, ['ow', 'qay', 'r', 'j'], [1, 1, 1, 1]) == ['ow']\n    assert candidate(4, ['r', 'k', 'pb', 'x'], [0, 0, 1, 0]) == ['r', 'pb', 'x']\n    assert candidate(4, ['sq', 'do', 'bcj', 'nm'], [0, 1, 1, 0]) == ['sq', 'do', 'nm']\n    assert candidate(4, ['sz', 'mq', 'j', 'u'], [0, 0, 1, 0]) == ['sz', 'j', 'u']\n    assert candidate(4, ['x', 'nf', 'p', 'asn'], [1, 1, 1, 1]) == ['x']\n    assert candidate(4, ['z', 'tkt', 'x', 'swy'], [1, 0, 1, 1]) == ['z', 'tkt', 'x']\n    assert candidate(5, ['ht', 'lw', 'ax', 'vi', 'fo'], [0, 0, 1, 0, 0]) == ['ht', 'ax', 'vi']\n    assert candidate(5, ['mc', 'kh', 'x', 'q', 'z'], [0, 0, 1, 1, 0]) == ['mc', 'x', 'z']\n    assert candidate(5, ['n', 'fg', 'fy', 'tv', 'gv'], [1, 1, 1, 1, 1]) == ['n']\n    assert candidate(5, ['n', 'l', 'e', 'd', 'm'], [1, 1, 0, 1, 1]) == ['n', 'e', 'd']\n    assert candidate(5, ['n', 'm', 'g', 'b', 'd'], [0, 0, 1, 0, 0]) == ['n', 'g', 'b']\n    assert candidate(5, ['nz', 'zwt', 'hig', 's', 'jze'], [1, 1, 1, 0, 1]) == ['nz', 's', 'jze']\n    assert candidate(5, ['o', 'i', 'b', 'k', 'kz'], [0, 0, 1, 1, 1]) == ['o', 'b']\n    assert candidate(5, ['r', 'o', 'k', 'd', 'f'], [0, 0, 0, 1, 1]) == ['r', 'd']\n    assert candidate(5, ['sfh', 'exd', 'j', 'w', 'gc'], [1, 0, 1, 1, 1]) == ['sfh', 'exd', 'j']\n    assert candidate(5, ['v', 'f', 'k', 'l', 'p'], [0, 0, 1, 0, 0]) == ['v', 'k', 'l']\n    assert candidate(5, ['vbd', 'ua', 'muo', 'mu', 'qi'], [0, 0, 0, 1, 0]) == ['vbd', 'mu', 'qi']\n    assert candidate(5, ['we', 'ch', 'tl', 'yx', 'utx'], [1, 0, 0, 1, 1]) == ['we', 'ch', 'yx']\n    assert candidate(5, ['x', 'vlk', 'tds', 'dfn', 'kr'], [0, 0, 1, 1, 0]) == ['x', 'tds', 'kr']\n    assert candidate(5, ['y', 'j', 'u', 'r', 'f'], [0, 0, 1, 1, 0]) == ['y', 'u', 'f']\n    assert candidate(5, ['y', 'r', 'z', 'x', 'q'], [0, 1, 0, 1, 1]) == ['y', 'r', 'z', 'x']\n    assert candidate(5, ['yc', 'fgq', 'gg', 'og', 'tca'], [0, 1, 1, 1, 0]) == ['yc', 'fgq', 'tca']\n    assert candidate(5, ['z', 'd', 'p', 'c', 'm'], [0, 0, 0, 0, 0]) == ['z']\n    assert candidate(6, ['c', 'i', 'to', 'kv', 'op', 'u'], [0, 0, 1, 0, 0, 0]) == ['c', 'to', 'kv']\n    assert candidate(6, ['d', 'h', 'e', 'k', 'j', 'r'], [0, 1, 1, 0, 1, 0]) == ['d', 'h', 'k', 'j', 'r']\n    assert candidate(6, ['l', 'f', 'v', 'b', 'w', 'k'], [1, 0, 1, 1, 0, 0]) == ['l', 'f', 'v', 'w']\n    assert candidate(6, ['lj', 'vf', 'pa', 'w', 'z', 'q'], [0, 0, 1, 0, 0, 0]) == ['lj', 'pa', 'w']\n    assert candidate(7, ['cd', 'oki', 'ho', 'oi', 'm', 'yvy', 'i'], [1, 1, 0, 1, 1, 1, 1]) == ['cd', 'ho', 'oi']\n    assert candidate(7, ['exb', 'c', 'oq', 'lq', 'xh', 'zmo', 'aug'], [1, 1, 0, 1, 1, 0, 0]) == ['exb', 'oq', 'lq', 'zmo']\n    assert candidate(7, ['f', 'r', 'k', 'h', 'm', 'v', 'p'], [1, 0, 0, 0, 1, 0, 0]) == ['f', 'r', 'm', 'v']\n    assert candidate(7, ['fd', 'fc', 'jm', 'z', 'lg', 'kl', 'ux'], [0, 1, 0, 1, 0, 1, 0]) == ['fd', 'fc', 'jm', 'z', 'lg', 'kl', 'ux']\n    assert candidate(7, ['ft', 'iw', 'm', 'v', 'gx', 'd', 'pm'], [1, 1, 1, 0, 1, 1, 1]) == ['ft', 'v', 'gx']\n    assert candidate(7, ['lma', 'i', 'rt', 'xar', 'bfx', 'np', 'x'], [1, 1, 1, 1, 1, 0, 1]) == ['lma', 'np', 'x']\n    assert candidate(7, ['nsv', 'r', 'o', 'qo', 'pb', 'xqv', 'clb'], [1, 1, 0, 0, 0, 0, 0]) == ['nsv', 'o']\n    assert candidate(7, ['p', 'qdb', 'zcd', 'l', 'tv', 'ln', 'ogb'], [1, 1, 0, 1, 0, 0, 1]) == ['p', 'zcd', 'l', 'tv', 'ogb']\n    assert candidate(7, ['z', 'cee', 'j', 'jqu', 'w', 'ljr', 'k'], [1, 0, 1, 1, 0, 0, 1]) == ['z', 'cee', 'j', 'w', 'k']\n    assert candidate(8, ['h', 'p', 'q', 't', 'j', 'a', 'c', 'n'], [0, 1, 1, 1, 0, 0, 1, 1]) == ['h', 'p', 'j', 'c']\n    assert candidate(8, ['r', 'v', 'c', 't', 'd', 'a', 'x', 'o'], [1, 1, 0, 1, 1, 0, 0, 1]) == ['r', 'c', 't', 'a', 'o']\n    assert candidate(8, ['u', 'l', 'a', 'y', 'j', 's', 'h', 'q'], [0, 0, 0, 0, 0, 1, 0, 0]) == ['u', 's', 'h']\n    assert candidate(8, ['x', 'mr', 'yyf', 'l', 'z', 'q', 'zvj', 'zqt'], [0, 1, 1, 1, 0, 1, 1, 0]) == ['x', 'mr', 'z', 'q', 'zqt']\n    assert candidate(8, ['y', 'x', 'i', 'xtm', 'ze', 'n', 'cma', 'dgk'], [0, 1, 0, 0, 1, 1, 0, 0]) == ['y', 'x', 'i', 'ze', 'cma']\n    assert candidate(8, ['yun', 'x', 'zpp', 'bpr', 'ii', 'ezg', 'dn', 'k'], [0, 1, 1, 1, 1, 0, 1, 0]) == ['yun', 'x', 'ezg', 'dn', 'k']\n    assert candidate(9, ['ckr', 'iz', 'top', 'of', 'sb', 'wv', 'hb', 'da', 'wd'], [1, 1, 0, 1, 1, 0, 0, 0, 1]) == ['ckr', 'top', 'of', 'wv', 'wd']\n    assert candidate(9, ['g', 'h', 'u', 'n', 'w', 'o', 'f', 'p', 'm'], [1, 0, 0, 1, 1, 0, 0, 1, 0]) == ['g', 'h', 'n', 'o', 'p', 'm']\n    assert candidate(9, ['ilw', 't', 'dyy', 'irz', 'oxy', 'k', 'rfj', 'hi', 'zxe'], [1, 1, 1, 0, 1, 1, 0, 1, 1]) == ['ilw', 'irz', 'oxy', 'rfj', 'hi']\n    assert candidate(9, ['l', 'iuz', 'd', 'tfw', 'mu', 'a', 'rp', 'mrb', 'wnl'], [1, 1, 1, 1, 1, 0, 1, 1, 0]) == ['l', 'a', 'rp', 'wnl']\n    assert candidate(9, ['mc', 'b', 'yr', 'cj', 'zk', 'wi', 'esm', 'yu', 'cw'], [0, 0, 1, 1, 0, 0, 1, 1, 0]) == ['mc', 'yr', 'zk', 'esm', 'cw']\n    assert candidate(9, ['nw', 'hx', 'ygc', 'vjo', 'jmv', 'p', 'juv', 'b', 'y'], [0, 1, 0, 0, 1, 0, 0, 1, 0]) == ['nw', 'hx', 'ygc', 'jmv', 'p', 'b', 'y']\n    assert candidate(9, ['osq', 'qiw', 'h', 'tc', 'xg', 'tvt', 'fqp', 'zq', 'b'], [0, 0, 1, 0, 1, 1, 0, 1, 1]) == ['osq', 'h', 'tc', 'xg', 'fqp', 'zq']\n    assert candidate(9, ['vr', 'lw', 'e', 'g', 'dz', 'kf', 'qe', 'h', 'p'], [1, 0, 0, 1, 1, 0, 0, 0, 0]) == ['vr', 'lw', 'g', 'kf']\n    assert candidate(10, ['gy', 'nd', 'l', 'hr', 'i', 'qf', 'zz', 'nq', 'e', 'oa'], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0]) == ['gy', 'nd', 'l', 'i', 'qf', 'zz', 'oa']\n    assert candidate(10, ['j', 'r', 'h', 't', 'z', 'b', 'a', 's', 'v', 'q'], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1]) == ['j', 'r', 'h', 'a', 'q']\n    assert candidate(10, ['k', 'f', 'u', 'h', 'x', 'w', 'c', 'e', 'l', 'p'], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]) == ['k', 'f', 'p']\n    assert candidate(10, ['lj', 'huy', 'lg', 'h', 'o', 'b', 'ava', 'ay', 'r', 'us'], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1]) == ['lj', 'o', 'ava']\n    assert candidate(10, ['m', 'd', 'xv', 'dp', 'nq', 'xi', 'e', 'g', 'n', 'qw'], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1]) == ['m', 'd', 'xv', 'e', 'g', 'n', 'qw']\n    assert candidate(10, ['n', 'c', 'y', 'h', 'w', 'm', 'g', 't', 'x', 'v'], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1]) == ['n', 'h', 'm', 'g', 'v']\n    assert candidate(10, ['o', 'w', 'l', 'g', 'm', 'x', 'f', 'q', 'c', 'v'], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1]) == ['o', 'g', 'm', 'q', 'v']\n    assert candidate(10, ['p', 'mw', 'm', 'xld', 'j', 'jv', 'n', 'so', 'pkd', 'rwt'], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1]) == ['p', 'm', 'xld', 'j', 'n', 'pkd']\n    assert candidate(10, ['vyv', 'msl', 'd', 'bu', 'ubl', 'bgk', 'sz', 'njv', 'pf', 's'], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0]) == ['vyv', 'msl', 'd', 'ubl', 'sz', 'njv', 'pf', 's']\n    assert candidate(10, ['y', 'mz', 'lt', 'ur', 'o', 'm', 'djh', 'tb', 'w', 'j'], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0]) == ['y', 'lt', 'ur', 'o', 'djh', 'tb', 'w']\n    assert candidate(10, ['y', 's', 'i', 'v', 'a', 'w', 'l', 'q', 'k', 't'], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0]) == ['y', 's', 'a', 'w', 'k']\n    assert candidate(11, ['a', 'tea', 'ldt', 'ybm', 'zkw', 'r', 'd', 'dms', 'le', 'u', 'ze'], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1]) == ['a', 'ldt', 'r', 'u', 'ze']\n    assert candidate(11, ['c', 'o', 'e', 'r', 'x', 'w', 'b', 'd', 'h', 'y', 'z'], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1]) == ['c', 'o', 'e', 'r', 'x', 'w', 'b', 'y', 'z']\n    assert candidate(11, ['chu', 'a', 'qdx', 'fgd', 'qe', 'bqc', 'x', 'kbx', 'sv', 'ly', 'br'], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]) == ['chu', 'a', 'x', 'kbx', 'sv', 'br']\n    assert candidate(11, ['ec', 'jdf', 'b', 'wa', 'kjd', 'bb', 'ty', 'yi', 'ybw', 'ilj', 'cv'], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1]) == ['ec', 'jdf', 'b', 'wa', 'ilj', 'cv']\n    assert candidate(11, ['ew', 'isn', 'fl', 'mg', 'pdg', 'd', 'p', 'hh', 'e', 'y', 'whm'], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1]) == ['ew', 'fl', 'pdg', 'y']\n    assert candidate(11, ['h', 'o', 'd', 'y', 'r', 'c', 'p', 'b', 'g', 'j', 'k'], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0]) == ['h', 'd', 'y', 'c', 'p', 'g']\n    assert candidate(11, ['ipr', 'l', 'zy', 'j', 'h', 'hdt', 'm', 'd', 'pd', 'nv', 'wy'], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1]) == ['ipr', 'h', 'hdt', 'm', 'd']\n    assert candidate(11, ['j', 'g', 'go', 'a', 'f', 'bg', 'o', 'l', 'ze', 'kq', 'w'], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1]) == ['j', 'go', 'a', 'f', 'bg', 'ze', 'kq', 'w']\n    assert candidate(11, ['j', 'r', 'a', 'g', 'x', 'b', 'y', 'v', 'k', 'i', 'c'], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0]) == ['j', 'r', 'a', 'y', 'k']\n    assert candidate(11, ['kgo', 'han', 'nlu', 'tv', 'us', 'pk', 'xw', 'cxc', 'eml', 'v', 'msz'], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0]) == ['kgo', 'han', 'tv', 'us', 'xw', 'cxc', 'eml', 'msz']\n    assert candidate(11, ['kh', 'op', 'ij', 'te', 'hk', 'pmt', 'v', 'ne', 'en', 'b', 'zuj'], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1]) == ['kh', 'ij', 'pmt', 'v', 'en', 'b']\n    assert candidate(11, ['ms', 't', 'oz', 'x', 'pw', 'ik', 'd', 'gj', 'z', 'ps', 'i'], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1]) == ['ms', 'oz', 'x', 'pw', 'd', 'z', 'i']\n\ndef test_check():\n    check(getWordsInLongestSubsequence)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3151_minProcessingTime", "language": "py", "prompt": "from typing import List\n\ndef minProcessingTime(processorTime: List[int], tasks: List[int]) -> int:\n    \"\"\"You have n processors each having 4 cores and n * 4 tasks that need to be executed such that each core should perform only one task.\nGiven a 0-indexed integer array processorTime representing the time at which each processor becomes available for the first time and a 0-indexed integer array tasks representing the time it takes to execute each task, return the minimum time when all of the tasks have been executed by the processors.\nNote: Each core executes the task independently of the others.\nExample 1:\nInput: processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]\nOutput: 16\nExplanation:\nIt's optimal to assign the tasks at indexes 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indexes 0, 1, 2, 3 to the second processor which becomes available at time = 10.\nTime taken by the first processor to finish execution of all tasks = max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16.\nTime taken by the second processor to finish execution of all tasks = max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13.\nHence, it can be shown that the minimum time taken to execute all the tasks is 16.\nExample 2:\nInput: processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]\nOutput: 23\nExplanation:\nIt's optimal to assign the tasks at indexes 1, 4, 5, 6 to the first processor which becomes available at time = 10, and the tasks at indexes 0, 2, 3, 7 to the second processor which becomes available at time = 20.\nTime taken by the first processor to finish execution of all tasks = max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18.\nTime taken by the second processor to finish execution of all tasks = max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.\nHence, it can be shown that the minimum time taken to execute all the tasks is 23.\nConstraints:\n * 1 <= n == processorTime.length <= 25000\n * 1 <= tasks.length <= 105\n * 0 <= processorTime[i] <= 109\n * 1 <= tasks[i] <= 109\n * tasks.length == 4 * n\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3151_minProcessingTime.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([8, 10], [2, 2, 3, 1, 8, 7, 4, 5]) == 16\n    assert candidate([10, 20], [2, 3, 1, 2, 5, 8, 4, 3]) == 23\n    assert candidate([121, 99], [287, 315, 293, 260, 333, 362, 69, 233]) == 461\n    assert candidate([33, 320], [132, 68, 232, 166, 30, 300, 112, 138]) == 452\n    assert candidate([50, 82], [288, 138, 205, 295, 367, 100, 258, 308]) == 417\n    assert candidate([291], [125, 169, 269, 32]) == 560\n    assert candidate([55, 350, 166, 210, 389], [276, 253, 157, 237, 92, 396, 331, 19, 82, 301, 136, 396, 251, 92, 280, 70, 253, 47, 81, 84]) == 470\n    assert candidate([143, 228, 349, 231, 392], [102, 365, 363, 211, 38, 96, 98, 79, 365, 289, 252, 201, 259, 346, 21, 68, 128, 56, 167, 183]) == 517\n    assert candidate([168, 32, 299, 303, 96], [382, 183, 337, 73, 115, 350, 6, 18, 93, 238, 102, 302, 96, 381, 327, 385, 387, 288, 138, 83]) == 456\n    assert candidate([324, 117, 374, 219, 303], [374, 202, 328, 11, 353, 208, 383, 287, 107, 236, 226, 387, 21, 183, 352, 164, 207, 182, 15, 65]) == 571\n    assert candidate([376], [21, 247, 274, 38]) == 650\n    assert candidate([93, 3, 281, 218], [182, 16, 241, 312, 81, 339, 207, 330, 306, 166, 82, 290, 7, 317, 396, 389]) == 459\n    assert candidate([374, 250, 197, 170], [247, 56, 330, 361, 240, 261, 67, 65, 138, 181, 308, 26, 59, 150, 137, 244]) == 531\n    assert candidate([115, 271, 137], [34, 72, 328, 312, 159, 32, 283, 6, 234, 280, 46, 349]) == 464\n    assert candidate([47, 217, 349, 233, 283], [195, 188, 181, 259, 145, 96, 298, 322, 213, 154, 278, 292, 315, 191, 177, 228, 291, 204, 310, 266]) == 526\n    assert candidate([177, 6, 326, 318, 294], [136, 215, 260, 259, 35, 248, 340, 377, 144, 248, 83, 150, 63, 48, 269, 197, 317, 135, 36, 344]) == 542\n    assert candidate([266, 372], [260, 325, 159, 316, 296, 366, 335, 146]) == 668\n    assert candidate([63, 339], [79, 316, 98, 354, 220, 267, 333, 11]) == 559\n    assert candidate([149, 60, 172, 5, 212], [230, 374, 276, 281, 55, 96, 52, 83, 56, 399, 69, 333, 145, 6, 50, 101, 216, 327, 120, 209]) == 404\n    assert candidate([220, 375, 285, 267, 150], [53, 317, 367, 258, 337, 280, 232, 322, 153, 169, 121, 211, 171, 345, 76, 370, 265, 107, 45, 320]) == 542\n    assert candidate([373, 367, 267], [214, 221, 78, 330, 340, 309, 330, 338, 396, 337, 285, 207]) == 697\n    assert candidate([92, 20], [11, 354, 399, 11, 20, 9, 217, 372]) == 419\n    assert candidate([51], [349, 186, 191, 183]) == 400\n    assert candidate([362, 220, 10, 219], [160, 369, 385, 145, 122, 124, 147, 231, 162, 37, 293, 160, 68, 232, 232, 130]) == 486\n    assert candidate([210, 348, 3, 57, 174], [328, 296, 222, 161, 190, 381, 283, 137, 353, 227, 284, 134, 170, 13, 275, 113, 148, 198, 33, 260]) == 482\n    assert candidate([153], [342, 166, 234, 175]) == 495\n    assert candidate([23, 204, 114, 380, 3], [40, 105, 311, 221, 247, 34, 399, 190, 23, 289, 16, 129, 68, 12, 32, 364, 364, 111, 361, 49]) == 412\n    assert candidate([167, 110, 221, 19, 211], [140, 351, 307, 4, 262, 228, 161, 200, 108, 206, 280, 266, 240, 258, 396, 194, 333, 328, 121, 179]) == 425\n    assert candidate([179, 127, 280, 242], [244, 243, 92, 188, 134, 84, 22, 258, 100, 77, 237, 83, 41, 396, 218, 87]) == 523\n    assert candidate([45, 249, 396, 163], [131, 365, 52, 366, 229, 340, 242, 371, 20, 181, 103, 97, 141, 106, 46, 119]) == 493\n    assert candidate([205], [117, 63, 174, 87]) == 379\n    assert candidate([128, 101, 302, 53], [265, 96, 358, 287, 148, 117, 331, 47, 173, 347, 62, 145, 73, 47, 206, 29]) == 411\n    assert candidate([228], [321, 378, 268, 351]) == 606\n    assert candidate([136, 22, 229, 187], [246, 326, 188, 341, 375, 207, 334, 1, 189, 301, 62, 39, 44, 239, 346, 376]) == 470\n    assert candidate([47, 238, 274], [251, 312, 87, 111, 142, 62, 112, 325, 305, 164, 85, 338]) == 489\n    assert candidate([386, 121, 249], [5, 376, 53, 187, 287, 369, 400, 178, 293, 121, 164, 336]) == 550\n    assert candidate([82, 152], [82, 46, 149, 255, 225, 93, 227, 131]) == 337\n    assert candidate([394, 6], [231, 236, 288, 35, 247, 204, 141, 41]) == 598\n    assert candidate([389, 54], [353, 358, 211, 133, 225, 358, 19, 310]) == 614\n    assert candidate([106, 291, 291, 301], [192, 120, 93, 5, 293, 147, 299, 81, 334, 137, 259, 48, 296, 117, 379, 182]) == 584\n    assert candidate([320, 139], [210, 255, 304, 181, 216, 255, 375, 360]) == 575\n    assert candidate([306, 207, 295], [335, 188, 355, 209, 201, 113, 122, 206, 46, 355, 350, 38]) == 562\n    assert candidate([175, 111], [225, 110, 163, 100, 353, 77, 12, 124]) == 464\n    assert candidate([233, 201], [1, 389, 291, 333, 42, 399, 399, 300]) == 600\n    assert candidate([302, 5, 102, 195], [311, 144, 7, 277, 253, 96, 136, 251, 81, 195, 171, 140, 73, 2, 84, 42]) == 375\n    assert candidate([151, 185, 3, 137], [294, 230, 221, 216, 299, 24, 79, 194, 375, 387, 77, 388, 366, 51, 117, 126]) == 436\n    assert candidate([39, 141, 145, 199], [99, 257, 161, 121, 56, 80, 235, 168, 171, 228, 290, 180, 118, 307, 66, 151]) == 369\n    assert candidate([40, 67], [259, 217, 337, 295, 126, 335, 369, 123]) == 409\n    assert candidate([310, 56, 207, 396], [260, 255, 30, 243, 66, 11, 285, 31, 358, 219, 218, 90, 176, 346, 134, 74]) == 486\n    assert candidate([174, 48], [106, 323, 4, 247, 70, 281, 348, 12]) == 396\n    assert candidate([16, 52, 13], [281, 261, 55, 165, 317, 150, 68, 26, 52, 227, 176, 399]) == 412\n    assert candidate([8, 315, 115, 123], [134, 371, 160, 138, 289, 330, 48, 349, 376, 88, 46, 235, 298, 321, 343, 365]) == 458\n    assert candidate([221, 24, 372, 6, 50], [274, 79, 78, 37, 57, 39, 102, 272, 242, 283, 95, 155, 105, 363, 174, 1, 333, 400, 375, 376]) == 429\n    assert candidate([289, 98, 7, 303, 219], [363, 140, 173, 92, 52, 348, 350, 316, 281, 327, 40, 259, 39, 235, 263, 244, 42, 354, 11, 232]) == 478\n    assert candidate([348, 268], [104, 397, 333, 188, 373, 325, 57, 202]) == 665\n    assert candidate([18, 377, 305, 188, 311], [207, 365, 369, 66, 263, 47, 257, 317, 221, 292, 386, 308, 357, 105, 99, 314, 133, 106, 311, 90]) == 597\n    assert candidate([44, 254], [277, 361, 398, 276, 84, 105, 350, 134]) == 530\n    assert candidate([270, 257, 58], [212, 151, 50, 78, 91, 110, 399, 360, 108, 192, 142, 115]) == 457\n    assert candidate([108, 301], [150, 143, 119, 160, 340, 139, 72, 349]) == 457\n    assert candidate([231, 207, 162, 49], [318, 289, 351, 103, 19, 77, 65, 116, 94, 234, 139, 246, 80, 184, 286, 397]) == 448\n    assert candidate([252], [384, 281, 207, 33]) == 636\n    assert candidate([199, 8, 129, 204], [308, 133, 366, 272, 373, 343, 357, 159, 378, 149, 185, 248, 190, 1, 142, 199]) == 472\n    assert candidate([135, 65, 19, 225], [183, 135, 138, 142, 282, 141, 349, 236, 57, 333, 258, 353, 152, 396, 152, 191]) == 415\n    assert candidate([199, 371, 283, 70], [244, 7, 226, 230, 331, 232, 332, 288, 151, 360, 26, 87, 49, 188, 269, 375]) == 513\n    assert candidate([184, 378], [105, 239, 221, 343, 276, 359, 86, 84]) == 599\n    assert candidate([297, 229, 142, 8, 47], [373, 256, 210, 92, 304, 134, 20, 246, 116, 139, 376, 139, 10, 210, 192, 43, 282, 278, 322, 167]) == 389\n    assert candidate([224, 358, 58, 352], [177, 274, 306, 295, 142, 353, 44, 111, 325, 328, 394, 168, 300, 15, 252, 389]) == 626\n    assert candidate([318, 321, 264, 259], [316, 284, 127, 227, 269, 332, 317, 364, 220, 130, 330, 155, 45, 205, 369, 42]) == 628\n    assert candidate([295, 214, 130], [316, 395, 280, 122, 27, 224, 40, 210, 99, 366, 55, 183]) == 525\n    assert candidate([81, 38, 313, 121], [158, 304, 127, 214, 34, 298, 95, 188, 56, 391, 317, 99, 304, 101, 266, 302]) == 429\n    assert candidate([8, 400, 28, 348, 193], [72, 391, 149, 264, 370, 183, 365, 102, 201, 348, 341, 176, 338, 186, 97, 156, 47, 125, 61, 202]) == 504\n    assert candidate([0], [8, 369, 353, 14]) == 369\n    assert candidate([55, 364, 28, 246], [396, 357, 37, 400, 239, 327, 5, 387, 70, 389, 323, 213, 322, 111, 179, 19]) == 485\n    assert candidate([288, 219, 356, 146, 282], [390, 46, 24, 391, 222, 241, 281, 33, 400, 312, 290, 11, 147, 282, 204, 214, 22, 178, 77, 156]) == 546\n    assert candidate([60, 309, 40, 219, 294], [267, 94, 238, 338, 279, 48, 164, 371, 302, 110, 247, 392, 83, 107, 389, 46, 92, 273, 131, 136]) == 466\n    assert candidate([357], [211, 344, 270, 324]) == 701\n    assert candidate([220, 355, 190, 393], [158, 27, 113, 335, 382, 172, 285, 373, 104, 177, 247, 321, 197, 22, 347, 136]) == 572\n    assert candidate([67, 105, 290, 26, 343], [50, 118, 302, 74, 198, 56, 292, 46, 337, 27, 394, 69, 109, 287, 274, 283, 346, 132, 77, 352]) == 420\n    assert candidate([77, 143, 142, 23], [336, 190, 105, 87, 102, 254, 295, 243, 400, 254, 96, 303, 350, 191, 331, 70]) == 423\n    assert candidate([319, 58, 155, 360], [311, 257, 35, 330, 235, 159, 293, 204, 298, 240, 233, 250, 309, 242, 262, 324]) == 593\n    assert candidate([28, 225, 347], [176, 57, 60, 81, 161, 66, 13, 294, 145, 239, 295, 210]) == 413\n    assert candidate([291, 337], [210, 378, 169, 400, 182, 290, 386, 360]) == 691\n    assert candidate([141, 310], [396, 56, 241, 289, 21, 254, 196, 165]) == 537\n    assert candidate([204, 390, 104], [355, 4, 287, 161, 230, 242, 218, 12, 321, 28, 341, 326]) == 551\n    assert candidate([299, 258], [20, 44, 341, 172, 118, 185, 369, 249]) == 627\n    assert candidate([107, 141, 178, 211, 62], [215, 318, 196, 251, 71, 144, 10, 208, 113, 17, 13, 263, 367, 42, 85, 267, 212, 54, 36, 54]) == 429\n    assert candidate([101, 383, 326, 62], [304, 256, 281, 240, 180, 387, 318, 368, 331, 267, 14, 91, 93, 147, 156, 394]) == 582\n    assert candidate([221, 62, 187, 104, 266], [284, 378, 9, 288, 173, 327, 329, 202, 3, 383, 105, 213, 175, 201, 196, 305, 162, 161, 127, 347]) == 445\n    assert candidate([328, 162, 249, 357, 35], [77, 275, 231, 298, 273, 257, 88, 339, 261, 147, 229, 392, 156, 63, 90, 97, 219, 353, 66, 91]) == 480\n    assert candidate([7], [132, 278, 270, 176]) == 285\n    assert candidate([326], [269, 211, 137, 244]) == 595\n    assert candidate([310, 44], [109, 250, 222, 275, 268, 332, 146, 328]) == 560\n    assert candidate([184, 254, 121, 90, 389], [124, 365, 400, 167, 109, 207, 369, 37, 174, 287, 41, 114, 388, 158, 125, 283, 119, 254, 210, 399]) == 503\n    assert candidate([94, 171, 66], [261, 134, 26, 281, 29, 253, 84, 333, 90, 157, 382, 263]) == 448\n    assert candidate([5, 99, 318, 252, 151], [264, 235, 250, 347, 376, 57, 73, 7, 178, 45, 220, 148, 159, 379, 89, 73, 159, 172, 228, 39]) == 400\n    assert candidate([303, 52, 2, 118, 305], [398, 173, 5, 301, 169, 389, 126, 212, 384, 359, 222, 340, 267, 173, 264, 238, 141, 44, 144, 148]) == 476\n    assert candidate([177], [164, 277, 289, 197]) == 466\n    assert candidate([297, 259, 318, 30, 213], [162, 97, 265, 153, 216, 233, 286, 346, 389, 208, 55, 345, 308, 197, 266, 292, 369, 320, 1, 235]) == 533\n    assert candidate([290], [333, 282, 72, 362]) == 652\n    assert candidate([372, 189, 344], [191, 26, 247, 99, 395, 270, 192, 340, 60, 78, 260, 395]) == 604\n\ndef test_check():\n    check(minProcessingTime)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3153_maxSum", "language": "py", "prompt": "from typing import List\n\ndef maxSum(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and a positive integer k.\nYou can do the following operation on the array any number of times:\n * Choose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation.\nYou have to choose k elements from the final array and calculate the sum of their squares.\nReturn the maximum sum of squares you can achieve.\nSince the answer can be very large, return it modulo 109 + 7.\nExample 1:\nInput: nums = [2,6,5,8], k = 2\nOutput: 261\nExplanation: We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.\nIt can be shown that this is the maximum value we can get.\nExample 2:\nInput: nums = [4,5,4,7], k = 3\nOutput: 90\nExplanation: We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.\nIt can be shown that this is the maximum value we can get.\nConstraints:\n * 1 <= k <= nums.length <= 105\n * 1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3153_maxSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 6, 5, 8], 2) == 261\n    assert candidate([4, 5, 4, 7], 3) == 90\n    assert candidate([32, 85, 61], 1) == 15625\n    assert candidate([123], 1) == 15129\n    assert candidate([96, 66, 60, 58, 32, 17, 63, 21, 30, 44, 15, 8, 98, 93], 2) == 32258\n    assert candidate([30, 8, 63, 69, 52, 94, 41, 28, 94, 86, 28, 13, 68, 38, 53, 11, 21, 33], 2) == 32258\n    assert candidate([2, 38, 15, 2, 73, 100, 47, 14, 25, 58, 40, 64, 23, 9, 53, 38, 91, 75, 9, 2], 3) == 48387\n    assert candidate([25, 52, 75, 65], 4) == 24051\n    assert candidate([96, 36, 72, 61, 13, 25, 5, 33, 9, 51, 9, 78, 40], 13) == 53776\n    assert candidate([38, 21, 15, 84, 65, 35, 57, 82, 94, 26, 27, 89, 73, 22, 25, 6, 97, 17], 4) == 64516\n    assert candidate([18, 72, 52, 56, 7, 21, 55, 68, 98, 31, 35, 49, 100, 49, 64, 20], 4) == 62548\n    assert candidate([2, 73, 75], 3) == 11250\n    assert candidate([73, 37, 41, 84], 2) == 27506\n    assert candidate([62, 83, 11, 3, 53], 3) == 20459\n    assert candidate([53, 59, 71, 38, 5, 15, 98, 86, 9, 8, 35, 54, 65, 77, 3, 68, 11, 5, 41, 18], 9) == 95273\n    assert candidate([53, 67, 91, 79, 21, 27, 63, 34, 60, 94, 51], 4) == 64516\n    assert candidate([41, 15, 6, 31, 40, 97, 11, 45, 81, 91, 91, 62], 3) == 48387\n    assert candidate([10, 9], 2) == 185\n    assert candidate([9, 6, 8, 32, 92, 12, 47, 45, 62, 96, 5, 66, 82, 90, 34, 39, 49, 86, 16], 13) == 102770\n    assert candidate([1, 19, 29, 30, 68, 13, 80, 16, 71, 32, 8, 76, 41, 24, 16, 2, 30], 14) == 53470\n    assert candidate([22, 64, 30, 71, 28, 69, 86, 12, 26, 39, 69, 92], 2) == 25154\n    assert candidate([91, 26, 29, 38, 97, 40, 1, 18, 15, 3, 43, 37, 9, 55, 4, 46], 2) == 32258\n    assert candidate([27, 73], 1) == 8281\n    assert candidate([12, 33, 29, 75, 94, 48, 25, 21], 8) == 34565\n    assert candidate([39, 91, 84, 10, 65, 28, 94, 28, 62, 77, 78, 50, 93, 65, 21, 16, 5, 35, 81], 14) == 110106\n    assert candidate([14, 45, 76, 33, 35, 53, 67, 19, 6, 31, 33], 10) == 40008\n    assert candidate([59, 88, 2, 47, 75], 2) == 31258\n    assert candidate([96, 77, 77, 33, 5, 86, 90, 21, 84, 73, 86, 45, 88, 35, 93, 14, 63, 25], 17) == 121571\n    assert candidate([35, 5, 21, 65, 34, 90, 60, 8, 34, 35, 28, 78, 77], 1) == 16129\n    assert candidate([14, 10, 19], 2) == 1061\n    assert candidate([100, 4, 88, 29, 13, 78, 89, 11, 62, 63, 66, 46, 99, 87, 41, 29, 36, 71, 57], 18) == 129739\n    assert candidate([86, 52, 100, 68, 30, 40, 49, 28, 61, 30, 3, 80], 11) == 69063\n    assert candidate([29, 30, 61, 12, 98, 95], 2) == 32258\n    assert candidate([23, 13, 35, 41, 29, 57, 84, 67, 70, 96, 55, 85, 15, 72, 23, 52, 1, 11, 62, 1], 1) == 16129\n    assert candidate([34, 60, 85, 22, 83], 2) == 30290\n    assert candidate([65, 26, 44, 70, 79, 65, 46, 18], 8) == 44587\n    assert candidate([99, 50, 13, 62, 12, 60, 6, 29], 6) == 28071\n    assert candidate([73, 66, 75, 44], 3) == 23130\n    assert candidate([43, 85, 7, 66, 16, 96], 1) == 16129\n    assert candidate([45, 5, 3, 84, 81, 54, 21, 37, 99, 60], 2) == 32258\n    assert candidate([97, 6, 44, 57, 63, 5], 1) == 16129\n    assert candidate([65, 43, 82, 46, 34, 42, 65, 67, 8, 67, 3, 83, 87, 71, 98, 31, 15, 22], 5) == 80645\n    assert candidate([79, 33, 75, 32, 64, 68, 30, 46, 60, 50, 6, 54, 18, 34, 43, 11, 84, 78, 54, 4], 1) == 16129\n    assert candidate([17, 9, 3, 23, 33, 99, 94, 15, 93, 17, 39, 55, 13, 26, 22, 44, 13], 3) == 48387\n    assert candidate([83, 29, 2, 67, 79, 88, 71, 98, 70], 4) == 39220\n    assert candidate([60, 81, 60, 88, 37, 38, 10, 42, 84, 70], 10) == 67626\n    assert candidate([33, 51, 100, 33, 46], 3) == 18739\n    assert candidate([29, 4, 67, 44, 74, 62, 41, 86, 91, 11, 26, 58, 59, 48, 46, 41, 26, 68, 4, 81], 4) == 64516\n    assert candidate([86, 54, 20, 57, 87, 63, 2, 24, 73, 87, 7, 16, 50, 1, 58], 7) == 69543\n    assert candidate([91, 2, 16, 77, 2], 1) == 9025\n    assert candidate([19, 94], 2) == 9349\n    assert candidate([14, 67, 79, 58], 2) == 22370\n    assert candidate([44, 17, 10, 19, 3, 97, 45, 65, 98, 7, 73, 30, 76, 5, 52, 33, 62], 4) == 64516\n    assert candidate([8, 80, 93], 1) == 8649\n    assert candidate([51, 79, 26, 30, 41, 74, 6, 11, 10, 66, 61, 25, 41, 32, 83, 52, 71, 70], 18) == 98085\n    assert candidate([15, 58, 38, 69, 71, 43], 1) == 16129\n    assert candidate([13, 57, 34, 69, 80, 98, 63, 22, 29, 38, 70, 94, 79, 95, 13, 76, 39, 22], 5) == 80645\n    assert candidate([98, 88, 17, 85, 57, 97, 42, 15, 25, 71, 31, 72, 76, 89, 28, 47, 73, 85], 9) == 114889\n    assert candidate([95, 28, 26, 65, 87, 4, 14, 25, 47, 97, 67, 48, 29, 14, 96, 76, 77, 25], 9) == 100409\n    assert candidate([37, 16, 76, 9, 88, 44, 71, 61, 95, 32, 63, 10, 29, 33], 11) == 72360\n    assert candidate([54, 96, 73, 18, 15, 35, 79, 96, 2, 12, 50, 75, 7, 93, 66, 35, 40, 16], 18) == 104436\n    assert candidate([66, 84, 85, 7, 45, 34, 61, 91, 83, 13, 87, 89, 51, 52, 65], 6) == 88214\n    assert candidate([76, 22, 86, 88, 58, 10, 61, 21, 42], 2) == 32258\n    assert candidate([16, 52, 8, 99, 68, 73], 2) == 31754\n    assert candidate([46, 91, 73, 38, 36, 79, 24, 78, 24, 42], 8) == 60911\n    assert candidate([5, 100, 85, 52, 5, 28, 79, 30, 9, 67, 87, 50, 17, 29, 99, 57], 14) == 91019\n    assert candidate([52, 57, 77, 95, 79, 28, 9, 94, 70, 8, 89, 75, 27, 53, 41, 88, 68, 8, 10, 59], 5) == 80645\n    assert candidate([66, 64, 52, 90, 73, 84, 2], 6) == 39881\n    assert candidate([97, 100], 1) == 10201\n    assert candidate([27, 85, 57, 44, 16, 55, 77, 77, 24, 62, 72], 10) == 66334\n    assert candidate([15, 6, 18, 22, 72, 63, 38, 72, 4, 84, 9, 19, 70, 76, 72, 98, 35, 51, 11, 9], 20) == 96344\n    assert candidate([10, 67, 54, 100, 6, 93, 91, 4, 59], 3) == 48387\n    assert candidate([90, 48, 91, 62, 39, 94, 75, 8, 21, 72, 9, 55, 16, 30, 27, 73, 81, 39, 97], 8) == 114080\n    assert candidate([43, 58, 51, 40, 39, 92, 36, 57], 4) == 27548\n    assert candidate([85, 51, 49, 13, 7, 66, 21, 59, 100, 14, 5, 66], 8) == 63152\n    assert candidate([54, 52, 36, 17, 34, 100, 81, 82, 16, 46, 26, 73, 77, 55, 43, 53], 14) == 91703\n    assert candidate([97, 1, 30, 41, 82, 77, 99, 56, 21, 68, 14, 39, 15, 26, 72], 1) == 16129\n    assert candidate([17, 10, 28, 78, 68, 68, 29, 44], 5) == 33906\n    assert candidate([59, 30, 26, 58, 87, 1, 6, 98, 29, 50, 57, 64, 64], 10) == 69321\n    assert candidate([77, 23, 43, 94, 74, 41, 26, 39, 83, 57, 85, 49, 83, 34, 63, 37, 42, 55, 20, 18], 3) == 48387\n    assert candidate([54, 19, 69, 95, 26, 59, 68, 90, 77, 62, 67, 54, 42, 25, 50, 23, 30, 53, 29, 78], 12) == 117170\n    assert candidate([54, 17, 16, 30, 35, 63, 34, 38, 26, 41, 33], 9) == 22133\n    assert candidate([17, 24, 8, 57, 68, 54, 64, 53], 6) == 35987\n    assert candidate([11, 90, 27, 72, 22, 24, 54, 64, 68, 94, 1, 20, 45, 5, 63], 10) == 69082\n    assert candidate([92, 84, 89, 72, 80, 1, 8], 3) == 25042\n    assert candidate([29, 14, 37, 61, 7, 10, 53, 95, 47, 81, 1, 59, 18, 25, 3, 53, 43, 64, 33], 5) == 56325\n    assert candidate([44, 94, 83, 38, 63, 16, 45, 90, 74, 20], 1) == 16129\n    assert candidate([13, 65], 2) == 5930\n    assert candidate([16, 9, 2, 66], 2) == 8285\n    assert candidate([30, 68, 85, 13, 49, 96, 59, 61, 39], 7) == 54942\n    assert candidate([29, 47, 38, 4], 2) == 6178\n    assert candidate([49, 30], 2) == 4225\n    assert candidate([64, 71, 33, 46, 77, 45, 33, 55, 84, 30, 1, 40, 2, 92, 54, 88], 8) == 98815\n    assert candidate([55, 72, 75], 1) == 16129\n    assert candidate([3, 34, 63, 27, 49, 28, 86], 3) == 24067\n    assert candidate([99, 29, 94, 21, 54, 43, 20, 79, 27, 40, 90, 76, 55, 27, 40, 46, 76, 70, 34], 13) == 118264\n    assert candidate([64, 11, 2, 12, 11, 82, 10, 42, 63, 98, 99, 13], 1) == 16129\n    assert candidate([23, 25, 45, 88, 88, 93, 91, 25, 34, 83, 9, 85, 18], 8) == 67760\n    assert candidate([84, 95, 7, 53, 19, 46, 41, 48, 48, 38], 7) == 44981\n    assert candidate([92, 88, 27, 34], 4) == 24805\n\ndef test_check():\n    check(maxSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3154_maximumTripletValue", "language": "py", "prompt": "from typing import List\n\ndef maximumTripletValue(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums.\nReturn the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.\nThe value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].\nExample 1:\nInput: nums = [12,6,1,2,7]\nOutput: 77\nExplanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77.\nExample 2:\nInput: nums = [1,10,3,4,19]\nOutput: 133\nExplanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133.\nExample 3:\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.\nConstraints:\n * 3 <= nums.length <= 100\n * 1 <= nums[i] <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3154_maximumTripletValue.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([12, 6, 1, 2, 7]) == 77\n    assert candidate([1, 10, 3, 4, 19]) == 133\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([2, 3, 1]) == 0\n    assert candidate([5, 7, 8, 4]) == 0\n    assert candidate([1000000, 1, 1000000]) == 999999000000\n    assert candidate([18, 15, 8, 13, 10, 9, 17, 10, 2, 16, 17]) == 272\n    assert candidate([8, 6, 3, 13, 2, 12, 19, 5, 19, 6, 10, 11, 9]) == 266\n    assert candidate([6, 11, 12, 12, 7, 9, 2, 11, 12, 4, 19, 14, 16, 8, 16]) == 190\n    assert candidate([15, 14, 17, 13, 18, 17, 10, 19, 2, 20, 12, 9]) == 340\n    assert candidate([6, 14, 20, 19, 19, 10, 3, 15, 12, 13, 8, 1, 2, 15, 3]) == 285\n    assert candidate([2, 7, 19, 4, 8, 20]) == 300\n    assert candidate([10, 13, 6, 2]) == 14\n    assert candidate([1, 19, 1, 3, 18, 10, 16, 9, 3, 17, 8, 9]) == 324\n    assert candidate([16, 2, 10, 20, 16, 2, 13, 8, 19]) == 342\n    assert candidate([19, 11, 12, 4, 17, 1, 7, 20, 13, 10, 14, 20, 11, 19, 3]) == 360\n    assert candidate([16, 15, 12, 5, 4, 12, 15, 17, 5, 18, 6, 16, 1, 17, 4]) == 289\n    assert candidate([8, 10, 17, 11, 2, 8, 13]) == 195\n    assert candidate([13, 4, 3, 19, 16, 14, 17, 6, 20, 6, 16, 4]) == 260\n    assert candidate([1, 8, 9, 18, 4, 10, 3, 13, 9]) == 195\n    assert candidate([10, 10, 5, 19, 2]) == 95\n    assert candidate([15, 3, 3, 18, 19, 13, 7, 5, 18, 1, 8, 5]) == 252\n    assert candidate([10, 20, 10]) == 0\n    assert candidate([14, 9, 4, 20, 9]) == 200\n    assert candidate([12, 20, 5, 2, 13, 17, 16, 1, 5, 8, 18, 15, 12]) == 342\n    assert candidate([7, 1, 17, 17, 4, 20, 14, 20]) == 260\n    assert candidate([16, 19, 8, 8, 5, 18, 12, 16, 8, 14, 14, 7, 19]) == 266\n    assert candidate([17, 9, 13, 7, 3, 5]) == 104\n    assert candidate([15, 12, 2, 14, 15, 18, 15, 20, 14, 5, 14, 14, 11, 13, 7]) == 260\n    assert candidate([17, 20, 17, 13, 5, 12, 8, 12, 14, 10, 14, 20]) == 300\n    assert candidate([1, 19, 10]) == 0\n    assert candidate([11, 16, 10, 15, 10, 5, 7, 3]) == 90\n    assert candidate([5, 14, 19, 12, 2, 5, 18, 3, 20, 12, 1, 11]) == 340\n    assert candidate([10, 8, 12, 14]) == 28\n    assert candidate([2, 17, 18, 16, 14, 20, 11, 3, 18, 5, 20, 6, 7]) == 340\n    assert candidate([19, 12, 3, 19, 2, 18, 3, 12, 9]) == 306\n    assert candidate([12, 9, 11, 2, 11, 3, 11, 17, 13, 19]) == 190\n    assert candidate([8, 13, 9, 8, 7, 18, 20]) == 120\n    assert candidate([20, 8, 12, 1, 7, 8, 3, 3, 6]) == 152\n    assert candidate([8, 2, 16, 6, 14, 14, 13, 2, 11, 5, 2, 12, 15, 3, 3]) == 210\n    assert candidate([19, 9, 9, 9, 5]) == 90\n    assert candidate([19, 10, 5, 13, 6, 9, 5, 15, 19]) == 266\n    assert candidate([14, 18, 17, 8, 2, 8, 14]) == 224\n    assert candidate([11, 5, 17, 13, 5, 8, 8, 19, 17, 1]) == 228\n    assert candidate([18, 12, 18, 14, 17, 19]) == 114\n    assert candidate([18, 17, 8, 8, 18, 9]) == 180\n    assert candidate([15, 3, 2, 10, 11, 10, 13, 18]) == 234\n    assert candidate([17, 17, 5, 10, 19, 1, 16, 3, 1, 19]) == 342\n    assert candidate([1, 18, 4, 20, 16]) == 280\n    assert candidate([6, 20, 4, 4, 2, 19, 14, 10, 9, 7, 20, 5, 8]) == 360\n    assert candidate([5, 14, 15, 18, 2, 9, 15, 13, 11, 16, 12, 20]) == 320\n    assert candidate([7, 19, 17]) == 0\n    assert candidate([5, 7, 14, 18, 13, 11, 15, 20, 8, 11, 12, 4, 17, 2, 16]) == 288\n    assert candidate([4, 12, 7, 2, 8, 6, 9, 5, 4, 1, 8]) == 90\n    assert candidate([11, 17, 2, 18, 5]) == 270\n    assert candidate([19, 13, 2, 2, 19]) == 323\n    assert candidate([14, 11, 7, 6, 2, 20, 16, 14, 4, 12, 1, 9, 16, 7, 10]) == 304\n    assert candidate([8, 15, 6, 16, 16, 9, 6, 14, 4]) == 144\n    assert candidate([16, 19, 1, 7, 18, 6, 18, 5, 19, 18, 19]) == 342\n    assert candidate([16, 14, 11, 2, 17, 9, 10]) == 238\n    assert candidate([3, 4, 18, 2, 20, 1, 1, 16, 15, 8, 7, 14, 19, 6]) == 361\n    assert candidate([12, 20, 14, 18, 11, 16, 16, 9, 12, 5, 14, 17]) == 255\n    assert candidate([12, 19, 2, 9, 6]) == 153\n    assert candidate([17, 19, 14, 7, 10, 18]) == 216\n    assert candidate([3, 4, 19, 10, 16, 13, 6, 20]) == 260\n    assert candidate([11, 6, 8, 9]) == 45\n    assert candidate([7, 12, 9, 19, 10, 18, 16, 2, 1, 3, 7, 9, 7, 7]) == 162\n    assert candidate([20, 9, 20, 7, 3, 7, 19]) == 323\n    assert candidate([10, 11, 3, 3, 3, 2, 9, 8]) == 81\n    assert candidate([4, 20, 15, 1, 17, 2, 2, 4, 10, 15, 2, 8, 16, 6]) == 323\n    assert candidate([15, 10, 1, 18, 18, 16, 7, 13, 9, 11]) == 252\n    assert candidate([10, 6, 17, 11, 15, 15, 18]) == 108\n    assert candidate([3, 6, 18]) == 0\n    assert candidate([4, 7, 20]) == 0\n    assert candidate([16, 12, 5]) == 20\n    assert candidate([4, 17, 15, 12, 2, 16, 16, 13, 6, 20, 14, 17, 18, 16]) == 300\n    assert candidate([1, 7, 18, 3, 1, 11, 7, 17]) == 289\n    assert candidate([18, 16, 10, 2]) == 20\n    assert candidate([3, 10, 18, 10, 7, 8]) == 88\n    assert candidate([8, 6, 20, 20, 4, 12, 14, 7, 13, 16, 12, 15, 12]) == 256\n    assert candidate([5, 19, 11, 18, 19, 14, 8, 11, 4, 10]) == 152\n    assert candidate([17, 1, 16]) == 256\n    assert candidate([20, 8, 17, 14, 15, 2, 7, 9, 1, 10, 10, 4, 19, 2, 1]) == 361\n    assert candidate([9, 16, 16]) == 0\n    assert candidate([2, 16, 2, 19, 5, 20, 2, 20, 6, 6]) == 360\n    assert candidate([18, 3, 6, 17, 4, 20, 14, 6, 13, 9, 5, 11]) == 300\n    assert candidate([12, 2, 19, 15, 4, 3, 18, 6, 11, 9, 9, 6, 15]) == 288\n    assert candidate([10, 15, 10, 13, 7, 18, 18, 3, 13, 15, 20, 4, 6, 15]) == 300\n    assert candidate([10, 15, 4, 19, 6, 17, 7, 10, 4, 12, 14, 16, 9, 14]) == 240\n    assert candidate([17, 6, 3, 8, 13]) == 182\n    assert candidate([6, 18, 8, 8, 16, 14, 7, 18]) == 198\n    assert candidate([7, 7, 2, 19, 16, 11, 3, 15, 3, 15, 16, 17]) == 272\n    assert candidate([9, 3, 3, 12, 9, 12, 5, 7, 6, 2, 9, 9, 14, 9, 5]) == 140\n    assert candidate([19, 14, 15, 1, 20, 10, 20, 4, 10, 20, 15, 15, 2, 7]) == 360\n    assert candidate([17, 4, 10, 16, 8, 20, 4, 9, 11, 15, 2, 7]) == 260\n    assert candidate([3, 8, 17, 10, 10, 20, 20, 8, 14, 20, 1, 10, 1]) == 240\n    assert candidate([3, 4, 11, 18, 10, 19, 9, 11, 14, 11, 18, 15, 17, 19, 3]) == 190\n    assert candidate([18, 10, 5, 16, 13, 1, 19, 10, 17, 14, 14, 20]) == 340\n    assert candidate([18, 3, 16, 14, 15, 9, 13, 2, 3]) == 240\n    assert candidate([2, 6, 19, 10, 19, 14, 18, 8, 3, 2]) == 171\n\ndef test_check():\n    check(maximumTripletValue)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3163_sumCounts", "language": "py", "prompt": "from typing import List\n\ndef sumCounts(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums.\nThe distinct count of a subarray of nums is defined as:\n * Let nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j].\nReturn the sum of the squares of distinct counts of all subarrays of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [1,2,1]\nOutput: 15\nExplanation: Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\nExample 2:\nInput: nums = [1,1]\nOutput: 3\nExplanation: Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\nConstraints:\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3163_sumCounts.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 1]) == 15\n    assert candidate([1, 1]) == 3\n    assert candidate([2, 2, 5, 5]) == 22\n    assert candidate([5, 2, 4, 2, 1, 3, 2, 4, 3, 1]) == 578\n    assert candidate([2, 3, 2, 1, 2, 5, 3, 4, 5, 2]) == 629\n    assert candidate([5, 1, 5, 2, 3, 5, 1, 5, 1]) == 385\n    assert candidate([4, 5, 4, 3, 4, 2]) == 120\n    assert candidate([2]) == 1\n    assert candidate([3, 4, 2, 5, 2, 4, 1, 2, 2, 5]) == 535\n    assert candidate([4, 4, 2, 4, 1]) == 57\n    assert candidate([2, 2, 5]) == 12\n    assert candidate([4, 5, 1, 2, 2, 1, 3, 3]) == 266\n    assert candidate([3, 1, 5, 5, 2, 3, 2, 2, 1]) == 334\n    assert candidate([2, 5, 2, 5, 3, 2, 5, 2]) == 205\n    assert candidate([5, 4, 1, 4, 5, 2, 4]) == 203\n    assert candidate([1, 3, 3, 4, 3, 1, 2, 1]) == 253\n    assert candidate([4]) == 1\n    assert candidate([1, 4, 2, 1, 5, 4, 3, 1, 4]) == 507\n    assert candidate([2, 4, 5, 3, 2, 5, 1, 5, 4, 4]) == 626\n    assert candidate([3, 4, 1, 4, 5, 2, 2]) == 220\n    assert candidate([3, 5, 1, 1, 3]) == 62\n    assert candidate([4, 3, 2, 5, 3]) == 89\n    assert candidate([2, 5]) == 6\n    assert candidate([1, 5, 1, 4, 5]) == 70\n    assert candidate([5, 1]) == 6\n    assert candidate([4, 5, 4, 3, 3, 5, 3]) == 138\n    assert candidate([5, 4, 3]) == 20\n    assert candidate([5, 5, 3, 3, 4, 5, 4, 5, 5]) == 234\n    assert candidate([3, 1, 5, 5, 3, 4, 5, 5, 1, 4]) == 456\n    assert candidate([4, 2, 3, 1, 1]) == 81\n    assert candidate([4, 5, 3, 1, 2, 5, 5, 3, 5]) == 434\n    assert candidate([3, 2, 1, 2, 5, 2, 4, 5, 1, 5]) == 531\n    assert candidate([1, 3, 1, 4, 4]) == 62\n    assert candidate([5, 1, 2, 1, 2, 1, 2, 3, 1]) == 257\n    assert candidate([2, 4]) == 6\n    assert candidate([4, 5, 4, 5]) == 28\n    assert candidate([3, 1, 5, 5, 5, 4, 3, 3, 2]) == 334\n    assert candidate([3, 2, 5, 2, 1, 5, 3]) == 203\n    assert candidate([4, 4, 2, 5, 5, 4, 2, 2, 1]) == 294\n    assert candidate([1]) == 1\n    assert candidate([1, 1, 3, 3, 3, 4, 4]) == 96\n    assert candidate([3, 2, 2, 3, 4]) == 57\n    assert candidate([1, 5, 3, 2, 4, 4]) == 161\n    assert candidate([5, 4, 1, 1, 3]) == 69\n    assert candidate([4, 3, 3, 5, 3, 4, 5, 3, 3, 1]) == 376\n    assert candidate([2, 3, 4, 1, 5, 1, 3, 3, 4]) == 432\n    assert candidate([5, 1, 4, 2, 1, 1]) == 129\n    assert candidate([5, 4, 4, 1]) == 30\n    assert candidate([1, 5, 1, 3, 2, 1]) == 139\n    assert candidate([5, 3]) == 6\n    assert candidate([4, 1, 4, 3]) == 38\n    assert candidate([1, 5, 4, 3, 4, 2, 4, 5, 5, 4]) == 513\n    assert candidate([4, 2, 3, 4, 3, 2, 5, 4, 4]) == 378\n    assert candidate([2, 3, 3, 2, 1, 5, 2, 2]) == 262\n    assert candidate([2, 1, 4, 2, 4, 1, 4, 3]) == 243\n    assert candidate([1, 4, 4, 1, 3]) == 57\n    assert candidate([2, 3, 2, 1]) == 38\n    assert candidate([1, 4, 2, 1]) == 43\n    assert candidate([2, 4, 3, 2, 5, 1]) == 169\n    assert candidate([2, 5, 3, 2, 1, 3, 1, 3, 2]) == 348\n    assert candidate([4, 1]) == 6\n    assert candidate([4, 3, 1, 4, 3, 4, 3, 4, 1]) == 263\n    assert candidate([5, 1, 1, 1, 4, 3]) == 89\n    assert candidate([4, 5]) == 6\n    assert candidate([5, 2, 2, 3, 1, 2, 5, 3]) == 289\n    assert candidate([3, 2, 4]) == 20\n    assert candidate([5, 3, 5, 2, 3, 2]) == 106\n    assert candidate([3, 2, 1]) == 20\n    assert candidate([4, 4, 2, 4, 3]) == 57\n    assert candidate([1, 4, 4]) == 12\n    assert candidate([1, 4, 4, 3, 1, 2, 1, 4, 3]) == 387\n    assert candidate([1, 5, 4, 2, 5, 5, 5, 3]) == 249\n    assert candidate([2, 1, 5, 3]) == 50\n    assert candidate([2, 3, 5, 1, 5, 2, 3, 2, 3, 4]) == 533\n    assert candidate([5, 3, 4, 4, 3, 5, 4, 5]) == 202\n    assert candidate([4, 4, 2, 2, 4, 1]) == 80\n    assert candidate([2, 3]) == 6\n    assert candidate([4, 2, 3, 2]) == 38\n    assert candidate([1, 2, 2]) == 12\n    assert candidate([4, 1, 5, 1, 5, 4, 5, 1]) == 205\n    assert candidate([4, 5, 3, 1]) == 50\n    assert candidate([4, 2, 3, 4, 2, 4, 3, 3, 2]) == 275\n    assert candidate([4, 3]) == 6\n    assert candidate([1, 3, 5, 4, 4, 4]) == 113\n    assert candidate([1, 2, 4, 2, 1, 2, 2, 4, 1, 3]) == 391\n    assert candidate([4, 2, 5, 3, 2]) == 89\n    assert candidate([3, 4, 5, 3, 2, 5]) == 144\n    assert candidate([5, 4, 5]) == 15\n    assert candidate([2, 4, 5, 1]) == 50\n    assert candidate([5, 4, 1, 4, 2, 1, 5]) == 203\n    assert candidate([2, 3, 3, 2, 2, 3, 1]) == 110\n    assert candidate([1, 4, 2, 5]) == 50\n    assert candidate([3]) == 1\n    assert candidate([5]) == 1\n    assert candidate([1, 3, 5, 3, 2, 1, 1, 4, 3]) == 441\n    assert candidate([1, 5, 2, 2, 3, 3, 3]) == 140\n    assert candidate([1, 2, 1, 4, 5, 5, 4, 1, 1, 1]) == 407\n    assert candidate([2, 2, 1, 1, 1, 2, 5, 4, 5]) == 296\n    assert candidate([3, 2, 3]) == 15\n    assert candidate([2, 1, 5, 4, 3, 3, 2, 1, 5, 5]) == 652\n\ndef test_check():\n    check(sumCounts)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3164_lastVisitedIntegers", "language": "py", "prompt": "from typing import List\n\ndef lastVisitedIntegers(words: List[str]) -> List[int]:\n    \"\"\"Given a 0-indexed array of strings words where words[i] is either a positive integer represented as a string or the string \"prev\".\nStart iterating from the beginning of the array; for every \"prev\" string seen in words, find the last visited integer in words which is defined as follows:\n * Let k be the number of consecutive \"prev\" strings seen so far (containing the current string). Let nums be the 0-indexed array of integers seen so far and nums_reverse be the reverse of nums, then the integer at (k - 1)th index of nums_reverse will be the last visited integer for this \"prev\".\n * If k is greater than the total visited integers, then the last visited integer will be -1.\nReturn an integer array containing the last visited integers.\nExample 1:\nInput: words = [\"1\",\"2\",\"prev\",\"prev\",\"prev\"]\nOutput: [2,1,-1]\nExplanation:\nFor \"prev\" at index = 2, last visited integer will be 2 as here the number of consecutive \"prev\" strings is 1, and in the array reverse_nums, 2 will be the first element.\nFor \"prev\" at index = 3, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\nFor \"prev\" at index = 4, last visited integer will be -1 as there are a total of three consecutive \"prev\" strings including this \"prev\" which are visited, but the total number of integers visited is two.\nExample 2:\nInput: words = [\"1\",\"prev\",\"2\",\"prev\",\"prev\"]\nOutput: [1,2,1]\nExplanation:\nFor \"prev\" at index = 1, last visited integer will be 1.\nFor \"prev\" at index = 3, last visited integer will be 2.\nFor \"prev\" at index = 4, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\nConstraints:\n * 1 <= words.length <= 100\n * words[i] == \"prev\" or 1 <= int(words[i]) <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3164_lastVisitedIntegers.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(['1', '2', 'prev', 'prev', 'prev']) == [2, 1, -1]\n    assert candidate(['1', 'prev', '2', 'prev', 'prev']) == [1, 2, 1]\n    assert candidate(['prev', 'prev', 'prev', '27']) == [-1, -1, -1]\n    assert candidate(['17', '42']) == []\n    assert candidate(['prev']) == [-1]\n    assert candidate(['prev', 'prev', 'prev', '52', 'prev']) == [-1, -1, -1, 52]\n    assert candidate(['prev', 'prev', '68', 'prev', 'prev', '53', '40', '23', 'prev']) == [-1, -1, 68, -1, 23]\n    assert candidate(['99', '23', 'prev']) == [23]\n    assert candidate(['prev', 'prev', 'prev', '58', '99', 'prev', '10', 'prev']) == [-1, -1, -1, 99, 10]\n    assert candidate(['prev', '51', 'prev', 'prev']) == [-1, 51, -1]\n    assert candidate(['prev', '46', '9', 'prev']) == [-1, 9]\n    assert candidate(['prev', 'prev', 'prev', 'prev', 'prev', '26']) == [-1, -1, -1, -1, -1]\n    assert candidate(['prev', '21', 'prev', '76', '82', 'prev', '96', 'prev', '57', 'prev']) == [-1, 21, 82, 96, 57]\n    assert candidate(['52', '4', 'prev', 'prev', 'prev', '69']) == [4, 52, -1]\n    assert candidate(['24', 'prev']) == [24]\n    assert candidate(['46', 'prev', '78', 'prev', '83', '21', 'prev', '94', '50']) == [46, 78, 21]\n    assert candidate(['14', '66', 'prev', 'prev', '46', 'prev']) == [66, 14, 46]\n    assert candidate(['35', '90']) == []\n    assert candidate(['prev', '9', 'prev', '8', 'prev']) == [-1, 9, 8]\n    assert candidate(['prev', 'prev', '88', '71', '47', '65', '24', '39']) == [-1, -1]\n    assert candidate(['45', '73', '78', '2', '54', 'prev', '85', '62', 'prev']) == [54, 62]\n    assert candidate(['prev', 'prev', '80', '9', 'prev']) == [-1, -1, 9]\n    assert candidate(['79', '19', 'prev', 'prev', 'prev', '67', 'prev', '16', '2']) == [19, 79, -1, 67]\n    assert candidate(['94', 'prev', 'prev', 'prev', 'prev', 'prev', 'prev']) == [94, -1, -1, -1, -1, -1]\n    assert candidate(['prev', 'prev', 'prev', '82', 'prev']) == [-1, -1, -1, 82]\n    assert candidate(['94', '14', '81', '43', 'prev', '43', 'prev']) == [43, 43]\n    assert candidate(['prev', 'prev', '94', '56', 'prev', '32', 'prev', 'prev', 'prev']) == [-1, -1, 56, 32, 56, 94]\n    assert candidate(['93']) == []\n    assert candidate(['46', '91', '3', '40', '31', 'prev']) == [31]\n    assert candidate(['41', 'prev', '17', '58', '78']) == [41]\n    assert candidate(['prev', 'prev', '82', '41', '96', '89', '71']) == [-1, -1]\n    assert candidate(['4', 'prev', '50', 'prev', 'prev']) == [4, 50, 4]\n    assert candidate(['59', '76', 'prev', '29', 'prev']) == [76, 29]\n    assert candidate(['prev', '62']) == [-1]\n    assert candidate(['6', 'prev']) == [6]\n    assert candidate(['prev', 'prev', 'prev', 'prev', 'prev']) == [-1, -1, -1, -1, -1]\n    assert candidate(['28', '5', '35', 'prev', '41', '27', '70', '65', '84']) == [35]\n    assert candidate(['94', '45', 'prev', '61']) == [45]\n    assert candidate(['prev', '34', 'prev', 'prev', 'prev', 'prev', '21', 'prev']) == [-1, 34, -1, -1, -1, 21]\n    assert candidate(['prev', '12', '100', '33', 'prev', '85', '93']) == [-1, 33]\n    assert candidate(['26']) == []\n    assert candidate(['27', 'prev', 'prev', 'prev']) == [27, -1, -1]\n    assert candidate(['prev', 'prev', '22', '33', 'prev', 'prev', 'prev']) == [-1, -1, 33, 22, -1]\n    assert candidate(['30', 'prev', '87', 'prev', '19', 'prev', '8', 'prev', '81']) == [30, 87, 19, 8]\n    assert candidate(['35', 'prev', '47', '82', '86', '84', 'prev', '76', 'prev']) == [35, 84, 76]\n    assert candidate(['prev', '87']) == [-1]\n    assert candidate(['prev', '69', '78', 'prev', 'prev', '16']) == [-1, 78, 69]\n    assert candidate(['22', '97', 'prev', '2']) == [97]\n    assert candidate(['72', '74']) == []\n    assert candidate(['84', 'prev', 'prev', '21']) == [84, -1]\n    assert candidate(['64', '24']) == []\n    assert candidate(['17', 'prev', '59', 'prev', '51', '11', 'prev', 'prev']) == [17, 59, 11, 51]\n    assert candidate(['57', 'prev', '27', '30', 'prev', 'prev', '75']) == [57, 30, 27]\n    assert candidate(['65', 'prev', 'prev']) == [65, -1]\n    assert candidate(['prev', '53', '76', '54', '94', '77']) == [-1]\n    assert candidate(['89', '51', 'prev', 'prev', '12', 'prev', 'prev']) == [51, 89, 12, 51]\n    assert candidate(['prev', '28', '25', 'prev', 'prev', 'prev']) == [-1, 25, 28, -1]\n    assert candidate(['51', 'prev', 'prev', '76']) == [51, -1]\n    assert candidate(['2', '24', '63', 'prev', '43', '19', 'prev']) == [63, 19]\n    assert candidate(['prev', '38', '1']) == [-1]\n    assert candidate(['56', '75', 'prev', 'prev', '94']) == [75, 56]\n    assert candidate(['prev', 'prev', 'prev']) == [-1, -1, -1]\n    assert candidate(['prev', '37', '25', '31', 'prev', 'prev', '42']) == [-1, 31, 25]\n    assert candidate(['73', '30', 'prev', '20', 'prev', 'prev']) == [30, 20, 30]\n    assert candidate(['85', 'prev', 'prev', '78', 'prev', '100', '8', '17', 'prev']) == [85, -1, 78, 17]\n    assert candidate(['prev', '55', 'prev', '87', '19', 'prev', '13', 'prev', 'prev']) == [-1, 55, 19, 13, 19]\n    assert candidate(['prev', 'prev', '5', 'prev', 'prev', 'prev', '80', '17']) == [-1, -1, 5, -1, -1]\n    assert candidate(['100', '3', 'prev', 'prev', '93', '35', 'prev', 'prev']) == [3, 100, 35, 93]\n    assert candidate(['75', '7']) == []\n    assert candidate(['prev', 'prev', 'prev', 'prev', 'prev', 'prev', '71', 'prev', '27']) == [-1, -1, -1, -1, -1, -1, 71]\n    assert candidate(['prev', 'prev', 'prev', '91', '44', 'prev']) == [-1, -1, -1, 44]\n    assert candidate(['prev', 'prev']) == [-1, -1]\n    assert candidate(['11', 'prev', '87', 'prev', 'prev', '94', 'prev', '68']) == [11, 87, 11, 94]\n    assert candidate(['78']) == []\n    assert candidate(['prev', 'prev', '73', 'prev', 'prev', '27', 'prev']) == [-1, -1, 73, -1, 27]\n    assert candidate(['prev', '70', 'prev', 'prev']) == [-1, 70, -1]\n    assert candidate(['68', 'prev', '38', 'prev', 'prev']) == [68, 38, 68]\n    assert candidate(['prev', 'prev', '36']) == [-1, -1]\n    assert candidate(['prev', 'prev', '36', 'prev']) == [-1, -1, 36]\n    assert candidate(['18', '58', '41', 'prev', 'prev']) == [41, 58]\n    assert candidate(['prev', 'prev', '35']) == [-1, -1]\n    assert candidate(['prev', '72', 'prev', '96', '9', '50', 'prev', '52']) == [-1, 72, 50]\n    assert candidate(['92', '95', '47', '48', 'prev', '50', '34', 'prev', 'prev', '46']) == [48, 34, 50]\n    assert candidate(['36', '88', '15', '99', '48']) == []\n    assert candidate(['93', 'prev', '2', '58', '83', '90', 'prev']) == [93, 90]\n    assert candidate(['prev', '68', 'prev']) == [-1, 68]\n    assert candidate(['prev', '56', 'prev', 'prev', '36', 'prev']) == [-1, 56, -1, 36]\n    assert candidate(['53', 'prev']) == [53]\n    assert candidate(['5', '29', '94', '3', '48', 'prev', '59', '90', 'prev', '69']) == [48, 90]\n    assert candidate(['89', 'prev', 'prev', '75', 'prev', '98', '80', 'prev', '68', '33']) == [89, -1, 75, 80]\n    assert candidate(['prev', '93', 'prev', '74', '33']) == [-1, 93]\n    assert candidate(['prev', 'prev', '10', '25', 'prev', '54', 'prev', 'prev', 'prev', '76']) == [-1, -1, 25, 54, 25, 10]\n    assert candidate(['9', 'prev', '14', 'prev']) == [9, 14]\n    assert candidate(['prev', 'prev', 'prev', '18', '66', '92', 'prev', '87', '85', '25']) == [-1, -1, -1, 92]\n    assert candidate(['prev', 'prev', 'prev', '16', 'prev']) == [-1, -1, -1, 16]\n    assert candidate(['prev', 'prev', '99', 'prev', '82', 'prev', 'prev']) == [-1, -1, 99, 82, 99]\n    assert candidate(['prev', '5', '90', '71', 'prev', 'prev', '61']) == [-1, 71, 90]\n    assert candidate(['prev', 'prev', '71', '54', 'prev', '20', '65', 'prev', 'prev']) == [-1, -1, 54, 65, 20]\n    assert candidate(['prev', '85', 'prev', '93', 'prev', '98', 'prev']) == [-1, 85, 93, 98]\n    assert candidate(['prev', 'prev', '34', 'prev']) == [-1, -1, 34]\n\ndef test_check():\n    check(lastVisitedIntegers)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3165_findIndices", "language": "py", "prompt": "from typing import List\n\ndef findIndices(nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:\n    \"\"\"You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference.\nYour task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:\n * abs(i - j) >= indexDifference, and\n * abs(nums[i] - nums[j]) >= valueDifference\nReturn an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them.\nNote: i and j may be equal.\nExample 1:\nInput: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\nOutput: [0,3]\nExplanation: In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer.\nExample 2:\nInput: nums = [2,1], indexDifference = 0, valueDifference = 0\nOutput: [0,0]\nExplanation: In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1].\nExample 3:\nInput: nums = [1,2,3], indexDifference = 2, valueDifference = 4\nOutput: [-1,-1]\nExplanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned.\nConstraints:\n * 1 <= n == nums.length <= 100\n * 0 <= nums[i] <= 50\n * 0 <= indexDifference <= 100\n * 0 <= valueDifference <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3165_findIndices.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 1, 4, 1], 2, 4) == [0, 3]\n    assert candidate([2, 1], 0, 0) == [0, 0]\n    assert candidate([1, 2, 3], 2, 4) == [-1, -1]\n    assert candidate([0], 0, 0) == [0, 0]\n    assert candidate([3], 0, 0) == [0, 0]\n    assert candidate([3], 1, 1) == [-1, -1]\n    assert candidate([4], 1, 0) == [-1, -1]\n    assert candidate([5], 1, 3) == [-1, -1]\n    assert candidate([7], 1, 7) == [-1, -1]\n    assert candidate([8], 0, 2) == [-1, -1]\n    assert candidate([8], 1, 7) == [-1, -1]\n    assert candidate([10], 0, 9) == [-1, -1]\n    assert candidate([11], 1, 0) == [-1, -1]\n    assert candidate([18], 1, 4) == [-1, -1]\n    assert candidate([38], 1, 34) == [-1, -1]\n    assert candidate([40], 1, 2) == [-1, -1]\n    assert candidate([5, 10], 1, 2) == [0, 1]\n    assert candidate([5, 48], 0, 29) == [0, 1]\n    assert candidate([6, 3], 1, 2) == [0, 1]\n    assert candidate([7, 6], 1, 0) == [0, 1]\n    assert candidate([8, 8], 1, 1) == [-1, -1]\n    assert candidate([17, 31], 1, 9) == [0, 1]\n    assert candidate([21, 22], 1, 21) == [-1, -1]\n    assert candidate([48, 40], 2, 31) == [-1, -1]\n    assert candidate([2, 8, 0], 2, 7) == [-1, -1]\n    assert candidate([2, 29, 0], 0, 12) == [0, 1]\n    assert candidate([3, 0, 7], 2, 4) == [0, 2]\n    assert candidate([4, 22, 43], 0, 34) == [0, 2]\n    assert candidate([5, 0, 3], 1, 4) == [0, 1]\n    assert candidate([5, 9, 2], 0, 1) == [0, 1]\n    assert candidate([6, 2, 7], 2, 5) == [-1, -1]\n    assert candidate([6, 5, 1], 2, 6) == [-1, -1]\n    assert candidate([6, 8, 0], 1, 3) == [0, 2]\n    assert candidate([7, 36, 21], 1, 20) == [0, 1]\n    assert candidate([9, 4, 7], 0, 9) == [-1, -1]\n    assert candidate([9, 50, 31], 1, 8) == [0, 1]\n    assert candidate([31, 23, 36], 1, 11) == [1, 2]\n    assert candidate([40, 21, 1], 2, 0) == [0, 2]\n    assert candidate([0, 5, 10, 5], 3, 0) == [0, 3]\n    assert candidate([1, 28, 24, 35], 3, 2) == [0, 3]\n    assert candidate([2, 7, 10, 4], 0, 5) == [0, 1]\n    assert candidate([3, 1, 0, 3], 2, 0) == [0, 2]\n    assert candidate([7, 5, 6, 2], 2, 2) == [0, 3]\n    assert candidate([9, 3, 6, 4], 1, 5) == [0, 1]\n    assert candidate([34, 46, 11, 45], 1, 3) == [0, 1]\n    assert candidate([36, 37, 40, 9], 2, 8) == [0, 3]\n    assert candidate([37, 25, 48, 13], 0, 0) == [0, 0]\n    assert candidate([45, 6, 29, 21], 3, 36) == [-1, -1]\n    assert candidate([1, 5, 7, 9, 2], 3, 8) == [0, 3]\n    assert candidate([7, 2, 1, 8, 3], 0, 7) == [2, 3]\n    assert candidate([8, 9, 8, 0, 4], 1, 6) == [0, 3]\n    assert candidate([9, 1, 10, 0, 10], 0, 3) == [0, 1]\n    assert candidate([9, 9, 4, 5, 5], 2, 9) == [-1, -1]\n    assert candidate([10, 1, 10, 12, 1], 1, 3) == [0, 1]\n    assert candidate([17, 46, 31, 28, 28], 0, 46) == [-1, -1]\n    assert candidate([17, 49, 1, 47, 12], 2, 17) == [0, 3]\n    assert candidate([32, 49, 3, 40, 44], 1, 37) == [1, 2]\n    assert candidate([46, 43, 16, 16, 34], 3, 13) == [0, 3]\n    assert candidate([49, 36, 18, 4, 33], 3, 20) == [0, 3]\n    assert candidate([0, 7, 10, 6, 6, 5], 1, 5) == [0, 1]\n    assert candidate([2, 0, 3, 4, 0, 5], 3, 5) == [1, 5]\n    assert candidate([3, 8, 9, 7, 2, 3], 3, 6) == [1, 4]\n    assert candidate([3, 27, 38, 47, 38, 4], 0, 10) == [0, 1]\n    assert candidate([4, 13, 48, 50, 1, 26], 4, 34) == [-1, -1]\n    assert candidate([6, 1, 2, 6, 4, 6], 2, 2) == [0, 2]\n    assert candidate([7, 1, 0, 9, 5, 9], 2, 5) == [0, 2]\n    assert candidate([7, 3, 7, 5, 7, 9], 1, 2) == [0, 1]\n    assert candidate([12, 37, 7, 16, 5, 34], 3, 27) == [1, 4]\n    assert candidate([17, 46, 48, 25, 22, 4], 2, 30) == [0, 2]\n    assert candidate([18, 18, 7, 10, 9, 50], 2, 32) == [0, 5]\n    assert candidate([18, 42, 37, 13, 49, 42], 3, 46) == [-1, -1]\n    assert candidate([23, 31, 14, 42, 0, 49], 4, 44) == [-1, -1]\n    assert candidate([50, 46, 15, 16, 48, 7], 1, 7) == [0, 2]\n    assert candidate([5, 6, 8, 5, 6, 3, 1], 0, 4) == [0, 6]\n    assert candidate([5, 50, 13, 3, 44, 7, 29], 1, 45) == [0, 1]\n    assert candidate([8, 7, 18, 47, 27, 25, 41], 0, 45) == [-1, -1]\n    assert candidate([9, 1, 0, 6, 7, 5, 8], 1, 1) == [0, 1]\n    assert candidate([11, 3, 36, 17, 13, 0, 26], 2, 33) == [2, 5]\n    assert candidate([13, 0, 16, 32, 47, 27, 25], 1, 35) == [1, 4]\n    assert candidate([13, 16, 30, 33, 50, 50, 38], 3, 30) == [0, 4]\n    assert candidate([21, 44, 22, 1, 21, 9, 17], 1, 41) == [1, 3]\n    assert candidate([35, 31, 36, 28, 49, 4, 46], 4, 27) == [0, 5]\n    assert candidate([39, 18, 49, 25, 40, 41, 26], 1, 43) == [-1, -1]\n    assert candidate([40, 46, 11, 36, 25, 46, 47], 0, 37) == [-1, -1]\n    assert candidate([46, 7, 6, 3, 43, 7, 48], 0, 48) == [-1, -1]\n    assert candidate([0, 1, 6, 8, 8, 3, 9, 10], 2, 6) == [0, 2]\n    assert candidate([1, 0, 6, 4, 8, 7, 2, 5], 3, 7) == [0, 4]\n    assert candidate([3, 8, 3, 8, 0, 5, 5, 7], 4, 6) == [-1, -1]\n    assert candidate([5, 10, 4, 4, 8, 6, 0, 4], 2, 7) == [1, 6]\n    assert candidate([6, 1, 3, 7, 4, 4, 2, 1], 0, 5) == [0, 1]\n    assert candidate([9, 36, 31, 2, 46, 1, 27, 37], 3, 45) == [-1, -1]\n    assert candidate([10, 4, 0, 1, 4, 7, 2, 0], 5, 8) == [0, 6]\n    assert candidate([26, 20, 19, 36, 20, 28, 33, 39], 0, 0) == [0, 0]\n    assert candidate([29, 3, 30, 34, 25, 40, 10, 37], 5, 22) == [1, 7]\n    assert candidate([39, 26, 46, 9, 5, 34, 0, 20], 0, 24) == [0, 3]\n    assert candidate([46, 12, 38, 21, 12, 9, 18, 29], 3, 35) == [0, 5]\n    assert candidate([1, 7, 7, 2, 4, 10, 1, 5, 9], 4, 4) == [0, 5]\n    assert candidate([2, 4, 1, 5, 2, 0, 3, 5, 7], 5, 2) == [0, 5]\n    assert candidate([2, 5, 6, 5, 9, 7, 2, 3, 6], 4, 2) == [0, 4]\n    assert candidate([2, 6, 9, 4, 9, 4, 10, 9, 2], 0, 4) == [0, 1]\n\ndef test_check():\n    check(findIndices)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3166_minGroupsForValidAssignment", "language": "py", "prompt": "from typing import List\n\ndef minGroupsForValidAssignment(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums of length n.\nWe want to group the indices so for each index i in the range [0, n - 1], it is assigned to exactly one group.\nA group assignment is valid if the following conditions hold:\n * For every group g, all indices i assigned to group g have the same value in nums.\n * For any two groups g1 and g2, the difference between the number of indices assigned to g1 and g2 should not exceed 1.\nReturn an integer denoting the minimum number of groups needed to create a valid group assignment.\nExample 1:\nInput: nums = [3,2,3,2,3]\nOutput: 2\nExplanation: One way the indices can be assigned to 2 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0,2,4]\ngroup 2 -> [1,3]\nAll indices are assigned to one group.\nIn group 1, nums[0] == nums[2] == nums[4], so all indices have the same value.\nIn group 2, nums[1] == nums[3], so all indices have the same value.\nThe number of indices assigned to group 1 is 3, and the number of indices assigned to group 2 is 2.\nTheir difference doesn't exceed 1.\nIt is not possible to use fewer than 2 groups because, in order to use just 1 group, all indices assigned to that group must have the same value.\nHence, the answer is 2.\nExample 2:\nInput: nums = [10,10,10,3,1,1]\nOutput: 4\nExplanation: One way the indices can be assigned to 4 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0]\ngroup 2 -> [1,2]\ngroup 3 -> [3]\ngroup 4 -> [4,5]\nThe group assignment above satisfies both conditions.\nIt can be shown that it is not possible to create a valid assignment using fewer than 4 groups.\nHence, the answer is 4.\nConstraints:\n * 1 <= nums.length <= 105\n * 1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3166_minGroupsForValidAssignment.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 2, 3, 2, 3]) == 2\n    assert candidate([10, 10, 10, 3, 1, 1]) == 4\n    assert candidate([1, 1]) == 1\n    assert candidate([1, 2]) == 2\n    assert candidate([1, 3]) == 2\n    assert candidate([2, 1]) == 2\n    assert candidate([2, 2]) == 1\n    assert candidate([3, 1]) == 2\n    assert candidate([3, 2]) == 2\n    assert candidate([3, 3]) == 1\n    assert candidate([3, 4]) == 2\n    assert candidate([10, 4]) == 2\n    assert candidate([10, 10]) == 1\n    assert candidate([14, 15]) == 2\n    assert candidate([1, 1, 1]) == 1\n    assert candidate([1, 2, 1]) == 2\n    assert candidate([1, 7, 10]) == 3\n    assert candidate([2, 1, 1]) == 2\n    assert candidate([2, 1, 2]) == 2\n    assert candidate([2, 2, 1]) == 2\n    assert candidate([2, 2, 3]) == 2\n    assert candidate([2, 3, 2]) == 2\n    assert candidate([2, 3, 3]) == 2\n    assert candidate([2, 8, 5]) == 3\n    assert candidate([3, 1, 1]) == 2\n    assert candidate([3, 1, 3]) == 2\n    assert candidate([3, 2, 3]) == 2\n    assert candidate([3, 3, 1]) == 2\n    assert candidate([3, 10, 3]) == 2\n    assert candidate([4, 2, 3]) == 3\n    assert candidate([5, 4, 8]) == 3\n    assert candidate([5, 6, 8]) == 3\n    assert candidate([5, 9, 4]) == 3\n    assert candidate([6, 4, 9]) == 3\n    assert candidate([9, 2, 2]) == 2\n    assert candidate([10, 5, 5]) == 2\n    assert candidate([14, 7, 2]) == 3\n    assert candidate([1, 1, 1, 3]) == 3\n    assert candidate([1, 2, 1, 1]) == 3\n    assert candidate([1, 2, 1, 2]) == 2\n    assert candidate([1, 2, 3, 1]) == 3\n    assert candidate([1, 2, 3, 2]) == 3\n    assert candidate([1, 3, 2, 3]) == 3\n    assert candidate([1, 3, 3, 1]) == 2\n    assert candidate([2, 2, 1, 1]) == 2\n    assert candidate([2, 2, 3, 3]) == 2\n    assert candidate([2, 3, 1, 2]) == 3\n    assert candidate([2, 3, 2, 2]) == 3\n    assert candidate([2, 5, 10, 4]) == 4\n    assert candidate([3, 2, 2, 2]) == 3\n    assert candidate([3, 3, 2, 2]) == 2\n    assert candidate([5, 1, 5, 1]) == 2\n    assert candidate([13, 11, 4, 13]) == 3\n    assert candidate([1, 1, 1, 1, 1]) == 1\n    assert candidate([1, 2, 2, 3, 1]) == 3\n    assert candidate([1, 2, 2, 3, 2]) == 4\n    assert candidate([2, 1, 1, 3, 1]) == 4\n    assert candidate([2, 1, 3, 3, 3]) == 4\n    assert candidate([2, 3, 1, 2, 2]) == 4\n    assert candidate([2, 3, 2, 2, 2]) == 3\n    assert candidate([2, 3, 3, 1, 3]) == 4\n    assert candidate([3, 1, 1, 3, 3]) == 2\n    assert candidate([3, 1, 3, 2, 2]) == 3\n    assert candidate([3, 1, 3, 2, 3]) == 4\n    assert candidate([3, 2, 2, 3, 1]) == 3\n    assert candidate([3, 3, 1, 1, 1]) == 2\n    assert candidate([4, 1, 7, 8, 3]) == 5\n    assert candidate([7, 5, 9, 4, 2]) == 5\n    assert candidate([10, 2, 2, 1, 10]) == 3\n    assert candidate([1, 1, 1, 3, 1, 2]) == 4\n    assert candidate([1, 1, 3, 1, 1, 3]) == 3\n    assert candidate([1, 2, 1, 3, 3, 2]) == 3\n    assert candidate([1, 3, 1, 2, 2, 3]) == 3\n    assert candidate([1, 5, 12, 11, 5, 9]) == 5\n    assert candidate([1, 6, 5, 8, 7, 1]) == 5\n    assert candidate([2, 1, 1, 1, 3, 2]) == 4\n    assert candidate([2, 1, 2, 1, 1, 1]) == 3\n    assert candidate([2, 1, 3, 2, 1, 2]) == 4\n    assert candidate([2, 2, 1, 1, 1, 1]) == 3\n    assert candidate([2, 2, 1, 2, 3, 3]) == 4\n    assert candidate([2, 3, 3, 1, 2, 1]) == 3\n    assert candidate([2, 3, 3, 1, 2, 3]) == 4\n    assert candidate([2, 5, 9, 3, 1, 4]) == 6\n    assert candidate([3, 2, 2, 3, 3, 2]) == 2\n    assert candidate([3, 3, 1, 2, 2, 3]) == 4\n    assert candidate([6, 7, 4, 8, 8, 10]) == 5\n    assert candidate([8, 5, 8, 1, 4, 5]) == 4\n    assert candidate([8, 7, 4, 5, 3, 1]) == 6\n    assert candidate([10, 8, 3, 3, 2, 3]) == 5\n    assert candidate([1, 2, 1, 2, 1, 1, 3]) == 4\n    assert candidate([1, 2, 2, 1, 1, 1, 2]) == 2\n    assert candidate([1, 2, 3, 3, 3, 3, 3]) == 5\n    assert candidate([1, 3, 1, 7, 4, 5, 8]) == 6\n    assert candidate([2, 1, 1, 3, 3, 1, 2]) == 3\n    assert candidate([2, 1, 3, 3, 3, 1, 3]) == 4\n    assert candidate([2, 2, 2, 1, 2, 3, 1]) == 4\n    assert candidate([2, 2, 2, 2, 2, 1, 2]) == 4\n    assert candidate([2, 3, 1, 3, 1, 3, 2]) == 3\n    assert candidate([2, 3, 1, 3, 2, 1, 3]) == 3\n    assert candidate([3, 1, 3, 2, 3, 3, 2]) == 4\n\ndef test_check():\n    check(minGroupsForValidAssignment)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3171_minSum", "language": "py", "prompt": "from typing import List\n\ndef minSum(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"You are given two arrays nums1 and nums2 consisting of positive integers.\nYou have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.\nReturn the minimum equal sum you can obtain, or -1 if it is impossible.\nExample 1:\nInput: nums1 = [3,2,0,1,0], nums2 = [6,5,0]\nOutput: 12\nExplanation: We can replace 0's in the following way:\n- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\nBoth arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.\nExample 2:\nInput: nums1 = [2,0,2,0], nums2 = [1,4]\nOutput: -1\nExplanation: It is impossible to make the sum of both arrays equal.\nConstraints:\n * 1 <= nums1.length, nums2.length <= 105\n * 0 <= nums1[i], nums2[i] <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3171_minSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 2, 0, 1, 0], [6, 5, 0]) == 12\n    assert candidate([2, 0, 2, 0], [1, 4]) == -1\n    assert candidate([0, 7, 28, 17, 18], [1, 2, 6, 26, 1, 0, 27, 3, 0, 30]) == 98\n    assert candidate([8, 13, 15, 18, 0, 18, 0, 0, 5, 20, 12, 27, 3, 14, 22, 0], [29, 1, 6, 0, 10, 24, 27, 17, 14, 13, 2, 19, 2, 11]) == 179\n    assert candidate([9, 5], [15, 12, 5, 21, 4, 26, 27, 9, 6, 29, 0, 18, 16, 0, 0, 0, 20]) == -1\n    assert candidate([0, 29, 5, 22, 5, 9, 30, 11, 20, 0, 18, 16, 26, 11, 3, 0, 24, 24, 14, 24], [30, 12, 16, 3, 24, 6, 13, 0, 16]) == 294\n    assert candidate([9, 13, 0, 0, 12, 10, 0, 8, 0, 0, 5, 13, 0], [8, 14, 11, 2, 27, 0, 0]) == 76\n    assert candidate([3, 0, 20, 9, 20, 0, 20, 25, 26, 9, 0, 12, 6, 11, 0, 6], [0, 3, 8, 13, 27, 0, 0, 0, 29, 27, 0, 11, 23, 0, 19, 19, 0]) == 186\n    assert candidate([25, 28, 13, 0, 14, 23, 14, 0, 3, 3, 12], [24, 30, 0, 15, 20, 19, 18, 0, 23, 23, 0, 16, 26, 0, 29, 19, 16, 25]) == 307\n    assert candidate([0, 29, 30, 18, 5, 24, 16, 5, 17, 0, 18, 16, 26, 0, 15, 19, 14, 20, 3, 26], [0, 8, 14, 11, 13, 6, 8, 0, 13]) == 304\n    assert candidate([0, 17, 20, 17, 5, 0, 14, 19, 7, 8, 16, 18, 6], [21, 1, 27, 19, 2, 2, 24, 21, 16, 1, 13, 27, 8, 5, 3, 11, 13, 7, 29, 7]) == 257\n    assert candidate([26, 1, 25, 10, 14, 14, 4, 0, 10, 0, 23], [23, 8, 30, 18, 8, 15, 6, 9, 0, 2, 0, 0, 19, 8, 19, 4, 10]) == 182\n    assert candidate([15, 10, 7, 16], [8, 16, 2, 6, 4, 12, 6, 16, 24, 0]) == -1\n    assert candidate([0, 0, 0, 17, 0, 6, 2, 22, 12, 0, 25, 18, 1, 12, 19, 0, 0], [0, 0, 0, 30, 4, 3, 13, 25, 9, 25, 3, 0, 1, 12, 2, 10, 4, 7, 30, 16]) == 198\n    assert candidate([23, 17], [7, 3, 22, 0, 12]) == -1\n    assert candidate([15, 0, 8, 30, 6, 3, 24, 6, 0, 11, 13, 30, 6, 25, 23, 3], [12, 20, 0, 6, 0, 0, 14, 0, 0, 8, 5, 19, 16, 0, 0, 15]) == 205\n    assert candidate([3, 25, 1, 13], [19, 13, 10, 27, 10, 20, 27, 0, 3, 12, 16, 26, 0, 27]) == -1\n    assert candidate([0, 0], [29, 28]) == 57\n    assert candidate([17, 4, 11, 8, 0, 17, 0, 0, 12, 27, 20, 28, 0, 30, 21, 18, 12], [0, 2, 30, 0, 5, 17, 0, 0, 0, 15, 11, 2, 25, 18, 18]) == 229\n    assert candidate([0, 17, 0, 7, 29, 10, 22, 27, 13, 8, 19], [26, 23, 8, 14, 0, 17, 20, 4, 26, 15, 0, 9, 14, 0, 12, 10, 23, 16]) == 240\n    assert candidate([0, 25, 8, 0, 22, 0], [6, 12, 22, 3, 0, 28, 19, 0, 20, 21, 2, 3]) == 138\n    assert candidate([2, 17, 23, 16, 2, 0, 6, 12, 10], [19, 11, 7, 16, 0]) == 89\n    assert candidate([4, 7, 14, 15, 18, 7, 0, 6, 8], [27, 2, 13, 18, 20, 23, 9, 0, 0, 25, 5, 0, 17, 0, 0, 14]) == 178\n    assert candidate([16, 0, 7, 19, 0, 0, 7, 26, 12, 0, 4, 0, 7, 0, 22, 12, 0, 26], [7, 25, 0, 25, 18, 0, 6, 14, 0]) == 165\n    assert candidate([7, 0, 3, 6, 5, 24, 0, 0, 0, 30, 20, 13, 0, 5, 19, 4, 25, 17], [11, 19, 28, 25, 27, 6, 0, 18, 0, 19, 18, 16, 0, 16, 9, 0, 2, 23, 23, 10]) == 274\n    assert candidate([23, 19, 24, 0, 8, 19, 30, 0, 14], [25, 17, 18, 6, 30]) == -1\n    assert candidate([0, 15, 8, 0, 4, 0, 21, 20, 0, 0, 18], [16, 0]) == 91\n    assert candidate([0, 0, 24, 21, 16, 4, 22, 21], [18, 7, 28, 0, 0, 11, 2, 0]) == 110\n    assert candidate([4, 11, 17, 30, 11, 21, 21, 10, 2, 10, 7, 29, 21, 1, 0, 9, 15, 5], [0, 0, 1, 7, 8, 0, 27, 20]) == 225\n    assert candidate([12, 16, 1], [1, 0, 19, 24, 21, 0, 0, 24, 24, 18, 26, 19, 13, 14, 30, 9, 0, 4, 20]) == -1\n    assert candidate([0, 0, 8, 0], [23, 0, 15, 29, 25]) == 93\n    assert candidate([28, 25, 14, 10], [0, 6, 16, 2, 0, 13, 0, 0, 4, 2, 16, 6, 18, 0, 8, 14, 10]) == -1\n    assert candidate([0, 0, 8, 30, 1, 0, 22, 0, 0, 1, 0], [22, 6, 0, 13, 0, 23, 14, 27, 20, 4, 0, 11, 11, 25, 9, 22, 11, 17, 17]) == 255\n    assert candidate([0, 0, 27], [18, 0, 0, 7, 26, 11, 28, 20, 1, 19]) == 132\n    assert candidate([30, 6, 0, 8, 14, 0, 15, 0, 11, 13, 0, 8, 28, 8, 8, 0, 28, 0, 25], [21, 8, 0, 10, 28, 2, 6, 3, 0, 20, 1, 2, 24, 12, 29]) == 208\n    assert candidate([18, 27, 20, 10, 28, 12, 29, 5, 24, 0, 27, 9, 22, 0, 14, 0, 5, 11], [24, 0, 14, 26, 1, 9, 24, 0, 12, 30, 13, 21]) == 264\n    assert candidate([0, 5], [17, 12, 5, 6, 0, 13, 19, 7]) == 80\n    assert candidate([30, 2, 20, 30], [8, 14, 0, 2, 0, 18, 9, 24, 0, 0, 28, 0, 1, 14, 27]) == -1\n    assert candidate([0, 17, 0, 1, 19, 0, 0, 7, 23, 0, 0, 0, 5, 0], [7, 1, 28, 8, 1, 0, 0, 5, 5, 18, 17, 23]) == 115\n    assert candidate([17, 4, 26, 28, 0, 0, 1, 0, 24, 5, 4, 6, 10, 8, 8, 16, 27], [0, 18, 12, 0, 0, 22, 15]) == 187\n    assert candidate([17, 1, 13, 12, 3, 13], [2, 25]) == -1\n    assert candidate([19, 19, 21, 6, 0, 0, 28, 3], [5, 0, 16]) == 98\n    assert candidate([27, 17, 9, 23, 21, 18, 8, 27, 19, 3, 0, 0, 0, 0, 19], [4, 7, 27, 21, 27, 0, 28, 0, 28, 19, 20, 14, 0, 12, 24, 3]) == 237\n    assert candidate([25, 25, 0, 5, 15, 13, 26, 5, 25, 23, 19, 20, 1, 15], [23, 6]) == -1\n    assert candidate([9, 0, 15, 10, 18, 30, 7, 0, 1, 27, 24, 2, 8, 0], [0, 0, 1, 13, 0, 9, 21, 3, 0, 20]) == 154\n    assert candidate([23, 7, 0, 4, 21, 20, 18, 3, 17, 18, 4, 0, 0, 13, 29, 17], [0, 0, 18, 9, 0, 11, 21, 0]) == 197\n    assert candidate([7, 0, 5, 7, 19, 12, 0, 11, 7, 24, 22], [8, 3, 0, 23, 19, 24, 2, 10, 4, 20, 0, 14]) == 129\n    assert candidate([15, 23, 12, 0, 0, 1, 29, 24, 0, 5, 21, 9, 7, 6, 27, 11, 0, 19, 20], [14, 25, 7, 18]) == -1\n    assert candidate([26, 14, 0], [0, 16, 0, 8, 14, 7, 0, 2, 0, 0, 10, 10, 7, 14, 0, 18, 11]) == 123\n    assert candidate([16, 15, 27, 20, 29], [27, 19, 0, 11, 2, 19, 28, 16, 0, 16, 24, 11, 0, 4, 2, 24, 8]) == -1\n    assert candidate([26, 0, 28, 0, 28, 24, 15, 30, 9, 17, 0, 1, 21, 26, 21, 8, 0, 28, 0, 11], [0, 20, 9, 12, 10, 16, 2, 21, 12, 0, 26, 11, 0, 21, 0, 0, 0, 29, 23, 22]) == 298\n    assert candidate([0, 0, 9, 22, 3, 14, 13, 26, 21], [21, 9, 21, 28, 17, 6, 15, 11, 5, 14, 17, 22, 0, 24]) == 211\n    assert candidate([0, 0, 18, 27, 7, 20, 9, 10, 29], [29, 26, 19, 0, 0, 0, 0, 8, 24]) == 122\n    assert candidate([5, 0, 0, 0, 27, 22, 0, 0, 1, 9], [20, 22, 5, 0, 0, 24, 22, 27, 15]) == 137\n    assert candidate([2, 3, 0, 0, 0, 1, 18, 14, 25, 1, 0, 0, 3, 1, 13, 29, 0, 11, 0, 0], [0, 12, 5, 14, 2, 0, 0, 14, 1, 10, 5, 17, 17, 8, 0, 0, 9]) == 129\n    assert candidate([22, 0, 16, 16, 27, 21, 13, 9, 15, 28, 0, 7, 21, 8, 28, 27, 26, 4], [0, 16, 23, 0, 26, 4, 0, 13, 19, 0, 0, 0, 14, 18, 5, 14, 20, 0, 27]) == 290\n    assert candidate([26, 0, 26, 18, 25, 20, 20, 3, 0, 14, 13, 5, 13, 0, 20], [16, 17, 0, 12, 2, 26, 14, 0, 27, 17, 14, 10, 0, 0, 28, 29, 8, 25, 3, 7]) == 259\n    assert candidate([0, 25, 27, 23], [28, 0, 12, 0, 24, 4, 14, 5, 16, 30, 26, 15, 6, 9, 28, 0]) == 220\n    assert candidate([3, 23, 15, 19, 0, 7, 24, 27, 25, 0, 0, 16, 28, 15], [26, 3, 21, 0, 26, 0, 9, 12, 0, 0, 21, 28, 23, 0, 0, 4, 16, 9, 7]) == 211\n    assert candidate([0, 2, 0, 11, 22, 0, 26, 0, 1, 0, 6, 0, 24, 2, 24, 19, 15, 12], [9, 14, 0, 25, 24, 29, 17, 16, 24, 26, 1, 28, 27, 4, 11, 5, 14]) == 275\n    assert candidate([1, 1, 1], [18]) == -1\n    assert candidate([29, 15, 0, 0, 0, 0, 1, 0, 9, 0, 0], [16, 0, 30, 28, 23, 0, 0, 0, 0, 24, 14, 27, 0, 0]) == 169\n    assert candidate([27, 10, 0, 13, 25], [24, 10, 18, 27, 3, 0, 23, 6, 6]) == 118\n    assert candidate([5, 0, 10, 0, 4, 0, 13, 0, 27, 20, 12, 10, 15, 29], [13, 25, 4, 0, 11, 0, 30, 0, 29, 17, 7, 28, 23]) == 190\n    assert candidate([29, 6, 30, 0, 25, 8, 12, 0, 25, 7, 2, 15, 12, 1, 5, 0, 0, 12], [12, 14, 13, 0, 0, 24, 25, 22, 0, 5, 8, 28, 23, 6, 20, 3]) == 206\n    assert candidate([9, 11, 20, 0, 0, 0, 21, 25, 0, 0, 0, 3, 11, 5, 18], [0, 27, 27, 21, 28, 25, 3, 0, 25, 0, 21, 0, 3, 0, 30, 20, 17]) == 252\n    assert candidate([0, 0, 10, 4], [9, 0, 22, 9, 22, 3, 16, 3, 9, 19, 0, 29, 3, 1, 0, 1, 8, 12]) == 169\n    assert candidate([20, 10, 0, 16, 18, 0, 16, 21, 22, 4, 0, 15, 0, 8], [0, 1, 2, 0, 20]) == 154\n    assert candidate([23, 24, 0], [0, 0, 26, 27, 12, 18, 0]) == 86\n    assert candidate([0, 17, 27, 12, 0, 22], [20, 0]) == 80\n    assert candidate([1, 29], [20, 0, 8, 11, 13, 17, 0, 18, 0, 2, 5, 3, 27, 11, 7, 17]) == -1\n    assert candidate([19, 29, 0, 0, 1, 0, 0, 0, 0, 24, 18, 0, 24, 0, 11, 14, 16, 18], [2, 0, 26, 8, 17]) == 182\n    assert candidate([2, 0, 0, 19, 6, 29], [25, 4, 0, 11, 0, 13, 28, 0, 28, 7, 4, 2, 16, 0, 22]) == 164\n    assert candidate([0, 0], [26, 5, 7, 0, 1, 3, 0, 7, 0, 0, 5, 25, 26, 20, 0, 3, 20, 23, 18]) == 194\n    assert candidate([21, 2, 0, 0, 12, 2, 0, 4, 6, 29, 15, 0], [12, 20, 3, 10, 16, 25, 17, 8, 27, 0, 0, 23, 2, 0, 2, 4, 10, 27]) == 209\n    assert candidate([25, 29, 10, 12, 25, 26, 19, 6, 19, 10, 18], [0, 0, 22, 2, 17, 0, 7, 23, 22, 18, 20, 0, 13, 22, 0, 0, 0, 13, 6, 8]) == -1\n    assert candidate([0, 0, 16, 23, 28, 20, 0, 22, 4, 1, 0, 0, 19, 0, 0, 3, 2, 28], [20, 28]) == -1\n    assert candidate([16, 14, 0, 11, 9, 7, 18, 2, 24, 0, 0, 11, 0, 0, 23], [0, 0, 0, 7, 0, 24, 24, 6, 0, 0, 12, 18, 1, 0, 0]) == 140\n    assert candidate([4, 15, 7, 10, 8, 11, 2, 0, 0, 22, 11, 0, 4, 14, 0, 16, 29, 0, 0, 27], [13, 23, 8, 16]) == -1\n    assert candidate([7], [6, 26, 25, 0, 14, 19, 0, 29, 16, 29, 5, 26, 29, 6, 0, 25, 12, 0, 19, 19]) == -1\n    assert candidate([0, 10, 5, 16, 13, 20, 20, 0, 15, 4, 0, 4, 3, 0, 0, 15, 0, 24, 0], [16, 14, 27, 0, 20, 0, 23, 0, 5, 10, 28, 21, 9, 28, 21, 8, 28, 0, 27, 0]) == 290\n    assert candidate([12, 14, 25, 12, 3], [3, 26, 0, 21, 22]) == -1\n    assert candidate([0, 1, 6, 20, 13, 9, 28, 30, 0, 14, 6, 0, 25, 25, 24, 16, 2, 21], [5, 3, 0]) == 243\n    assert candidate([0, 12, 18, 0, 2, 12, 29, 0, 20, 29, 26, 14], [1, 0, 29, 14, 24]) == 165\n    assert candidate([0, 21, 18, 13, 9, 0, 10], [0, 22, 27, 1, 0, 0, 23, 23]) == 99\n    assert candidate([28, 16, 0, 0, 0, 0, 0, 26, 3, 0, 3, 7, 5, 0, 19, 27, 1, 7], [28, 9, 0, 16, 14]) == 149\n    assert candidate([9, 17, 6, 0, 24, 18, 14, 10, 14, 10, 0, 0, 12, 0, 3, 28, 25, 5, 0, 30], [13, 11, 30, 30, 17, 27, 0, 24, 15, 0, 0]) == 230\n    assert candidate([26, 2, 0, 0, 13, 14, 18, 17, 0], [27, 30, 26, 14, 10, 24, 17, 2, 10, 25, 27]) == 212\n    assert candidate([9, 0, 26], [0, 16]) == 36\n    assert candidate([4, 17, 6, 0, 1, 8, 19, 30, 21, 11, 26, 0, 0, 19, 0, 12], [29, 17, 7, 4, 29, 5, 0, 25, 11, 6, 0, 0, 13, 22]) == 178\n    assert candidate([1], [10, 29, 23, 4, 0, 6, 23, 23, 0, 8, 29, 16, 7, 20, 15, 23]) == -1\n    assert candidate([0, 20, 12, 15, 0, 1, 5, 4, 16, 13, 8, 8, 0, 28, 2, 9, 0, 12], [13, 21, 9, 0, 11, 26, 0, 16, 0, 29, 7, 0, 0, 7, 4, 0, 28, 0, 2]) == 180\n    assert candidate([0, 20, 0, 0, 8, 29, 17, 25, 4, 0, 0, 0, 0, 7, 13, 14], [6, 21, 24, 14, 20, 19, 0, 0, 7, 21, 0, 11, 0, 0, 0, 0, 17, 16, 0, 6]) == 190\n    assert candidate([28, 25, 9, 0, 10, 19, 23, 21, 25, 8, 24, 25, 18, 5], [0, 3, 0]) == 241\n    assert candidate([23, 7, 15, 16, 25, 9, 30, 14, 8, 0, 0, 2, 25, 1, 7, 0, 16, 0, 19], [3, 1, 24, 0, 25, 0, 7, 24, 0, 0, 17, 27, 0]) == 221\n    assert candidate([0, 14, 10, 29, 0, 5, 13, 0, 0, 1, 18, 0, 0, 0, 11, 3, 28, 0], [30, 2, 24, 0, 0, 0, 14, 12, 23, 3, 17, 12, 14, 13, 0, 28, 29, 0, 21]) == 247\n    assert candidate([5, 29], [23, 24]) == -1\n    assert candidate([23, 2, 12, 27, 0, 5, 14, 0, 1, 6, 30, 0, 0, 2, 6, 0, 11, 0], [1, 26, 27, 5, 0, 14, 28, 24, 2, 2, 15, 25, 7, 13, 9]) == 199\n    assert candidate([0, 10, 29, 11, 11, 22, 0, 0, 12, 10], [14, 0, 1, 3, 13, 29, 21]) == 108\n    assert candidate([0, 9, 22, 25, 28], [0, 0, 0, 14, 19, 6, 0, 7, 19, 15, 0, 30, 19, 18, 11, 1, 0, 15, 10, 18]) == 208\n\ndef test_check():\n    check(minSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3172_differenceOfSums", "language": "py", "prompt": "def differenceOfSums(n: int, m: int) -> int:\n    \"\"\"You are given positive integers n and m.\nDefine two integers, num1 and num2, as follows:\n * num1: The sum of all integers in the range [1, n] that are not divisible by m.\n * num2: The sum of all integers in the range [1, n] that are divisible by m.\nReturn the integer num1 - num2.\nExample 1:\nInput: n = 10, m = 3\nOutput: 19\nExplanation: In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer.\nExample 2:\nInput: n = 5, m = 6\nOutput: 15\nExplanation: In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer.\nExample 3:\nInput: n = 5, m = 1\nOutput: -15\nExplanation: In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer.\nConstraints:\n * 1 <= n, m <= 1000\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3172_differenceOfSums.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(10, 3) == 19\n    assert candidate(5, 6) == 15\n    assert candidate(5, 1) == -15\n    assert candidate(15, 9) == 102\n    assert candidate(8, 10) == 36\n    assert candidate(23, 36) == 276\n    assert candidate(1, 32) == 1\n    assert candidate(36, 7) == 456\n    assert candidate(3, 8) == 6\n    assert candidate(4, 2) == -2\n    assert candidate(9, 7) == 31\n    assert candidate(20, 9) == 156\n    assert candidate(3, 19) == 6\n    assert candidate(6, 16) == 21\n    assert candidate(6, 1) == -21\n    assert candidate(5, 25) == 15\n    assert candidate(9, 3) == 9\n    assert candidate(8, 23) == 36\n    assert candidate(17, 1) == -153\n    assert candidate(18, 9) == 117\n    assert candidate(22, 30) == 253\n    assert candidate(1, 42) == 1\n    assert candidate(33, 19) == 523\n    assert candidate(7, 19) == 28\n    assert candidate(12, 24) == 78\n    assert candidate(26, 25) == 301\n    assert candidate(9, 16) == 45\n    assert candidate(1, 8) == 1\n    assert candidate(29, 42) == 435\n    assert candidate(2, 11) == 3\n    assert candidate(36, 10) == 546\n    assert candidate(45, 4) == 507\n    assert candidate(3, 7) == 6\n    assert candidate(6, 12) == 21\n    assert candidate(3, 4) == 6\n    assert candidate(8, 28) == 36\n    assert candidate(18, 23) == 171\n    assert candidate(11, 6) == 54\n    assert candidate(35, 10) == 510\n    assert candidate(29, 18) == 399\n    assert candidate(1, 1) == -1\n    assert candidate(12, 8) == 62\n    assert candidate(7, 12) == 28\n    assert candidate(17, 3) == 63\n    assert candidate(16, 15) == 106\n    assert candidate(18, 3) == 45\n    assert candidate(4, 12) == 10\n    assert candidate(3, 21) == 6\n    assert candidate(15, 4) == 72\n    assert candidate(9, 39) == 45\n    assert candidate(19, 18) == 154\n    assert candidate(2, 4) == 3\n    assert candidate(41, 1) == -861\n    assert candidate(3, 1) == -6\n    assert candidate(16, 13) == 110\n    assert candidate(32, 10) == 408\n    assert candidate(41, 34) == 793\n    assert candidate(33, 40) == 561\n    assert candidate(36, 8) == 506\n    assert candidate(8, 34) == 36\n    assert candidate(40, 12) == 676\n    assert candidate(28, 9) == 298\n    assert candidate(20, 6) == 138\n    assert candidate(13, 6) == 55\n    assert candidate(2, 37) == 3\n    assert candidate(14, 17) == 105\n    assert candidate(35, 4) == 342\n    assert candidate(2, 14) == 3\n    assert candidate(5, 2) == 3\n    assert candidate(7, 7) == 14\n    assert candidate(12, 26) == 78\n    assert candidate(14, 1) == -105\n    assert candidate(2, 1) == -3\n    assert candidate(20, 3) == 84\n    assert candidate(8, 27) == 36\n    assert candidate(1, 12) == 1\n    assert candidate(13, 19) == 91\n    assert candidate(7, 1) == -28\n    assert candidate(31, 4) == 272\n    assert candidate(11, 25) == 66\n    assert candidate(5, 19) == 15\n    assert candidate(33, 12) == 489\n    assert candidate(4, 26) == 10\n    assert candidate(1, 24) == 1\n    assert candidate(13, 20) == 91\n    assert candidate(6, 8) == 21\n    assert candidate(8, 26) == 36\n    assert candidate(4, 1) == -10\n    assert candidate(1, 6) == 1\n    assert candidate(2, 25) == 3\n    assert candidate(4, 4) == 2\n    assert candidate(8, 2) == -4\n    assert candidate(15, 21) == 120\n    assert candidate(1, 2) == 1\n    assert candidate(12, 2) == -6\n    assert candidate(40, 14) == 736\n    assert candidate(14, 19) == 105\n    assert candidate(18, 1) == -171\n    assert candidate(1, 28) == 1\n    assert candidate(31, 18) == 460\n\ndef test_check():\n    check(differenceOfSums)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3176_minimumSum", "language": "py", "prompt": "from typing import List\n\ndef minimumSum(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array nums of integers.\nA triplet of indices (i, j, k) is a mountain if:\n * i < j < k\n * nums[i] < nums[j] and nums[k] < nums[j]\nReturn the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.\nExample 1:\nInput: nums = [8,6,1,5,3]\nOutput: 9\nExplanation: Triplet (2, 3, 4) is a mountain triplet of sum 9 since:\n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9.\nExample 2:\nInput: nums = [5,4,8,7,10,2]\nOutput: 13\nExplanation: Triplet (1, 3, 5) is a mountain triplet of sum 13 since:\n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13.\nExample 3:\nInput: nums = [6,5,4,3,4,5]\nOutput: -1\nExplanation: It can be shown that there are no mountain triplets in nums.\nConstraints:\n * 3 <= nums.length <= 50\n * 1 <= nums[i] <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3176_minimumSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([8, 6, 1, 5, 3]) == 9\n    assert candidate([5, 4, 8, 7, 10, 2]) == 13\n    assert candidate([6, 5, 4, 3, 4, 5]) == -1\n    assert candidate([50, 50, 50]) == -1\n    assert candidate([49, 50, 48]) == 147\n    assert candidate([48, 50, 49]) == 147\n    assert candidate([1, 1, 1]) == -1\n    assert candidate([1, 1, 2]) == -1\n    assert candidate([1, 1, 3]) == -1\n    assert candidate([1, 2, 1]) == 4\n    assert candidate([1, 2, 2]) == -1\n    assert candidate([1, 2, 3]) == -1\n    assert candidate([1, 3, 1]) == 5\n    assert candidate([1, 3, 2]) == 6\n    assert candidate([1, 3, 3]) == -1\n    assert candidate([2, 1, 1]) == -1\n    assert candidate([2, 1, 2]) == -1\n    assert candidate([2, 1, 3]) == -1\n    assert candidate([2, 2, 1]) == -1\n    assert candidate([2, 2, 2]) == -1\n    assert candidate([2, 2, 3]) == -1\n    assert candidate([2, 3, 1]) == 6\n    assert candidate([2, 3, 2]) == 7\n    assert candidate([2, 3, 3]) == -1\n    assert candidate([3, 1, 1]) == -1\n    assert candidate([3, 1, 2]) == -1\n    assert candidate([3, 1, 3]) == -1\n    assert candidate([3, 2, 1]) == -1\n    assert candidate([3, 2, 2]) == -1\n    assert candidate([3, 2, 3]) == -1\n    assert candidate([3, 3, 1]) == -1\n    assert candidate([3, 3, 2]) == -1\n    assert candidate([3, 3, 3]) == -1\n    assert candidate([1, 1, 1, 1]) == -1\n    assert candidate([1, 1, 1, 2]) == -1\n    assert candidate([1, 1, 1, 3]) == -1\n    assert candidate([1, 1, 1, 4]) == -1\n    assert candidate([1, 1, 2, 1]) == 4\n    assert candidate([1, 1, 2, 2]) == -1\n    assert candidate([1, 1, 2, 3]) == -1\n    assert candidate([1, 1, 2, 4]) == -1\n    assert candidate([1, 1, 3, 1]) == 5\n    assert candidate([1, 1, 3, 2]) == 6\n    assert candidate([1, 1, 3, 3]) == -1\n    assert candidate([1, 1, 3, 4]) == -1\n    assert candidate([1, 1, 4, 1]) == 6\n    assert candidate([1, 1, 4, 2]) == 7\n    assert candidate([1, 1, 4, 3]) == 8\n    assert candidate([1, 1, 4, 4]) == -1\n    assert candidate([1, 2, 1, 1]) == 4\n    assert candidate([1, 2, 1, 2]) == 4\n    assert candidate([1, 2, 1, 3]) == 4\n    assert candidate([1, 2, 1, 4]) == 4\n    assert candidate([1, 2, 2, 1]) == 4\n    assert candidate([1, 2, 2, 2]) == -1\n    assert candidate([1, 2, 2, 3]) == -1\n    assert candidate([1, 2, 2, 4]) == -1\n    assert candidate([1, 2, 3, 1]) == 4\n    assert candidate([1, 2, 3, 2]) == 6\n    assert candidate([1, 2, 3, 3]) == -1\n    assert candidate([1, 2, 3, 4]) == -1\n    assert candidate([1, 2, 4, 1]) == 4\n    assert candidate([1, 2, 4, 2]) == 7\n    assert candidate([1, 2, 4, 3]) == 8\n    assert candidate([1, 2, 4, 4]) == -1\n    assert candidate([1, 3, 1, 1]) == 5\n    assert candidate([1, 3, 1, 2]) == 5\n    assert candidate([1, 3, 1, 3]) == 5\n    assert candidate([1, 3, 1, 4]) == 5\n    assert candidate([1, 3, 2, 1]) == 4\n    assert candidate([1, 3, 2, 2]) == 6\n    assert candidate([1, 3, 2, 3]) == 6\n    assert candidate([1, 3, 2, 4]) == 6\n    assert candidate([1, 3, 3, 1]) == 5\n    assert candidate([1, 3, 3, 2]) == 6\n    assert candidate([1, 3, 3, 3]) == -1\n    assert candidate([1, 3, 3, 4]) == -1\n    assert candidate([1, 3, 4, 1]) == 5\n    assert candidate([1, 3, 4, 2]) == 6\n    assert candidate([1, 3, 4, 3]) == 8\n    assert candidate([1, 3, 4, 4]) == -1\n    assert candidate([1, 4, 1, 1]) == 6\n    assert candidate([1, 4, 1, 2]) == 6\n    assert candidate([1, 4, 1, 3]) == 6\n    assert candidate([1, 4, 1, 4]) == 6\n    assert candidate([1, 4, 2, 1]) == 4\n    assert candidate([1, 4, 2, 2]) == 7\n    assert candidate([1, 4, 2, 3]) == 7\n    assert candidate([1, 4, 2, 4]) == 7\n    assert candidate([1, 4, 3, 1]) == 5\n    assert candidate([1, 4, 3, 2]) == 6\n    assert candidate([1, 4, 3, 3]) == 8\n    assert candidate([1, 4, 3, 4]) == 8\n    assert candidate([1, 4, 4, 1]) == 6\n    assert candidate([1, 4, 4, 2]) == 7\n    assert candidate([1, 4, 4, 3]) == 8\n    assert candidate([1, 4, 4, 4]) == -1\n    assert candidate([2, 1, 1, 1]) == -1\n    assert candidate([2, 1, 1, 2]) == -1\n    assert candidate([2, 1, 1, 3]) == -1\n\ndef test_check():\n    check(minimumSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3178_minIncrementOperations", "language": "py", "prompt": "from typing import List\n\ndef minIncrementOperations(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums having length n, and an integer k.\nYou can perform the following increment operation any number of times (including zero):\n * Choose an index i in the range [0, n - 1], and increase nums[i] by 1.\nAn array is considered beautiful if, for any subarray with a size of 3 or more, its maximum element is greater than or equal to k.\nReturn an integer denoting the minimum number of increment operations needed to make nums beautiful.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [2,3,0,0,2], k = 4\nOutput: 3\nExplanation: We can perform the following increment operations to make nums beautiful:\nChoose index i = 1 and increase nums[1] by 1 -> [2,4,0,0,2].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,3].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,4].\nThe subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].\nIn all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 3 increment operations.\nHence, the answer is 3.\nExample 2:\nInput: nums = [0,1,3,3], k = 5\nOutput: 2\nExplanation: We can perform the following increment operations to make nums beautiful:\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,4,3].\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,5,3].\nThe subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].\nIn all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 2 increment operations.\nHence, the answer is 2.\nExample 3:\nInput: nums = [1,1,2], k = 1\nOutput: 0\nExplanation: The only subarray with a size of 3 or more in this example is [1,1,2].\nThe maximum element, 2, is already greater than k = 1, so we don't need any increment operation.\nHence, the answer is 0.\nConstraints:\n * 3 <= n == nums.length <= 105\n * 0 <= nums[i] <= 109\n * 0 <= k <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3178_minIncrementOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 3, 0, 0, 2], 4) == 3\n    assert candidate([0, 1, 3, 3], 5) == 2\n    assert candidate([1, 1, 2], 1) == 0\n    assert candidate([0, 5, 5], 8) == 3\n    assert candidate([0, 18, 28], 93) == 65\n    assert candidate([0, 24, 14], 7) == 0\n    assert candidate([2, 3, 4], 3) == 0\n    assert candidate([3, 5, 9], 6) == 0\n    assert candidate([4, 3, 0], 2) == 0\n    assert candidate([5, 6, 5], 9) == 3\n    assert candidate([6, 9, 6], 3) == 0\n    assert candidate([7, 9, 0], 6) == 0\n    assert candidate([7, 47, 16], 39) == 0\n    assert candidate([9, 6, 1], 6) == 0\n    assert candidate([41, 44, 37], 55) == 11\n    assert candidate([48, 3, 13], 1) == 0\n    assert candidate([1, 2, 6, 9], 8) == 2\n    assert candidate([1, 3, 1, 6], 6) == 3\n    assert candidate([2, 35, 41, 20], 4) == 0\n    assert candidate([3, 9, 9, 7], 6) == 0\n    assert candidate([7, 7, 2, 7], 9) == 2\n    assert candidate([10, 2, 0, 2], 6) == 4\n    assert candidate([20, 2, 22, 30], 67) == 45\n    assert candidate([22, 49, 0, 20], 52) == 3\n    assert candidate([25, 2, 1, 41], 9) == 0\n    assert candidate([31, 86, 1, 2], 354) == 268\n    assert candidate([43, 31, 14, 4], 73) == 42\n    assert candidate([44, 24, 28, 47], 16) == 0\n    assert candidate([1, 9, 5, 2, 0], 2) == 0\n    assert candidate([3, 7, 9, 6, 0], 7) == 0\n    assert candidate([5, 9, 0, 10, 3], 3) == 0\n    assert candidate([6, 2, 8, 10, 6], 9) == 1\n    assert candidate([6, 14, 17, 4, 7], 22) == 5\n    assert candidate([10, 9, 5, 2, 4], 1) == 0\n    assert candidate([20, 38, 29, 34, 6], 95) == 66\n    assert candidate([21, 45, 33, 14, 22], 58) == 25\n    assert candidate([32, 14, 31, 43, 29], 46) == 15\n    assert candidate([39, 21, 10, 46, 40], 81) == 71\n    assert candidate([42, 7, 32, 19, 4], 66) == 34\n    assert candidate([74, 91, 93, 96, 12], 964) == 871\n    assert candidate([84, 17, 58, 61, 72], 432) == 374\n    assert candidate([4, 0, 10, 2, 10, 6], 8) == 0\n    assert candidate([4, 0, 22, 41, 29, 28], 30) == 8\n    assert candidate([4, 1, 8, 0, 3, 9], 2) == 0\n    assert candidate([4, 7, 6, 9, 2, 6], 1) == 0\n    assert candidate([5, 1, 3, 9, 8, 8], 4) == 0\n    assert candidate([6, 5, 8, 6, 0, 9], 9) == 1\n    assert candidate([7, 4, 10, 2, 0, 8], 7) == 0\n    assert candidate([8, 10, 7, 1, 9, 6], 1) == 0\n    assert candidate([9, 5, 0, 10, 9, 0], 8) == 0\n    assert candidate([13, 34, 0, 13, 9, 19], 82) == 117\n    assert candidate([16, 50, 23, 35, 38, 13], 34) == 0\n    assert candidate([20, 1, 40, 48, 32, 24], 38) == 0\n    assert candidate([28, 5, 10, 26, 38, 6], 17) == 0\n    assert candidate([30, 42, 46, 45, 23, 31], 13) == 0\n    assert candidate([3, 8, 0, 6, 46, 24, 31], 30) == 22\n    assert candidate([4, 7, 2, 10, 4, 10, 5], 10) == 3\n    assert candidate([8, 10, 1, 5, 8, 9, 7], 4) == 0\n    assert candidate([10, 7, 2, 5, 9, 6, 3], 2) == 0\n    assert candidate([10, 24, 21, 42, 6, 10, 43], 55) == 56\n    assert candidate([18, 48, 1, 19, 43, 25, 49], 21) == 0\n    assert candidate([37, 82, 95, 82, 77, 87, 93], 239) == 296\n    assert candidate([40, 17, 28, 38, 41, 32, 9], 97) == 125\n    assert candidate([41, 22, 4, 41, 4, 47, 36], 25) == 0\n    assert candidate([42, 19, 52, 36, 8, 5, 9], 656) == 1252\n    assert candidate([45, 58, 6, 16, 70, 69, 87], 26) == 0\n    assert candidate([48, 24, 41, 16, 4, 20, 38], 97) == 133\n    assert candidate([50, 3, 17, 36, 16, 10, 2], 19) == 3\n    assert candidate([57, 41, 90, 16, 41, 25, 2], 934) == 1737\n    assert candidate([74, 33, 13, 74, 75, 95, 11], 426) == 744\n    assert candidate([83, 54, 75, 22, 32, 59, 30], 298) == 462\n    assert candidate([1, 9, 3, 6, 3, 1, 10, 4], 2) == 0\n    assert candidate([1, 29, 18, 3, 38, 4, 7, 47], 67) == 87\n    assert candidate([2, 1, 1, 7, 2, 3, 5, 6], 9) == 13\n    assert candidate([2, 3, 6, 3, 0, 0, 7, 4], 8) == 8\n    assert candidate([2, 9, 6, 9, 1, 9, 4, 0], 6) == 0\n    assert candidate([5, 1, 6, 9, 5, 4, 9, 2], 10) == 6\n    assert candidate([5, 10, 8, 7, 6, 7, 1, 10], 3) == 0\n    assert candidate([6, 7, 9, 5, 0, 2, 7, 7], 1) == 0\n    assert candidate([7, 2, 2, 6, 7, 5, 0, 2], 3) == 0\n    assert candidate([7, 12, 36, 8, 27, 48, 39, 35], 36) == 0\n    assert candidate([15, 47, 34, 46, 42, 26, 23, 11], 15) == 0\n    assert candidate([19, 40, 43, 32, 15, 7, 43, 5], 85) == 120\n    assert candidate([22, 45, 6, 7, 7, 23, 6, 3], 43) == 56\n    assert candidate([25, 1, 70, 71, 54, 96, 46, 77], 549) == 932\n    assert candidate([33, 41, 14, 18, 43, 20, 49, 23], 25) == 0\n    assert candidate([39, 26, 16, 36, 19, 5, 6, 28], 98) == 175\n    assert candidate([44, 44, 31, 36, 1, 8, 39, 46], 45) == 16\n    assert candidate([2, 17, 43, 26, 33, 12, 37, 28, 34], 3) == 0\n    assert candidate([3, 1, 6, 1, 0, 5, 4, 5, 7], 10) == 12\n    assert candidate([3, 10, 4, 2, 9, 8, 2, 1, 4], 7) == 3\n    assert candidate([7, 5, 4, 7, 6, 5, 10, 8, 8], 8) == 2\n    assert candidate([7, 40, 36, 45, 42, 23, 10, 33, 17], 25) == 0\n    assert candidate([10, 4, 7, 4, 8, 7, 8, 4, 6], 3) == 0\n    assert candidate([12, 32, 12, 13, 18, 38, 21, 15, 13], 95) == 214\n    assert candidate([17, 50, 14, 27, 10, 37, 24, 35, 23], 45) == 36\n    assert candidate([20, 17, 29, 44, 18, 20, 17, 26, 2], 1) == 0\n    assert candidate([28, 4, 38, 38, 37, 13, 47, 48, 49], 61) == 60\n    assert candidate([29, 0, 34, 5, 5, 24, 43, 23, 27], 98) == 193\n    assert candidate([41, 53, 77, 44, 79, 66, 2, 46, 64], 204) == 405\n\ndef test_check():\n    check(minIncrementOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3179_maximumPoints", "language": "py", "prompt": "from typing import List\n\ndef maximumPoints(edges: List[List[int]], coins: List[int], k: int) -> int:\n    \"\"\"There exists an undirected tree rooted at node 0 with n nodes labeled from 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed array coins of size n where coins[i] indicates the number of coins in the vertex i, and an integer k.\nStarting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.\nCoins at nodei can be collected in one of the following ways:\n * Collect all the coins, but you will get coins[i] - k points. If coins[i] - k is negative then you will lose abs(coins[i] - k) points.\n * Collect all the coins, but you will get floor(coins[i] / 2) points. If this way is used, then for all the nodej present in the subtree of nodei, coins[j] will get reduced to floor(coins[j] / 2).\nReturn the maximum points you can get after collecting the coins from all the tree nodes.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/09/18/ex1-copy.png]\nInput: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5\nOutput: 11\nExplanation:\nCollect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.\nCollect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.\nCollect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.\nCollect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.\nIt can be shown that the maximum points we can get after collecting coins from all the nodes is 11.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/09/18/ex2.png]\nInput: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0\nOutput: 16\nExplanation:\nCoins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.\nConstraints:\n * n == coins.length\n * 2 <= n <= 105\n * 0 <= coins[i] <= 104\n * edges.length == n - 1\n * 0 <= edges[i][0], edges[i][1] < n\n * 0 <= k <= 104\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3179_maximumPoints.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[0, 1], [1, 2], [2, 3]], [10, 10, 3, 3], 5) == 11\n    assert candidate([[0, 1], [0, 2]], [8, 4, 4], 0) == 16\n    assert candidate([[0, 1], [2, 0], [0, 3], [4, 2]], [7, 5, 0, 9, 3], 4) == 10\n    assert candidate([[1, 0], [0, 2], [1, 3]], [9, 3, 8, 9], 0) == 29\n    assert candidate([[0, 1], [0, 2], [3, 2], [0, 4]], [5, 6, 8, 7, 4], 7) == 8\n    assert candidate([[1, 0], [2, 1], [3, 1]], [8, 2, 7, 1], 2) == 11\n    assert candidate([[0, 1], [1, 2], [0, 3]], [6, 1, 2, 3], 2) == 5\n    assert candidate([[0, 1], [0, 2], [0, 3], [2, 4], [5, 4], [6, 0], [4, 7], [8, 5]], [2, 3, 10, 0, 0, 2, 7, 3, 9], 2) == 20\n    assert candidate([[0, 1], [0, 2], [1, 3], [3, 4], [0, 5], [6, 3], [5, 7], [3, 8], [9, 7]], [0, 5, 10, 5, 6, 5, 0, 2, 0, 0], 7) == 4\n    assert candidate([[0, 1], [2, 1], [3, 0], [3, 4], [5, 0], [6, 4], [7, 1], [6, 8], [9, 5]], [9, 0, 9, 6, 7, 6, 5, 7, 1, 10], 7) == 14\n    assert candidate([[0, 1], [2, 1], [3, 2], [4, 0], [5, 2], [3, 6], [7, 2], [8, 4], [9, 2]], [9, 4, 0, 8, 0, 7, 8, 1, 10, 9], 1) == 46\n    assert candidate([[1, 0], [2, 1], [3, 1], [2, 4], [5, 4], [6, 3], [6, 7]], [9, 9, 5, 5, 7, 9, 6, 9], 8) == 10\n    assert candidate([[0, 1], [2, 1], [2, 3], [4, 0], [5, 2], [6, 1]], [1, 1, 8, 6, 9, 4, 1], 10) == 3\n    assert candidate([[1, 0], [1, 2], [0, 3]], [10, 2, 9, 3], 6) == 8\n    assert candidate([[1, 0], [1, 2], [1, 3], [3, 4], [5, 3], [4, 6], [7, 0], [1, 8], [9, 1]], [2, 10, 4, 0, 1, 3, 6, 10, 3, 6], 8) == 7\n    assert candidate([[1, 0], [0, 2], [3, 2], [4, 3], [2, 5], [1, 6], [7, 2]], [2, 8, 3, 1, 9, 4, 8, 6], 6) == 6\n    assert candidate([[1, 0], [2, 0], [3, 0]], [0, 0, 0, 6], 0) == 6\n    assert candidate([[1, 0], [1, 2]], [7, 6, 0], 6) == 4\n    assert candidate([[0, 1], [0, 2], [1, 3], [2, 4], [5, 4]], [4, 2, 7, 7, 4, 9], 6) == 5\n    assert candidate([[0, 1]], [10, 9], 6) == 8\n    assert candidate([[0, 1], [2, 1], [3, 1], [2, 4], [5, 0], [6, 1]], [6, 1, 8, 10, 0, 4, 10], 5) == 13\n    assert candidate([[1, 0], [2, 0], [0, 3], [0, 4], [5, 1], [6, 4], [3, 7], [5, 8]], [9, 0, 4, 2, 0, 0, 3, 1, 8], 5) == 8\n    assert candidate([[0, 1], [1, 2], [3, 2], [4, 0]], [7, 5, 6, 3, 6], 8) == 5\n    assert candidate([[0, 1], [1, 2], [3, 2], [4, 2], [5, 3], [6, 1], [4, 7], [7, 8], [2, 9]], [4, 2, 0, 8, 3, 2, 7, 2, 1, 6], 2) == 18\n    assert candidate([[0, 1], [1, 2], [1, 3], [4, 0], [3, 5], [6, 3], [7, 6], [8, 0]], [3, 3, 4, 3, 1, 3, 1, 6, 3], 1) == 18\n    assert candidate([[1, 0], [2, 1], [2, 3], [4, 1], [4, 5], [2, 6]], [3, 10, 1, 5, 10, 1, 4], 2) == 21\n    assert candidate([[0, 1], [2, 0]], [7, 10, 8], 10) == 7\n    assert candidate([[1, 0], [2, 1], [3, 1], [4, 2], [5, 3], [6, 0], [7, 4]], [1, 1, 7, 10, 5, 1, 7, 8], 7) == 2\n    assert candidate([[1, 0], [0, 2], [3, 2]], [5, 2, 10, 5], 3) == 12\n    assert candidate([[1, 0], [2, 0], [3, 2], [2, 4], [4, 5], [6, 2], [5, 7], [8, 2]], [4, 2, 1, 4, 7, 7, 2, 7, 4], 2) == 22\n    assert candidate([[1, 0]], [8, 1], 7) == 4\n    assert candidate([[1, 0], [0, 2], [3, 0], [3, 4], [3, 5], [6, 0], [7, 5]], [3, 9, 9, 9, 5, 3, 2, 0], 9) == 8\n    assert candidate([[0, 1], [2, 1], [3, 2], [4, 1], [2, 5]], [2, 10, 4, 6, 7, 9], 5) == 11\n    assert candidate([[1, 0], [2, 1], [3, 2], [3, 4], [5, 4], [2, 6], [7, 3]], [3, 3, 6, 1, 10, 1, 2, 5], 3) == 11\n    assert candidate([[1, 0], [2, 0], [0, 3], [1, 4], [3, 5], [0, 6], [7, 4], [1, 8]], [9, 7, 9, 0, 3, 6, 9, 4, 0], 8) == 13\n    assert candidate([[0, 1], [2, 1], [3, 0], [2, 4], [1, 5], [6, 1], [7, 3], [5, 8]], [4, 9, 7, 6, 6, 9, 0, 2, 6], 2) == 34\n    assert candidate([[1, 0], [1, 2]], [4, 4, 6], 3) == 5\n    assert candidate([[0, 1], [0, 2], [3, 1], [2, 4], [4, 5], [6, 2], [4, 7], [4, 8], [9, 1]], [8, 6, 10, 9, 3, 10, 3, 7, 9, 1], 6) == 21\n    assert candidate([[1, 0], [2, 1], [0, 3], [0, 4], [5, 3], [6, 1], [7, 5], [8, 2], [9, 3]], [1, 3, 10, 0, 7, 2, 8, 10, 0, 5], 0) == 46\n    assert candidate([[0, 1], [2, 0]], [9, 4, 2], 0) == 15\n    assert candidate([[0, 1], [2, 1]], [0, 9, 3], 3) == 4\n    assert candidate([[1, 0], [2, 1], [3, 2], [4, 1], [3, 5]], [10, 10, 8, 6, 0, 0], 1) == 30\n    assert candidate([[0, 1], [2, 0], [3, 0], [3, 4], [5, 1], [6, 1], [7, 2], [8, 3], [0, 9]], [6, 4, 5, 2, 1, 10, 10, 9, 8, 10], 1) == 55\n    assert candidate([[0, 1], [2, 1], [3, 2], [0, 4], [1, 5], [6, 5], [7, 1], [5, 8], [1, 9]], [8, 0, 9, 5, 9, 6, 2, 8, 1, 8], 9) == 10\n    assert candidate([[0, 1], [2, 1], [2, 3], [1, 4], [3, 5], [6, 4], [7, 6]], [8, 2, 3, 10, 4, 5, 8, 8], 1) == 40\n    assert candidate([[0, 1], [2, 0], [0, 3], [4, 1], [5, 2], [6, 1], [7, 1]], [3, 9, 4, 4, 3, 4, 10, 4], 2) == 25\n    assert candidate([[1, 0], [1, 2], [3, 0], [4, 1], [5, 1], [1, 6], [1, 7]], [7, 4, 7, 2, 5, 8, 0, 7], 8) == 8\n    assert candidate([[0, 1], [2, 1], [3, 1], [4, 2], [5, 4], [6, 5], [7, 5]], [4, 5, 7, 5, 0, 4, 6, 7], 4) == 8\n    assert candidate([[1, 0], [1, 2], [1, 3]], [8, 4, 10, 7], 1) == 25\n    assert candidate([[0, 1], [2, 1], [2, 3], [3, 4], [4, 5], [6, 3], [3, 7], [7, 8], [9, 8]], [0, 2, 1, 5, 8, 2, 5, 3, 7, 6], 10) == 0\n    assert candidate([[1, 0], [1, 2], [3, 0], [4, 3], [1, 5], [6, 2], [7, 3], [4, 8], [4, 9]], [6, 5, 1, 8, 8, 10, 5, 7, 7, 1], 5) == 19\n    assert candidate([[0, 1], [2, 0], [2, 3], [4, 2], [5, 0], [3, 6], [7, 5], [3, 8], [9, 8]], [9, 6, 4, 10, 4, 1, 6, 1, 5, 9], 6) == 17\n    assert candidate([[0, 1], [2, 1], [3, 1], [0, 4], [3, 5]], [1, 9, 3, 4, 9, 3], 6) == 5\n    assert candidate([[0, 1], [0, 2]], [9, 3, 9], 3) == 13\n    assert candidate([[0, 1], [2, 0], [3, 1], [2, 4], [5, 2], [6, 5], [7, 3], [8, 5], [9, 5]], [4, 1, 3, 1, 6, 1, 0, 0, 0, 6], 1) == 15\n    assert candidate([[0, 1]], [1, 7], 10) == 1\n    assert candidate([[0, 1]], [10, 6], 10) == 6\n    assert candidate([[1, 0], [1, 2], [2, 3], [0, 4]], [6, 7, 8, 1, 9], 9) == 7\n    assert candidate([[0, 1]], [6, 6], 0) == 12\n    assert candidate([[0, 1], [0, 2], [0, 3], [1, 4], [5, 4], [2, 6]], [9, 3, 7, 2, 3, 1, 2], 8) == 6\n    assert candidate([[1, 0], [0, 2], [3, 1], [3, 4], [2, 5]], [4, 0, 3, 10, 5, 8], 3) == 12\n    assert candidate([[0, 1], [2, 1], [3, 2], [4, 1], [4, 5], [5, 6]], [3, 9, 2, 6, 1, 9, 1], 10) == 3\n    assert candidate([[1, 0]], [8, 8], 8) == 6\n    assert candidate([[0, 1], [1, 2], [1, 3], [0, 4], [5, 2]], [2, 3, 7, 9, 7, 7], 2) == 23\n    assert candidate([[0, 1], [2, 0], [3, 1], [4, 0], [3, 5], [2, 6]], [6, 9, 7, 7, 7, 9, 7], 8) == 11\n    assert candidate([[1, 0], [2, 1], [3, 0], [0, 4], [5, 2], [0, 6]], [9, 4, 7, 9, 6, 2, 9], 10) == 13\n    assert candidate([[0, 1], [1, 2], [3, 2], [4, 2], [0, 5], [6, 4], [7, 3]], [5, 5, 6, 3, 0, 8, 5, 7], 7) == 5\n    assert candidate([[1, 0], [2, 0], [2, 3], [4, 0], [5, 2], [2, 6], [7, 3]], [8, 3, 4, 5, 6, 1, 6, 9], 6) == 11\n    assert candidate([[0, 1], [2, 0], [0, 3], [4, 0], [5, 0], [6, 1], [7, 3], [8, 1]], [1, 6, 3, 10, 1, 9, 7, 8, 7], 5) == 17\n    assert candidate([[0, 1], [2, 0], [3, 1], [3, 4], [2, 5], [6, 4], [5, 7], [5, 8], [6, 9]], [3, 6, 5, 6, 6, 9, 5, 5, 3, 10], 10) == 4\n    assert candidate([[0, 1], [2, 0], [3, 2], [4, 1], [4, 5], [6, 3], [7, 2], [8, 2], [3, 9]], [2, 2, 0, 0, 4, 8, 8, 5, 0, 10], 8) == 1\n    assert candidate([[1, 0], [0, 2], [3, 0], [4, 3], [4, 5], [6, 5], [7, 5]], [8, 5, 7, 3, 2, 3, 5, 3], 6) == 8\n    assert candidate([[0, 1], [2, 0]], [4, 3, 8], 3) == 7\n    assert candidate([[1, 0], [2, 1], [3, 1], [4, 2], [5, 0], [4, 6], [7, 3], [8, 2]], [8, 9, 0, 3, 9, 7, 4, 8, 7], 7) == 12\n    assert candidate([[0, 1], [2, 1]], [1, 6, 4], 4) == 1\n    assert candidate([[0, 1], [2, 1], [3, 1]], [8, 9, 1, 0], 3) == 11\n    assert candidate([[1, 0], [2, 1], [0, 3], [4, 3], [5, 4], [4, 6]], [4, 1, 4, 4, 0, 5, 5], 8) == 3\n    assert candidate([[1, 0], [2, 1], [3, 2], [3, 4], [4, 5], [6, 5], [7, 3]], [10, 9, 6, 8, 9, 9, 0, 7], 0) == 58\n    assert candidate([[0, 1], [1, 2], [3, 1], [2, 4], [3, 5], [4, 6], [5, 7], [1, 8], [2, 9]], [9, 5, 7, 6, 2, 5, 0, 7, 5, 7], 8) == 8\n    assert candidate([[0, 1], [1, 2], [3, 1]], [4, 10, 2, 2], 10) == 4\n    assert candidate([[1, 0], [1, 2], [1, 3], [2, 4], [3, 5], [1, 6], [7, 4], [8, 1], [0, 9]], [6, 7, 1, 2, 3, 7, 3, 4, 8, 4], 1) == 35\n    assert candidate([[0, 1], [2, 1]], [4, 8, 10], 6) == 5\n    assert candidate([[0, 1], [0, 2], [2, 3], [2, 4], [5, 3], [3, 6], [7, 2], [8, 5]], [7, 8, 4, 3, 4, 8, 10, 8, 1], 7) == 12\n    assert candidate([[1, 0], [2, 1], [3, 0], [4, 2], [0, 5]], [9, 9, 3, 3, 4, 4], 4) == 15\n    assert candidate([[0, 1], [0, 2], [1, 3], [2, 4], [5, 0]], [7, 5, 0, 10, 0, 0], 8) == 5\n    assert candidate([[1, 0], [2, 1], [2, 3], [4, 2], [0, 5], [6, 2], [4, 7], [8, 5], [0, 9]], [5, 2, 8, 8, 6, 0, 3, 2, 2, 5], 3) == 18\n    assert candidate([[1, 0], [1, 2], [3, 0], [4, 3], [1, 5], [6, 1], [7, 4], [2, 8]], [5, 5, 2, 1, 3, 8, 6, 4, 3], 1) == 28\n    assert candidate([[1, 0], [0, 2]], [8, 2, 5], 0) == 15\n    assert candidate([[1, 0], [1, 2], [3, 2]], [10, 9, 2, 0], 7) == 7\n    assert candidate([[0, 1], [2, 0], [2, 3], [0, 4], [2, 5], [6, 4], [7, 1], [8, 3]], [10, 4, 4, 8, 9, 5, 5, 8, 1], 0) == 54\n    assert candidate([[0, 1], [1, 2], [1, 3], [2, 4], [1, 5], [6, 2], [3, 7], [8, 4], [9, 3]], [5, 1, 1, 3, 5, 0, 0, 1, 1, 9], 5) == 2\n    assert candidate([[0, 1], [1, 2], [3, 1], [1, 4], [5, 3]], [1, 7, 1, 3, 3, 7], 7) == 1\n    assert candidate([[0, 1], [1, 2], [3, 2], [4, 3], [5, 2], [0, 6], [3, 7], [5, 8]], [9, 1, 3, 2, 1, 3, 4, 2, 6], 1) == 22\n    assert candidate([[0, 1], [0, 2]], [5, 1, 5], 10) == 3\n    assert candidate([[0, 1], [0, 2], [3, 1], [1, 4], [4, 5]], [5, 7, 8, 9, 3, 10], 7) == 9\n    assert candidate([[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [5, 6], [6, 7], [8, 5]], [8, 3, 0, 3, 4, 1, 4, 0, 7], 2) == 16\n    assert candidate([[1, 0], [0, 2], [3, 0], [4, 3], [2, 5], [3, 6]], [3, 6, 7, 1, 2, 8, 0], 9) == 4\n    assert candidate([[1, 0]], [4, 0], 9) == 2\n    assert candidate([[1, 0], [2, 0], [3, 1], [4, 1], [5, 2], [6, 1], [4, 7], [5, 8]], [9, 7, 8, 9, 6, 8, 9, 1, 6], 1) == 54\n    assert candidate([[1, 0], [0, 2], [1, 3], [0, 4], [5, 4], [6, 0], [3, 7]], [7, 10, 8, 4, 6, 0, 6, 2], 4) == 21\n\ndef test_check():\n    check(maximumPoints)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3181_leftmostBuildingQueries", "language": "py", "prompt": "from typing import List\n\ndef leftmostBuildingQueries(heights: List[int], queries: List[List[int]]) -> List[int]:\n    \"\"\"You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.\nIf a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].\nYou are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.\nReturn an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.\nExample 1:\nInput: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\nOutput: [2,5,-1,5,2]\nExplanation: In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\nExample 2:\nInput: heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\nOutput: [7,6,-1,4,6]\nExplanation: In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\nConstraints:\n1 <= heights.length <= 5 * 104\n1 <= heights[i] <= 109\n1 <= queries.length <= 5 * 104\nqueries[i] = [ai, bi]\n0 <= ai, bi <= heights.length - 1\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3181_leftmostBuildingQueries.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([6, 4, 8, 5, 2, 7], [[0, 1], [0, 3], [2, 4], [3, 4], [2, 2]]) == [2, 5, -1, 5, 2]\n    assert candidate([5, 3, 8, 2, 6, 1, 4, 6], [[0, 7], [3, 5], [5, 2], [3, 0], [1, 6]]) == [7, 6, -1, 4, 6]\n    assert candidate([1], [[0, 0]]) == [0]\n    assert candidate([1000000000], [[0, 0]]) == [0]\n    assert candidate([1, 2], [[0, 0], [0, 1], [1, 0], [1, 1]]) == [0, 1, 1, 1]\n    assert candidate([2, 1], [[0, 0], [0, 1], [1, 0], [1, 1]]) == [0, -1, -1, 1]\n    assert candidate([1, 2, 3], [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) == [0, 1, 2, 1, 1, 2, 2, 2, 2]\n    assert candidate([1, 3, 2], [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) == [0, 1, 2, 1, 1, -1, 2, -1, 2]\n    assert candidate([2, 1, 3], [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) == [0, 2, 2, 2, 1, 2, 2, 2, 2]\n    assert candidate([2, 3, 1], [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) == [0, 1, -1, 1, 1, -1, -1, -1, 2]\n    assert candidate([3, 1, 2], [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) == [0, -1, -1, -1, 1, 2, -1, 2, 2]\n    assert candidate([3, 2, 1], [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) == [0, -1, -1, -1, 1, -1, -1, -1, 2]\n    assert candidate([1, 2, 3, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3]\n    assert candidate([1, 2, 4, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, -1, 3, 3, -1, 3]\n    assert candidate([1, 3, 2, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, 3, 1, 1, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3]\n    assert candidate([1, 3, 4, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, 3, 1, 1, 2, -1, 2, 2, 2, -1, 3, -1, -1, 3]\n    assert candidate([1, 4, 2, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, 3, 1, 1, -1, -1, 2, -1, 2, 3, 3, -1, 3, 3]\n    assert candidate([1, 4, 3, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, 3, 1, 1, -1, -1, 2, -1, 2, -1, 3, -1, -1, 3]\n    assert candidate([2, 1, 3, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 2, 2, 3, 2, 1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3]\n    assert candidate([2, 1, 4, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 2, 2, 3, 2, 1, 2, 3, 2, 2, 2, -1, 3, 3, -1, 3]\n    assert candidate([2, 3, 1, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 3, 3, 1, 1, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3]\n    assert candidate([2, 3, 4, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, -1, 1, 1, 2, -1, 2, 2, 2, -1, -1, -1, -1, 3]\n    assert candidate([2, 4, 1, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 3, 3, 1, 1, -1, -1, 3, -1, 2, 3, 3, -1, 3, 3]\n    assert candidate([2, 4, 3, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, 2, -1, 1, 1, -1, -1, 2, -1, 2, -1, -1, -1, -1, 3]\n    assert candidate([3, 1, 2, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 3, 3, 3, 3, 1, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3]\n    assert candidate([3, 1, 4, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 2, 2, -1, 2, 1, 2, 3, 2, 2, 2, -1, -1, 3, -1, 3]\n    assert candidate([3, 2, 1, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 3, 3, 3, 3, 1, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3]\n    assert candidate([3, 2, 4, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 2, 2, -1, 2, 1, 2, -1, 2, 2, 2, -1, -1, -1, -1, 3]\n    assert candidate([3, 4, 1, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, -1, -1, 1, 1, -1, -1, -1, -1, 2, 3, -1, -1, 3, 3]\n    assert candidate([3, 4, 2, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, 1, -1, -1, 1, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 3]\n    assert candidate([4, 1, 2, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, -1, -1, -1, -1, 1, 2, 3, -1, 2, 2, 3, -1, 3, 3, 3]\n    assert candidate([4, 1, 3, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, -1, -1, -1, -1, 1, 2, 3, -1, 2, 2, -1, -1, 3, -1, 3]\n    assert candidate([4, 2, 1, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, -1, -1, -1, -1, 1, 3, 3, -1, 3, 2, 3, -1, 3, 3, 3]\n    assert candidate([4, 2, 3, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, -1, -1, -1, -1, 1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 3]\n    assert candidate([4, 3, 1, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, -1, -1, -1, -1, 1, -1, -1, -1, -1, 2, 3, -1, -1, 3, 3]\n    assert candidate([4, 3, 2, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]) == [0, -1, -1, -1, -1, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 3]\n    assert candidate([1, 2, 3, 4, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 2, 2, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([1, 2, 3, 5, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 2, 2, 3, 4, 3, 3, 3, 3, -1, 4, 4, 4, -1, 4]\n    assert candidate([1, 2, 4, 3, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 2, 2, 4, 4, 3, 3, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([1, 2, 4, 5, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 2, 2, 3, -1, 3, 3, 3, 3, -1, 4, 4, -1, -1, 4]\n    assert candidate([1, 2, 5, 3, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 2, 2, -1, -1, 3, 3, -1, 3, 4, 4, 4, -1, 4, 4]\n    assert candidate([1, 2, 5, 4, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 2, 2, -1, -1, 3, 3, -1, 3, -1, 4, 4, -1, -1, 4]\n    assert candidate([1, 3, 2, 4, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 3, 3, 4, 2, 3, 2, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([1, 3, 2, 5, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 3, 3, 4, 2, 3, 2, 3, 4, 3, 3, 3, 3, -1, 4, 4, 4, -1, 4]\n    assert candidate([1, 3, 4, 2, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 4, 4, 2, 2, 2, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([1, 3, 4, 5, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, -1, 2, 2, 2, 3, -1, 3, 3, 3, 3, -1, 4, -1, -1, -1, 4]\n    assert candidate([1, 3, 5, 2, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 4, 4, 2, 2, 2, -1, -1, 3, 4, -1, 3, 4, 4, 4, -1, 4, 4]\n    assert candidate([1, 3, 5, 4, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, 3, -1, 2, 2, 2, -1, -1, 3, 3, -1, 3, -1, 4, -1, -1, -1, 4]\n    assert candidate([1, 4, 2, 3, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 4, 4, 4, 2, 4, 2, 3, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([1, 4, 2, 5, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 3, 3, -1, 2, 3, 2, 3, 4, 3, 3, 3, 3, -1, 4, -1, 4, -1, 4]\n    assert candidate([1, 4, 3, 2, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 4, 4, 4, 2, 4, 2, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([1, 4, 3, 5, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 3, 3, -1, 2, 3, 2, 3, -1, 3, 3, 3, 3, -1, 4, -1, -1, -1, 4]\n    assert candidate([1, 4, 5, 2, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, -1, -1, 2, 2, 2, -1, -1, 3, -1, -1, 3, 4, 4, -1, -1, 4, 4]\n    assert candidate([1, 4, 5, 3, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, 2, -1, -1, 2, 2, 2, -1, -1, 3, -1, -1, 3, -1, 4, -1, -1, -1, 4]\n    assert candidate([1, 5, 2, 3, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, -1, -1, -1, 2, -1, 2, 3, 4, 3, -1, 3, 3, 4, 4, -1, 4, 4, 4]\n    assert candidate([1, 5, 2, 4, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, -1, -1, -1, 2, -1, 2, 3, 4, 3, -1, 3, 3, -1, 4, -1, 4, -1, 4]\n    assert candidate([1, 5, 3, 2, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, -1, -1, -1, 2, -1, 2, 4, 4, 3, -1, 4, 3, 4, 4, -1, 4, 4, 4]\n    assert candidate([1, 5, 3, 4, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, -1, -1, -1, 2, -1, 2, 3, -1, 3, -1, 3, 3, -1, 4, -1, -1, -1, 4]\n    assert candidate([1, 5, 4, 2, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, -1, -1, -1, 2, -1, 2, -1, -1, 3, -1, -1, 3, 4, 4, -1, -1, 4, 4]\n    assert candidate([1, 5, 4, 3, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, 4, 1, 1, -1, -1, -1, 2, -1, 2, -1, -1, 3, -1, -1, 3, -1, 4, -1, -1, -1, 4]\n    assert candidate([2, 1, 3, 4, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([2, 1, 3, 5, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, 3, 4, 3, 3, 3, 3, -1, 4, 4, 4, -1, 4]\n    assert candidate([2, 1, 4, 3, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, 4, 4, 3, 3, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([2, 1, 4, 5, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, 3, -1, 3, 3, 3, 3, -1, 4, 4, -1, -1, 4]\n    assert candidate([2, 1, 5, 3, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, -1, -1, 3, 3, -1, 3, 4, 4, 4, -1, 4, 4]\n    assert candidate([2, 1, 5, 4, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, 4, 2, 1, 2, 3, 4, 2, 2, 2, -1, -1, 3, 3, -1, 3, -1, 4, 4, -1, -1, 4]\n    assert candidate([2, 3, 1, 4, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, 4, 1, 1, 3, 3, 4, 3, 3, 2, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([2, 3, 1, 5, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, 4, 1, 1, 3, 3, 4, 3, 3, 2, 3, 4, 3, 3, 3, 3, -1, 4, 4, 4, -1, 4]\n    assert candidate([2, 3, 4, 1, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 4, 4, 1, 1, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([2, 3, 4, 5, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, -1, 1, 1, 2, 3, -1, 2, 2, 2, 3, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([2, 3, 5, 1, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 4, 4, 1, 1, 2, 4, 4, 2, 2, 2, -1, -1, 4, 4, -1, 3, 4, 4, 4, -1, 4, 4]\n    assert candidate([2, 3, 5, 4, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, -1, 1, 1, 2, 3, -1, 2, 2, 2, -1, -1, 3, 3, -1, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([2, 4, 1, 3, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, 4, 1, 1, 4, 4, 4, 3, 4, 2, 3, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([2, 4, 1, 5, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, 4, 1, 1, 3, 3, -1, 3, 3, 2, 3, 4, 3, 3, 3, 3, -1, 4, -1, 4, -1, 4]\n    assert candidate([2, 4, 3, 1, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 4, 4, 1, 1, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([2, 4, 3, 5, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, -1, 1, 1, 3, 3, -1, 2, 3, 2, 3, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([2, 4, 5, 1, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 4, 4, 1, 1, 2, -1, -1, 2, 2, 2, -1, -1, 4, -1, -1, 3, 4, 4, -1, -1, 4, 4]\n    assert candidate([2, 4, 5, 3, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, -1, 1, 1, 2, -1, -1, 2, 2, 2, -1, -1, 3, -1, -1, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([2, 5, 1, 3, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, 4, 1, 1, -1, -1, -1, 3, -1, 2, 3, 4, 3, -1, 3, 3, 4, 4, -1, 4, 4, 4]\n    assert candidate([2, 5, 1, 4, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, 4, 1, 1, -1, -1, -1, 3, -1, 2, 3, 4, 3, -1, 3, 3, -1, 4, -1, 4, -1, 4]\n    assert candidate([2, 5, 3, 1, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 4, 4, 1, 1, -1, -1, -1, 2, -1, 2, 4, 4, 4, -1, 4, 3, 4, 4, -1, 4, 4, 4]\n    assert candidate([2, 5, 3, 4, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, -1, 1, 1, -1, -1, -1, 2, -1, 2, 3, -1, 3, -1, 3, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([2, 5, 4, 1, 3], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 4, 4, 1, 1, -1, -1, -1, 2, -1, 2, -1, -1, 4, -1, -1, 3, 4, 4, -1, -1, 4, 4]\n    assert candidate([2, 5, 4, 3, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 2, 3, -1, 1, 1, -1, -1, -1, 2, -1, 2, -1, -1, 3, -1, -1, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([3, 1, 2, 4, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 3, 3, 3, 4, 3, 1, 2, 3, 4, 3, 2, 2, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([3, 1, 2, 5, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 3, 3, 3, 4, 3, 1, 2, 3, 4, 3, 2, 2, 3, 4, 3, 3, 3, 3, -1, 4, 4, 4, -1, 4]\n    assert candidate([3, 1, 4, 2, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 4, 4, 2, 1, 2, 3, 4, 2, 2, 2, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([3, 1, 4, 5, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, -1, 2, 1, 2, 3, 4, 2, 2, 2, 3, -1, 3, 3, 3, 3, -1, -1, 4, -1, -1, 4]\n    assert candidate([3, 1, 5, 2, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 4, 4, 2, 1, 2, 3, 4, 2, 2, 2, -1, -1, 4, 3, -1, 3, 4, 4, 4, -1, 4, 4]\n    assert candidate([3, 1, 5, 4, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, -1, 2, 1, 2, 3, 4, 2, 2, 2, -1, -1, 3, 3, -1, 3, -1, -1, 4, -1, -1, 4]\n    assert candidate([3, 2, 1, 4, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 3, 3, 3, 4, 3, 1, 3, 3, 4, 3, 3, 2, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([3, 2, 1, 5, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 3, 3, 3, 4, 3, 1, 3, 3, 4, 3, 3, 2, 3, 4, 3, 3, 3, 3, -1, 4, 4, 4, -1, 4]\n    assert candidate([3, 2, 4, 1, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 4, 4, 2, 1, 2, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([3, 2, 4, 5, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, -1, 2, 1, 2, 3, -1, 2, 2, 2, 3, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([3, 2, 5, 1, 4], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 4, 4, 2, 1, 2, 4, 4, 2, 2, 2, -1, -1, 4, 4, -1, 3, 4, 4, 4, -1, 4, 4]\n    assert candidate([3, 2, 5, 4, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 2, 2, 3, -1, 2, 1, 2, 3, -1, 2, 2, 2, -1, -1, 3, 3, -1, 3, -1, -1, -1, -1, -1, 4]\n    assert candidate([3, 4, 1, 2, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 2, 3, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([3, 4, 1, 5, 2], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, -1, 1, 1, 3, 3, -1, 3, 3, 2, 3, 4, 3, 3, 3, 3, -1, -1, -1, 4, -1, 4]\n    assert candidate([3, 4, 2, 1, 5], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4]\n    assert candidate([3, 4, 2, 5, 1], [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]) == [0, 1, 3, 3, -1, 1, 1, 3, 3, -1, 3, 3, 2, 3, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, 4]\n\ndef test_check():\n    check(leftmostBuildingQueries)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3183_findKOr", "language": "py", "prompt": "from typing import List\n\ndef findKOr(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums, and an integer k.\nThe K-or of nums is a non-negative integer that satisfies the following:\n * The ith bit is set in the K-or if and only if there are at least k elements of nums in which bit i is set.\nReturn the K-or of nums.\nNote that a bit i is set in x if (2i AND x) == 2i, where AND is the bitwise AND operator.\nExample 1:\nInput: nums = [7,12,9,8,9,15], k = 4\nOutput: 9\nExplanation: Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].\nBit 1 is set at nums[0], and nums[5].\nBit 2 is set at nums[0], nums[1], and nums[5].\nBit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].\nOnly bits 0 and 3 are set in at least k elements of the array, and bits i >= 4 are not set in any of the array's elements. Hence, the answer is 2^0 + 2^3 = 9.\nExample 2:\nInput: nums = [2,12,1,11,4,5], k = 6\nOutput: 0\nExplanation: Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.\nExample 3:\nInput: nums = [10,8,5,9,11,6,8], k = 1\nOutput: 15\nExplanation: Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.\nConstraints:\n * 1 <= nums.length <= 50\n * 0 <= nums[i] < 231\n * 1 <= k <= nums.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3183_findKOr.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([7, 12, 9, 8, 9, 15], 4) == 9\n    assert candidate([2, 12, 1, 11, 4, 5], 6) == 0\n    assert candidate([10, 8, 5, 9, 11, 6, 8], 1) == 15\n    assert candidate([14, 7, 12, 9, 8, 9, 1, 15], 4) == 13\n    assert candidate([2, 12, 1, 11, 4, 5], 3) == 5\n    assert candidate([10, 8, 5, 10, 11, 11, 6, 8], 1) == 15\n    assert candidate([0], 1) == 0\n    assert candidate([1], 1) == 1\n    assert candidate([2], 1) == 2\n    assert candidate([3], 1) == 3\n    assert candidate([4], 1) == 4\n    assert candidate([5], 1) == 5\n    assert candidate([6], 1) == 6\n    assert candidate([7], 1) == 7\n    assert candidate([8], 1) == 8\n    assert candidate([9], 1) == 9\n    assert candidate([10], 1) == 10\n    assert candidate([11], 1) == 11\n    assert candidate([12], 1) == 12\n    assert candidate([13], 1) == 13\n    assert candidate([14], 1) == 14\n    assert candidate([15], 1) == 15\n    assert candidate([16], 1) == 16\n    assert candidate([17], 1) == 17\n    assert candidate([18], 1) == 18\n    assert candidate([19], 1) == 19\n    assert candidate([20], 1) == 20\n    assert candidate([21], 1) == 21\n    assert candidate([22], 1) == 22\n    assert candidate([23], 1) == 23\n    assert candidate([24], 1) == 24\n    assert candidate([25], 1) == 25\n    assert candidate([26], 1) == 26\n    assert candidate([27], 1) == 27\n    assert candidate([28], 1) == 28\n    assert candidate([29], 1) == 29\n    assert candidate([30], 1) == 30\n    assert candidate([31], 1) == 31\n    assert candidate([22, 7, 27, 30, 15, 30, 28], 4) == 30\n    assert candidate([24, 18, 3, 23, 16, 11, 27, 18, 5, 29], 6) == 19\n    assert candidate([14, 1, 2, 28, 4, 15, 3, 12], 2) == 15\n    assert candidate([7, 18, 25, 11, 2], 5) == 0\n    assert candidate([0, 4], 2) == 0\n    assert candidate([17, 5, 14, 16, 24, 30, 3, 19, 31], 1) == 31\n    assert candidate([14, 20, 23, 7, 1, 12, 24, 19], 7) == 0\n    assert candidate([5, 31, 29, 22, 8, 6, 23], 4) == 23\n    assert candidate([9, 10, 30, 0, 7, 19, 14, 19, 20, 3], 4) == 31\n    assert candidate([25, 6, 5, 30, 27, 11, 10, 30], 2) == 31\n    assert candidate([0, 15, 16, 6, 19, 5, 24, 17], 3) == 23\n    assert candidate([19, 8, 2, 28, 4, 5], 5) == 0\n    assert candidate([13, 9, 1, 15, 9, 2, 19, 19], 3) == 11\n    assert candidate([16, 6, 16, 22, 8, 2, 25, 30], 1) == 31\n    assert candidate([14, 28, 23, 22], 2) == 30\n    assert candidate([6, 26], 2) == 2\n    assert candidate([14, 9, 22, 30, 15], 4) == 14\n    assert candidate([12, 13, 16, 25, 12, 4, 8, 29], 6) == 8\n    assert candidate([27, 29], 2) == 25\n    assert candidate([9, 27, 27, 20, 24, 13, 25, 8], 6) == 8\n    assert candidate([22, 26, 18, 26, 1], 1) == 31\n    assert candidate([20, 20, 31, 19, 29, 19], 2) == 31\n    assert candidate([5, 8, 27, 23, 3], 2) == 31\n    assert candidate([4, 23, 0, 20, 4, 19, 14, 22, 26, 2], 9) == 0\n    assert candidate([31, 26, 21, 4, 9, 11, 13, 24, 23, 5], 10) == 0\n    assert candidate([4, 22], 2) == 4\n    assert candidate([22, 17, 20, 3, 21, 5, 20, 25, 16], 4) == 21\n    assert candidate([16, 15, 13, 26, 15, 23, 0, 12], 4) == 15\n    assert candidate([4, 11, 14], 1) == 15\n    assert candidate([10, 26, 27, 25, 3, 21, 9, 3, 22], 8) == 0\n    assert candidate([4, 11, 16], 2) == 0\n    assert candidate([9, 27, 19, 9, 24, 11], 3) == 27\n    assert candidate([29, 19, 27, 14], 1) == 31\n    assert candidate([27, 31, 21, 8, 25], 2) == 31\n    assert candidate([14, 1, 13, 22, 27], 5) == 0\n    assert candidate([14, 15, 17, 23, 29], 1) == 31\n    assert candidate([19, 21], 2) == 17\n    assert candidate([29, 9, 18, 0, 30, 5, 1, 9], 1) == 31\n    assert candidate([6, 31, 11, 7, 6, 2, 26, 19, 17, 13], 10) == 0\n    assert candidate([15, 8, 27, 28], 1) == 31\n    assert candidate([28, 24, 20, 31, 23, 1], 2) == 31\n    assert candidate([8, 13, 27, 24, 20, 28, 15, 21, 23, 6], 9) == 0\n    assert candidate([31, 6], 2) == 6\n    assert candidate([3, 14, 11, 17, 9], 1) == 31\n    assert candidate([14, 11], 2) == 10\n    assert candidate([2, 9, 11, 25, 3, 2, 26, 21, 13, 11], 1) == 31\n    assert candidate([26, 7, 23, 0, 16, 31, 12, 18, 24], 4) == 30\n    assert candidate([11, 30, 30, 17, 10, 27, 6, 31, 0], 4) == 31\n    assert candidate([11, 9, 18, 30, 27, 20, 2, 17, 18, 4], 2) == 31\n    assert candidate([2, 1, 0, 30, 29, 14, 13, 26, 10, 22], 10) == 0\n    assert candidate([21, 30, 30, 17, 23, 8, 26, 9], 6) == 16\n    assert candidate([16, 10], 1) == 26\n    assert candidate([26, 12, 19, 22, 5, 6, 19, 30, 24, 11], 10) == 0\n    assert candidate([20, 10, 14], 2) == 14\n    assert candidate([23, 17, 18, 30, 3], 1) == 31\n    assert candidate([13, 16, 12], 1) == 29\n    assert candidate([17, 12, 5, 13, 23, 19], 3) == 21\n    assert candidate([5, 4, 3], 2) == 5\n    assert candidate([6, 28, 1, 3, 2], 1) == 31\n    assert candidate([28, 3, 15, 30, 10, 29], 4) == 14\n    assert candidate([0, 31, 13, 24, 16, 21], 3) == 29\n    assert candidate([11, 20, 28, 29, 3, 4], 2) == 31\n\ndef test_check():\n    check(findKOr)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3184_maxBalancedSubsequenceSum", "language": "py", "prompt": "from typing import List\n\ndef maxBalancedSubsequenceSum(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums.\nA subsequence of nums having length k and consisting of indices i0\u00a0<\u00a0i1 <\u00a0... < ik-1 is balanced if the following holds:\n * nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1].\nA subsequence of nums having length 1 is considered balanced.\nReturn an integer denoting the maximum possible sum of elements in a balanced subsequence of nums.\nA subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\nExample 1:\nInput: nums = [3,3,5,6]\nOutput: 14\nExplanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.\nnums[2] - nums[0] >= 2 - 0.\nnums[3] - nums[2] >= 3 - 2.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nThe subsequence consisting of indices 1, 2, and 3 is also valid.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.\nExample 2:\nInput: nums = [5,-1,-3,8]\nOutput: 13\nExplanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.\nnums[3] - nums[0] >= 3 - 0.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.\nExample 3:\nInput: nums = [-2,-1]\nOutput: -1\nExplanation: In this example, the subsequence [-1] can be selected.\nIt is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nConstraints:\n * 1 <= nums.length <= 105\n * -109 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3184_maxBalancedSubsequenceSum.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 3, 5, 6]) == 14\n    assert candidate([5, -1, -3, 8]) == 13\n    assert candidate([-2, -1]) == -1\n    assert candidate([0]) == 0\n    assert candidate([-47]) == -47\n    assert candidate([-8]) == -8\n    assert candidate([-7]) == -7\n    assert candidate([-6]) == -6\n    assert candidate([-5]) == -5\n    assert candidate([-3]) == -3\n    assert candidate([-2]) == -2\n    assert candidate([-1]) == -1\n    assert candidate([1]) == 1\n    assert candidate([3]) == 3\n    assert candidate([4]) == 4\n    assert candidate([5]) == 5\n    assert candidate([7]) == 7\n    assert candidate([8]) == 8\n    assert candidate([9]) == 9\n    assert candidate([45]) == 45\n    assert candidate([-9, -5]) == -5\n    assert candidate([-6, 8]) == 8\n    assert candidate([-5, -1]) == -1\n    assert candidate([-5, 0]) == 0\n    assert candidate([-3, -1]) == -1\n    assert candidate([-2, 3]) == 3\n    assert candidate([-1, -5]) == -1\n    assert candidate([-1, 0]) == 0\n    assert candidate([-1, 3]) == 3\n    assert candidate([0, -3]) == 0\n    assert candidate([0, 5]) == 5\n    assert candidate([2, 7]) == 9\n    assert candidate([5, -1]) == 5\n    assert candidate([6, -8]) == 6\n    assert candidate([7, -2]) == 7\n    assert candidate([7, 2]) == 7\n    assert candidate([8, -9]) == 8\n    assert candidate([9, -9]) == 9\n    assert candidate([-43, 23, -49]) == 23\n    assert candidate([-9, -6, -5]) == -5\n    assert candidate([-9, -2, 4]) == 4\n    assert candidate([-9, 5, -6]) == 5\n    assert candidate([-8, 9, -9]) == 9\n    assert candidate([-5, -1, -9]) == -1\n    assert candidate([-4, -9, 3]) == 3\n    assert candidate([-4, -2, -7]) == -2\n    assert candidate([-3, -4, -2]) == -2\n    assert candidate([-2, -1, -2]) == -1\n    assert candidate([-1, -6, 1]) == 1\n    assert candidate([0, -6, -4]) == 0\n    assert candidate([0, -5, 4]) == 4\n    assert candidate([1, -4, 4]) == 5\n    assert candidate([4, 1, -8]) == 4\n    assert candidate([5, -6, -8]) == 5\n    assert candidate([5, -4, -5]) == 5\n    assert candidate([6, -3, 9]) == 15\n    assert candidate([6, 0, 2]) == 6\n    assert candidate([7, -6, 0]) == 7\n    assert candidate([8, -7, 2]) == 8\n    assert candidate([14, -21, -18]) == 14\n    assert candidate([-9, 7, -8, 1]) == 7\n    assert candidate([-8, 2, -5, -7]) == 2\n    assert candidate([-7, 1, -2, -8]) == 1\n    assert candidate([-6, -8, 7, -3]) == 7\n    assert candidate([-5, -1, 0, 6]) == 6\n    assert candidate([-4, 8, 9, 2]) == 17\n    assert candidate([-4, 9, 7, -4]) == 9\n    assert candidate([-2, -6, 0, -5]) == 0\n    assert candidate([-2, -3, 9, 3]) == 9\n    assert candidate([0, -6, -3, 5]) == 5\n    assert candidate([0, 1, 0, -2]) == 1\n    assert candidate([1, -7, -8, 6]) == 7\n    assert candidate([3, -7, 9, -3]) == 12\n    assert candidate([3, -7, 9, 2]) == 12\n    assert candidate([4, -8, -1, 8]) == 12\n    assert candidate([5, 4, 1, 0]) == 5\n    assert candidate([7, 7, -9, -4]) == 7\n    assert candidate([8, 0, 4, -2]) == 8\n    assert candidate([9, 7, -2, 1]) == 9\n    assert candidate([34, 34, 32, 33]) == 65\n    assert candidate([-9, -6, -8, -2, 4]) == 4\n    assert candidate([-9, -5, 2, 2, 7]) == 9\n    assert candidate([-9, -2, -6, 0, 6]) == 6\n    assert candidate([-7, 0, -8, -9, -3]) == 0\n    assert candidate([-7, 0, 9, -4, 9]) == 9\n    assert candidate([-6, -2, -8, -4, -8]) == -2\n    assert candidate([-6, 2, -3, 0, -5]) == 2\n    assert candidate([-6, 3, -6, -3, -2]) == 3\n    assert candidate([-5, -9, 1, 3, -5]) == 4\n    assert candidate([-5, 1, 5, -5, -1]) == 6\n    assert candidate([-3, 7, 0, 4, 6]) == 10\n    assert candidate([-2, -2, 9, -2, -8]) == 9\n    assert candidate([0, -6, -9, -8, -3]) == 0\n    assert candidate([0, -2, -7, -1, -8]) == 0\n    assert candidate([0, -1, -4, -6, -9]) == 0\n    assert candidate([1, -3, -8, 9, -9]) == 10\n    assert candidate([2, -6, -2, 0, -3]) == 2\n    assert candidate([2, 9, -4, 4, 2]) == 11\n    assert candidate([4, -1, 5, -1, -7]) == 5\n    assert candidate([4, 6, -8, -8, -5]) == 10\n\ndef test_check():\n    check(maxBalancedSubsequenceSum)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3188_findChampion", "language": "py", "prompt": "from typing import List\n\ndef findChampion(grid: List[List[int]]) -> int:\n    \"\"\"There are n teams numbered from 0 to n - 1 in a tournament.\nGiven a 0-indexed 2D boolean matrix grid of size n * n. For all i, j that 0 <= i, j <= n - 1 and i != j team i is stronger than team j if grid[i][j] == 1, otherwise, team j is stronger than team i.\nTeam a will be the champion of the tournament if there is no team b that is stronger than team a.\nReturn the team that will be the champion of the tournament.\nExample 1:\nInput: grid = [[0,1],[0,0]]\nOutput: 0\nExplanation: There are two teams in this tournament.\ngrid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion.\nExample 2:\nInput: grid = [[0,0,1],[1,0,1],[0,0,0]]\nOutput: 1\nExplanation: There are three teams in this tournament.\ngrid[1][0] == 1 means that team 1 is stronger than team 0.\ngrid[1][2] == 1 means that team 1 is stronger than team 2.\nSo team 1 will be the champion.\nConstraints:\n * n == grid.length\n * n == grid[i].length\n * 2 <= n <= 100\n * grid[i][j] is either 0 or 1.\n * For all i grid[i][i] is 0.\n * For all i, j that i != j, grid[i][j] != grid[j][i].\n * The input is generated such that if team a is stronger than team b and team b is stronger than team c, then team a is stronger than team c.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3188_findChampion.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[0, 1], [0, 0]]) == 0\n    assert candidate([[0, 0, 1], [1, 0, 1], [0, 0, 0]]) == 1\n    assert candidate([[0, 0], [1, 0]]) == 1\n    assert candidate([[0, 0, 0], [1, 0, 0], [1, 1, 0]]) == 2\n    assert candidate([[0, 0, 0], [1, 0, 1], [1, 0, 0]]) == 1\n    assert candidate([[0, 1, 0], [0, 0, 0], [1, 1, 0]]) == 2\n    assert candidate([[0, 1, 1], [0, 0, 0], [0, 1, 0]]) == 0\n    assert candidate([[0, 1, 1], [0, 0, 1], [0, 0, 0]]) == 0\n    assert candidate([[0, 0, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0]]) == 3\n    assert candidate([[0, 0, 0, 0], [1, 0, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0], [1, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0], [1, 0, 1, 0], [1, 0, 0, 0], [1, 1, 1, 0]]) == 3\n    assert candidate([[0, 0, 0, 0], [1, 0, 1, 1], [1, 0, 0, 0], [1, 0, 1, 0]]) == 1\n    assert candidate([[0, 0, 0, 0], [1, 0, 1, 1], [1, 0, 0, 1], [1, 0, 0, 0]]) == 1\n    assert candidate([[0, 0, 0, 1], [1, 0, 0, 1], [1, 1, 0, 1], [0, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [0, 0, 0, 0]]) == 1\n    assert candidate([[0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0]]) == 3\n    assert candidate([[0, 0, 1, 0], [1, 0, 1, 1], [0, 0, 0, 0], [1, 0, 1, 0]]) == 1\n    assert candidate([[0, 0, 1, 1], [1, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 0]]) == 1\n    assert candidate([[0, 0, 1, 1], [1, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]]) == 1\n    assert candidate([[0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0]]) == 3\n    assert candidate([[0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0]]) == 2\n    assert candidate([[0, 1, 0, 1], [0, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0]]) == 2\n    assert candidate([[0, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 1], [0, 0, 0, 0]]) == 2\n    assert candidate([[0, 1, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 1, 0]]) == 3\n    assert candidate([[0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0]]) == 3\n    assert candidate([[0, 1, 1, 1], [0, 0, 0, 0], [0, 1, 0, 0], [0, 1, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1], [0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1], [0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]]) == 0\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 1, 0, 1], [1, 1, 1, 0, 0]]) == 3\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 1, 1], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 1, 1], [1, 1, 0, 0, 1], [1, 1, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 0, 1], [1, 0, 0, 0, 0]]) == 3\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 0, 1], [1, 1, 0, 1, 1], [1, 1, 0, 0, 1], [1, 0, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 1, 0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 1, 1], [1, 0, 0, 0, 0], [1, 1, 0, 1, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 1, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [1, 0, 0, 0, 0], [1, 1, 1, 0, 1], [1, 0, 1, 0, 0]]) == 3\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 1, 0], [1, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 1, 1, 1], [1, 0, 0, 0, 0], [1, 0, 1, 0, 1], [1, 0, 1, 0, 0]]) == 1\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 0]]) == 1\n    assert candidate([[0, 0, 0, 0, 0], [1, 0, 1, 1, 1], [1, 0, 0, 1, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 0]]) == 1\n    assert candidate([[0, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0]]) == 3\n    assert candidate([[0, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 0, 1, 1], [1, 1, 0, 0, 1], [0, 0, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [1, 1, 0, 1, 1], [1, 0, 0, 0, 1], [0, 0, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 0, 1], [1, 0, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [0, 0, 0, 0, 0]]) == 1\n    assert candidate([[0, 0, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0]]) == 2\n    assert candidate([[0, 0, 0, 1, 0], [1, 0, 0, 1, 1], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 0, 1, 0]]) == 2\n    assert candidate([[0, 0, 0, 1, 0], [1, 0, 1, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 0, 1, 0], [1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [0, 0, 0, 0, 0], [1, 0, 1, 1, 0]]) == 1\n    assert candidate([[0, 0, 0, 1, 0], [1, 0, 1, 1, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 0, 1, 0]]) == 1\n    assert candidate([[0, 0, 0, 1, 1], [1, 0, 0, 1, 1], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0]]) == 2\n    assert candidate([[0, 0, 0, 1, 1], [1, 0, 0, 1, 1], [1, 1, 0, 1, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0]]) == 2\n    assert candidate([[0, 0, 0, 1, 1], [1, 0, 1, 1, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0]]) == 1\n    assert candidate([[0, 0, 0, 1, 1], [1, 0, 1, 1, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0]]) == 1\n    assert candidate([[0, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 1, 0, 0], [1, 0, 1, 1, 0], [0, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 1, 0, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [1, 0, 1, 0, 0]]) == 1\n    assert candidate([[0, 0, 1, 0, 1], [1, 0, 1, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0]]) == 3\n    assert candidate([[0, 0, 1, 1, 0], [1, 0, 1, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 0, 1, 1, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [1, 0, 1, 1, 0]]) == 1\n    assert candidate([[0, 0, 1, 1, 1], [1, 0, 1, 1, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0]]) == 1\n    assert candidate([[0, 0, 1, 1, 1], [1, 0, 1, 1, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0]]) == 1\n    assert candidate([[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 1, 0, 1], [1, 1, 1, 0, 0]]) == 3\n    assert candidate([[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0]]) == 2\n    assert candidate([[0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1], [1, 1, 1, 0, 1], [0, 1, 0, 0, 0]]) == 3\n    assert candidate([[0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1], [1, 1, 0, 0, 1], [0, 1, 0, 0, 0]]) == 2\n    assert candidate([[0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0], [0, 1, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1], [0, 1, 0, 0, 0], [1, 1, 0, 1, 0]]) == 2\n    assert candidate([[0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0]]) == 2\n    assert candidate([[0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1], [0, 1, 0, 0, 1], [0, 1, 0, 0, 0]]) == 2\n    assert candidate([[0, 1, 0, 1, 1], [0, 0, 0, 1, 1], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0]]) == 2\n    assert candidate([[0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [1, 1, 1, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 1], [1, 1, 1, 0, 0]]) == 3\n    assert candidate([[0, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0, 0, 1], [1, 1, 1, 0, 1], [0, 1, 0, 0, 0]]) == 3\n    assert candidate([[0, 1, 1, 0, 1], [0, 0, 0, 0, 1], [0, 1, 0, 0, 1], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0]]) == 3\n    assert candidate([[0, 1, 1, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 1], [0, 1, 1, 0, 0]]) == 3\n    assert candidate([[0, 1, 1, 0, 1], [0, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 1, 0, 1], [0, 0, 1, 0, 0]]) == 3\n    assert candidate([[0, 1, 1, 0, 1], [0, 0, 1, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0]]) == 3\n    assert candidate([[0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 1, 1, 1, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 1, 1, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 1, 0]]) == 4\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 1, 1, 0, 1], [0, 1, 1, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 0, 0, 1], [0, 1, 1, 0, 1], [0, 1, 0, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 0, 1, 1], [0, 1, 0, 0, 0], [0, 1, 0, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 0, 1, 1], [0, 1, 0, 0, 1], [0, 1, 0, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 0, 0, 1], [0, 1, 0, 0, 1], [0, 1, 1, 0, 1], [0, 0, 0, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 1, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 1, 1, 0, 1], [0, 1, 1, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 1, 0, 1], [0, 0, 0, 0, 1], [0, 1, 1, 0, 1], [0, 0, 0, 0, 0]]) == 0\n    assert candidate([[0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 1, 1, 1, 0]]) == 0\n\ndef test_check():\n    check(findChampion)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3189_findChampion", "language": "py", "prompt": "from typing import List\n\ndef findChampion(n: int, edges: List[List[int]]) -> int:\n    \"\"\"There are n teams numbered from 0 to n - 1 in a tournament; each team is also a node in a DAG.\nYou are given the integer n and a 0-indexed 2D integer array edges of length m representing the DAG, where edges[i] = [ui, vi] indicates that there is a directed edge from team ui to team vi in the graph.\nA directed edge from a to b in the graph means that team a is stronger than team b and team b is weaker than team a.\nTeam a will be the champion of the tournament if there is no team b that is stronger than team a.\nReturn the team that will be the champion of the tournament if there is a unique champion, otherwise, return -1.\nNotes\n * A cycle is a series of nodes a1, a2, ..., an, an+1 such that node a1 is the same node as node an+1, the nodes a1, a2, ..., an are distinct, and there is a directed edge from the node ai to node ai+1 for every i in the range [1, n].\n * A DAG is a directed graph that does not have any cycle.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/10/19/graph-3.png]\nInput: n = 3, edges = [[0,1],[1,2]]\nOutput: 0\nExplanation: Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/10/19/graph-4.png]\nInput: n = 4, edges = [[0,2],[1,3],[1,2]]\nOutput: -1\nExplanation: Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1.\nConstraints:\n * 1 <= n <= 100\n * m == edges.length\n * 0 <= m <= n * (n - 1) / 2\n * edges[i].length == 2\n * 0 <= edge[i][j] <= n - 1\n * edges[i][0] != edges[i][1]\n * The input is generated such that if team a is stronger than team b, team b is not stronger than team a.\n * The input is generated such that if team a is stronger than team b and team b is stronger than team c, then team a is stronger than team c.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3189_findChampion.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, [[0, 1], [1, 2]]) == 0\n    assert candidate(4, [[0, 2], [1, 3], [1, 2]]) == -1\n    assert candidate(1, []) == 0\n    assert candidate(2, []) == -1\n    assert candidate(2, [[0, 1]]) == 0\n    assert candidate(2, [[1, 0]]) == 1\n    assert candidate(3, []) == -1\n    assert candidate(3, [[0, 1]]) == -1\n    assert candidate(3, [[0, 2]]) == -1\n    assert candidate(3, [[1, 2]]) == -1\n    assert candidate(3, [[2, 0]]) == -1\n    assert candidate(3, [[0, 1], [2, 1]]) == -1\n    assert candidate(3, [[0, 2], [0, 1]]) == 0\n    assert candidate(3, [[0, 2], [1, 0]]) == 1\n    assert candidate(3, [[2, 0], [1, 0]]) == -1\n    assert candidate(3, [[2, 0], [2, 1]]) == 2\n    assert candidate(3, [[2, 1], [2, 0]]) == 2\n    assert candidate(3, [[0, 1], [1, 2], [0, 2]]) == 0\n    assert candidate(3, [[0, 1], [2, 1], [0, 2]]) == 0\n    assert candidate(3, [[0, 2], [0, 1], [1, 2]]) == 0\n    assert candidate(3, [[0, 2], [0, 1], [2, 1]]) == 0\n    assert candidate(3, [[0, 2], [1, 2], [1, 0]]) == 1\n    assert candidate(3, [[1, 0], [0, 2], [1, 2]]) == 1\n    assert candidate(3, [[2, 1], [1, 0], [2, 0]]) == 2\n    assert candidate(4, []) == -1\n    assert candidate(4, [[0, 2]]) == -1\n    assert candidate(4, [[1, 0]]) == -1\n    assert candidate(4, [[1, 3]]) == -1\n    assert candidate(4, [[3, 2]]) == -1\n    assert candidate(4, [[0, 1], [2, 3]]) == -1\n    assert candidate(4, [[0, 3], [2, 3]]) == -1\n    assert candidate(4, [[1, 3], [2, 1]]) == -1\n    assert candidate(4, [[2, 1], [1, 3]]) == -1\n    assert candidate(4, [[3, 0], [3, 1]]) == -1\n    assert candidate(4, [[0, 1], [2, 0], [2, 1]]) == -1\n    assert candidate(4, [[0, 2], [3, 2], [1, 2]]) == -1\n    assert candidate(4, [[1, 0], [2, 3], [1, 2]]) == 1\n    assert candidate(4, [[1, 2], [0, 3], [1, 3]]) == -1\n    assert candidate(4, [[1, 2], [1, 0], [1, 3]]) == 1\n    assert candidate(4, [[1, 3], [1, 2], [0, 3]]) == -1\n    assert candidate(4, [[1, 3], [3, 0], [2, 0]]) == -1\n    assert candidate(4, [[3, 1], [2, 0], [1, 2]]) == 3\n    assert candidate(4, [[3, 1], [2, 1], [0, 2]]) == -1\n    assert candidate(4, [[0, 2], [0, 3], [1, 2], [1, 0]]) == 1\n    assert candidate(4, [[2, 0], [2, 3], [3, 1], [2, 1]]) == 2\n    assert candidate(4, [[2, 1], [1, 0], [3, 0], [2, 0]]) == -1\n    assert candidate(4, [[3, 0], [3, 1], [2, 1], [0, 1]]) == -1\n    assert candidate(4, [[3, 0], [1, 0], [1, 2], [3, 2], [2, 0]]) == -1\n    assert candidate(4, [[3, 0], [2, 0], [1, 0], [2, 3], [1, 2]]) == 1\n    assert candidate(4, [[3, 2], [0, 1], [3, 0], [3, 1], [2, 0]]) == 3\n    assert candidate(4, [[0, 3], [2, 3], [2, 1], [1, 0], [2, 0], [1, 3]]) == 2\n    assert candidate(4, [[1, 2], [2, 3], [0, 2], [0, 1], [0, 3], [1, 3]]) == 0\n    assert candidate(4, [[2, 1], [3, 1], [3, 0], [3, 2], [2, 0], [0, 1]]) == 3\n    assert candidate(4, [[2, 3], [2, 1], [0, 1], [0, 3], [3, 1], [0, 2]]) == 0\n    assert candidate(5, []) == -1\n    assert candidate(5, [[0, 2]]) == -1\n    assert candidate(5, [[2, 0]]) == -1\n    assert candidate(5, [[4, 0]]) == -1\n    assert candidate(5, [[1, 4], [2, 0]]) == -1\n    assert candidate(5, [[2, 0], [4, 3]]) == -1\n    assert candidate(5, [[3, 2], [0, 2]]) == -1\n    assert candidate(5, [[3, 4], [2, 1]]) == -1\n    assert candidate(5, [[0, 4], [1, 4], [0, 1]]) == -1\n    assert candidate(5, [[1, 3], [4, 2], [1, 0]]) == -1\n    assert candidate(5, [[2, 3], [4, 1], [3, 0]]) == -1\n    assert candidate(5, [[0, 4], [2, 0], [1, 3], [2, 4]]) == -1\n    assert candidate(5, [[0, 1], [2, 1], [4, 1], [4, 2], [4, 0]]) == -1\n    assert candidate(5, [[0, 2], [2, 1], [3, 2], [4, 1], [0, 4]]) == -1\n    assert candidate(5, [[2, 3], [0, 4], [1, 4], [1, 0], [4, 3]]) == -1\n    assert candidate(5, [[3, 1], [0, 2], [4, 2], [0, 1], [1, 2]]) == -1\n    assert candidate(5, [[3, 2], [3, 4], [3, 0], [3, 1], [0, 2]]) == 3\n    assert candidate(5, [[4, 0], [3, 0], [2, 4], [3, 4], [4, 1]]) == -1\n    assert candidate(5, [[4, 3], [1, 0], [1, 2], [3, 2], [4, 1]]) == 4\n    assert candidate(5, [[2, 1], [0, 3], [0, 1], [0, 4], [0, 2], [4, 1]]) == 0\n    assert candidate(5, [[2, 1], [4, 1], [3, 0], [2, 0], [3, 4], [3, 2]]) == 3\n    assert candidate(5, [[0, 1], [0, 4], [2, 0], [3, 4], [3, 1], [2, 1], [3, 0]]) == -1\n    assert candidate(5, [[1, 4], [3, 1], [0, 1], [3, 0], [0, 2], [2, 4], [3, 4]]) == 3\n    assert candidate(5, [[3, 2], [1, 2], [2, 0], [2, 4], [1, 4], [3, 1], [3, 4]]) == 3\n    assert candidate(5, [[0, 4], [0, 3], [4, 3], [4, 2], [1, 2], [4, 1], [0, 1], [3, 2]]) == 0\n    assert candidate(5, [[4, 3], [4, 2], [4, 1], [2, 3], [4, 0], [3, 1], [2, 0], [0, 3]]) == 4\n    assert candidate(5, [[1, 2], [1, 4], [2, 3], [0, 2], [1, 0], [1, 3], [0, 3], [4, 3], [0, 4]]) == 1\n    assert candidate(5, [[1, 3], [3, 0], [3, 4], [2, 0], [3, 2], [0, 4], [2, 4], [1, 0], [1, 2]]) == 1\n    assert candidate(5, [[3, 0], [4, 0], [3, 2], [0, 1], [0, 2], [4, 3], [1, 2], [4, 2], [3, 1]]) == 4\n    assert candidate(5, [[4, 0], [2, 3], [4, 3], [4, 2], [2, 0], [4, 1], [1, 3], [1, 0], [3, 0]]) == 4\n    assert candidate(5, [[0, 2], [1, 3], [4, 1], [4, 2], [2, 1], [0, 3], [0, 1], [2, 3], [0, 4], [4, 3]]) == 0\n    assert candidate(5, [[2, 0], [4, 0], [3, 4], [4, 2], [1, 2], [1, 0], [3, 1], [3, 0], [1, 4], [3, 2]]) == 3\n    assert candidate(6, []) == -1\n    assert candidate(6, [[2, 1]]) == -1\n    assert candidate(6, [[2, 3]]) == -1\n    assert candidate(6, [[3, 5]]) == -1\n    assert candidate(6, [[5, 4]]) == -1\n    assert candidate(6, [[1, 2], [4, 3]]) == -1\n    assert candidate(6, [[0, 4], [4, 5], [3, 1]]) == -1\n    assert candidate(6, [[0, 4], [5, 2], [5, 4], [3, 0], [1, 0]]) == -1\n    assert candidate(6, [[1, 0], [1, 4], [0, 2], [3, 5], [3, 4]]) == -1\n    assert candidate(6, [[5, 0], [2, 4], [0, 4], [3, 2], [2, 0]]) == -1\n    assert candidate(6, [[1, 2], [3, 2], [3, 5], [4, 0], [1, 5], [0, 5]]) == -1\n    assert candidate(6, [[3, 2], [1, 2], [3, 0], [5, 0], [5, 1], [5, 3]]) == -1\n    assert candidate(6, [[4, 2], [0, 4], [1, 3], [3, 4], [1, 2], [1, 0]]) == -1\n    assert candidate(6, [[0, 5], [2, 0], [1, 5], [3, 2], [2, 1], [2, 4], [4, 5]]) == 3\n\ndef test_check():\n    check(findChampion)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3190_minOperations", "language": "py", "prompt": "from typing import List\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"You are given two 0-indexed integer arrays, nums1 and nums2, both having length n.\nYou are allowed to perform a series of operations (possibly none).\nIn an operation, you select an index i in the range [0, n - 1] and swap the values of nums1[i] and nums2[i].\nYour task is to find the minimum number of operations required to satisfy the following conditions:\nnums1[n - 1] is equal to the maximum value among all elements of nums1, i.e., nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1]).\nnums2[n - 1] is equal to the maximum value among all elements of nums2, i.e., nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1]).\nReturn an integer denoting the minimum number of operations needed to meet both conditions, or -1 if it is impossible to satisfy both conditions.\nExample 1:\nInput: nums1 = [1,2,7], nums2 = [4,5,3]\nOutput: 1\nExplanation: In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.\nExample 2:\nInput: nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\nOutput: 2\nExplanation: In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.   \nExample 3:\nInput: nums1 = [1,5,4], nums2 = [2,5,3]\nOutput: -1\nExplanation: In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.\nConstraints:\n1 <= n == nums1.length == nums2.length <= 1000\n1 <= nums1[i] <= 109\n1 <= nums2[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3190_minOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 7], [4, 5, 3]) == 1\n    assert candidate([2, 3, 4, 5, 9], [8, 8, 4, 4, 4]) == 2\n    assert candidate([1, 5, 4], [2, 5, 3]) == -1\n    assert candidate([1], [1]) == 0\n    assert candidate([1, 2], [2, 1]) == 1\n    assert candidate([1, 1, 10], [1, 5, 1]) == 1\n    assert candidate([1, 4, 16], [16, 16, 16]) == 0\n    assert candidate([1, 5, 15], [1, 1, 1]) == 0\n    assert candidate([2, 5, 7], [2, 2, 2]) == 0\n    assert candidate([8, 9, 10], [10, 9, 9]) == 1\n    assert candidate([9, 14, 14], [14, 11, 14]) == 0\n    assert candidate([16, 16, 16], [6, 7, 16]) == 0\n    assert candidate([19, 7, 19], [5, 19, 19]) == 0\n    assert candidate([1, 1, 8, 9], [1, 7, 1, 1]) == 1\n    assert candidate([1, 5, 9, 9], [9, 9, 8, 9]) == 0\n    assert candidate([1, 7, 7, 7], [7, 3, 3, 7]) == 0\n    assert candidate([10, 18, 12, 12], [19, 6, 5, 12]) == -1\n    assert candidate([12, 9, 11, 12], [3, 9, 9, 9]) == 0\n    assert candidate([15, 54, 22, 54], [54, 19, 54, 54]) == 0\n    assert candidate([20, 20, 20, 20], [5, 8, 19, 20]) == 0\n    assert candidate([1, 3, 4, 6, 7], [1, 1, 1, 1, 1]) == 0\n    assert candidate([1, 11, 17, 1, 18], [1, 1, 1, 18, 1]) == 1\n    assert candidate([3, 3, 3, 14, 14], [3, 3, 4, 3, 3]) == 1\n    assert candidate([4, 4, 8, 4, 17], [4, 8, 4, 14, 4]) == 2\n    assert candidate([4, 12, 11, 11, 12], [12, 6, 12, 12, 12]) == 0\n    assert candidate([6, 21, 87, 63, 87], [87, 87, 23, 63, 63]) == 2\n    assert candidate([10, 6, 6, 6, 10], [6, 6, 10, 10, 6]) == 2\n    assert candidate([16, 12, 15, 15, 16], [8, 16, 16, 15, 15]) == 2\n    assert candidate([17, 3, 6, 6, 17], [3, 17, 6, 14, 6]) == 2\n    assert candidate([19, 13, 18, 18, 19], [5, 13, 13, 13, 13]) == 0\n    assert candidate([20, 20, 53, 20, 68], [20, 28, 20, 61, 20]) == 2\n    assert candidate([6, 6, 2, 4, 4, 6], [1, 1, 6, 4, 4, 4]) == 1\n    assert candidate([8, 6, 6, 6, 7, 8], [5, 8, 8, 8, 7, 7]) == 2\n    assert candidate([15, 1, 15, 6, 12, 15], [1, 15, 2, 15, 15, 15]) == 0\n    assert candidate([17, 13, 19, 9, 6, 14], [17, 14, 15, 1, 19, 19]) == -1\n    assert candidate([20, 8, 10, 12, 17, 20], [7, 20, 20, 20, 20, 20]) == 0\n    assert candidate([20, 18, 15, 11, 17, 20], [7, 15, 13, 7, 20, 12]) == -1\n    assert candidate([20, 20, 20, 20, 19, 20], [3, 6, 7, 15, 20, 20]) == 0\n    assert candidate([28, 43, 79, 32, 40, 3], [95, 25, 74, 16, 82, 56]) == -1\n    assert candidate([29, 81, 58, 99, 41, 36], [15, 34, 47, 57, 31, 95]) == -1\n    assert candidate([1, 1, 4, 1, 7, 1, 15], [1, 1, 1, 4, 1, 9, 1]) == 2\n    assert candidate([1, 4, 4, 4, 7, 4, 9], [9, 9, 4, 6, 4, 9, 4]) == 2\n    assert candidate([2, 88, 17, 88, 68, 68, 88], [88, 16, 88, 68, 68, 68, 68]) == 2\n    assert candidate([3, 3, 5, 3, 3, 3, 18], [3, 4, 3, 11, 13, 14, 3]) == 2\n    assert candidate([3, 41, 98, 71, 71, 71, 98], [98, 98, 49, 71, 85, 94, 71]) == 2\n    assert candidate([5, 5, 27, 53, 5, 59, 65], [5, 16, 5, 5, 58, 5, 5]) == 2\n    assert candidate([5, 6, 11, 11, 13, 11, 14], [14, 14, 11, 11, 11, 14, 11]) == 2\n    assert candidate([6, 5, 1, 10, 8, 4, 5], [3, 8, 8, 3, 6, 1, 4]) == -1\n    assert candidate([14, 3, 4, 4, 4, 4, 14], [2, 14, 4, 4, 5, 12, 4]) == 2\n    assert candidate([14, 28, 68, 68, 65, 67, 68], [68, 68, 49, 64, 68, 67, 67]) == 3\n    assert candidate([19, 19, 8, 9, 10, 13, 19], [1, 5, 19, 19, 19, 13, 13]) == 3\n    assert candidate([20, 6, 20, 20, 20, 20, 20], [3, 20, 7, 9, 13, 14, 20]) == 0\n    assert candidate([85, 85, 62, 85, 78, 84, 85], [5, 37, 85, 76, 85, 85, 85]) == 0\n    assert candidate([1, 2, 2, 2, 2, 2, 2, 10], [10, 2, 2, 2, 7, 8, 9, 2]) == 1\n    assert candidate([1, 9, 3, 3, 4, 9, 9, 9], [9, 2, 9, 9, 9, 6, 8, 9]) == 0\n    assert candidate([3, 3, 4, 3, 3, 3, 3, 8], [3, 3, 3, 5, 7, 7, 8, 3]) == 2\n    assert candidate([4, 8, 11, 19, 16, 16, 19, 19], [19, 19, 19, 13, 16, 16, 16, 16]) == 3\n    assert candidate([8, 20, 4, 9, 9, 4, 4, 20], [9, 14, 10, 1, 1, 20, 16, 15]) == 2\n    assert candidate([9, 9, 1, 2, 2, 6, 8, 9], [1, 1, 9, 2, 2, 2, 2, 2]) == 1\n    assert candidate([10, 4, 10, 9, 10, 10, 10, 10], [4, 10, 9, 9, 9, 9, 9, 9]) == 1\n    assert candidate([13, 95, 19, 56, 59, 95, 95, 95], [95, 14, 95, 95, 95, 83, 88, 95]) == 0\n    assert candidate([19, 7, 19, 8, 9, 15, 9, 19], [7, 19, 7, 19, 9, 9, 18, 9]) == 3\n    assert candidate([19, 19, 3, 3, 15, 16, 3, 19], [2, 2, 3, 7, 3, 3, 17, 3]) == 2\n    assert candidate([1, 8, 8, 5, 8, 8, 8, 7, 8], [8, 2, 4, 8, 5, 6, 6, 8, 8]) == 0\n    assert candidate([1, 10, 10, 5, 10, 8, 10, 10, 10], [10, 2, 4, 10, 7, 8, 8, 8, 8]) == 2\n    assert candidate([2, 7, 7, 7, 7, 7, 7, 17, 18], [18, 7, 10, 11, 13, 15, 17, 7, 7]) == 2\n    assert candidate([3, 13, 22, 24, 13, 13, 13, 81, 91], [91, 13, 13, 13, 45, 59, 71, 13, 13]) == 4\n    assert candidate([4, 4, 9, 4, 16, 4, 17, 4, 18], [4, 8, 4, 14, 4, 16, 4, 18, 4]) == 4\n    assert candidate([6, 9, 65, 13, 65, 65, 28, 28, 65], [65, 65, 13, 65, 24, 27, 28, 34, 28]) == 4\n    assert candidate([8, 3, 5, 6, 6, 3, 3, 3, 8], [1, 3, 3, 3, 3, 7, 7, 8, 3]) == 3\n    assert candidate([10, 1, 10, 10, 10, 9, 9, 9, 10], [1, 10, 5, 6, 8, 9, 9, 10, 9]) == 2\n    assert candidate([15, 15, 3, 5, 15, 15, 9, 13, 15], [1, 2, 15, 15, 6, 8, 9, 9, 9]) == 2\n    assert candidate([16, 3, 3, 7, 3, 11, 3, 3, 16], [2, 3, 6, 3, 10, 3, 15, 16, 3]) == 4\n    assert candidate([16, 3, 16, 7, 16, 16, 10, 10, 16], [2, 16, 4, 16, 9, 10, 10, 13, 10]) == 3\n    assert candidate([80, 80, 18, 39, 39, 62, 39, 39, 80], [2, 10, 80, 39, 42, 39, 66, 66, 39]) == 4\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 7, 1, 9], [9, 1, 3, 3, 3, 5, 5, 1, 9, 1]) == 2\n    assert candidate([1, 2, 2, 2, 2, 5, 8, 2, 2, 9], [9, 2, 2, 2, 4, 2, 2, 9, 9, 2]) == 3\n    assert candidate([1, 2, 18, 18, 10, 18, 18, 17, 18, 18], [18, 18, 5, 5, 18, 13, 14, 18, 18, 18]) == 0\n    assert candidate([1, 3, 1, 1, 1, 1, 16, 16, 1, 19], [1, 1, 7, 7, 9, 12, 1, 1, 18, 1]) == 4\n    assert candidate([1, 9, 3, 9, 4, 5, 7, 8, 8, 9], [9, 1, 9, 3, 9, 9, 7, 7, 7, 7]) == 4\n    assert candidate([2, 2, 2, 2, 10, 11, 2, 2, 2, 20], [2, 3, 9, 9, 2, 2, 12, 14, 19, 2]) == 3\n    assert candidate([3, 15, 6, 7, 7, 10, 7, 7, 15, 15], [15, 6, 15, 7, 9, 7, 12, 13, 7, 7]) == 4\n    assert candidate([5, 20, 20, 8, 8, 12, 20, 19, 20, 20], [20, 6, 7, 20, 20, 20, 15, 20, 20, 20]) == 0\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8, 6, 8], [1, 2, 3, 4, 4, 5, 5, 5, 8, 8]) == 0\n    assert candidate([9, 3, 3, 3, 3, 6, 7, 7, 3, 9], [3, 3, 4, 5, 5, 3, 3, 3, 7, 3]) == 4\n    assert candidate([9, 8, 6, 2, 1, 10, 9, 7, 9, 4], [6, 2, 8, 2, 5, 3, 6, 5, 6, 10]) == -1\n    assert candidate([10, 2, 2, 2, 3, 2, 2, 2, 2, 10], [1, 10, 2, 2, 2, 6, 6, 8, 10, 2]) == 3\n    assert candidate([12, 19, 10, 4, 17, 12, 18, 6, 7, 7], [20, 5, 15, 7, 10, 8, 2, 16, 14, 1]) == -1\n    assert candidate([17, 31, 31, 34, 31, 42, 31, 65, 31, 89], [89, 31, 32, 31, 37, 31, 45, 31, 84, 31]) == 4\n    assert candidate([19, 7, 7, 19, 9, 19, 19, 19, 17, 19], [6, 19, 19, 8, 19, 10, 10, 16, 19, 19]) == 0\n    assert candidate([20, 20, 7, 20, 8, 11, 11, 11, 11, 20], [5, 6, 20, 7, 20, 11, 15, 18, 20, 11]) == 4\n    assert candidate([90, 7, 90, 13, 90, 33, 33, 83, 33, 90], [6, 90, 13, 90, 22, 33, 62, 33, 86, 33]) == 4\n    assert candidate([1, 1, 1, 1, 1, 10, 1, 15, 16, 17, 20], [1, 2, 2, 9, 10, 1, 14, 1, 1, 1, 1]) == 5\n    assert candidate([1, 1, 1, 1, 3, 1, 1, 6, 1, 1, 8], [1, 1, 1, 3, 1, 3, 5, 1, 6, 7, 1]) == 3\n    assert candidate([1, 2, 2, 6, 2, 2, 2, 2, 2, 2, 10], [10, 2, 4, 2, 6, 6, 7, 8, 9, 9, 2]) == 2\n    assert candidate([1, 2, 3, 20, 8, 8, 19, 19, 19, 20, 20], [20, 20, 20, 5, 20, 20, 20, 19, 19, 19, 19]) == 3\n    assert candidate([1, 2, 4, 9, 5, 9, 9, 6, 7, 6, 9], [9, 9, 9, 4, 9, 5, 5, 6, 6, 7, 6]) == 5\n    assert candidate([1, 7, 7, 7, 7, 7, 13, 16, 7, 19, 19], [19, 7, 10, 11, 11, 12, 7, 7, 16, 7, 7]) == 4\n    assert candidate([1, 10, 4, 10, 10, 10, 6, 10, 7, 9, 10], [10, 3, 10, 5, 5, 6, 10, 7, 10, 9, 9]) == 4\n    assert candidate([1, 20, 20, 7, 20, 20, 13, 17, 17, 19, 20], [20, 2, 4, 20, 7, 7, 20, 20, 17, 17, 17]) == 4\n\ndef test_check():\n    check(minOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3191_maximumScoreAfterOperations", "language": "py", "prompt": "from typing import List\n\ndef maximumScoreAfterOperations(edges: List[List[int]], values: List[int]) -> int:\n    \"\"\"There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given\u00a0a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node.\nYou start with a score of 0. In one operation, you can:\n * Pick any node i.\n * Add values[i] to your score.\n * Set values[i] to 0.\nA tree is healthy if the sum of values on the path from the root to any leaf node is different than zero.\nReturn the maximum score you can obtain after performing these operations on the tree any number of times so that it remains healthy.\nExample 1:\n[https://assets.leetcode.com/uploads/2023/10/11/graph-13-1.png]\nInput: edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]\nOutput: 11\nExplanation: We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\nIt can be shown that 11 is the maximum score obtainable after any number of operations on the tree.\nExample 2:\n[https://assets.leetcode.com/uploads/2023/10/11/graph-14-2.png]\nInput: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]\nOutput: 40\nExplanation: We can choose nodes 0, 2, 3, and 4.\n- The sum of values on the path from 0 to 4 is equal to 10.\n- The sum of values on the path from 0 to 3 is equal to 10.\n- The sum of values on the path from 0 to 5 is equal to 3.\n- The sum of values on the path from 0 to 6 is equal to 5.\nTherefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\nIt can be shown that 40 is the maximum score obtainable after any number of operations on the tree.\nConstraints:\n * 2 <= n <= 2 * 104\n * edges.length == n - 1\n * edges[i].length == 2\n * 0 <= ai, bi < n\n * values.length == n\n * 1 <= values[i] <= 109\n * The input is generated such that edges represents a valid tree.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3191_maximumScoreAfterOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[0, 1], [0, 2], [0, 3], [2, 4], [4, 5]], [5, 2, 5, 2, 1, 1]) == 11\n    assert candidate([[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]], [20, 10, 9, 7, 4, 3, 5]) == 40\n    assert candidate([[0, 1]], [1, 2]) == 2\n    assert candidate([[0, 1]], [2, 1]) == 2\n    assert candidate([[0, 1], [0, 2]], [1000000000, 1000000000, 1000000000]) == 2000000000\n    assert candidate([[0, 1], [0, 2], [0, 3]], [1000000000, 1000000000, 1000000000, 1000000000]) == 3000000000\n    assert candidate([[7, 0], [3, 1], [6, 2], [4, 3], [4, 5], [4, 6], [4, 7]], [2, 16, 23, 17, 22, 21, 8, 6]) == 113\n    assert candidate([[3, 1], [0, 2], [0, 3]], [21, 12, 19, 5]) == 36\n    assert candidate([[2, 0], [4, 1], [5, 3], [4, 6], [2, 4], [5, 2], [5, 7]], [12, 12, 7, 9, 2, 11, 12, 25]) == 83\n    assert candidate([[1, 0], [9, 1], [6, 2], [7, 4], [3, 5], [7, 3], [9, 6], [7, 8], [7, 9]], [14, 17, 13, 18, 17, 10, 23, 19, 22, 2]) == 153\n    assert candidate([[5, 0], [4, 3], [2, 5], [6, 2], [4, 6], [1, 4], [1, 7]], [15, 12, 13, 23, 8, 1, 2, 23]) == 96\n    assert candidate([[0, 2], [1, 3], [0, 5], [1, 0], [4, 1], [4, 6]], [22, 25, 4, 21, 8, 20, 4]) == 82\n    assert candidate([[4, 1], [6, 3], [2, 4], [0, 2], [9, 5], [0, 6], [9, 7], [0, 8], [0, 9]], [3, 18, 10, 16, 9, 3, 25, 17, 8, 9]) == 115\n    assert candidate([[6, 1], [3, 4], [0, 3], [2, 0], [5, 2], [5, 6]], [25, 20, 16, 2, 13, 8, 19]) == 93\n    assert candidate([[9, 2], [5, 4], [5, 6], [1, 5], [8, 1], [0, 7], [3, 0], [9, 3], [8, 9]], [21, 13, 10, 14, 20, 11, 19, 22, 3, 16]) == 128\n    assert candidate([[2, 4], [1, 5], [0, 1], [2, 0], [3, 2], [3, 6]], [17, 5, 24, 18, 6, 16, 1]) == 75\n    assert candidate([[1, 2], [4, 1], [3, 6], [4, 3], [5, 4], [0, 5], [0, 7]], [8, 13, 19, 13, 4, 3, 24, 25]) == 101\n    assert candidate([[9, 0], [7, 1], [6, 3], [8, 4], [2, 5], [9, 6], [2, 8], [7, 2], [7, 9]], [4, 13, 21, 1, 25, 8, 21, 22, 9, 18]) == 138\n    assert candidate([[1, 0], [4, 3], [1, 5], [6, 1], [4, 6], [2, 7], [4, 2], [4, 8]], [10, 5, 25, 19, 2, 20, 15, 3, 3]) == 97\n    assert candidate([[6, 1], [3, 4], [2, 5], [0, 6], [3, 0], [2, 3], [2, 7]], [2, 23, 10, 20, 22, 10, 6, 24]) == 115\n    assert candidate([[2, 1], [0, 2], [5, 0], [4, 3], [5, 4], [5, 6]], [9, 21, 12, 20, 5, 2, 13]) == 73\n    assert candidate([[8, 1], [7, 4], [0, 5], [2, 0], [3, 2], [8, 3], [7, 6], [7, 8]], [23, 24, 25, 12, 12, 7, 1, 17, 17]) == 119\n    assert candidate([[3, 0], [3, 1], [2, 3]], [19, 8, 8, 5]) == 35\n    assert candidate([[5, 0], [7, 1], [3, 2], [6, 4], [6, 5], [3, 6], [3, 7]], [19, 7, 17, 9, 13, 7, 25, 3]) == 93\n    assert candidate([[3, 1], [2, 3], [0, 2], [0, 4]], [14, 15, 18, 15, 20]) == 68\n    assert candidate([[6, 0], [2, 1], [6, 2], [6, 4], [5, 7], [6, 5], [3, 6], [9, 3], [8, 9]], [17, 20, 17, 13, 5, 12, 8, 12, 14, 25]) == 135\n    assert candidate([[4, 1], [6, 2], [9, 3], [0, 6], [0, 7], [9, 0], [4, 8], [5, 4], [5, 9]], [11, 16, 10, 25, 21, 25, 15, 10, 5, 7]) == 134\n    assert candidate([[1, 0], [3, 1], [2, 3]], [25, 19, 12, 2]) == 56\n    assert candidate([[4, 1], [0, 2], [4, 0], [3, 4]], [12, 24, 1, 11, 3]) == 47\n    assert candidate([[1, 0], [5, 1], [2, 4], [3, 2], [3, 5]], [21, 2, 17, 18, 22, 16]) == 94\n    assert candidate([[5, 1], [4, 3], [2, 4], [6, 2], [0, 5], [0, 6]], [18, 24, 5, 20, 23, 6, 7]) == 92\n    assert candidate([[4, 1], [6, 3], [2, 4], [5, 2], [0, 5], [0, 6]], [19, 2, 23, 18, 3, 12, 9]) == 75\n    assert candidate([[5, 0], [2, 1], [6, 3], [5, 4], [2, 5], [2, 6]], [22, 11, 2, 11, 3, 11, 17]) == 72\n    assert candidate([[6, 0], [4, 1], [3, 2], [6, 5], [4, 6], [3, 4], [3, 7], [3, 8]], [18, 20, 14, 23, 20, 8, 24, 12, 1]) == 122\n    assert candidate([[1, 2], [0, 1], [0, 3], [0, 4]], [6, 8, 2, 16, 6]) == 32\n    assert candidate([[6, 1], [3, 4], [3, 5], [0, 3], [2, 0], [2, 6]], [5, 25, 2, 12, 15, 3, 3]) == 60\n    assert candidate([[4, 0], [2, 1], [2, 3], [2, 4]], [9, 5, 14, 24, 19]) == 62\n    assert candidate([[4, 0], [2, 1], [6, 3], [2, 5], [4, 6], [2, 4], [7, 2], [7, 8]], [19, 10, 14, 18, 17, 8, 2, 8, 24]) == 104\n    assert candidate([[6, 0], [7, 1], [5, 3], [2, 4], [8, 5], [6, 7], [2, 6], [2, 8]], [8, 8, 19, 17, 24, 1, 7, 18, 12]) == 107\n    assert candidate([[6, 0], [3, 1], [3, 2], [3, 6], [4, 3], [5, 4], [5, 7]], [15, 3, 25, 2, 10, 11, 10, 13]) == 87\n    assert candidate([[7, 3], [2, 5], [4, 2], [0, 4], [7, 0], [1, 6], [1, 7]], [1, 19, 5, 1, 18, 24, 4, 20]) == 91\n    assert candidate([[7, 3], [2, 4], [9, 2], [1, 5], [1, 7], [0, 1], [9, 0], [6, 8], [6, 9]], [21, 10, 9, 25, 7, 20, 5, 8, 20, 5]) == 115\n    assert candidate([[3, 1], [4, 5], [0, 4], [2, 0], [3, 2], [3, 6]], [13, 11, 16, 12, 20, 1, 7]) == 67\n    assert candidate([[2, 0], [3, 1], [6, 2], [6, 3], [5, 4], [7, 5], [6, 7]], [21, 20, 8, 21, 11, 12, 23, 4]) == 112\n    assert candidate([[0, 2], [7, 4], [1, 6], [5, 1], [3, 5], [0, 3], [0, 7]], [8, 6, 9, 5, 4, 1, 8, 6]) == 39\n    assert candidate([[5, 1], [8, 3], [0, 4], [8, 0], [2, 5], [2, 7], [9, 2], [6, 8], [6, 9]], [2, 22, 2, 19, 25, 14, 11, 24, 7, 6]) == 130\n    assert candidate([[3, 0], [3, 1], [2, 3]], [24, 24, 4, 12]) == 52\n    assert candidate([[2, 0], [3, 1], [2, 3]], [7, 10, 13, 8]) == 31\n    assert candidate([[1, 0], [3, 1], [6, 4], [3, 5], [2, 3], [2, 6]], [6, 14, 4, 17, 16, 19, 24]) == 94\n    assert candidate([[0, 1], [3, 0], [8, 3], [2, 4], [8, 5], [2, 6], [8, 2], [7, 8]], [22, 19, 10, 16, 14, 11, 2, 17, 9]) == 98\n    assert candidate([[5, 1], [5, 2], [0, 3], [0, 4], [0, 5]], [21, 18, 2, 20, 1, 1]) == 42\n    assert candidate([[6, 0], [3, 2], [1, 3], [6, 4], [1, 5], [1, 6]], [14, 19, 22, 6, 19, 12, 20]) == 98\n    assert candidate([[6, 0], [4, 1], [2, 3], [5, 2], [6, 4], [5, 6]], [16, 16, 9, 12, 5, 14, 17]) == 75\n    assert candidate([[2, 1], [4, 2], [0, 3], [0, 4]], [9, 6, 7, 17, 19]) == 49\n    assert candidate([[1, 3], [2, 1], [4, 5], [2, 4], [0, 2], [0, 6]], [4, 19, 10, 25, 16, 13, 6]) == 89\n    assert candidate([[1, 0], [5, 1], [2, 5], [3, 2], [4, 6], [3, 4], [3, 7]], [12, 9, 19, 10, 24, 22, 18, 16]) == 121\n    assert candidate([[0, 1], [0, 2], [0, 3]], [25, 23, 7, 9]) == 39\n    assert candidate([[3, 0], [3, 2], [4, 5], [9, 6], [4, 7], [9, 4], [3, 8], [1, 3], [1, 9]], [23, 22, 7, 22, 19, 12, 10, 11, 24, 3]) == 131\n    assert candidate([[0, 1], [0, 2], [0, 3]], [9, 8, 24, 21]) == 53\n    assert candidate([[3, 1], [0, 2], [0, 3]], [17, 2, 2, 4]) == 21\n    assert candidate([[5, 2], [3, 4], [0, 3], [1, 0], [1, 5]], [16, 6, 15, 15, 10, 1]) == 52\n    assert candidate([[8, 0], [8, 1], [7, 2], [3, 7], [6, 3], [4, 6], [5, 4], [5, 8]], [10, 25, 10, 6, 21, 17, 11, 15, 15]) == 120\n    assert candidate([[0, 4], [1, 5], [2, 6], [0, 2], [1, 0], [3, 1], [3, 7]], [20, 1, 16, 12, 5, 23, 21, 4]) == 82\n    assert candidate([[7, 1], [5, 2], [0, 3], [7, 0], [7, 4], [6, 5], [6, 7]], [6, 20, 14, 17, 18, 16, 11, 1]) == 97\n    assert candidate([[3, 2], [8, 4], [1, 6], [0, 1], [5, 0], [3, 5], [8, 3], [7, 8]], [3, 18, 16, 22, 10, 2, 7, 3, 10]) == 88\n    assert candidate([[4, 0], [3, 4], [3, 5], [3, 6], [2, 3], [1, 2], [1, 7]], [12, 14, 7, 25, 13, 16, 12, 15]) == 102\n    assert candidate([[3, 0], [5, 2], [1, 3], [4, 1], [4, 5]], [11, 18, 19, 14, 8, 11]) == 73\n    assert candidate([[1, 2], [4, 1], [0, 4], [8, 5], [0, 6], [7, 0], [3, 7], [3, 8]], [17, 22, 14, 15, 2, 21, 7, 9, 1]) == 98\n    assert candidate([[2, 1], [0, 2], [4, 3], [0, 4], [0, 5]], [1, 2, 24, 25, 9, 24]) == 84\n    assert candidate([[3, 1], [3, 2], [0, 4], [3, 5], [0, 3], [0, 6]], [21, 19, 5, 20, 2, 25, 20]) == 91\n    assert candidate([[1, 0], [4, 1], [4, 2], [3, 4]], [3, 6, 17, 4, 20]) == 47\n    assert candidate([[6, 1], [2, 3], [6, 7], [4, 6], [2, 4], [5, 2], [5, 8], [0, 5], [0, 9]], [23, 19, 15, 4, 3, 18, 25, 22, 6, 11]) == 123\n    assert candidate([[2, 0], [1, 2], [5, 1], [3, 4], [3, 5]], [23, 24, 10, 15, 10, 22]) == 94\n    assert candidate([[1, 0], [6, 1], [6, 2], [4, 3], [5, 4], [5, 6]], [18, 21, 3, 13, 25, 15, 20]) == 99\n    assert candidate([[1, 0], [3, 1], [2, 3]], [23, 10, 24, 15]) == 62\n    assert candidate([[1, 0], [1, 2], [1, 3]], [10, 4, 12, 14]) == 36\n    assert candidate([[2, 0], [3, 2], [1, 3], [4, 5], [1, 4], [1, 6]], [3, 8, 13, 11, 6, 18, 8]) == 64\n    assert candidate([[3, 0], [3, 2], [1, 3], [1, 4]], [18, 19, 7, 7, 2]) == 46\n    assert candidate([[7, 0], [5, 2], [1, 3], [7, 4], [1, 5], [7, 1], [6, 7]], [24, 24, 16, 17, 25, 9, 3, 23]) == 118\n    assert candidate([[2, 0], [2, 1], [2, 3]], [25, 12, 5, 7]) == 44\n    assert candidate([[0, 1], [2, 0], [2, 3], [2, 4]], [24, 14, 9, 5, 24]) == 53\n    assert candidate([[6, 2], [7, 3], [0, 5], [4, 0], [1, 6], [4, 1], [4, 7]], [20, 15, 15, 2, 22, 7, 19, 24]) == 104\n    assert candidate([[1, 0], [4, 2], [7, 5], [3, 6], [1, 3], [4, 1], [4, 7]], [11, 21, 15, 23, 2, 7, 21, 3]) == 92\n    assert candidate([[4, 0], [2, 1], [2, 3], [2, 4]], [22, 20, 20, 8, 14]) == 70\n    assert candidate([[0, 2], [4, 3], [0, 4], [1, 0], [1, 6], [5, 1], [5, 7]], [18, 10, 19, 9, 11, 14, 11, 18]) == 92\n    assert candidate([[6, 1], [4, 2], [4, 3], [0, 5], [4, 0], [4, 6]], [18, 10, 5, 23, 16, 13, 1]) == 68\n    assert candidate([[4, 0], [6, 2], [6, 3], [6, 4], [1, 5], [7, 1], [6, 7]], [14, 15, 22, 9, 13, 2, 25, 3]) == 90\n    assert candidate([[6, 2], [0, 3], [5, 0], [1, 5], [4, 1], [4, 6]], [22, 10, 19, 14, 18, 24, 8]) == 93\n    assert candidate([[0, 1], [0, 2], [0, 3]], [6, 22, 9, 5]) == 36\n    assert candidate([[2, 1], [0, 2], [6, 0], [6, 4], [3, 5], [3, 6], [3, 7]], [9, 16, 13, 9, 19, 1, 16, 19]) == 93\n    assert candidate([[3, 5], [7, 3], [0, 6], [4, 0], [1, 4], [2, 1], [2, 7]], [16, 9, 8, 14, 6, 18, 23, 25]) == 103\n    assert candidate([[7, 1], [4, 5], [3, 6], [4, 3], [2, 4], [0, 2], [0, 7]], [7, 22, 12, 22, 5, 3, 6, 7]) == 77\n    assert candidate([[5, 0], [4, 1], [5, 2], [3, 5], [4, 3], [7, 4], [6, 7]], [19, 16, 8, 13, 15, 13, 3, 5]) == 79\n    assert candidate([[7, 1], [6, 2], [3, 5], [8, 3], [0, 6], [4, 0], [7, 4], [7, 8]], [23, 11, 22, 6, 19, 6, 19, 8, 25]) == 116\n    assert candidate([[4, 0], [4, 2], [1, 3], [4, 1], [4, 5]], [23, 22, 13, 1, 11, 25]) == 84\n    assert candidate([[4, 0], [4, 1], [2, 3], [2, 4]], [3, 17, 5, 24, 14]) == 60\n    assert candidate([[4, 0], [2, 4], [1, 2], [3, 1], [3, 5]], [6, 12, 21, 6, 8, 8]) == 55\n    assert candidate([[4, 2], [5, 4], [0, 5], [0, 6], [3, 0], [1, 3], [7, 8], [1, 7], [1, 9]], [25, 16, 16, 14, 22, 19, 2, 22, 13, 11]) == 135\n    assert candidate([[4, 0], [1, 3], [4, 1], [7, 5], [2, 6], [4, 2], [4, 7]], [23, 16, 24, 25, 3, 21, 3, 25]) == 137\n    assert candidate([[0, 1], [2, 0], [2, 3]], [22, 17, 9, 9]) == 35\n\ndef test_check():\n    check(maximumScoreAfterOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3192_maximumXorProduct", "language": "py", "prompt": "def maximumXorProduct(a: int, b: int, n: int) -> int:\n    \"\"\"Given three integers a, b, and n, return the maximum value of (a XOR x) * (b XOR x) where 0 <= x < 2n.\nSince the answer may be too large, return it modulo 109 + 7.\nNote that XOR is the bitwise XOR operation.\nExample 1:\nInput: a = 12, b = 5, n = 4\nOutput: 98\nExplanation: For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \nIt can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\nExample 2:\nInput: a = 6, b = 7 , n = 5\nOutput: 930\nExplanation: For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\nIt can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\nExample 3:\nInput: a = 1, b = 6, n = 3\nOutput: 12\nExplanation: For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\nIt can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\nConstraints:\n0 <= a, b < 250\n0 <= n <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3192_maximumXorProduct.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(12, 5, 4) == 98\n    assert candidate(6, 7, 5) == 930\n    assert candidate(1, 6, 3) == 12\n    assert candidate(0, 0, 1) == 1\n    assert candidate(0, 1, 6) == 3906\n    assert candidate(0, 2, 7) == 15875\n    assert candidate(0, 3, 1) == 2\n    assert candidate(0, 4, 0) == 0\n    assert candidate(0, 5, 6) == 3658\n    assert candidate(0, 6, 1) == 7\n    assert candidate(0, 7, 2) == 12\n    assert candidate(0, 8, 5) == 713\n    assert candidate(0, 9, 2) == 30\n    assert candidate(0, 10, 7) == 14875\n    assert candidate(0, 11, 4) == 84\n    assert candidate(0, 12, 2) == 45\n    assert candidate(0, 13, 2) == 42\n    assert candidate(0, 14, 0) == 0\n    assert candidate(0, 15, 6) == 3080\n    assert candidate(1, 0, 3) == 42\n    assert candidate(1, 1, 4) == 225\n    assert candidate(1, 2, 6) == 3782\n    assert candidate(1, 3, 2) == 3\n    assert candidate(1, 4, 5) == 810\n    assert candidate(1, 5, 4) == 165\n    assert candidate(1, 6, 4) == 132\n    assert candidate(1, 7, 2) == 15\n    assert candidate(1, 8, 0) == 8\n    assert candidate(1, 9, 2) == 33\n    assert candidate(1, 10, 7) == 14756\n    assert candidate(1, 11, 7) == 14875\n    assert candidate(1, 12, 7) == 14518\n    assert candidate(1, 13, 0) == 13\n    assert candidate(1, 14, 5) == 552\n    assert candidate(1, 15, 4) == 63\n    assert candidate(2, 0, 0) == 0\n    assert candidate(2, 1, 0) == 2\n    assert candidate(2, 2, 0) == 4\n    assert candidate(2, 3, 5) == 930\n    assert candidate(2, 4, 4) == 143\n    assert candidate(2, 5, 5) == 756\n    assert candidate(2, 6, 4) == 165\n    assert candidate(2, 7, 3) == 18\n    assert candidate(2, 8, 1) == 27\n    assert candidate(2, 9, 2) == 24\n    assert candidate(2, 10, 5) == 713\n    assert candidate(2, 11, 0) == 22\n    assert candidate(2, 12, 2) == 39\n    assert candidate(2, 13, 1) == 36\n    assert candidate(2, 14, 0) == 28\n    assert candidate(2, 15, 2) == 42\n    assert candidate(3, 0, 6) == 3782\n    assert candidate(3, 1, 6) == 3843\n    assert candidate(3, 2, 2) == 6\n    assert candidate(3, 3, 7) == 16129\n    assert candidate(3, 4, 5) == 756\n    assert candidate(3, 5, 4) == 143\n    assert candidate(3, 6, 2) == 18\n    assert candidate(3, 7, 2) == 21\n    assert candidate(3, 8, 6) == 3300\n    assert candidate(3, 9, 1) == 27\n    assert candidate(3, 10, 5) == 690\n    assert candidate(3, 11, 1) == 33\n    assert candidate(3, 12, 1) == 36\n    assert candidate(3, 13, 2) == 39\n    assert candidate(3, 14, 0) == 42\n    assert candidate(3, 15, 6) == 3245\n    assert candidate(4, 0, 4) == 165\n    assert candidate(4, 1, 2) == 18\n    assert candidate(4, 2, 2) == 15\n    assert candidate(4, 3, 0) == 12\n    assert candidate(4, 4, 3) == 49\n    assert candidate(4, 5, 3) == 42\n    assert candidate(4, 6, 2) == 35\n    assert candidate(4, 7, 3) == 30\n    assert candidate(4, 8, 4) == 77\n    assert candidate(4, 9, 7) == 14518\n    assert candidate(4, 10, 0) == 40\n    assert candidate(4, 11, 5) == 552\n    assert candidate(4, 12, 6) == 3465\n    assert candidate(4, 13, 7) == 14994\n    assert candidate(4, 14, 5) == 667\n    assert candidate(4, 15, 6) == 3300\n    assert candidate(5, 0, 1) == 4\n    assert candidate(5, 1, 3) == 21\n    assert candidate(5, 2, 2) == 12\n    assert candidate(5, 3, 7) == 15375\n    assert candidate(5, 4, 7) == 16002\n    assert candidate(5, 5, 0) == 25\n    assert candidate(5, 6, 1) == 30\n    assert candidate(5, 7, 0) == 35\n    assert candidate(5, 8, 2) == 70\n    assert candidate(5, 9, 4) == 77\n    assert candidate(5, 10, 5) == 552\n    assert candidate(5, 11, 7) == 14399\n    assert candidate(5, 12, 1) == 60\n    assert candidate(5, 13, 5) == 713\n    assert candidate(5, 14, 4) == 84\n    assert candidate(5, 15, 0) == 75\n    assert candidate(6, 0, 4) == 143\n\ndef test_check():\n    check(maximumXorProduct)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3193_maximumStrongPairXor", "language": "py", "prompt": "from typing import List\n\ndef maximumStrongPairXor(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition:\n|x - y| <= min(x, y)\nYou need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array.\nReturn the maximum XOR value out of all possible strong pairs in the array nums.\nNote that you can pick the same integer twice to form a pair.\nExample 1:\nInput: nums = [1,2,3,4,5]\nOutput: 7\nExplanation: There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\nExample 2:\nInput: nums = [10,100]\nOutput: 0\nExplanation: There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\nExample 3:\nInput: nums = [5,6,25,30]\nOutput: 7\nExplanation: There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.\nConstraints:\n1 <= nums.length <= 50\n1 <= nums[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3193_maximumStrongPairXor.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 7\n    assert candidate([10, 100]) == 0\n    assert candidate([5, 6, 25, 30]) == 7\n    assert candidate([1]) == 0\n    assert candidate([100]) == 0\n    assert candidate([1, 1, 2, 3, 5]) == 6\n    assert candidate([1, 1, 3, 8, 7]) == 15\n    assert candidate([1, 1, 4, 4, 3]) == 7\n    assert candidate([1, 1, 6, 6, 9]) == 15\n    assert candidate([1, 1, 10, 3, 9]) == 3\n    assert candidate([1, 2, 1, 5, 3]) == 6\n    assert candidate([1, 2, 2, 1, 2]) == 3\n    assert candidate([1, 2, 3, 8, 1]) == 3\n    assert candidate([1, 2, 5, 5, 10]) == 15\n    assert candidate([1, 2, 8, 3, 2]) == 3\n    assert candidate([1, 2, 9, 2, 8]) == 3\n    assert candidate([1, 3, 3, 2, 1]) == 3\n    assert candidate([1, 3, 8, 5, 3]) == 13\n    assert candidate([1, 3, 9, 6, 5]) == 15\n    assert candidate([1, 4, 1, 2, 5]) == 6\n    assert candidate([1, 4, 3, 9, 7]) == 14\n    assert candidate([1, 4, 4, 3, 4]) == 7\n    assert candidate([1, 4, 5, 2, 1]) == 6\n    assert candidate([1, 4, 8, 6, 6]) == 14\n    assert candidate([1, 5, 1, 9, 1]) == 12\n    assert candidate([1, 5, 4, 1, 7]) == 3\n    assert candidate([1, 5, 5, 2, 7]) == 3\n    assert candidate([1, 5, 9, 1, 2]) == 12\n    assert candidate([1, 5, 9, 10, 4]) == 15\n    assert candidate([1, 6, 2, 7, 9]) == 15\n    assert candidate([1, 6, 3, 3, 10]) == 12\n    assert candidate([1, 6, 4, 5, 3]) == 7\n    assert candidate([1, 6, 4, 6, 1]) == 2\n    assert candidate([1, 6, 5, 5, 8]) == 14\n    assert candidate([1, 6, 6, 1, 9]) == 15\n    assert candidate([1, 6, 8, 5, 3]) == 14\n    assert candidate([1, 6, 8, 10, 3]) == 14\n    assert candidate([1, 6, 9, 8, 2]) == 15\n    assert candidate([1, 6, 10, 1, 2]) == 12\n    assert candidate([1, 7, 1, 4, 3]) == 7\n    assert candidate([1, 7, 2, 1, 10]) == 13\n    assert candidate([1, 7, 2, 10, 10]) == 13\n    assert candidate([1, 7, 6, 1, 4]) == 3\n    assert candidate([1, 7, 8, 6, 8]) == 15\n    assert candidate([1, 8, 1, 1, 8]) == 0\n    assert candidate([1, 8, 4, 2, 1]) == 12\n    assert candidate([1, 8, 4, 5, 6]) == 14\n    assert candidate([1, 8, 5, 10, 4]) == 15\n    assert candidate([1, 8, 8, 8, 3]) == 0\n    assert candidate([1, 8, 10, 2, 6]) == 14\n    assert candidate([1, 9, 4, 4, 2]) == 6\n    assert candidate([1, 9, 6, 5, 7]) == 15\n    assert candidate([1, 9, 6, 8, 1]) == 15\n    assert candidate([1, 9, 8, 2, 8]) == 3\n    assert candidate([1, 9, 8, 9, 6]) == 15\n    assert candidate([1, 9, 9, 7, 6]) == 15\n    assert candidate([1, 10, 1, 1, 1]) == 0\n    assert candidate([1, 10, 5, 10, 6]) == 15\n    assert candidate([1, 10, 8, 7, 2]) == 15\n    assert candidate([1, 10, 9, 9, 2]) == 3\n    assert candidate([2, 1, 1, 5, 5]) == 3\n    assert candidate([2, 1, 1, 7, 4]) == 6\n    assert candidate([2, 1, 8, 3, 2]) == 3\n    assert candidate([2, 1, 9, 2, 1]) == 3\n    assert candidate([2, 2, 4, 1, 4]) == 6\n    assert candidate([2, 2, 5, 5, 1]) == 3\n    assert candidate([2, 2, 5, 10, 6]) == 15\n    assert candidate([2, 2, 8, 2, 10]) == 2\n    assert candidate([2, 2, 10, 5, 9]) == 15\n    assert candidate([2, 3, 3, 5, 3]) == 6\n    assert candidate([2, 3, 8, 8, 10]) == 2\n    assert candidate([2, 4, 5, 3, 2]) == 7\n    assert candidate([2, 4, 6, 8, 8]) == 14\n    assert candidate([2, 4, 6, 9, 8]) == 15\n    assert candidate([2, 4, 8, 7, 5]) == 15\n    assert candidate([2, 4, 10, 4, 2]) == 6\n    assert candidate([2, 4, 10, 6, 2]) == 12\n    assert candidate([2, 4, 10, 7, 8]) == 15\n    assert candidate([2, 4, 10, 9, 3]) == 7\n    assert candidate([2, 5, 2, 5, 5]) == 0\n    assert candidate([2, 5, 3, 10, 10]) == 15\n    assert candidate([2, 5, 7, 2, 7]) == 2\n    assert candidate([2, 5, 9, 8, 9]) == 13\n    assert candidate([2, 5, 10, 8, 4]) == 15\n    assert candidate([2, 6, 1, 6, 4]) == 6\n    assert candidate([2, 6, 1, 8, 7]) == 15\n    assert candidate([2, 6, 7, 4, 2]) == 6\n    assert candidate([2, 6, 8, 6, 10]) == 14\n    assert candidate([2, 6, 10, 5, 4]) == 15\n    assert candidate([2, 7, 1, 8, 9]) == 15\n    assert candidate([2, 7, 2, 8, 10]) == 15\n    assert candidate([2, 7, 3, 3, 7]) == 1\n    assert candidate([2, 7, 4, 8, 1]) == 15\n    assert candidate([2, 7, 9, 2, 6]) == 15\n    assert candidate([2, 7, 10, 7, 1]) == 13\n    assert candidate([2, 8, 1, 9, 5]) == 13\n    assert candidate([2, 8, 7, 10, 3]) == 15\n    assert candidate([2, 9, 1, 7, 7]) == 14\n    assert candidate([2, 9, 2, 8, 2]) == 1\n    assert candidate([2, 9, 5, 10, 10]) == 15\n\ndef test_check():\n    check(maximumStrongPairXor)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3194_findWordsContaining", "language": "py", "prompt": "from typing import List\n\ndef findWordsContaining(words: List[str], x: str) -> List[int]:\n    \"\"\"You are given a 0-indexed array of strings words and a character x.\nReturn an array of indices representing the words that contain the character x.\nNote that the returned array may be in any order.\nExample 1:\nInput: words = [\"leet\",\"code\"], x = \"e\"\nOutput: [0,1]\nExplanation: \"e\" occurs in both words: \"leet\", and \"code\". Hence, we return indices 0 and 1.\nExample 2:\nInput: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\"\nOutput: [0,2]\nExplanation: \"a\" occurs in \"abc\", and \"aaaa\". Hence, we return indices 0 and 2.\nExample 3:\nInput: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\"\nOutput: []\nExplanation: \"z\" does not occur in any of the words. Hence, we return an empty array.\nConstraints:\n1 <= words.length <= 50\n1 <= words[i].length <= 50\nx is a lowercase English letter.\nwords[i] consists only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3194_findWordsContaining.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(['leet', 'code'], e) == [0, 1]\n    assert candidate(['abc', 'bcd', 'aaaa', 'cbc'], a) == [0, 2]\n    assert candidate(['abc', 'bcd', 'aaaa', 'cbc'], z) == []\n    assert candidate(['sgtkshnss', 'm', 'ryvbkyvuz', 'ezittyjwgb', 'wudlwg'], x) == []\n    assert candidate(['lkwnhpbj', 'tlohm', 'juazsb', 'f', 'rq'], v) == []\n    assert candidate(['aaa', 'imvtfjmxr', 'wbzfoovjnf', 'hqwrwmi'], c) == []\n    assert candidate(['utyeachht', 'bgpkcs', 'skeecqvvvw', 'nccrd'], i) == []\n    assert candidate(['alcpxexztg', 'r'], h) == []\n    assert candidate(['ekcpg', 'pdknua', 'fot', 'janppw', 'ofomkfvx'], g) == [0]\n    assert candidate(['dq', 'rlvopu'], d) == [0]\n    assert candidate(['wzppkd', 'jxvk', 'zaztizmwuv', 'hvcdtobr'], b) == [3]\n    assert candidate(['y', 'hs', 'qznrkpi'], v) == []\n    assert candidate(['pze', 'yojczsb', 'mjvyr', 'i', 'xsygks'], q) == []\n    assert candidate(['qsgtjagcu', 'm'], e) == []\n    assert candidate(['kidtwmw', 'ogh', 'trdedlh', 'wwbtlindg', 'naoylytpof', 'ujcbzwzkm', 'doamcoxdv'], o) == [1, 4, 6]\n    assert candidate(['tsmeupctki'], t) == [0]\n    assert candidate(['dqxlbljmpf', 'uvdzfoiqg', 'jsnbnx', 'fbedae', 'nodewb', 'o', 'ivepktj'], g) == [1]\n    assert candidate(['fjlmmecm', 'sautsoorhl', 'n', 'hsyco', 'amlukrpjpv', 'rmhdnj', 'g'], e) == [0]\n    assert candidate(['khjchmeciv', 'vgx', 'xghr', 'bbufgegu', 'qyfxu'], r) == [2]\n    assert candidate(['jhtcugtcpl', 'bvhlgmmla', 'ntfkwzite', 'imbtzafaj', 'sdl', 't'], m) == [1, 3]\n    assert candidate(['kxoziqoafc', 'vifcxifq'], q) == [0, 1]\n    assert candidate(['ckfkjjsonl', 'scaaug', 'rmvqzyiwc', 'a', 'smymw'], p) == []\n    assert candidate(['t', 'exo', 'npr', 'skd', 'bxpmbu'], e) == [1]\n    assert candidate(['eulsl', 'fwooyct', 'ypytexil'], c) == [1]\n    assert candidate(['nhd', 'zheyegi', 'ogz', 'fpybmcc', 'ntbbwtde'], g) == [1, 2]\n    assert candidate(['gwzvusl', 'upcpvbfyxy', 'hg', 'yu', 'wsfqgzhh', 'zgphqacsyo'], o) == [5]\n    assert candidate(['uiovpph', 'xxj', 'uwzxzvkobk'], r) == []\n    assert candidate(['abtrpwo', 'sgaegnavk', 'pfmv'], z) == []\n    assert candidate(['m', 'fxtphsdmgy', 'otq', 'vwuhhnebr', 'yen'], y) == [1, 4]\n    assert candidate(['irlzx', 'lbrknhl', 'roupfj', 'fskaieszo', 'nz', 'ijfyejq'], e) == [3, 5]\n    assert candidate(['raavc', 'tx'], l) == []\n    assert candidate(['bkpuvcrexw', 'hxtbcdprhr', 'ovt', 'xgurm', 'pjcz', 'sbhwpjmyz'], g) == [3]\n    assert candidate(['f', 'xlmy', 'akbiqa', 'fobo'], s) == []\n    assert candidate(['mhan'], a) == [0]\n    assert candidate(['uisx'], o) == []\n    assert candidate(['znqdolksyn', 'keewspe', 'ffod', 'lah', 'gadhym', 'awnyymd', 'fvkl'], v) == [6]\n    assert candidate(['ftujx', 'dnbwrurk', 't', 'x', 'zjzhdl', 'jc'], t) == [0, 2]\n    assert candidate(['zrwf', 'thp', 'qecwlnq', 'w', 'teetdaxx'], t) == [1, 4]\n    assert candidate(['xyzgb', 'qflfrfqgaf'], l) == [1]\n    assert candidate(['shnjr', 'qfvop'], y) == []\n    assert candidate(['fmwclqh', 'xbphhgreze', 'yi', 'gmtzrfdab', 'uicqa', 'n'], i) == [2, 4]\n    assert candidate(['jgkv', 'njhwihtv', 'v'], z) == []\n    assert candidate(['tqkwoofh', 'bcgngl', 'frjpqgrr', 'drvb'], x) == []\n    assert candidate(['npkvocbw', 'tn', 'dp', 'c', 'g', 'fsxvzcnty', 'ywnf'], k) == [0]\n    assert candidate(['leompil', 'vta', 'fzrsps', 'yp', 'bykmgwgk'], o) == [0]\n    assert candidate(['umq', 'c', 'ctuh', 'eadzeuui', 'tabum', 'isuct'], p) == []\n    assert candidate(['rnmpdkmrnb', 'icxxsvss', 'h', 'gd'], s) == [1]\n    assert candidate(['ft', 'hsjf', 'e', 'xi'], w) == []\n    assert candidate(['ozf', 'xkehlkgp', 'vliewlbv', 'okgaahah'], b) == [2]\n    assert candidate(['gbktzr', 'kbamubluz', 'dwoi', 'crhldx', 'idjronpded', 'rqaz'], c) == [3]\n    assert candidate(['gvbzqcb', 'rwtbra', 'iuijl', 'qbmpbi'], c) == [0]\n    assert candidate(['lsh', 'szhxhcdc', 'quem', 'zupiydjeqp', 'czxyvysrrb', 'aqnlqtnfiv'], p) == [3]\n    assert candidate(['leuah', 'liaoczeuch', 'ol', 'ify', 'layh', 'ifzudwuybw', 'x'], p) == []\n    assert candidate(['ksdpwwho', 'ktunsikyu'], a) == []\n    assert candidate(['vpypaumzlp', 'kqrb', 'pgw'], l) == [0]\n    assert candidate(['jkrpnx', 'c', 'kqi', 'xrsaviyusg', 'waoxq', 'fld', 'otxfgcp'], l) == [5]\n    assert candidate(['tetw', 'zl', 'wd', 'hnkxoxlnz', 'dexgufawjd', 'oolpr', 'yyfwizbsl'], p) == [5]\n    assert candidate(['hihprd', 'kitgiflc', 'nr', 'idduuahfkm'], x) == []\n    assert candidate(['flfxeca', 'g'], e) == [0]\n    assert candidate(['st', 'betf', 'ipacxza', 'jpnw'], r) == []\n    assert candidate(['cvuxnzaib', 'c', 'tiytr', 'yiav', 'hp', 'yg'], d) == []\n    assert candidate(['yz', 'k', 'midujexvn', 'kwcgbht'], y) == [0]\n    assert candidate(['qcxobdaxv'], q) == [0]\n    assert candidate(['b', 'shrexcf', 've', 'eqpbnuy', 'qdhahodo', 'aerdf', 'bdjlaakagk'], p) == [3]\n    assert candidate(['ympv'], q) == []\n    assert candidate(['thfy', 'lnfzoyafiy', 'qmc', 'boijcl', 'pvbzmsa', 'yjarwylcyc'], e) == []\n    assert candidate(['hqptwi'], o) == []\n    assert candidate(['bv', 'xgrhtjnxh', 'fdtljkxa', 'po', 'hejof'], k) == [2]\n    assert candidate(['mfdrclyx', 'pith'], e) == []\n    assert candidate(['bxeblhrl', 'o', 'uvv'], b) == [0]\n    assert candidate(['giygz'], u) == []\n    assert candidate(['ffqw', 'nykncbxrqi', 'pgzy', 'of', 'oye', 'f'], g) == [2]\n    assert candidate(['jjnh', 'nrbh', 'z'], l) == []\n    assert candidate(['gdzkdtvrm', 'ps', 'kp', 'sbdlkac', 's', 'bt'], n) == []\n    assert candidate(['hpsk', 'stjltzz', 'gvbjwzktgg', 'hmeovbxvv', 'gqaxqoshbh', 'mqnwyabqq', 'sq'], f) == []\n    assert candidate(['gwmg', 'qdjeaxgc', 'rlajltxpd', 'd'], g) == [0, 1]\n    assert candidate(['dupx', 'r', 'j', 'wq', 'macfcfoz'], r) == [1]\n    assert candidate(['rmypzoyto', 'wvhtrbuz', 'dgt', 'tmhqswmkx', 'trpjwzitp', 'tbetdxic'], t) == [0, 1, 2, 3, 4, 5]\n    assert candidate(['vpkjymgdb', 's', 'gv', 'geie'], g) == [0, 2, 3]\n    assert candidate(['epnmbry', 'hhfhprvqba'], l) == []\n    assert candidate(['zst', 'mjzbdxsks', 'dza', 'neqj', 'oqeilr'], d) == [1, 2]\n    assert candidate(['ffruqk', 'sse', 'cyj', 'tntq', 'mibbhhpce'], c) == [2, 4]\n    assert candidate(['vumzrbe', 'qudq', 'qfrt'], u) == [0, 1]\n    assert candidate(['wcrrprvu', 'fizkw', 'vzcjxhjy', 'e'], r) == [0]\n    assert candidate(['gjk', 'vri'], n) == []\n    assert candidate(['fds', 'vbmg', 'p', 'iesyvc', 'wgmyxhoo', 'yfllvzr'], f) == [0, 5]\n    assert candidate(['mifbjo', 'kpjlwfbas', 'skhueysodn', 'zeewicisy'], g) == []\n    assert candidate(['pvkmoccv', 'j'], y) == []\n    assert candidate(['s', 'uhcfwsssbe', 'iwofeukmx', 'yfta', 'ovrdcb', 'psnje'], s) == [0, 1, 5]\n    assert candidate(['klpzrjw', 'qmrhbpa'], v) == []\n    assert candidate(['fzegksjmw', 'masiwhjue', 'gngsht', 'xwvmp', 'aahn', 'dwxr'], c) == []\n    assert candidate(['mveahpesx', 'tsqds', 'g', 'mux', 'bivffitjx', 'zfsqdje'], f) == [4, 5]\n    assert candidate(['c'], a) == []\n    assert candidate(['jzmhnhqkq'], a) == []\n    assert candidate(['cfdgbc', 'ltpvko', 'batjenrlq', 'edwefhw'], t) == [1, 2]\n    assert candidate(['smlcojfydr', 'slb'], r) == [0]\n    assert candidate(['lnjimir'], x) == []\n    assert candidate(['do'], e) == []\n    assert candidate(['xyyvbxsb', 'dc', 'mmqpb', 'mmbwv', 'wdreyof', 'kpk', 'reeb'], l) == []\n    assert candidate(['ytvyknnmzv', 'jsoe', 'wctzk'], i) == []\n\ndef test_check():\n    check(findWordsContaining)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3196_maxFrequencyScore", "language": "py", "prompt": "from typing import List\n\ndef maxFrequencyScore(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and an integer k.\nYou can perform the following operation on the array at most k times:\nChoose any index i from the array and increase or decrease nums[i] by 1.\nThe score of the final array is the frequency of the most frequent element in the array.\nReturn the maximum score you can achieve.\nThe frequency of an element is the number of occurences of that element in the array.\nExample 1:\nInput: nums = [1,2,6,4], k = 3\nOutput: 3\nExplanation: We can do the following operations on the array:\n- Choose i = 0, and increase the value of nums[0] by 1. The resulting array is [2,2,6,4].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,3].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,2].\nThe element 2 is the most frequent in the final array so our score is 3.\nIt can be shown that we cannot achieve a better score.\nExample 2:\nInput: nums = [1,4,4,2,4], k = 0\nOutput: 3\nExplanation: We cannot apply any operations so our score will be the frequency of the most frequent element in the original array, which is 3.\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n0 <= k <= 1014\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3196_maxFrequencyScore.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 6, 4], 3) == 3\n    assert candidate([1, 4, 4, 2, 4], 0) == 3\n    assert candidate([3, 20, 13, 2, 3, 15, 24, 19, 8, 13, 19, 20, 21], 45) == 10\n    assert candidate([13, 22, 29, 21, 13, 17, 5, 2, 27, 6, 10, 4, 23, 29, 27], 117) == 14\n    assert candidate([27, 8, 30, 3, 13, 28, 7, 14, 21, 19, 24, 28, 29, 1, 14, 22, 6], 23) == 8\n    assert candidate([10, 11, 3], 1) == 2\n    assert candidate([10, 19, 26, 18, 27, 18], 9) == 4\n    assert candidate([17, 24, 10, 23, 22, 15, 25, 2, 13, 24, 22, 25, 25, 21], 52) == 13\n    assert candidate([28, 6, 22, 10], 12) == 2\n    assert candidate([17, 17, 25, 14, 29, 28, 20, 14, 16, 22, 4, 28, 2, 5, 3, 11, 6, 20, 17], 76) == 14\n    assert candidate([23, 10, 18, 21, 16, 23, 14], 2) == 3\n    assert candidate([5, 13, 7], 8) == 3\n    assert candidate([6, 29, 3, 19, 10, 6, 20, 26, 1, 30, 11, 25, 29, 12, 29, 14, 15, 16, 5], 64) == 12\n    assert candidate([10, 26, 21, 18, 30, 25, 1], 8) == 3\n    assert candidate([29, 10, 26, 1, 2, 2, 17, 7, 5, 16, 24, 27, 7, 7, 26, 26, 24], 3) == 5\n    assert candidate([11, 16, 6, 12, 3, 8, 5, 29, 9, 15, 7, 9, 14, 6, 11, 14, 12, 23, 22, 14], 79) == 19\n    assert candidate([5, 17, 15, 14, 27, 11, 22, 6, 4], 26) == 6\n    assert candidate([13, 22, 17], 4) == 2\n    assert candidate([24, 6, 14, 6, 30, 9, 6, 11, 21, 10, 12, 27, 1], 90) == 13\n    assert candidate([19, 5, 2, 23, 16, 22, 3, 2, 5, 20, 17, 3, 22, 1], 15) == 7\n    assert candidate([15, 20], 5) == 2\n    assert candidate([9, 2, 5, 14, 19, 5, 10, 10, 2, 25, 1, 1, 1, 14, 9, 13, 5, 6, 10, 1], 80) == 18\n    assert candidate([2, 29, 24, 19, 5], 24) == 3\n    assert candidate([4, 10, 5], 6) == 3\n    assert candidate([5, 2, 22, 7, 18, 26, 15, 4, 24, 26, 24], 19) == 6\n    assert candidate([23, 21, 10], 13) == 3\n    assert candidate([5, 23, 7, 2, 1, 5, 12, 2, 20, 24, 5, 4], 71) == 11\n    assert candidate([22, 13, 30], 17) == 3\n    assert candidate([7, 23, 29, 8, 9, 3, 4, 16, 24, 6, 18, 20, 19, 14, 5], 55) == 11\n    assert candidate([3, 11, 24, 27, 10], 24) == 4\n    assert candidate([12, 11, 21, 6, 13, 27, 11, 2, 27, 26, 24, 13], 0) == 2\n    assert candidate([4, 10, 26, 16, 21, 26, 11, 26, 30, 24, 18, 30, 23, 26, 24], 50) == 12\n    assert candidate([4, 2, 18, 14, 9, 29], 4) == 2\n    assert candidate([9, 27, 19, 18], 9) == 3\n    assert candidate([11, 17, 29, 9, 22, 7, 13, 14, 12, 24, 9], 47) == 10\n    assert candidate([20, 10, 15, 16], 10) == 3\n    assert candidate([16, 2, 6, 20, 2, 18, 16, 8, 15, 19, 22, 29, 24, 2, 26, 19], 40) == 11\n    assert candidate([17, 13, 19, 28, 6, 8, 5, 25, 2, 3, 9, 4, 21, 6, 13, 10, 5, 3], 113) == 18\n    assert candidate([16, 5, 10, 15], 5) == 2\n    assert candidate([23, 2, 23, 27, 21], 2) == 3\n    assert candidate([15, 26, 3, 14, 3, 18, 16, 19, 11, 9, 2, 18, 14, 8, 20, 9], 75) == 15\n    assert candidate([13, 23, 4, 5, 2], 3) == 3\n    assert candidate([3, 1, 9, 12], 8) == 3\n    assert candidate([4, 27, 21, 16, 11, 5, 5, 1, 5, 10], 18) == 7\n    assert candidate([14, 4, 23, 27, 8, 25, 7, 12, 12, 21, 21, 11, 20, 23, 30, 11, 12, 29, 22], 77) == 15\n    assert candidate([10, 30, 25], 20) == 3\n    assert candidate([4, 8, 22, 25, 27, 26, 18, 14, 18], 56) == 9\n    assert candidate([2, 19, 27, 25, 23, 17, 8, 16, 28, 10, 6, 24, 6], 28) == 7\n    assert candidate([27, 25, 27, 10, 23, 14, 24, 17, 12, 22, 14, 11, 19, 16, 7, 15], 21) == 9\n    assert candidate([23, 11], 12) == 2\n    assert candidate([20, 28, 15, 11, 22, 26, 29, 2, 16, 9], 61) == 9\n    assert candidate([21, 11, 1, 17, 20, 19, 24, 10, 1, 4, 10, 30, 11, 29, 20, 12, 18, 5, 4, 27], 110) == 17\n    assert candidate([22, 29, 7, 1, 26, 22, 27, 1, 16, 25, 25], 26) == 8\n    assert candidate([26, 6, 24], 20) == 3\n    assert candidate([29, 24, 9, 4, 2, 9, 28, 1, 25, 25, 13, 22, 27, 26, 15, 18], 2) == 4\n    assert candidate([9, 19, 1, 24, 15, 19, 22, 13, 10, 8, 4, 10, 26, 23, 11, 8], 89) == 15\n    assert candidate([18, 6, 20, 22, 25, 21, 19, 19, 15, 5, 7, 29, 28, 7, 17, 4], 104) == 16\n    assert candidate([9, 11, 28, 24, 30, 6, 1, 30, 22, 16, 20, 19, 21, 17], 62) == 11\n    assert candidate([15, 13, 29, 28], 15) == 3\n    assert candidate([28, 26, 8], 18) == 2\n    assert candidate([6, 12, 24, 4, 25, 23, 5, 13, 7, 5], 12) == 6\n    assert candidate([8, 23, 15, 15, 3, 19, 6, 20, 12, 18, 7, 8, 18, 19, 11, 20, 4, 18], 54) == 14\n    assert candidate([30, 2, 4, 7, 19, 3, 3, 14, 24, 4, 26, 17, 1, 12, 4, 11], 36) == 11\n    assert candidate([12, 15, 21, 17, 7, 20, 16, 30, 8, 6, 28, 28, 23, 6, 12, 14, 19, 26, 27, 5], 87) == 16\n    assert candidate([15, 1, 27, 4, 5, 20, 5, 26, 28], 38) == 6\n    assert candidate([27, 14, 30, 6, 14, 29, 5, 8], 51) == 7\n    assert candidate([18, 22], 4) == 2\n    assert candidate([17, 28, 16, 24, 29], 5) == 3\n    assert candidate([2, 22, 27, 12, 30, 9, 27, 3, 26, 23, 25, 30, 20, 19, 9, 1, 23, 14, 18, 26], 30) == 11\n    assert candidate([26, 16, 9, 7, 10, 16, 26, 22, 24, 1, 30, 8, 15, 5, 28, 16, 13, 12], 84) == 15\n    assert candidate([26, 8, 27, 27, 22, 28, 8, 26, 24, 15, 6, 13, 20, 12], 55) == 11\n    assert candidate([19, 19, 20, 14, 19, 20, 5, 4, 14, 26, 12, 17, 14, 29, 3, 9], 94) == 16\n    assert candidate([9, 19, 14, 17, 14, 20, 27, 9, 22, 29, 15, 20, 6, 25, 8, 17, 18, 24, 23], 44) == 13\n    assert candidate([2, 10], 8) == 2\n    assert candidate([20, 2, 27, 27, 19, 20, 8, 21, 15, 20, 14, 18, 25], 17) == 8\n    assert candidate([6, 27, 6, 30, 2, 1, 7, 24, 18, 4, 2, 18, 17], 56) == 10\n    assert candidate([23, 18, 30, 24, 5, 21], 33) == 6\n    assert candidate([12, 16, 24, 18, 12, 20, 26, 15, 11, 23, 4, 25], 35) == 9\n    assert candidate([9, 9, 11, 18], 11) == 4\n    assert candidate([19, 21, 7, 15, 21, 10, 5, 27, 2, 27, 14], 63) == 9\n    assert candidate([25, 17, 13, 6, 3, 19, 21, 12, 29, 1, 16, 14, 24, 27, 25, 13, 1, 5, 17], 136) == 19\n    assert candidate([4, 4, 8, 9, 14, 7, 27, 8, 2, 29, 1, 28, 23, 13], 109) == 14\n    assert candidate([14, 2, 18, 30, 28, 17, 25, 10, 7, 10, 19, 3, 26, 22, 12, 17, 8, 4], 24) == 8\n    assert candidate([27, 17, 12, 19, 25, 1, 9, 4, 9, 20, 2, 5], 70) == 10\n    assert candidate([18, 25, 12, 20, 19, 26, 2, 15, 3, 6, 29, 29, 2, 24, 4, 9], 106) == 14\n    assert candidate([17, 18, 14, 1, 28, 15, 14, 13, 9, 16, 28, 9, 21, 23, 2, 11], 65) == 14\n    assert candidate([17, 15, 29, 30, 12, 13, 10], 37) == 6\n    assert candidate([15, 4, 11, 1, 18, 29, 9, 23, 14, 25, 15, 12, 15, 6, 30, 28], 60) == 12\n    assert candidate([20, 6, 8, 15, 12, 8, 26, 7, 27, 8, 5, 25, 17, 12, 7, 1, 23, 24, 8], 62) == 14\n    assert candidate([22, 21, 30, 16, 23, 24, 2, 2, 24], 39) == 7\n    assert candidate([8, 9, 6, 30, 28, 2, 1, 3, 14, 8, 21, 26, 13, 29, 23, 3, 14, 9, 6, 25], 91) == 16\n    assert candidate([7, 10, 16, 23, 17, 22, 28, 7, 4, 21, 25, 21, 19, 30, 13, 19, 15, 21, 23], 53) == 15\n    assert candidate([25, 17, 1, 24, 3, 6, 8, 29, 19, 4, 16, 12, 9, 28, 1, 21, 13, 29], 151) == 18\n    assert candidate([1, 6, 14, 9], 8) == 3\n    assert candidate([5, 7, 17, 2, 23, 6, 3, 13, 2, 11, 10, 8, 18, 16, 3, 11, 26], 30) == 10\n    assert candidate([27, 27, 16, 18, 24, 7, 26, 30, 21, 25, 28, 28, 29, 27, 28, 6], 0) == 3\n    assert candidate([29, 16, 9, 21, 2, 16, 4, 17, 22, 11, 20, 23, 5, 22, 7, 27, 20], 85) == 15\n    assert candidate([25, 5, 24, 2, 30, 15, 17, 27, 15, 15, 27], 69) == 10\n    assert candidate([6, 29, 24, 14, 9, 14, 1, 1, 28, 20, 19, 21, 13, 25, 17, 24, 30, 14], 107) == 16\n    assert candidate([17, 20, 2, 11, 5, 7, 28], 36) == 6\n\ndef test_check():\n    check(maxFrequencyScore)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3199_distributeCandies", "language": "py", "prompt": "def distributeCandies(n: int, limit: int) -> int:\n    \"\"\"You are given two positive integers n and limit.\nReturn the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.\nExample 1:\nInput: n = 5, limit = 2\nOutput: 3\nExplanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\nExample 2:\nInput: n = 3, limit = 3\nOutput: 10\nExplanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\nConstraints:\n * 1 <= n <= 50\n * 1 <= limit <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3199_distributeCandies.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(5, 2) == 3\n    assert candidate(3, 3) == 10\n    assert candidate(1, 1) == 3\n    assert candidate(1, 2) == 3\n    assert candidate(1, 3) == 3\n    assert candidate(1, 4) == 3\n    assert candidate(1, 5) == 3\n    assert candidate(1, 6) == 3\n    assert candidate(1, 7) == 3\n    assert candidate(1, 8) == 3\n    assert candidate(1, 9) == 3\n    assert candidate(1, 10) == 3\n    assert candidate(1, 11) == 3\n    assert candidate(1, 12) == 3\n    assert candidate(1, 13) == 3\n    assert candidate(1, 14) == 3\n    assert candidate(1, 15) == 3\n    assert candidate(1, 16) == 3\n    assert candidate(1, 17) == 3\n    assert candidate(1, 18) == 3\n    assert candidate(1, 19) == 3\n    assert candidate(1, 20) == 3\n    assert candidate(1, 21) == 3\n    assert candidate(1, 22) == 3\n    assert candidate(1, 23) == 3\n    assert candidate(1, 24) == 3\n    assert candidate(1, 25) == 3\n    assert candidate(2, 1) == 3\n    assert candidate(2, 2) == 6\n    assert candidate(2, 3) == 6\n    assert candidate(2, 4) == 6\n    assert candidate(2, 5) == 6\n    assert candidate(2, 6) == 6\n    assert candidate(2, 7) == 6\n    assert candidate(2, 8) == 6\n    assert candidate(2, 9) == 6\n    assert candidate(2, 10) == 6\n    assert candidate(2, 11) == 6\n    assert candidate(2, 12) == 6\n    assert candidate(2, 13) == 6\n    assert candidate(2, 14) == 6\n    assert candidate(2, 15) == 6\n    assert candidate(2, 16) == 6\n    assert candidate(2, 17) == 6\n    assert candidate(2, 18) == 6\n    assert candidate(2, 19) == 6\n    assert candidate(2, 20) == 6\n    assert candidate(2, 21) == 6\n    assert candidate(2, 22) == 6\n    assert candidate(2, 23) == 6\n    assert candidate(2, 24) == 6\n    assert candidate(2, 25) == 6\n    assert candidate(3, 1) == 1\n    assert candidate(3, 2) == 7\n    assert candidate(3, 4) == 10\n    assert candidate(3, 5) == 10\n    assert candidate(3, 6) == 10\n    assert candidate(3, 7) == 10\n    assert candidate(3, 8) == 10\n    assert candidate(3, 9) == 10\n    assert candidate(3, 10) == 10\n    assert candidate(3, 11) == 10\n    assert candidate(3, 12) == 10\n    assert candidate(3, 13) == 10\n    assert candidate(3, 14) == 10\n    assert candidate(3, 15) == 10\n    assert candidate(3, 16) == 10\n    assert candidate(3, 17) == 10\n    assert candidate(3, 18) == 10\n    assert candidate(3, 19) == 10\n    assert candidate(3, 20) == 10\n    assert candidate(3, 21) == 10\n    assert candidate(3, 22) == 10\n    assert candidate(3, 23) == 10\n    assert candidate(3, 24) == 10\n    assert candidate(3, 25) == 10\n    assert candidate(4, 1) == 0\n    assert candidate(4, 2) == 6\n    assert candidate(4, 3) == 12\n    assert candidate(4, 4) == 15\n    assert candidate(4, 5) == 15\n    assert candidate(4, 6) == 15\n    assert candidate(4, 7) == 15\n    assert candidate(4, 8) == 15\n    assert candidate(4, 9) == 15\n    assert candidate(4, 10) == 15\n    assert candidate(4, 11) == 15\n    assert candidate(4, 12) == 15\n    assert candidate(4, 13) == 15\n    assert candidate(4, 14) == 15\n    assert candidate(4, 15) == 15\n    assert candidate(4, 16) == 15\n    assert candidate(4, 17) == 15\n    assert candidate(4, 18) == 15\n    assert candidate(4, 19) == 15\n    assert candidate(4, 20) == 15\n    assert candidate(4, 21) == 15\n    assert candidate(4, 22) == 15\n    assert candidate(4, 23) == 15\n    assert candidate(4, 24) == 15\n\ndef test_check():\n    check(distributeCandies)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3200_stringCount", "language": "py", "prompt": "def stringCount(n: int) -> int:\n    \"\"\"You are given an integer n.\nA string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains \"leet\" as a substring.\nFor example:\n * The string \"lteer\" is good because we can rearrange it to form \"leetr\" .\n * \"letl\" is not good because we cannot rearrange it to contain \"leet\" as a substring.\nReturn the total number of good strings of length n.\nSince the answer may be large, return it modulo 109 + 7.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nInput: n = 4\nOutput: 12\nExplanation: The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\".\nExample 2:\nInput: n = 10\nOutput: 83943898\nExplanation: The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.\nConstraints:\n * 1 <= n <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3200_stringCount.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(4) == 12\n    assert candidate(10) == 83943898\n    assert candidate(1) == 0\n    assert candidate(2) == 0\n    assert candidate(3) == 0\n    assert candidate(5) == 1460\n    assert candidate(6) == 106620\n    assert candidate(7) == 6058192\n    assert candidate(8) == 295164156\n    assert candidate(9) == 947613240\n    assert candidate(11) == 795234177\n    assert candidate(12) == 55396773\n    assert candidate(13) == 968092561\n    assert candidate(14) == 715599898\n    assert candidate(15) == 430509685\n    assert candidate(16) == 462719236\n    assert candidate(17) == 155543310\n    assert candidate(18) == 159683962\n    assert candidate(19) == 808507313\n    assert candidate(20) == 291395991\n    assert candidate(21) == 461951930\n    assert candidate(22) == 871561520\n    assert candidate(23) == 993268925\n    assert candidate(24) == 871982505\n    assert candidate(25) == 935610434\n    assert candidate(26) == 867518559\n    assert candidate(27) == 3067523\n    assert candidate(28) == 716801469\n    assert candidate(29) == 452206104\n    assert candidate(30) == 52805056\n    assert candidate(31) == 61992724\n    assert candidate(32) == 76928250\n    assert candidate(33) == 257967635\n    assert candidate(34) == 549347744\n    assert candidate(35) == 290653839\n    assert candidate(36) == 123906995\n    assert candidate(37) == 41253530\n    assert candidate(38) == 828924891\n    assert candidate(39) == 60893212\n    assert candidate(40) == 618599272\n    assert candidate(41) == 840600409\n    assert candidate(42) == 995406621\n    assert candidate(43) == 991833054\n    assert candidate(44) == 403185520\n    assert candidate(45) == 904195428\n    assert candidate(46) == 643609894\n    assert candidate(47) == 177947842\n    assert candidate(48) == 826753905\n    assert candidate(49) == 855443295\n    assert candidate(50) == 232825199\n    assert candidate(51) == 227116084\n    assert candidate(52) == 417264566\n    assert candidate(53) == 468973861\n    assert candidate(54) == 999145386\n    assert candidate(55) == 721276317\n    assert candidate(56) == 385673910\n    assert candidate(57) == 7891114\n    assert candidate(58) == 85081065\n    assert candidate(59) == 194677227\n    assert candidate(60) == 759126147\n    assert candidate(61) == 273111337\n    assert candidate(62) == 166598301\n    assert candidate(63) == 955460796\n    assert candidate(64) == 685704195\n    assert candidate(65) == 821093882\n    assert candidate(66) == 172674695\n    assert candidate(67) == 464621746\n    assert candidate(68) == 432202634\n    assert candidate(69) == 465445347\n    assert candidate(70) == 654273613\n    assert candidate(71) == 366864502\n    assert candidate(72) == 124689502\n    assert candidate(73) == 419691288\n    assert candidate(74) == 987033948\n    assert candidate(75) == 842828500\n    assert candidate(76) == 409614634\n    assert candidate(77) == 73844796\n    assert candidate(78) == 584672527\n    assert candidate(79) == 113476429\n    assert candidate(80) == 974106352\n    assert candidate(81) == 646239862\n    assert candidate(82) == 420253116\n    assert candidate(83) == 817573615\n    assert candidate(84) == 471199144\n    assert candidate(85) == 567239979\n    assert candidate(86) == 221534816\n    assert candidate(87) == 707218848\n    assert candidate(88) == 687360104\n    assert candidate(89) == 551986596\n    assert candidate(90) == 122933939\n    assert candidate(91) == 427294641\n    assert candidate(92) == 14022454\n    assert candidate(93) == 568729284\n    assert candidate(94) == 653568519\n    assert candidate(95) == 15509440\n    assert candidate(96) == 991824044\n    assert candidate(97) == 690441338\n    assert candidate(98) == 600462833\n    assert candidate(99) == 880019356\n    assert candidate(100) == 86731066\n\ndef test_check():\n    check(stringCount)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3202_findHighAccessEmployees", "language": "py", "prompt": "from typing import List\n\ndef findHighAccessEmployees(access_times: List[List[str]]) -> List[str]:\n    \"\"\"You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.\nThe access time is represented as four digits using a 24-hour time format, for example, \"0800\" or \"2250\".\nAn employee is said to be high-access if he has accessed the system three or more times within a one-hour period.\nTimes with exactly one hour of difference are not considered part of the same one-hour period. For example, \"0815\" and \"0915\" are not part of the same one-hour period.\nAccess times at the start and end of the day are not counted within the same one-hour period. For example, \"0005\" and \"2350\" are not part of the same one-hour period.\nReturn a list that contains the names of high-access employees with any order you want.\nExample 1:\nInput: access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]\nOutput: [\"a\"]\nExplanation: \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\nBut \"b\" does not have more than two access times at all.\nSo the answer is [\"a\"].\nExample 2:\nInput: access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]\nOutput: [\"c\",\"d\"]\nExplanation: \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n\"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\nHowever, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"].\nExample 3:\nInput: access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]\nOutput: [\"ab\",\"cd\"]\nExplanation: \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n\"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\nSo the answer is [\"ab\",\"cd\"].\nConstraints:\n1 <= access_times.length <= 100\naccess_times[i].length == 2\n1 <= access_times[i][0].length <= 10\naccess_times[i][0] consists only of English small letters.\naccess_times[i][1].length == 4\naccess_times[i][1] is in 24-hour time format.\naccess_times[i][1] consists only of '0' to '9'.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3202_findHighAccessEmployees.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([['a', '0549'], ['b', '0457'], ['a', '0532'], ['a', '0621'], ['b', '0540']]) == ['a']\n    assert candidate([['d', '0002'], ['c', '0808'], ['c', '0829'], ['e', '0215'], ['d', '1508'], ['d', '1444'], ['d', '1410'], ['c', '0809']]) == ['c', 'd']\n    assert candidate([['cd', '1025'], ['ab', '1025'], ['cd', '1046'], ['cd', '1055'], ['ab', '1124'], ['ab', '1120']]) == ['ab', 'cd']\n    assert candidate([['baipstt', '1456']]) == []\n    assert candidate([['bouo', '1126']]) == []\n    assert candidate([['cavfbqg', '2304']]) == []\n    assert candidate([['cenjcq', '1007']]) == []\n    assert candidate([['cqotrwqcaq', '0131']]) == []\n    assert candidate([['downbuk', '1951']]) == []\n    assert candidate([['dqsoiyz', '2204']]) == []\n    assert candidate([['duzeyrov', '0243']]) == []\n    assert candidate([['erfg', '1223']]) == []\n    assert candidate([['fwhefd', '2026']]) == []\n    assert candidate([['gbefbne', '0911']]) == []\n    assert candidate([['gp', '1540']]) == []\n    assert candidate([['ht', '1319']]) == []\n    assert candidate([['inahnsjdqz', '1750']]) == []\n    assert candidate([['jwxvijxo', '0851']]) == []\n    assert candidate([['kibwwvjuez', '0716']]) == []\n    assert candidate([['lvry', '0706']]) == []\n    assert candidate([['mbsyxxfzjf', '0114']]) == []\n    assert candidate([['mlehvzqb', '1620']]) == []\n    assert candidate([['mmgat', '0516']]) == []\n    assert candidate([['mxatapbs', '2240']]) == []\n    assert candidate([['mzxbgtfc', '1531']]) == []\n    assert candidate([['nnhh', '1445']]) == []\n    assert candidate([['o', '1414']]) == []\n    assert candidate([['qaxqifxxww', '1557']]) == []\n    assert candidate([['rjy', '0200']]) == []\n    assert candidate([['sgpgh', '0539']]) == []\n    assert candidate([['sxx', '0325']]) == []\n    assert candidate([['tkvgcf', '1645']]) == []\n    assert candidate([['ttk', '0304']]) == []\n    assert candidate([['un', '0833']]) == []\n    assert candidate([['vlifcdn', '0731']]) == []\n    assert candidate([['w', '2224']]) == []\n    assert candidate([['wkmehwsg', '2023']]) == []\n    assert candidate([['y', '1005']]) == []\n    assert candidate([['ynnale', '1331']]) == []\n    assert candidate([['yt', '0900']]) == []\n    assert candidate([['zbgzk', '0527']]) == []\n    assert candidate([['a', '0039'], ['a', '0042']]) == []\n    assert candidate([['ajhzcltqse', '0605'], ['ajhzcltqse', '0558']]) == []\n    assert candidate([['cbaqsymoi', '0001'], ['cbaqsymoi', '0004']]) == []\n    assert candidate([['df', '1958'], ['df', '2002']]) == []\n    assert candidate([['dhmnhvou', '0529'], ['dhmnhvou', '0531']]) == []\n    assert candidate([['epghzrog', '0333'], ['epghzrog', '0333']]) == []\n    assert candidate([['gda', '1529'], ['gda', '1534']]) == []\n    assert candidate([['gjhtgm', '2207'], ['gjhtgm', '2156']]) == []\n    assert candidate([['gsd', '2030'], ['gsd', '2046']]) == []\n    assert candidate([['gsstuktwm', '1403'], ['gsstuktwm', '1357']]) == []\n    assert candidate([['h', '2159'], ['h', '2203']]) == []\n    assert candidate([['hxrdffk', '1736'], ['hxrdffk', '1724']]) == []\n    assert candidate([['iaxsnenx', '2037'], ['iaxsnenx', '2050']]) == []\n    assert candidate([['ikwjvflxq', '0055'], ['ikwjvflxq', '0056']]) == []\n    assert candidate([['jkgjmku', '0743'], ['jkgjmku', '0754']]) == []\n    assert candidate([['jkw', '0241'], ['jkw', '0235']]) == []\n    assert candidate([['jykugiprxf', '1633'], ['jykugiprxf', '1641']]) == []\n    assert candidate([['kdxw', '1338'], ['kdxw', '1336']]) == []\n    assert candidate([['kenltmrg', '0932'], ['kenltmrg', '0941']]) == []\n    assert candidate([['kptjrr', '1356'], ['kptjrr', '1349']]) == []\n    assert candidate([['mcd', '1333'], ['mcd', '1325']]) == []\n    assert candidate([['mhkizga', '1552'], ['mhkizga', '1551']]) == []\n    assert candidate([['monxm', '1748'], ['monxm', '1742']]) == []\n    assert candidate([['msjydtinfy', '1301'], ['msjydtinfy', '1245']]) == []\n    assert candidate([['myhdmu', '1407'], ['myhdmu', '1419']]) == []\n    assert candidate([['nyoezc', '1050'], ['nyoezc', '1041']]) == []\n    assert candidate([['oksvrskxch', '0053'], ['oksvrskxch', '0111']]) == []\n    assert candidate([['pxc', '1915'], ['pxc', '1910']]) == []\n    assert candidate([['qedxyj', '0609'], ['qedxyj', '0614']]) == []\n    assert candidate([['qmslkyxnph', '0946'], ['qmslkyxnph', '0958']]) == []\n    assert candidate([['r', '0206'], ['r', '0202']]) == []\n    assert candidate([['r', '2041'], ['r', '2052']]) == []\n    assert candidate([['rf', '2205'], ['rf', '2203']]) == []\n    assert candidate([['rswegeuhqd', '0235'], ['rswegeuhqd', '0238']]) == []\n    assert candidate([['skfgl', '0718'], ['skfgl', '0712']]) == []\n    assert candidate([['smnnl', '2329'], ['smnnl', '2340']]) == []\n    assert candidate([['tpbbxpx', '0409'], ['tpbbxpx', '0408']]) == []\n    assert candidate([['uiqxqp', '0515'], ['uiqxqp', '0516']]) == []\n    assert candidate([['uyuz', '1530'], ['uyuz', '1543']]) == []\n    assert candidate([['vfeunkee', '1500'], ['vfeunkee', '1508']]) == []\n    assert candidate([['wbyd', '1848'], ['wbyd', '1839']]) == []\n    assert candidate([['x', '0522'], ['x', '0506']]) == []\n    assert candidate([['xhrhdy', '1455'], ['xhrhdy', '1454']]) == []\n    assert candidate([['xmsypay', '1605'], ['xmsypay', '1612']]) == []\n    assert candidate([['xy', '0015'], ['xy', '0021']]) == []\n    assert candidate([['ydtnnpzw', '0516'], ['ydtnnpzw', '0520']]) == []\n    assert candidate([['zh', '2348'], ['zh', '2334']]) == []\n    assert candidate([['zinywjn', '0017'], ['zinywjn', '0019']]) == []\n    assert candidate([['aczdfmsd', '0317'], ['aczdfmsd', '0314'], ['aczdfmsd', '0320']]) == ['aczdfmsd']\n    assert candidate([['bsluadumi', '1518'], ['bsluadumi', '1516'], ['bsluadumi', '1510']]) == ['bsluadumi']\n    assert candidate([['ckrdpxq', '1122'], ['ckrdpxq', '1125'], ['ckrdpxq', '1121']]) == ['ckrdpxq']\n    assert candidate([['fe', '1320'], ['fe', '1326'], ['fe', '1331']]) == ['fe']\n    assert candidate([['ff', '1508'], ['ff', '1508'], ['ff', '1516']]) == ['ff']\n    assert candidate([['fnlmbcedu', '0052'], ['fnlmbcedu', '0103'], ['fnlmbcedu', '0055']]) == ['fnlmbcedu']\n    assert candidate([['hffgwjjve', '0159'], ['hffgwjjve', '0152'], ['hffgwjjve', '0159']]) == ['hffgwjjve']\n    assert candidate([['ivlvfgwsx', '0122'], ['ivlvfgwsx', '0135'], ['ivlvfgwsx', '0139']]) == ['ivlvfgwsx']\n    assert candidate([['jlfnksqlt', '0304'], ['jlfnksqlt', '0252'], ['jlfnksqlt', '0304']]) == ['jlfnksqlt']\n    assert candidate([['jy', '0647'], ['jy', '0652'], ['jy', '0704']]) == ['jy']\n    assert candidate([['kchzzdso', '2329'], ['kchzzdso', '2326'], ['kchzzdso', '2329']]) == ['kchzzdso']\n\ndef test_check():\n    check(findHighAccessEmployees)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3203_canMakePalindromeQueries", "language": "py", "prompt": "from typing import List\n\ndef canMakePalindromeQueries(s: str, queries: List[List[int]]) -> List[bool]:\n    \"\"\"You are given a 0-indexed string s having an even length n.\nYou are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di].\nFor each query i, you are allowed to perform the following operations:\nRearrange the characters within the substring s[ai:bi], where 0 <= ai <= bi < n / 2.\nRearrange the characters within the substring s[ci:di], where n / 2 <= ci <= di < n.\nFor each query, your task is to determine whether it is possible to make s a palindrome by performing the operations.\nEach query is answered independently of the others.\nReturn a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise.\nA substring is a contiguous sequence of characters within a string.\ns[x:y] represents the substring consisting of characters from the index x to index y in s, both inclusive.\nExample 1:\nInput: s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]\nOutput: [true,true]\nExplanation: In this example, there are two queries:\nIn the first query:\n- a0 = 1, b0 = 1, c0 = 3, d0 = 5.\n- So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.\n- To make s a palindrome, s[3:5] can be rearranged to become => abccba.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a1 = 0, b1 = 2, c1 = 5, d1 = 5.\n- So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.\n- To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.\n- Now, s is a palindrome. So, answer[1] = true.\nExample 2:\nInput: s = \"abbcdecbba\", queries = [[0,2,7,9]]\nOutput: [false]\nExplanation: In this example, there is only one query.\na0 = 0, b0 = 2, c0 = 7, d0 = 9.\nSo, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false.\nExample 3:\nInput: s = \"acbcab\", queries = [[1,2,4,5]]\nOutput: [true]\nExplanation: In this example, there is only one query.\na0 = 1, b0 = 2, c0 = 4, d0 = 5.\nSo, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.\nTo make s a palindrome s[1:2] can be rearranged to become abccab.\nThen, s[4:5] can be rearranged to become abccba.\nNow, s is a palindrome. So, answer[0] = true.\nConstraints:\n2 <= n == s.length <= 105\n1 <= queries.length <= 105\nqueries[i].length == 4\nai == queries[i][0], bi == queries[i][1]\nci == queries[i][2], di == queries[i][3]\n0 <= ai <= bi < n / 2\nn / 2 <= ci <= di < n \nn is even.\ns consists of only lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3203_canMakePalindromeQueries.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abcabc, [[1, 1, 3, 5], [0, 2, 5, 5]]) == [True, True]\n    assert candidate(abbcdecbba, [[0, 2, 7, 9]]) == [False]\n    assert candidate(acbcab, [[1, 2, 4, 5]]) == [True]\n    assert candidate(bcdbdc, [[1, 2, 3, 3]]) == [False]\n    assert candidate(bb, [[0, 0, 1, 1]]) == [True]\n    assert candidate(eoquueqo, [[3, 3, 6, 6]]) == [False]\n    assert candidate(dd, [[0, 0, 1, 1]]) == [True]\n    assert candidate(ceddceddcc, [[0, 1, 6, 8]]) == [False]\n    assert candidate(bdbd, [[0, 0, 2, 3]]) == [True]\n    assert candidate(eeee, [[0, 1, 2, 3]]) == [True]\n    assert candidate(deebdeeddb, [[1, 2, 5, 7]]) == [False]\n    assert candidate(xwaswsxwaw, [[1, 3, 5, 6]]) == [False]\n    assert candidate(askloakosala, [[2, 4, 7, 10]]) == [False]\n    assert candidate(bbccbb, [[0, 1, 4, 5]]) == [True]\n    assert candidate(djaypzjpyzad, [[0, 3, 7, 8]]) == [False]\n    assert candidate(ajvnbnznjnzbva, [[5, 6, 10, 11]]) == [False]\n    assert candidate(vbeptwzvtwpzbe, [[3, 6, 10, 11]]) == [False]\n    assert candidate(cababc, [[1, 2, 3, 4]]) == [True]\n    assert candidate(cbbbbc, [[1, 1, 5, 5]]) == [True]\n    assert candidate(qupzexxhqxpzhxeu, [[2, 4, 8, 12]]) == [False]\n    assert candidate(cdbdbc, [[1, 2, 3, 3]]) == [True]\n    assert candidate(odaxusaweuasuoeudxwa, [[0, 5, 10, 14]]) == [False]\n    assert candidate(ujfscqolkwjucoswlkfq, [[1, 9, 17, 18]]) == [False]\n    assert candidate(ceacea, [[0, 2, 3, 5]]) == [True]\n    assert candidate(bnjzcgmnecxxbmnjngxzecxc, [[8, 9, 19, 22]]) == [False]\n    assert candidate(daeaed, [[0, 2, 3, 3]]) == [True]\n    assert candidate(ddaadd, [[0, 2, 3, 4]]) == [True]\n    assert candidate(ddedde, [[0, 2, 4, 5]]) == [True]\n    assert candidate(pmzwetzhzursuhmeswpzrztz, [[4, 6, 16, 17]]) == [False]\n    assert candidate(qcryjkdzmqyoojzrckymdqyq, [[2, 8, 21, 22]]) == [False]\n    assert candidate(qdltkndnclarncadtqnlldkr, [[3, 4, 15, 16]]) == [False]\n    assert candidate(ecbbce, [[0, 1, 3, 5]]) == [True]\n    assert candidate(eczecz, [[0, 0, 3, 5]]) == [True]\n    assert candidate(etuouqokbalafokfbuqaaoetlu, [[3, 11, 21, 23]]) == [False]\n    assert candidate(mpepem, [[0, 2, 3, 4]]) == [True]\n    assert candidate(nbpechkpmudbsenphdmsbbupck, [[6, 7, 18, 19]]) == [False]\n    assert candidate(bccacacb, [[3, 3, 4, 7]]) == [True]\n    assert candidate(stgjtzqwgkuadjgqugkwdtzast, [[5, 10, 13, 23]]) == [False]\n    assert candidate(qiyikbayvhkcgxyaqckgxkhivbyi, [[5, 12, 17, 24]]) == [False]\n    assert candidate(ceedceed, [[0, 1, 4, 7]]) == [True]\n    assert candidate(rcguwczbjhjhgqrggqcbwjzhjuch, [[5, 7, 16, 20]]) == [False]\n    assert candidate(ckwbnmqmtzbixrrkixbtbqzmnwmc, [[1, 9, 15, 24]]) == [True]\n    assert candidate(riirxzxuqpspoiixpirsoxrzpiuq, [[1, 6, 14, 21]]) == [False]\n    assert candidate(geettndnusqufidtqdfgtsieenundu, [[6, 8, 19, 23]]) == [False]\n    assert candidate(bb, [[0, 0, 1, 1], [0, 0, 1, 1]]) == [True, True]\n    assert candidate(cc, [[0, 0, 1, 1], [0, 0, 1, 1]]) == [True, True]\n    assert candidate(dd, [[0, 0, 1, 1], [0, 0, 1, 1]]) == [True, True]\n    assert candidate(ee, [[0, 0, 1, 1], [0, 0, 1, 1]]) == [True, True]\n    assert candidate(aeae, [[1, 1, 2, 3], [1, 1, 3, 3]]) == [True, False]\n    assert candidate(eaae, [[0, 1, 3, 3], [0, 0, 2, 3]]) == [True, True]\n    assert candidate(eded, [[0, 1, 2, 3], [1, 1, 2, 3]]) == [True, True]\n    assert candidate(lrlr, [[0, 1, 2, 3], [0, 0, 2, 2]]) == [True, False]\n    assert candidate(dbaabd, [[0, 1, 5, 5], [1, 2, 4, 5]]) == [True, True]\n    assert candidate(dcbcbd, [[0, 1, 4, 4], [0, 2, 3, 4]]) == [False, True]\n    assert candidate(hykkyh, [[0, 0, 3, 4], [1, 2, 3, 4]]) == [True, True]\n    assert candidate(lvrvrl, [[2, 2, 4, 5], [0, 2, 3, 4]]) == [False, True]\n    assert candidate(adceaecd, [[3, 3, 5, 5], [0, 1, 4, 6]]) == [False, True]\n    assert candidate(baadadba, [[1, 2, 4, 5], [0, 2, 4, 5]]) == [False, True]\n    assert candidate(bceaabec, [[1, 3, 4, 7], [0, 2, 6, 6]]) == [True, True]\n    assert candidate(ifchcifh, [[1, 2, 5, 6], [1, 1, 4, 6]]) == [False, False]\n    assert candidate(adeeeeeaed, [[2, 4, 7, 9], [3, 4, 8, 8]]) == [True, False]\n    assert candidate(aedbdbddea, [[4, 4, 7, 8], [2, 2, 8, 9]]) == [False, False]\n    assert candidate(caeaaaaaec, [[0, 2, 5, 8], [0, 0, 5, 9]]) == [True, True]\n    assert candidate(dbaccccdba, [[4, 4, 6, 7], [2, 3, 8, 9]]) == [False, False]\n    assert candidate(deabadabea, [[0, 3, 7, 9], [0, 2, 5, 7]]) == [False, True]\n    assert candidate(eddeededee, [[0, 3, 6, 9], [0, 0, 6, 9]]) == [False, False]\n    assert candidate(eedbbedebb, [[2, 2, 6, 7], [2, 2, 5, 6]]) == [False, False]\n    assert candidate(gvtkakgvat, [[1, 2, 7, 7], [2, 3, 7, 9]]) == [False, False]\n    assert candidate(bzvvicviczbv, [[1, 2, 7, 8], [1, 4, 7, 8]]) == [False, False]\n    assert candidate(ljccjajcljac, [[2, 4, 6, 10], [3, 5, 7, 9]]) == [False, False]\n    assert candidate(rxvzvezvrvxe, [[1, 4, 8, 10], [3, 3, 10, 11]]) == [False, False]\n    assert candidate(amgpelwpmlaewg, [[3, 4, 7, 9], [0, 6, 7, 10]]) == [False, True]\n    assert candidate(leubdglmbglleudm, [[1, 3, 9, 14], [2, 6, 13, 14]]) == [False, False]\n    assert candidate(ooxuznriuzrooixn, [[1, 3, 10, 12], [1, 4, 9, 13]]) == [False, False]\n    assert candidate(nlaonaphinpnalohai, [[2, 5, 13, 13], [2, 7, 9, 14]]) == [False, False]\n    assert candidate(rujokutobuttlysjusrtltuobkoytu, [[5, 6, 18, 23], [10, 13, 15, 26]]) == [False, False]\n    assert candidate(bb, [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]]) == [True, True, True]\n    assert candidate(cc, [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]]) == [True, True, True]\n    assert candidate(dbdb, [[0, 0, 2, 2], [1, 1, 3, 3], [0, 1, 2, 3]]) == [False, False, True]\n    assert candidate(ebbe, [[0, 1, 3, 3], [1, 1, 2, 2], [0, 0, 2, 3]]) == [True, True, True]\n    assert candidate(acacaa, [[0, 1, 5, 5], [1, 1, 4, 4], [1, 2, 3, 4]]) == [False, False, True]\n    assert candidate(bbaabb, [[0, 1, 4, 5], [0, 2, 3, 5], [2, 2, 5, 5]]) == [True, True, True]\n    assert candidate(bbebbe, [[0, 1, 3, 5], [2, 2, 4, 5], [0, 1, 5, 5]]) == [True, False, False]\n    assert candidate(ddaadd, [[1, 1, 4, 4], [0, 0, 4, 4], [0, 2, 3, 5]]) == [True, True, True]\n    assert candidate(nlhhln, [[2, 2, 4, 5], [1, 2, 5, 5], [2, 2, 3, 3]]) == [True, True, True]\n    assert candidate(zbebez, [[0, 2, 5, 5], [1, 1, 3, 5], [0, 2, 4, 5]]) == [True, True, True]\n    assert candidate(cbcbbcbc, [[0, 2, 7, 7], [1, 2, 4, 7], [0, 2, 4, 5]]) == [True, True, True]\n    assert candidate(deceecde, [[3, 3, 6, 7], [1, 2, 4, 5], [2, 3, 7, 7]]) == [True, False, False]\n    assert candidate(fydyfyyd, [[0, 2, 4, 6], [1, 3, 4, 7], [2, 3, 6, 7]]) == [True, True, False]\n    assert candidate(dccabcdbca, [[1, 3, 5, 8], [2, 4, 7, 7], [0, 2, 6, 9]]) == [False, False, False]\n    assert candidate(eacbdeacbd, [[4, 4, 8, 9], [3, 4, 7, 9], [0, 0, 6, 8]]) == [False, False, False]\n    assert candidate(eddaaedada, [[0, 1, 7, 8], [0, 1, 7, 8], [0, 3, 7, 9]]) == [False, False, False]\n    assert candidate(vvsbgsvgbv, [[0, 1, 6, 9], [2, 3, 8, 9], [0, 0, 6, 7]]) == [False, False, False]\n    assert candidate(sukesivksseuiv, [[2, 3, 11, 13], [5, 5, 7, 13], [2, 5, 8, 13]]) == [False, True, False]\n    assert candidate(pbcjpsfxwtbcfjwpsptx, [[0, 4, 13, 13], [5, 5, 15, 18], [2, 3, 13, 18]]) == [False, False, False]\n    assert candidate(natvhtruvwyutyvvnarhwt, [[5, 7, 14, 21], [0, 8, 11, 19], [2, 8, 11, 14]]) == [False, False, False]\n    assert candidate(yjsjywxbriejyxieysrwbj, [[4, 5, 15, 19], [1, 9, 12, 17], [3, 6, 12, 18]]) == [False, False, False]\n    assert candidate(ellaghdbmazdallhmegabddz, [[4, 6, 13, 19], [4, 11, 17, 17], [7, 10, 13, 16]]) == [False, False, False]\n    assert candidate(wcfnhuaulqxbuuxafcwhnbql, [[5, 11, 13, 18], [7, 8, 18, 21], [3, 6, 21, 23]]) == [False, False, False]\n    assert candidate(qyioinjmvpgpropimvqiygrnjp, [[1, 4, 15, 25], [1, 8, 19, 22], [4, 9, 18, 23]]) == [False, False, False]\n\ndef test_check():\n    check(canMakePalindromeQueries)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3206_findIntersectionValues", "language": "py", "prompt": "from typing import List\n\ndef findIntersectionValues(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"You are given two 0-indexed integer arrays nums1 and nums2 of sizes n and m, respectively.\nConsider calculating the following values:\nThe number of indices i such that 0 <= i < n and nums1[i] occurs at least once in nums2.\nThe number of indices i such that 0 <= i < m and nums2[i] occurs at least once in nums1.\nReturn an integer array answer of size 2 containing the two values in the above order.\nExample 1:\nInput: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\nOutput: [3,4]\nExplanation: We calculate the values as follows:\n- The elements at indices 1, 2, and 3 in nums1 occur at least once in nums2. So the first value is 3.\n- The elements at indices 0, 1, 3, and 4 in nums2 occur at least once in nums1. So the second value is 4.\nExample 2:\nInput: nums1 = [3,4,2,3], nums2 = [1,5]\nOutput: [0,0]\nExplanation: There are no common elements between the two arrays, so the two values will be 0.\nConstraints:\nn == nums1.length\nm == nums2.length\n1 <= n, m <= 100\n1 <= nums1[i], nums2[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3206_findIntersectionValues.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([4, 3, 2, 3, 1], [2, 2, 5, 2, 3, 6]) == [3, 4]\n    assert candidate([3, 4, 2, 3], [1, 5]) == [0, 0]\n    assert candidate([24, 28, 7, 27, 7, 27, 9, 24, 9, 10], [12, 29, 9, 7, 5]) == [4, 2]\n    assert candidate([10, 30, 16, 18], [23, 30, 30, 6, 10, 26, 9, 27, 6, 16, 18, 10, 27, 2, 20, 7, 16]) == [4, 7]\n    assert candidate([7, 23, 27, 20, 21, 29, 7, 27, 27, 18, 7, 6, 20, 10], [27, 27, 28, 24, 20, 4, 6, 17, 9, 29, 20, 14, 20]) == [7, 7]\n    assert candidate([15, 30, 6, 6], [15, 4, 16, 10, 7, 23, 24, 3, 4, 6, 14, 8, 18, 1, 29, 27, 2, 17]) == [3, 2]\n    assert candidate([24, 7, 8, 6, 22, 28, 22, 28, 7, 19], [3, 7, 28, 7, 3, 3]) == [4, 3]\n    assert candidate([23, 4, 26, 17, 23, 13], [24, 17, 20, 16, 1, 13, 17, 28, 17]) == [2, 4]\n    assert candidate([5, 8, 18, 27, 16, 29, 27, 12, 1, 29, 16, 27, 22, 19, 14, 12, 11, 25], [24, 8, 16]) == [3, 2]\n    assert candidate([29, 17, 30, 17, 15, 30, 11, 2, 24, 28, 28, 30, 30, 27, 30, 2, 30, 9, 1, 7], [12, 12, 11, 21, 2, 28, 5, 24, 12, 17, 24, 29, 22, 19, 11, 17, 1, 23]) == [10, 10]\n    assert candidate([4, 27, 12, 16, 16, 21, 26, 7, 19, 21, 24, 26, 12, 24, 22, 12, 16], [1, 25, 8, 27, 23, 27, 27, 24]) == [3, 4]\n    assert candidate([27, 19, 20, 16, 24, 27, 27, 24], [30, 21, 21, 6, 17, 16]) == [1, 1]\n    assert candidate([3, 19, 21, 5, 24, 26, 22, 22, 5], [23, 26, 20, 14, 30, 9, 10, 24, 19, 22, 19, 6, 3, 20, 22, 22, 5, 24, 24]) == [8, 11]\n    assert candidate([13, 13, 29, 12], [29, 29, 13, 7, 30, 22]) == [3, 3]\n    assert candidate([30, 4, 16, 14, 14, 14, 20, 15, 20, 30, 6, 10, 14], [30, 16, 20, 2, 18, 10, 5, 6, 30, 20, 22, 18, 14, 23, 15]) == [12, 9]\n    assert candidate([22, 1, 22, 4, 11, 22, 4, 20, 11, 29, 11, 11, 4, 26, 20, 12, 20, 8, 26, 17], [4, 17, 7, 15]) == [4, 2]\n    assert candidate([30, 15, 16, 15, 11, 16, 26, 15, 21], [22, 25, 27, 2, 26, 20, 18, 15, 26, 20, 16]) == [6, 4]\n    assert candidate([5, 6], [13, 12, 8, 5, 19, 13, 27]) == [1, 1]\n    assert candidate([27, 28, 15, 20, 5, 13, 28, 29, 24, 29, 20, 15, 5, 20, 20, 25, 9, 20, 24, 20], [16, 20, 13, 24, 11]) == [9, 3]\n    assert candidate([25, 7, 18], [28, 1, 14, 22, 24, 8, 25, 17]) == [1, 1]\n    assert candidate([10, 15], [4, 10, 15, 28]) == [2, 2]\n    assert candidate([11, 11, 25], [11, 28, 25, 13, 23, 11]) == [3, 3]\n    assert candidate([10, 30, 27, 8, 8, 5, 11, 12, 17, 13, 14, 27, 17, 19, 13, 20, 27], [10, 14, 25, 2, 17, 29, 10, 9, 5, 30, 15, 27]) == [9, 7]\n    assert candidate([19, 22, 22, 22, 22, 29, 22, 28, 29], [7, 28, 29, 22, 16, 22, 22, 4, 17, 11, 22, 22, 22, 25, 25]) == [8, 8]\n    assert candidate([18, 1, 23, 1, 1], [16, 9, 1, 4, 15, 11]) == [3, 1]\n    assert candidate([30, 11, 15, 1, 15, 6, 5, 26, 15, 15], [1, 20, 19, 30, 17, 10, 6, 15]) == [7, 4]\n    assert candidate([17, 6, 30, 30, 15, 30, 22, 2, 18, 22, 21, 21, 17, 19, 25, 30, 18, 30, 1], [2, 16, 25, 5, 25, 1, 14, 11]) == [3, 4]\n    assert candidate([3, 21, 21, 23, 14], [1, 28, 1, 3, 27, 15, 28, 29, 22, 14, 8, 24]) == [2, 2]\n    assert candidate([8, 20, 29, 23, 29, 2, 2, 2, 20], [2, 24, 20, 28, 11, 8, 6, 25]) == [6, 3]\n    assert candidate([22, 27, 4, 27, 30, 22, 25, 8, 8, 30, 1, 16, 1], [9, 21, 8, 12]) == [2, 1]\n    assert candidate([19, 11, 13, 1, 26, 25, 19, 24, 3, 10, 1, 11, 1, 15, 20, 20, 26, 13, 13], [13, 23]) == [3, 1]\n    assert candidate([21, 16, 11, 21], [21, 11, 21, 2, 2, 8, 16, 29, 16, 16, 18, 14, 18, 16, 29, 10, 2]) == [4, 7]\n    assert candidate([15, 7, 23, 12, 23, 16, 18, 1, 16, 28, 28, 19, 7, 30, 19], [9, 1, 10, 15, 23, 8, 8, 24, 30]) == [5, 4]\n    assert candidate([2, 2, 22, 24, 20, 22, 1, 27, 27, 10, 8, 26, 22, 22, 22, 10, 13, 29], [8, 11, 1, 11]) == [2, 2]\n    assert candidate([25, 29, 15, 15, 21, 14, 10, 23, 10, 18, 11, 30, 28, 16, 29], [1, 16, 10, 2, 25, 1, 15]) == [6, 4]\n    assert candidate([18, 18, 11, 27, 18, 20, 20], [16, 28, 25, 28, 20, 15, 8, 21, 4, 6, 19, 20, 20, 20, 29]) == [2, 4]\n    assert candidate([1, 25, 15, 20, 25, 11, 4, 1, 1, 21, 17, 1, 19], [19, 19, 9, 23, 1, 5, 28, 28, 17, 28, 3, 9, 8]) == [6, 4]\n    assert candidate([7, 30, 7, 7, 30, 2, 7, 7], [19, 7, 1, 7, 17, 17, 20, 7, 21, 30, 8, 21, 10, 30, 14]) == [7, 5]\n    assert candidate([7, 18, 13, 27, 13, 9, 22, 30], [27, 29, 21, 30, 16, 13, 29, 5, 9, 16, 29, 27]) == [5, 5]\n    assert candidate([19, 19, 25, 24, 24, 3, 19, 24, 3], [16, 19, 19, 17, 19, 24, 5, 19]) == [6, 5]\n    assert candidate([19, 11, 3, 11, 22, 12, 23, 12, 29, 19, 25, 15, 23, 23], [4, 29, 19, 23, 23, 10, 2, 10, 10, 15, 19, 20, 19, 12, 2, 19, 15, 29]) == [9, 11]\n    assert candidate([25, 21], [20, 12, 5, 13, 21, 25, 9, 30, 21, 7, 21, 12, 20, 7]) == [2, 4]\n    assert candidate([16, 17, 16, 20, 29, 16, 30, 24], [1, 30, 24]) == [2, 2]\n    assert candidate([10, 6, 7, 24, 17, 24, 3, 24], [24, 27, 26, 8, 7, 3, 19, 24, 6, 7, 30, 6]) == [6, 7]\n    assert candidate([3, 26, 7, 6, 23, 22, 26, 8, 11, 23, 17, 26, 7, 2], [13, 11, 10, 8, 4, 23]) == [4, 3]\n    assert candidate([29, 10, 9, 26, 30, 21, 11, 26, 30], [2, 9, 12, 9, 30, 9, 30, 21, 8, 3, 17, 15, 25, 26, 9, 15]) == [6, 8]\n    assert candidate([14, 29, 15, 12, 20, 27, 24, 29, 4, 29, 12, 6, 12, 4, 7], [2, 19, 6, 29, 10, 20, 26, 11, 11, 19, 4, 12, 30, 22, 13, 4, 24]) == [11, 7]\n    assert candidate([11, 5, 3, 4, 15, 30, 25, 25, 30, 6, 3, 28, 25, 6, 30, 17, 15], [4, 25, 17, 2, 24, 28, 25, 15, 4, 25, 8, 6, 15]) == [10, 10]\n    assert candidate([5, 23, 17, 6, 5, 15, 29, 2, 7, 27, 5], [28, 14, 1, 1, 27, 26, 23, 20, 6, 17, 11]) == [4, 4]\n    assert candidate([26, 20, 12, 2, 11, 23, 8, 28, 28, 2, 28, 20, 2, 13, 13, 28, 22], [8, 7, 12, 15, 20]) == [4, 3]\n    assert candidate([15, 6, 14, 24, 6, 22, 6, 24, 6, 6, 6, 16, 24, 3, 7, 6], [11, 6, 18, 20, 12, 14, 17, 3, 11, 6, 2, 3, 17, 19, 3]) == [9, 6]\n    assert candidate([21, 10, 13, 2, 3, 29, 2, 29, 12, 21, 16, 7, 21, 26], [26, 16, 18, 29, 16, 15, 2, 16, 23, 24, 26, 21, 26, 13, 4, 29, 13, 17, 10]) == [11, 13]\n    assert candidate([5, 18, 7, 30, 16, 1, 24, 5, 1, 15, 28, 24, 25], [20, 29, 16, 14]) == [1, 1]\n    assert candidate([1, 11, 11, 28, 28, 10, 15, 28, 6], [27, 21, 28, 18, 7, 7, 20, 26, 4, 28, 11, 22, 16, 30, 11, 9, 9]) == [5, 4]\n    assert candidate([27, 3], [29, 29, 27, 1, 26, 21, 27, 1, 8, 3, 7, 24, 19]) == [2, 3]\n    assert candidate([19, 20, 25, 16, 22, 23, 25, 16, 23, 16, 23, 14], [16, 5]) == [3, 1]\n    assert candidate([9, 9, 5, 28, 22, 15, 11, 28, 5, 3, 15, 6, 16, 13, 29, 30], [18, 12, 3, 5, 24, 15]) == [5, 3]\n    assert candidate([21, 19, 11, 24, 7, 5, 10], [19, 19, 14, 3, 4, 14, 27, 18, 14, 10]) == [2, 3]\n    assert candidate([6, 18, 18, 20, 5, 18, 1, 15, 18, 26, 28, 26], [13, 12, 2, 24, 20, 28, 27, 20, 11]) == [2, 3]\n    assert candidate([18, 14, 14, 15, 10, 14, 7, 1, 28, 15], [11, 18, 15, 18, 27, 12]) == [3, 3]\n    assert candidate([29, 18, 29, 18, 27, 11, 11, 8, 4, 18, 11, 14, 5, 21, 21, 29, 11], [25, 29, 15, 17, 27, 20, 9, 23, 11, 13, 26, 8, 11, 6]) == [9, 5]\n    assert candidate([14, 5, 8, 21, 24, 5, 21, 19, 29], [15, 10, 9, 13, 24, 4, 9, 10, 3, 6, 5, 20, 24, 26, 14, 27, 14, 10, 22]) == [4, 5]\n    assert candidate([2, 11, 11, 9, 25, 11, 27, 16, 28, 10, 18, 3, 22, 15, 16, 11], [11, 3, 21, 9, 3, 13, 23, 9, 28, 25, 8, 28, 29, 2, 23, 12, 13, 14, 14]) == [9, 9]\n    assert candidate([12, 11, 23, 17, 23, 3, 17], [18, 20, 8, 29, 28, 27, 14, 28, 13, 25, 24, 2, 11, 23]) == [3, 2]\n    assert candidate([8, 18, 7, 7, 7, 24, 16, 8, 23, 23, 16, 16, 3, 16, 22, 18, 8], [29, 3, 14, 22, 17, 22, 25, 25, 1, 23, 6, 23, 7, 12, 16]) == [11, 7]\n    assert candidate([25, 9, 11, 13, 21, 3, 7, 24, 29, 14, 2, 7, 18, 30, 18], [2, 3, 28, 3, 25, 25, 21, 10, 4, 19, 23, 11, 27]) == [5, 7]\n    assert candidate([5, 8, 12, 18, 5, 8], [12, 19, 30, 16, 13]) == [1, 1]\n    assert candidate([14, 22, 29, 29, 3, 22, 4, 29, 28, 27], [14, 29]) == [4, 2]\n    assert candidate([28, 28, 11, 5, 18, 5, 18, 17, 21, 4, 9, 4], [19, 6, 12, 17, 13]) == [1, 1]\n    assert candidate([24, 29, 19, 25, 7, 26, 7, 25, 7, 25, 2], [9, 4, 2, 20, 29, 1, 27]) == [2, 2]\n    assert candidate([19, 14, 14, 21, 14, 11, 21, 18, 11, 14, 18, 28, 4], [25, 30, 1]) == [0, 0]\n    assert candidate([9, 17, 21, 21, 18, 9, 9, 16, 9, 3, 17, 9, 3], [9, 10, 20, 7, 3, 13, 13, 22, 15]) == [7, 2]\n    assert candidate([21, 14, 14, 14, 5, 11, 8, 7, 9, 3, 7, 3], [2, 24, 28, 8, 15, 5, 3, 6, 14, 3, 19, 25, 5]) == [7, 6]\n    assert candidate([3, 17, 13, 18, 18, 12, 5, 12, 27, 6, 3, 13, 7, 3, 12, 27, 6], [17, 28, 13, 26, 12, 27, 20, 12, 27, 7, 10, 24]) == [9, 7]\n    assert candidate([18, 9, 30, 9, 3, 13, 25, 5, 30, 25, 13, 19, 25, 3, 28, 29, 9, 9, 9, 12], [17, 20, 28, 30, 27, 1, 22]) == [3, 2]\n    assert candidate([18, 19, 13, 20, 26, 26, 13, 13, 26, 25, 22, 20, 17], [3, 21, 12, 12, 18, 20, 26, 17, 30, 6, 22, 13]) == [11, 6]\n    assert candidate([19, 10, 2, 18, 15, 24, 4, 11, 12, 24, 10, 10, 9, 12, 6, 10, 17, 22, 11, 12], [10, 16, 7, 2, 27, 22, 19, 17, 11, 15, 27, 24]) == [13, 8]\n    assert candidate([8, 8], [8, 24, 8, 8, 19, 27, 7, 21, 8, 8]) == [2, 5]\n    assert candidate([22, 23, 22], [22, 21, 3, 22, 17, 27]) == [2, 2]\n    assert candidate([20, 10], [10, 20, 12]) == [2, 2]\n    assert candidate([15, 28, 15, 17, 3, 6], [3, 15, 17, 30, 18, 22, 4]) == [4, 3]\n    assert candidate([30, 15], [15, 25, 23, 26, 14, 30, 8, 19, 15, 8, 10, 14, 26, 15, 28, 30]) == [2, 5]\n    assert candidate([16, 11, 16, 24, 7, 9, 9, 24], [19, 2, 9, 18, 25, 11, 1, 16, 24, 18, 20, 9, 24, 7, 9, 29, 16, 22, 15]) == [8, 9]\n    assert candidate([13, 25, 8, 8, 1, 14, 8, 4, 8, 8, 25, 8, 22], [17, 8, 13, 8, 8, 20, 26, 20, 8, 22, 17, 14, 8, 16, 26, 2, 23, 18, 18, 4]) == [10, 9]\n    assert candidate([9, 9, 9, 29, 11, 9, 18, 23, 9, 9, 26, 9, 23, 9, 9, 2, 28, 7], [17, 6, 2, 11, 10, 23, 11, 30, 11, 24, 1, 11, 13, 9, 23, 25]) == [13, 8]\n    assert candidate([27, 16, 16, 15], [3, 16, 7, 16, 23, 16, 3, 26, 27, 30, 4, 28, 26, 24, 7]) == [3, 4]\n    assert candidate([19, 1, 26, 15, 15], [6, 25]) == [0, 0]\n    assert candidate([13, 29, 29, 12, 25, 22, 2, 25, 11, 3, 22, 13, 23, 19, 24, 24, 8, 30], [20, 25, 12, 5, 2, 28, 14, 27, 24, 3, 21, 15, 25, 2, 12, 28, 19, 7, 5]) == [8, 9]\n    assert candidate([14, 14, 26, 25, 28, 26], [4, 23, 9, 3, 1, 2, 27, 8, 22, 6, 24]) == [0, 0]\n    assert candidate([14, 29, 2, 26, 14, 10, 1, 23, 28, 5, 17, 1, 21, 5, 28, 14, 6, 4, 18], [1, 20, 7, 15, 18, 26, 5, 10, 8, 6, 27]) == [8, 6]\n    assert candidate([29, 3, 15, 7, 2, 20, 30, 15, 7, 29, 2, 21], [15, 23, 22, 19, 21, 5, 7, 29, 23, 2, 17, 27, 21, 15, 6, 7]) == [9, 8]\n    assert candidate([7, 23, 23, 15, 23, 10, 30, 23, 30, 10, 30, 17, 30, 10, 3, 7, 10], [21, 21]) == [0, 0]\n    assert candidate([8, 13, 1, 13, 13, 12, 27, 21, 4, 4, 17], [12, 13, 1, 27, 4, 9, 12, 8, 25, 29, 4, 8, 4, 29, 21, 28, 1, 8, 6, 6]) == [10, 13]\n    assert candidate([6, 15, 7, 1, 7, 14, 21, 3, 30, 23, 22, 29], [30, 1, 7, 29, 3, 4]) == [6, 5]\n    assert candidate([15, 10, 22, 22, 6, 8, 15, 8, 10], [10, 4, 8, 15, 29, 6, 9, 22, 3, 3, 23, 3, 13, 8, 5, 8, 3]) == [9, 7]\n    assert candidate([14, 4, 1, 27, 22, 14, 7, 22, 15, 3, 22, 8], [30, 4, 4, 27, 6, 4, 16, 11, 23, 14, 4, 7, 21, 22, 9, 14, 4, 27, 17, 27]) == [8, 12]\n    assert candidate([23, 15, 15, 15], [23, 17, 12, 15, 21]) == [4, 2]\n    assert candidate([28, 29, 15, 19, 1, 23, 25, 9, 29, 25, 19, 11, 9, 19], [9, 4, 11, 23, 13, 8, 24, 9, 23]) == [4, 5]\n    assert candidate([19, 24, 7, 2, 3, 10, 27, 10, 4, 4, 9, 29, 10, 7], [23, 4, 7, 4, 27, 13, 2, 9, 23]) == [7, 6]\n    assert candidate([24, 22, 17, 24, 22, 16, 1, 5], [1, 27, 7, 22, 27, 13, 4, 5, 12, 8, 22, 18, 5]) == [4, 5]\n\ndef test_check():\n    check(findIntersectionValues)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3207_findMinimumOperations", "language": "py", "prompt": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    \"\"\"You are given three strings s1, s2, and s3. You have to perform the following operation on these three strings as many times as you want.\nIn one operation you can choose one of these three strings such that its length is at least 2 and delete the rightmost character of it.\nReturn the minimum number of operations you need to perform to make the three strings equal if there is a way to make them equal, otherwise, return -1.\nExample 1:\nInput: s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"\nOutput: 2\nExplanation: Performing operations on s1 and s2 once will lead to three equal strings.\nIt can be shown that there is no way to make them equal with less than two operations.\nExample 2:\nInput: s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"\nOutput: -1\nExplanation: Because the leftmost letters of s1 and s2 are not equal, they could not be equal after any number of operations. So the answer is -1.\nConstraints:\n1 <= s1.length, s2.length, s3.length <= 100\ns1, s2 and s3 consist only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3207_findMinimumOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abc, abb, ab) == 2\n    assert candidate(dac, bac, cac) == -1\n    assert candidate(a, a, a) == 0\n    assert candidate(kui, m, v) == -1\n    assert candidate(a, aabc, a) == 3\n    assert candidate(cc, cccb, c) == 4\n    assert candidate(luso, lu, lu) == 2\n    assert candidate(xx, phe, xie) == -1\n    assert candidate(gzd, bcju, db) == -1\n    assert candidate(cbba, cbaa, c) == 6\n    assert candidate(k, kfb, krcnf) == 6\n    assert candidate(oby, obz, obf) == 3\n    assert candidate(b, aba, aaccaa) == -1\n    assert candidate(a, accabb, aaa) == 7\n    assert candidate(b, bccaaba, ba) == 7\n    assert candidate(b, bacccab, cc) == -1\n    assert candidate(ca, cccabb, cb) == 7\n    assert candidate(ccb, ccba, ccb) == 1\n    assert candidate(mbooi, pdq, br) == -1\n    assert candidate(xxfzj, faho, c) == -1\n    assert candidate(acbc, acba, acb) == 2\n    assert candidate(aduyyk, v, lpyt) == -1\n    assert candidate(xd, sl, azoeaje) == -1\n    assert candidate(bbbaa, bacab, b) == 8\n    assert candidate(cibn, ioom, bxa) == -1\n    assert candidate(bcb, bbac, cbbc) == -1\n    assert candidate(aabbb, cc, cccb) == -1\n    assert candidate(i, xqsfy, diqae) == -1\n    assert candidate(iq, iimanmy, id) == 8\n    assert candidate(pitggt, pi, pih) == 5\n    assert candidate(ten, ten, tenob) == 2\n    assert candidate(vejy, fbqfo, gl) == -1\n    assert candidate(aca, abcc, accba) == 9\n    assert candidate(br, br, brvhgtou) == 6\n    assert candidate(c, bcc, aacbcaca) == -1\n    assert candidate(cab, caac, cacbb) == 6\n    assert candidate(ccab, cbbcbb, ca) == 9\n    assert candidate(inuc, iwpdfj, ib) == 9\n    assert candidate(jrrpyyc, jr, jrt) == 6\n    assert candidate(l, gebqrgnz, jkr) == -1\n    assert candidate(naynn, ax, bhdcz) == -1\n    assert candidate(rexmx, ujmbg, gg) == -1\n    assert candidate(aacbcb, a, acaaac) == 10\n    assert candidate(acbb, acbacc, acb) == 4\n    assert candidate(baacbab, bcc, bca) == 10\n    assert candidate(bcacbba, bca, bca) == 4\n    assert candidate(bcaca, bcaba, bca) == 4\n    assert candidate(ba, bcbcab, bbcbb) == 10\n    assert candidate(cabc, cab, cabbac) == 4\n    assert candidate(bbbbcaac, a, cbcc) == -1\n    assert candidate(gjbtodtym, gxp, g) == 10\n    assert candidate(hfkq, hfrbvno, hf) == 7\n    assert candidate(hym, hl, hshxmbbj) == 10\n    assert candidate(mkdflu, mmbn, mge) == 10\n    assert candidate(nvlobl, mekbzd, s) == -1\n    assert candidate(rpa, rpaxpoh, rpa) == 4\n    assert candidate(ac, aacccccbc, acc) == 11\n    assert candidate(abb, abaac, abcaca) == 8\n    assert candidate(caa, caccaccacb, c) == 11\n    assert candidate(baccaab, cababc, a) == -1\n    assert candidate(cacbb, ca, cacbcac) == 8\n    assert candidate(cbba, cabcabab, ca) == 11\n    assert candidate(cb, cbcbb, cbaaabb) == 8\n    assert candidate(ccabaa, ccabc, cca) == 5\n    assert candidate(ccb, ccac, cccaaca) == 8\n    assert candidate(ccccbb, cccc, cccc) == 2\n    assert candidate(cxxq, cxx, cxxdeqh) == 5\n    assert candidate(d, dffjiulzya, dke) == 11\n    assert candidate(dogv, dofjkhx, dog) == 8\n    assert candidate(dwefrocz, dzz, dwn) == 11\n    assert candidate(etr, ejb, etpubpvr) == 11\n    assert candidate(f, morycy, vledqoo) == -1\n    assert candidate(ful, fular, fulvkv) == 5\n    assert candidate(kzwat, ku, koftvbd) == 11\n    assert candidate(qey, qevtkbss, qeb) == 8\n    assert candidate(saqy, hvufcpko, xm) == -1\n    assert candidate(tllwgcdi, t, tvham) == 11\n    assert candidate(vmwdmadn, vmw, vmw) == 5\n    assert candidate(xobwwhu, xobb, xob) == 5\n    assert candidate(yptajimiz, yp, ypr) == 8\n    assert candidate(z, zcrouxlukb, zbb) == 11\n    assert candidate(aaabc, aaaa, aaaabc) == 6\n    assert candidate(aaa, aab, aabaacaab) == 9\n    assert candidate(aac, aac, aacabbbca) == 6\n    assert candidate(abaab, abaabb, abaa) == 3\n    assert candidate(abcomon, gkuneup, q) == -1\n    assert candidate(acc, accacb, acbabc) == 9\n    assert candidate(cca, caaab, babbacc) == -1\n    assert candidate(bccbc, bc, bcccbcac) == 9\n    assert candidate(bpp, bin, bfkbyhubw) == 12\n    assert candidate(bbsyg, blbp, brghkr) == 12\n    assert candidate(bxpvamp, bxpv, bxpv) == 3\n    assert candidate(ccbabca, cbcbaca, c) == 12\n    assert candidate(accb, bbc, cbbaccba) == -1\n    assert candidate(cbccc, cbc, cbcccba) == 6\n    assert candidate(cac, ccacc, cabacba) == 12\n    assert candidate(ccb, ccbcb, ccbccab) == 6\n    assert candidate(caacabcbc, ccb, ccc) == 12\n    assert candidate(cccabaacc, ccc, ccc) == 6\n    assert candidate(ajjdre, gsrq, eurcj) == -1\n\ndef test_check():\n    check(findMinimumOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3209_minimumCoins", "language": "py", "prompt": "from typing import List\n\ndef minimumCoins(prices: List[int]) -> int:\n    \"\"\"You are at a fruit market with different types of exotic fruits on display.\nYou are given a 1-indexed array prices, where prices[i] denotes the number of coins needed to purchase the ith fruit.\nThe fruit market has the following offer:\nIf you purchase the ith fruit at prices[i] coins, you can get the next i fruits for free.\nNote that even if you can take fruit j for free, you can still purchase it for prices[j] coins to receive a new offer.\nReturn the minimum number of coins needed to acquire all the fruits.\nExample 1:\nInput: prices = [3,1,2]\nOutput: 4\nExplanation: You can acquire the fruits as follows:\n- Purchase the 1st fruit with 3 coins, you are allowed to take the 2nd fruit for free.\n- Purchase the 2nd fruit with 1 coin, you are allowed to take the 3rd fruit for free.\n- Take the 3rd fruit for free.\nNote that even though you were allowed to take the 2nd fruit for free, you purchased it because it is more optimal.\nIt can be proven that 4 is the minimum number of coins needed to acquire all the fruits.\nExample 2:\nInput: prices = [1,10,1,1]\nOutput: 2\nExplanation: You can acquire the fruits as follows:\n- Purchase the 1st fruit with 1 coin, you are allowed to take the 2nd fruit for free.\n- Take the 2nd fruit for free.\n- Purchase the 3rd fruit for 1 coin, you are allowed to take the 4th fruit for free.\n- Take the 4th fruit for free.\nIt can be proven that 2 is the minimum number of coins needed to acquire all the fruits.\nConstraints:\n1 <= prices.length <= 1000\n1 <= prices[i] <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3209_minimumCoins.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([3, 1, 2]) == 4\n    assert candidate([1, 10, 1, 1]) == 2\n    assert candidate([26, 18, 6, 12, 49, 7, 45, 45]) == 39\n    assert candidate([27, 17, 29, 45, 3, 39, 42, 26]) == 47\n    assert candidate([14, 37, 37, 38, 24, 15, 12]) == 63\n    assert candidate([1, 37, 19, 38, 11, 42, 18, 33, 6, 37, 15, 48, 23, 12, 41, 18, 27, 32]) == 37\n    assert candidate([38, 23, 27, 32, 47, 45, 48, 24, 39, 26, 37, 42, 24, 45, 27, 26, 15, 16, 26, 6]) == 132\n    assert candidate([45, 44, 5, 9, 22, 14, 29, 14, 21, 13, 45, 10, 2, 16, 14, 30, 26, 1, 49]) == 66\n    assert candidate([37, 42, 6, 50, 50, 38, 30, 38, 1, 13, 25, 39, 18, 1, 35, 32, 12]) == 74\n    assert candidate([17, 32, 11, 25, 22]) == 28\n    assert candidate([18, 10, 1, 11, 6, 30, 19, 24, 1, 18, 37, 29, 28, 27, 38]) == 26\n    assert candidate([3, 10, 25, 47, 49, 10, 49]) == 38\n    assert candidate([46, 7, 15]) == 53\n    assert candidate([16, 45, 25, 5, 18, 19, 25, 13, 33]) == 59\n    assert candidate([21, 16, 7, 10, 30]) == 28\n    assert candidate([21, 22, 29, 37, 23, 15, 39, 9, 19, 10, 6, 9, 33, 28, 43]) == 71\n    assert candidate([37, 16, 42, 47, 16, 31, 39, 8, 26, 50, 33]) == 77\n    assert candidate([32, 4]) == 32\n    assert candidate([31, 9, 2, 36, 4, 45, 28, 28, 12, 22, 44, 17, 10, 48, 15, 22, 7, 14, 41]) == 56\n    assert candidate([1, 31, 9, 36, 44, 2, 23]) == 12\n    assert candidate([3, 7, 2, 36, 33, 7, 21, 40, 19]) == 12\n    assert candidate([9, 4, 7, 29, 22, 50]) == 16\n    assert candidate([28, 2, 40, 15]) == 30\n    assert candidate([16, 17, 47, 20, 18, 37]) == 51\n    assert candidate([42, 6, 44, 47, 11, 6, 30, 38, 41, 43, 46, 35, 28, 4, 47, 1, 7, 35]) == 93\n    assert candidate([10, 10, 5, 8, 5, 13, 34, 31, 36]) == 20\n    assert candidate([12, 20, 14, 46, 22, 1, 42, 50, 47, 47, 38, 37, 13]) == 40\n    assert candidate([1, 38, 28, 46, 18, 22, 12, 7, 44, 44, 40, 36, 41, 5, 33, 5, 30, 33, 31]) == 46\n    assert candidate([6, 45, 2, 29, 44, 14, 44]) == 22\n    assert candidate([34, 13, 50, 42, 24, 47, 41, 8, 26, 34, 3, 48, 39, 24, 39, 26, 46]) == 74\n    assert candidate([47, 9, 33, 6, 33, 40, 28, 37, 49, 39, 45, 14, 13, 40, 17, 14, 39, 12, 15, 6]) == 103\n    assert candidate([32]) == 32\n    assert candidate([35, 46, 50, 35, 11, 14, 44, 17, 45, 23, 34, 33, 8, 27, 19, 7, 10, 12, 14]) == 107\n    assert candidate([50, 45, 14, 24, 18, 15, 9, 14]) == 73\n    assert candidate([38, 19, 18, 15, 20, 43, 18, 9, 44, 26, 29]) == 74\n    assert candidate([26, 21, 7, 40, 37, 44, 13, 3, 10, 9, 15, 12, 30, 18, 31, 10, 23]) == 55\n    assert candidate([36, 50]) == 36\n    assert candidate([1, 32, 48, 36, 26, 5, 30, 25, 2, 17, 26, 39, 17, 46, 34, 47, 43, 45, 20, 48]) == 71\n    assert candidate([19, 24, 31, 24]) == 43\n    assert candidate([1, 18, 25, 29, 17, 9, 3, 29, 23, 17, 18]) == 29\n    assert candidate([18, 36, 18, 44, 30, 8, 42, 33, 45, 19, 50, 19, 24, 48]) == 63\n    assert candidate([26, 25, 47, 36, 9, 31, 1, 29, 29, 42, 29, 42, 36, 19, 45, 4, 11, 7]) == 80\n    assert candidate([24, 34, 47, 12, 24, 48, 14, 30, 28, 43, 35, 45, 11, 11, 35, 38]) == 95\n    assert candidate([29, 18, 2, 6, 47, 32, 27, 12, 38, 17]) == 49\n    assert candidate([3, 31, 15, 18, 47, 18, 2, 27, 24, 6, 36, 35, 41, 21, 30]) == 26\n    assert candidate([29, 45, 8, 45, 23, 35]) == 37\n    assert candidate([39, 37]) == 39\n    assert candidate([18, 45, 6, 14, 41, 41]) == 24\n    assert candidate([50, 21, 38, 2, 32, 49, 32, 40, 41, 34, 33, 40, 36, 16, 29, 34, 42, 40, 46]) == 121\n    assert candidate([28, 17, 42, 20, 6, 26, 47, 6, 23]) == 51\n    assert candidate([37, 27, 17, 40, 50, 35, 16, 4, 28, 5, 27, 13, 46, 7, 23, 27]) == 74\n    assert candidate([11, 5, 40, 16, 20, 38]) == 32\n    assert candidate([16, 27, 5, 38, 12, 24, 7, 49, 40, 13, 38, 13, 34, 38, 37, 2, 4, 44]) == 41\n    assert candidate([25, 9, 49, 19, 33]) == 53\n    assert candidate([47, 23, 46, 13, 26, 44, 43, 22, 43, 24, 13, 20, 6, 16, 8, 26]) == 105\n    assert candidate([8, 1, 1]) == 9\n    assert candidate([47, 45, 2, 25, 7, 46]) == 49\n    assert candidate([4, 31, 50, 45, 5, 50]) == 40\n    assert candidate([30, 41, 1, 49, 9, 49, 41, 27, 41, 14, 23, 3, 46, 40, 37, 28, 45, 19, 36, 49]) == 54\n    assert candidate([6, 3, 49, 28, 31, 36, 5, 50, 39]) == 40\n    assert candidate([37, 2, 19, 36, 26, 27, 3, 23, 10, 20, 33, 8, 39, 6, 28]) == 65\n    assert candidate([37, 34, 12, 30, 43, 35, 6, 21, 47, 38, 14, 31, 49, 11, 14]) == 66\n    assert candidate([49, 6, 12, 35, 17, 17, 2]) == 63\n    assert candidate([45, 27, 43, 34, 41, 30, 28, 45, 24, 50, 20, 4, 15, 42]) == 116\n    assert candidate([48, 22, 36]) == 70\n    assert candidate([47, 13, 23, 31, 41, 25]) == 70\n    assert candidate([3, 44, 17, 37, 9, 14, 37]) == 29\n    assert candidate([4, 43, 7, 15, 38]) == 11\n    assert candidate([10, 25, 7, 37, 6, 43, 4, 50, 9, 14, 36, 35, 36, 44, 17, 10, 44, 46, 50]) == 35\n    assert candidate([45, 28, 10, 18, 18, 3, 42, 24, 14, 11, 13, 32, 37, 31, 50, 32]) == 69\n    assert candidate([12, 38, 44, 24, 42, 9, 32, 40, 8, 20, 46, 39, 33]) == 73\n    assert candidate([5, 42, 30, 20, 37, 26, 38, 30, 30, 32, 39, 31, 33, 41, 23, 4, 29]) == 85\n    assert candidate([44, 22]) == 44\n    assert candidate([8, 8, 11, 21, 9]) == 19\n    assert candidate([2, 37, 19, 30, 37, 27, 10, 37]) == 31\n    assert candidate([43, 27, 48, 22]) == 70\n    assert candidate([50, 23, 37, 49, 45, 14, 18, 39, 50, 7, 31]) == 101\n    assert candidate([37, 3, 32, 25, 21, 22, 26, 49, 14, 45, 1, 36]) == 62\n    assert candidate([21, 29, 31, 28, 2, 41, 4, 43, 41, 16, 38, 33, 3, 6, 43, 22, 15]) == 59\n    assert candidate([24, 47, 32, 41, 35, 14, 18, 23, 27, 8, 27]) == 70\n    assert candidate([40, 25, 32]) == 65\n    assert candidate([9, 18, 2, 26, 15, 3, 2, 33, 46, 6, 11, 34, 27, 7, 5, 7, 26, 13, 48]) == 18\n    assert candidate([41, 8, 38, 32, 36, 30, 23, 49, 40, 46, 42, 34, 2, 12, 12, 19, 20, 50, 40]) == 104\n    assert candidate([28, 8, 24, 14, 34, 36, 48]) == 50\n    assert candidate([2, 36, 22, 41, 42, 26, 1, 48, 14, 27, 22, 26]) == 25\n    assert candidate([25, 39, 21, 21, 16]) == 46\n    assert candidate([44, 41, 36, 42, 21, 32, 45, 5]) == 101\n    assert candidate([10]) == 10\n    assert candidate([35, 29]) == 35\n    assert candidate([38, 35, 33, 11, 43, 33]) == 71\n    assert candidate([19, 29, 49, 20, 8, 12, 13, 28, 45, 9, 12, 3, 1, 17, 35]) == 65\n    assert candidate([34, 22, 1, 41, 34, 27, 18]) == 53\n    assert candidate([31, 9, 39, 6, 14, 32, 28, 35, 34, 42, 19, 41, 35, 24, 32, 16, 12, 49, 16]) == 73\n    assert candidate([46, 50, 21, 14, 26, 47]) == 67\n    assert candidate([5, 22, 36, 6, 15, 49, 20, 16, 36, 15, 32, 27, 50, 19, 12, 22, 9, 33]) == 57\n    assert candidate([17, 4, 36, 4, 32, 11, 42, 12, 20]) == 36\n    assert candidate([48, 33, 39, 1, 13, 40]) == 82\n    assert candidate([32, 19, 33, 30, 32, 44, 47, 8, 10, 1, 23, 6, 28, 19, 20, 48, 12, 10, 20, 22]) == 84\n    assert candidate([29, 5, 46, 34, 38, 7, 1, 15]) == 68\n    assert candidate([39, 50, 22, 1, 38, 22, 49, 16, 27, 48, 45, 28, 43, 34]) == 78\n\ndef test_check():\n    check(minimumCoins)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3210_beautifulSubstrings", "language": "py", "prompt": "def beautifulSubstrings(s: str, k: int) -> int:\n    \"\"\"You are given a string s and a positive integer k.\nLet vowels and consonants be the number of vowels and consonants in a string.\nA string is beautiful if:\nvowels == consonants.\n(vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k.\nReturn the number of non-empty beautiful substrings in the given string s.\nA substring is a contiguous sequence of characters in a string.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\nConsonant letters in English are every letter except vowels.\nExample 1:\nInput: s = \"baeyh\", k = 2\nOutput: 2\nExplanation: There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). \nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string.\nExample 2:\nInput: s = \"abba\", k = 1\nOutput: 3\nExplanation: There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). \n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string.\nExample 3:\nInput: s = \"bcdf\", k = 1\nOutput: 0\nExplanation: There are no beautiful substrings in the given string.\nConstraints:\n1 <= s.length <= 1000\n1 <= k <= 1000\ns consists of only English lowercase letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3210_beautifulSubstrings.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(baeyh, 2) == 2\n    assert candidate(abba, 1) == 3\n    assert candidate(bcdf, 1) == 0\n    assert candidate(ihroyeeb, 5) == 0\n    assert candidate(uzuxpzou, 3) == 1\n    assert candidate(ouuoeqd, 2) == 1\n    assert candidate(eeebjoxxujuaeoqibd, 8) == 4\n    assert candidate(ilougekqlovegioemdvu, 4) == 21\n    assert candidate(tqaewreikaztwpfwnef, 8) == 3\n    assert candidate(oykiuhsafgfjumnzb, 7) == 0\n    assert candidate(ifvsa, 3) == 0\n    assert candidate(svzauyuevujektj, 5) == 3\n    assert candidate(urahjig, 2) == 2\n    assert candidate(ime, 2) == 0\n    assert candidate(oacghieut, 5) == 0\n    assert candidate(aoluu, 3) == 0\n    assert candidate(ioaoiciiuoziout, 1) == 5\n    assert candidate(ouafupsuhid, 6) == 0\n    assert candidate(ox, 2) == 0\n    assert candidate(tlaiwoauazutusiaaui, 10) == 0\n    assert candidate(caepeym, 2) == 2\n    assert candidate(apyxvceue, 4) == 1\n    assert candidate(imkqbb, 4) == 0\n    assert candidate(caaz, 2) == 1\n    assert candidate(pyicoy, 1) == 6\n    assert candidate(uopmyrsntjhiroikup, 8) == 2\n    assert candidate(aujfxqxcj, 5) == 0\n    assert candidate(eeizejuoxeumz, 4) == 6\n    assert candidate(uuouuaifnboeiulttio, 4) == 10\n    assert candidate(woozzxd, 3) == 0\n    assert candidate(pulorolqcvhafexui, 9) == 3\n    assert candidate(hmuaewojioizoguvoaje, 3) == 4\n    assert candidate(b, 1) == 0\n    assert candidate(aiejouohnqnketinvat, 3) == 6\n    assert candidate(mjiogpri, 2) == 3\n    assert candidate(movbyaeouil, 3) == 2\n    assert candidate(puureouausxmitvav, 6) == 2\n    assert candidate(op, 1) == 1\n    assert candidate(iuhoezpooxcohtlapolo, 1) == 39\n    assert candidate(cioi, 2) == 0\n    assert candidate(pueutaoyaxk, 6) == 0\n    assert candidate(iiuresacruaaan, 3) == 3\n    assert candidate(agntyaazvpejidwaph, 8) == 1\n    assert candidate(wiybolyniexiibou, 6) == 2\n    assert candidate(coiyakadxi, 2) == 8\n    assert candidate(oraajoeruiakixj, 3) == 1\n    assert candidate(jeayap, 1) == 7\n    assert candidate(iu, 1) == 0\n    assert candidate(awozoy, 2) == 3\n    assert candidate(fheabmlsyeeeuoeogyz, 9) == 5\n    assert candidate(eaizneuxi, 1) == 10\n    assert candidate(uurqufaucsuoqljh, 4) == 14\n    assert candidate(jrtept, 4) == 0\n    assert candidate(olgioxooiejooosaed, 5) == 0\n    assert candidate(uizoy, 2) == 1\n    assert candidate(lswabfiujjhexzos, 4) == 5\n    assert candidate(iuu, 1) == 0\n    assert candidate(qeaxut, 1) == 7\n    assert candidate(aojiau, 2) == 0\n    assert candidate(oaiaaaargkonlcsoaygf, 5) == 2\n    assert candidate(zoowrawkm, 4) == 3\n    assert candidate(uqiwuoevkfhkkua, 4) == 6\n    assert candidate(kavuaaeodvaxicm, 6) == 0\n    assert candidate(qpxeceq, 1) == 6\n    assert candidate(iaabaofuodcbek, 5) == 3\n    assert candidate(eel, 1) == 1\n    assert candidate(ikeuhe, 1) == 5\n    assert candidate(lueikvo, 2) == 2\n    assert candidate(oauau, 2) == 0\n    assert candidate(qzoieeotieeakqraeao, 4) == 4\n    assert candidate(ehaascocsdmgekni, 9) == 3\n    assert candidate(euqeklniykiji, 5) == 0\n    assert candidate(vaeiiioidiioxhduu, 7) == 0\n    assert candidate(aa, 1) == 0\n    assert candidate(chaua, 3) == 0\n    assert candidate(edfrglfr, 3) == 0\n    assert candidate(dqbe, 1) == 1\n    assert candidate(ghooirorxge, 4) == 6\n    assert candidate(fodartekaonq, 4) == 9\n    assert candidate(feeanzkjpfehzeuni, 6) == 0\n    assert candidate(ignoouesduu, 2) == 6\n    assert candidate(yif, 2) == 0\n    assert candidate(gondfjaeeuhbuuasgip, 10) == 0\n    assert candidate(djooomsffoonelyeode, 3) == 14\n    assert candidate(pgaimei, 4) == 2\n    assert candidate(naipqentonee, 4) == 8\n    assert candidate(bouov, 2) == 0\n    assert candidate(lcuhoypz, 5) == 0\n    assert candidate(g, 1) == 0\n    assert candidate(qc, 2) == 0\n    assert candidate(mhznea, 2) == 1\n    assert candidate(uxvjixdujgyfauo, 8) == 1\n    assert candidate(iyjkuox, 3) == 1\n    assert candidate(xbjfoayfpafatnuyord, 3) == 3\n    assert candidate(nvoede, 3) == 1\n    assert candidate(usnuaxpaktrweatruu, 5) == 0\n    assert candidate(euojmsora, 1) == 10\n    assert candidate(iapgoi, 3) == 0\n    assert candidate(uafuimcpxyeoixgbyeio, 5) == 3\n    assert candidate(weuaatpu, 5) == 0\n\ndef test_check():\n    check(beautifulSubstrings)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3211_findMaximumLength", "language": "py", "prompt": "from typing import List\n\ndef findMaximumLength(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums.\nYou can perform any number of operations, where each operation involves selecting a subarray of the array and replacing it with the sum of its elements. For example, if the given array is [1,3,5,6] and you select subarray [3,5] the array will convert to [1,8,6].\nReturn the maximum length of a non-decreasing array that can be made after applying operations.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [5,2,2]\nOutput: 1\nExplanation: This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1.\nExample 2:\nInput: nums = [1,2,3,4]\nOutput: 4\nExplanation: The array is non-decreasing. So the answer is 4.\nExample 3:\nInput: nums = [4,3,2,6]\nOutput: 3\nExplanation: Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum possible answer is 3.\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3211_findMaximumLength.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 2, 2]) == 1\n    assert candidate([1, 2, 3, 4]) == 4\n    assert candidate([4, 3, 2, 6]) == 3\n    assert candidate([32]) == 1\n    assert candidate([38]) == 1\n    assert candidate([60]) == 1\n    assert candidate([79]) == 1\n    assert candidate([85]) == 1\n    assert candidate([170]) == 1\n    assert candidate([198]) == 1\n    assert candidate([220]) == 1\n    assert candidate([318]) == 1\n    assert candidate([350]) == 1\n    assert candidate([381]) == 1\n    assert candidate([413]) == 1\n    assert candidate([426]) == 1\n    assert candidate([429]) == 1\n    assert candidate([431]) == 1\n    assert candidate([445]) == 1\n    assert candidate([488]) == 1\n    assert candidate([492]) == 1\n    assert candidate([497]) == 1\n    assert candidate([515]) == 1\n    assert candidate([582]) == 1\n    assert candidate([589]) == 1\n    assert candidate([620]) == 1\n    assert candidate([632]) == 1\n    assert candidate([703]) == 1\n    assert candidate([748]) == 1\n    assert candidate([776]) == 1\n    assert candidate([977]) == 1\n    assert candidate([986]) == 1\n    assert candidate([990]) == 1\n    assert candidate([29, 859]) == 2\n    assert candidate([48, 612]) == 2\n    assert candidate([76, 837]) == 2\n    assert candidate([103, 341]) == 2\n    assert candidate([171, 323]) == 2\n    assert candidate([248, 719]) == 2\n    assert candidate([253, 61]) == 1\n    assert candidate([274, 467]) == 2\n    assert candidate([351, 665]) == 2\n    assert candidate([372, 382]) == 2\n    assert candidate([404, 409]) == 2\n    assert candidate([455, 40]) == 1\n    assert candidate([472, 843]) == 2\n    assert candidate([504, 838]) == 2\n    assert candidate([549, 747]) == 2\n    assert candidate([570, 810]) == 2\n    assert candidate([621, 809]) == 2\n    assert candidate([643, 802]) == 2\n    assert candidate([689, 192]) == 1\n    assert candidate([709, 481]) == 1\n    assert candidate([742, 67]) == 1\n    assert candidate([745, 725]) == 1\n    assert candidate([773, 877]) == 2\n    assert candidate([776, 962]) == 2\n    assert candidate([791, 434]) == 1\n    assert candidate([824, 783]) == 1\n    assert candidate([840, 388]) == 1\n    assert candidate([876, 264]) == 1\n    assert candidate([940, 694]) == 1\n    assert candidate([959, 372]) == 1\n    assert candidate([981, 998]) == 2\n    assert candidate([41, 340, 784]) == 3\n    assert candidate([103, 652, 579]) == 2\n    assert candidate([116, 635, 966]) == 3\n    assert candidate([137, 32, 745]) == 2\n    assert candidate([247, 173, 316]) == 2\n    assert candidate([276, 315, 947]) == 3\n    assert candidate([278, 754, 912]) == 3\n    assert candidate([314, 882, 708]) == 2\n    assert candidate([371, 101, 367]) == 2\n    assert candidate([402, 305, 990]) == 2\n    assert candidate([403, 553, 697]) == 3\n    assert candidate([431, 780, 315]) == 2\n    assert candidate([479, 322, 44]) == 1\n    assert candidate([512, 234, 679]) == 2\n    assert candidate([513, 847, 778]) == 2\n    assert candidate([525, 177, 936]) == 2\n    assert candidate([588, 42, 18]) == 1\n    assert candidate([646, 174, 827]) == 2\n    assert candidate([680, 242, 726]) == 2\n    assert candidate([769, 131, 241]) == 1\n    assert candidate([780, 591, 213]) == 2\n    assert candidate([783, 23, 848]) == 2\n    assert candidate([787, 201, 30]) == 1\n    assert candidate([791, 470, 87]) == 1\n    assert candidate([797, 181, 492]) == 1\n    assert candidate([868, 4, 455]) == 1\n    assert candidate([881, 306, 316]) == 1\n    assert candidate([886, 116, 68]) == 1\n    assert candidate([893, 531, 805]) == 2\n    assert candidate([926, 641, 145]) == 1\n    assert candidate([964, 624, 279]) == 1\n    assert candidate([987, 694, 396]) == 2\n    assert candidate([38, 986, 134, 156]) == 2\n    assert candidate([43, 236, 417, 521]) == 4\n    assert candidate([58, 890, 892, 52]) == 3\n    assert candidate([81, 738, 403, 654]) == 3\n\ndef test_check():\n    check(findMaximumLength)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3212_numberOfGoodPartitions", "language": "py", "prompt": "from typing import List\n\ndef numberOfGoodPartitions(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array nums consisting of positive integers.\nA partition of an array into one or more contiguous subarrays is called good if no two subarrays contain the same number.\nReturn the total number of good partitions of nums.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nInput: nums = [1,2,3,4]\nOutput: 8\nExplanation: The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4]).\nExample 2:\nInput: nums = [1,1,1,1]\nOutput: 1\nExplanation: The only possible good partition is: ([1,1,1,1]).\nExample 3:\nInput: nums = [1,2,1,3]\nOutput: 2\nExplanation: The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3]).\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3212_numberOfGoodPartitions.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == 8\n    assert candidate([1, 1, 1, 1]) == 1\n    assert candidate([1, 2, 1, 3]) == 2\n    assert candidate([1]) == 1\n    assert candidate([100000]) == 1\n    assert candidate([1000000000]) == 1\n    assert candidate([1, 1, 1, 3, 2]) == 4\n    assert candidate([1, 1, 1, 9, 7]) == 4\n    assert candidate([1, 1, 5, 9, 2]) == 8\n    assert candidate([1, 4, 1, 7, 5]) == 4\n    assert candidate([1, 5, 1, 5, 6]) == 2\n    assert candidate([1, 5, 1, 10, 8]) == 4\n    assert candidate([1, 6, 8, 1, 5]) == 2\n    assert candidate([1, 6, 9, 4, 10]) == 16\n    assert candidate([1, 7, 1, 6, 8]) == 4\n    assert candidate([1, 9, 1, 1, 7]) == 2\n    assert candidate([2, 1, 6, 7, 5]) == 16\n    assert candidate([2, 3, 2, 6, 9]) == 4\n    assert candidate([2, 3, 2, 8, 8]) == 2\n    assert candidate([2, 3, 9, 2, 6]) == 2\n    assert candidate([2, 4, 2, 7, 4]) == 1\n    assert candidate([2, 4, 7, 1, 2]) == 1\n    assert candidate([2, 5, 1, 2, 2]) == 1\n    assert candidate([2, 5, 1, 4, 9]) == 16\n    assert candidate([2, 5, 6, 4, 2]) == 1\n    assert candidate([2, 6, 1, 9, 5]) == 16\n    assert candidate([2, 7, 8, 9, 3]) == 16\n    assert candidate([2, 9, 1, 2, 4]) == 2\n    assert candidate([2, 10, 4, 2, 3]) == 2\n    assert candidate([3, 3, 3, 9, 9]) == 2\n    assert candidate([3, 3, 8, 1, 6]) == 8\n    assert candidate([3, 3, 10, 4, 2]) == 8\n    assert candidate([3, 4, 5, 1, 7]) == 16\n    assert candidate([3, 7, 6, 4, 9]) == 16\n    assert candidate([3, 8, 10, 7, 6]) == 16\n    assert candidate([3, 10, 10, 10, 4]) == 4\n    assert candidate([4, 1, 2, 3, 10]) == 16\n    assert candidate([4, 1, 7, 9, 4]) == 1\n    assert candidate([4, 8, 4, 8, 6]) == 2\n    assert candidate([5, 1, 1, 9, 3]) == 8\n    assert candidate([5, 2, 8, 10, 4]) == 16\n    assert candidate([5, 3, 6, 6, 6]) == 4\n    assert candidate([5, 3, 8, 8, 2]) == 8\n    assert candidate([5, 4, 5, 9, 9]) == 2\n    assert candidate([5, 4, 10, 2, 4]) == 2\n    assert candidate([5, 5, 7, 3, 1]) == 8\n    assert candidate([5, 5, 8, 4, 1]) == 8\n    assert candidate([5, 9, 1, 9, 2]) == 4\n    assert candidate([5, 10, 1, 1, 6]) == 8\n    assert candidate([6, 1, 7, 9, 10]) == 16\n    assert candidate([6, 3, 5, 1, 10]) == 16\n    assert candidate([6, 3, 9, 9, 3]) == 2\n    assert candidate([6, 6, 5, 5, 8]) == 4\n    assert candidate([6, 7, 3, 3, 8]) == 8\n    assert candidate([6, 8, 6, 5, 7]) == 4\n    assert candidate([6, 9, 10, 5, 8]) == 16\n    assert candidate([6, 10, 2, 6, 10]) == 1\n    assert candidate([6, 10, 5, 4, 3]) == 16\n    assert candidate([7, 1, 2, 3, 5]) == 16\n    assert candidate([7, 1, 9, 2, 1]) == 2\n    assert candidate([7, 2, 1, 2, 6]) == 4\n    assert candidate([7, 5, 1, 10, 10]) == 8\n    assert candidate([7, 5, 7, 4, 6]) == 4\n    assert candidate([7, 5, 8, 4, 6]) == 16\n    assert candidate([7, 9, 4, 8, 7]) == 1\n    assert candidate([7, 9, 8, 8, 4]) == 8\n    assert candidate([8, 2, 2, 5, 6]) == 8\n    assert candidate([8, 3, 2, 1, 9]) == 16\n    assert candidate([8, 3, 4, 9, 7]) == 16\n    assert candidate([8, 3, 6, 5, 1]) == 16\n    assert candidate([8, 3, 8, 3, 4]) == 2\n    assert candidate([8, 3, 8, 3, 10]) == 2\n    assert candidate([8, 4, 4, 5, 8]) == 1\n    assert candidate([8, 4, 8, 10, 9]) == 4\n    assert candidate([8, 5, 5, 3, 9]) == 8\n    assert candidate([8, 7, 4, 2, 1]) == 16\n    assert candidate([8, 7, 6, 10, 1]) == 16\n    assert candidate([8, 9, 7, 3, 6]) == 16\n    assert candidate([8, 10, 5, 9, 9]) == 8\n    assert candidate([9, 1, 2, 2, 3]) == 8\n    assert candidate([9, 1, 4, 3, 7]) == 16\n    assert candidate([9, 1, 7, 8, 9]) == 1\n    assert candidate([9, 2, 7, 5, 10]) == 16\n    assert candidate([9, 3, 6, 5, 5]) == 8\n    assert candidate([9, 4, 7, 1, 1]) == 8\n    assert candidate([9, 5, 5, 8, 3]) == 8\n    assert candidate([9, 7, 2, 7, 10]) == 4\n    assert candidate([9, 7, 8, 3, 2]) == 16\n    assert candidate([9, 8, 2, 5, 5]) == 8\n    assert candidate([9, 8, 2, 10, 7]) == 16\n    assert candidate([9, 8, 3, 7, 6]) == 16\n    assert candidate([9, 8, 6, 6, 8]) == 2\n    assert candidate([9, 8, 8, 2, 1]) == 8\n    assert candidate([9, 8, 9, 5, 7]) == 4\n    assert candidate([10, 1, 3, 2, 3]) == 4\n    assert candidate([10, 1, 10, 3, 5]) == 4\n    assert candidate([10, 2, 1, 4, 1]) == 4\n    assert candidate([10, 3, 1, 3, 4]) == 4\n    assert candidate([10, 5, 6, 2, 8]) == 16\n    assert candidate([10, 6, 5, 10, 2]) == 2\n\ndef test_check():\n    check(numberOfGoodPartitions)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3213_countSubarrays", "language": "py", "prompt": "from typing import List\n\ndef countSubarrays(nums: List[int], k: int) -> int:\n    \"\"\"You are given an integer array nums and a positive integer k.\nReturn the number of subarrays where the maximum element of nums appears at least k times in that subarray.\nA subarray is a contiguous sequence of elements within an array.\nExample 1:\nInput: nums = [1,3,2,3,3], k = 2\nOutput: 6\nExplanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].\nExample 2:\nInput: nums = [1,4,2,1], k = 3\nOutput: 0\nExplanation: No subarray contains the element 4 at least 3 times.\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 106\n1 <= k <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3213_countSubarrays.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 2, 3, 3], 2) == 6\n    assert candidate([1, 4, 2, 1], 3) == 0\n    assert candidate([61, 23, 38, 23, 56, 40, 82, 56, 82, 82, 82, 70, 8, 69, 8, 7, 19, 14, 58, 42, 82, 10, 82, 78, 15, 82], 2) == 224\n    assert candidate([37, 20, 38, 66, 34, 38, 9, 41, 1, 14, 25, 63, 8, 12, 66, 66, 60, 12, 35, 27, 16, 38, 12, 66, 38, 36, 59, 54, 66, 54, 66, 48, 59, 66, 34, 11, 50, 66, 42, 51, 53, 66, 31, 24, 66, 44, 66, 1, 66, 66, 29, 54], 5) == 594\n    assert candidate([28, 5, 58, 91, 24, 91, 53, 9, 48, 85, 16, 70, 91, 91, 47, 91, 61, 4, 54, 61, 49], 1) == 187\n    assert candidate([43, 105, 105, 88, 19, 82, 95, 32, 80, 37, 49, 105, 25, 105, 46, 54, 45, 84, 105, 88, 26, 20, 49, 54, 31, 105, 8, 103, 37, 32, 105, 105, 97, 27, 105, 89, 105, 47, 25, 87, 29, 105, 105, 105, 24, 105, 105, 48, 19, 91, 96, 71], 7) == 454\n    assert candidate([107, 101, 180, 137, 191, 148, 83, 15, 188, 22, 100, 124, 69, 94, 191, 181, 171, 64, 136, 96, 91, 191, 107, 191, 191, 191, 107, 191, 191, 11, 140, 33, 4, 110, 83, 5, 86, 33, 42, 186, 191, 6, 42, 61, 94, 129, 191, 119, 191, 134, 43, 182, 191, 187, 63, 116, 172, 118, 50, 141, 124, 191, 125, 145, 191, 34, 191, 191], 9) == 548\n    assert candidate([41, 121, 92, 15, 24, 59, 45, 110, 97, 132, 75, 72, 31, 38, 103, 37, 132, 91, 132, 132, 105, 24], 3) == 61\n    assert candidate([21, 11, 13, 15, 16, 21, 8, 9, 6, 21], 2) == 10\n    assert candidate([31, 18, 36, 166, 166, 166, 135, 166, 166, 12, 102], 3) == 31\n    assert candidate([2, 2, 2, 2, 1, 3, 3, 2, 2, 1, 1, 3, 1, 1, 2, 3, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 3], 5) == 31\n    assert candidate([3, 2, 4, 4, 3, 4, 3, 1, 1, 1, 1, 3, 2, 1, 2, 1, 3, 4, 4, 1, 2, 4, 1, 1, 2, 3, 3, 3, 4, 4, 4, 1, 3, 1, 4, 1, 4, 4, 4, 2, 2, 3, 4, 3, 3, 2, 2, 2, 1, 2, 4, 2, 2, 4, 4, 1, 3, 2, 3, 2, 4, 4, 4, 2, 3, 4, 2, 4, 1, 4, 1, 4, 1, 4, 4, 3, 4, 2, 4, 3, 3, 2, 3, 3, 2, 3, 4, 2, 1, 1, 1, 2, 3], 23) == 473\n    assert candidate([1, 1, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 2, 3, 2, 1, 1, 2, 2, 1, 3, 2, 3, 1, 2, 1, 3, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 3], 8) == 148\n    assert candidate([54, 161, 161, 161, 161, 31, 74, 51, 87, 19, 161, 116, 108, 149, 6, 19, 155, 101, 161, 161, 154, 161, 78, 132, 62, 156, 112, 51, 161, 42, 92, 151, 142, 17, 110, 85], 4) == 279\n    assert candidate([97, 102, 144, 55, 144, 128, 16, 93, 144, 9, 144, 15, 144, 144, 32, 68, 144, 60, 94, 56, 103, 5, 41, 27, 48, 144, 12, 86, 129, 144, 144, 99, 93, 96, 144, 73, 106, 76, 107, 144, 53, 21, 144, 144, 98, 32, 85, 97, 71, 127, 144, 9, 144, 144, 133, 125, 144, 135, 52, 144, 144, 46, 134, 23, 23, 144, 79], 1) == 2163\n    assert candidate([17, 17, 15, 9, 14, 11, 15, 1, 6, 2, 1, 17, 3, 17, 11, 12, 9, 11, 2, 4, 15, 17, 3, 17, 8, 6, 7, 12, 3, 16, 2, 9, 14, 17, 17, 17, 3, 7, 8, 9, 8, 17, 17, 17, 4, 2, 12, 17, 7, 17, 17, 16, 17, 17, 8, 12, 11, 3, 10, 4, 10, 17, 14, 7, 5, 17, 12, 10, 17, 13, 5, 17, 8, 14, 9, 17, 17, 17, 7, 16, 10, 13, 17, 15, 1, 14, 6, 8, 11, 3], 15) == 1055\n    assert candidate([17, 12, 16, 17, 7, 1, 12, 6, 17, 5, 17, 13, 16, 16, 17, 14, 17, 6, 17, 17, 17, 17, 16, 17, 14, 8, 14, 1, 12, 13, 17, 17, 14, 8, 14, 5, 16, 17, 17], 5) == 404\n    assert candidate([98, 59, 98, 32, 45, 15, 98, 98, 98, 65, 98, 10, 98, 89, 87, 51, 42, 58, 76, 23, 85, 98, 98, 35, 18, 65, 39, 88, 56, 62, 10, 32, 8, 16, 32, 98, 6, 39, 14, 24, 98, 95, 68, 98, 77, 47, 98, 23, 69, 98, 49, 98, 7, 11, 92, 98, 27, 25, 85, 98, 45, 30, 50, 62, 46, 1, 79, 58, 69, 15, 59, 57, 85, 19, 98, 95, 98, 67, 52, 98, 59, 8, 98, 98, 98, 73, 86, 20, 98, 96, 21, 98, 79, 97, 52, 22, 98, 86], 12) == 1168\n    assert candidate([6, 50, 118, 27, 133, 133, 3, 121, 133, 72, 117, 133, 91, 57, 107, 93, 66, 122, 133, 6, 133, 122, 81, 20, 133, 133, 121, 133, 46, 25, 133, 133, 133, 17, 8, 49, 133, 116, 40, 133, 67, 9, 133, 133, 133, 133, 109, 41, 127, 13, 39, 133, 133, 133, 122, 58, 8, 125, 33, 62], 12) == 538\n    assert candidate([94, 34, 112, 106, 112, 13, 12, 112, 112, 21, 48, 71, 112, 104, 112, 29, 99, 58, 23, 11, 49, 112, 20, 86], 4) == 105\n    assert candidate([21, 27, 9, 85, 1, 7, 28, 11, 44, 39, 85, 52, 51, 30, 67, 83, 75, 10, 57, 59, 53, 85, 75, 33, 35, 85, 76, 85, 65, 85, 85, 85, 35, 4, 60, 85, 85, 72, 57, 42, 34, 85, 53, 85, 85, 36, 85, 56, 13, 16, 69, 55, 81, 24, 85, 27, 54, 66, 10, 85, 30, 58, 71, 43, 85, 66, 42, 27, 85, 70], 13) == 508\n    assert candidate([8, 14, 7, 1, 11, 10, 1, 13, 7, 14, 14, 6, 13], 2) == 32\n    assert candidate([165, 135, 165, 46, 126, 165, 73, 165, 165, 155, 150, 165, 40, 38, 165, 145, 137, 106, 10], 7) == 5\n    assert candidate([9, 3, 12, 6, 24, 23, 24], 2) == 5\n    assert candidate([42, 85, 78, 92, 46, 63, 21, 14, 22, 37, 96, 50, 74], 1) == 33\n    assert candidate([73, 54, 15, 4, 23, 70, 53, 65, 73, 73, 2, 72, 36, 71, 73, 69, 35, 18, 62, 73, 62, 73, 73, 50, 30, 73, 20, 71, 60, 9, 12, 57, 48, 73, 40, 20, 8, 73, 73, 73, 34, 59, 31, 49, 73, 5, 51, 36, 47, 38, 36, 58, 34, 42, 23, 28, 52, 73], 1) == 1537\n    assert candidate([52, 88, 92, 92, 44, 4, 92, 37, 27, 59, 3, 3, 76, 51, 21, 89, 92, 31, 26, 10, 47, 69, 30, 68, 60, 92, 80, 19, 65, 38, 92, 4, 54, 88, 92, 75, 56, 71, 11, 92, 44, 43, 56, 92, 16, 66, 22, 70], 2) == 796\n    assert candidate([29, 9, 43, 5, 8, 52, 24, 52, 52, 41, 33, 52, 27, 52, 8, 6, 35, 52, 27, 52, 7, 2, 9, 52, 52, 42, 52, 52], 7) == 76\n    assert candidate([165, 165, 58, 153, 45, 124, 165, 143, 38, 165, 165, 165, 165, 73, 8, 138, 165, 139, 165, 165, 59, 40, 120, 165, 123, 92, 98, 136, 161], 1) == 394\n    assert candidate([28, 64, 64, 63, 21, 64, 55, 64, 10, 30, 12, 5, 64, 56, 63, 64, 64, 31, 31, 64, 19, 54, 53, 64, 58, 44, 64, 28, 64, 64, 63, 10, 64, 64, 57, 29, 44, 32, 50, 55, 49, 21, 64, 64, 34, 26, 28, 64, 15, 31, 28, 64, 45, 64, 19, 54, 9, 41, 25, 33, 7, 60, 1, 7, 34, 14, 4, 64, 64, 64, 55, 49, 3, 41, 28, 42, 40, 52, 25, 46, 25, 15], 18) == 229\n    assert candidate([97, 23, 53, 33, 141, 150, 128, 153, 71, 39, 153, 35, 125, 143], 2) == 32\n    assert candidate([144, 144, 87, 144, 18, 53, 129, 61, 34, 123, 141, 68, 37, 23, 94, 28, 64, 58, 16, 36, 27, 112, 144, 80, 77, 144, 97, 142, 8, 101, 14, 74, 37, 115, 115, 144, 99, 37, 144, 48, 28, 110, 13, 78, 144, 144, 83, 7, 112, 144, 144, 144, 78, 61, 87, 144, 144, 61, 144, 44, 123, 74, 144, 142], 4) == 1083\n    assert candidate([63, 129, 134, 61, 134, 134, 134, 43, 74, 4, 111], 2) == 38\n    assert candidate([46, 105, 44, 36, 106, 35, 91, 8, 52, 106, 95, 86, 75, 7, 19, 30, 25, 27, 18, 72, 106, 106, 33, 106, 6, 63, 67, 45, 15, 106, 106, 6, 42, 106, 27, 14, 18, 106, 4, 106, 95, 64, 23, 93, 106, 37, 106, 106, 16, 81, 91, 79, 106, 97, 106, 66, 31, 59, 58], 1) == 1637\n    assert candidate([78, 120, 110, 53, 53, 120, 116, 39, 64, 120, 120, 120, 120, 120, 97, 28, 92, 120, 101, 5, 46, 92], 1) == 224\n    assert candidate([111, 111, 72, 111, 111, 56, 21, 95, 111, 101, 38, 77, 111, 111, 76, 58, 70, 72, 32, 72, 19, 111, 111, 63, 39, 111], 9) == 5\n    assert candidate([33, 82, 82, 82, 71, 39, 17, 82, 38, 75, 82, 2, 82, 82, 9, 82, 57, 12, 78, 65, 29, 20, 82, 82, 50, 11, 39, 74, 65, 69, 81, 71, 25, 82, 46, 43, 49, 80], 6) == 219\n    assert candidate([83, 72, 17, 147, 147, 57, 147, 22, 120, 107, 59, 133, 123, 91, 147, 147, 72, 147, 31, 147, 147, 147, 96, 147, 18, 25, 13, 8, 18, 59, 46, 91, 15, 147, 25, 30, 6, 147, 113, 27, 84, 95, 38, 147, 147, 147, 106, 53, 127, 132, 55, 147, 22, 147, 124, 102, 17, 69, 131, 147, 4, 95, 59, 38, 147, 147, 41, 99, 142, 147, 136, 142, 57, 26, 16, 3, 142], 8) == 1336\n    assert candidate([52, 95, 173, 26, 173, 16, 4, 144, 173, 77, 22, 103, 162, 120, 77, 173, 173, 89, 173, 104, 62, 151, 173, 124, 173, 117, 113, 164, 3, 70, 15, 144, 161, 118, 139, 16, 157, 173, 154, 151, 37, 69, 60, 173, 173, 168, 148, 97, 173, 125, 161, 128, 85, 64, 70, 102, 100, 168, 56, 57, 157, 112, 119, 135, 42, 72, 135, 173, 173, 124, 143, 121, 75, 37, 162, 161, 102, 50, 173, 173, 107], 4) == 1940\n    assert candidate([4, 18, 6, 22, 19, 15, 20, 12, 22, 22, 19, 6, 10, 7, 20, 4, 22, 21, 7, 17, 3, 16, 13, 17, 22, 14, 8, 2, 3, 22, 18, 18, 22, 22, 7, 22, 13, 10, 20, 4, 14, 17, 9, 19, 1, 12, 3, 11, 19, 15, 6, 4, 10], 6) == 347\n    assert candidate([55, 103, 123, 68, 16, 72, 104, 63, 40, 15, 180, 162, 82, 180, 131, 46, 180, 2, 120, 107, 100, 97, 180, 180, 17, 134, 180, 124, 40, 125, 15, 132, 4, 112, 180, 180, 28, 66, 180, 122, 99, 46, 15, 180, 180, 111, 30, 169, 132, 180, 10, 180, 180, 180, 107, 74, 95, 28, 180, 66, 180, 128, 61, 180, 118, 180, 28, 103, 37, 180, 88, 152], 8) == 1181\n    assert candidate([20, 6, 49, 60, 16, 54, 13, 2, 35, 6, 27, 62, 67, 56, 27, 6, 33, 51, 67, 42, 9, 59, 67, 14, 59, 7, 67, 34, 51, 5, 67, 48, 53, 20, 35, 67, 65, 34, 67, 67, 62, 7, 27, 18, 40, 10, 67, 67, 9, 8, 60, 12, 2, 67, 64, 67, 60, 28, 60, 26, 37, 2, 67, 33, 49, 23, 2, 36, 67, 6, 67, 7, 67, 44, 18], 8) == 1034\n    assert candidate([191, 2, 46, 65, 191, 166, 191, 156, 157, 181, 167, 123, 26, 191, 191, 104, 33, 126, 51, 191, 191, 191, 6, 152, 74, 84, 126, 191, 191, 162, 188, 38, 30, 191, 191, 125, 30, 56, 12, 151, 45, 163, 91, 168, 15, 125, 60, 4, 108, 27, 67, 97, 125, 147, 167, 152, 191, 159, 142, 105], 7) == 647\n    assert candidate([2, 4, 11, 30, 23, 1, 8, 18, 4, 6, 30, 30, 30, 10, 30, 17, 24, 13, 17, 30, 25, 30, 30, 12, 15, 29, 24, 28, 21, 30, 25, 11, 1, 30, 9, 30, 21, 3, 10, 6, 30, 5, 5, 24, 21, 30, 17, 29, 21, 30, 3, 30, 8, 18, 17], 7) == 584\n    assert candidate([141, 106, 141, 141, 94, 98, 33, 141, 2, 115, 11, 141, 9, 131, 104, 2, 141, 75, 141, 141, 24, 141, 28, 68, 141, 134, 141, 110, 15, 21, 141, 65, 108, 141, 35, 95, 94, 141, 117, 25], 10) == 94\n    assert candidate([139, 94, 77, 139, 139, 139, 139, 92, 61, 105, 25, 139, 93, 139, 113, 128, 139, 81, 70, 139, 25, 139, 37, 118, 15, 5, 139, 115, 133, 1], 3) == 292\n    assert candidate([107, 160, 86, 160, 69, 160, 160, 73, 120, 129, 130, 104, 112, 136, 7, 100, 21, 160, 160, 94, 3, 96, 160, 65, 74, 87, 110, 160, 145, 116, 38, 72, 127, 152, 71, 24, 35, 79, 160, 120, 160, 80, 50, 160, 129, 50, 82, 160, 140, 160, 3, 17, 129, 18, 108, 34, 132, 69, 4, 160, 124, 108, 30, 125, 160, 102, 51, 138, 160, 120, 159, 160, 49, 68, 160, 19, 87, 160, 6, 160, 76, 160, 110], 16) == 124\n    assert candidate([89, 9, 89, 82, 89, 11, 31, 45, 61, 56, 27, 15, 33, 6, 5, 89, 28, 73, 8, 48, 11, 89, 5, 89, 4, 65, 18, 20, 17, 38, 4, 36, 59, 34, 5, 81, 10, 6, 44, 19, 20, 86, 58, 60, 27, 89, 34, 29, 36, 88, 89, 10, 73], 7) == 14\n    assert candidate([45, 40, 44, 51, 51, 33, 33, 38, 46, 38, 51, 40, 9, 29, 51, 40, 51, 36, 39, 36, 51, 24, 39, 51, 31, 50, 12, 50, 1, 51, 32, 51, 49, 12, 44, 19, 4, 26, 7, 51, 14, 4, 33, 36, 19, 18, 14, 20, 16, 11, 51, 51, 7, 18, 7, 10, 8, 8, 48, 51, 43, 41, 51], 10) == 199\n    assert candidate([102, 4, 3, 22, 78, 96, 21, 126, 103, 52, 99, 94, 57, 126, 49, 20, 75, 126, 93, 1, 4, 126, 122, 123, 21, 111, 23, 110, 126, 81, 112, 92, 121, 30, 41, 126, 20, 10, 126, 54, 15, 27, 126, 126, 9, 126, 126, 1, 106, 34, 119, 108, 126, 126, 34, 57, 27, 126, 110, 126, 65, 125, 126, 59, 117, 126, 67, 114, 115, 38, 79, 123, 118, 126, 33, 52, 1, 119, 11, 105, 21, 51, 75, 126, 84], 9) == 1500\n    assert candidate([71, 122, 36, 39, 48, 158, 83, 20, 131, 41, 126, 1, 33, 19, 138, 133, 80, 106, 92, 2, 68, 158, 158, 111, 158, 50, 158, 81, 158, 138, 108, 36, 149], 4) == 171\n    assert candidate([39, 136, 153, 85, 134, 19, 34, 22, 5, 124, 116, 91, 122, 160, 112, 160, 22, 111, 160, 160, 113, 34, 40, 16, 160, 117, 61, 160, 31, 34, 145, 160], 6) == 72\n    assert candidate([14, 14, 1, 8, 2, 11, 14, 14, 5, 1, 8, 1, 6, 3, 14, 14, 14, 2, 9, 10, 14, 2, 3, 14, 2, 5, 5, 11, 10, 11, 14, 5, 3, 10, 5, 3, 1, 3, 14, 5, 13, 9, 2, 9, 3, 5, 14, 14, 2, 3, 10, 4, 14, 14, 10, 14, 2, 10, 9, 2, 7, 9, 11, 14, 9, 5, 1, 5, 13, 6, 10, 1, 7, 4, 13, 13, 9, 10, 2, 10, 3, 8, 14, 3, 14, 13, 1, 14, 8, 12, 1, 6, 12, 14, 14], 14) == 438\n    assert candidate([1, 7, 4, 10, 12, 10, 10, 1, 12, 1, 6, 6, 9, 7, 10, 6, 12, 10, 7, 9, 6, 10, 12, 8, 11, 9, 8, 3, 8, 3, 12, 12, 12, 3, 2, 2, 3, 1, 10, 2, 12, 12, 12, 9, 10, 1, 8, 10, 12, 4, 8, 8, 6, 2, 11, 7, 3, 3, 12, 12, 2, 7, 8, 11, 4, 3, 12, 5, 8, 12, 10, 2, 9, 6, 5, 10, 8], 7) == 1236\n    assert candidate([1, 7, 11, 13, 10, 13, 8, 6, 4, 11, 13, 6, 1, 6, 8, 10, 5, 13, 4, 2, 3, 7, 12, 5, 1, 1, 11, 13, 8, 9, 1, 8], 2) == 262\n    assert candidate([73, 24, 67, 11, 66, 73, 73, 40, 4, 47, 25, 26, 48, 40, 27, 69, 73, 28, 23, 9, 16, 8, 63, 65, 73, 57, 73, 21, 43, 73, 19], 1) == 408\n    assert candidate([7, 47, 50, 16, 35, 24, 61, 44, 53, 49], 1) == 28\n    assert candidate([14, 89, 43, 1, 12, 64, 23, 89, 55, 23, 56, 69, 62, 89, 89, 86, 89, 89, 89, 76, 84, 57, 18, 54, 29, 50, 67, 69, 65, 3, 22, 26, 8, 77, 51, 74, 74, 40, 89, 89, 18, 74, 89, 26, 16, 27, 1, 66, 72, 22, 78, 20, 15, 14, 63, 77, 73, 23, 65, 89, 79, 32, 18, 89, 59, 16, 24, 39, 87, 78, 29, 84, 89, 49, 80, 69, 89, 44, 89, 89, 58, 6, 55, 38, 89, 53, 89, 3, 81, 28, 65, 39, 30, 14, 16, 89, 22, 4, 23, 84], 7) == 2045\n    assert candidate([16, 11, 12, 16, 5, 17, 11, 13, 12, 17, 16, 2, 3, 13, 1, 4, 10, 2, 17, 17, 8, 7, 4, 17, 11, 17, 8, 2, 15, 17, 4, 16, 9, 8, 17, 2, 17, 16, 17, 4, 6, 8, 12, 17, 16, 13, 4, 11, 9, 11, 16, 10, 17, 17, 10, 13, 17, 13, 1, 13, 3, 7, 4, 2, 15, 6, 11, 12, 17, 17, 7, 15, 9, 16, 7, 2, 17, 7, 17, 16, 5, 8], 8) == 1317\n    assert candidate([52, 46, 47, 52, 52, 4, 2, 21, 2, 26, 47, 26, 52, 7, 12, 35, 52, 33, 47, 3, 31, 37, 36, 52, 38, 19, 12, 40, 52, 7, 40, 16, 51, 41, 52, 23, 20, 52, 18, 52, 21, 2, 52, 49, 5, 48, 23, 52, 52], 8) == 132\n    assert candidate([99, 155, 73, 80, 32, 69, 113, 37, 126, 155, 95, 155, 155, 48, 155, 43, 37, 68, 131, 68, 150, 155, 153, 155, 45, 59, 155, 155, 155, 77, 155, 155, 100, 4, 127, 155, 107, 151, 101, 104, 155, 155, 71, 147, 153, 37, 155, 18, 155, 100, 155, 153, 155, 155, 138, 4, 114, 153, 111, 83, 74, 144, 18, 64, 94, 155, 50, 45, 51, 122, 146, 50, 43], 8) == 1346\n    assert candidate([64, 156, 156, 119, 156, 35, 108, 82, 86, 18, 107, 156, 68, 83, 130, 86, 80, 8, 129, 95, 23, 7, 71, 131, 19, 156, 17, 21, 43, 156, 25, 156, 124, 51, 91, 156, 77, 88, 156, 156, 62, 105, 135, 142, 156, 156, 78, 156, 113, 156, 47, 156, 156, 22, 71, 49, 156, 57, 71, 156, 36, 84, 139, 156, 17, 49, 156, 121, 46, 7, 155, 156, 156, 156, 93, 150, 102, 81, 90, 52, 52, 91, 2, 63, 156, 49, 118, 77, 156, 156, 156, 79], 19) == 590\n    assert candidate([24, 9, 28, 46, 14, 41], 1) == 12\n    assert candidate([169, 19], 1) == 2\n    assert candidate([95, 109, 79, 198, 195, 198, 198, 97, 34, 43, 165, 198, 198, 195, 98, 198, 198, 170, 39, 78, 21, 198, 140, 187, 29, 107, 198, 132, 198, 174, 109, 187, 173, 198, 58, 38, 62, 179, 198, 68, 114, 198, 10, 198, 81, 198, 40, 10, 71, 82, 196, 128, 50, 153, 146, 101, 195], 12) == 182\n    assert candidate([9, 15, 39, 33, 43, 47, 15, 29, 14, 12, 48, 37, 9, 37, 15, 48, 48, 3, 1, 48, 37, 39, 43, 29, 43, 15, 35, 2, 33, 48, 28, 37, 48, 45, 9, 36, 3, 48, 29, 14, 48, 11, 24, 30, 38, 18, 24, 12, 47, 31, 22, 10, 29, 46, 14, 48, 15, 29, 43, 48, 37, 48, 46, 14, 32, 33, 15, 42, 9, 12, 48, 20, 35, 44, 48, 4], 10) == 274\n    assert candidate([37, 12, 14, 46, 29, 98, 149, 149, 149, 67, 97, 56, 81, 71, 11, 149, 32, 149, 119, 149, 44, 149, 43, 149, 149, 32, 75, 54, 24, 148, 41], 2) == 379\n    assert candidate([59, 101, 127, 118, 19, 55, 18, 127, 127, 26, 127, 103, 4, 127, 26, 43, 26, 125, 80, 127, 127, 112, 2, 107, 127, 127, 110, 122, 77, 127, 11, 86, 127, 127, 91, 27, 85, 86, 71, 36, 41, 127, 86, 37, 11], 6) == 418\n    assert candidate([82, 82, 42, 51, 82, 64, 13, 16, 36, 49, 22, 52, 82, 10, 72, 9, 6, 42, 80, 74, 37, 80, 73, 10, 82, 31, 78, 22, 14, 11, 82, 60, 76, 67, 82, 2, 61, 52, 79, 72, 77, 12, 23, 33, 44, 11, 82, 4, 14, 65, 19, 66, 56, 11, 75, 82, 42, 82, 56, 77, 82, 81, 51, 48, 19, 70, 33, 51, 9, 78, 62, 31, 41, 46, 13, 82, 82, 77, 55, 24, 49, 82, 82, 8, 3, 44, 34], 9) == 427\n    assert candidate([30, 83, 42, 83, 83, 60, 61, 60, 62, 83, 74, 32, 83, 83, 46, 82, 25, 81, 31, 83, 48, 15, 49, 43, 41, 83, 29, 36, 45, 53, 83, 74, 55, 63, 1, 19, 74, 2, 15, 83, 61, 82, 46, 48, 83, 83, 8, 45, 83, 80, 30, 33, 83, 83, 83, 22, 65, 79, 57, 15, 24, 25, 83, 83, 60, 60, 83, 44, 9, 29, 60, 69, 2, 83, 35, 7, 40, 74, 55, 83, 7, 21, 11, 59, 5, 80], 17) == 200\n    assert candidate([11, 25, 22, 14, 14, 29, 6, 28, 12, 14, 2, 15, 29, 2, 6, 27, 22, 29, 26, 29, 11, 1, 7, 27, 24, 29, 7, 29, 6], 1) == 371\n    assert candidate([173, 97, 53, 181, 161, 119, 152, 97, 69, 181, 123, 84, 83, 9, 169, 135, 86, 27, 119, 181, 64, 147, 7, 181, 154, 43, 83, 181, 14, 181, 45, 77, 181, 83, 181, 53, 181, 117, 181, 27, 181, 174, 181, 47], 6) == 302\n    assert candidate([124, 52, 111, 24, 191, 117, 128, 153, 69, 190, 51, 1, 112, 52, 28, 191, 188, 191, 1, 124, 128, 111, 191, 94, 34, 167, 191, 191, 9, 191, 164, 60, 113, 69, 151, 130, 15, 86, 150, 191, 175, 36, 113, 23, 119, 68, 191, 87, 90, 159, 178, 50, 104, 191, 187, 48, 97, 100, 136, 155, 140, 132, 1, 180, 182, 191, 130, 110, 191, 191, 191, 191, 191, 177, 73, 118, 191, 27, 129, 124, 43, 140, 191, 132, 191, 41, 44, 191, 169, 49, 191, 191, 191, 191, 113, 4], 7) == 2434\n    assert candidate([86, 89, 92, 23, 92, 72, 41, 92, 92, 92, 47, 30, 46, 76, 20, 80, 92, 60, 20, 9, 92, 92, 92, 36, 4, 38, 92, 74, 15, 20, 92, 2, 73, 58, 68, 2, 29, 13, 92, 91, 92, 44, 46, 8, 57, 10, 47, 92, 6, 90, 92, 92, 76, 92, 86, 26, 22, 67, 92, 92, 17, 92, 18, 23, 22, 40, 7], 9) == 738\n    assert candidate([75, 65, 37, 83, 80, 17, 69, 83, 83, 76, 64, 58, 13, 83, 18, 66, 25, 55, 25, 60, 83, 83, 83, 50, 70, 39, 82, 83, 47, 39, 74, 83, 75, 83, 34, 8, 81, 46, 52, 72, 45, 65, 46, 2, 9, 4, 23, 47, 83, 83, 59, 32, 54, 43, 53, 56, 83], 9) == 256\n    assert candidate([23, 70, 2, 70, 49, 65, 6, 69, 5, 26, 29, 70, 70, 15, 17, 22, 70, 63, 51, 25, 18, 68, 31, 3, 43, 60, 70, 6, 61, 23, 46, 21, 66, 67, 63, 3, 7, 70, 66, 47, 15, 65, 52, 70, 70, 38, 8, 18, 29, 33, 50, 9, 70, 9], 1) == 1305\n    assert candidate([23, 12, 6, 3, 4, 7, 23, 23, 6, 23, 23, 9, 23, 2, 14, 11, 21, 23, 8, 9, 19, 10, 17, 23, 11, 3, 13, 23, 18, 3, 6, 7, 6, 19, 17, 14, 17, 7, 23, 21, 10, 22, 6, 23, 23, 3, 1, 20, 14, 7, 19, 20, 23, 19, 23, 15, 4, 23, 2, 6, 20, 23, 8, 6, 17, 14, 23, 6, 10, 23, 17, 6, 11, 8, 3, 6, 23, 16, 19, 16, 2, 19, 2, 23, 1, 16, 20, 4, 20, 12, 1], 11) == 942\n    assert candidate([199, 146, 138, 199, 97, 169, 199, 198, 199, 199, 11, 62, 68, 122, 193, 199, 22, 41, 199, 181, 199, 157, 199, 44, 199, 199, 199, 142, 132, 112, 199, 199, 155, 199, 97, 101, 26, 52, 199, 45, 164, 112, 188, 97, 180, 103, 199, 3, 130, 64, 131, 199, 194, 135, 36, 199, 80, 67, 41, 67, 158, 183, 188, 12, 126], 13) == 420\n    assert candidate([25, 32, 40, 47, 35, 9, 39, 58, 67, 42, 77, 57, 77, 77, 34, 28, 13, 77, 15, 33, 77, 10, 64, 67, 35, 21, 61, 60, 74, 57, 77, 71, 28, 77, 48, 67, 17, 48, 77, 77, 77, 60, 26, 30, 77, 49, 77, 3, 77, 33, 75, 77, 20, 77, 77], 9) == 325\n    assert candidate([50, 108, 19, 118, 46, 45, 126, 118, 89, 126, 46, 63, 30, 126, 120, 10, 126, 126, 108, 95, 126, 94], 3) == 107\n    assert candidate([28, 94, 94, 5, 1, 74, 33, 3, 88, 76, 78, 30], 1) == 32\n    assert candidate([44, 4, 4, 31, 33, 51, 51, 40, 51, 2, 27, 48, 51, 6, 51, 27, 45, 1, 25, 2, 20, 43, 51, 12, 11, 44, 40, 28, 29, 51, 51, 45, 30, 24, 51, 51, 30, 51, 13, 18, 29, 51, 15, 11, 39], 11) == 52\n    assert candidate([6, 30, 19, 32, 24, 8, 28, 2, 18, 32, 5, 31, 3, 31, 28, 30, 30, 22, 32, 22, 31, 1, 9, 2, 7, 32, 14, 24, 24, 6, 23, 6, 25, 32, 32, 22, 10, 11, 4, 2, 32, 18, 15, 1, 22, 20, 6, 26, 11, 13, 26, 22, 32, 30, 18], 4) == 570\n    assert candidate([17, 41, 71, 95, 56, 88, 25, 95, 73, 95, 91, 95, 8, 43, 2, 52, 95, 88, 5, 49, 20, 48, 95, 84, 95, 44, 27, 95, 87, 32, 45, 95, 95, 95, 51, 56, 6, 5, 65, 21, 52, 56, 84, 95, 75, 33, 95, 62, 47, 95], 13) == 20\n    assert candidate([5, 12, 6, 13, 11, 13, 9, 13, 10, 13, 13, 12, 7, 11, 2, 11, 4, 7, 6, 6, 13, 9, 1, 12, 13, 11, 7, 11, 11, 13, 2, 13, 7, 4, 9, 5, 13, 8, 4, 1, 2, 5, 13, 7, 7, 12, 2, 2, 8, 11, 12, 1, 8, 5, 3, 6, 4, 2, 9, 10, 6, 6, 13, 12, 13, 6, 13, 13, 13, 13, 13, 3, 4, 4, 10, 1, 2, 12, 12, 13, 13, 6, 13, 4, 13, 1, 12, 11, 9, 12, 2, 5], 3) == 3240\n    assert candidate([13, 16, 2, 27, 10, 2, 44, 44, 44, 28, 44, 44, 23], 4) == 23\n    assert candidate([69, 46, 80, 10, 80, 48, 76, 15, 67, 1, 80, 80, 34, 4, 14, 15, 2, 38, 62, 31, 17, 56, 58, 17, 38, 29, 67], 4) == 48\n    assert candidate([39, 38, 136, 136, 97, 122, 54, 102, 112, 125, 135, 57, 136], 1) == 52\n    assert candidate([39, 67, 17, 52, 89, 63, 52, 8, 14, 90, 76, 2, 90, 65, 90, 80, 90, 33, 61, 76, 90, 32, 43, 55, 62, 24, 29, 90, 35, 36, 90, 8, 40, 1, 72, 54, 64, 90, 58, 88, 77, 89, 35, 79, 90, 81, 90], 2) == 822\n    assert candidate([16, 22, 10, 22, 4, 16, 16, 15, 3, 22, 22, 15, 7, 7, 21, 17, 16, 1, 10, 13, 16, 17, 2, 18, 2, 5, 11], 3) == 70\n    assert candidate([120, 58, 118, 34, 32, 110, 94, 10, 119, 133, 70, 154, 151, 107, 124, 148, 154, 154, 24, 154, 6, 83, 20, 6, 3, 72, 154, 28, 148, 107, 154, 73, 126, 154, 41], 5) == 135\n    assert candidate([15, 2, 1, 21, 20, 33, 16, 19], 1) == 18\n    assert candidate([45, 25], 1) == 2\n    assert candidate([179, 127, 54, 149, 90, 119, 179, 127, 115, 82, 159, 128, 6, 55, 33, 43, 2, 172, 105, 159, 83, 179, 30, 179, 175, 125, 179, 179, 105, 179, 74, 77, 179, 153, 145, 124, 70, 179, 129, 31, 62, 172, 179, 29, 130, 179, 82, 64, 98, 179, 91, 179, 89, 166, 60, 159, 54, 179, 179, 137, 54, 158, 64, 177, 56, 165, 97, 142, 90, 170, 179, 127, 111, 179, 145, 179, 8], 16) == 61\n    assert candidate([25, 41, 11, 41, 26, 30, 41, 34, 31, 41, 40, 23, 14, 41, 10, 34, 8, 15, 41, 10, 14, 41, 37, 20, 37, 35, 37, 8, 21, 30, 11, 7, 33, 3, 25, 1, 3, 38, 27, 26, 27, 20, 29, 41, 30, 7, 23, 15, 41, 41, 41, 25, 18, 41, 19, 41, 34, 35, 33, 41, 4, 41, 15], 3) == 1227\n    assert candidate([7, 6, 3, 9, 6, 3, 4, 4, 9, 7, 3, 3, 8, 9, 2, 4, 8, 8, 8, 6, 3, 2, 9, 9, 9, 4, 2, 6, 9, 3], 1) == 396\n    assert candidate([158, 2, 138, 177, 96, 104, 175, 81, 46, 19, 85, 1, 174, 177, 115, 145, 32, 177, 174, 95, 96, 101, 177, 114, 115, 137, 77, 98, 15, 177, 125, 162, 177, 177, 111, 106, 112, 177, 174, 40, 177, 177, 176, 40, 177, 145, 177, 99, 177, 177, 163, 177, 143, 147, 177, 11, 142, 177, 44, 171, 52, 98, 177, 163, 140, 139, 61, 147, 71, 20, 177, 45, 172], 5) == 1642\n    assert candidate([3, 1], 1) == 2\n    assert candidate([99, 166, 166, 5, 166, 44, 83, 73, 40, 64, 166, 135, 166, 24, 166, 41, 70, 93, 166, 166, 166, 49, 157, 3, 135, 137, 1, 133, 18, 166, 15, 82, 4, 166, 13, 55, 95, 166, 166, 151, 102, 166, 166, 34, 32, 31, 48, 166, 166, 13, 166, 166, 94, 28, 166, 166, 119, 103, 157, 12, 103, 19, 126, 13, 117, 71, 85, 166, 166, 81, 132, 105, 128, 166, 166, 125, 73, 161, 166, 139, 6, 32, 5, 31, 137], 24) == 49\n    assert candidate([121, 135, 135, 135, 57, 18, 7, 22, 135, 57, 96, 72, 23, 68, 32, 39, 135, 135, 135, 135, 51, 25, 100, 49, 72, 135, 99, 38, 126, 110, 52, 63, 48, 135, 135, 132, 111, 114, 135, 135, 24, 125, 135, 135, 120, 93, 55, 40, 135, 44, 135, 22, 135, 48, 35, 12, 116, 79, 80, 22, 135, 135, 111, 135], 20) == 7\n\ndef test_check():\n    check(countSubarrays)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3214_maximizeSquareHoleArea", "language": "py", "prompt": "from typing import List\n\ndef maximizeSquareHoleArea(n: int, m: int, hBars: List[int], vBars: List[int]) -> int:\n    \"\"\"There is a grid with n + 2 horizontal bars and m + 2 vertical bars, and initially containing 1 x 1 unit cells.\nThe bars are 1-indexed.\nYou are given the two integers, n and m.\nYou are also given two integer arrays: hBars and vBars.\nhBars contains distinct horizontal bars in the range [2, n + 1].\nvBars contains distinct vertical bars in the range [2, m + 1].\nYou are allowed to remove bars that satisfy any of the following conditions:\nIf it is a horizontal bar, it must correspond to a value in hBars.\nIf it is a vertical bar, it must correspond to a value in vBars.\nReturn an integer denoting the maximum area of a square-shaped hole in the grid after removing some bars (possibly none).\nExample 1:\nInput: n = 2, m = 1, hBars = [2,3], vBars = [2]\nOutput: 4\nExplanation: The left image shows the initial grid formed by the bars.\nThe horizontal bars are in the range [1,4], and the vertical bars are in the range [1,3].\nIt is allowed to remove horizontal bars [2,3] and the vertical bar [2].\nOne way to get the maximum square-shaped hole is by removing horizontal bar 2 and vertical bar 2.\nThe resulting grid is shown on the right.\nThe hole has an area of 4.\nIt can be shown that it is not possible to get a square hole with an area more than 4.\nHence, the answer is 4.\nExample 2:\nInput: n = 1, m = 1, hBars = [2], vBars = [2]\nOutput: 4\nExplanation: The left image shows the initial grid formed by the bars.\nThe horizontal bars are in the range [1,3], and the vertical bars are in the range [1,3].\nIt is allowed to remove the horizontal bar [2] and the vertical bar [2].\nTo get the maximum square-shaped hole, we remove horizontal bar 2 and vertical bar 2.\nThe resulting grid is shown on the right.\nThe hole has an area of 4.\nHence, the answer is 4, and it is the maximum possible.\nExample 3:\nInput: n = 2, m = 3, hBars = [2,3], vBars = [2,3,4]\nOutput: 9\nExplanation: The left image shows the initial grid formed by the bars.\nThe horizontal bars are in the range [1,4], and the vertical bars are in the range [1,5].\nIt is allowed to remove horizontal bars [2,3] and vertical bars [2,3,4].\nOne way to get the maximum square-shaped hole is by removing horizontal bars 2 and 3, and vertical bars 3 and 4.\nThe resulting grid is shown on the right.\nThe hole has an area of 9.\nIt can be shown that it is not possible to get a square hole with an area more than 9.\nHence, the answer is 9.\nConstraints:\n1 <= n <= 109\n1 <= m <= 109\n1 <= hBars.length <= 100\n2 <= hBars[i] <= n + 1\n1 <= vBars.length <= 100\n2 <= vBars[i] <= m + 1\nAll values in hBars are distinct.\nAll values in vBars are distinct.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3214_maximizeSquareHoleArea.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(2, 1, [2, 3], [2]) == 4\n    assert candidate(1, 1, [2], [2]) == 4\n    assert candidate(2, 3, [2, 3], [2, 3, 4]) == 9\n    assert candidate(1, 5, [2], [2, 3]) == 4\n    assert candidate(2, 4, [3, 2], [4, 2]) == 4\n    assert candidate(1, 4, [2], [2, 3, 5, 4]) == 4\n    assert candidate(1, 4, [2], [4, 3, 2, 5]) == 4\n    assert candidate(3, 2, [3, 2, 4], [3, 2]) == 9\n    assert candidate(3, 2, [4, 2, 3], [3, 2]) == 9\n    assert candidate(14, 4, [13], [3, 4, 5, 2]) == 4\n    assert candidate(19, 7, [6, 12, 4], [6, 3]) == 4\n    assert candidate(2, 4, [2, 3], [4, 2, 3, 5]) == 9\n    assert candidate(4, 2, [2, 5, 4, 3], [3, 2]) == 9\n    assert candidate(5, 1, [2, 4, 3, 6, 5], [2]) == 4\n    assert candidate(1, 6, [2], [3, 2, 7, 4, 6, 5]) == 4\n    assert candidate(1, 13, [2], [4, 14, 2, 12, 11, 3]) == 4\n    assert candidate(2, 5, [2, 3], [6, 2, 5, 4, 3]) == 9\n    assert candidate(5, 2, [2, 3, 6, 4, 5], [2, 3]) == 9\n    assert candidate(6, 1, [7, 4, 3, 2, 5, 6], [2]) == 4\n    assert candidate(4, 4, [2, 3, 4, 5], [5, 4, 3, 2]) == 25\n    assert candidate(4, 4, [3, 4, 2, 5], [2, 5, 3, 4]) == 25\n    assert candidate(6, 2, [7, 3, 5, 4, 6, 2], [3, 2]) == 9\n    assert candidate(7, 11, [7, 4, 5, 2, 8, 6, 3], [4]) == 4\n    assert candidate(1, 8, [2], [9, 7, 8, 2, 5, 6, 4, 3]) == 4\n    assert candidate(1, 9, [2], [5, 2, 10, 4, 3, 6, 8, 7]) == 4\n    assert candidate(2, 7, [2, 3], [2, 5, 6, 8, 7, 3, 4]) == 9\n    assert candidate(2, 7, [2, 3], [2, 8, 6, 7, 5, 3, 4]) == 9\n    assert candidate(4, 5, [3, 2, 4, 5], [4, 3, 6, 5, 2]) == 25\n    assert candidate(4, 5, [5, 3, 4, 2], [5, 3, 6, 4, 2]) == 25\n    assert candidate(4, 40, [5, 3, 2, 4], [36, 41, 6, 34, 33]) == 9\n    assert candidate(8, 1, [4, 7, 9, 8, 6, 2, 3, 5], [2]) == 4\n    assert candidate(11, 6, [8, 9, 6], [5, 3, 6, 4, 2, 7]) == 9\n    assert candidate(22, 50, [6, 19, 8, 17, 23], [51, 3, 32, 44]) == 4\n    assert candidate(27, 2, [2, 26, 28, 22, 4, 8, 23], [3, 2]) == 9\n    assert candidate(1, 9, [2], [3, 6, 10, 4, 8, 5, 9, 7, 2]) == 4\n    assert candidate(1, 9, [2], [3, 7, 5, 9, 10, 2, 4, 8, 6]) == 4\n    assert candidate(3, 7, [2, 4, 3], [5, 4, 2, 3, 7, 6, 8]) == 16\n    assert candidate(3, 7, [4, 3, 2], [2, 7, 3, 6, 5, 4, 8]) == 16\n    assert candidate(3, 7, [4, 3, 2], [3, 7, 5, 2, 6, 4, 8]) == 16\n    assert candidate(3, 7, [4, 3, 2], [8, 2, 5, 3, 6, 4, 7]) == 16\n    assert candidate(3, 13, [2, 4, 3], [4, 6, 7, 12, 10, 13, 2]) == 9\n    assert candidate(4, 6, [2, 3, 4, 5], [7, 2, 4, 6, 3, 5]) == 25\n    assert candidate(5, 5, [4, 6, 5, 2, 3], [2, 4, 5, 6, 3]) == 36\n    assert candidate(7, 3, [8, 6, 4, 5, 7, 2, 3], [4, 3, 2]) == 16\n    assert candidate(8, 2, [4, 2, 6, 8, 7, 5, 3, 9], [3, 2]) == 9\n    assert candidate(9, 1, [2, 9, 3, 10, 4, 6, 7, 8, 5], [2]) == 4\n    assert candidate(9, 1, [9, 5, 4, 8, 7, 10, 3, 2, 6], [2]) == 4\n    assert candidate(12, 5, [10, 9, 13, 6, 3], [3, 4, 2, 5, 6]) == 9\n    assert candidate(29, 2, [25, 14, 11, 29, 7, 10, 16, 8], [2, 3]) == 9\n    assert candidate(1, 10, [2], [3, 4, 6, 8, 5, 7, 9, 10, 11, 2]) == 4\n    assert candidate(1, 10, [2], [10, 6, 5, 7, 4, 3, 11, 8, 9, 2]) == 4\n    assert candidate(2, 9, [2, 3], [6, 7, 9, 3, 10, 2, 5, 4, 8]) == 9\n    assert candidate(2, 9, [3, 2], [4, 8, 2, 6, 7, 3, 5, 9, 10]) == 9\n    assert candidate(4, 7, [5, 4, 3, 2], [8, 7, 5, 2, 4, 3, 6]) == 25\n    assert candidate(5, 6, [2, 6, 5, 3, 4], [4, 2, 5, 3, 7, 6]) == 36\n    assert candidate(5, 6, [5, 3, 6, 2, 4], [5, 7, 2, 4, 3, 6]) == 36\n    assert candidate(5, 6, [6, 4, 3, 5, 2], [2, 4, 5, 7, 6, 3]) == 36\n    assert candidate(5, 11, [4, 2, 6, 3, 5], [8, 11, 10, 12, 6, 2]) == 16\n    assert candidate(6, 5, [4, 5, 3, 2, 7, 6], [6, 3, 5, 4, 2]) == 36\n    assert candidate(6, 5, [5, 2, 3, 7, 4, 6], [6, 2, 4, 3, 5]) == 36\n    assert candidate(6, 5, [6, 3, 4, 2, 7, 5], [2, 5, 4, 3, 6]) == 36\n    assert candidate(6, 5, [7, 2, 3, 4, 5, 6], [6, 5, 4, 2, 3]) == 36\n    assert candidate(8, 3, [4, 6, 9, 3, 8, 2, 7, 5], [2, 4, 3]) == 16\n    assert candidate(8, 3, [5, 6, 9, 3, 2, 4, 8, 7], [2, 4, 3]) == 16\n    assert candidate(8, 3, [8, 6, 4, 3, 7, 2, 9, 5], [4, 2, 3]) == 16\n    assert candidate(8, 3, [9, 2, 7, 6, 8, 3, 4, 5], [4, 2, 3]) == 16\n    assert candidate(9, 2, [5, 4, 6, 8, 9, 10, 2, 3, 7], [3, 2]) == 9\n    assert candidate(9, 2, [6, 3, 5, 4, 8, 9, 2, 10, 7], [3, 2]) == 9\n    assert candidate(10, 1, [4, 3, 10, 2, 11, 5, 6, 9, 8, 7], [2]) == 4\n    assert candidate(1, 11, [2], [7, 12, 6, 3, 4, 9, 5, 10, 11, 2, 8]) == 4\n    assert candidate(2, 10, [2, 3], [11, 10, 2, 8, 7, 5, 6, 9, 3, 4]) == 9\n    assert candidate(4, 8, [5, 2, 3, 4], [8, 7, 5, 9, 4, 2, 3, 6]) == 25\n    assert candidate(5, 7, [2, 3, 6, 4, 5], [6, 8, 4, 5, 3, 7, 2]) == 36\n    assert candidate(6, 10, [2, 4, 3, 6, 5, 7], [11, 3, 9, 6, 10, 4]) == 16\n    assert candidate(10, 2, [8, 5, 4, 3, 10, 2, 11, 9, 6, 7], [3, 2]) == 9\n    assert candidate(11, 1, [2, 6, 9, 7, 5, 11, 3, 10, 4, 12, 8], [2]) == 4\n    assert candidate(44, 2, [5, 16, 18, 28, 3, 9, 6, 35, 14, 10], [3, 2]) == 9\n    assert candidate(1, 12, [2], [12, 9, 3, 13, 7, 2, 6, 11, 10, 8, 4, 5]) == 4\n    assert candidate(2, 11, [2, 3], [3, 7, 2, 5, 12, 9, 10, 4, 8, 11, 6]) == 9\n    assert candidate(2, 11, [2, 3], [12, 10, 6, 7, 2, 3, 5, 11, 4, 8, 9]) == 9\n    assert candidate(5, 8, [2, 4, 6, 3, 5], [8, 7, 9, 4, 2, 5, 6, 3]) == 36\n    assert candidate(6, 7, [5, 4, 6, 3, 2, 7], [4, 7, 6, 5, 2, 8, 3]) == 49\n    assert candidate(6, 7, [6, 3, 2, 7, 4, 5], [6, 7, 5, 2, 3, 4, 8]) == 49\n    assert candidate(8, 5, [7, 4, 3, 9, 2, 8, 6, 5], [5, 2, 6, 3, 4]) == 36\n    assert candidate(9, 4, [4, 5, 6, 10, 7, 2, 3, 9, 8], [5, 3, 2, 4]) == 25\n    assert candidate(9, 4, [9, 6, 3, 10, 2, 8, 4, 5, 7], [4, 3, 2, 5]) == 25\n    assert candidate(10, 3, [5, 4, 9, 8, 3, 6, 11, 2, 10, 7], [4, 3, 2]) == 16\n    assert candidate(10, 6, [6, 2, 8, 3, 11, 9, 10, 7, 4, 5], [6, 2, 5]) == 9\n    assert candidate(11, 2, [8, 12, 9, 3, 5, 2, 10, 6, 7, 4, 11], [3, 2]) == 9\n    assert candidate(28, 31, [29, 24, 4], [22, 24, 2, 14, 26, 4, 29, 13, 15, 25]) == 4\n    assert candidate(1, 13, [2], [9, 5, 2, 6, 8, 11, 7, 10, 3, 13, 14, 4, 12]) == 4\n    assert candidate(2, 12, [3, 2], [13, 2, 7, 4, 12, 9, 10, 3, 6, 5, 8, 11]) == 9\n    assert candidate(2, 12, [3, 2], [13, 4, 7, 8, 3, 2, 11, 12, 5, 9, 6, 10]) == 9\n    assert candidate(5, 9, [2, 5, 6, 3, 4], [2, 7, 3, 9, 4, 10, 8, 6, 5]) == 36\n    assert candidate(6, 9, [4, 2, 5, 7, 6, 3], [4, 2, 6, 8, 10, 3, 7, 5]) == 49\n    assert candidate(8, 6, [4, 8, 6, 7, 2, 9, 3, 5], [4, 7, 6, 3, 2, 5]) == 49\n    assert candidate(9, 5, [2, 5, 4, 8, 3, 7, 6, 10, 9], [6, 3, 5, 2, 4]) == 36\n    assert candidate(9, 5, [8, 9, 5, 2, 6, 7, 4, 10, 3], [6, 2, 3, 4, 5]) == 36\n    assert candidate(10, 4, [4, 8, 6, 3, 10, 2, 7, 9, 5, 11], [5, 4, 3, 2]) == 25\n    assert candidate(11, 3, [2, 8, 5, 3, 12, 10, 4, 11, 6, 7, 9], [3, 4, 2]) == 16\n\ndef test_check():\n    check(maximizeSquareHoleArea)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3215_areSimilar", "language": "py", "prompt": "from typing import List\n\ndef areSimilar(mat: List[List[int]], k: int) -> bool:\n    \"\"\"You are given a 0-indexed m x n integer matrix mat and an integer k. You have to cyclically right shift odd indexed rows k times and cyclically left shift even indexed rows k times.\nReturn true if the initial and final matrix are exactly the same and false otherwise.\nExample 1:\nInput: mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2\nOutput: true\nExplanation:\nInitially, the matrix looks like the first figure. \nSecond figure represents the state of the matrix after one right and left cyclic shifts to even and odd indexed rows.\nThird figure is the final state of the matrix after two cyclic shifts which is similar to the initial matrix.\nTherefore, return true.\nExample 2:\nInput: mat = [[2,2],[2,2]], k = 3\nOutput: true\nExplanation: As all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same. Therefeore, we return true.\nExample 3:\nInput: mat = [[1,2]], k = 1\nOutput: false\nExplanation: After one cyclic shift, mat = [[2,1]] which is not equal to the initial matrix. Therefore we return false.\nConstraints:\n1 <= mat.length <= 25\n1 <= mat[i].length <= 25\n1 <= mat[i][j] <= 25\n1 <= k <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3215_areSimilar.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[1, 2]], 1) == False\n    assert candidate([[1, 2, 1, 2], [5, 5, 5, 5], [6, 3, 6, 3]], 2) == True\n    assert candidate([[4, 9, 10, 10], [9, 3, 8, 4], [2, 5, 3, 8], [6, 1, 10, 4]], 5) == False\n    assert candidate([[5, 8, 8, 4, 7, 2, 3, 4, 3, 10], [8, 7, 9, 1, 3, 4, 2, 6, 6, 9], [6, 2, 10, 10, 4, 6, 3, 4, 1, 1]], 3) == False\n    assert candidate([[4, 7, 9, 1, 10, 5, 2, 6, 1, 7], [8, 9, 9, 2, 3, 2, 3, 2, 3, 5], [1, 2, 4, 7, 4, 7, 9, 7, 9, 9]], 5) == False\n    assert candidate([[10, 6, 3, 6], [4, 8, 1, 2]], 6) == False\n    assert candidate([[7, 10, 6, 7, 7, 4, 4, 7, 2, 2], [3, 6, 4, 8, 4, 6, 4, 3, 1, 4], [4, 8, 7, 1, 10, 2, 10, 8, 10, 1], [4, 7, 10, 5, 1, 9, 8, 3, 5, 8], [3, 7, 6, 5, 3, 1, 3, 2, 8, 5], [6, 1, 5, 10, 8, 7, 7, 10, 1, 3]], 7) == False\n    assert candidate([[6, 5, 3], [4, 6, 2], [4, 1, 8], [3, 9, 1], [6, 1, 2], [1, 9, 9], [2, 6, 10]], 5) == False\n    assert candidate([[2, 4], [9, 8]], 9) == False\n    assert candidate([[2, 2], [2, 2]], 3) == True\n    assert candidate([[9, 1, 10, 6, 10, 7, 3], [9, 2, 9, 10, 7, 10, 10]], 4) == False\n    assert candidate([[7, 7], [10, 10], [4, 4]], 2) == True\n    assert candidate([[6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], 1) == True\n    assert candidate([[6, 9, 1], [8, 9, 7], [2, 8, 7], [1, 5, 7], [10, 5, 9], [5, 5, 6], [8, 6, 1], [5, 7, 8]], 5) == False\n    assert candidate([[3, 10, 3, 10, 3, 10, 3, 10], [5, 8, 5, 8, 5, 8, 5, 8], [3, 9, 3, 9, 3, 9, 3, 9], [3, 8, 3, 8, 3, 8, 3, 8], [2, 3, 2, 3, 2, 3, 2, 3]], 2) == True\n    assert candidate([[9, 5, 3, 10], [4, 7, 10, 7], [1, 7, 9, 4], [8, 8, 1, 6], [6, 7, 6, 1], [3, 1, 1, 8], [9, 2, 8, 3], [1, 9, 7, 6]], 4) == True\n    assert candidate([[4, 6], [10, 1], [8, 8], [10, 9], [9, 10]], 9) == False\n    assert candidate([[1, 9, 6, 7, 1, 4, 7, 6, 7], [7, 10, 6, 6, 4, 9, 6, 8, 2], [3, 9, 8, 10, 9, 9, 3, 9, 5], [8, 5, 2, 3, 4, 7, 3, 3, 1], [1, 5, 9, 9, 6, 1, 9, 7, 5], [8, 3, 10, 2, 4, 8, 7, 9, 9], [5, 9, 6, 8, 4, 3, 4, 6, 4], [7, 2, 6, 9, 2, 4, 5, 4, 9], [4, 8, 7, 5, 3, 6, 3, 9, 5]], 1) == False\n    assert candidate([[9, 3, 3, 7, 7, 5, 3, 3], [10, 9, 9, 3, 6, 8, 7, 5], [8, 9, 3, 10, 10, 10, 2, 1], [9, 7, 8, 2, 3, 4, 8, 4], [5, 9, 5, 2, 2, 6, 5, 7], [1, 5, 9, 7, 8, 1, 1, 1]], 10) == False\n    assert candidate([[10, 6, 10, 6, 10, 6, 10, 6]], 4) == True\n    assert candidate([[2, 4], [6, 1], [1, 2], [2, 10], [6, 5], [4, 9]], 7) == False\n    assert candidate([[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]], 2) == True\n    assert candidate([[8, 10, 1, 7, 1, 3, 9, 6, 8], [9, 10, 4, 8, 8, 9, 3, 10, 10], [4, 3, 2, 2, 3, 6, 4, 6, 1], [9, 4, 1, 4, 5, 2, 5, 1, 8], [3, 10, 6, 3, 8, 4, 8, 3, 10]], 7) == False\n    assert candidate([[8, 9], [3, 3], [5, 6], [10, 1], [2, 5], [5, 8], [5, 4], [9, 5]], 2) == True\n    assert candidate([[9, 1, 8, 9, 2, 9, 1, 8, 9, 2], [10, 2, 7, 8, 9, 10, 2, 7, 8, 9], [7, 6, 6, 9, 5, 7, 6, 6, 9, 5]], 5) == True\n    assert candidate([[4, 4, 4, 2, 7, 9, 1, 8, 9, 8], [3, 3, 6, 3, 8, 8, 7, 7, 4, 5], [10, 1, 3, 7, 6, 5, 7, 10, 3, 10]], 5) == False\n    assert candidate([[9, 10, 10, 6, 6, 8, 10, 7, 10, 9], [10, 6, 1, 10, 10, 5, 7, 9, 9, 2], [8, 5, 8, 3, 5, 2, 2, 9, 7, 10]], 20) == True\n    assert candidate([[4, 5, 1, 3, 10], [10, 5, 9, 10, 2], [8, 10, 2, 8, 1], [5, 8, 9, 3, 4], [6, 6, 10, 10, 10], [6, 1, 7, 9, 4], [6, 7, 6, 2, 10]], 8) == False\n    assert candidate([[2, 7, 1, 10, 5, 3], [10, 7, 8, 2, 2, 2], [9, 6, 1, 4, 10, 6], [6, 1, 1, 9, 2, 5], [6, 4, 7, 3, 6, 4], [10, 10, 5, 4, 2, 1], [7, 3, 3, 7, 1, 5], [5, 8, 2, 10, 5, 1], [3, 1, 5, 1, 5, 7]], 2) == False\n    assert candidate([[7, 7, 4], [8, 9, 9], [9, 7, 5], [6, 3, 6], [4, 9, 5], [1, 10, 3], [4, 4, 7], [4, 7, 6]], 1) == False\n    assert candidate([[10, 10], [10, 10], [5, 5], [3, 3], [2, 2]], 2) == True\n    assert candidate([[6, 4, 7, 6, 3, 9, 4, 2, 10, 5], [9, 7, 7, 3, 10, 9, 7, 4, 3, 1]], 20) == True\n    assert candidate([[7]], 1) == True\n    assert candidate([[6, 3, 2]], 4) == False\n    assert candidate([[6, 8]], 4) == True\n    assert candidate([[6, 6, 7, 7, 1], [10, 3, 3, 2, 2], [7, 9, 8, 10, 7], [10, 8, 2, 7, 1], [2, 2, 1, 2, 3], [6, 2, 8, 10, 10], [6, 2, 6, 3, 3], [2, 2, 2, 4, 7]], 4) == False\n    assert candidate([[8, 8, 5, 3, 7, 8], [8, 9, 1, 7, 3, 10], [4, 3, 9, 8, 4, 7], [2, 2, 5, 8, 2, 2], [6, 1, 2, 7, 4, 8], [10, 9, 6, 3, 1, 4], [7, 1, 6, 7, 4, 6]], 2) == False\n    assert candidate([[7], [5], [5], [4], [4], [5], [8]], 6) == True\n    assert candidate([[8, 8, 5, 10, 7, 8, 8, 5, 10, 7], [1, 2, 6, 10, 7, 1, 2, 6, 10, 7]], 5) == True\n    assert candidate([[10, 2, 6, 7, 6, 6, 5], [6, 3, 3, 4, 6, 5, 7], [6, 8, 5, 10, 8, 4, 1]], 8) == False\n    assert candidate([[4, 10, 9, 7, 9, 9, 2], [3, 9, 2, 1, 8, 9, 10], [7, 10, 9, 7, 2, 3, 8]], 1) == False\n    assert candidate([[1, 7, 10, 10, 9, 2, 1], [6, 4, 5, 2, 3, 3, 10], [2, 6, 8, 3, 6, 1, 4]], 9) == False\n    assert candidate([[2, 9, 2, 2, 6, 10, 4, 8, 3], [10, 8, 4, 5, 10, 3, 3, 8, 5], [2, 6, 4, 5, 4, 8, 5, 5, 4], [1, 3, 2, 10, 5, 3, 10, 9, 4], [2, 4, 2, 4, 7, 7, 1, 4, 9]], 2) == False\n    assert candidate([[9, 5, 6, 9, 5, 6], [1, 9, 4, 1, 9, 4], [5, 7, 2, 5, 7, 2], [9, 1, 5, 9, 1, 5], [6, 8, 6, 6, 8, 6], [10, 1, 7, 10, 1, 7]], 6) == True\n    assert candidate([[2, 7, 6], [10, 6, 5], [10, 2, 4], [10, 7, 9], [5, 8, 6], [10, 6, 3], [10, 9, 6], [5, 2, 8], [10, 1, 2]], 7) == False\n    assert candidate([[5, 4, 5, 10, 5]], 9) == False\n    assert candidate([[10, 10, 9], [5, 6, 7], [1, 4, 7], [5, 1, 1], [5, 1, 5], [5, 10, 3]], 2) == False\n    assert candidate([[9, 4, 5], [8, 5, 4], [2, 9, 9]], 10) == False\n    assert candidate([[4, 2, 2, 7, 9, 1, 1, 2], [1, 8, 7, 5, 7, 5, 9, 6], [2, 9, 4, 10, 1, 8, 5, 4]], 3) == False\n    assert candidate([[10], [7], [8], [2]], 1) == True\n    assert candidate([[10], [1], [5], [3], [1], [1]], 4) == True\n    assert candidate([[7, 1, 7, 7, 1, 7, 7, 1, 7], [5, 10, 1, 5, 10, 1, 5, 10, 1]], 3) == True\n    assert candidate([[4, 7, 9, 9, 4, 7, 9, 9], [8, 9, 7, 4, 8, 9, 7, 4], [6, 8, 6, 4, 6, 8, 6, 4], [9, 8, 8, 8, 9, 8, 8, 8], [3, 6, 5, 3, 3, 6, 5, 3], [1, 9, 4, 3, 1, 9, 4, 3], [8, 3, 2, 7, 8, 3, 2, 7], [3, 8, 2, 8, 3, 8, 2, 8], [6, 5, 2, 8, 6, 5, 2, 8]], 8) == True\n    assert candidate([[4], [5], [4], [2], [4], [2], [7], [4]], 1) == True\n    assert candidate([[3, 8, 5, 4, 10, 2], [9, 3, 9, 5, 4, 2]], 6) == True\n    assert candidate([[8, 9, 10, 6, 5, 7], [8, 9, 9, 3, 3, 9], [4, 5, 4, 4, 4, 10], [2, 6, 3, 9, 7, 1], [10, 10, 4, 4, 6, 10]], 9) == False\n    assert candidate([[7, 7, 7, 7, 7], [1, 1, 1, 1, 1]], 1) == True\n    assert candidate([[5, 7, 5, 5, 1, 9, 1, 8, 6, 7], [8, 1, 9, 10, 10, 5, 4, 9, 1, 8], [10, 6, 8, 10, 2, 10, 9, 4, 9, 6], [4, 7, 10, 2, 7, 4, 2, 10, 3, 5], [2, 2, 4, 9, 10, 1, 6, 2, 8, 3], [1, 3, 5, 9, 9, 8, 10, 8, 9, 10], [7, 8, 7, 7, 6, 9, 2, 5, 8, 4], [6, 9, 4, 2, 4, 10, 10, 8, 10, 7]], 8) == False\n    assert candidate([[2, 9, 10], [7, 3, 3], [7, 6, 2]], 1) == False\n    assert candidate([[2, 5, 8, 9, 6, 8], [3, 6, 4, 10, 10, 6], [9, 6, 10, 9, 6, 5]], 1) == False\n    assert candidate([[2, 2], [4, 5], [3, 2], [4, 6], [1, 9], [5, 3], [3, 5], [2, 4], [3, 9]], 7) == False\n    assert candidate([[1, 8, 6, 8, 6, 7, 1, 6]], 16) == True\n    assert candidate([[7, 9, 9, 2, 7], [8, 5, 8, 6, 7], [2, 9, 8, 5, 2], [9, 9, 2, 6, 8], [7, 4, 10, 10, 8]], 6) == False\n    assert candidate([[8, 8], [6, 6], [2, 2], [8, 8], [9, 9], [8, 8], [10, 10], [3, 3], [4, 4], [5, 5]], 1) == True\n    assert candidate([[3, 3, 3, 3, 3, 3], [5, 3, 5, 3, 5, 3], [2, 5, 2, 5, 2, 5], [8, 8, 8, 8, 8, 8], [3, 8, 3, 8, 3, 8], [5, 3, 5, 3, 5, 3], [1, 8, 1, 8, 1, 8], [8, 9, 8, 9, 8, 9], [2, 8, 2, 8, 2, 8]], 4) == True\n    assert candidate([[2, 2, 2, 2, 2], [7, 7, 7, 7, 7], [5, 5, 5, 5, 5], [8, 8, 8, 8, 8], [1, 1, 1, 1, 1], [10, 10, 10, 10, 10], [7, 7, 7, 7, 7]], 1) == True\n    assert candidate([[3, 1, 10, 5, 10, 3, 1, 10, 5, 10], [3, 5, 9, 2, 10, 3, 5, 9, 2, 10], [4, 6, 3, 5, 7, 4, 6, 3, 5, 7], [8, 10, 6, 7, 8, 8, 10, 6, 7, 8]], 5) == True\n    assert candidate([[10, 7, 1, 7], [3, 5, 9, 5], [2, 8, 3, 10], [8, 7, 1, 9], [3, 8, 6, 3], [6, 5, 8, 9], [8, 7, 5, 1], [10, 4, 9, 9], [4, 6, 1, 9], [6, 10, 1, 7]], 3) == False\n    assert candidate([[1, 10, 3, 9, 6], [7, 1, 3, 4, 10]], 3) == False\n    assert candidate([[7, 7], [2, 2], [5, 5]], 1) == True\n    assert candidate([[4, 4, 4, 4, 4, 4, 4], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 8, 8], [6, 6, 6, 6, 6, 6, 6]], 2) == True\n    assert candidate([[10, 3, 5, 3, 10, 3, 5, 3], [2, 3, 9, 7, 2, 3, 9, 7], [10, 4, 4, 8, 10, 4, 4, 8], [10, 2, 7, 9, 10, 2, 7, 9], [8, 1, 8, 3, 8, 1, 8, 3], [1, 9, 1, 7, 1, 9, 1, 7]], 4) == True\n    assert candidate([[6], [7], [1]], 2) == True\n    assert candidate([[7, 6, 4, 5]], 5) == False\n    assert candidate([[5, 5, 5, 5], [5, 5, 5, 5], [10, 10, 10, 10], [2, 2, 2, 2], [3, 3, 3, 3], [2, 2, 2, 2], [8, 8, 8, 8], [10, 10, 10, 10], [9, 9, 9, 9], [7, 7, 7, 7]], 2) == True\n    assert candidate([[5, 1, 1, 9, 4, 1, 7, 6], [8, 7, 7, 6, 2, 2, 1, 5], [10, 2, 5, 3, 10, 7, 7, 5], [10, 6, 1, 6, 8, 4, 6, 3], [10, 10, 9, 8, 2, 10, 8, 7], [7, 4, 2, 10, 2, 3, 8, 7], [4, 7, 5, 9, 10, 4, 3, 2], [10, 9, 7, 7, 6, 3, 9, 7], [1, 4, 8, 4, 6, 5, 5, 1]], 1) == False\n    assert candidate([[3]], 1) == True\n    assert candidate([[1, 1, 1, 1, 1], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]], 2) == True\n    assert candidate([[6], [3], [2], [10]], 2) == True\n    assert candidate([[9, 7, 5, 6], [5, 2, 1, 8], [9, 4, 3, 6], [5, 7, 4, 1], [8, 1, 8, 9], [4, 3, 6, 5], [6, 2, 7, 3], [1, 3, 6, 4], [4, 9, 5, 5]], 7) == False\n    assert candidate([[10, 7, 2, 10, 5, 2, 7], [10, 10, 3, 8, 3, 3, 8], [4, 3, 10, 10, 10, 4, 10]], 4) == False\n    assert candidate([[8, 5], [8, 10], [8, 10], [1, 1], [2, 1]], 7) == False\n    assert candidate([[9, 9], [8, 8], [2, 2], [1, 1], [8, 8], [4, 4], [9, 9], [4, 4], [6, 6]], 2) == True\n    assert candidate([[10, 1, 1], [7, 10, 6], [9, 6, 6], [9, 8, 10], [8, 2, 1], [6, 8, 3], [8, 6, 6]], 5) == False\n    assert candidate([[2, 10, 5, 6, 5, 5], [6, 3, 1, 5, 4, 7], [5, 6, 3, 2, 4, 10], [9, 2, 6, 8, 6, 2], [3, 6, 8, 4, 9, 1]], 8) == False\n    assert candidate([[10, 3, 4, 2, 8, 10, 3, 4, 2, 8], [9, 9, 3, 4, 5, 9, 9, 3, 4, 5], [6, 9, 9, 2, 7, 6, 9, 9, 2, 7], [5, 2, 3, 3, 4, 5, 2, 3, 3, 4]], 5) == True\n    assert candidate([[3, 4, 10, 3, 4, 10], [5, 5, 4, 5, 5, 4], [5, 5, 3, 5, 5, 3], [7, 8, 7, 7, 8, 7]], 3) == True\n    assert candidate([[7, 1, 9, 3, 6], [5, 6, 5, 5, 6], [2, 3, 5, 10, 8], [5, 10, 2, 5, 4], [7, 9, 1, 7, 10], [8, 2, 3, 4, 2], [1, 6, 9, 2, 1]], 7) == False\n    assert candidate([[3, 3], [3, 3], [4, 4], [3, 3], [8, 8], [5, 5]], 1) == True\n    assert candidate([[2, 10, 2, 6, 3, 6], [4, 5, 10, 7, 7, 9], [1, 7, 4, 1, 9, 4], [3, 7, 6, 3, 1, 4], [4, 10, 4, 6, 3, 5], [1, 5, 5, 9, 5, 1], [10, 2, 5, 4, 7, 10], [2, 9, 7, 4, 5, 3], [5, 5, 1, 2, 8, 3]], 2) == False\n    assert candidate([[5], [5], [5]], 2) == True\n    assert candidate([[9, 5, 5, 6, 7], [7, 9, 3, 8, 1], [8, 8, 8, 9, 5], [1, 3, 2, 6, 9], [3, 6, 4, 8, 7], [9, 3, 3, 9, 10], [8, 5, 1, 2, 8], [7, 3, 10, 5, 1], [8, 4, 5, 5, 1]], 5) == True\n    assert candidate([[5, 8, 5, 2, 8, 5, 9], [7, 8, 2, 2, 8, 2, 2], [4, 5, 6, 7, 3, 9, 9], [5, 7, 4, 8, 2, 9, 2], [9, 5, 3, 3, 5, 7, 3], [3, 8, 9, 6, 3, 10, 7], [6, 7, 3, 7, 3, 6, 6]], 8) == False\n    assert candidate([[8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 2, 2], [6, 6, 6, 6, 6, 6], [9, 9, 9, 9, 9, 9], [10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10]], 2) == True\n    assert candidate([[7, 7, 10, 2], [3, 5, 7, 6], [2, 10, 1, 8], [8, 3, 1, 10], [5, 1, 3, 3], [6, 3, 4, 9], [8, 9, 1, 1]], 7) == False\n    assert candidate([[5, 2, 7, 2, 6, 10, 7, 5], [10, 9, 4, 1, 7, 2, 7, 4], [2, 6, 7, 3, 2, 10, 4, 5], [10, 4, 7, 2, 10, 3, 6, 2]], 16) == True\n    assert candidate([[9, 10, 10, 1], [1, 7, 3, 5], [9, 6, 4, 7], [6, 6, 4, 5], [2, 4, 2, 7], [2, 1, 1, 1], [7, 2, 1, 8], [2, 8, 1, 3], [7, 4, 6, 1], [10, 10, 7, 5]], 4) == True\n    assert candidate([[7, 3, 10, 2, 3, 1, 10], [7, 6, 10, 1, 3, 2, 1], [9, 1, 5, 7, 1, 8, 3], [4, 10, 10, 7, 7, 9, 7], [7, 9, 1, 5, 3, 8, 4], [4, 9, 5, 10, 2, 8, 10], [2, 5, 10, 3, 6, 2, 9], [6, 7, 2, 3, 4, 2, 2]], 1) == False\n    assert candidate([[8, 8], [9, 9], [2, 2], [10, 10], [10, 10], [1, 1], [5, 5], [9, 9], [7, 7]], 2) == True\n    assert candidate([[2, 1, 7, 3, 7, 6, 7, 9, 9, 3], [3, 9, 10, 4, 4, 6, 8, 10, 5, 6], [9, 8, 6, 2, 3, 4, 9, 1, 9, 10], [7, 10, 8, 8, 3, 9, 9, 5, 8, 9], [9, 5, 6, 9, 9, 6, 4, 3, 2, 3], [3, 10, 6, 2, 7, 6, 10, 6, 2, 6], [7, 9, 7, 4, 5, 7, 2, 4, 9, 5], [4, 7, 9, 6, 7, 4, 6, 4, 10, 4]], 6) == False\n\ndef test_check():\n    check(areSimilar)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3217_numberOfSets", "language": "py", "prompt": "from typing import List\n\ndef numberOfSets(n: int, maxDistance: int, roads: List[List[int]]) -> int:\n    \"\"\"There is a company with n branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.\nThe company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (possibly none). However, they want to ensure that the remaining branches have a distance of at most maxDistance from each other.\nThe distance between two branches is the minimum total traveled length needed to reach one branch from another.\nYou are given integers n, maxDistance, and a 0-indexed 2D array roads, where roads[i] = [ui, vi, wi] represents the undirected road between branches ui and vi with length wi.\nReturn the number of possible sets of closing branches, so that any branch has a distance of at most maxDistance from any other.\nNote that, after closing a branch, the company will no longer have access to any roads connected to it.\nNote that, multiple roads are allowed.\nExample 1:\nInput: n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]\nOutput: 5\nExplanation: The possible sets of closing branches are:\n- The set [2], after closing, active branches are [0,1] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 5 possible sets of closing branches.\nExample 2:\nInput: n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]\nOutput: 7\nExplanation: The possible sets of closing branches are:\n- The set [], after closing, active branches are [0,1,2] and they are reachable to each other within distance 4.\n- The set [0], after closing, active branches are [1,2] and they are reachable to each other within distance 2.\n- The set [1], after closing, active branches are [0,2] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 7 possible sets of closing branches.\nExample 3:\nInput: n = 1, maxDistance = 10, roads = []\nOutput: 2\nExplanation: The possible sets of closing branches are:\n- The set [], after closing, the active branch is [0].\n- The set [0], after closing, there are no active branches.\nIt can be proven, that there are only 2 possible sets of closing branches.\nConstraints:\n1 <= n <= 10\n1 <= maxDistance <= 105\n0 <= roads.length <= 1000\nroads[i].length == 3\n0 <= ui, vi <= n - 1\nui != vi\n1 <= wi <= 1000\nAll branches are reachable from each other by traveling some roads.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3217_numberOfSets.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, 5, [[0, 1, 2], [1, 2, 10], [0, 2, 10]]) == 5\n    assert candidate(3, 5, [[0, 1, 20], [0, 1, 10], [1, 2, 2], [0, 2, 2]]) == 7\n    assert candidate(1, 10, []) == 2\n    assert candidate(3, 12, [[1, 0, 11], [1, 0, 16], [0, 2, 13]]) == 5\n    assert candidate(3, 3, [[2, 0, 14], [1, 0, 15], [1, 0, 7]]) == 4\n    assert candidate(3, 19, [[1, 0, 7], [0, 2, 18]]) == 6\n    assert candidate(3, 5, [[2, 0, 4], [1, 0, 3], [1, 0, 2]]) == 6\n    assert candidate(4, 3, [[2, 1, 8], [1, 0, 3], [0, 3, 8]]) == 6\n    assert candidate(5, 20, [[3, 2, 20], [1, 0, 10], [0, 2, 19], [0, 3, 13], [0, 4, 19]]) == 12\n    assert candidate(2, 30, [[1, 0, 33]]) == 3\n    assert candidate(3, 12, [[2, 1, 4], [0, 1, 4], [0, 2, 6]]) == 8\n    assert candidate(3, 3, [[1, 0, 4], [0, 2, 5]]) == 4\n    assert candidate(3, 27, [[2, 1, 23], [0, 1, 14], [0, 2, 18]]) == 8\n    assert candidate(4, 20, [[2, 0, 16], [0, 1, 13], [0, 3, 11]]) == 8\n    assert candidate(3, 22, [[1, 0, 21], [2, 1, 28]]) == 5\n    assert candidate(2, 2, [[1, 0, 6]]) == 3\n    assert candidate(3, 22, [[1, 0, 16], [1, 0, 12], [0, 2, 14]]) == 6\n    assert candidate(2, 8, [[1, 0, 9]]) == 3\n    assert candidate(2, 18, [[1, 0, 3]]) == 4\n    assert candidate(4, 27, [[3, 2, 3], [0, 1, 27], [0, 2, 6], [0, 3, 17]]) == 10\n    assert candidate(5, 14, [[1, 0, 13], [2, 0, 19], [0, 3, 16], [0, 4, 18]]) == 7\n    assert candidate(5, 8, [[1, 0, 3], [3, 1, 10], [4, 0, 6], [2, 0, 9], [3, 2, 11], [4, 0, 12]]) == 8\n    assert candidate(2, 4, [[1, 0, 7]]) == 3\n    assert candidate(4, 39, [[2, 0, 44], [3, 2, 42], [2, 1, 45]]) == 5\n    assert candidate(5, 2, [[4, 1, 11], [3, 1, 5], [1, 0, 4], [0, 2, 7]]) == 6\n    assert candidate(3, 9, [[1, 0, 17], [0, 2, 22]]) == 4\n    assert candidate(2, 1, [[1, 0, 3]]) == 3\n    assert candidate(3, 39, [[1, 0, 28], [0, 2, 35]]) == 6\n    assert candidate(4, 17, [[2, 1, 28], [2, 0, 6], [1, 0, 28], [1, 0, 24], [1, 0, 18], [1, 0, 25], [0, 3, 10]]) == 8\n    assert candidate(5, 16, [[2, 1, 27], [3, 0, 22], [2, 1, 4], [1, 0, 11], [2, 1, 48], [1, 0, 40], [4, 2, 33], [4, 3, 44], [1, 0, 1]]) == 9\n    assert candidate(3, 23, [[2, 1, 20], [0, 1, 12], [0, 2, 10]]) == 8\n    assert candidate(5, 3, [[4, 0, 5], [1, 0, 2], [3, 0, 5], [3, 0, 4], [4, 2, 5], [4, 2, 1]]) == 8\n    assert candidate(3, 5, [[1, 0, 6], [2, 0, 7]]) == 4\n    assert candidate(3, 21, [[2, 1, 30], [0, 1, 36], [0, 2, 44]]) == 4\n    assert candidate(5, 25, [[1, 0, 17], [1, 0, 1], [2, 1, 24], [3, 2, 12], [1, 0, 7], [3, 2, 4], [2, 1, 15], [0, 4, 14]]) == 14\n    assert candidate(2, 3, [[1, 0, 6]]) == 3\n    assert candidate(3, 4, [[1, 0, 6], [2, 1, 6], [2, 0, 2]]) == 5\n    assert candidate(4, 21, [[3, 2, 18], [1, 0, 15], [2, 1, 15], [3, 0, 19], [3, 2, 19]]) == 9\n    assert candidate(4, 1, [[1, 0, 4], [1, 0, 2], [3, 1, 2], [2, 1, 1], [1, 0, 3], [2, 0, 3]]) == 6\n    assert candidate(3, 33, [[2, 1, 2], [1, 0, 40], [2, 1, 43]]) == 5\n    assert candidate(4, 29, [[2, 1, 20], [1, 0, 38], [2, 1, 15], [2, 0, 32], [0, 3, 18]]) == 7\n    assert candidate(3, 1, [[2, 1, 4], [2, 0, 2], [1, 0, 12]]) == 4\n    assert candidate(2, 2, [[1, 0, 3]]) == 3\n    assert candidate(3, 13, [[1, 0, 18], [2, 0, 1], [2, 1, 2]]) == 7\n    assert candidate(3, 1, [[1, 0, 23], [0, 2, 37]]) == 4\n    assert candidate(3, 18, [[2, 0, 39], [0, 1, 47]]) == 4\n    assert candidate(4, 6, [[3, 0, 6], [0, 1, 3], [0, 2, 9]]) == 7\n    assert candidate(3, 35, [[1, 0, 10], [1, 0, 15], [0, 2, 32]]) == 6\n    assert candidate(5, 10, [[4, 0, 38], [4, 0, 11], [2, 0, 24], [3, 0, 5], [2, 1, 18], [2, 0, 38], [1, 0, 7], [2, 1, 3], [2, 1, 2], [3, 1, 36]]) == 10\n    assert candidate(5, 16, [[2, 0, 32], [4, 0, 17], [2, 0, 22], [3, 1, 38], [3, 0, 13], [3, 1, 34], [3, 1, 36], [1, 0, 36], [3, 1, 18], [3, 2, 10]]) == 8\n    assert candidate(2, 4, [[1, 0, 18]]) == 3\n    assert candidate(5, 13, [[3, 0, 5], [2, 1, 3], [1, 0, 6], [3, 2, 19], [2, 1, 29], [2, 1, 30], [1, 0, 5], [2, 0, 29], [4, 3, 15], [2, 1, 23]]) == 12\n    assert candidate(3, 23, [[2, 1, 12], [1, 0, 8], [2, 1, 7]]) == 7\n    assert candidate(5, 38, [[2, 0, 8], [2, 1, 10], [0, 3, 25], [0, 4, 48]]) == 11\n    assert candidate(2, 4, [[1, 0, 2]]) == 4\n    assert candidate(4, 12, [[2, 1, 18], [0, 1, 25], [0, 2, 24], [0, 3, 16]]) == 5\n    assert candidate(4, 1, [[2, 0, 1], [3, 2, 2], [2, 0, 2], [2, 0, 1], [1, 0, 1], [1, 0, 1]]) == 7\n    assert candidate(3, 1, [[1, 0, 1], [0, 2, 1]]) == 6\n    assert candidate(2, 3, [[1, 0, 24]]) == 3\n    assert candidate(2, 10, [[1, 0, 13]]) == 3\n    assert candidate(3, 1, [[2, 1, 1], [0, 1, 1], [0, 2, 1]]) == 8\n    assert candidate(5, 13, [[1, 0, 17], [1, 0, 21], [3, 0, 9], [1, 0, 10], [2, 0, 11], [4, 1, 12], [2, 1, 11], [1, 0, 18]]) == 12\n    assert candidate(2, 19, [[1, 0, 28]]) == 3\n    assert candidate(3, 8, [[2, 0, 7], [2, 0, 28], [0, 1, 34]]) == 5\n    assert candidate(5, 7, [[1, 0, 32], [0, 2, 35], [0, 3, 20], [0, 4, 27]]) == 6\n    assert candidate(4, 1, [[1, 0, 4], [1, 0, 3], [3, 0, 4], [1, 0, 7], [0, 2, 11]]) == 5\n    assert candidate(2, 34, [[1, 0, 11]]) == 4\n    assert candidate(5, 10, [[2, 1, 32], [4, 3, 14], [3, 2, 3], [2, 1, 21], [3, 1, 37], [2, 1, 30], [0, 1, 18], [0, 2, 26], [0, 3, 19], [0, 4, 23]]) == 7\n    assert candidate(5, 14, [[2, 0, 19], [3, 1, 24], [4, 3, 10], [4, 1, 15], [0, 1, 21], [0, 3, 21], [0, 4, 12]]) == 8\n    assert candidate(4, 30, [[2, 0, 5], [0, 1, 27], [0, 3, 24]]) == 9\n    assert candidate(2, 6, [[1, 0, 23]]) == 3\n    assert candidate(5, 6, [[4, 0, 17], [2, 1, 7], [4, 1, 23], [1, 0, 1], [1, 0, 19], [0, 3, 20]]) == 7\n    assert candidate(3, 5, [[1, 0, 1], [1, 0, 3], [2, 0, 4]]) == 7\n    assert candidate(4, 19, [[3, 2, 21], [2, 1, 3], [0, 1, 15], [0, 2, 22], [0, 3, 8]]) == 9\n    assert candidate(2, 5, [[1, 0, 4]]) == 4\n    assert candidate(4, 18, [[2, 1, 7], [2, 0, 5], [0, 3, 10]]) == 10\n    assert candidate(5, 35, [[1, 0, 39], [1, 0, 3], [3, 1, 45], [2, 0, 21], [3, 2, 40], [3, 0, 27], [2, 1, 44], [4, 2, 6], [4, 2, 45], [3, 0, 22]]) == 14\n    assert candidate(4, 2, [[1, 0, 2], [1, 0, 3], [1, 0, 15], [1, 0, 7], [0, 2, 4], [0, 3, 6]]) == 6\n    assert candidate(4, 5, [[2, 0, 1], [1, 0, 3], [0, 3, 4]]) == 10\n    assert candidate(3, 19, [[1, 0, 9], [0, 2, 4]]) == 7\n    assert candidate(4, 1, [[3, 0, 4], [2, 1, 4], [1, 0, 4]]) == 5\n    assert candidate(2, 29, [[1, 0, 18]]) == 4\n    assert candidate(2, 11, [[1, 0, 28]]) == 3\n    assert candidate(2, 12, [[1, 0, 10]]) == 4\n    assert candidate(5, 9, [[3, 2, 23], [4, 3, 11], [1, 0, 16], [2, 0, 11], [2, 0, 16], [1, 0, 20], [4, 0, 16], [2, 0, 36], [3, 0, 7]]) == 7\n    assert candidate(5, 17, [[3, 2, 22], [3, 2, 3], [4, 0, 19], [3, 0, 21], [4, 3, 4], [1, 0, 24], [3, 0, 7], [3, 2, 12], [1, 0, 17]]) == 14\n    assert candidate(4, 5, [[2, 0, 26], [1, 0, 15], [3, 2, 17]]) == 5\n    assert candidate(4, 4, [[1, 0, 11], [0, 2, 3], [0, 3, 3]]) == 7\n    assert candidate(5, 13, [[3, 1, 16], [0, 1, 3], [0, 2, 19], [0, 3, 10], [0, 4, 2]]) == 13\n    assert candidate(4, 5, [[1, 0, 21], [1, 0, 13], [1, 0, 19], [2, 1, 15], [1, 0, 17], [1, 0, 3], [0, 3, 1]]) == 8\n    assert candidate(5, 25, [[1, 0, 18], [3, 0, 20], [2, 0, 17], [2, 1, 21], [0, 4, 3]]) == 16\n    assert candidate(5, 15, [[2, 1, 33], [1, 0, 18], [2, 0, 16], [3, 1, 37], [3, 0, 26], [0, 4, 18]]) == 6\n    assert candidate(4, 1, [[1, 0, 1], [1, 0, 1], [0, 2, 1], [0, 3, 1]]) == 8\n    assert candidate(4, 10, [[2, 0, 22], [2, 1, 6], [2, 0, 21], [2, 1, 27], [3, 1, 12]]) == 6\n    assert candidate(2, 13, [[1, 0, 21]]) == 3\n    assert candidate(4, 31, [[3, 1, 7], [2, 1, 10], [2, 0, 25], [2, 0, 27]]) == 9\n    assert candidate(3, 17, [[1, 0, 8], [1, 0, 8], [0, 2, 14]]) == 6\n    assert candidate(2, 3, [[1, 0, 3]]) == 4\n    assert candidate(5, 5, [[4, 1, 37], [4, 1, 7], [2, 1, 6], [3, 2, 8], [2, 1, 35], [1, 0, 28], [4, 1, 3], [2, 1, 2]]) == 9\n    assert candidate(4, 1, [[2, 0, 2], [2, 0, 1], [0, 1, 2], [0, 3, 2]]) == 6\n\ndef test_check():\n    check(numberOfSets)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3218_placedCoins", "language": "py", "prompt": "from typing import List\n\ndef placedCoins(edges: List[List[int]], cost: List[int]) -> List[int]:\n    \"\"\"You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node.\nYou need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as:\nIf size of the subtree of node i is less than 3, place 1 coin.\nOtherwise, place an amount of coins equal to the maximum product of cost values assigned to 3 distinct nodes in the subtree of node i. If this product is negative, place 0 coins.\nReturn an array coin of size n such that coin[i] is the number of coins placed at node i.\nExample 1:\nInput: edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]\nOutput: [120,1,1,1,1,1]\nExplanation: For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them.\nExample 2:\nInput: edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]\nOutput: [280,140,32,1,1,1,1,1,1]\nExplanation: The coins placed on each node are:\n- Place 8 * 7 * 5 = 280 coins on node 0.\n- Place 7 * 5 * 4 = 140 coins on node 1.\n- Place 8 * 2 * 2 = 32 coins on node 2.\n- All other nodes are leaves with subtree of size 1, place 1 coin on each of them.\nExample 3:\nInput: edges = [[0,1],[0,2]], cost = [1,2,-2]\nOutput: [0,1,1]\nExplanation: Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0.\nConstraints:\n2 <= n <= 2 * 104\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\ncost.length == n\n1 <= |cost[i]| <= 104\nThe input is generated such that edges represents a valid tree.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3218_placedCoins.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]], [1, 2, 3, 4, 5, 6]) == [120, 1, 1, 1, 1, 1]\n    assert candidate([[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8]], [1, 4, 2, 3, 5, 7, 8, -4, 2]) == [280, 140, 32, 1, 1, 1, 1, 1, 1]\n    assert candidate([[0, 1], [0, 2]], [1, 2, -2]) == [0, 1, 1]\n    assert candidate([[0, 1]], [1, 2]) == [1, 1]\n    assert candidate([[0, 1]], [2, 1]) == [1, 1]\n    assert candidate([[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [0, 36], [0, 37], [0, 38], [0, 39], [0, 40], [0, 41], [0, 42], [0, 43], [0, 44], [0, 45], [0, 46], [0, 47], [0, 48], [0, 49], [0, 50], [0, 51], [0, 52], [0, 53], [0, 54], [0, 55], [0, 56], [0, 57], [0, 58], [0, 59], [0, 60], [0, 61], [0, 62], [0, 63], [0, 64], [0, 65], [0, 66], [0, 67], [0, 68], [0, 69], [0, 70], [0, 71], [0, 72], [0, 73], [0, 74], [0, 75], [0, 76], [0, 77], [0, 78], [0, 79], [0, 80], [0, 81], [0, 82], [0, 83], [0, 84], [0, 85], [0, 86], [0, 87], [0, 88], [0, 89], [0, 90], [0, 91], [0, 92], [0, 93], [0, 94], [0, 95], [0, 96], [0, 97], [0, 98], [0, 99]], [-5959, 602, -6457, 7055, -1462, 6347, 7226, -8422, -6088, 2997, -7909, 6433, 5217, 3294, -3792, 7463, 8538, -3811, 5009, 151, 5659, 4458, -1702, -1877, 2799, 9861, -9668, -1765, 2181, -8128, 7046, 9529, 6202, -8026, 6464, 1345, 121, 1922, 7274, -1227, -9914, 3025, 1046, -9368, -7368, 6205, -6342, 8091, -6732, -7620, 3276, 5136, 6871, 4823, -1885, -4005, -3974, -2725, -3845, -8508, 7201, -9566, -7236, -3386, 4021, 6793, -8759, 5066, 5879, -5171, 1011, 1242, 8536, -8405, -9646, -214, 2251, -9934, -8820, 6206, 1006, 1318, -9712, 7230, 5608, -4601, 9185, 346, 3056, 8913, -2454, -3445, -4295, 4802, -8852, -6121, -4538, -5580, -9246, -6462]) == [971167251036, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    assert candidate([[0, 1], [0, 2], [2, 3]], [10000, -10000, 10000, -10000]) == [1000000000000, 1, 1, 1]\n    assert candidate([[0, 2], [0, 6], [1, 4], [3, 5], [7, 6], [3, 6], [1, 8], [3, 1], [9, 3]], [63, 13, -6, 20, 56, -14, 61, 25, -99, 54]) == [215208, 0, 1, 77616, 1, 1, 184464, 1, 1, 1]\n    assert candidate([[7, 0], [4, 3], [4, 8], [1, 5], [6, 2], [2, 7], [7, 9], [1, 8], [1, 9]], [37, -48, 30, -67, -84, 36, -96, 24, 29, 38]) == [306432, 202608, 1, 1, 1, 1, 1, 306432, 163212, 213864]\n    assert candidate([[0, 2], [2, 7], [3, 4], [5, 4], [5, 8], [7, 6], [7, 1], [8, 1], [1, 9]], [-18, 15, -82, -85, 63, -89, 60, 63, 20, 18]) == [476595, 476595, 476595, 1, 1, 476595, 1, 476595, 476595, 1]\n    assert candidate([[2, 0], [1, 4], [3, 8], [4, 9], [6, 8], [7, 2], [2, 8], [5, 2], [5, 9]], [-9, 46, 17, 34, 43, 92, 41, -50, 4, 76]) == [321632, 1, 321632, 1, 1, 321632, 1, 1, 5576, 150328]\n    assert candidate([[0, 6], [3, 2], [3, 1], [6, 1], [8, 7], [7, 1], [5, 1], [5, 4], [9, 4]], [86, 50, 10, -54, -85, -65, 54, -19, 39, 37]) == [475150, 276250, 1, 1, 1, 204425, 298350, 1, 1, 1]\n    assert candidate([[0, 8], [8, 1], [9, 2], [4, 6], [7, 4], [3, 7], [3, 8], [5, 8], [5, 9]], [-4, 83, -97, 40, 86, -85, -6, -84, -16, -53]) == [709070, 1, 1, 43344, 1, 0, 1, 43344, 709070, 1]\n    assert candidate([[4, 2], [1, 3], [4, 5], [7, 5], [5, 0], [8, 1], [0, 1], [0, 6], [9, 6]], [-72, -18, -27, 38, 13, -53, 43, -95, -100, -77]) == [408500, 68400, 1, 1, 1, 65455, 1, 1, 1, 1]\n    assert candidate([[0, 2], [5, 2], [1, 5], [7, 4], [4, 8], [1, 8], [1, 6], [6, 3], [9, 3]], [6, 93, 59, -14, 1, -71, -87, 95, 16, -12]) == [586815, 141360, 586815, 1, 1, 586815, 0, 1, 1520, 1]\n    assert candidate([[0, 1], [5, 4], [4, 2], [7, 2], [7, 3], [8, 6], [3, 6], [3, 1], [9, 1]], [66, -54, 74, 18, -77, -57, 49, -82, -71, 80]) == [505120, 505120, 324786, 467236, 1, 1, 1, 467236, 1, 1]\n    assert candidate([[3, 8], [2, 4], [5, 6], [6, 7], [0, 8], [2, 0], [2, 6], [1, 6], [9, 1]], [92, -71, -10, -70, -56, -47, 69, 51, 100, 65]) == [634800, 1, 274344, 1, 1, 1, 230253, 1, 1, 1]\n    assert candidate([[0, 3], [2, 8], [5, 6], [9, 5], [7, 9], [8, 1], [1, 4], [4, 3], [9, 3]], [-71, 66, 86, 99, 50, -29, -30, 27, 16, -65]) == [561924, 90816, 1, 561924, 283800, 1, 1, 1, 1, 52650]\n    assert candidate([[1, 0], [2, 7], [6, 3], [0, 4], [6, 5], [5, 8], [0, 7], [9, 0], [9, 8]], [40, 8, 43, 31, -27, -21, -21, 55, -36, 75]) == [177375, 1, 1, 1, 1, 13671, 1, 1, 23436, 56700]\n    assert candidate([[9, 0], [9, 3], [4, 5], [1, 6], [1, 5], [8, 5], [9, 7], [8, 2], [2, 9]], [64, 35, -1, -28, -50, 38, -77, -13, -72, 35]) == [354816, 1, 210672, 1, 1, 146300, 1, 1, 210672, 210672]\n    assert candidate([[5, 3], [4, 2], [5, 2], [6, 5], [5, 1], [0, 1], [0, 8], [9, 7], [9, 8]], [-100, 44, -76, 55, 8, -8, 38, 26, -41, -83]) == [456500, 91960, 1, 1, 1, 33440, 1, 1, 88478, 1]\n    assert candidate([[0, 8], [9, 3], [4, 5], [8, 5], [2, 6], [7, 8], [2, 8], [1, 2], [9, 1]], [36, 33, 52, -24, 7, -82, 63, 85, 21, -64]) == [446080, 50688, 108108, 1, 1, 1, 1, 1, 446080, 1]\n    assert candidate([[9, 2], [1, 3], [8, 4], [1, 5], [1, 9], [8, 6], [7, 9], [8, 0], [0, 9]], [-67, -82, -2, 32, -97, 6, -85, 14, 8, 1]) == [263840, 0, 1, 1, 1, 1, 1, 1, 65960, 5248]\n    assert candidate([[7, 0], [3, 1], [7, 3], [4, 8], [8, 5], [7, 6], [2, 6], [2, 9], [8, 9]], [-48, -69, -25, -65, 65, 51, 85, 34, 17, -28]) == [381225, 1, 56355, 1, 1, 1, 281775, 381225, 56355, 56355]\n    assert candidate([[4, 2], [7, 2], [3, 5], [6, 3], [3, 0], [7, 0], [1, 8], [1, 0], [9, 0]], [-14, 39, 40, -76, -69, 66, 43, 82, -66, -45]) == [430008, 1, 1, 0, 1, 1, 1, 0, 1, 1]\n    assert candidate([[1, 9], [3, 7], [0, 6], [7, 0], [8, 5], [2, 5], [4, 2], [4, 0], [0, 9]], [34, -87, -34, 87, 58, 76, 5, 43, 14, -45]) == [383496, 1, 0, 1, 61712, 1, 1, 1, 1, 1]\n    assert candidate([[7, 1], [2, 7], [4, 3], [9, 5], [6, 7], [3, 6], [8, 3], [0, 3], [0, 9]], [-9, 67, 10, -67, 91, 29, -4, -35, 60, -84]) == [512148, 1, 1, 365820, 1, 1, 9380, 0, 1, 1]\n    assert candidate([[2, 3], [3, 6], [3, 7], [8, 5], [1, 5], [4, 1], [4, 0], [0, 3], [9, 3]], [88, -73, 8, -82, 64, -14, 56, -82, -2, -89]) == [642224, 0, 1, 408688, 65408, 1, 1, 1, 1, 1]\n    assert candidate([[8, 4], [7, 3], [3, 0], [0, 6], [6, 8], [8, 2], [5, 2], [1, 5], [1, 9]], [-50, 34, 51, -69, -28, 72, 61, -76, -30, 76]) == [398544, 1, 279072, 1, 1, 186048, 333792, 1, 279072, 1]\n    assert candidate([[5, 0], [1, 6], [7, 2], [4, 9], [3, 5], [3, 7], [8, 7], [6, 7], [6, 9]], [-75, -39, -30, -69, 84, -7, 98, 92, -42, -51]) == [757344, 1, 1, 757344, 1, 757344, 194922, 757344, 1, 1]\n    assert candidate([[0, 8], [2, 5], [3, 5], [1, 6], [4, 1], [8, 4], [7, 8], [8, 5], [9, 5]], [81, -76, -61, 1, 39, -3, -21, -33, 42, -78]) == [480168, 1, 1, 1, 62244, 4758, 1, 1, 248976, 1]\n    assert candidate([[7, 1], [0, 2], [0, 3], [6, 5], [6, 0], [0, 7], [7, 4], [9, 4], [8, 9]], [-37, -11, 71, -57, -2, -78, 87, 55, -21, -66]) == [447876, 1, 1, 1, 0, 1, 1, 76230, 1, 1]\n    assert candidate([[0, 9], [8, 2], [3, 7], [6, 4], [1, 5], [8, 1], [6, 8], [6, 7], [7, 9]], [61, -53, -97, -86, -91, -32, -8, 79, 100, 75]) == [882700, 1, 1, 1, 1, 1, 882700, 882700, 514100, 882700]\n    assert candidate([[8, 3], [4, 6], [2, 5], [2, 1], [6, 8], [8, 0], [0, 7], [1, 7], [1, 9]], [-40, -4, 60, -47, 35, 39, -8, -12, -29, -43]) == [121260, 10320, 1, 1, 1, 1, 1, 30960, 47705, 1]\n    assert candidate([[3, 0], [1, 7], [6, 3], [7, 5], [4, 5], [4, 6], [6, 9], [2, 8], [9, 2]], [36, 84, 5, 32, -36, 86, -35, 58, 36, -100]) == [418992, 1, 1, 418992, 418992, 418992, 418992, 1, 1, 0]\n    assert candidate([[1, 0], [3, 0], [2, 5], [3, 5], [6, 4], [4, 9], [7, 3], [8, 3], [3, 9]], [39, 22, -9, -65, 9, -53, 83, -94, -34, 12]) == [507130, 1, 1, 507130, 1, 1, 1, 1, 1, 8964]\n    assert candidate([[2, 0], [7, 0], [4, 3], [5, 8], [7, 9], [8, 1], [3, 1], [3, 6], [9, 6]], [-68, 1, -68, 65, -45, -26, 36, -3, -85, 40]) == [375700, 2210, 1, 248625, 1, 1, 248625, 248625, 1, 248625]\n    assert candidate([[4, 0], [7, 2], [2, 6], [8, 6], [5, 6], [4, 5], [4, 3], [1, 3], [1, 9]], [-45, 26, -26, -34, -33, 81, -33, 55, -87, 52]) == [317115, 1, 1, 0, 239598, 232551, 157905, 1, 1, 1]\n    assert candidate([[2, 1], [0, 1], [6, 3], [5, 4], [6, 5], [0, 6], [9, 0], [8, 7], [9, 7]], [94, 76, -92, 61, 27, 78, -94, 39, -12, 77]) == [812912, 1, 1, 1, 1, 1, 128466, 1, 1, 0]\n    assert candidate([[8, 0], [3, 2], [6, 2], [1, 2], [1, 5], [4, 7], [9, 4], [8, 5], [9, 5]], [-6, -89, 62, -82, -78, 97, -71, 58, -43, 12]) == [707906, 452476, 360964, 1, 1, 707906, 1, 1, 707906, 0]\n    assert candidate([[1, 0], [2, 0], [4, 0], [4, 3], [4, 6], [6, 5], [7, 5], [7, 8], [9, 8]], [-35, 4, -1, -44, -27, -93, 10, 55, -14, 93]) == [380556, 1, 1, 1, 380556, 121086, 121086, 0, 1, 1]\n    assert candidate([[0, 6], [1, 5], [8, 2], [8, 3], [9, 6], [4, 7], [5, 8], [5, 4], [4, 9]], [26, 22, 32, -27, 54, 44, -58, -88, 79, -77]) == [535304, 1, 1, 1, 187704, 111232, 535304, 1, 0, 535304]\n    assert candidate([[7, 2], [3, 1], [5, 1], [8, 5], [6, 9], [7, 0], [0, 4], [4, 8], [9, 4]], [-70, -80, 17, 23, 19, -71, 84, -52, -21, -44]) == [477120, 1, 1, 1, 477120, 130640, 1, 1, 130640, 1]\n    assert candidate([[2, 1], [3, 6], [0, 6], [7, 2], [5, 2], [5, 4], [4, 0], [0, 8], [9, 0]], [-27, 11, -5, 22, -81, 48, -28, -85, 85, -44]) == [585225, 1, 4675, 1, 330480, 20400, 1, 1, 1, 1]\n    assert candidate([[8, 1], [2, 5], [4, 3], [8, 5], [5, 6], [6, 3], [0, 3], [7, 0], [9, 7]], [79, -73, 75, -96, 61, 87, -74, 69, 84, 41]) == [618048, 1, 1, 618048, 1, 548100, 548100, 1, 1, 1]\n    assert candidate([[1, 0], [2, 0], [3, 0], [4, 0], [0, 7], [8, 0], [8, 6], [5, 6], [5, 9]], [-97, -61, -67, 60, -75, -85, -21, 75, -89, 59]) == [647475, 1, 1, 1, 1, 1, 105315, 1, 446335, 1]\n    assert candidate([[0, 1], [0, 4], [9, 3], [9, 4], [5, 2], [2, 7], [6, 8], [8, 7], [8, 9]], [-88, -7, -16, -49, -53, 46, -19, 38, -2, -12]) == [214544, 1, 1, 1, 119462, 1, 1, 0, 13984, 42826]\n    assert candidate([[2, 0], [4, 6], [4, 5], [1, 5], [3, 1], [3, 2], [2, 7], [8, 7], [7, 9]], [-71, -13, 56, 3, 95, 74, 79, 81, -50, -24]) == [607905, 555370, 607905, 555370, 1, 555370, 1, 97200, 1, 1]\n    assert candidate([[3, 2], [7, 3], [4, 8], [1, 5], [6, 7], [0, 7], [8, 1], [0, 1], [9, 0]], [25, -2, 22, -40, -53, -17, -97, -49, 29, 36]) == [185076, 26129, 1, 1, 1, 1, 1, 104566, 1, 1]\n    assert candidate([[1, 8], [2, 6], [7, 2], [7, 3], [8, 3], [8, 4], [5, 4], [5, 0], [9, 0]], [-54, -16, 51, -79, 73, -83, -54, 5, 45, 14]) == [478661, 1, 1, 217566, 311418, 478661, 1, 0, 217566, 1]\n    assert candidate([[3, 1], [4, 0], [1, 5], [6, 1], [6, 0], [9, 7], [0, 8], [0, 2], [2, 9]], [23, -50, -5, -36, -49, 49, 39, -82, -8, 81]) == [332100, 88200, 33210, 1, 1, 1, 88200, 1, 1, 1]\n    assert candidate([[0, 7], [8, 1], [5, 7], [8, 2], [2, 3], [3, 7], [4, 7], [4, 6], [6, 9]], [-12, -83, -3, -43, 12, 48, -46, 19, -92, 69]) == [526884, 1, 0, 0, 0, 1, 1, 526884, 1, 1]\n    assert candidate([[0, 1], [2, 5], [7, 2], [7, 6], [1, 8], [1, 3], [3, 7], [4, 7], [9, 4]], [56, 61, -17, -3, -100, -28, 81, 42, 1, -86]) == [696600, 696600, 1, 696600, 1, 1, 1, 696600, 1, 1]\n    assert candidate([[0, 3], [8, 1], [3, 6], [5, 3], [2, 8], [4, 2], [4, 7], [7, 5], [5, 9]], [-42, 72, 54, -46, 57, 95, 94, 21, -19, -92]) == [642960, 1, 0, 642960, 221616, 389880, 1, 221616, 1, 1]\n    assert candidate([[2, 0], [2, 4], [6, 5], [8, 6], [3, 7], [3, 1], [1, 8], [2, 1], [2, 9]], [-58, -82, -70, 33, 20, -40, 21, -93, 18, -6]) == [251658, 251658, 251658, 1, 1, 1, 1, 1, 0, 1]\n    assert candidate([[1, 5], [3, 0], [0, 2], [2, 4], [5, 2], [7, 2], [6, 7], [8, 7], [7, 9]], [-96, -98, 41, 59, -69, -51, -78, 43, -40, -8]) == [555072, 1, 328692, 1, 1, 1, 1, 134160, 1, 1]\n    assert candidate([[0, 4], [1, 4], [3, 6], [5, 7], [4, 6], [7, 2], [4, 2], [4, 9], [9, 8]], [-98, -100, -37, 62, 38, -54, 56, 56, 1, -72]) == [607600, 1, 111888, 1, 446400, 1, 1, 1, 1, 1]\n    assert candidate([[8, 0], [4, 3], [6, 3], [5, 7], [6, 8], [8, 2], [1, 2], [7, 1], [9, 7]], [-70, -59, -87, -64, 56, -15, -62, -48, -58, -85]) == [414120, 0, 0, 1, 1, 1, 222208, 0, 414120, 1]\n    assert candidate([[3, 0], [1, 8], [6, 2], [5, 3], [4, 5], [8, 4], [7, 8], [8, 6], [6, 9]], [-56, -14, -44, -2, 31, 34, -61, 53, -39, -21]) == [181048, 1, 1, 142252, 142252, 142252, 0, 1, 142252, 1]\n    assert candidate([[2, 1], [1, 3], [5, 8], [9, 6], [8, 1], [1, 4], [4, 0], [7, 0], [7, 9]], [-18, -10, 25, -60, -48, 4, 14, 38, 26, 16]) == [109440, 15600, 1, 1, 74880, 1, 1, 8512, 1, 1]\n    assert candidate([[0, 2], [2, 5], [3, 4], [5, 3], [6, 8], [7, 1], [5, 1], [5, 9], [8, 9]], [46, 96, 34, 76, 19, 29, -36, 48, -71, -45]) == [350208, 1, 350208, 1, 1, 350208, 1, 1, 1, 0]\n    assert candidate([[0, 2], [7, 2], [3, 4], [4, 7], [5, 1], [6, 1], [7, 6], [9, 6], [8, 9]], [4, 70, 65, -34, -59, -70, -83, -21, 66, -10]) == [406700, 1, 406700, 1, 1, 1, 406700, 406700, 1, 1]\n    assert candidate([[0, 1], [2, 3], [5, 2], [9, 2], [6, 9], [9, 7], [1, 8], [4, 1], [9, 4]], [54, 72, -52, 45, -62, 96, -54, 28, -76, 86]) == [594432, 594432, 0, 1, 371520, 1, 1, 1, 1, 371520]\n    assert candidate([[1, 0], [0, 4], [3, 5], [6, 7], [6, 3], [3, 8], [8, 0], [0, 2], [9, 2]], [-98, -85, 82, -30, 64, -76, 36, -54, 84, 85]) == [708050, 1, 1, 147744, 1, 1, 1, 1, 344736, 1]\n    assert candidate([[0, 8], [2, 6], [4, 7], [5, 1], [1, 9], [3, 7], [3, 8], [6, 8], [9, 6]], [60, -76, -76, 38, -5, -33, -80, -36, 28, 63]) == [383040, 1, 1, 6840, 1, 1, 383040, 1, 383040, 158004]\n    assert candidate([[5, 3], [6, 5], [7, 6], [6, 2], [2, 1], [0, 1], [0, 9], [4, 8], [4, 9]], [-56, -92, -10, -70, 52, 22, 43, 37, 88, 48]) == [566720, 276920, 35002, 1, 1, 1, 35002, 1, 1, 219648]\n    assert candidate([[8, 2], [9, 4], [1, 7], [3, 1], [3, 5], [5, 8], [5, 0], [0, 6], [9, 6]], [-70, 17, -31, 41, -93, 17, -19, 21, -66, -29]) == [266910, 1, 1, 14637, 1, 83886, 0, 1, 1, 1]\n    assert candidate([[8, 1], [2, 4], [7, 3], [2, 3], [2, 6], [6, 5], [0, 5], [0, 8], [9, 8]], [88, 86, 55, -61, 3, -70, 12, 44, -92, -72]) == [582912, 1, 7260, 1, 1, 234850, 29040, 1, 569664, 1]\n    assert candidate([[0, 7], [1, 3], [1, 6], [4, 2], [6, 2], [5, 6], [5, 9], [7, 8], [9, 8]], [15, 78, -48, 58, -27, 28, 60, -9, -64, -71]) == [354432, 1, 1, 1, 1, 271440, 271440, 354432, 354432, 271440]\n    assert candidate([[4, 0], [8, 0], [5, 6], [8, 6], [6, 1], [7, 1], [3, 7], [2, 3], [9, 2]], [14, 10, 10, -73, -43, 19, 92, 62, 16, -27]) == [288788, 122202, 1, 19710, 1, 1, 181332, 122202, 181332, 1]\n    assert candidate([[8, 0], [3, 1], [1, 2], [8, 5], [6, 7], [4, 7], [9, 4], [2, 8], [2, 9]], [97, 35, -74, 5, 65, 5, 86, 61, -55, 53]) == [542230, 1, 340990, 1, 340990, 1, 1, 1, 350020, 340990]\n    assert candidate([[0, 1], [7, 0], [8, 2], [3, 4], [4, 7], [4, 8], [4, 6], [5, 6], [9, 5]], [-74, 40, 73, -97, -62, 9, -96, -98, -38, 63]) == [693938, 1, 1, 1, 679776, 1, 0, 693938, 1, 1]\n    assert candidate([[2, 3], [0, 3], [0, 6], [6, 5], [7, 1], [1, 5], [8, 5], [4, 5], [9, 4]], [4, -30, 59, 61, 78, -22, -24, 85, -19, -89]) == [404430, 1, 1, 1, 1, 226950, 226950, 1, 1, 1]\n    assert candidate([[1, 2], [5, 4], [5, 6], [7, 1], [3, 1], [3, 5], [5, 8], [0, 5], [0, 9]], [11, -80, 95, 64, -76, 56, 61, 22, 13, -58]) == [577600, 0, 1, 133760, 1, 577600, 1, 1, 1, 1]\n    assert candidate([[1, 9], [2, 7], [3, 5], [4, 3], [0, 4], [0, 6], [8, 0], [7, 0], [9, 7]], [-69, 18, -39, -59, -48, -65, 97, 1, 74, -63]) == [435045, 1, 1, 1, 0, 1, 1, 44226, 1, 1]\n    assert candidate([[0, 6], [1, 4], [5, 4], [6, 8], [3, 8], [5, 3], [5, 2], [7, 2], [9, 7]], [-84, 27, 16, 75, 49, 4, 72, 46, -17, 48]) == [264600, 1, 35328, 176400, 1, 108192, 264600, 1, 176400, 1]\n    assert candidate([[0, 9], [1, 7], [6, 3], [8, 7], [7, 3], [5, 3], [2, 5], [2, 4], [4, 9]], [1, -53, 88, -67, -55, -31, -89, -39, 21, -96]) == [751872, 1, 524744, 125223, 524744, 125223, 1, 43407, 1, 751872]\n    assert candidate([[3, 6], [0, 6], [8, 0], [7, 4], [4, 1], [2, 1], [2, 9], [8, 5], [9, 5]], [78, -10, -51, -50, -55, -72, -7, 31, -94, 4]) == [527904, 17050, 86955, 1, 1, 122760, 1, 1, 209808, 86955]\n    assert candidate([[2, 5], [4, 7], [4, 5], [5, 3], [3, 6], [6, 0], [1, 0], [8, 1], [9, 8]], [-19, 93, -23, -86, 54, -70, -70, 9, 69, 13]) == [559860, 83421, 1, 325080, 1, 86940, 325080, 1, 1, 1]\n    assert candidate([[2, 7], [3, 9], [7, 5], [4, 5], [4, 1], [6, 1], [6, 0], [8, 0], [0, 9]], [45, -53, -16, -26, 99, 50, 33, -57, -97, 74]) == [547371, 299079, 1, 1, 90288, 45600, 299079, 1, 1, 1]\n    assert candidate([[5, 0], [9, 1], [3, 6], [2, 4], [2, 6], [6, 9], [8, 7], [7, 5], [5, 9]], [-14, -4, -49, 52, -45, 77, -17, -79, 21, -33]) == [298067, 1, 1, 1, 1, 298067, 114660, 1, 1, 114660]\n    assert candidate([[6, 3], [7, 0], [2, 0], [2, 4], [9, 4], [1, 8], [1, 6], [5, 6], [9, 5]], [-58, -55, 17, 68, 37, -32, 91, -63, 79, 69]) == [496041, 1, 496041, 1, 496041, 488852, 488852, 1, 1, 496041]\n    assert candidate([[1, 8], [0, 3], [2, 4], [0, 2], [8, 5], [0, 5], [7, 0], [7, 6], [9, 6]], [-8, -99, 36, 31, 94, 5, -35, 54, 33, 19]) == [325710, 1, 1, 1, 1, 0, 1, 0, 1, 1]\n    assert candidate([[1, 0], [1, 7], [3, 4], [4, 5], [5, 6], [7, 5], [5, 2], [8, 2], [2, 9]], [70, -75, -13, 30, -87, 20, -67, 76, 20, -30]) == [495900, 495900, 7800, 1, 1, 174870, 1, 443004, 1, 1]\n    assert candidate([[5, 1], [2, 1], [0, 2], [6, 0], [0, 3], [3, 7], [9, 7], [4, 8], [9, 4]], [-10, -31, -7, -77, 64, -80, -53, 37, 1, 10]) == [394240, 1, 0, 23680, 1, 1, 1, 23680, 1, 640]\n    assert candidate([[2, 0], [1, 2], [2, 8], [4, 3], [4, 7], [5, 9], [6, 9], [8, 7], [7, 9]], [-80, 77, -18, -72, 11, 66, 82, 80, 32, 61]) == [505120, 1, 505120, 1, 1, 1, 1, 432960, 432960, 330132]\n    assert candidate([[0, 3], [1, 0], [1, 8], [5, 4], [9, 6], [7, 4], [9, 4], [8, 2], [9, 2]], [70, -14, -91, 98, -12, 30, -24, 79, -62, 11]) == [552916, 445718, 172536, 1, 0, 1, 1, 1, 445718, 26070]\n    assert candidate([[5, 8], [2, 6], [2, 0], [0, 3], [7, 8], [8, 4], [3, 4], [1, 3], [1, 9]], [55, 69, 29, 87, 27, -35, -83, 71, -82, -8]) == [592122, 1, 1, 426213, 203770, 1, 1, 1, 203770, 1]\n    assert candidate([[1, 9], [5, 4], [5, 3], [6, 3], [6, 2], [2, 8], [0, 7], [0, 9], [8, 9]], [-25, 28, 47, -75, -78, -39, 23, 93, -20, 61]) == [544050, 1, 274950, 0, 1, 1, 134550, 1, 274950, 356850]\n    assert candidate([[5, 0], [1, 8], [6, 4], [4, 9], [7, 3], [8, 5], [3, 5], [3, 2], [9, 2]], [-11, -91, -54, 53, 58, 16, -60, 85, 20, 51]) == [464100, 1, 187920, 275400, 1, 464100, 1, 1, 1, 0]\n    assert candidate([[1, 3], [1, 4], [2, 4], [6, 5], [7, 5], [0, 5], [9, 0], [8, 2], [9, 2]], [-74, 26, 99, 58, 42, -55, -1, -56, 29, -35]) == [410256, 1, 241164, 1, 63336, 0, 1, 1, 1, 241164]\n    assert candidate([[2, 5], [5, 3], [0, 4], [5, 9], [6, 1], [7, 1], [7, 0], [0, 9], [8, 9]], [72, 68, -18, 95, 87, -58, -55, 20, 40, 2]) == [595080, 1, 1, 1, 1, 99180, 1, 0, 1, 99180]\n    assert candidate([[1, 6], [3, 2], [9, 3], [6, 5], [5, 9], [7, 0], [4, 8], [0, 4], [0, 9]], [85, 19, -56, -71, 41, -72, 59, 30, 55, 67]) == [434520, 1, 1, 1, 1, 0, 1, 1, 1, 342504]\n    assert candidate([[2, 1], [7, 1], [0, 3], [8, 4], [0, 5], [7, 6], [0, 6], [8, 0], [9, 8]], [13, 4, 84, 36, 29, -97, -59, -40, 77, 41]) == [480732, 1, 1, 1, 1, 1, 198240, 0, 91553, 1]\n    assert candidate([[2, 1], [4, 5], [6, 3], [1, 3], [1, 0], [7, 0], [8, 7], [5, 8], [9, 5]], [85, 64, -67, -60, 5, -14, 31, -84, 47, -36]) == [478380, 257280, 1, 1, 1, 2520, 1, 142128, 23688, 1]\n    assert candidate([[6, 1], [4, 2], [7, 4], [5, 7], [0, 8], [6, 0], [3, 6], [7, 3], [7, 9]], [-51, -55, 82, 25, -53, 13, -15, 98, 39, 29]) == [313404, 1, 1, 233044, 1, 1, 285670, 233044, 1, 1]\n    assert candidate([[0, 2], [5, 1], [6, 2], [7, 3], [5, 4], [5, 9], [6, 9], [7, 9], [8, 9]], [-96, -75, -58, 26, -73, -25, -9, 87, 57, 3]) == [626400, 1, 476325, 1, 1, 0, 476325, 1, 1, 476325]\n    assert candidate([[0, 4], [0, 9], [5, 1], [2, 6], [3, 7], [3, 8], [1, 8], [1, 2], [2, 9]], [-58, 20, 21, 77, -96, 53, -77, -66, -32, 42]) == [569184, 162624, 391314, 1, 1, 1, 1, 1, 162624, 391314]\n    assert candidate([[2, 4], [5, 2], [6, 3], [3, 0], [7, 5], [8, 5], [1, 8], [1, 0], [0, 9]], [-59, -25, -25, -78, 22, 29, 9, -12, -11, -5]) == [133458, 18125, 1, 1, 1, 8700, 1, 1, 8700, 1]\n    assert candidate([[8, 1], [3, 2], [5, 4], [6, 3], [0, 3], [8, 5], [5, 7], [7, 0], [9, 0]], [86, -87, -96, -74, 51, 75, -76, 74, -2, -60]) == [718272, 1, 1, 0, 1, 13050, 1, 283050, 1, 1]\n\ndef test_check():\n    check(placedCoins)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3219_lexicographicallySmallestArray", "language": "py", "prompt": "from typing import List\n\ndef lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    \"\"\"You are given a 0-indexed array of positive integers nums and a positive integer limit.\nIn one operation, you can choose any two indices i and j and swap nums[i] and nums[j] if |nums[i] - nums[j]| <= limit.\nReturn the lexicographically smallest array that can be obtained by performing the operation any number of times.\nAn array a is lexicographically smaller than an array b if in the first position where a and b differ, array a has an element that is less than the corresponding element in b. For example, the array [2,10,3] is lexicographically smaller than the array [10,2,3] because they differ at index 0 and 2 < 10.\nExample 1:\nInput: nums = [1,5,3,9,8], limit = 2\nOutput: [1,3,5,8,9]\nExplanation: Apply the operation 2 times:\n- Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]\n- Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\nNote that it may be possible to get the same result by doing different operations.\nExample 2:\nInput: nums = [1,7,6,18,2,1], limit = 3\nOutput: [1,6,7,18,1,2]\nExplanation: Apply the operation 3 times:\n- Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]\n- Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]\n- Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\nExample 3:\nInput: nums = [1,7,28,19,10], limit = 3\nOutput: [1,7,28,19,10]\nExplanation: [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= limit <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3219_lexicographicallySmallestArray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 5, 3, 9, 8], 2) == [1, 3, 5, 8, 9]\n    assert candidate([1, 7, 6, 18, 2, 1], 3) == [1, 6, 7, 18, 1, 2]\n    assert candidate([1, 7, 28, 19, 10], 3) == [1, 7, 28, 19, 10]\n    assert candidate([1000000000], 1) == [1000000000]\n    assert candidate([1, 60, 34, 84, 62, 56, 39, 76, 49, 38], 4) == [1, 56, 34, 84, 60, 62, 38, 76, 49, 39]\n    assert candidate([1, 81, 10, 79, 36, 2, 87, 12, 20, 77], 7) == [1, 77, 10, 79, 36, 2, 81, 12, 20, 87]\n    assert candidate([2, 71, 5, 87, 11, 15, 70, 70, 14, 38], 14) == [2, 70, 5, 87, 11, 14, 70, 71, 15, 38]\n    assert candidate([4, 3, 23, 84, 34, 88, 44, 44, 18, 15], 3) == [3, 4, 23, 84, 34, 88, 44, 44, 15, 18]\n    assert candidate([4, 34, 29, 73, 51, 11, 8, 53, 98, 47], 10) == [4, 29, 34, 73, 47, 8, 11, 51, 98, 53]\n    assert candidate([4, 52, 38, 59, 71, 27, 31, 83, 88, 10], 14) == [4, 27, 31, 38, 52, 59, 71, 83, 88, 10]\n    assert candidate([4, 68, 8, 10, 70, 62, 27, 5, 42, 61], 11) == [4, 61, 5, 8, 62, 68, 27, 10, 42, 70]\n    assert candidate([5, 9, 35, 60, 73, 91, 61, 57, 87, 76], 11) == [5, 9, 35, 57, 73, 76, 60, 61, 87, 91]\n    assert candidate([5, 15, 68, 47, 49, 67, 9, 6, 35, 14], 4) == [5, 14, 67, 47, 49, 68, 6, 9, 35, 15]\n    assert candidate([5, 16, 43, 15, 66, 21, 58, 74, 55, 66], 9) == [5, 15, 43, 16, 55, 21, 58, 66, 66, 74]\n    assert candidate([5, 30, 92, 4, 31, 2, 17, 39, 15, 7], 3) == [2, 30, 92, 4, 31, 5, 15, 39, 17, 7]\n    assert candidate([5, 38, 68, 80, 64, 79, 50, 5, 8, 95], 7) == [5, 38, 64, 79, 68, 80, 50, 5, 8, 95]\n    assert candidate([5, 100, 44, 45, 16, 30, 14, 65, 83, 64], 15) == [5, 100, 14, 16, 30, 44, 45, 64, 83, 65]\n    assert candidate([6, 57, 100, 67, 4, 63, 47, 59, 21, 66], 8) == [4, 57, 100, 59, 6, 63, 47, 66, 21, 67]\n    assert candidate([6, 70, 90, 1, 33, 81, 60, 80, 68, 44], 7) == [1, 68, 90, 6, 33, 80, 60, 81, 70, 44]\n    assert candidate([6, 74, 74, 74, 30, 70, 91, 74, 76, 41], 1) == [6, 74, 74, 74, 30, 70, 91, 74, 76, 41]\n    assert candidate([6, 77, 68, 15, 3, 98, 56, 22, 81, 72], 2) == [6, 77, 68, 15, 3, 98, 56, 22, 81, 72]\n    assert candidate([7, 17, 79, 29, 29, 83, 21, 12, 5, 1], 10) == [1, 5, 79, 7, 12, 83, 17, 21, 29, 29]\n    assert candidate([7, 66, 85, 9, 29, 1, 25, 69, 57, 95], 13) == [1, 57, 85, 7, 25, 9, 29, 66, 69, 95]\n    assert candidate([7, 73, 1, 97, 13, 55, 74, 29, 76, 19], 14) == [1, 73, 7, 97, 13, 55, 74, 19, 76, 29]\n    assert candidate([8, 4, 47, 23, 73, 79, 63, 62, 35, 51], 11) == [4, 8, 47, 23, 51, 62, 63, 73, 35, 79]\n    assert candidate([8, 17, 20, 100, 59, 98, 64, 78, 64, 53], 1) == [8, 17, 20, 100, 59, 98, 64, 78, 64, 53]\n    assert candidate([8, 70, 99, 5, 49, 27, 79, 2, 57, 49], 14) == [2, 49, 99, 5, 49, 27, 57, 8, 70, 79]\n    assert candidate([9, 67, 94, 37, 5, 90, 43, 13, 27, 21], 11) == [5, 67, 90, 9, 13, 94, 21, 27, 37, 43]\n    assert candidate([10, 22, 17, 76, 6, 64, 51, 60, 65, 37], 9) == [6, 10, 17, 76, 22, 51, 60, 64, 65, 37]\n    assert candidate([10, 34, 63, 88, 76, 30, 70, 80, 52, 13], 7) == [10, 30, 63, 88, 70, 34, 76, 80, 52, 13]\n    assert candidate([10, 69, 4, 28, 15, 30, 23, 53, 41, 93], 9) == [4, 69, 10, 15, 23, 28, 30, 53, 41, 93]\n    assert candidate([12, 86, 98, 73, 64, 77, 30, 76, 46, 69], 4) == [12, 86, 98, 69, 64, 73, 30, 76, 46, 77]\n    assert candidate([13, 43, 32, 15, 45, 69, 58, 89, 64, 76], 12) == [13, 32, 43, 15, 45, 58, 64, 89, 69, 76]\n    assert candidate([13, 70, 11, 74, 73, 21, 4, 45, 95, 38], 9) == [4, 70, 11, 73, 74, 13, 21, 38, 95, 45]\n    assert candidate([14, 15, 53, 11, 38, 18, 27, 69, 55, 2], 13) == [2, 11, 53, 14, 15, 18, 27, 69, 55, 38]\n    assert candidate([14, 28, 61, 49, 10, 25, 80, 83, 42, 100], 3) == [14, 25, 61, 49, 10, 28, 80, 83, 42, 100]\n    assert candidate([14, 71, 7, 77, 99, 90, 20, 81, 100, 65], 7) == [7, 65, 14, 71, 99, 90, 20, 77, 100, 81]\n    assert candidate([14, 95, 75, 100, 33, 98, 88, 2, 74, 26], 1) == [14, 95, 74, 100, 33, 98, 88, 2, 75, 26]\n    assert candidate([15, 29, 16, 37, 10, 70, 58, 5, 33, 76], 8) == [5, 29, 10, 33, 15, 70, 58, 16, 37, 76]\n    assert candidate([15, 33, 1, 74, 47, 6, 60, 95, 78, 72], 7) == [15, 33, 1, 72, 47, 6, 60, 95, 74, 78]\n    assert candidate([16, 20, 79, 92, 17, 7, 70, 41, 54, 18], 6) == [16, 17, 79, 92, 18, 7, 70, 41, 54, 20]\n    assert candidate([16, 43, 19, 36, 99, 15, 70, 89, 45, 71], 4) == [15, 43, 16, 36, 99, 19, 70, 89, 45, 71]\n    assert candidate([17, 99, 88, 73, 13, 1, 3, 5, 55, 4], 15) == [1, 73, 88, 99, 3, 4, 5, 13, 55, 17]\n    assert candidate([18, 97, 57, 1, 23, 36, 77, 80, 47, 91], 10) == [18, 91, 47, 1, 23, 36, 77, 80, 57, 97]\n    assert candidate([19, 25, 49, 96, 35, 69, 81, 81, 51, 50], 12) == [19, 25, 49, 96, 35, 69, 81, 81, 50, 51]\n    assert candidate([19, 37, 12, 11, 70, 99, 88, 36, 64, 9], 3) == [19, 36, 9, 11, 70, 99, 88, 37, 64, 12]\n    assert candidate([19, 64, 26, 5, 70, 10, 17, 66, 51, 36], 13) == [5, 51, 10, 17, 64, 19, 26, 66, 70, 36]\n    assert candidate([21, 14, 21, 34, 4, 88, 39, 62, 30, 20], 12) == [4, 14, 20, 21, 21, 88, 30, 62, 34, 39]\n    assert candidate([22, 94, 100, 54, 97, 14, 100, 48, 41, 35], 6) == [22, 94, 97, 48, 100, 14, 100, 54, 35, 41]\n    assert candidate([23, 50, 8, 48, 62, 26, 92, 5, 96, 9], 13) == [23, 48, 5, 50, 62, 26, 92, 8, 96, 9]\n    assert candidate([25, 47, 34, 69, 36, 91, 14, 44, 37, 2], 1) == [25, 47, 34, 69, 36, 91, 14, 44, 37, 2]\n    assert candidate([25, 58, 36, 16, 42, 57, 17, 96, 10, 2], 13) == [2, 57, 10, 16, 17, 58, 25, 96, 36, 42]\n    assert candidate([26, 21, 9, 15, 94, 47, 52, 86, 89, 7], 9) == [7, 9, 15, 21, 86, 47, 52, 89, 94, 26]\n    assert candidate([27, 26, 24, 2, 95, 90, 41, 14, 20, 35], 2) == [24, 26, 27, 2, 95, 90, 41, 14, 20, 35]\n    assert candidate([27, 56, 68, 41, 39, 80, 60, 36, 24, 5], 13) == [24, 56, 60, 27, 36, 68, 80, 39, 41, 5]\n    assert candidate([27, 71, 52, 71, 68, 2, 49, 37, 34, 97], 8) == [27, 68, 49, 71, 71, 2, 52, 34, 37, 97]\n    assert candidate([29, 82, 25, 91, 17, 9, 38, 25, 29, 68], 7) == [25, 82, 25, 91, 17, 9, 38, 29, 29, 68]\n    assert candidate([30, 48, 76, 86, 21, 1, 55, 49, 90, 9], 2) == [30, 48, 76, 86, 21, 1, 55, 49, 90, 9]\n    assert candidate([31, 10, 64, 15, 60, 32, 88, 79, 79, 33], 2) == [31, 10, 64, 15, 60, 32, 88, 79, 79, 33]\n    assert candidate([32, 70, 43, 51, 40, 73, 56, 39, 75, 45], 8) == [32, 70, 39, 40, 43, 73, 45, 51, 75, 56]\n    assert candidate([32, 95, 51, 87, 29, 43, 21, 55, 45, 84], 2) == [32, 95, 51, 87, 29, 43, 21, 55, 45, 84]\n    assert candidate([33, 25, 25, 65, 82, 71, 56, 82, 13, 46], 14) == [13, 25, 25, 33, 46, 56, 65, 71, 82, 82]\n    assert candidate([33, 37, 77, 41, 83, 75, 96, 97, 4, 60], 15) == [33, 37, 60, 41, 75, 77, 83, 96, 4, 97]\n    assert candidate([35, 81, 18, 79, 47, 53, 20, 2, 98, 22], 2) == [35, 79, 18, 81, 47, 53, 20, 2, 98, 22]\n    assert candidate([36, 39, 100, 4, 44, 33, 65, 11, 15, 35], 10) == [33, 35, 100, 4, 36, 39, 65, 11, 15, 44]\n    assert candidate([38, 56, 60, 98, 21, 15, 70, 37, 24, 61], 15) == [15, 56, 60, 98, 21, 24, 61, 37, 38, 70]\n    assert candidate([39, 36, 18, 39, 99, 51, 68, 92, 5, 38], 4) == [36, 38, 18, 39, 99, 51, 68, 92, 5, 39]\n    assert candidate([39, 89, 81, 37, 67, 37, 98, 89, 49, 47], 12) == [37, 81, 89, 37, 67, 39, 89, 98, 47, 49]\n    assert candidate([40, 67, 99, 53, 95, 47, 59, 99, 64, 44], 7) == [40, 44, 95, 47, 99, 53, 59, 99, 64, 67]\n    assert candidate([40, 97, 72, 48, 55, 91, 83, 82, 91, 63], 11) == [40, 48, 55, 63, 72, 82, 83, 91, 91, 97]\n    assert candidate([41, 10, 22, 43, 17, 38, 67, 7, 68, 70], 7) == [38, 7, 10, 41, 17, 43, 67, 22, 68, 70]\n    assert candidate([41, 25, 83, 44, 39, 37, 67, 33, 58, 5], 1) == [41, 25, 83, 44, 39, 37, 67, 33, 58, 5]\n    assert candidate([41, 87, 34, 74, 77, 62, 18, 28, 5, 8], 1) == [41, 87, 34, 74, 77, 62, 18, 28, 5, 8]\n    assert candidate([45, 1, 66, 44, 45, 74, 75, 96, 31, 47], 2) == [44, 1, 66, 45, 45, 74, 75, 96, 31, 47]\n    assert candidate([45, 64, 77, 71, 73, 6, 24, 55, 82, 25], 3) == [45, 64, 77, 71, 73, 6, 24, 55, 82, 25]\n    assert candidate([46, 72, 1, 33, 1, 51, 78, 96, 44, 20], 1) == [46, 72, 1, 33, 1, 51, 78, 96, 44, 20]\n    assert candidate([47, 32, 72, 79, 16, 69, 85, 70, 87, 73], 2) == [47, 32, 69, 79, 16, 70, 85, 72, 87, 73]\n    assert candidate([47, 94, 72, 49, 50, 62, 17, 22, 85, 86], 7) == [47, 94, 72, 49, 50, 62, 17, 22, 85, 86]\n    assert candidate([48, 39, 45, 58, 26, 57, 38, 63, 82, 80], 2) == [48, 38, 45, 57, 26, 58, 39, 63, 80, 82]\n    assert candidate([48, 51, 51, 39, 54, 56, 57, 6, 1, 40], 2) == [48, 51, 51, 39, 54, 56, 57, 6, 1, 40]\n    assert candidate([49, 4, 95, 24, 20, 12, 70, 60, 82, 62], 11) == [49, 4, 95, 12, 20, 24, 60, 62, 82, 70]\n    assert candidate([49, 7, 92, 79, 43, 88, 31, 89, 36, 97], 8) == [31, 7, 88, 79, 36, 89, 43, 92, 49, 97]\n    assert candidate([49, 16, 32, 11, 7, 57, 69, 41, 52, 23], 15) == [7, 11, 16, 23, 32, 41, 49, 52, 57, 69]\n    assert candidate([49, 26, 82, 77, 52, 76, 90, 23, 64, 42], 12) == [42, 23, 49, 52, 64, 76, 77, 26, 82, 90]\n    assert candidate([49, 62, 63, 32, 57, 22, 74, 87, 42, 19], 13) == [19, 22, 32, 42, 49, 57, 62, 63, 74, 87]\n    assert candidate([49, 93, 5, 15, 56, 2, 65, 74, 82, 42], 13) == [42, 49, 2, 5, 56, 15, 65, 74, 82, 93]\n    assert candidate([49, 93, 100, 79, 76, 14, 90, 32, 4, 5], 10) == [49, 90, 93, 76, 79, 4, 100, 32, 5, 14]\n    assert candidate([49, 96, 75, 44, 74, 78, 82, 40, 43, 68], 4) == [49, 96, 74, 40, 75, 78, 82, 43, 44, 68]\n    assert candidate([51, 61, 49, 11, 69, 78, 40, 98, 68, 36], 10) == [36, 40, 49, 11, 51, 61, 68, 98, 69, 78]\n    assert candidate([51, 99, 52, 80, 83, 69, 18, 49, 71, 13], 14) == [49, 99, 51, 69, 71, 80, 13, 52, 83, 18]\n    assert candidate([52, 28, 93, 16, 33, 37, 37, 21, 47, 64], 12) == [16, 21, 93, 28, 33, 37, 37, 47, 52, 64]\n    assert candidate([53, 7, 99, 22, 3, 50, 62, 70, 56, 40], 2) == [53, 7, 99, 22, 3, 50, 62, 70, 56, 40]\n    assert candidate([53, 17, 39, 72, 5, 78, 40, 3, 84, 20], 5) == [53, 17, 39, 72, 3, 78, 40, 5, 84, 20]\n    assert candidate([53, 71, 55, 38, 26, 89, 20, 98, 55, 21], 4) == [53, 71, 55, 38, 26, 89, 20, 98, 55, 21]\n    assert candidate([53, 71, 74, 7, 99, 64, 95, 99, 90, 22], 9) == [53, 64, 71, 7, 90, 74, 95, 99, 99, 22]\n    assert candidate([55, 19, 82, 86, 12, 64, 44, 76, 88, 31], 4) == [55, 19, 82, 86, 12, 64, 44, 76, 88, 31]\n    assert candidate([56, 13, 55, 1, 18, 36, 45, 25, 20, 52], 14) == [1, 13, 18, 20, 25, 36, 45, 52, 55, 56]\n    assert candidate([56, 28, 50, 100, 56, 99, 80, 71, 6, 5], 7) == [50, 28, 56, 99, 56, 100, 80, 71, 5, 6]\n    assert candidate([56, 35, 19, 2, 83, 20, 96, 42, 33, 68], 3) == [56, 33, 19, 2, 83, 20, 96, 42, 35, 68]\n    assert candidate([56, 69, 94, 21, 65, 46, 64, 91, 75, 25], 5) == [56, 64, 91, 21, 65, 46, 69, 94, 75, 25]\n\ndef test_check():\n    check(lexicographicallySmallestArray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3220_countTestedDevices", "language": "py", "prompt": "from typing import List\n\ndef countTestedDevices(batteryPercentages: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices.\nYour task is to test each device i in order from 0 to n - 1, by performing the following test operations:\nIf batteryPercentages[i] is greater than 0:\nIncrement the count of tested devices.\nDecrease the battery percentage of all devices with indices j in the range [i + 1, n - 1] by 1, ensuring their battery percentage never goes below 0, i.e, batteryPercentages[j] = max(0, batteryPercentages[j] - 1).\nMove to the next device.\nOtherwise, move to the next device without performing any test.\nReturn an integer denoting the number of devices that will be tested after performing the test operations in order.\nExample 1:\nInput: batteryPercentages = [1,1,2,1,3]\nOutput: 3\nExplanation: Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].\nAt device 1, batteryPercentages[1] == 0, so we move to the next device without testing.\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].\nAt device 3, batteryPercentages[3] == 0, so we move to the next device without testing.\nAt device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.\nSo, the answer is 3.\nExample 2:\nInput: batteryPercentages = [0,1,2]\nOutput: 2\nExplanation: Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] == 0, so we move to the next device without testing.\nAt device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.\nSo, the answer is 2.\nConstraints:\n1 <= n == batteryPercentages.length <= 100 \n0 <= batteryPercentages[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3220_countTestedDevices.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 1, 3]) == 3\n    assert candidate([0, 1, 2]) == 2\n    assert candidate([0]) == 0\n    assert candidate([1]) == 1\n    assert candidate([0, 0]) == 0\n    assert candidate([0, 1]) == 1\n    assert candidate([0, 2]) == 1\n    assert candidate([1, 0]) == 1\n    assert candidate([1, 2]) == 2\n    assert candidate([2, 1]) == 1\n    assert candidate([2, 2]) == 2\n    assert candidate([0, 0, 1]) == 1\n    assert candidate([0, 0, 2]) == 1\n    assert candidate([1, 1, 0]) == 1\n    assert candidate([1, 2, 0]) == 2\n    assert candidate([1, 3, 1]) == 2\n    assert candidate([2, 0, 1]) == 1\n    assert candidate([2, 2, 0]) == 2\n    assert candidate([2, 2, 2]) == 2\n    assert candidate([3, 0, 3]) == 2\n    assert candidate([3, 3, 1]) == 2\n    assert candidate([3, 3, 3]) == 3\n    assert candidate([0, 2, 1, 4]) == 2\n    assert candidate([1, 4, 4, 1]) == 3\n    assert candidate([3, 1, 2, 0]) == 2\n    assert candidate([3, 2, 1, 1]) == 2\n    assert candidate([3, 2, 1, 3]) == 3\n    assert candidate([4, 1, 4, 4]) == 3\n    assert candidate([4, 2, 0, 1]) == 2\n    assert candidate([4, 2, 1, 3]) == 3\n    assert candidate([4, 4, 4, 2]) == 3\n    assert candidate([0, 3, 1, 3, 5]) == 3\n    assert candidate([0, 4, 2, 5, 3]) == 3\n    assert candidate([0, 5, 4, 2, 0]) == 2\n    assert candidate([2, 2, 3, 0, 2]) == 3\n    assert candidate([2, 3, 5, 0, 1]) == 3\n    assert candidate([2, 4, 5, 2, 0]) == 3\n    assert candidate([4, 3, 3, 5, 4]) == 4\n    assert candidate([5, 4, 1, 0, 3]) == 3\n    assert candidate([5, 5, 5, 2, 0]) == 3\n    assert candidate([0, 2, 4, 3, 0, 2]) == 3\n    assert candidate([0, 4, 5, 3, 3, 2]) == 3\n    assert candidate([1, 3, 1, 5, 4, 5]) == 5\n    assert candidate([1, 6, 0, 3, 3, 6]) == 4\n    assert candidate([3, 1, 3, 5, 2, 0]) == 3\n    assert candidate([3, 2, 6, 2, 6, 0]) == 4\n    assert candidate([4, 1, 5, 3, 5, 2]) == 4\n    assert candidate([4, 3, 3, 2, 4, 3]) == 4\n    assert candidate([4, 5, 2, 3, 6, 2]) == 4\n    assert candidate([5, 1, 1, 2, 1, 4]) == 3\n    assert candidate([5, 1, 6, 6, 3, 6]) == 4\n    assert candidate([6, 1, 5, 1, 4, 5]) == 4\n    assert candidate([6, 2, 2, 3, 4, 6]) == 5\n    assert candidate([6, 2, 3, 0, 2, 0]) == 3\n    assert candidate([1, 0, 6, 3, 6, 3, 1]) == 4\n    assert candidate([2, 1, 7, 3, 0, 3, 3]) == 3\n    assert candidate([2, 3, 7, 0, 6, 4, 4]) == 4\n    assert candidate([2, 5, 2, 4, 2, 1, 3]) == 3\n    assert candidate([2, 5, 2, 7, 6, 5, 5]) == 5\n    assert candidate([4, 2, 6, 4, 7, 6, 7]) == 7\n    assert candidate([4, 2, 6, 6, 3, 3, 7]) == 5\n    assert candidate([4, 4, 3, 0, 2, 6, 6]) == 5\n    assert candidate([5, 2, 2, 3, 4, 6, 6]) == 6\n    assert candidate([5, 4, 6, 0, 7, 2, 2]) == 4\n    assert candidate([6, 6, 7, 0, 1, 7, 2]) == 4\n    assert candidate([0, 5, 1, 4, 5, 0, 4, 8]) == 5\n    assert candidate([1, 0, 7, 0, 7, 4, 5, 7]) == 6\n    assert candidate([2, 5, 3, 4, 4, 8, 6, 5]) == 6\n    assert candidate([2, 6, 3, 4, 5, 6, 2, 6]) == 6\n    assert candidate([4, 5, 2, 1, 3, 7, 3, 5]) == 5\n    assert candidate([6, 5, 4, 8, 6, 8, 3, 6]) == 6\n    assert candidate([7, 4, 0, 8, 5, 5, 2, 0]) == 5\n    assert candidate([7, 5, 3, 2, 3, 5, 8, 6]) == 6\n    assert candidate([8, 0, 4, 3, 2, 6, 6, 1]) == 5\n    assert candidate([8, 3, 0, 1, 0, 8, 6, 8]) == 5\n    assert candidate([8, 6, 7, 1, 0, 1, 3, 7]) == 4\n    assert candidate([0, 6, 8, 8, 0, 1, 2, 3, 4]) == 4\n    assert candidate([2, 7, 9, 7, 2, 9, 0, 3, 9]) == 6\n    assert candidate([8, 1, 9, 8, 5, 3, 4, 4, 1]) == 4\n    assert candidate([8, 4, 0, 1, 1, 6, 5, 3, 5]) == 5\n    assert candidate([8, 4, 1, 5, 8, 5, 8, 7, 9]) == 8\n    assert candidate([8, 4, 9, 8, 9, 0, 0, 4, 9]) == 6\n    assert candidate([8, 9, 4, 4, 1, 9, 8, 9, 1]) == 7\n    assert candidate([2, 5, 8, 9, 1, 5, 10, 9, 6, 3]) == 7\n    assert candidate([2, 6, 5, 4, 1, 5, 3, 3, 3, 9]) == 6\n    assert candidate([7, 7, 7, 3, 6, 6, 4, 3, 5, 10]) == 6\n    assert candidate([9, 3, 10, 1, 8, 2, 4, 3, 3, 0]) == 4\n    assert candidate([10, 10, 2, 0, 2, 7, 6, 7, 10, 4]) == 6\n    assert candidate([0, 8, 7, 9, 4, 10, 4, 3, 7, 11, 7]) == 7\n    assert candidate([1, 2, 3, 5, 6, 11, 3, 2, 11, 0, 8]) == 8\n    assert candidate([5, 10, 4, 10, 10, 6, 8, 1, 8, 10, 3]) == 9\n    assert candidate([7, 10, 2, 7, 11, 8, 11, 4, 1, 4, 5]) == 6\n    assert candidate([7, 11, 0, 4, 1, 10, 5, 3, 2, 0, 2]) == 5\n    assert candidate([8, 8, 1, 8, 6, 2, 5, 2, 8, 5, 6]) == 6\n    assert candidate([8, 9, 10, 10, 1, 5, 4, 6, 7, 2, 4]) == 7\n    assert candidate([9, 9, 2, 3, 2, 2, 9, 6, 11, 1, 10]) == 7\n    assert candidate([10, 0, 6, 2, 6, 6, 11, 1, 8, 10, 5]) == 7\n    assert candidate([1, 4, 7, 2, 12, 8, 1, 11, 5, 10, 2, 3]) == 7\n    assert candidate([2, 5, 4, 4, 9, 6, 10, 0, 11, 8, 2, 10]) == 9\n    assert candidate([4, 11, 9, 8, 9, 11, 11, 5, 11, 6, 12, 11]) == 10\n\ndef test_check():\n    check(countTestedDevices)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3221_findPeaks", "language": "py", "prompt": "from typing import List\n\ndef findPeaks(mountain: List[int]) -> List[int]:\n    \"\"\"You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.\nReturn an array that consists of indices of peaks in the given array in any order.\nNotes:\nA peak is defined as an element that is strictly greater than its neighboring elements.\nThe first and last elements of the array are not a peak.\nExample 1:\nInput: mountain = [2,4,4]\nOutput: []\nExplanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\nmountain[1] also can not be a peak because it is not strictly greater than mountain[2].\nSo the answer is [].\nExample 2:\nInput: mountain = [1,4,3,8,5]\nOutput: [1,3]\nExplanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\nmountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\nBut mountain [1] and mountain[3] are strictly greater than their neighboring elements.\nSo the answer is [1,3].\nConstraints:\n3 <= mountain.length <= 100\n1 <= mountain[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3221_findPeaks.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 4, 4]) == []\n    assert candidate([1, 4, 3, 8, 5]) == [1, 3]\n    assert candidate([1, 1, 1]) == []\n    assert candidate([1, 1, 3]) == []\n    assert candidate([1, 1, 5]) == []\n    assert candidate([1, 2, 5]) == []\n    assert candidate([1, 4, 1]) == [1]\n    assert candidate([1, 4, 3]) == [1]\n    assert candidate([1, 5, 5]) == []\n    assert candidate([1, 6, 4]) == [1]\n    assert candidate([2, 1, 1]) == []\n    assert candidate([2, 1, 2]) == []\n    assert candidate([2, 2, 3]) == []\n    assert candidate([2, 2, 5]) == []\n    assert candidate([2, 3, 2]) == [1]\n    assert candidate([2, 3, 6]) == []\n    assert candidate([2, 4, 3]) == [1]\n    assert candidate([2, 4, 5]) == []\n    assert candidate([2, 6, 4]) == [1]\n    assert candidate([3, 3, 3]) == []\n    assert candidate([3, 3, 5]) == []\n    assert candidate([3, 4, 6]) == []\n    assert candidate([3, 5, 1]) == [1]\n    assert candidate([3, 5, 3]) == [1]\n    assert candidate([3, 5, 4]) == [1]\n    assert candidate([3, 5, 6]) == []\n    assert candidate([4, 2, 1]) == []\n    assert candidate([4, 2, 2]) == []\n    assert candidate([4, 2, 4]) == []\n    assert candidate([4, 2, 6]) == []\n    assert candidate([4, 4, 1]) == []\n    assert candidate([4, 4, 2]) == []\n    assert candidate([4, 4, 5]) == []\n    assert candidate([4, 5, 4]) == [1]\n    assert candidate([4, 6, 1]) == [1]\n    assert candidate([4, 6, 6]) == []\n    assert candidate([5, 1, 2]) == []\n    assert candidate([5, 2, 1]) == []\n    assert candidate([5, 2, 2]) == []\n    assert candidate([5, 2, 4]) == []\n    assert candidate([5, 3, 1]) == []\n    assert candidate([5, 5, 1]) == []\n    assert candidate([5, 5, 2]) == []\n    assert candidate([5, 5, 6]) == []\n    assert candidate([5, 6, 1]) == [1]\n    assert candidate([5, 6, 4]) == [1]\n    assert candidate([6, 1, 1]) == []\n    assert candidate([6, 1, 2]) == []\n    assert candidate([6, 1, 5]) == []\n    assert candidate([6, 2, 2]) == []\n    assert candidate([6, 2, 5]) == []\n    assert candidate([6, 3, 2]) == []\n    assert candidate([6, 3, 3]) == []\n    assert candidate([6, 3, 6]) == []\n    assert candidate([6, 4, 3]) == []\n    assert candidate([6, 5, 2]) == []\n    assert candidate([6, 5, 4]) == []\n    assert candidate([6, 6, 4]) == []\n    assert candidate([1, 1, 1, 4]) == []\n    assert candidate([1, 1, 7, 7]) == []\n    assert candidate([1, 3, 6, 5]) == [2]\n    assert candidate([1, 4, 7, 8]) == []\n    assert candidate([1, 6, 6, 6]) == []\n    assert candidate([1, 8, 1, 8]) == [1]\n    assert candidate([2, 2, 1, 2]) == []\n    assert candidate([2, 3, 7, 6]) == [2]\n    assert candidate([2, 5, 4, 5]) == [1]\n    assert candidate([2, 7, 1, 2]) == [1]\n    assert candidate([2, 7, 2, 6]) == [1]\n    assert candidate([2, 7, 5, 3]) == [1]\n    assert candidate([2, 7, 7, 6]) == []\n    assert candidate([3, 1, 2, 5]) == []\n    assert candidate([3, 3, 4, 2]) == [2]\n    assert candidate([3, 3, 7, 8]) == []\n    assert candidate([3, 4, 2, 4]) == [1]\n    assert candidate([3, 4, 5, 4]) == [2]\n    assert candidate([3, 4, 7, 6]) == [2]\n    assert candidate([3, 5, 5, 3]) == []\n    assert candidate([3, 6, 4, 7]) == [1]\n    assert candidate([3, 8, 5, 5]) == [1]\n    assert candidate([4, 2, 4, 3]) == [2]\n    assert candidate([4, 2, 6, 8]) == []\n    assert candidate([4, 3, 3, 8]) == []\n    assert candidate([4, 4, 8, 7]) == [2]\n    assert candidate([4, 5, 1, 1]) == [1]\n    assert candidate([4, 6, 1, 7]) == [1]\n    assert candidate([4, 6, 2, 1]) == [1]\n    assert candidate([4, 6, 2, 2]) == [1]\n    assert candidate([5, 1, 7, 6]) == [2]\n    assert candidate([5, 3, 2, 2]) == []\n    assert candidate([5, 3, 6, 3]) == [2]\n    assert candidate([5, 3, 8, 3]) == [2]\n    assert candidate([5, 4, 4, 6]) == []\n    assert candidate([5, 4, 4, 8]) == []\n    assert candidate([5, 5, 1, 7]) == []\n    assert candidate([5, 5, 8, 2]) == [2]\n    assert candidate([5, 6, 7, 4]) == [2]\n    assert candidate([5, 7, 4, 3]) == [1]\n    assert candidate([5, 8, 7, 8]) == [1]\n    assert candidate([6, 2, 8, 6]) == [2]\n\ndef test_check():\n    check(findPeaks)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3223_countCompleteSubstrings", "language": "py", "prompt": "def countCompleteSubstrings(word: str, k: int) -> int:\n    \"\"\"You are given a string word and an integer k.\nA substring s of word is complete if:\nEach character in s occurs exactly k times.\nThe difference between two adjacent characters is at most 2. That is, for any two adjacent characters c1 and c2 in s, the absolute difference in their positions in the alphabet is at most 2.\nReturn the number of complete substrings of word.\nA substring is a non-empty contiguous sequence of characters in a string.\nExample 1:\nInput: word = \"igigee\", k = 2\nOutput: 3\nExplanation: The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: igigee, igigee, igigee.\nExample 2:\nInput: word = \"aaabbbccc\", k = 3\nOutput: 6\nExplanation: The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc.\nConstraints:\n1 <= word.length <= 105\nword consists only of lowercase English letters.\n1 <= k <= word.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3223_countCompleteSubstrings.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(igigee, 2) == 3\n    assert candidate(aaabbbccc, 3) == 6\n    assert candidate(a, 1) == 1\n    assert candidate(b, 1) == 1\n    assert candidate(c, 1) == 1\n    assert candidate(aa, 2) == 1\n    assert candidate(ab, 2) == 0\n    assert candidate(ac, 2) == 0\n    assert candidate(ba, 1) == 3\n    assert candidate(bb, 2) == 1\n    assert candidate(bc, 1) == 3\n    assert candidate(ca, 1) == 3\n    assert candidate(cb, 1) == 3\n    assert candidate(cc, 2) == 1\n    assert candidate(aaa, 1) == 3\n    assert candidate(aab, 3) == 0\n    assert candidate(aac, 2) == 1\n    assert candidate(aba, 3) == 0\n    assert candidate(abb, 1) == 4\n    assert candidate(abc, 3) == 0\n    assert candidate(aca, 1) == 5\n    assert candidate(acb, 2) == 0\n    assert candidate(acc, 3) == 0\n    assert candidate(baa, 2) == 1\n    assert candidate(bab, 3) == 0\n    assert candidate(bac, 2) == 0\n    assert candidate(bba, 1) == 4\n    assert candidate(bbb, 2) == 2\n    assert candidate(bbc, 2) == 1\n    assert candidate(bca, 2) == 0\n    assert candidate(bcb, 1) == 5\n    assert candidate(bcc, 2) == 1\n    assert candidate(caa, 1) == 4\n    assert candidate(cab, 2) == 0\n    assert candidate(cac, 2) == 0\n    assert candidate(cba, 1) == 6\n    assert candidate(cbb, 3) == 0\n    assert candidate(cbc, 2) == 0\n    assert candidate(cca, 2) == 1\n    assert candidate(ccb, 1) == 4\n    assert candidate(ccc, 2) == 2\n    assert candidate(aaaa, 4) == 1\n    assert candidate(aaab, 4) == 0\n    assert candidate(aaac, 4) == 0\n    assert candidate(aaba, 3) == 0\n    assert candidate(aabb, 1) == 5\n    assert candidate(aabc, 3) == 0\n    assert candidate(aaca, 3) == 0\n    assert candidate(aacb, 2) == 1\n    assert candidate(aacc, 4) == 0\n    assert candidate(abaa, 3) == 0\n    assert candidate(abab, 1) == 7\n    assert candidate(abac, 4) == 0\n    assert candidate(abba, 3) == 0\n    assert candidate(abbb, 4) == 0\n    assert candidate(abbc, 2) == 1\n    assert candidate(abca, 1) == 9\n    assert candidate(abcb, 1) == 8\n    assert candidate(abcc, 4) == 0\n    assert candidate(acaa, 1) == 6\n    assert candidate(acab, 2) == 0\n    assert candidate(acac, 1) == 7\n    assert candidate(acba, 2) == 0\n    assert candidate(acbb, 1) == 7\n    assert candidate(acbc, 2) == 0\n    assert candidate(acca, 1) == 6\n    assert candidate(accb, 3) == 0\n    assert candidate(accc, 4) == 0\n    assert candidate(baaa, 2) == 2\n    assert candidate(baab, 1) == 6\n    assert candidate(baac, 1) == 6\n    assert candidate(baba, 1) == 7\n    assert candidate(babb, 1) == 6\n    assert candidate(babc, 3) == 0\n    assert candidate(baca, 4) == 0\n    assert candidate(bacb, 3) == 0\n    assert candidate(bacc, 1) == 7\n    assert candidate(bbaa, 2) == 3\n    assert candidate(bbab, 3) == 0\n    assert candidate(bbac, 4) == 0\n    assert candidate(bbba, 4) == 0\n    assert candidate(bbbb, 1) == 4\n    assert candidate(bbbc, 3) == 1\n    assert candidate(bbca, 4) == 0\n    assert candidate(bbcb, 1) == 6\n    assert candidate(bbcc, 4) == 0\n    assert candidate(bcaa, 2) == 1\n    assert candidate(bcab, 3) == 0\n    assert candidate(bcac, 3) == 0\n    assert candidate(bcba, 1) == 8\n    assert candidate(bcbb, 1) == 6\n    assert candidate(bcbc, 2) == 1\n    assert candidate(bcca, 4) == 0\n    assert candidate(bccb, 3) == 0\n    assert candidate(bccc, 4) == 0\n    assert candidate(caaa, 3) == 1\n    assert candidate(caab, 1) == 6\n    assert candidate(caac, 4) == 0\n    assert candidate(caba, 4) == 0\n    assert candidate(cabb, 3) == 0\n\ndef test_check():\n    check(countCompleteSubstrings)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3224_numberOfSequence", "language": "py", "prompt": "from typing import List\n\ndef numberOfSequence(n: int, sick: List[int]) -> int:\n    \"\"\"You are given an integer n and a 0-indexed integer array sick which is sorted in increasing order.\nThere are n children standing in a queue with positions 0 to n - 1 assigned to them. The array sick contains the positions of the children who are infected with an infectious disease. An infected child at position i can spread the disease to either of its immediate neighboring children at positions i - 1 and i + 1 if they exist and are currently not infected. At most one child who was previously not infected can get infected with the disease in one second.\nIt can be shown that after a finite number of seconds, all the children in the queue will get infected with the disease. An infection sequence is the sequential order of positions in which all of the non-infected children get infected with the disease. Return the total number of possible infection sequences.\nSince the answer may be large, return it modulo 109 + 7.\nNote that an infection sequence does not contain positions of children who were already infected with the disease in the beginning.\nExample 1:\nInput: n = 5, sick = [0,4]\nOutput: 4\nExplanation: Children at positions 1, 2, and 3 are not infected in the beginning. There are 4 possible infection sequences:\n- The children at positions 1 and 3 can get infected since their positions are adjacent to the infected children 0 and 4. The child at position 1 gets infected first.\nNow, the child at position 2 is adjacent to the child at position 1 who is infected and the child at position 3 is adjacent to the child at position 4 who is infected, hence either of them can get infected. The child at position 2 gets infected.\nFinally, the child at position 3 gets infected because it is adjacent to children at positions 2 and 4 who are infected. The infection sequence is [1,2,3].\n- The children at positions 1 and 3 can get infected because their positions are adjacent to the infected children 0 and 4. The child at position 1 gets infected first.\nNow, the child at position 2 is adjacent to the child at position 1 who is infected and the child at position 3 is adjacent to the child at position 4 who is infected, hence either of them can get infected. The child at position 3 gets infected.\nFinally, the child at position 2 gets infected because it is adjacent to children at positions 1 and 3 who are infected. The infection sequence is [1,3,2].\n- The infection sequence is [3,1,2]. The order of infection of disease in the children can be seen as: [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4].\n- The infection sequence is [3,2,1]. The order of infection of disease in the children can be seen as: [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4].\nExample 2:\nInput: n = 4, sick = [1]\nOutput: 3\nExplanation: Children at positions 0, 2, and 3 are not infected in the beginning. There are 3 possible infection sequences:\n- The infection sequence is [0,2,3]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n- The infection sequence is [2,0,3]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n- The infection sequence is [2,3,0]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\nConstraints:\n2 <= n <= 105\n1 <= sick.length <= n - 1\n0 <= sick[i] <= n - 1\nsick is sorted in increasing order.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3224_numberOfSequence.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(5, [0, 4]) == 4\n    assert candidate(4, [1]) == 3\n    assert candidate(2, [0]) == 1\n    assert candidate(5, [0]) == 1\n    assert candidate(100, [0]) == 1\n    assert candidate(2, [1]) == 1\n    assert candidate(5, [1]) == 4\n    assert candidate(5, [2]) == 6\n    assert candidate(5, [3]) == 4\n    assert candidate(5, [4]) == 1\n    assert candidate(5, [0, 1]) == 1\n    assert candidate(3, [0, 2]) == 1\n    assert candidate(5, [0, 2]) == 3\n    assert candidate(5, [0, 3]) == 6\n    assert candidate(5, [1, 2]) == 3\n    assert candidate(5, [1, 3]) == 6\n    assert candidate(5, [1, 4]) == 6\n    assert candidate(5, [2, 3]) == 3\n    assert candidate(5, [2, 4]) == 3\n    assert candidate(5, [3, 4]) == 1\n    assert candidate(5, [0, 1, 2]) == 1\n    assert candidate(5, [0, 1, 3]) == 2\n    assert candidate(5, [0, 1, 4]) == 2\n    assert candidate(5, [0, 2, 3]) == 2\n    assert candidate(5, [0, 2, 4]) == 2\n    assert candidate(5, [0, 3, 4]) == 2\n    assert candidate(5, [1, 2, 3]) == 2\n    assert candidate(5, [1, 2, 4]) == 2\n    assert candidate(5, [1, 3, 4]) == 2\n    assert candidate(5, [2, 3, 4]) == 1\n    assert candidate(5, [0, 1, 2, 3]) == 1\n    assert candidate(10, [0, 1, 2, 3]) == 1\n    assert candidate(5, [0, 1, 2, 4]) == 1\n    assert candidate(10, [0, 1, 2, 4]) == 6\n    assert candidate(10, [0, 1, 2, 5]) == 30\n    assert candidate(10, [0, 1, 2, 8]) == 96\n    assert candidate(10, [0, 1, 2, 9]) == 32\n    assert candidate(5, [0, 1, 3, 4]) == 1\n    assert candidate(10, [0, 1, 3, 5]) == 30\n    assert candidate(10, [0, 1, 3, 6]) == 120\n    assert candidate(10, [0, 1, 3, 7]) == 240\n    assert candidate(10, [0, 1, 3, 8]) == 240\n    assert candidate(10, [0, 1, 4, 5]) == 30\n    assert candidate(10, [0, 1, 4, 6]) == 120\n    assert candidate(10, [0, 1, 4, 7]) == 360\n    assert candidate(10, [0, 1, 4, 8]) == 480\n    assert candidate(10, [0, 1, 4, 9]) == 240\n    assert candidate(10, [0, 1, 5, 6]) == 80\n    assert candidate(10, [0, 1, 5, 7]) == 240\n    assert candidate(10, [0, 1, 5, 8]) == 480\n    assert candidate(10, [0, 1, 5, 9]) == 320\n    assert candidate(10, [0, 1, 6, 7]) == 120\n    assert candidate(10, [0, 1, 6, 8]) == 240\n    assert candidate(10, [0, 1, 6, 9]) == 240\n    assert candidate(10, [0, 1, 7, 8]) == 96\n    assert candidate(10, [0, 1, 7, 9]) == 96\n    assert candidate(10, [0, 1, 8, 9]) == 32\n    assert candidate(5, [0, 2, 3, 4]) == 1\n    assert candidate(10, [0, 2, 3, 4]) == 6\n    assert candidate(10, [0, 2, 3, 5]) == 30\n    assert candidate(10, [0, 2, 3, 6]) == 120\n    assert candidate(10, [0, 2, 3, 7]) == 240\n    assert candidate(10, [0, 2, 3, 8]) == 240\n    assert candidate(10, [0, 2, 3, 9]) == 96\n    assert candidate(10, [0, 2, 4, 5]) == 30\n    assert candidate(10, [0, 2, 4, 6]) == 120\n    assert candidate(10, [0, 2, 4, 7]) == 360\n    assert candidate(10, [0, 2, 4, 8]) == 480\n    assert candidate(10, [0, 2, 4, 9]) == 240\n    assert candidate(10, [0, 2, 5, 6]) == 120\n    assert candidate(10, [0, 2, 5, 7]) == 360\n    assert candidate(10, [0, 2, 5, 8]) == 720\n    assert candidate(10, [0, 2, 5, 9]) == 480\n    assert candidate(10, [0, 2, 6, 7]) == 240\n    assert candidate(10, [0, 2, 6, 8]) == 480\n    assert candidate(10, [0, 2, 7, 8]) == 240\n    assert candidate(10, [0, 2, 7, 9]) == 240\n    assert candidate(10, [0, 2, 8, 9]) == 96\n    assert candidate(10, [0, 3, 4, 5]) == 30\n    assert candidate(10, [0, 3, 4, 7]) == 360\n    assert candidate(10, [0, 3, 4, 8]) == 480\n    assert candidate(10, [0, 3, 4, 9]) == 240\n    assert candidate(10, [0, 3, 5, 6]) == 120\n    assert candidate(10, [0, 3, 5, 7]) == 360\n    assert candidate(10, [0, 3, 6, 7]) == 360\n    assert candidate(10, [0, 3, 6, 8]) == 720\n    assert candidate(10, [0, 3, 6, 9]) == 720\n    assert candidate(10, [0, 3, 7, 8]) == 480\n    assert candidate(10, [0, 3, 7, 9]) == 480\n    assert candidate(10, [0, 3, 8, 9]) == 240\n    assert candidate(10, [0, 4, 5, 6]) == 80\n    assert candidate(10, [0, 4, 5, 7]) == 240\n    assert candidate(10, [0, 4, 5, 9]) == 320\n    assert candidate(10, [0, 4, 6, 7]) == 240\n    assert candidate(10, [0, 4, 6, 8]) == 480\n    assert candidate(10, [0, 4, 8, 9]) == 320\n    assert candidate(10, [0, 5, 6, 7]) == 120\n    assert candidate(10, [0, 5, 6, 9]) == 240\n    assert candidate(10, [0, 5, 7, 8]) == 240\n    assert candidate(10, [0, 5, 7, 9]) == 240\n\ndef test_check():\n    check(numberOfSequence)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3225_maxSubarrayLength", "language": "py", "prompt": "from typing import List\n\ndef maxSubarrayLength(nums: List[int], k: int) -> int:\n    \"\"\"You are given an integer array nums and an integer k.\nThe frequency of an element x is the number of times it occurs in an array.\nAn array is called good if the frequency of each element in this array is less than or equal to k.\nReturn the length of the longest good subarray of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [1,2,3,1,2,3,1,2], k = 2\nOutput: 6\nExplanation: The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\nIt can be shown that there are no good subarrays with length more than 6.\nExample 2:\nInput: nums = [1,2,1,2,1,2,1,2], k = 1\nOutput: 2\nExplanation: The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\nIt can be shown that there are no good subarrays with length more than 2.\nExample 3:\nInput: nums = [5,5,5,5,5,5,5], k = 4\nOutput: 4\nExplanation: The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\nIt can be shown that there are no good subarrays with length more than 4.\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= k <= nums.length\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3225_maxSubarrayLength.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 1, 2, 3, 1, 2], 2) == 6\n    assert candidate([1, 2, 1, 2, 1, 2, 1, 2], 1) == 2\n    assert candidate([5, 5, 5, 5, 5, 5, 5], 4) == 4\n    assert candidate([1], 1) == 1\n    assert candidate([2], 1) == 1\n    assert candidate([3], 1) == 1\n    assert candidate([4], 1) == 1\n    assert candidate([5], 1) == 1\n    assert candidate([6], 1) == 1\n    assert candidate([7], 1) == 1\n    assert candidate([8], 1) == 1\n    assert candidate([9], 1) == 1\n    assert candidate([10], 1) == 1\n    assert candidate([1, 11], 2) == 2\n    assert candidate([2, 11], 1) == 2\n    assert candidate([3, 5], 2) == 2\n    assert candidate([4, 6], 2) == 2\n    assert candidate([5, 8], 2) == 2\n    assert candidate([6, 7], 1) == 2\n    assert candidate([7, 9], 2) == 2\n    assert candidate([8, 8], 1) == 1\n    assert candidate([9, 8], 1) == 2\n    assert candidate([10, 5], 1) == 2\n    assert candidate([1, 1, 2], 2) == 3\n    assert candidate([1, 1, 5], 2) == 3\n    assert candidate([1, 2, 3], 1) == 3\n    assert candidate([1, 2, 4], 1) == 3\n    assert candidate([1, 3, 3], 2) == 3\n    assert candidate([1, 3, 5], 1) == 3\n    assert candidate([1, 4, 1], 1) == 2\n    assert candidate([1, 4, 1], 2) == 3\n    assert candidate([1, 5, 1], 2) == 3\n    assert candidate([1, 5, 5], 2) == 3\n    assert candidate([1, 6, 4], 1) == 3\n    assert candidate([1, 6, 4], 2) == 3\n    assert candidate([1, 7, 1], 1) == 2\n    assert candidate([1, 7, 5], 2) == 3\n    assert candidate([1, 8, 2], 1) == 3\n    assert candidate([1, 8, 4], 1) == 3\n    assert candidate([1, 9, 2], 1) == 3\n    assert candidate([1, 9, 2], 2) == 3\n    assert candidate([1, 10, 2], 1) == 3\n    assert candidate([2, 1, 2], 2) == 3\n    assert candidate([2, 2, 3], 1) == 2\n    assert candidate([2, 2, 4], 2) == 3\n    assert candidate([2, 3, 3], 2) == 3\n    assert candidate([2, 3, 4], 2) == 3\n    assert candidate([2, 4, 1], 2) == 3\n    assert candidate([2, 4, 2], 2) == 3\n    assert candidate([2, 5, 2], 1) == 2\n    assert candidate([2, 5, 4], 1) == 3\n    assert candidate([2, 6, 2], 1) == 2\n    assert candidate([2, 6, 3], 2) == 3\n    assert candidate([2, 7, 1], 1) == 3\n    assert candidate([2, 7, 2], 2) == 3\n    assert candidate([2, 8, 2], 2) == 3\n    assert candidate([2, 8, 5], 2) == 3\n    assert candidate([2, 9, 2], 1) == 2\n    assert candidate([2, 9, 5], 1) == 3\n    assert candidate([2, 10, 1], 2) == 3\n    assert candidate([2, 10, 3], 2) == 3\n    assert candidate([3, 1, 1], 1) == 2\n    assert candidate([3, 1, 4], 1) == 3\n    assert candidate([3, 2, 3], 1) == 2\n    assert candidate([3, 2, 4], 1) == 3\n    assert candidate([3, 3, 1], 2) == 3\n    assert candidate([3, 3, 3], 2) == 2\n    assert candidate([3, 4, 1], 2) == 3\n    assert candidate([3, 4, 2], 2) == 3\n    assert candidate([3, 5, 4], 2) == 3\n    assert candidate([3, 5, 5], 1) == 2\n    assert candidate([3, 6, 2], 2) == 3\n    assert candidate([3, 6, 4], 2) == 3\n    assert candidate([3, 7, 5], 1) == 3\n    assert candidate([3, 7, 5], 2) == 3\n    assert candidate([3, 8, 1], 2) == 3\n    assert candidate([3, 8, 2], 1) == 3\n    assert candidate([3, 9, 1], 1) == 3\n    assert candidate([3, 9, 4], 2) == 3\n    assert candidate([3, 10, 1], 1) == 3\n    assert candidate([3, 10, 3], 2) == 3\n    assert candidate([4, 1, 2], 1) == 3\n    assert candidate([4, 1, 5], 2) == 3\n    assert candidate([4, 2, 4], 2) == 3\n    assert candidate([4, 2, 5], 2) == 3\n    assert candidate([4, 3, 1], 1) == 3\n    assert candidate([4, 3, 3], 1) == 2\n    assert candidate([4, 4, 3], 2) == 3\n    assert candidate([4, 4, 5], 2) == 3\n    assert candidate([4, 5, 2], 2) == 3\n    assert candidate([4, 5, 4], 2) == 3\n    assert candidate([4, 6, 1], 2) == 3\n    assert candidate([4, 6, 2], 1) == 3\n    assert candidate([4, 7, 1], 1) == 3\n    assert candidate([4, 7, 4], 2) == 3\n    assert candidate([4, 8, 2], 2) == 3\n    assert candidate([4, 8, 4], 2) == 3\n    assert candidate([4, 9, 2], 1) == 3\n    assert candidate([4, 9, 3], 2) == 3\n    assert candidate([4, 10, 2], 1) == 3\n\ndef test_check():\n    check(maxSubarrayLength)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3226_numberGame", "language": "py", "prompt": "from typing import List\n\ndef numberGame(nums: List[int]) -> List[int]:\n    \"\"\"You are given a 0-indexed integer array nums of even length and there is also an empty array arr. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\nEvery round, first Alice will remove the minimum element from nums, and then Bob does the same.\nNow, first Bob will append the removed element in the array arr, and then Alice does the same.\nThe game continues until nums becomes empty.\nReturn the resulting array arr.\nExample 1:\nInput: nums = [5,4,2,3]\nOutput: [3,2,5,4]\nExplanation: In round one, first Alice removes 2 and then Bob removes 3. Then in arr firstly Bob appends 3 and then Alice appends 2. So arr = [3,2].\nAt the begining of round two, nums = [5,4]. Now, first Alice removes 4 and then Bob removes 5. Then both append in arr which becomes [3,2,5,4].\nExample 2:\nInput: nums = [2,5]\nOutput: [5,2]\nExplanation: In round one, first Alice removes 2 and then Bob removes 5. Then in arr firstly Bob appends and then Alice appends. So arr = [5,2].\nConstraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\nnums.length % 2 == 0\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3226_numberGame.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 4, 2, 3]) == [3, 2, 5, 4]\n    assert candidate([2, 5]) == [5, 2]\n    assert candidate([4, 4, 3, 8]) == [4, 3, 8, 4]\n    assert candidate([2, 5, 3, 8]) == [3, 2, 8, 5]\n    assert candidate([2, 7, 9, 6, 4, 6]) == [4, 2, 6, 6, 9, 7]\n    assert candidate([18, 26, 37, 46, 13, 33, 39, 1, 37, 16]) == [13, 1, 18, 16, 33, 26, 37, 37, 46, 39]\n    assert candidate([17, 2, 4, 11, 14, 18]) == [4, 2, 14, 11, 18, 17]\n    assert candidate([20, 30, 12, 3, 11, 17, 32, 12]) == [11, 3, 12, 12, 20, 17, 32, 30]\n    assert candidate([9, 32, 6, 11, 11, 39, 18, 29, 44, 29]) == [9, 6, 11, 11, 29, 18, 32, 29, 44, 39]\n    assert candidate([7, 2, 3, 4]) == [3, 2, 7, 4]\n    assert candidate([8, 7, 1, 3]) == [3, 1, 8, 7]\n    assert candidate([2, 6, 6, 6]) == [6, 2, 6, 6]\n    assert candidate([1, 2]) == [2, 1]\n    assert candidate([4, 1, 1, 3]) == [1, 1, 4, 3]\n    assert candidate([13, 12, 18, 11, 15, 28, 26, 2]) == [11, 2, 13, 12, 18, 15, 28, 26]\n    assert candidate([14, 30, 29, 3, 23, 21, 26, 23]) == [14, 3, 23, 21, 26, 23, 30, 29]\n    assert candidate([1, 1]) == [1, 1]\n    assert candidate([2, 1]) == [2, 1]\n    assert candidate([12, 1, 28, 23, 2, 31, 11, 26]) == [2, 1, 12, 11, 26, 23, 31, 28]\n    assert candidate([21, 11, 37, 1, 40, 50, 49, 45, 28, 47]) == [11, 1, 28, 21, 40, 37, 47, 45, 50, 49]\n    assert candidate([25, 22, 31, 7, 30, 9, 9, 18]) == [9, 7, 18, 9, 25, 22, 31, 30]\n    assert candidate([2, 4, 10, 9, 16, 9]) == [4, 2, 9, 9, 16, 10]\n    assert candidate([5, 2, 3, 5]) == [3, 2, 5, 5]\n    assert candidate([6, 44, 37, 6, 28, 44, 30, 36, 25, 24]) == [6, 6, 25, 24, 30, 28, 37, 36, 44, 44]\n    assert candidate([17, 10, 6, 14, 10, 18]) == [10, 6, 14, 10, 18, 17]\n    assert candidate([40, 24, 23, 29, 37, 26, 39, 34, 39, 23]) == [23, 23, 26, 24, 34, 29, 39, 37, 40, 39]\n    assert candidate([2, 2]) == [2, 2]\n    assert candidate([33, 5, 31, 43, 48, 18, 31, 11, 19, 8]) == [8, 5, 18, 11, 31, 19, 33, 31, 48, 43]\n    assert candidate([37, 46, 42, 19, 10, 8, 43, 10, 40, 13]) == [10, 8, 13, 10, 37, 19, 42, 40, 46, 43]\n    assert candidate([2, 19, 8, 22, 1, 27, 29, 7]) == [2, 1, 8, 7, 22, 19, 29, 27]\n    assert candidate([2, 3, 2, 3]) == [2, 2, 3, 3]\n    assert candidate([1, 4, 7, 14, 8, 14]) == [4, 1, 8, 7, 14, 14]\n    assert candidate([28, 47, 36, 34, 19, 7, 40, 46, 33, 43]) == [19, 7, 33, 28, 36, 34, 43, 40, 47, 46]\n    assert candidate([29, 41, 20, 22, 16, 27, 22, 44, 10, 47]) == [16, 10, 22, 20, 27, 22, 41, 29, 47, 44]\n    assert candidate([14, 6, 40, 19, 47, 46, 34, 27, 28, 10]) == [10, 6, 19, 14, 28, 27, 40, 34, 47, 46]\n    assert candidate([42, 43, 50, 43, 36, 26, 16, 12, 3, 2]) == [3, 2, 16, 12, 36, 26, 43, 42, 50, 43]\n    assert candidate([1, 7, 24, 24, 23, 32, 28, 2]) == [2, 1, 23, 7, 24, 24, 32, 28]\n    assert candidate([20, 19, 16, 16, 19, 29, 21, 5]) == [16, 5, 19, 16, 20, 19, 29, 21]\n    assert candidate([20, 9, 29, 29, 17, 39, 27, 44, 1, 8]) == [8, 1, 17, 9, 27, 20, 29, 29, 44, 39]\n    assert candidate([14, 11, 12, 18, 9, 15]) == [11, 9, 14, 12, 18, 15]\n    assert candidate([17, 22, 2, 35, 15, 19, 25, 5, 33, 44]) == [5, 2, 17, 15, 22, 19, 33, 25, 44, 35]\n    assert candidate([22, 3, 26, 15, 1, 5, 14, 28]) == [3, 1, 14, 5, 22, 15, 28, 26]\n    assert candidate([5, 24, 3, 2, 17, 9, 2, 4]) == [2, 2, 4, 3, 9, 5, 24, 17]\n    assert candidate([2, 6, 4, 7]) == [4, 2, 7, 6]\n    assert candidate([1, 33, 29, 21, 25, 14, 26, 35, 34, 30]) == [14, 1, 25, 21, 29, 26, 33, 30, 35, 34]\n    assert candidate([50, 25, 42, 41, 16, 23, 47, 31, 23, 16]) == [16, 16, 23, 23, 31, 25, 42, 41, 50, 47]\n    assert candidate([31, 31, 31, 12, 24, 17, 11, 3, 33, 13]) == [11, 3, 13, 12, 24, 17, 31, 31, 33, 31]\n    assert candidate([8, 3, 2, 7]) == [3, 2, 8, 7]\n    assert candidate([8, 2, 8, 6]) == [6, 2, 8, 8]\n    assert candidate([4, 15, 16, 2, 12, 7]) == [4, 2, 12, 7, 16, 15]\n    assert candidate([5, 4, 2, 4]) == [4, 2, 5, 4]\n    assert candidate([17, 13, 7, 12, 19, 15, 6, 22]) == [7, 6, 13, 12, 17, 15, 22, 19]\n    assert candidate([2, 15, 12, 16, 12, 13]) == [12, 2, 13, 12, 16, 15]\n    assert candidate([3, 15, 18, 16, 6, 7]) == [6, 3, 15, 7, 18, 16]\n    assert candidate([4, 7, 11, 6, 11, 8]) == [6, 4, 8, 7, 11, 11]\n    assert candidate([1, 7, 24, 23, 16, 21, 9, 11]) == [7, 1, 11, 9, 21, 16, 24, 23]\n    assert candidate([6, 3, 10, 16, 15, 6]) == [6, 3, 10, 6, 16, 15]\n    assert candidate([17, 9, 1, 29, 30, 5, 31, 26]) == [5, 1, 17, 9, 29, 26, 31, 30]\n    assert candidate([3, 6, 4, 14, 9, 15]) == [4, 3, 9, 6, 15, 14]\n    assert candidate([37, 38, 24, 15, 12, 1, 37, 19, 38, 11]) == [11, 1, 15, 12, 24, 19, 37, 37, 38, 38]\n    assert candidate([17, 3, 8, 12, 6, 9]) == [6, 3, 9, 8, 17, 12]\n    assert candidate([32, 23, 27, 32, 24, 26, 24, 27]) == [24, 23, 26, 24, 27, 27, 32, 32]\n    assert candidate([15, 16, 26, 6, 5, 9, 22, 14]) == [6, 5, 14, 9, 16, 15, 26, 22]\n    assert candidate([14, 21, 13, 10, 2, 16, 14, 30]) == [10, 2, 14, 13, 16, 14, 30, 21]\n    assert candidate([1, 6, 30, 1, 13, 25, 18, 1]) == [1, 1, 6, 1, 18, 13, 30, 25]\n    assert candidate([32, 12, 17, 32, 11, 25, 22, 18, 10, 1]) == [10, 1, 12, 11, 18, 17, 25, 22, 32, 32]\n    assert candidate([2, 8, 5, 6]) == [5, 2, 8, 6]\n    assert candidate([27, 3, 10, 25, 10, 7, 15, 16]) == [7, 3, 10, 10, 16, 15, 27, 25]\n    assert candidate([5, 18, 19, 25, 13, 21, 16, 7]) == [7, 5, 16, 13, 19, 18, 25, 21]\n    assert candidate([8, 6, 6, 8]) == [6, 6, 8, 8]\n    assert candidate([23, 15, 39, 9, 19, 10, 6, 9, 33, 28]) == [9, 6, 10, 9, 19, 15, 28, 23, 39, 33]\n    assert candidate([16, 42, 47, 16, 31, 39, 8, 26, 50, 33]) == [16, 8, 26, 16, 33, 31, 42, 39, 50, 47]\n    assert candidate([4, 31, 9, 2, 4, 28, 28, 12]) == [4, 2, 9, 4, 28, 12, 31, 28]\n    assert candidate([9, 5, 8, 11, 4, 7]) == [5, 4, 8, 7, 11, 9]\n    assert candidate([44, 2, 23, 3, 7, 2, 36, 33, 7, 21]) == [2, 2, 7, 3, 21, 7, 33, 23, 44, 36]\n    assert candidate([19, 9, 4, 7, 29, 22, 50, 28, 2, 40]) == [4, 2, 9, 7, 22, 19, 29, 28, 50, 40]\n    assert candidate([4, 5, 5, 5]) == [5, 4, 5, 5]\n    assert candidate([42, 6, 44, 47, 11, 6, 30, 38, 41, 43]) == [6, 6, 30, 11, 41, 38, 43, 42, 47, 44]\n    assert candidate([28, 4, 47, 1, 7, 35, 10, 10, 5, 8]) == [4, 1, 7, 5, 10, 8, 28, 10, 47, 35]\n    assert candidate([12, 20, 14, 46, 22, 1, 42, 50, 47, 47]) == [12, 1, 20, 14, 42, 22, 47, 46, 50, 47]\n    assert candidate([37, 13, 1, 38, 28, 46, 18, 22, 12, 7]) == [7, 1, 13, 12, 22, 18, 37, 28, 46, 38]\n    assert candidate([36, 41, 5, 33, 5, 30, 33, 31, 6, 45]) == [5, 5, 30, 6, 33, 31, 36, 33, 45, 41]\n    assert candidate([13, 50, 42, 24, 47, 41, 8, 26, 34, 3]) == [8, 3, 24, 13, 34, 26, 42, 41, 50, 47]\n    assert candidate([24, 39, 26, 46, 47, 9, 33, 6, 33, 40]) == [9, 6, 26, 24, 33, 33, 40, 39, 47, 46]\n    assert candidate([14, 13, 17, 14, 12, 15, 6, 32]) == [12, 6, 14, 13, 15, 14, 32, 17]\n    assert candidate([46, 50, 35, 11, 14, 44, 17, 45, 23, 34]) == [14, 11, 23, 17, 35, 34, 45, 44, 50, 46]\n    assert candidate([8, 27, 19, 7, 10, 12, 14, 50, 45, 14]) == [8, 7, 12, 10, 14, 14, 27, 19, 50, 45]\n    assert candidate([9, 8, 5, 7, 10, 9]) == [7, 5, 9, 8, 10, 9]\n    assert candidate([5, 5, 3, 7]) == [5, 3, 7, 5]\n    assert candidate([26, 21, 7, 13, 3, 10, 9, 15]) == [7, 3, 10, 9, 15, 13, 26, 21]\n    assert candidate([8, 5, 8, 3]) == [5, 3, 8, 8]\n    assert candidate([18, 1, 16, 18, 13, 3]) == [3, 1, 16, 13, 18, 18]\n    assert candidate([25, 2, 17, 26, 17, 20, 19, 24]) == [17, 2, 19, 17, 24, 20, 26, 25]\n    assert candidate([24, 1, 18, 25, 29, 17, 9, 3]) == [3, 1, 17, 9, 24, 18, 29, 25]\n    assert candidate([23, 17, 18, 18, 18, 30, 8, 19]) == [17, 8, 18, 18, 19, 18, 30, 23]\n    assert candidate([12, 13, 13, 18, 5, 16]) == [12, 5, 13, 13, 18, 16]\n    assert candidate([19, 4, 11, 7, 24, 12, 24, 14]) == [7, 4, 12, 11, 19, 14, 24, 24]\n    assert candidate([28, 11, 11, 29, 18, 2, 6, 32]) == [6, 2, 11, 11, 28, 18, 32, 29]\n    assert candidate([12, 17, 3, 31, 15, 18, 18, 2]) == [3, 2, 15, 12, 18, 17, 31, 18]\n    assert candidate([24, 6, 21, 30, 29, 8, 23, 18]) == [8, 6, 21, 18, 24, 23, 30, 29]\n\ndef test_check():\n    check(numberGame)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3227_findMissingAndRepeatedValues", "language": "py", "prompt": "from typing import List\n\ndef findMissingAndRepeatedValues(grid: List[List[int]]) -> List[int]:\n    \"\"\"You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.\nReturn a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.\nExample 1:\nInput: grid = [[1,3],[2,2]]\nOutput: [2,4]\nExplanation: Number 2 is repeated and number 4 is missing so the answer is [2,4].\nExample 2:\nInput: grid = [[9,1,7],[8,9,2],[3,4,6]]\nOutput: [9,5]\nExplanation: Number 9 is repeated and number 5 is missing so the answer is [9,5].\nConstraints:\n2 <= n == grid.length == grid[i].length <= 50\n1 <= grid[i][j] <= n * n\nFor all x that 1 <= x <= n * n there is exactly one x that is not equal to any of the grid members.\nFor all x that 1 <= x <= n * n there is exactly one x that is equal to exactly two of the grid members.\nFor all x that 1 <= x <= n * n except two of them there is exatly one pair of i, j that 0 <= i, j <= n - 1 and grid[i][j] == x.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3227_findMissingAndRepeatedValues.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[1, 3], [2, 2]]) == [2, 4]\n    assert candidate([[9, 1, 7], [8, 9, 2], [3, 4, 6]]) == [9, 5]\n    assert candidate([[1, 1], [3, 2]]) == [1, 4]\n    assert candidate([[1, 1], [3, 4]]) == [1, 2]\n    assert candidate([[1, 2], [1, 3]]) == [1, 4]\n    assert candidate([[1, 2], [1, 4]]) == [1, 3]\n    assert candidate([[1, 2], [3, 3]]) == [3, 4]\n    assert candidate([[1, 2], [4, 1]]) == [1, 3]\n    assert candidate([[1, 2], [4, 2]]) == [2, 3]\n    assert candidate([[1, 2], [4, 4]]) == [4, 3]\n    assert candidate([[1, 4], [1, 3]]) == [1, 2]\n    assert candidate([[1, 4], [2, 1]]) == [1, 3]\n    assert candidate([[1, 4], [3, 1]]) == [1, 2]\n    assert candidate([[1, 4], [3, 4]]) == [4, 2]\n    assert candidate([[1, 4], [4, 2]]) == [4, 3]\n    assert candidate([[2, 1], [4, 2]]) == [2, 3]\n    assert candidate([[2, 1], [4, 4]]) == [4, 3]\n    assert candidate([[2, 2], [3, 4]]) == [2, 1]\n    assert candidate([[2, 2], [4, 1]]) == [2, 3]\n    assert candidate([[2, 3], [2, 1]]) == [2, 4]\n    assert candidate([[2, 3], [4, 3]]) == [3, 1]\n    assert candidate([[2, 4], [3, 2]]) == [2, 1]\n    assert candidate([[2, 4], [3, 4]]) == [4, 1]\n    assert candidate([[2, 4], [4, 1]]) == [4, 3]\n    assert candidate([[3, 1], [3, 2]]) == [3, 4]\n    assert candidate([[3, 1], [3, 4]]) == [3, 2]\n    assert candidate([[3, 1], [4, 4]]) == [4, 2]\n    assert candidate([[3, 3], [1, 4]]) == [3, 2]\n    assert candidate([[3, 4], [2, 2]]) == [2, 1]\n    assert candidate([[3, 4], [2, 4]]) == [4, 1]\n    assert candidate([[3, 4], [3, 1]]) == [3, 2]\n    assert candidate([[3, 4], [4, 1]]) == [4, 2]\n    assert candidate([[4, 1], [1, 2]]) == [1, 3]\n    assert candidate([[4, 1], [2, 2]]) == [2, 3]\n    assert candidate([[4, 1], [2, 4]]) == [4, 3]\n    assert candidate([[4, 1], [3, 1]]) == [1, 2]\n    assert candidate([[4, 1], [3, 3]]) == [3, 2]\n    assert candidate([[4, 1], [4, 2]]) == [4, 3]\n    assert candidate([[4, 2], [2, 3]]) == [2, 1]\n    assert candidate([[4, 2], [4, 1]]) == [4, 3]\n    assert candidate([[4, 3], [1, 1]]) == [1, 2]\n    assert candidate([[4, 3], [2, 2]]) == [2, 1]\n    assert candidate([[4, 3], [2, 4]]) == [4, 1]\n    assert candidate([[4, 3], [3, 1]]) == [3, 2]\n    assert candidate([[4, 4], [2, 3]]) == [4, 1]\n    assert candidate([[1, 3, 4], [9, 7, 5], [8, 2, 3]]) == [3, 6]\n    assert candidate([[1, 5, 2], [8, 4, 3], [7, 8, 6]]) == [8, 9]\n    assert candidate([[1, 5, 8], [2, 7, 3], [6, 1, 4]]) == [1, 9]\n    assert candidate([[1, 6, 1], [4, 3, 7], [5, 2, 8]]) == [1, 9]\n    assert candidate([[1, 6, 4], [9, 7, 5], [7, 8, 2]]) == [7, 3]\n    assert candidate([[1, 6, 7], [3, 6, 8], [9, 5, 4]]) == [6, 2]\n    assert candidate([[1, 7, 4], [8, 6, 2], [8, 3, 5]]) == [8, 9]\n    assert candidate([[1, 7, 8], [4, 5, 6], [3, 9, 9]]) == [9, 2]\n    assert candidate([[1, 8, 4], [9, 2, 7], [6, 3, 8]]) == [8, 5]\n    assert candidate([[1, 8, 5], [4, 3, 2], [7, 9, 4]]) == [4, 6]\n    assert candidate([[1, 9, 3], [2, 7, 8], [2, 4, 5]]) == [2, 6]\n    assert candidate([[1, 9, 7], [8, 4, 2], [6, 3, 9]]) == [9, 5]\n    assert candidate([[2, 1, 3], [2, 9, 4], [6, 8, 5]]) == [2, 7]\n    assert candidate([[2, 2, 4], [7, 5, 3], [1, 6, 8]]) == [2, 9]\n    assert candidate([[2, 3, 9], [5, 6, 4], [2, 8, 7]]) == [2, 1]\n    assert candidate([[2, 4, 6], [4, 8, 9], [7, 3, 5]]) == [4, 1]\n    assert candidate([[2, 5, 5], [4, 8, 7], [9, 3, 6]]) == [5, 1]\n    assert candidate([[2, 6, 4], [6, 9, 5], [3, 7, 8]]) == [6, 1]\n    assert candidate([[2, 6, 9], [1, 7, 9], [4, 8, 5]]) == [9, 3]\n    assert candidate([[2, 7, 1], [8, 6, 2], [9, 3, 4]]) == [2, 5]\n    assert candidate([[2, 7, 5], [7, 6, 4], [1, 3, 9]]) == [7, 8]\n    assert candidate([[2, 7, 9], [6, 8, 1], [4, 1, 5]]) == [1, 3]\n    assert candidate([[2, 9, 7], [8, 5, 1], [6, 7, 4]]) == [7, 3]\n    assert candidate([[3, 4, 5], [8, 2, 4], [6, 1, 7]]) == [4, 9]\n    assert candidate([[3, 5, 7], [8, 6, 9], [1, 5, 2]]) == [5, 4]\n    assert candidate([[3, 6, 1], [5, 9, 2], [1, 7, 8]]) == [1, 4]\n    assert candidate([[3, 9, 4], [3, 6, 1], [5, 7, 2]]) == [3, 8]\n    assert candidate([[4, 2, 6], [3, 5, 8], [3, 1, 9]]) == [3, 7]\n    assert candidate([[4, 3, 2], [6, 9, 9], [8, 7, 5]]) == [9, 1]\n    assert candidate([[4, 6, 5], [3, 5, 7], [2, 8, 9]]) == [5, 1]\n    assert candidate([[4, 8, 7], [4, 6, 9], [3, 2, 1]]) == [4, 5]\n    assert candidate([[4, 9, 6], [2, 5, 8], [3, 7, 7]]) == [7, 1]\n    assert candidate([[5, 3, 6], [1, 4, 2], [9, 8, 2]]) == [2, 7]\n    assert candidate([[5, 6, 9], [3, 7, 8], [2, 2, 4]]) == [2, 1]\n    assert candidate([[5, 7, 8], [1, 3, 2], [7, 6, 9]]) == [7, 4]\n    assert candidate([[6, 1, 3], [2, 4, 2], [8, 9, 7]]) == [2, 5]\n    assert candidate([[6, 4, 2], [3, 7, 8], [5, 6, 9]]) == [6, 1]\n    assert candidate([[6, 4, 5], [7, 9, 3], [1, 2, 9]]) == [9, 8]\n    assert candidate([[6, 4, 8], [8, 1, 2], [9, 3, 7]]) == [8, 5]\n    assert candidate([[6, 9, 3], [8, 9, 7], [5, 4, 2]]) == [9, 1]\n    assert candidate([[7, 2, 1], [6, 5, 3], [2, 9, 4]]) == [2, 8]\n    assert candidate([[7, 2, 4], [5, 8, 7], [9, 3, 1]]) == [7, 6]\n    assert candidate([[7, 3, 1], [8, 9, 2], [4, 5, 2]]) == [2, 6]\n    assert candidate([[7, 4, 2], [9, 1, 9], [8, 3, 5]]) == [9, 6]\n    assert candidate([[7, 4, 8], [1, 1, 3], [2, 6, 9]]) == [1, 5]\n    assert candidate([[7, 5, 3], [4, 6, 3], [9, 2, 8]]) == [3, 1]\n    assert candidate([[7, 5, 7], [3, 1, 6], [8, 9, 4]]) == [7, 2]\n    assert candidate([[8, 2, 6], [1, 8, 9], [4, 5, 3]]) == [8, 7]\n    assert candidate([[8, 2, 7], [3, 5, 1], [9, 6, 3]]) == [3, 4]\n    assert candidate([[8, 6, 3], [1, 9, 5], [5, 4, 7]]) == [5, 2]\n    assert candidate([[8, 6, 5], [3, 9, 1], [8, 7, 4]]) == [8, 2]\n    assert candidate([[8, 9, 6], [6, 1, 3], [2, 7, 5]]) == [6, 4]\n    assert candidate([[8, 9, 6], [7, 4, 2], [7, 1, 5]]) == [7, 3]\n    assert candidate([[9, 2, 3], [7, 6, 4], [5, 8, 8]]) == [8, 1]\n    assert candidate([[9, 2, 7], [3, 8, 7], [1, 5, 4]]) == [7, 6]\n\ndef test_check():\n    check(findMissingAndRepeatedValues)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3228_maximumSetSize", "language": "py", "prompt": "from typing import List\n\ndef maximumSetSize(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"You are given two 0-indexed integer arrays nums1 and nums2 of even length n.\nYou must remove n / 2 elements from nums1 and n / 2 elements from nums2. After the removals, you insert the remaining elements of nums1 and nums2 into a set s.\nReturn the maximum possible size of the set s.\nExample 1:\nInput: nums1 = [1,2,1,2], nums2 = [1,1,1,1]\nOutput: 2\nExplanation: We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals.\nExample 2:\nInput: nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]\nOutput: 5\nExplanation: We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals.\nExample 3:\nInput: nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]\nOutput: 6\nExplanation: We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals.\nConstraints:\nn == nums1.length == nums2.length\n1 <= n <= 2 * 104\nn is even.\n1 <= nums1[i], nums2[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3228_maximumSetSize.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 1, 2], [1, 1, 1, 1]) == 2\n    assert candidate([1, 2, 3, 4, 5, 6], [2, 3, 2, 3, 2, 3]) == 5\n    assert candidate([1, 1, 2, 2, 3, 3], [4, 4, 5, 5, 6, 6]) == 6\n    assert candidate([1, 2, 1, 1], [1, 2, 3, 4]) == 4\n    assert candidate([1, 1, 1, 1], [12, 23, 41, 9]) == 3\n    assert candidate([12, 23, 41, 9], [1, 1, 1, 1]) == 3\n    assert candidate([9, 8, 4, 7], [5, 5, 9, 5]) == 4\n    assert candidate([8, 9], [4, 3]) == 2\n    assert candidate([7, 1], [6, 10]) == 2\n    assert candidate([10, 3], [5, 6]) == 2\n    assert candidate([3, 6], [6, 6]) == 2\n    assert candidate([5, 1], [6, 6]) == 2\n    assert candidate([10, 7], [8, 4]) == 2\n    assert candidate([10, 8, 7, 9], [7, 9, 9, 5]) == 4\n    assert candidate([1, 10, 6, 5], [3, 7, 10, 10]) == 4\n    assert candidate([5, 2, 8, 6], [7, 4, 1, 1]) == 4\n    assert candidate([2, 4, 1, 4], [10, 2, 4, 10]) == 4\n    assert candidate([5, 7], [3, 1]) == 2\n    assert candidate([1, 10, 1, 2], [9, 5, 8, 5]) == 4\n    assert candidate([9, 4], [5, 7]) == 2\n    assert candidate([1, 5, 10, 8], [1, 7, 4, 10]) == 4\n    assert candidate([6, 6, 2, 9], [1, 4, 10, 7]) == 4\n    assert candidate([7, 10], [6, 10]) == 2\n    assert candidate([8, 8], [6, 3]) == 2\n    assert candidate([6, 8], [9, 3]) == 2\n    assert candidate([3, 8, 1, 9], [2, 5, 4, 5]) == 4\n    assert candidate([6, 1, 4, 7], [10, 7, 2, 2]) == 4\n    assert candidate([8, 7, 9, 3], [10, 3, 8, 2]) == 4\n    assert candidate([1, 4, 5, 9], [2, 5, 2, 7]) == 4\n    assert candidate([3, 5], [5, 3]) == 2\n    assert candidate([1, 10, 8, 2], [2, 9, 10, 7]) == 4\n    assert candidate([3, 9], [1, 4]) == 2\n    assert candidate([1, 5], [10, 5]) == 2\n    assert candidate([7, 5], [2, 10]) == 2\n    assert candidate([6, 10], [3, 1]) == 2\n    assert candidate([9, 8, 1, 3], [4, 9, 8, 6]) == 4\n    assert candidate([4, 1], [9, 9]) == 2\n    assert candidate([10, 7], [10, 8]) == 2\n    assert candidate([4, 4, 3, 9], [6, 8, 4, 7]) == 4\n    assert candidate([4, 10, 4, 9], [5, 7, 4, 2]) == 4\n    assert candidate([8, 6], [1, 7]) == 2\n    assert candidate([9, 8, 10, 7], [3, 7, 7, 6]) == 4\n    assert candidate([4, 10, 9, 10], [9, 7, 3, 6]) == 4\n    assert candidate([6, 7], [5, 7]) == 2\n    assert candidate([1, 1, 10, 5], [6, 6, 8, 5]) == 4\n    assert candidate([5, 3, 4, 2], [10, 3, 7, 10]) == 4\n    assert candidate([1, 3], [9, 2]) == 2\n    assert candidate([6, 1, 6, 2], [5, 4, 6, 7]) == 4\n    assert candidate([9, 9], [8, 7]) == 2\n    assert candidate([6, 2, 9, 3], [10, 3, 4, 7]) == 4\n    assert candidate([6, 2, 10, 1], [9, 2, 6, 5]) == 4\n    assert candidate([6, 5, 6, 1], [6, 2, 6, 9]) == 4\n    assert candidate([10, 5, 4, 7], [5, 4, 4, 9]) == 4\n    assert candidate([7, 10, 4, 6], [1, 4, 4, 2]) == 4\n    assert candidate([3, 4], [1, 8]) == 2\n    assert candidate([7, 7], [7, 1]) == 2\n    assert candidate([1, 1, 2, 2, 1, 1], [1, 3, 2, 2, 2, 1]) == 3\n    assert candidate([3, 3, 3, 2, 1, 2, 1, 2], [1, 2, 3, 2, 2, 3, 3, 1]) == 3\n    assert candidate([1, 3, 3, 2], [2, 2, 1, 3]) == 3\n    assert candidate([1, 1, 1, 3, 3, 3, 1, 1], [3, 2, 3, 2, 3, 3, 3, 3]) == 3\n    assert candidate([3, 3, 1, 1, 3, 2], [2, 2, 1, 1, 2, 2]) == 3\n    assert candidate([2, 3, 2, 3, 3, 1], [2, 3, 1, 2, 1, 1]) == 3\n    assert candidate([1, 1, 3, 3, 1, 3, 3, 3], [2, 3, 1, 3, 1, 1, 1, 3]) == 3\n    assert candidate([2, 3, 2, 2, 1, 3, 1, 1], [3, 1, 2, 2, 3, 1, 2, 2]) == 3\n    assert candidate([2, 2, 2, 3, 1, 1, 3, 3], [3, 1, 3, 1, 2, 3, 2, 2]) == 3\n    assert candidate([3, 3, 1, 3, 2, 2, 3, 1], [3, 1, 2, 3, 1, 3, 2, 1]) == 3\n    assert candidate([1, 1, 1, 2, 1, 1, 1, 1, 1, 2], [3, 1, 3, 3, 1, 1, 3, 2, 1, 3]) == 3\n    assert candidate([3, 2, 2, 3], [1, 1, 1, 3]) == 3\n    assert candidate([2, 3, 3, 1, 2, 1, 2, 2], [1, 2, 2, 1, 2, 1, 2, 2]) == 3\n    assert candidate([1, 2, 1, 3, 2, 3], [3, 3, 1, 1, 3, 3]) == 3\n    assert candidate([1, 3, 1, 3, 3, 3, 3, 2, 2, 2], [2, 1, 3, 2, 2, 3, 3, 1, 1, 3]) == 3\n    assert candidate([1, 3, 1, 1, 2, 2, 1, 1], [2, 3, 3, 1, 3, 2, 3, 2]) == 3\n    assert candidate([2, 3, 2, 2, 2, 2, 1, 2], [3, 1, 2, 3, 3, 1, 2, 1]) == 3\n    assert candidate([3, 3, 2, 1, 2, 3], [2, 1, 1, 3, 2, 2]) == 3\n    assert candidate([1, 3, 1, 2, 1, 1, 2, 3], [1, 2, 2, 3, 2, 3, 3, 3]) == 3\n    assert candidate([1, 1, 1, 3, 1, 2, 1, 1], [2, 3, 3, 2, 3, 3, 1, 1]) == 3\n    assert candidate([3, 1, 3, 3, 2, 2, 2, 3, 1, 1], [1, 1, 2, 1, 3, 3, 1, 3, 2, 1]) == 3\n    assert candidate([1, 1, 1, 2, 3, 2, 1, 1], [2, 1, 2, 2, 2, 1, 3, 3]) == 3\n    assert candidate([2, 1, 3, 2, 2, 2, 2, 2], [1, 3, 3, 2, 2, 2, 3, 1]) == 3\n    assert candidate([1, 3, 1, 1], [1, 3, 1, 2]) == 3\n    assert candidate([1, 3, 3, 1, 3, 2], [2, 1, 3, 2, 2, 2]) == 3\n    assert candidate([3, 2, 3, 3, 2, 2], [1, 3, 1, 3, 1, 1]) == 3\n    assert candidate([1, 3, 1, 3, 2, 3], [2, 1, 1, 1, 2, 3]) == 3\n    assert candidate([1, 1, 3, 1, 3, 1], [3, 3, 1, 2, 2, 1]) == 3\n    assert candidate([2, 2, 2, 2, 2, 3, 1, 3], [2, 3, 3, 2, 1, 2, 3, 1]) == 3\n    assert candidate([1, 3, 1, 2, 3, 1], [3, 3, 2, 2, 1, 3]) == 3\n    assert candidate([2, 1, 2, 2, 1, 3], [1, 1, 1, 3, 2, 3]) == 3\n    assert candidate([2, 2, 1, 2, 1, 3, 3, 1], [3, 1, 3, 1, 1, 3, 3, 1]) == 3\n    assert candidate([3, 1, 3, 3, 2, 3], [1, 3, 3, 2, 2, 1]) == 3\n    assert candidate([3, 2, 1, 3, 3, 2], [1, 1, 3, 3, 1, 2]) == 3\n    assert candidate([2, 1, 3, 2, 3, 3], [2, 2, 2, 3, 2, 1]) == 3\n    assert candidate([3, 3, 3, 1, 2, 2, 3, 1], [3, 1, 2, 3, 2, 3, 2, 1]) == 3\n    assert candidate([3, 1, 3, 1, 2, 1, 2, 2, 2, 2], [2, 1, 3, 1, 1, 1, 2, 2, 1, 3]) == 3\n    assert candidate([1, 2, 2, 1, 3, 3], [1, 1, 1, 3, 2, 2]) == 3\n    assert candidate([2, 1, 2, 3], [3, 2, 3, 2]) == 3\n    assert candidate([3, 1, 2, 2], [2, 1, 1, 1]) == 3\n    assert candidate([2, 2, 3, 2], [2, 1, 3, 3]) == 3\n    assert candidate([3, 3, 2, 1, 3, 3, 2, 3], [3, 1, 2, 3, 2, 2, 1, 3]) == 3\n    assert candidate([3, 3, 3, 1, 2, 2], [1, 3, 1, 2, 2, 3]) == 3\n    assert candidate([3, 1, 1, 3, 1, 1, 3, 2], [3, 2, 3, 3, 3, 1, 2, 3]) == 3\n\ndef test_check():\n    check(maximumSetSize)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3230_removeAlmostEqualCharacters", "language": "py", "prompt": "def removeAlmostEqualCharacters(word: str) -> int:\n    \"\"\"You are given a 0-indexed string word.\nIn one operation, you can pick any index i of word and change word[i] to any lowercase English letter.\nReturn the minimum number of operations needed to remove all adjacent almost-equal characters from word.\nTwo characters a and b are almost-equal if a == b or a and b are adjacent in the alphabet.\nExample 1:\nInput: word = \"aaaaa\"\nOutput: 2\nExplanation: We can change word into \"acaca\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\nExample 2:\nInput: word = \"abddez\"\nOutput: 2\nExplanation: We can change word into \"ybdoez\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\nExample 3:\nInput: word = \"zyxyxyz\"\nOutput: 3\nExplanation: We can change word into \"zaxaxaz\" which does not have any adjacent almost-equal characters. \nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3.\nConstraints:\n1 <= word.length <= 100\nword consists only of lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3230_removeAlmostEqualCharacters.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(aaaaa) == 2\n    assert candidate(abddez) == 2\n    assert candidate(zyxyxyz) == 3\n    assert candidate(a) == 0\n    assert candidate(b) == 0\n    assert candidate(c) == 0\n    assert candidate(aa) == 1\n    assert candidate(ab) == 1\n    assert candidate(ac) == 0\n    assert candidate(ba) == 1\n    assert candidate(bb) == 1\n    assert candidate(bc) == 1\n    assert candidate(ca) == 0\n    assert candidate(cb) == 1\n    assert candidate(cc) == 1\n    assert candidate(aaa) == 1\n    assert candidate(aab) == 1\n    assert candidate(aac) == 1\n    assert candidate(aba) == 1\n    assert candidate(abb) == 1\n    assert candidate(abc) == 1\n    assert candidate(aca) == 0\n    assert candidate(acb) == 1\n    assert candidate(acc) == 1\n    assert candidate(baa) == 1\n    assert candidate(bab) == 1\n    assert candidate(bac) == 1\n    assert candidate(bba) == 1\n    assert candidate(bbb) == 1\n    assert candidate(bbc) == 1\n    assert candidate(bca) == 1\n    assert candidate(bcb) == 1\n    assert candidate(bcc) == 1\n    assert candidate(caa) == 1\n    assert candidate(cab) == 1\n    assert candidate(cac) == 0\n    assert candidate(cba) == 1\n    assert candidate(cbb) == 1\n    assert candidate(cbc) == 1\n    assert candidate(cca) == 1\n    assert candidate(ccb) == 1\n    assert candidate(ccc) == 1\n    assert candidate(aaaa) == 2\n    assert candidate(aaab) == 2\n    assert candidate(aaac) == 1\n    assert candidate(aaba) == 2\n    assert candidate(aabb) == 2\n    assert candidate(aabc) == 2\n    assert candidate(aaca) == 1\n    assert candidate(aacb) == 2\n    assert candidate(aacc) == 2\n    assert candidate(abaa) == 2\n    assert candidate(abab) == 2\n    assert candidate(abac) == 1\n    assert candidate(abba) == 2\n    assert candidate(abbb) == 2\n    assert candidate(abbc) == 2\n    assert candidate(abca) == 1\n    assert candidate(abcb) == 2\n    assert candidate(abcc) == 2\n    assert candidate(acaa) == 1\n    assert candidate(acab) == 1\n    assert candidate(acac) == 0\n    assert candidate(acba) == 1\n    assert candidate(acbb) == 1\n    assert candidate(acbc) == 1\n    assert candidate(acca) == 1\n    assert candidate(accb) == 1\n    assert candidate(accc) == 1\n    assert candidate(baaa) == 2\n    assert candidate(baab) == 2\n    assert candidate(baac) == 1\n    assert candidate(baba) == 2\n    assert candidate(babb) == 2\n    assert candidate(babc) == 2\n    assert candidate(baca) == 1\n    assert candidate(bacb) == 2\n    assert candidate(bacc) == 2\n    assert candidate(bbaa) == 2\n    assert candidate(bbab) == 2\n    assert candidate(bbac) == 1\n    assert candidate(bbba) == 2\n    assert candidate(bbbb) == 2\n    assert candidate(bbbc) == 2\n    assert candidate(bbca) == 1\n    assert candidate(bbcb) == 2\n    assert candidate(bbcc) == 2\n    assert candidate(bcaa) == 2\n    assert candidate(bcab) == 2\n    assert candidate(bcac) == 1\n    assert candidate(bcba) == 2\n    assert candidate(bcbb) == 2\n    assert candidate(bcbc) == 2\n    assert candidate(bcca) == 1\n    assert candidate(bccb) == 2\n    assert candidate(bccc) == 2\n    assert candidate(caaa) == 1\n    assert candidate(caab) == 1\n    assert candidate(caac) == 1\n    assert candidate(caba) == 1\n\ndef test_check():\n    check(removeAlmostEqualCharacters)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3231_minimumAddedCoins", "language": "py", "prompt": "from typing import List\n\ndef minimumAddedCoins(coins: List[int], target: int) -> int:\n    \"\"\"You are given a 0-indexed integer array coins, representing the values of the coins available, and an integer target.\nAn integer x is obtainable if there exists a subsequence of coins that sums to x.\nReturn the minimum number of coins of any value that need to be added to the array so that every integer in the range [1, target] is obtainable.\nA subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\nExample 1:\nInput: coins = [1,4,10], target = 19\nOutput: 2\nExplanation: We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array. \nExample 2:\nInput: coins = [1,4,10,5,7,19], target = 19\nOutput: 1\nExplanation: We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array. \nExample 3:\nInput: coins = [1,1,1], target = 20\nOutput: 3\nExplanation: We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16].\nIt can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array.\nConstraints:\n1 <= target <= 105\n1 <= coins.length <= 105\n1 <= coins[i] <= target\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3231_minimumAddedCoins.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 4, 10], 19) == 2\n    assert candidate([1, 4, 10, 5, 7, 19], 19) == 1\n    assert candidate([1, 1, 1], 20) == 3\n    assert candidate([1], 100000) == 16\n    assert candidate([100000], 100000) == 17\n    assert candidate([2], 5) == 2\n    assert candidate([5, 6, 7], 10) == 3\n    assert candidate([5, 6, 7], 15) == 3\n    assert candidate([4, 11, 13, 15, 7, 5, 12, 11, 5, 9], 34) == 2\n    assert candidate([8, 12, 9], 27) == 3\n    assert candidate([2, 13, 7, 1, 11], 35) == 1\n    assert candidate([10, 3, 5, 11, 6], 27) == 2\n    assert candidate([6, 6, 6, 15, 4], 31) == 2\n    assert candidate([6, 15, 6], 22) == 3\n    assert candidate([8, 14, 15, 4, 14, 15, 8, 10, 8], 42) == 2\n    assert candidate([9, 14, 14, 9, 14, 5, 12, 10, 11], 17) == 3\n    assert candidate([14, 5, 13, 3, 7, 10, 10, 10], 32) == 2\n    assert candidate([8, 6, 7, 12], 26) == 3\n    assert candidate([15, 1, 12], 43) == 4\n    assert candidate([4, 1, 4, 10], 16) == 1\n    assert candidate([10, 2, 13, 5, 7, 15], 26) == 2\n    assert candidate([10, 1, 10], 10) == 3\n    assert candidate([9, 5, 13, 8], 30) == 3\n    assert candidate([13, 9, 4, 5], 37) == 3\n    assert candidate([1, 15, 5, 12, 13, 10, 14, 8, 1, 7], 29) == 1\n    assert candidate([14, 14, 6, 2, 9, 1, 4, 10], 38) == 0\n    assert candidate([7, 10, 6, 14, 10, 11, 2], 45) == 2\n    assert candidate([6, 3, 2, 6, 8, 9, 13, 3, 12, 13], 47) == 1\n    assert candidate([8, 1, 9, 2, 15], 34) == 1\n    assert candidate([5, 13, 9, 11, 6, 1], 27) == 2\n    assert candidate([10, 15, 7, 14, 2, 2, 12, 14, 13], 45) == 2\n    assert candidate([9, 3, 10, 3, 8, 2, 7, 11, 1], 26) == 0\n    assert candidate([9, 11, 2, 5, 2, 7, 11], 28) == 1\n    assert candidate([5, 5, 15, 3, 13], 17) == 2\n    assert candidate([2, 2, 9, 10, 7, 15, 4, 3, 9, 15], 16) == 1\n    assert candidate([3, 1, 12, 15, 5, 10], 34) == 1\n    assert candidate([12, 7, 5, 2, 12], 50) == 3\n    assert candidate([11, 6, 10, 3, 1, 7, 11], 44) == 1\n    assert candidate([13, 12, 1, 11, 3, 4, 11, 9, 13, 13], 41) == 1\n    assert candidate([6, 4, 1, 9, 9, 2, 10, 7], 48) == 0\n    assert candidate([10, 4, 4, 3, 9, 6, 8, 4, 7, 7], 22) == 2\n    assert candidate([15, 9, 5, 7, 4, 13], 19) == 2\n    assert candidate([13, 11, 8, 6, 11], 16) == 3\n    assert candidate([8, 14, 15, 9, 8, 10, 13, 7, 3], 42) == 2\n    assert candidate([6, 14, 7, 4, 10, 9, 10, 9, 7], 22) == 2\n    assert candidate([4, 6, 7, 15, 13, 14, 5, 7], 16) == 2\n    assert candidate([10, 12, 5], 32) == 3\n    assert candidate([8, 5, 14, 13, 13, 11, 14, 13], 43) == 3\n    assert candidate([3, 14, 4, 2, 10, 3, 7], 50) == 2\n    assert candidate([1, 3, 11, 9, 2, 10, 6, 12], 12) == 0\n    assert candidate([2, 5, 4, 12, 6, 7, 11, 15], 17) == 1\n    assert candidate([7, 12, 10, 15, 6, 15, 14, 2, 9, 12], 24) == 2\n    assert candidate([4, 7, 15, 10, 14], 38) == 2\n    assert candidate([10, 1, 12, 9], 16) == 3\n    assert candidate([5, 8, 12, 6, 15, 13, 11, 5], 35) == 3\n    assert candidate([6, 2, 6], 39) == 3\n    assert candidate([15, 10, 5, 4, 7, 12, 12, 5, 11], 30) == 2\n    assert candidate([9, 10, 7, 12, 10, 4], 35) == 2\n    assert candidate([4, 4, 2], 8) == 1\n    assert candidate([13, 4, 15, 1, 8], 25) == 1\n    assert candidate([14, 7, 7, 1, 6, 14, 3, 15, 13], 18) == 1\n    assert candidate([8, 2, 14, 2, 3, 10, 15, 5], 31) == 1\n    assert candidate([3, 7, 12, 10, 11, 5, 3], 36) == 2\n    assert candidate([5, 3, 14, 8, 10], 33) == 2\n    assert candidate([9, 14, 9, 14, 4, 1, 4, 12, 12], 41) == 1\n    assert candidate([6, 3, 9, 7, 3, 4, 4, 15, 15, 10], 47) == 2\n    assert candidate([4, 9, 6], 43) == 3\n    assert candidate([12, 9, 13, 12, 10, 4, 9, 9, 4], 28) == 2\n    assert candidate([6, 8, 2, 13, 1, 5, 6], 31) == 1\n    assert candidate([9, 8, 9, 9, 3, 5, 10, 15, 1], 45) == 1\n    assert candidate([1, 10, 15, 15], 24) == 3\n    assert candidate([9, 12, 2], 43) == 4\n    assert candidate([14, 13, 10, 2, 2], 16) == 2\n    assert candidate([11, 5, 5, 13, 4, 13, 10, 3, 4], 21) == 2\n    assert candidate([8, 9, 1, 5, 8, 7, 6, 8, 6], 47) == 2\n    assert candidate([4, 10, 9], 18) == 3\n    assert candidate([7, 9, 7, 6, 8, 11], 50) == 3\n    assert candidate([11, 6, 6, 14, 12, 2], 46) == 2\n    assert candidate([8, 9, 2], 31) == 3\n    assert candidate([12, 1, 4, 3, 5, 3], 18) == 1\n    assert candidate([4, 3, 13], 34) == 3\n    assert candidate([9, 11, 3], 22) == 3\n    assert candidate([1, 11, 15, 1, 10, 13, 7, 6, 12], 28) == 1\n    assert candidate([1, 10, 8, 7, 12], 19) == 2\n    assert candidate([1, 5, 15, 13, 8, 4, 5, 7], 29) == 1\n    assert candidate([3, 8, 13, 8, 5, 3, 7, 2, 9, 8], 50) == 1\n    assert candidate([4, 13, 12], 47) == 4\n    assert candidate([9, 3, 10, 9, 11], 48) == 3\n    assert candidate([8, 7, 6, 1, 9, 5, 5], 13) == 2\n    assert candidate([11, 9, 1, 15], 16) == 3\n    assert candidate([8, 13, 8], 27) == 3\n    assert candidate([7, 10, 11, 3, 10, 14], 36) == 2\n    assert candidate([14, 9, 6, 11, 13, 8, 8, 5, 6], 22) == 3\n    assert candidate([9, 3, 6, 10, 11, 1, 5, 14, 3], 27) == 1\n    assert candidate([4, 5, 9, 6, 2, 2, 10, 5, 13], 43) == 1\n    assert candidate([3, 10, 2, 13, 6, 13, 14, 14, 3], 28) == 1\n    assert candidate([14, 15, 15, 12, 13, 4, 15], 38) == 3\n    assert candidate([10, 5, 12, 11, 9, 8, 1], 12) == 2\n    assert candidate([15, 13, 12, 4], 31) == 3\n    assert candidate([4, 5, 14, 13, 10, 12], 31) == 2\n\ndef test_check():\n    check(minimumAddedCoins)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3233_maxPartitionsAfterOperations", "language": "py", "prompt": "def maxPartitionsAfterOperations(s: str, k: int) -> int:\n    \"\"\"You are given a 0-indexed string s and an integer k.\nYou are to perform the following partitioning operations until s is empty:\nChoose the longest prefix of s containing at most k distinct characters.\nDelete the prefix from s and increase the number of partitions by one. The remaining characters (if any) in s maintain their initial order.\nBefore the operations, you are allowed to change at most one index in s to another lowercase English letter.\nReturn an integer denoting the maximum number of resulting partitions after the operations by optimally choosing at most one index to change.\nExample 1:\nInput: s = \"accca\", k = 2\nOutput: 3\nExplanation: In this example, to maximize the number of resulting partitions, s[2] can be changed to 'b'.\ns becomes \"acbca\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 2 distinct characters, \"acbca\".\n- Delete the prefix, and s becomes \"bca\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 2 distinct characters, \"bca\".\n- Delete the prefix, and s becomes \"a\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 2 distinct characters, \"a\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 3.\nHence, the answer is 3.\nIt can be shown that it is not possible to obtain more than 3 partitions.\nExample 2:\nInput: s = \"aabaab\", k = 3\nOutput: 1\nExplanation: In this example, to maximize the number of resulting partitions we can leave s as it is.\nThe operations can now be performed as follows until s becomes empty: \n- Choose the longest prefix containing at most 3 distinct characters, \"aabaab\".\n- Delete the prefix, and s becomes empty. The number of partitions becomes 1. \nHence, the answer is 1. \nIt can be shown that it is not possible to obtain more than 1 partition.\nExample 3:\nInput: s = \"xxyz\", k = 1\nOutput: 4\nExplanation: In this example, to maximize the number of resulting partitions, s[1] can be changed to 'a'.\ns becomes \"xayz\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 1 distinct character, \"xayz\".\n- Delete the prefix, and s becomes \"ayz\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 1 distinct character, \"ayz\".\n- Delete the prefix, and s becomes \"yz\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 1 distinct character, \"yz\".\n- Delete the prefix, and s becomes \"z\". The number of partitions is now 3.\n- Choose the longest prefix containing at most 1 distinct character, \"z\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 4.\nHence, the answer is 4.\nIt can be shown that it is not possible to obtain more than 4 partitions.\nConstraints:\n1 <= s.length <= 104\ns consists only of lowercase English letters.\n1 <= k <= 26\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3233_maxPartitionsAfterOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(accca, 2) == 3\n    assert candidate(aabaab, 3) == 1\n    assert candidate(xxyz, 1) == 4\n    assert candidate(c, 3) == 1\n    assert candidate(c, 5) == 1\n    assert candidate(h, 17) == 1\n    assert candidate(p, 13) == 1\n    assert candidate(ab, 5) == 1\n    assert candidate(ba, 1) == 2\n    assert candidate(ba, 3) == 1\n    assert candidate(ca, 1) == 2\n    assert candidate(fh, 8) == 1\n    assert candidate(abb, 1) == 3\n    assert candidate(aca, 2) == 2\n    assert candidate(acb, 2) == 2\n    assert candidate(acb, 4) == 1\n    assert candidate(bab, 3) == 1\n    assert candidate(cba, 1) == 3\n    assert candidate(cbb, 5) == 1\n    assert candidate(cca, 5) == 1\n    assert candidate(fjz, 11) == 1\n    assert candidate(jxg, 23) == 1\n    assert candidate(xfj, 5) == 1\n    assert candidate(abcc, 4) == 1\n    assert candidate(acab, 1) == 4\n    assert candidate(altj, 5) == 1\n    assert candidate(baac, 3) == 2\n    assert candidate(baca, 2) == 2\n    assert candidate(bbkk, 3) == 1\n    assert candidate(cbcc, 4) == 1\n    assert candidate(toqm, 14) == 1\n    assert candidate(yhbo, 9) == 1\n    assert candidate(aaabc, 1) == 5\n    assert candidate(accba, 3) == 2\n    assert candidate(bcbab, 1) == 5\n    assert candidate(bccaa, 5) == 1\n    assert candidate(caaaa, 3) == 1\n    assert candidate(cacaa, 4) == 1\n    assert candidate(cacac, 1) == 5\n    assert candidate(cbbab, 5) == 1\n    assert candidate(ccacb, 5) == 1\n    assert candidate(ccbba, 5) == 1\n    assert candidate(yhqlp, 4) == 2\n    assert candidate(aabaaa, 5) == 1\n    assert candidate(acbabb, 1) == 6\n    assert candidate(bbaaab, 4) == 1\n    assert candidate(bbbcca, 4) == 1\n    assert candidate(bbcaab, 4) == 1\n    assert candidate(cacbaa, 1) == 6\n    assert candidate(hnhdfs, 5) == 2\n    assert candidate(nihnrq, 1) == 6\n    assert candidate(odxttm, 19) == 1\n    assert candidate(uxqozq, 11) == 1\n    assert candidate(aabcaac, 5) == 1\n    assert candidate(aabcacc, 2) == 3\n    assert candidate(abbaaca, 2) == 3\n    assert candidate(baacaac, 3) == 2\n    assert candidate(baacbaa, 5) == 1\n    assert candidate(baacccb, 1) == 6\n    assert candidate(baccacb, 3) == 3\n    assert candidate(baccccb, 2) == 3\n    assert candidate(bcbbccb, 2) == 3\n    assert candidate(cbbcaab, 4) == 1\n    assert candidate(ccabbaa, 2) == 3\n    assert candidate(cccabcc, 3) == 2\n    assert candidate(tmdhzhy, 26) == 1\n    assert candidate(abhujxlb, 13) == 1\n    assert candidate(acabcbcb, 5) == 1\n    assert candidate(acbcbcac, 2) == 4\n    assert candidate(adklnsqm, 13) == 1\n    assert candidate(bababaca, 4) == 1\n    assert candidate(bcacbaaa, 2) == 4\n    assert candidate(bcccbacc, 5) == 1\n    assert candidate(aaaabcccb, 1) == 6\n    assert candidate(acabcaacc, 2) == 4\n    assert candidate(bcbbabcaa, 4) == 1\n    assert candidate(bccaabcaa, 2) == 4\n    assert candidate(cbcabbcca, 4) == 1\n    assert candidate(ccbaabbba, 2) == 4\n    assert candidate(aaaaabbcab, 5) == 1\n    assert candidate(aababbbbca, 4) == 1\n    assert candidate(aabbbbccab, 1) == 7\n    assert candidate(abbcbbcbba, 1) == 8\n    assert candidate(abcbbaccbb, 5) == 1\n    assert candidate(acabacccac, 5) == 1\n    assert candidate(acbbcacbab, 5) == 1\n    assert candidate(bbaccabbac, 4) == 1\n    assert candidate(bbbbcbcbbc, 2) == 3\n    assert candidate(bsoefqekpl, 6) == 2\n    assert candidate(caacccbcac, 3) == 2\n    assert candidate(cccacccbcb, 2) == 3\n    assert candidate(vwfyagymtp, 20) == 1\n    assert candidate(abaaccbaaaa, 2) == 4\n    assert candidate(abcccaccccc, 2) == 3\n    assert candidate(cbbbccaacaa, 3) == 2\n    assert candidate(ccaaabaaaaa, 2) == 3\n    assert candidate(wcmgarcruky, 10) == 1\n    assert candidate(yyogqjsswyn, 17) == 1\n    assert candidate(aaaccccbbbca, 1) == 7\n    assert candidate(baaccaabaccc, 5) == 1\n\ndef test_check():\n    check(maxPartitionsAfterOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3234_getGoodIndices", "language": "py", "prompt": "from typing import List\n\ndef getGoodIndices(variables: List[List[int]], target: int) -> List[int]:\n    \"\"\"You are given a 0-indexed 2D array variables where variables[i] = [ai, bi, ci, mi], and an integer target.\nAn index i is good if the following formula holds:\n0 <= i < variables.length\n((aibi % 10)ci) % mi == target\nReturn an array consisting of good indices in any order.\nExample 1:\nInput: variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\nOutput: [0,2]\nExplanation: For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\nTherefore we return [0,2] as the answer.\nExample 2:\nInput: variables = [[39,3,1000,1000]], target = 17\nOutput: []\nExplanation: For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\nTherefore we return [] as the answer.\nConstraints:\n1 <= variables.length <= 100\nvariables[i] == [ai, bi, ci, mi]\n1 <= ai, bi, ci, mi <= 103\n0 <= target <= 103\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3234_getGoodIndices.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[2, 3, 3, 10], [3, 3, 3, 1], [6, 1, 1, 4]], 2) == [0, 2]\n    assert candidate([[39, 3, 1000, 1000]], 17) == []\n    assert candidate([[3, 2, 4, 2], [3, 3, 1, 3], [2, 2, 2, 4], [4, 4, 2, 3], [2, 4, 1, 3]], 4) == []\n    assert candidate([[9, 2, 8, 5], [7, 8, 8, 8], [8, 9, 6, 1], [8, 6, 2, 2], [3, 6, 3, 1]], 9) == []\n    assert candidate([[2, 2, 3, 2], [1, 3, 3, 2], [3, 2, 2, 3], [3, 1, 2, 3], [1, 2, 3, 1], [2, 2, 2, 2], [2, 1, 3, 1], [3, 2, 2, 2], [2, 1, 3, 1], [3, 3, 1, 3]], 0) == [0, 2, 3, 4, 5, 6, 8]\n    assert candidate([[1, 3, 2, 3], [4, 2, 3, 3], [4, 1, 4, 4], [4, 2, 3, 1], [4, 2, 1, 1], [1, 2, 4, 1], [1, 1, 4, 2], [1, 4, 4, 3], [1, 2, 2, 3]], 2) == []\n    assert candidate([[5, 4, 1, 3], [2, 5, 5, 1], [5, 3, 4, 1]], 5) == []\n    assert candidate([[4, 7, 6, 7], [7, 6, 6, 4], [6, 8, 2, 3], [8, 3, 5, 8]], 4) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 0) == [0, 1, 2, 3, 4, 5, 6]\n    assert candidate([[3, 5, 1, 2], [3, 2, 5, 2], [4, 4, 3, 2], [3, 2, 5, 3], [1, 5, 1, 4]], 1) == [0, 1, 4]\n    assert candidate([[1, 2, 1, 1], [2, 2, 2, 2], [1, 1, 1, 2], [1, 2, 2, 2]], 2) == []\n    assert candidate([[3, 3, 5, 6], [8, 2, 9, 2], [1, 4, 6, 1], [6, 4, 7, 7]], 8) == []\n    assert candidate([[3, 5, 4, 3], [1, 3, 3, 1], [3, 3, 5, 5], [4, 5, 5, 5], [5, 1, 4, 3], [2, 5, 3, 4]], 7) == []\n    assert candidate([[9, 7, 2, 7], [9, 1, 8, 1], [9, 3, 5, 6], [6, 1, 8, 4], [9, 6, 2, 3]], 8) == []\n    assert candidate([[10, 6, 8, 7], [3, 6, 1, 8]], 5) == []\n    assert candidate([[4, 6, 5, 2], [2, 6, 4, 6], [4, 6, 3, 6], [2, 2, 6, 5], [6, 5, 5, 2]], 2) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[5, 6, 5, 1], [4, 3, 1, 6], [5, 4, 4, 2]], 4) == [1]\n    assert candidate([[5, 1, 2, 4], [4, 5, 5, 5], [5, 9, 7, 4], [7, 9, 6, 3], [1, 8, 6, 1], [1, 1, 9, 9], [3, 7, 6, 5], [2, 6, 2, 6]], 1) == [0, 2, 3, 5]\n    assert candidate([[1, 3, 2, 5], [5, 4, 1, 2], [2, 2, 3, 2], [4, 2, 5, 4], [1, 5, 4, 1], [2, 2, 5, 2], [3, 3, 2, 1], [2, 5, 4, 3], [2, 1, 5, 1]], 4) == []\n    assert candidate([[3, 2, 1, 3], [1, 2, 1, 1], [2, 1, 3, 2], [2, 3, 1, 3], [3, 3, 1, 1], [2, 3, 2, 1], [2, 1, 3, 3], [1, 2, 2, 2], [3, 2, 1, 3]], 1) == [7]\n    assert candidate([[3, 3, 2, 2], [3, 3, 2, 2]], 0) == []\n    assert candidate([[1, 6, 7, 5], [6, 3, 1, 5], [7, 5, 5, 4], [6, 2, 2, 4], [6, 1, 1, 2], [2, 6, 5, 4]], 8) == []\n    assert candidate([[7, 8, 9, 3], [7, 8, 2, 8], [2, 4, 4, 8], [8, 8, 4, 4]], 6) == []\n    assert candidate([[6, 7, 6, 6], [1, 2, 4, 8], [6, 4, 2, 4], [3, 2, 4, 5]], 2) == []\n    assert candidate([[2, 3, 1, 1], [3, 2, 1, 1], [2, 1, 2, 3]], 2) == []\n    assert candidate([[9, 8, 10, 1], [7, 1, 3, 9], [6, 8, 9, 10], [4, 8, 8, 9]], 2) == []\n    assert candidate([[4, 3, 2, 2], [3, 6, 4, 6], [1, 4, 1, 4], [5, 2, 5, 1], [8, 3, 6, 3], [8, 4, 8, 3]], 6) == []\n    assert candidate([[3, 4, 4, 2], [4, 4, 1, 2], [1, 1, 3, 2], [3, 1, 4, 3], [2, 2, 3, 4], [2, 3, 2, 4], [3, 1, 4, 4], [1, 4, 1, 4], [3, 2, 1, 4]], 0) == [1, 3, 4, 5]\n    assert candidate([[2, 1, 1, 1], [2, 2, 2, 2], [1, 2, 1, 2], [1, 1, 1, 1], [1, 1, 1, 1], [2, 1, 2, 2], [1, 1, 2, 1], [2, 2, 2, 2]], 0) == [0, 1, 3, 4, 5, 6, 7]\n    assert candidate([[3, 1, 2, 4], [3, 3, 4, 2], [3, 4, 3, 4], [3, 3, 4, 2]], 1) == [0, 1, 2, 3]\n    assert candidate([[4, 10, 5, 8], [7, 7, 5, 8], [4, 8, 6, 2], [6, 3, 3, 2]], 4) == []\n    assert candidate([[3, 5, 3, 6], [3, 1, 6, 3], [6, 4, 1, 5], [3, 2, 3, 5], [1, 4, 7, 5], [6, 6, 6, 2], [7, 5, 6, 3], [1, 2, 7, 1], [1, 1, 6, 3]], 4) == [3]\n    assert candidate([[1, 4, 2, 3], [4, 3, 1, 4], [3, 3, 1, 3], [1, 4, 1, 3]], 0) == [1]\n    assert candidate([[1, 4, 2, 2], [5, 5, 1, 2], [3, 4, 2, 3]], 6) == []\n    assert candidate([[3, 5, 1, 1], [4, 8, 6, 8], [5, 1, 4, 9], [4, 3, 1, 2], [5, 9, 4, 7], [8, 7, 7, 1], [9, 3, 7, 5]], 0) == [0, 1, 3, 5]\n    assert candidate([[1, 1, 1, 1], [2, 2, 2, 1], [2, 2, 2, 1], [2, 2, 2, 2], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[5, 5, 6, 5], [4, 1, 2, 2], [6, 2, 5, 3], [1, 1, 5, 5], [3, 5, 6, 5]], 2) == []\n    assert candidate([[1, 4, 1, 3], [2, 4, 4, 1], [1, 1, 3, 1], [2, 3, 3, 1]], 0) == [1, 2, 3]\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[4, 2, 1, 7], [3, 3, 7, 1], [5, 5, 8, 2], [5, 1, 3, 1]], 4) == []\n    assert candidate([[1, 5, 7, 2], [2, 10, 7, 10], [6, 8, 2, 2], [9, 4, 1, 2], [1, 7, 4, 1]], 3) == []\n    assert candidate([[5, 5, 3, 5], [4, 2, 5, 9], [4, 6, 6, 1], [4, 5, 3, 6]], 8) == []\n    assert candidate([[1, 1, 2, 1], [1, 1, 3, 2], [2, 3, 3, 2], [1, 2, 3, 2], [1, 1, 1, 3], [2, 2, 1, 2]], 3) == []\n    assert candidate([[4, 1, 3, 5], [4, 7, 1, 6], [7, 3, 5, 4], [2, 4, 2, 7], [6, 3, 4, 7]], 7) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[4, 2, 3, 7], [2, 9, 6, 2], [3, 8, 9, 2], [1, 7, 7, 3], [1, 3, 8, 1], [2, 4, 5, 1], [3, 6, 3, 2], [4, 4, 6, 8]], 4) == []\n    assert candidate([[8, 3, 7, 1], [7, 8, 3, 2], [4, 1, 5, 3], [6, 6, 6, 3], [2, 4, 7, 5]], 2) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[1, 1, 6, 6], [1, 1, 1, 2], [3, 6, 6, 1], [4, 5, 5, 6], [3, 1, 6, 6], [3, 2, 2, 1], [6, 1, 1, 2]], 6) == []\n    assert candidate([[4, 2, 2, 1], [6, 3, 2, 1], [2, 4, 3, 2], [1, 1, 6, 6], [4, 6, 2, 1], [5, 4, 2, 1], [1, 2, 6, 1], [6, 2, 4, 4]], 6) == []\n    assert candidate([[2, 2, 2, 2], [1, 2, 2, 3]], 3) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 0) == [0, 1]\n    assert candidate([[2, 5, 8, 2], [2, 6, 1, 2], [7, 4, 8, 9], [6, 3, 1, 4], [7, 1, 6, 7], [4, 6, 2, 7], [8, 2, 2, 7], [4, 5, 3, 8], [1, 2, 6, 4]], 2) == [3, 6]\n    assert candidate([[4, 2, 4, 1], [6, 1, 2, 6], [4, 3, 3, 2]], 8) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[6, 4, 3, 5], [7, 4, 2, 6], [1, 4, 2, 1], [4, 5, 4, 5], [7, 2, 2, 7], [7, 5, 4, 3], [2, 7, 1, 3], [6, 7, 2, 2], [4, 7, 4, 1], [7, 3, 2, 1]], 1) == [0, 1, 3, 5]\n    assert candidate([[4, 10, 5, 8], [8, 8, 9, 8], [7, 1, 5, 4], [8, 9, 2, 2], [2, 2, 8, 7], [6, 8, 10, 3], [6, 8, 4, 4], [5, 4, 10, 5], [3, 7, 8, 2]], 1) == [8]\n    assert candidate([[7, 5, 4, 2], [2, 1, 3, 6], [7, 2, 2, 3], [1, 4, 7, 3]], 3) == []\n    assert candidate([[2, 3, 3, 3], [3, 2, 1, 3], [2, 2, 3, 2], [3, 1, 2, 2], [1, 2, 2, 1], [2, 3, 3, 3], [3, 1, 2, 2]], 1) == [3, 6]\n    assert candidate([[10, 2, 6, 2], [8, 10, 5, 7]], 0) == [0]\n    assert candidate([[6, 8, 3, 6], [4, 8, 3, 1], [6, 8, 6, 5], [7, 4, 7, 1], [5, 2, 1, 5], [2, 3, 5, 7], [3, 2, 6, 3], [4, 3, 7, 1]], 6) == []\n    assert candidate([[5, 5, 5, 1], [6, 1, 3, 2], [3, 1, 2, 6], [2, 6, 6, 5], [6, 1, 3, 6], [4, 2, 3, 1], [2, 5, 3, 5], [6, 6, 6, 2]], 4) == []\n    assert candidate([[1, 1, 1, 2], [2, 1, 1, 1], [2, 1, 1, 1], [1, 1, 1, 1], [2, 1, 2, 2], [2, 2, 2, 2], [1, 1, 1, 1], [1, 2, 2, 2], [1, 2, 1, 1]], 0) == [1, 2, 3, 4, 5, 6, 8]\n    assert candidate([[9, 4, 4, 9], [9, 4, 2, 6], [7, 5, 1, 4], [9, 2, 2, 3], [6, 5, 1, 2], [2, 7, 2, 9], [1, 8, 1, 6], [5, 4, 9, 7], [8, 1, 7, 4]], 1) == [0, 1, 3, 5, 6]\n    assert candidate([[1, 3, 1, 3], [2, 1, 3, 2], [2, 2, 1, 1], [1, 2, 1, 3]], 2) == []\n    assert candidate([[3, 5, 5, 1], [4, 2, 6, 3], [3, 5, 6, 6], [5, 3, 1, 1], [5, 1, 3, 4], [6, 1, 6, 1]], 1) == [4]\n    assert candidate([[1, 2, 1, 2], [1, 2, 1, 2]], 0) == []\n    assert candidate([[1, 4, 2, 4], [5, 5, 3, 5], [3, 5, 3, 4], [2, 4, 5, 5], [5, 4, 4, 5], [2, 2, 2, 3]], 5) == []\n    assert candidate([[1, 4, 4, 4], [5, 2, 4, 4], [1, 1, 5, 3], [3, 4, 1, 2], [3, 1, 2, 3], [4, 3, 3, 3], [3, 5, 4, 1], [2, 1, 4, 5], [3, 3, 1, 3]], 1) == [0, 1, 2, 3, 5, 7, 8]\n    assert candidate([[1, 1, 6, 1], [3, 8, 4, 7], [8, 5, 5, 9], [4, 9, 1, 3], [9, 1, 1, 9]], 0) == [0, 4]\n    assert candidate([[2, 1, 2, 2], [2, 2, 2, 1], [2, 1, 2, 2], [1, 2, 1, 1], [2, 1, 2, 2], [2, 2, 2, 2]], 1) == []\n    assert candidate([[5, 7, 4, 2], [2, 8, 10, 10], [4, 4, 7, 2], [7, 4, 4, 6]], 10) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 0) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([[9, 3, 6, 3], [9, 7, 2, 5], [2, 8, 9, 9], [4, 7, 7, 4], [2, 7, 3, 9], [8, 5, 5, 3], [7, 5, 4, 3], [9, 9, 2, 9], [9, 4, 8, 8]], 4) == []\n    assert candidate([[7, 5, 2, 3], [1, 7, 2, 3], [9, 1, 7, 1]], 3) == []\n    assert candidate([[2, 5, 7, 3], [2, 6, 5, 1], [4, 3, 6, 5]], 3) == []\n    assert candidate([[7, 8, 1, 1], [1, 5, 4, 1], [4, 7, 8, 9], [7, 9, 2, 4], [5, 1, 4, 3], [3, 9, 4, 1], [6, 6, 1, 8], [4, 8, 5, 1], [1, 4, 5, 9]], 1) == [3, 4, 8]\n    assert candidate([[5, 1, 6, 1], [3, 6, 5, 2], [4, 2, 5, 4], [2, 3, 5, 2], [2, 4, 3, 1], [3, 2, 3, 6], [6, 2, 4, 6], [6, 3, 3, 2]], 0) == [0, 2, 3, 4, 6, 7]\n    assert candidate([[3, 2, 5, 3], [9, 4, 2, 4], [2, 4, 7, 7], [1, 4, 9, 2], [5, 1, 5, 5], [9, 5, 6, 7], [9, 1, 4, 7]], 5) == []\n    assert candidate([[3, 2, 2, 2], [3, 1, 3, 2], [2, 1, 2, 2], [3, 2, 3, 3], [1, 1, 2, 3], [1, 1, 3, 1]], 0) == [2, 3, 5]\n    assert candidate([[1, 5, 2, 1], [3, 5, 3, 2], [1, 2, 4, 1], [1, 4, 1, 4], [4, 4, 1, 3], [4, 2, 4, 5], [2, 2, 4, 1], [2, 1, 3, 3]], 4) == []\n    assert candidate([[3, 2, 7, 6], [10, 6, 5, 10], [2, 4, 10, 7], [9, 5, 8, 6], [10, 6, 3, 10], [9, 6, 5, 2], [8, 10, 1, 2], [7, 1, 8, 8], [7, 7, 4, 8], [8, 3, 8, 1]], 4) == []\n    assert candidate([[6, 6, 5, 2], [3, 5, 4, 3], [2, 4, 3, 3], [6, 3, 4, 4], [4, 1, 3, 6], [1, 6, 3, 5], [3, 3, 5, 5]], 0) == [0, 1, 2, 3]\n    assert candidate([[10, 3, 8, 9], [9, 1, 5, 5], [4, 5, 10, 5], [9, 8, 3, 5], [3, 5, 4, 7], [1, 10, 2, 3], [6, 2, 4, 8], [6, 4, 3, 2], [5, 9, 9, 2]], 8) == []\n    assert candidate([[7, 7, 4, 3], [2, 10, 10, 4], [8, 1, 9, 1], [9, 7, 7, 9], [8, 9, 8, 5], [9, 8, 4, 2], [1, 9, 3, 8], [6, 8, 3, 1]], 8) == []\n    assert candidate([[9, 8, 1, 4], [5, 2, 7, 4], [5, 6, 3, 4], [9, 5, 9, 8], [2, 1, 10, 10], [10, 9, 9, 2], [8, 5, 2, 3], [10, 10, 3, 8], [1, 7, 8, 1], [1, 4, 3, 5]], 2) == []\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1) == []\n    assert candidate([[2, 3, 4, 4], [2, 3, 7, 2], [4, 2, 6, 3], [2, 3, 3, 6], [5, 1, 2, 7], [7, 6, 7, 1]], 5) == []\n    assert candidate([[3, 3, 8, 8], [2, 5, 6, 5], [8, 1, 2, 3], [1, 4, 8, 7], [8, 5, 5, 7], [6, 6, 3, 9], [5, 6, 7, 1], [4, 7, 5, 1], [1, 5, 1, 5], [5, 3, 2, 1]], 2) == []\n    assert candidate([[3, 1, 7, 8], [4, 3, 7, 8], [7, 4, 2, 2]], 1) == [2]\n    assert candidate([[4, 4, 8, 8], [4, 7, 8, 7], [1, 4, 8, 2], [5, 5, 6, 4], [7, 8, 4, 3], [8, 6, 2, 1]], 1) == [2, 3, 4]\n    assert candidate([[2, 5, 2, 5], [1, 1, 4, 1], [3, 2, 4, 3], [3, 1, 3, 4]], 1) == []\n    assert candidate([[2, 2, 1, 2], [2, 2, 2, 2], [2, 2, 1, 2]], 2) == []\n    assert candidate([[7, 6, 4, 6], [3, 7, 2, 3], [7, 7, 1, 7], [7, 7, 6, 5], [6, 1, 1, 4], [1, 4, 2, 3], [1, 2, 4, 2], [3, 2, 2, 1], [7, 6, 2, 5], [2, 4, 5, 7]], 7) == []\n    assert candidate([[1, 1, 2, 1], [1, 1, 1, 2], [1, 1, 2, 1], [2, 1, 1, 2], [1, 1, 2, 1], [2, 1, 1, 1]], 2) == []\n    assert candidate([[4, 5, 8, 5], [4, 2, 9, 9], [2, 3, 3, 3], [8, 6, 3, 1]], 2) == [2]\n    assert candidate([[4, 1, 4, 2], [3, 4, 3, 4], [5, 5, 1, 5], [5, 1, 1, 4], [4, 2, 1, 5], [5, 2, 1, 1], [1, 4, 1, 4], [1, 4, 5, 5], [5, 1, 4, 5], [1, 2, 1, 2]], 2) == []\n    assert candidate([[3, 1, 3, 3], [1, 2, 1, 2], [3, 1, 1, 3], [2, 2, 1, 1], [3, 3, 2, 2], [2, 3, 1, 1]], 0) == [0, 2, 3, 5]\n\ndef test_check():\n    check(getGoodIndices)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3235_minimumCost", "language": "py", "prompt": "from typing import List\n\ndef minimumCost(source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n    \"\"\"You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].\nYou start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.\nReturn the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.\nNote that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].\nExample 1:\nInput: source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]\nOutput: 28\nExplanation: To convert the string \"abcd\" to string \"acbe\":\n- Change value at index 1 from 'b' to 'c' at a cost of 5.\n- Change value at index 2 from 'c' to 'e' at a cost of 1.\n- Change value at index 2 from 'e' to 'b' at a cost of 2.\n- Change value at index 3 from 'd' to 'e' at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28.\nIt can be shown that this is the minimum possible cost.\nExample 2:\nInput: source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2]\nOutput: 12\nExplanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.\nExample 3:\nInput: source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000]\nOutput: -1\nExplanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.\nConstraints:\n1 <= source.length == target.length <= 105\nsource, target consist of lowercase English letters.\n1 <= cost.length == original.length == changed.length <= 2000\noriginal[i], changed[i] are lowercase English letters.\n1 <= cost[i] <= 106\noriginal[i] != changed[i]\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3235_minimumCost.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abcd, acbe, ['a', 'b', 'c', 'c', 'e', 'd'], ['b', 'c', 'b', 'e', 'b', 'e'], [2, 5, 5, 1, 2, 20]) == 28\n    assert candidate(aaaa, bbbb, ['a', 'c'], ['c', 'b'], [1, 2]) == 12\n    assert candidate(abcd, abce, ['a'], ['e'], [10000]) == -1\n    assert candidate(aaaabadaaa, dbdadddbad, ['c', 'a', 'c', 'a', 'a', 'b', 'b', 'b', 'd', 'd', 'c'], ['a', 'c', 'b', 'd', 'b', 'c', 'a', 'd', 'c', 'b', 'd'], [7, 8, 11, 9, 7, 6, 4, 6, 9, 5, 9]) == 56\n    assert candidate(aaadbdcdac, cdbabaddba, ['a', 'c', 'b', 'd', 'b', 'a', 'c'], ['c', 'a', 'd', 'b', 'c', 'b', 'd'], [7, 2, 1, 3, 6, 1, 7]) == 39\n    assert candidate(aababdaacb, bcdcdcbdcb, ['a', 'd', 'd', 'a', 'c', 'b', 'c', 'a', 'c', 'd', 'b', 'b'], ['b', 'c', 'b', 'd', 'a', 'a', 'b', 'c', 'd', 'a', 'c', 'd'], [11, 4, 3, 2, 7, 11, 7, 6, 9, 2, 1, 7]) == 42\n    assert candidate(aababdbddc, adcbbbcdba, ['a', 'd', 'b', 'a', 'd', 'c', 'd', 'b'], ['b', 'a', 'd', 'c', 'c', 'a', 'b', 'a'], [10, 6, 8, 3, 6, 10, 8, 6]) == 72\n    assert candidate(aabbcabbdb, acddbabbdd, ['c', 'd', 'c', 'a', 'd', 'c', 'a', 'd', 'b', 'a', 'b'], ['d', 'b', 'a', 'c', 'c', 'b', 'b', 'a', 'd', 'd', 'c'], [5, 3, 8, 10, 9, 7, 8, 7, 5, 1, 10]) == 32\n    assert candidate(aabbddccbc, abbbaabaca, ['a', 'b', 'c', 'b', 'a', 'd'], ['d', 'c', 'b', 'd', 'b', 'b'], [3, 8, 7, 6, 7, 10]) == -1\n    assert candidate(aabdbaabaa, bdaacabcab, ['b', 'd', 'd', 'a', 'c', 'c', 'a', 'd', 'a', 'b'], ['c', 'c', 'b', 'd', 'b', 'd', 'b', 'a', 'c', 'a'], [9, 1, 7, 9, 2, 1, 3, 8, 8, 2]) == 43\n    assert candidate(aacacaaccd, dadaacaabd, ['c', 'c', 'a', 'a', 'd', 'b', 'd', 'd'], ['b', 'd', 'd', 'b', 'b', 'c', 'c', 'a'], [7, 8, 9, 11, 4, 6, 9, 10]) == 77\n    assert candidate(aacbabbacc, adbdbcbdaa, ['c', 'b', 'a', 'b', 'a', 'c', 'd', 'c', 'd'], ['b', 'c', 'b', 'd', 'd', 'a', 'b', 'd', 'c'], [2, 6, 7, 4, 7, 4, 3, 5, 6]) == 41\n    assert candidate(aacbbabdad, ddadcababd, ['d', 'b', 'c', 'a', 'b', 'c', 'd', 'c', 'b', 'a', 'a'], ['c', 'd', 'd', 'b', 'c', 'b', 'b', 'a', 'a', 'c', 'd'], [7, 10, 4, 2, 7, 4, 4, 4, 6, 2, 8]) == 45\n    assert candidate(aacbbbbcab, cdacdcddac, ['b', 'd', 'c', 'c', 'b', 'a'], ['c', 'c', 'b', 'a', 'a', 'd'], [4, 7, 9, 11, 3, 4]) == 67\n    assert candidate(aacbcabcad, bbcadddcdd, ['b', 'a', 'd', 'a', 'b', 'c', 'a', 'd', 'd', 'b'], ['d', 'b', 'b', 'd', 'c', 'a', 'c', 'c', 'a', 'a'], [7, 7, 9, 8, 6, 3, 8, 2, 1, 5]) == 53\n    assert candidate(aacbdbcdca, bbbdbcaacd, ['a', 'c', 'b', 'd', 'd', 'a', 'c', 'd'], ['c', 'b', 'c', 'c', 'b', 'd', 'd', 'a'], [9, 5, 4, 1, 2, 4, 7, 1]) == 47\n    assert candidate(aadbbcdbbd, badddbdbac, ['c', 'd', 'c', 'd', 'b', 'a'], ['b', 'b', 'a', 'a', 'a', 'd'], [11, 4, 7, 8, 5, 2]) == -1\n    assert candidate(aadbccbddd, cacdbabadc, ['d', 'b', 'c', 'd', 'a', 'a', 'c', 'b'], ['c', 'c', 'b', 'b', 'b', 'd', 'a', 'a'], [5, 8, 7, 2, 4, 7, 1, 5]) == 46\n    assert candidate(aadbddcabd, bdcdccbada, ['d', 'a', 'a', 'b', 'd', 'b'], ['b', 'c', 'd', 'c', 'a', 'd'], [6, 10, 5, 8, 11, 4]) == -1\n    assert candidate(aaddadccad, cbaaadbcba, ['c', 'a', 'a', 'd', 'c', 'c', 'b', 'b', 'a', 'd'], ['a', 'c', 'd', 'c', 'd', 'b', 'd', 'c', 'b', 'b'], [1, 10, 2, 8, 9, 1, 9, 10, 5, 1]) == 44\n    assert candidate(aaddadcdba, caaaccbbca, ['b', 'b', 'c', 'd', 'b', 'c', 'a', 'a'], ['a', 'd', 'd', 'a', 'c', 'b', 'c', 'b'], [11, 7, 10, 8, 7, 5, 10, 10]) == 84\n    assert candidate(abaacbbcaa, bdbdbcbdcd, ['d', 'a', 'd', 'a', 'b', 'b'], ['a', 'd', 'b', 'b', 'a', 'c'], [10, 9, 8, 11, 4, 11]) == -1\n    assert candidate(abacaadcba, cadbadcdbd, ['b', 'd', 'c', 'a', 'b', 'd', 'b'], ['a', 'b', 'b', 'b', 'c', 'a', 'd'], [9, 10, 6, 2, 7, 10, 9]) == 89\n    assert candidate(abacbadadc, aabbdaaccb, ['d', 'a', 'b', 'd', 'a', 'a', 'c', 'b', 'c', 'c', 'd', 'b'], ['c', 'b', 'a', 'a', 'd', 'c', 'b', 'c', 'd', 'a', 'b', 'd'], [2, 10, 3, 6, 4, 1, 5, 5, 11, 4, 2, 1]) == 28\n    assert candidate(abadbbabcd, cdcbdddcbb, ['d', 'd', 'b', 'a', 'c', 'c', 'c', 'a'], ['c', 'a', 'a', 'c', 'b', 'd', 'a', 'd'], [2, 10, 11, 7, 6, 11, 7, 1]) == 79\n    assert candidate(abadcadacc, cbabaddcba, ['a', 'd', 'a', 'b', 'c', 'a', 'd', 'b', 'b', 'd', 'c', 'c'], ['b', 'b', 'd', 'd', 'a', 'c', 'a', 'c', 'a', 'c', 'd', 'b'], [7, 6, 11, 11, 8, 10, 4, 11, 2, 3, 11, 7]) == 60\n    assert candidate(abadcdadac, baddbccdac, ['d', 'c', 'd', 'c', 'b', 'a'], ['b', 'b', 'c', 'a', 'd', 'd'], [8, 5, 9, 1, 10, 2]) == 57\n    assert candidate(abbaadacba, cdbbcadddd, ['d', 'a', 'd', 'c', 'b', 'b', 'c', 'd', 'c', 'a', 'a'], ['a', 'c', 'c', 'd', 'a', 'd', 'a', 'b', 'b', 'd', 'b'], [8, 3, 5, 8, 3, 9, 3, 4, 11, 4, 9]) == 50\n    assert candidate(abbaddaacd, ccbbaccacc, ['d', 'd', 'a', 'b', 'c', 'b'], ['a', 'c', 'c', 'd', 'b', 'c'], [9, 8, 2, 8, 3, 1]) == 35\n    assert candidate(abbbcabddb, bbccdbbadc, ['c', 'd', 'c', 'a', 'b', 'd', 'd', 'a', 'b', 'b'], ['d', 'a', 'b', 'c', 'c', 'b', 'c', 'd', 'a', 'd'], [3, 6, 9, 4, 9, 6, 9, 6, 10, 7]) == 60\n    assert candidate(abbbcbabab, abcacbaddd, ['b', 'c', 'a', 'c', 'a', 'd', 'd', 'c'], ['a', 'b', 'd', 'a', 'b', 'b', 'c', 'd'], [11, 5, 8, 1, 7, 7, 1, 2]) == 77\n    assert candidate(abbcaccabb, ddddddcacc, ['a', 'b', 'c', 'b', 'a', 'c', 'c'], ['c', 'c', 'd', 'a', 'd', 'a', 'b'], [2, 6, 10, 11, 9, 7, 3]) == 82\n    assert candidate(abbcaccdba, accadababc, ['d', 'a', 'a', 'c', 'b', 'd'], ['c', 'd', 'b', 'a', 'a', 'b'], [7, 4, 10, 11, 5, 5]) == 99\n    assert candidate(abbdaccada, acddaccddc, ['b', 'b', 'c', 'a', 'd', 'a', 'd'], ['a', 'c', 'b', 'b', 'b', 'c', 'c'], [4, 9, 3, 1, 11, 3, 3]) == -1\n    assert candidate(abcabdaddb, dcbadaaacc, ['d', 'b', 'a', 'a', 'c', 'c'], ['c', 'c', 'd', 'b', 'b', 'a'], [3, 3, 9, 3, 7, 6]) == 61\n    assert candidate(abcadcabaa, bbbdddcaba, ['b', 'd', 'c', 'd', 'a', 'c', 'b', 'b'], ['c', 'b', 'a', 'a', 'c', 'b', 'd', 'a'], [1, 8, 4, 3, 8, 3, 11, 5]) == 74\n    assert candidate(abccabacaa, aaabacbcbb, ['c', 'c', 'd', 'a', 'd', 'b', 'c', 'b', 'd', 'a'], ['b', 'a', 'a', 'b', 'b', 'd', 'd', 'a', 'c', 'c'], [9, 10, 8, 6, 9, 10, 2, 6, 6, 8]) == 57\n    assert candidate(abdaababbb, dbdadabadc, ['a', 'c', 'c', 'b', 'd', 'a', 'b'], ['c', 'a', 'b', 'c', 'b', 'b', 'd'], [3, 4, 6, 1, 8, 11, 6]) == 56\n    assert candidate(abdbaaacaa, abbbccccad, ['a', 'a', 'c', 'b', 'd', 'd', 'b'], ['d', 'b', 'b', 'a', 'a', 'b', 'c'], [3, 10, 7, 2, 5, 7, 3]) == 49\n    assert candidate(abdcbdbccc, dbbcdcabba, ['c', 'c', 'd', 'b', 'a', 'c', 'a', 'd', 'b', 'd', 'a', 'b'], ['d', 'a', 'b', 'd', 'c', 'b', 'b', 'a', 'c', 'c', 'd', 'a'], [9, 5, 9, 6, 5, 5, 5, 10, 7, 7, 3, 6]) == 46\n    assert candidate(acabbbdbdb, accbccbbab, ['b', 'd', 'c', 'd', 'b', 'c'], ['a', 'a', 'a', 'c', 'd', 'd'], [7, 7, 10, 9, 7, 1]) == -1\n    assert candidate(acadadccbb, dcaaabbbdd, ['a', 'c', 'c', 'a', 'd', 'b', 'b', 'd', 'b', 'a'], ['d', 'd', 'b', 'b', 'c', 'd', 'a', 'a', 'c', 'c'], [1, 2, 1, 4, 9, 4, 8, 5, 11, 7]) == 25\n    assert candidate(acadbbcdcb, bcacabdcdd, ['a', 'b', 'd', 'b', 'b', 'c', 'a'], ['d', 'c', 'c', 'a', 'd', 'b', 'b'], [3, 6, 3, 10, 11, 3, 6]) == 61\n    assert candidate(acaddccaad, daacadcdda, ['c', 'c', 'a', 'b', 'b', 'a', 'b', 'd', 'c', 'a', 'd'], ['a', 'b', 'b', 'd', 'a', 'd', 'c', 'b', 'd', 'c', 'c'], [10, 8, 4, 8, 3, 1, 2, 8, 11, 8, 6]) == 52\n    assert candidate(acbbabcaac, bdcbaadcab, ['d', 'c', 'a', 'c', 'b', 'a', 'a', 'b', 'c', 'd'], ['a', 'a', 'd', 'd', 'c', 'c', 'b', 'a', 'b', 'c'], [9, 11, 8, 6, 11, 11, 1, 1, 9, 9]) == 45\n    assert candidate(accabbadbc, adbbccbcbd, ['a', 'c', 'a', 'd', 'b', 'a', 'c', 'c', 'b', 'b'], ['c', 'd', 'b', 'c', 'd', 'd', 'b', 'a', 'c', 'a'], [7, 10, 9, 3, 2, 5, 1, 8, 11, 2]) == 36\n    assert candidate(accabbdddd, cacdccbcad, ['c', 'a', 'd', 'b', 'd', 'c', 'a', 'b', 'b', 'c', 'd'], ['d', 'b', 'a', 'd', 'c', 'a', 'd', 'a', 'c', 'b', 'b'], [11, 6, 6, 4, 7, 11, 2, 7, 7, 7, 2]) == 51\n    assert candidate(accbaadbdb, baccbaacbb, ['b', 'b', 'a', 'd', 'd', 'a', 'c'], ['a', 'd', 'd', 'b', 'a', 'c', 'a'], [9, 11, 6, 7, 4, 2, 2]) == 61\n    assert candidate(accbddaaab, baddbaabbd, ['a', 'b', 'c', 'd', 'd', 'b', 'd', 'b'], ['b', 'a', 'a', 'b', 'a', 'c', 'c', 'd'], [6, 3, 4, 6, 1, 6, 10, 6]) == 57\n    assert candidate(acccbcdccb, bdadccdbad, ['a', 'b', 'c', 'c', 'a', 'd', 'd'], ['b', 'c', 'a', 'd', 'c', 'a', 'c'], [8, 1, 1, 9, 3, 10, 4]) == 48\n    assert candidate(accccbccda, daadbbcaac, ['a', 'c', 'a', 'a', 'd', 'd'], ['c', 'd', 'd', 'b', 'b', 'c'], [3, 6, 6, 10, 9, 8]) == -1\n    assert candidate(acdacbdadb, aacccbbacd, ['b', 'b', 'a', 'a', 'd', 'c'], ['d', 'a', 'b', 'd', 'a', 'a'], [6, 1, 9, 6, 8, 11]) == -1\n    assert candidate(acdbcdadbd, daaadaaadd, ['c', 'a', 'b', 'b', 'b', 'd', 'a'], ['d', 'c', 'd', 'c', 'a', 'b', 'd'], [3, 9, 4, 6, 1, 9, 3]) == 54\n    assert candidate(acddadcbca, ddaabaaaac, ['b', 'd', 'c', 'a', 'b', 'd', 'c', 'b', 'd', 'c', 'a'], ['c', 'a', 'b', 'c', 'd', 'c', 'a', 'a', 'b', 'd', 'd'], [7, 8, 2, 10, 1, 7, 8, 1, 1, 11, 4]) == 35\n    assert candidate(adaadcaddd, cdddbdccad, ['c', 'c', 'c', 'd', 'b', 'a', 'd'], ['d', 'a', 'b', 'b', 'd', 'b', 'c'], [10, 9, 2, 2, 7, 1, 10]) == 92\n    assert candidate(adaaddacba, aabbddbbdd, ['c', 'b', 'a', 'b', 'c', 'b'], ['b', 'c', 'b', 'a', 'd', 'd'], [10, 7, 7, 6, 8, 5]) == -1\n    assert candidate(adacdcdacd, ccbabbbbdc, ['a', 'b', 'c', 'a', 'd', 'b', 'a', 'c'], ['c', 'd', 'd', 'd', 'a', 'c', 'b', 'a'], [4, 3, 1, 1, 6, 4, 10, 6]) == 99\n    assert candidate(adadbabcdd, abbcdcbdba, ['c', 'd', 'b', 'a', 'c', 'b', 'a'], ['d', 'b', 'd', 'b', 'b', 'a', 'c'], [11, 10, 6, 1, 5, 3, 8]) == 80\n    assert candidate(adadcabbda, cabadddccc, ['c', 'a', 'b', 'b', 'a', 'd', 'd'], ['b', 'd', 'd', 'c', 'b', 'c', 'b'], [7, 2, 8, 4, 4, 4, 7]) == -1\n    assert candidate(adbaabacdc, bccbbadcdc, ['c', 'b', 'b', 'd', 'c', 'a', 'b'], ['b', 'a', 'c', 'a', 'a', 'd', 'd'], [5, 2, 6, 1, 7, 7, 1]) == -1\n    assert candidate(adbadbaacb, bccdbdccab, ['d', 'a', 'c', 'b', 'c', 'd', 'a', 'b', 'c', 'b', 'a', 'd'], ['a', 'c', 'b', 'c', 'a', 'b', 'b', 'd', 'd', 'a', 'd', 'c'], [3, 7, 7, 9, 2, 9, 10, 2, 9, 5, 11, 8]) == 65\n    assert candidate(adbcdaddda, cbdccabcbc, ['c', 'a', 'd', 'd', 'b', 'b', 'b'], ['a', 'c', 'c', 'a', 'd', 'c', 'a'], [8, 5, 5, 10, 10, 3, 9]) == -1\n    assert candidate(adcacaaabb, daaadadcbb, ['d', 'b', 'a', 'a', 'd', 'c', 'b', 'b', 'd', 'c', 'c', 'a'], ['b', 'c', 'd', 'c', 'c', 'a', 'a', 'd', 'a', 'b', 'd', 'b'], [2, 3, 2, 4, 5, 9, 11, 3, 10, 1, 9, 2]) == 31\n    assert candidate(adcbbbdada, cdaabadcdc, ['a', 'a', 'b', 'c', 'd', 'b', 'd'], ['c', 'd', 'c', 'd', 'a', 'a', 'c'], [11, 11, 2, 8, 5, 7, 5]) == 60\n    assert candidate(adccbabbca, dcdbbdabba, ['a', 'd', 'd', 'b', 'c', 'b', 'a'], ['c', 'b', 'c', 'c', 'a', 'd', 'd'], [5, 10, 10, 1, 6, 7, 7]) == 90\n    assert candidate(adcdcbacab, acddaddadc, ['b', 'd', 'c', 'd', 'c', 'd', 'b', 'c', 'a', 'a', 'a', 'b'], ['a', 'b', 'b', 'c', 'a', 'a', 'd', 'd', 'c', 'b', 'd', 'c'], [2, 11, 11, 9, 1, 3, 6, 9, 6, 4, 8, 5]) == 47\n    assert candidate(addbaccbbd, cabdcdadcc, ['b', 'd', 'd', 'd', 'c', 'b', 'a', 'c', 'c'], ['a', 'c', 'a', 'b', 'b', 'd', 'd', 'a', 'd'], [10, 11, 5, 6, 10, 1, 4, 8, 8]) == 82\n    assert candidate(addbacdaac, abddcadbcb, ['d', 'a', 'c', 'b', 'a', 'c', 'a', 'd', 'c', 'd', 'b'], ['c', 'c', 'b', 'd', 'd', 'd', 'b', 'b', 'a', 'a', 'c'], [9, 2, 9, 4, 11, 6, 10, 3, 7, 2, 5]) == 37\n    assert candidate(addbcccdcb, cbbdbddacb, ['d', 'c', 'a', 'a', 'b', 'b', 'c'], ['c', 'd', 'b', 'd', 'd', 'c', 'b'], [2, 6, 4, 3, 7, 7, 8]) == -1\n    assert candidate(addcadccaa, dbbcaccabc, ['a', 'b', 'd', 'b', 'd', 'a', 'c', 'b', 'a', 'c'], ['c', 'd', 'a', 'c', 'b', 'b', 'd', 'a', 'd', 'a'], [8, 11, 5, 1, 11, 4, 3, 8, 11, 4]) == 49\n    assert candidate(addcdbdadb, bcabdcccbd, ['b', 'b', 'a', 'c', 'd', 'a', 'b', 'c', 'a'], ['a', 'c', 'c', 'a', 'a', 'b', 'd', 'b', 'd'], [2, 4, 8, 8, 3, 5, 2, 7, 2]) == 59\n    assert candidate(adddbbdbdb, cdbadcaccc, ['b', 'c', 'c', 'b', 'a', 'c', 'b', 'a', 'a', 'd', 'd'], ['d', 'a', 'b', 'a', 'b', 'd', 'c', 'c', 'd', 'a', 'c'], [1, 1, 1, 8, 6, 9, 3, 6, 5, 3, 10]) == 40\n    assert candidate(adddccacca, cdcdcccdac, ['d', 'c', 'a', 'd', 'b', 'b', 'b', 'a', 'd', 'a', 'c', 'c'], ['c', 'a', 'c', 'a', 'd', 'a', 'c', 'b', 'b', 'd', 'd', 'b'], [7, 7, 6, 10, 1, 1, 11, 5, 3, 2, 10, 3]) == 33\n    assert candidate(baacbbcdaa, abdbdbbabd, ['c', 'd', 'c', 'b', 'a', 'c', 'b', 'd', 'b'], ['d', 'c', 'b', 'a', 'd', 'a', 'd', 'a', 'c'], [9, 5, 5, 2, 9, 4, 5, 3, 6]) == 76\n    assert candidate(baadcdabbc, acbccadccd, ['b', 'b', 'a', 'a', 'a', 'd', 'd', 'd', 'c', 'c', 'b'], ['c', 'a', 'c', 'b', 'd', 'c', 'a', 'b', 'b', 'd', 'd'], [8, 6, 5, 10, 11, 1, 1, 6, 3, 1, 4]) == 37\n    assert candidate(baadcdabda, abdbcdaaca, ['b', 'b', 'c', 'd', 'd', 'a', 'c'], ['d', 'a', 'a', 'b', 'c', 'b', 'd'], [11, 8, 7, 3, 10, 4, 1]) == 48\n    assert candidate(babababdba, ccdaaabbac, ['c', 'd', 'b', 'a', 'd', 'a', 'b'], ['b', 'a', 'd', 'c', 'c', 'd', 'c'], [8, 5, 6, 2, 8, 6, 8]) == 55\n    assert candidate(babbacabba, adacccdcba, ['c', 'd', 'd', 'd', 'c', 'b', 'b', 'b', 'a'], ['a', 'b', 'c', 'a', 'd', 'a', 'c', 'd', 'c'], [1, 1, 8, 3, 2, 2, 11, 8, 3]) == 27\n    assert candidate(babbadbabc, ccdabbcbba, ['a', 'c', 'd', 'a', 'b', 'd', 'b', 'b'], ['b', 'd', 'c', 'd', 'a', 'a', 'c', 'd'], [3, 3, 1, 4, 4, 8, 2, 9]) == 46\n    assert candidate(bacbddaacb, dcdaaadcda, ['a', 'd', 'a', 'a', 'd', 'c', 'b', 'c', 'c', 'b'], ['d', 'c', 'c', 'b', 'b', 'b', 'a', 'a', 'd', 'c'], [8, 5, 1, 10, 8, 6, 2, 1, 6, 8]) == 46\n    assert candidate(baccbbcdcb, cabadbbacc, ['c', 'a', 'c', 'b', 'c', 'd', 'a', 'b', 'd', 'b'], ['a', 'b', 'b', 'a', 'd', 'b', 'c', 'd', 'c', 'c'], [4, 4, 2, 11, 9, 9, 1, 4, 6, 1]) == 24\n    assert candidate(bacdbbcdba, cdcdddbbcd, ['d', 'a', 'c', 'b', 'd', 'a', 'b', 'c', 'b', 'c', 'd'], ['c', 'c', 'a', 'd', 'b', 'b', 'a', 'd', 'c', 'b', 'a'], [3, 8, 4, 6, 5, 8, 6, 2, 1, 6, 2]) == 39\n    assert candidate(bacdbccabb, caaccdbaac, ['c', 'd', 'd', 'a', 'd', 'c'], ['d', 'b', 'a', 'b', 'c', 'a'], [8, 4, 4, 4, 3, 6]) == -1\n    assert candidate(bacddacdba, bcbbaacdda, ['b', 'c', 'c', 'd', 'd', 'b', 'b', 'd', 'a', 'a', 'c', 'a'], ['a', 'b', 'd', 'b', 'a', 'c', 'd', 'c', 'c', 'd', 'a', 'b'], [5, 6, 7, 4, 4, 8, 8, 6, 8, 3, 6, 11]) == 30\n    assert candidate(badaabbaba, caadbcadcd, ['b', 'c', 'a', 'c', 'd', 'a', 'b', 'd', 'd', 'b', 'c'], ['c', 'a', 'd', 'b', 'a', 'c', 'd', 'c', 'b', 'a', 'd'], [4, 8, 6, 3, 1, 8, 3, 8, 3, 6, 9]) == 44\n    assert candidate(badabbbbac, dacaabbcaa, ['d', 'b', 'a', 'd', 'c', 'b', 'd', 'c', 'a', 'c', 'a'], ['b', 'c', 'd', 'c', 'a', 'd', 'a', 'd', 'c', 'b', 'b'], [11, 5, 9, 7, 11, 11, 7, 9, 6, 11, 5]) == 50\n    assert candidate(badaccbdbd, dbbdacaaab, ['b', 'd', 'b', 'c', 'b', 'd', 'a', 'd', 'a', 'a', 'c', 'c'], ['d', 'a', 'a', 'a', 'c', 'b', 'd', 'c', 'b', 'c', 'd', 'b'], [3, 9, 3, 11, 11, 6, 2, 11, 11, 2, 11, 1]) == 39\n    assert candidate(badadcccba, bbdbababcc, ['c', 'c', 'a', 'd', 'd', 'd'], ['a', 'd', 'b', 'a', 'b', 'c'], [1, 3, 2, 2, 4, 4]) == -1\n    assert candidate(badbbbccdb, bbbabbccbd, ['a', 'c', 'a', 'c', 'd', 'c', 'd', 'b', 'd', 'b', 'a'], ['c', 'b', 'd', 'd', 'c', 'a', 'b', 'd', 'a', 'c', 'b'], [5, 4, 5, 3, 4, 4, 6, 3, 8, 11, 4]) == 30\n    assert candidate(badcbccabc, bdcaacbcad, ['d', 'd', 'c', 'd', 'a', 'b', 'c', 'a'], ['a', 'c', 'd', 'b', 'b', 'a', 'b', 'd'], [1, 5, 4, 5, 11, 10, 8, 11]) == 69\n    assert candidate(badcbdddcd, cdcbaddadc, ['c', 'b', 'c', 'd', 'a', 'b', 'b', 'd', 'a', 'c', 'a', 'd'], ['a', 'c', 'b', 'a', 'c', 'd', 'a', 'b', 'd', 'd', 'b', 'c'], [3, 2, 8, 9, 11, 5, 11, 11, 9, 2, 8, 1]) == 32\n    assert candidate(baddbcbdbd, acdbcadabd, ['a', 'b', 'b', 'c', 'a', 'a', 'b', 'd', 'c', 'd', 'd'], ['c', 'a', 'd', 'd', 'b', 'd', 'c', 'c', 'b', 'b', 'a'], [9, 10, 5, 4, 1, 5, 7, 8, 11, 9, 8]) == 59\n    assert candidate(baddbdacad, cadaccbbab, ['b', 'a', 'd', 'a', 'c', 'b', 'd', 'c', 'a', 'd'], ['d', 'b', 'b', 'd', 'a', 'c', 'a', 'b', 'c', 'c'], [3, 5, 6, 7, 2, 4, 4, 2, 3, 9]) == 32\n    assert candidate(bbacdcdcda, cbadabbdcb, ['a', 'd', 'b', 'c', 'b', 'c', 'd', 'a', 'd'], ['b', 'c', 'd', 'a', 'a', 'b', 'b', 'd', 'a'], [11, 6, 2, 8, 5, 7, 5, 8, 9]) == 64\n    assert candidate(bbadbbabbb, cbaaddaddc, ['d', 'a', 'b', 'c', 'd', 'c', 'b'], ['b', 'd', 'c', 'b', 'c', 'd', 'd'], [4, 10, 1, 11, 7, 1, 11]) == -1\n    assert candidate(bbadcbcbbc, aaaccbccbb, ['b', 'd', 'b', 'd', 'a', 'c', 'c', 'a', 'b'], ['c', 'a', 'a', 'b', 'b', 'a', 'b', 'c', 'd'], [8, 5, 9, 4, 1, 10, 1, 11, 4]) == 39\n    assert candidate(bbbadaccbb, dadcaccadb, ['a', 'd', 'd', 'd', 'c', 'b', 'c', 'b', 'c', 'b'], ['d', 'b', 'c', 'a', 'b', 'd', 'd', 'c', 'a', 'a'], [10, 1, 4, 6, 4, 1, 10, 3, 1, 6]) == 41\n    assert candidate(bbbadcbadb, aacbdcddcd, ['a', 'd', 'd', 'c', 'a', 'b', 'c', 'b'], ['d', 'b', 'a', 'a', 'c', 'c', 'b', 'd'], [3, 1, 1, 9, 1, 2, 1, 2]) == 19\n    assert candidate(bbbbabbcbc, adacababac, ['a', 'c', 'a', 'b', 'b', 'd', 'd', 'a', 'd', 'b', 'c'], ['d', 'b', 'c', 'c', 'd', 'a', 'b', 'b', 'c', 'a', 'd'], [7, 9, 9, 7, 3, 2, 6, 8, 11, 5, 8]) == 39\n    assert candidate(bbbbdacbcd, cbadccdaaa, ['d', 'a', 'c', 'b', 'd', 'c', 'a', 'd', 'b', 'a'], ['c', 'c', 'b', 'c', 'a', 'd', 'd', 'b', 'd', 'b'], [2, 9, 11, 3, 6, 11, 6, 4, 5, 5]) == 74\n\ndef test_check():\n    check(minimumCost)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3236_missingInteger", "language": "py", "prompt": "from typing import List\n\ndef missingInteger(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array of integers nums.\nA prefix nums[0..i] is sequential if, for all 1 <= j <= i, nums[j] = nums[j - 1] + 1. In particular, the prefix consisting only of nums[0] is sequential.\nReturn the smallest integer x missing from nums such that x is greater than or equal to the sum of the longest sequential prefix.\nExample 1:\nInput: nums = [1,2,3,2,5]\nOutput: 6\nExplanation: The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\nExample 2:\nInput: nums = [3,4,5,1,12,14,13]\nOutput: 15\nExplanation: The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\nConstraints:\n1 <= nums.length <= 50\n1 <= nums[i] <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3236_missingInteger.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 2, 5]) == 6\n    assert candidate([3, 4, 5, 1, 12, 14, 13]) == 15\n    assert candidate([29, 30, 31, 32, 33, 34, 35, 36, 37]) == 297\n    assert candidate([19, 20, 21, 22]) == 82\n    assert candidate([18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 9]) == 253\n    assert candidate([4, 5, 6, 7, 8, 8, 9, 4, 3, 2, 7]) == 30\n    assert candidate([38]) == 39\n    assert candidate([1]) == 2\n    assert candidate([11, 12, 13]) == 36\n    assert candidate([47, 48, 49, 5, 3]) == 144\n    assert candidate([23, 24, 25, 4, 5, 1]) == 72\n    assert candidate([8, 9, 10, 10, 7, 8]) == 27\n    assert candidate([31, 32, 33, 34, 10, 8, 7, 9, 7, 9, 9, 5, 10, 1]) == 130\n    assert candidate([17, 18, 19, 20, 21, 22, 3, 7, 10, 10]) == 117\n    assert candidate([6, 7, 8, 9, 10, 8, 6, 7, 4, 1]) == 40\n    assert candidate([46, 8, 2, 4, 1, 4, 10, 2, 4, 10, 2, 5, 7, 3, 1]) == 47\n    assert candidate([37, 1, 2, 9, 5, 8, 5, 2, 9, 4]) == 38\n    assert candidate([31, 32, 33, 34, 1]) == 130\n    assert candidate([45, 46, 47, 48, 49, 10, 8, 1, 7, 4, 10, 10, 6, 6, 2]) == 235\n    assert candidate([13, 10, 7, 5, 7, 10, 6, 10, 2]) == 14\n    assert candidate([32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 8, 6]) == 494\n    assert candidate([24, 8, 9]) == 25\n    assert candidate([47, 48, 49, 9, 3, 8, 1, 9, 2, 5, 4, 5, 9]) == 144\n    assert candidate([4, 5, 6, 7, 8, 9, 4, 7, 10, 7, 2]) == 39\n    assert candidate([28, 29]) == 57\n    assert candidate([40, 41, 42, 3, 8, 2, 7, 1, 4]) == 123\n    assert candidate([17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 9, 2, 5]) == 242\n    assert candidate([43, 44]) == 87\n    assert candidate([19, 20, 5, 3, 10]) == 39\n    assert candidate([5]) == 6\n    assert candidate([14, 15]) == 29\n    assert candidate([47, 48, 49]) == 144\n    assert candidate([10]) == 11\n    assert candidate([39]) == 40\n    assert candidate([11, 12, 13, 14, 15, 7, 5, 2, 10, 5, 6]) == 65\n    assert candidate([3, 4, 5, 7, 9, 8, 1, 3, 4, 9]) == 12\n    assert candidate([29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]) == 455\n    assert candidate([24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 6, 4, 1]) == 354\n    assert candidate([7, 8, 9, 10, 11, 12, 13, 14, 15]) == 99\n    assert candidate([39, 40, 41, 42, 43, 44, 45, 8, 10, 4]) == 294\n    assert candidate([36, 37, 6, 8]) == 73\n    assert candidate([27, 28, 29, 30]) == 114\n    assert candidate([34, 35, 5, 7]) == 69\n    assert candidate([9, 8, 6, 1]) == 10\n    assert candidate([36, 37, 38, 39, 8, 10, 7]) == 150\n    assert candidate([28, 29, 6]) == 57\n    assert candidate([14, 15, 16, 17, 18, 19, 20, 10, 9, 10, 9, 7, 3, 6]) == 119\n    assert candidate([27, 28, 29, 5]) == 84\n    assert candidate([42, 43, 44, 45, 46, 47, 48]) == 315\n    assert candidate([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 10, 5, 6]) == 65\n    assert candidate([32, 33, 34, 35, 36, 37, 5, 8, 5, 3, 4, 2, 10, 3, 7]) == 207\n    assert candidate([24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 1, 3, 9]) == 285\n    assert candidate([48, 49]) == 97\n    assert candidate([46, 47, 6, 7, 1]) == 93\n    assert candidate([32, 33, 34, 35, 36, 37, 38, 39, 40]) == 324\n    assert candidate([40, 41, 42, 43, 44, 45, 6]) == 255\n    assert candidate([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9]) == 161\n    assert candidate([39, 40, 41, 3, 4, 7, 10, 6, 2, 10, 1, 9]) == 120\n    assert candidate([17, 18]) == 35\n    assert candidate([41, 42, 43, 44, 45, 46, 5, 6]) == 261\n    assert candidate([6]) == 7\n    assert candidate([46, 47, 48, 49, 50, 7]) == 240\n    assert candidate([17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 4, 7, 5, 4, 4]) == 215\n    assert candidate([40, 41, 42, 43, 44, 45, 46, 4, 6]) == 301\n    assert candidate([13, 4, 2, 2, 3, 4, 1, 8, 3, 7, 7, 7, 1, 6, 3]) == 14\n    assert candidate([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 6, 8]) == 130\n    assert candidate([12, 10]) == 13\n    assert candidate([17, 18, 19, 20, 21, 5, 3, 7, 10, 5, 3, 7, 3, 5, 3]) == 95\n    assert candidate([38, 39, 40, 41, 42, 43, 44, 45, 5, 7, 9, 9, 4, 1]) == 332\n    assert candidate([32, 33, 34, 35]) == 134\n    assert candidate([33, 34, 7, 3, 4, 4]) == 67\n    assert candidate([33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]) == 600\n    assert candidate([14, 9, 6, 9, 7, 9, 10, 4, 9, 9, 4, 4]) == 15\n    assert candidate([18, 19, 20, 21, 22, 23, 24, 25, 26, 6, 8, 2, 1]) == 198\n    assert candidate([19, 20, 21, 7, 9]) == 60\n    assert candidate([19, 20, 21, 10, 1, 8, 2, 1]) == 60\n    assert candidate([1, 2, 3, 9, 2, 10, 8, 3, 10, 2]) == 6\n    assert candidate([48, 10]) == 49\n    assert candidate([20, 21, 22, 23, 24, 25, 5]) == 135\n    assert candidate([40, 41, 42, 43, 3, 4, 10, 3, 7, 8, 9, 1, 5]) == 166\n    assert candidate([21, 22, 23, 24, 25, 26, 27, 8]) == 168\n    assert candidate([2, 3, 4, 5, 6, 4]) == 20\n    assert candidate([9, 10, 11, 12, 13, 14, 15, 16, 17, 4]) == 117\n    assert candidate([25, 26, 27, 28, 29, 6, 8]) == 135\n    assert candidate([16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 6]) == 205\n    assert candidate([7, 8, 9, 10, 11, 12]) == 57\n    assert candidate([32, 9, 2, 6, 4, 1, 4, 3, 5]) == 33\n    assert candidate([1, 4, 3]) == 2\n    assert candidate([34, 35, 36, 37, 38, 39, 1, 9, 3, 3, 10, 7, 1]) == 219\n    assert candidate([37, 7, 6, 4, 3, 1, 10, 8, 7, 2, 6]) == 38\n    assert candidate([32]) == 33\n    assert candidate([25, 26, 27, 4]) == 78\n    assert candidate([31, 32, 33, 8, 5, 3, 7, 2]) == 96\n    assert candidate([38, 39, 40, 41, 42, 43, 44, 45, 1]) == 332\n    assert candidate([35, 36, 3, 10]) == 71\n    assert candidate([31, 32, 33, 34, 35, 7, 6, 1, 9]) == 165\n    assert candidate([47, 48, 49, 2, 2]) == 144\n    assert candidate([3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 1]) == 63\n    assert candidate([50]) == 51\n    assert candidate([14, 15, 16, 17, 7, 10, 3, 10]) == 62\n\ndef test_check():\n    check(missingInteger)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3239_minimumOperationsToMakeEqual", "language": "py", "prompt": "def minimumOperationsToMakeEqual(x: int, y: int) -> int:\n    \"\"\"You are given two positive integers x and y.\nIn one operation, you can do one of the four following operations:\nDivide x by 11 if x is a multiple of 11.\nDivide x by 5 if x is a multiple of 5.\nDecrement x by 1.\nIncrement x by 1.\nReturn the minimum number of operations required to make  x and y equal.\nExample 1:\nInput: x = 26, y = 1\nOutput: 3\nExplanation: We can make 26 equal to 1 by applying the following operations: \n1. Decrement x by 1\n2. Divide x by 5\n3. Divide x by 5\nIt can be shown that 3 is the minimum number of operations required to make 26 equal to 1.\nExample 2:\nInput: x = 54, y = 2\nOutput: 4\nExplanation: We can make 54 equal to 2 by applying the following operations: \n1. Increment x by 1\n2. Divide x by 11 \n3. Divide x by 5\n4. Increment x by 1\nIt can be shown that 4 is the minimum number of operations required to make 54 equal to 2.\nExample 3:\nInput: x = 25, y = 30\nOutput: 5\nExplanation: We can make 25 equal to 30 by applying the following operations: \n1. Increment x by 1\n2. Increment x by 1\n3. Increment x by 1\n4. Increment x by 1\n5. Increment x by 1\nIt can be shown that 5 is the minimum number of operations required to make 25 equal to 30.\nConstraints:\n1 <= x, y <= 104\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3239_minimumOperationsToMakeEqual.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(26, 1) == 3\n    assert candidate(54, 2) == 4\n    assert candidate(25, 30) == 5\n    assert candidate(1, 1) == 0\n    assert candidate(1, 2) == 1\n    assert candidate(1, 3) == 2\n    assert candidate(1, 4) == 3\n    assert candidate(1, 5) == 4\n    assert candidate(1, 6) == 5\n    assert candidate(1, 7) == 6\n    assert candidate(1, 8) == 7\n    assert candidate(1, 9) == 8\n    assert candidate(1, 10) == 9\n    assert candidate(1, 11) == 10\n    assert candidate(1, 12) == 11\n    assert candidate(1, 13) == 12\n    assert candidate(1, 14) == 13\n    assert candidate(1, 15) == 14\n    assert candidate(1, 16) == 15\n    assert candidate(1, 17) == 16\n    assert candidate(1, 18) == 17\n    assert candidate(1, 19) == 18\n    assert candidate(1, 20) == 19\n    assert candidate(1, 21) == 20\n    assert candidate(1, 22) == 21\n    assert candidate(1, 23) == 22\n    assert candidate(1, 24) == 23\n    assert candidate(1, 25) == 24\n    assert candidate(2, 1) == 1\n    assert candidate(2, 2) == 0\n    assert candidate(2, 3) == 1\n    assert candidate(2, 4) == 2\n    assert candidate(2, 5) == 3\n    assert candidate(2, 6) == 4\n    assert candidate(2, 7) == 5\n    assert candidate(2, 8) == 6\n    assert candidate(2, 9) == 7\n    assert candidate(2, 10) == 8\n    assert candidate(2, 11) == 9\n    assert candidate(2, 12) == 10\n    assert candidate(2, 13) == 11\n    assert candidate(2, 14) == 12\n    assert candidate(2, 15) == 13\n    assert candidate(2, 16) == 14\n    assert candidate(2, 17) == 15\n    assert candidate(2, 18) == 16\n    assert candidate(2, 19) == 17\n    assert candidate(2, 20) == 18\n    assert candidate(2, 21) == 19\n    assert candidate(2, 22) == 20\n    assert candidate(2, 23) == 21\n    assert candidate(2, 24) == 22\n    assert candidate(2, 25) == 23\n    assert candidate(3, 1) == 2\n    assert candidate(3, 2) == 1\n    assert candidate(3, 3) == 0\n    assert candidate(3, 4) == 1\n    assert candidate(3, 5) == 2\n    assert candidate(3, 6) == 3\n    assert candidate(3, 7) == 4\n    assert candidate(3, 8) == 5\n    assert candidate(3, 9) == 6\n    assert candidate(3, 10) == 7\n    assert candidate(3, 11) == 8\n    assert candidate(3, 12) == 9\n    assert candidate(3, 13) == 10\n    assert candidate(3, 14) == 11\n    assert candidate(3, 15) == 12\n    assert candidate(3, 16) == 13\n    assert candidate(3, 17) == 14\n    assert candidate(3, 18) == 15\n    assert candidate(3, 19) == 16\n    assert candidate(3, 20) == 17\n    assert candidate(3, 21) == 18\n    assert candidate(3, 22) == 19\n    assert candidate(3, 23) == 20\n    assert candidate(3, 24) == 21\n    assert candidate(3, 25) == 22\n    assert candidate(4, 1) == 2\n    assert candidate(4, 2) == 2\n    assert candidate(4, 3) == 1\n    assert candidate(4, 4) == 0\n    assert candidate(4, 5) == 1\n    assert candidate(4, 6) == 2\n    assert candidate(4, 7) == 3\n    assert candidate(4, 8) == 4\n    assert candidate(4, 9) == 5\n    assert candidate(4, 10) == 6\n    assert candidate(4, 11) == 7\n    assert candidate(4, 12) == 8\n    assert candidate(4, 13) == 9\n    assert candidate(4, 14) == 10\n    assert candidate(4, 15) == 11\n    assert candidate(4, 16) == 12\n    assert candidate(4, 17) == 13\n    assert candidate(4, 18) == 14\n    assert candidate(4, 19) == 15\n    assert candidate(4, 20) == 16\n    assert candidate(4, 21) == 17\n    assert candidate(4, 22) == 18\n\ndef test_check():\n    check(minimumOperationsToMakeEqual)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3240_findMaximumNumber", "language": "py", "prompt": "def findMaximumNumber(k: int, x: int) -> int:\n    \"\"\"You are given an integer k and an integer x.\nConsider s is the 1-indexed binary representation of an integer num. The price of a number num is the number of i's such that i % x == 0 and s[i] is a set bit.\nReturn the greatest integer num such that the sum of prices of all numbers from 1 to num is less than or equal to k.\nNote:\nIn the binary representation of a number set bit is a bit of value 1.\nThe binary representation of a number will be indexed from right to left. For example, if s == 11100, s[4] == 1 and s[2] == 0.\nExample 1:\nInput: k = 9, x = 1\nOutput: 6\nExplanation: The numbers 1, 2, 3, 4, 5, and 6 can be written in binary representation as \"1\", \"10\", \"11\", \"100\", \"101\", and \"110\" respectively.\nSince x is equal to 1, the price of each number is the number of its set bits.\nThe number of set bits in these numbers is 9. So the sum of the prices of the first 6 numbers is 9.\nSo the answer is 6.\nExample 2:\nInput: k = 7, x = 2\nOutput: 9\nExplanation: Since x is equal to 2, we should just check eventh bits.\nThe second bit of binary representation of numbers 2 and 3 is a set bit. So the sum of their prices is 2.\nThe second bit of binary representation of numbers 6 and 7 is a set bit. So the sum of their prices is 2.\nThe fourth bit of binary representation of numbers 8 and 9 is a set bit but their second bit is not. So the sum of their prices is 2.\nNumbers 1, 4, and 5 don't have set bits in their eventh bits in their binary representation. So the sum of their prices is 0.\nThe second and the fourth bit of the binary representation of the number 10 are a set bit. So its price is 2.\nThe sum of the prices of the first 9 numbers is 6.\nBecause the sum of the prices of the first 10 numbers is 8, the answer is 9.\nConstraints:\n1 <= k <= 1015\n1 <= x <= 8\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3240_findMaximumNumber.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(9, 1) == 6\n    assert candidate(7, 2) == 9\n    assert candidate(19, 6) == 50\n    assert candidate(57, 4) == 120\n    assert candidate(58, 5) == 121\n    assert candidate(60, 8) == 187\n    assert candidate(72, 5) == 151\n    assert candidate(81, 6) == 176\n    assert candidate(83, 1) == 33\n    assert candidate(83, 7) == 210\n    assert candidate(116, 5) == 243\n    assert candidate(157, 6) == 316\n    assert candidate(201, 3) == 212\n    assert candidate(268, 6) == 555\n    assert candidate(281, 5) == 531\n    assert candidate(283, 3) == 274\n    assert candidate(309, 4) == 364\n    assert candidate(363, 7) == 746\n    assert candidate(409, 2) == 220\n    assert candidate(456, 7) == 967\n    assert candidate(466, 3) == 365\n    assert candidate(500, 3) == 379\n    assert candidate(513, 1) == 148\n    assert candidate(521, 8) == 1160\n    assert candidate(540, 4) == 571\n    assert candidate(545, 1) == 156\n    assert candidate(579, 1) == 165\n    assert candidate(584, 1) == 166\n    assert candidate(589, 3) == 427\n    assert candidate(599, 6) == 1206\n    assert candidate(632, 2) == 346\n    assert candidate(692, 3) == 481\n    assert candidate(701, 7) == 1404\n    assert candidate(704, 4) == 727\n    assert candidate(731, 7) == 1498\n    assert candidate(781, 1) == 210\n    assert candidate(782, 7) == 1613\n    assert candidate(808, 6) == 1639\n    assert candidate(814, 7) == 1645\n    assert candidate(818, 1) == 218\n    assert candidate(821, 2) == 433\n    assert candidate(829, 6) == 1660\n    assert candidate(865, 7) == 1760\n    assert candidate(874, 6) == 1769\n    assert candidate(879, 1) == 230\n    assert candidate(879, 3) == 628\n    assert candidate(898, 8) == 1921\n    assert candidate(902, 3) == 653\n    assert candidate(905, 8) == 1928\n    assert candidate(937, 8) == 1960\n    assert candidate(957, 3) == 701\n    assert candidate(973, 1) == 247\n    assert candidate(978, 3) == 737\n    assert candidate(991, 5) == 1006\n    assert candidate(1029, 3) == 771\n    assert candidate(1065, 6) == 2083\n    assert candidate(1086, 3) == 805\n    assert candidate(1105, 1) == 280\n    assert candidate(1113, 3) == 815\n    assert candidate(1143, 4) == 1190\n    assert candidate(1148, 2) == 564\n    assert candidate(1150, 7) == 2301\n    assert candidate(1156, 3) == 835\n    assert candidate(1171, 7) == 2386\n    assert candidate(1172, 1) == 297\n    assert candidate(1227, 7) == 2506\n    assert candidate(1236, 8) == 2515\n    assert candidate(1270, 5) == 1525\n    assert candidate(1274, 6) == 2220\n    assert candidate(1281, 6) == 2223\n    assert candidate(1282, 6) == 2224\n    assert candidate(1288, 5) == 1543\n    assert candidate(1376, 6) == 2287\n    assert candidate(1393, 7) == 2800\n    assert candidate(1415, 4) == 1454\n    assert candidate(1446, 7) == 2917\n    assert candidate(1459, 1) == 358\n    assert candidate(1520, 3) == 1017\n    assert candidate(1539, 6) == 2400\n    assert candidate(1545, 7) == 3144\n    assert candidate(1573, 5) == 1732\n    assert candidate(1588, 8) == 3251\n    assert candidate(1590, 7) == 3189\n    assert candidate(1617, 7) == 3280\n    assert candidate(1633, 6) == 2463\n    assert candidate(1634, 7) == 3297\n    assert candidate(1687, 2) == 741\n    assert candidate(1731, 6) == 2528\n    assert candidate(1750, 5) == 1850\n    assert candidate(1751, 7) == 3542\n    assert candidate(1760, 8) == 3551\n    assert candidate(1782, 8) == 3573\n    assert candidate(1787, 2) == 766\n    assert candidate(1851, 2) == 797\n    assert candidate(1856, 2) == 799\n    assert candidate(1874, 8) == 3793\n    assert candidate(1893, 7) == 3812\n    assert candidate(1900, 1) == 444\n    assert candidate(1900, 7) == 3819\n    assert candidate(1902, 3) == 1336\n\ndef test_check():\n    check(findMaximumNumber)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3241_divideArray", "language": "py", "prompt": "from typing import List\n\ndef divideArray(nums: List[int], k: int) -> List[List[int]]:\n    \"\"\"You are given an integer array nums of size n and a positive integer k.\nDivide the array into one or more arrays of size 3 satisfying the following conditions:\nEach element of nums should be in exactly one array.\nThe difference between any two elements in one array is less than or equal to k.\nReturn a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.\nExample 1:\nInput: nums = [1,3,4,8,7,9,3,5,1], k = 2\nOutput: [[1,1,3],[3,4,5],[7,8,9]]\nExplanation: We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].\nThe difference between any two elements in each array is less than or equal to 2.\nNote that the order of elements is not important.\nExample 2:\nInput: nums = [1,3,3,2,7,3], k = 3\nOutput: []\nExplanation: It is not possible to divide the array satisfying all the conditions.\nConstraints:\nn == nums.length\n1 <= n <= 105\nn is a multiple of 3.\n1 <= nums[i] <= 105\n1 <= k <= 105\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3241_divideArray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 4, 8, 7, 9, 3, 5, 1], 2) == [[1, 1, 3], [3, 4, 5], [7, 8, 9]]\n    assert candidate([1, 3, 3, 2, 7, 3], 3) == []\n    assert candidate([4, 2, 9, 8, 2, 12, 7, 12, 10, 5, 8, 5, 5, 7, 9, 2, 5, 11], 14) == [[2, 2, 2], [4, 5, 5], [5, 5, 7], [7, 8, 8], [9, 9, 10], [11, 12, 12]]\n    assert candidate([33, 26, 4, 18, 16, 24, 24, 15, 8, 18, 34, 20, 24, 16, 3], 16) == [[3, 4, 8], [15, 16, 16], [18, 18, 20], [24, 24, 24], [26, 33, 34]]\n    assert candidate([6, 1, 8, 8, 5, 8, 5, 9, 8, 9, 5, 8, 3, 4, 6], 7) == [[1, 3, 4], [5, 5, 5], [6, 6, 8], [8, 8, 8], [8, 9, 9]]\n    assert candidate([20, 21, 34, 3, 19, 2, 23, 32, 20, 17, 14, 13, 19, 20, 6], 15) == [[2, 3, 6], [13, 14, 17], [19, 19, 20], [20, 20, 21], [23, 32, 34]]\n    assert candidate([6, 10, 5, 12, 7, 11, 6, 6, 12, 12, 11, 7], 2) == [[5, 6, 6], [6, 7, 7], [10, 11, 11], [12, 12, 12]]\n    assert candidate([12, 15, 26, 7, 10, 13, 15, 5, 27, 16, 14, 15], 18) == [[5, 7, 10], [12, 13, 14], [15, 15, 15], [16, 26, 27]]\n    assert candidate([12, 7, 13, 10, 7, 19, 11, 23, 3, 3, 7, 9], 16) == [[3, 3, 7], [7, 7, 9], [10, 11, 12], [13, 19, 23]]\n    assert candidate([19, 3, 23, 4, 8, 1, 1, 3, 26], 7) == [[1, 1, 3], [3, 4, 8], [19, 23, 26]]\n    assert candidate([11, 13, 24, 11, 9, 23, 16, 19, 13], 8) == [[9, 11, 11], [13, 13, 16], [19, 23, 24]]\n    assert candidate([6, 12, 21, 12, 6, 12, 25, 20, 15, 22, 11, 19, 8, 4, 18, 26, 17, 18, 12, 5, 8], 11) == [[4, 5, 6], [6, 8, 8], [11, 12, 12], [12, 12, 15], [17, 18, 18], [19, 20, 21], [22, 25, 26]]\n    assert candidate([15, 17, 14, 3, 25, 15, 11, 25, 15, 16, 12, 18], 10) == [[3, 11, 12], [14, 15, 15], [15, 16, 17], [18, 25, 25]]\n    assert candidate([16, 20, 16, 19, 20, 13, 14, 20, 14], 10) == [[13, 14, 14], [16, 16, 19], [20, 20, 20]]\n    assert candidate([2, 13, 15, 14, 18, 15, 3, 13, 2], 1) == []\n    assert candidate([1, 14, 20, 7, 17, 2, 14, 1, 8], 11) == [[1, 1, 2], [7, 8, 14], [14, 17, 20]]\n    assert candidate([8, 12, 19, 8, 9, 19, 9, 19, 9, 8, 6, 9, 6, 6, 12], 3) == [[6, 6, 6], [8, 8, 8], [9, 9, 9], [9, 12, 12], [19, 19, 19]]\n    assert candidate([18, 16, 17, 19, 12, 25, 11, 27, 11, 32, 32, 17], 20) == [[11, 11, 12], [16, 17, 17], [18, 19, 25], [27, 32, 32]]\n    assert candidate([21, 11, 24, 20, 17, 13, 7, 20, 20, 16, 24, 20, 12, 17, 16, 15, 7, 7, 18, 15, 20], 6) == [[7, 7, 7], [11, 12, 13], [15, 15, 16], [16, 17, 17], [18, 20, 20], [20, 20, 20], [21, 24, 24]]\n    assert candidate([6, 7, 7, 6, 7, 6], 13) == [[6, 6, 6], [7, 7, 7]]\n    assert candidate([11, 12, 12, 5, 6, 5], 9) == [[5, 5, 6], [11, 12, 12]]\n    assert candidate([5, 5, 12, 5, 5, 22, 2, 2, 5, 2, 5, 5, 16, 2, 22, 2, 12, 16, 15, 13, 19], 3) == [[2, 2, 2], [2, 2, 5], [5, 5, 5], [5, 5, 5], [12, 12, 13], [15, 16, 16], [19, 22, 22]]\n    assert candidate([11, 28, 12, 5, 19, 15, 16, 9, 21, 13, 12, 9, 19, 19, 18], 9) == [[5, 9, 9], [11, 12, 12], [13, 15, 16], [18, 19, 19], [19, 21, 28]]\n    assert candidate([10, 14, 17], 15) == [[10, 14, 17]]\n    assert candidate([16, 15, 9, 20, 17, 19, 11, 18, 16], 9) == [[9, 11, 15], [16, 16, 17], [18, 19, 20]]\n    assert candidate([16, 28, 16, 7, 18, 13, 5, 27, 27, 16, 20, 22, 13, 6, 17], 11) == [[5, 6, 7], [13, 13, 16], [16, 16, 17], [18, 20, 22], [27, 27, 28]]\n    assert candidate([14, 7, 13, 2, 3, 7, 17, 13, 13, 2, 14, 7], 3) == [[2, 2, 3], [7, 7, 7], [13, 13, 13], [14, 14, 17]]\n    assert candidate([20, 8, 6, 5, 10, 5, 10, 2, 20, 6, 12, 13, 13, 20, 4], 6) == [[2, 4, 5], [5, 6, 6], [8, 10, 10], [12, 13, 13], [20, 20, 20]]\n    assert candidate([12, 14, 16, 9, 20, 18, 16, 4, 24, 14, 16, 30, 1, 17, 30, 16, 30, 6], 13) == [[1, 4, 6], [9, 12, 14], [14, 16, 16], [16, 16, 17], [18, 20, 24], [30, 30, 30]]\n    assert candidate([13, 6, 19, 21, 16, 11, 1, 14, 7], 20) == [[1, 6, 7], [11, 13, 14], [16, 19, 21]]\n    assert candidate([13, 2, 12, 22, 18, 15, 3, 20, 2, 18, 3, 14, 2, 10, 14, 9, 14, 3, 14, 17, 5], 9) == [[2, 2, 2], [3, 3, 3], [5, 9, 10], [12, 13, 14], [14, 14, 14], [15, 17, 18], [18, 20, 22]]\n    assert candidate([12, 13, 12, 14, 14, 6, 5, 7, 23, 21, 21, 16, 15, 20, 22, 14, 20, 7], 10) == [[5, 6, 7], [7, 12, 12], [13, 14, 14], [14, 15, 16], [20, 20, 21], [21, 22, 23]]\n    assert candidate([15, 14, 3, 19, 17, 18, 19, 23, 2, 16, 19, 3], 5) == [[2, 3, 3], [14, 15, 16], [17, 18, 19], [19, 19, 23]]\n    assert candidate([12, 8, 18, 6, 12, 6, 8, 33, 20, 6, 17, 17, 27, 8, 12], 16) == [[6, 6, 6], [8, 8, 8], [12, 12, 12], [17, 17, 18], [20, 27, 33]]\n    assert candidate([1, 1, 23, 17, 18, 1], 12) == [[1, 1, 1], [17, 18, 23]]\n    assert candidate([13, 13, 3, 7, 6, 13, 6, 4, 3], 1) == [[3, 3, 4], [6, 6, 7], [13, 13, 13]]\n    assert candidate([19, 10, 9, 20, 29, 28, 29, 9, 18, 27, 23, 4, 16, 8, 11, 19, 10, 12, 10, 10, 21], 20) == [[4, 8, 9], [9, 10, 10], [10, 10, 11], [12, 16, 18], [19, 19, 20], [21, 23, 27], [28, 29, 29]]\n    assert candidate([13, 12, 12, 11, 22, 10], 15) == [[10, 11, 12], [12, 13, 22]]\n    assert candidate([15, 16, 12, 34, 16, 16, 24, 21, 3, 24, 29, 10], 20) == [[3, 10, 12], [15, 16, 16], [16, 21, 24], [24, 29, 34]]\n    assert candidate([17, 16, 17, 11, 13, 6], 19) == [[6, 11, 13], [16, 17, 17]]\n    assert candidate([11, 16, 16, 6, 8, 20, 21, 3, 20, 11, 16, 6, 6, 11, 6], 3) == [[3, 6, 6], [6, 6, 8], [11, 11, 11], [16, 16, 16], [20, 20, 21]]\n    assert candidate([2, 16, 8, 7, 15, 16], 9) == [[2, 7, 8], [15, 16, 16]]\n    assert candidate([15, 17, 22], 14) == [[15, 17, 22]]\n    assert candidate([8, 4, 9, 18, 18, 5, 10, 11, 19, 18, 19, 23, 4, 15, 25, 20, 20, 6], 7) == [[4, 4, 5], [6, 8, 9], [10, 11, 15], [18, 18, 18], [19, 19, 20], [20, 23, 25]]\n    assert candidate([12, 20, 16, 12, 15, 16, 15, 20, 14, 16, 19, 13], 1) == [[12, 12, 13], [14, 15, 15], [16, 16, 16], [19, 20, 20]]\n    assert candidate([20, 19, 8, 21, 13, 18, 21, 12, 12, 18, 9, 9], 1) == [[8, 9, 9], [12, 12, 13], [18, 18, 19], [20, 21, 21]]\n    assert candidate([6, 14, 19, 17, 13, 4, 17, 10, 17], 19) == [[4, 6, 10], [13, 14, 17], [17, 17, 19]]\n    assert candidate([8, 8, 12], 4) == [[8, 8, 12]]\n    assert candidate([3, 16, 17, 18, 10, 8, 20, 16, 20, 10, 10, 21], 16) == [[3, 8, 10], [10, 10, 16], [16, 17, 18], [20, 20, 21]]\n    assert candidate([19, 14, 17, 20, 16, 16, 7, 10, 18, 8, 16, 15, 15, 13, 12, 14, 17, 11], 8) == [[7, 8, 10], [11, 12, 13], [14, 14, 15], [15, 16, 16], [16, 17, 17], [18, 19, 20]]\n    assert candidate([18, 7, 11, 13, 13, 9, 22, 20, 21, 13, 7, 18, 8, 8, 16], 4) == [[7, 7, 8], [8, 9, 11], [13, 13, 13], [16, 18, 18], [20, 21, 22]]\n    assert candidate([10, 15, 9, 15, 15, 10], 1) == [[9, 10, 10], [15, 15, 15]]\n    assert candidate([16, 17, 16], 16) == [[16, 16, 17]]\n    assert candidate([15, 1, 15, 14, 18, 17, 1, 18, 12, 16, 6, 6, 7, 1, 12], 4) == [[1, 1, 1], [6, 6, 7], [12, 12, 14], [15, 15, 16], [17, 18, 18]]\n    assert candidate([6, 11, 6, 18, 11, 13, 13, 8, 11, 4, 4, 11, 12, 17, 11], 12) == [[4, 4, 6], [6, 8, 11], [11, 11, 11], [11, 12, 13], [13, 17, 18]]\n    assert candidate([5, 13, 4, 14, 11, 18, 9, 10, 20, 5, 17, 11, 5, 8, 20, 5, 14, 4, 18, 17, 17], 8) == [[4, 4, 5], [5, 5, 5], [8, 9, 10], [11, 11, 13], [14, 14, 17], [17, 17, 18], [18, 20, 20]]\n    assert candidate([13, 6, 20, 13, 12, 8, 7, 12, 22, 16, 13, 7, 12, 17, 5], 6) == [[5, 6, 7], [7, 8, 12], [12, 12, 13], [13, 13, 16], [17, 20, 22]]\n    assert candidate([23, 2, 15, 20, 18, 14, 20, 7, 2, 22, 4, 14, 7, 9, 15, 14, 2, 7], 8) == [[2, 2, 2], [4, 7, 7], [7, 9, 14], [14, 14, 15], [15, 18, 20], [20, 22, 23]]\n    assert candidate([19, 9, 2, 4, 17, 2, 27, 18, 17], 18) == [[2, 2, 4], [9, 17, 17], [18, 19, 27]]\n    assert candidate([5, 20, 29, 4, 12, 14, 31, 6, 11, 2, 15, 17, 15, 19, 4], 20) == [[2, 4, 4], [5, 6, 11], [12, 14, 15], [15, 17, 19], [20, 29, 31]]\n    assert candidate([15, 20, 5, 24, 18, 16, 25, 21, 28, 12, 19, 28, 25, 20, 14, 18, 24, 28], 17) == [[5, 12, 14], [15, 16, 18], [18, 19, 20], [20, 21, 24], [24, 25, 25], [28, 28, 28]]\n    assert candidate([9, 6, 23, 17, 7, 17], 20) == [[6, 7, 9], [17, 17, 23]]\n    assert candidate([24, 23, 19], 6) == [[19, 23, 24]]\n    assert candidate([6, 19, 22, 7, 17, 7, 15, 17, 7, 18, 4, 14, 9, 10, 16], 9) == [[4, 6, 7], [7, 7, 9], [10, 14, 15], [16, 17, 17], [18, 19, 22]]\n    assert candidate([4, 3, 15, 1, 15, 15], 4) == [[1, 3, 4], [15, 15, 15]]\n    assert candidate([10, 22, 18, 15, 7, 21, 6, 7, 11, 9, 7, 6, 7, 10, 18], 8) == [[6, 6, 7], [7, 7, 7], [9, 10, 10], [11, 15, 18], [18, 21, 22]]\n    assert candidate([16, 17, 2, 17, 9, 7, 22, 17, 12, 4, 14, 17, 4, 19, 12, 18, 19, 8, 17, 5, 6], 7) == [[2, 4, 4], [5, 6, 7], [8, 9, 12], [12, 14, 16], [17, 17, 17], [17, 17, 18], [19, 19, 22]]\n    assert candidate([20, 18, 18, 22, 7, 9, 9, 10, 16, 4, 18, 18, 11, 9, 18, 11, 11, 21], 7) == [[4, 7, 9], [9, 9, 10], [11, 11, 11], [16, 18, 18], [18, 18, 18], [20, 21, 22]]\n    assert candidate([5, 11, 15, 9, 17, 6, 16, 14, 4, 9, 5, 13, 10, 12, 13, 15, 13, 12, 16, 12, 13], 5) == [[4, 5, 5], [6, 9, 9], [10, 11, 12], [12, 12, 13], [13, 13, 13], [14, 15, 15], [16, 16, 17]]\n    assert candidate([4, 16, 17], 20) == [[4, 16, 17]]\n    assert candidate([10, 9, 22, 13, 17, 11, 6, 9, 11], 10) == [[6, 9, 9], [10, 11, 11], [13, 17, 22]]\n    assert candidate([3, 11, 19, 8, 22, 23, 15, 18, 37, 7, 25, 20, 12, 19, 7], 18) == [[3, 7, 7], [8, 11, 12], [15, 18, 19], [19, 20, 22], [23, 25, 37]]\n    assert candidate([4, 6, 6, 3, 11, 11], 16) == [[3, 4, 6], [6, 11, 11]]\n    assert candidate([10, 17, 10, 15, 16, 8], 7) == [[8, 10, 10], [15, 16, 17]]\n    assert candidate([4, 20, 4, 19, 8, 7, 4, 20, 7], 3) == [[4, 4, 4], [7, 7, 8], [19, 20, 20]]\n    assert candidate([4, 4, 4], 17) == [[4, 4, 4]]\n    assert candidate([18, 6, 15, 20, 5, 27, 23, 15, 26, 11, 11, 4, 17, 23, 11], 15) == [[4, 5, 6], [11, 11, 11], [15, 15, 17], [18, 20, 23], [23, 26, 27]]\n    assert candidate([8, 9, 5], 15) == [[5, 8, 9]]\n    assert candidate([20, 15, 8, 11, 11, 10, 19, 7, 20], 7) == [[7, 8, 10], [11, 11, 15], [19, 20, 20]]\n    assert candidate([12, 11, 18, 13, 13, 21], 11) == [[11, 12, 13], [13, 18, 21]]\n    assert candidate([19, 29, 11, 18, 19, 17, 29, 19, 7], 14) == [[7, 11, 17], [18, 19, 19], [19, 29, 29]]\n    assert candidate([14, 1, 25, 1, 14, 19, 2, 2, 4, 16, 17, 11, 26, 29, 12], 17) == [[1, 1, 2], [2, 4, 11], [12, 14, 14], [16, 17, 19], [25, 26, 29]]\n    assert candidate([14, 25, 16, 11, 7, 13, 12, 16, 24, 19, 5, 17], 13) == [[5, 7, 11], [12, 13, 14], [16, 16, 17], [19, 24, 25]]\n    assert candidate([11, 26, 19, 10, 16, 10, 11, 18, 9], 11) == [[9, 10, 10], [11, 11, 16], [18, 19, 26]]\n    assert candidate([16, 8, 15], 16) == [[8, 15, 16]]\n    assert candidate([12, 8, 18, 8, 18, 13, 12, 18, 18, 13, 12, 23, 21, 8, 13], 5) == [[8, 8, 8], [12, 12, 12], [13, 13, 13], [18, 18, 18], [18, 21, 23]]\n    assert candidate([12, 16, 9, 8, 22, 16], 16) == [[8, 9, 12], [16, 16, 22]]\n    assert candidate([15, 16, 18, 8, 12, 7, 5, 17, 23, 17, 18, 13, 5, 4, 13, 18, 7, 20], 6) == [[4, 5, 5], [7, 7, 8], [12, 13, 13], [15, 16, 17], [17, 18, 18], [18, 20, 23]]\n    assert candidate([12, 11, 14, 13, 9, 16, 31, 19, 21, 22, 7, 1, 22, 23, 9, 2, 21, 21], 15) == [[1, 2, 7], [9, 9, 11], [12, 13, 14], [16, 19, 21], [21, 21, 22], [22, 23, 31]]\n    assert candidate([7, 15, 18, 20, 6, 21, 18, 17, 11, 1, 14, 15, 18, 8, 17, 13, 11, 8, 5, 12, 11], 10) == [[1, 5, 6], [7, 8, 8], [11, 11, 11], [12, 13, 14], [15, 15, 17], [17, 18, 18], [18, 20, 21]]\n    assert candidate([13, 16, 17, 16, 6, 12], 11) == [[6, 12, 13], [16, 16, 17]]\n    assert candidate([17, 17, 17, 16, 17, 17], 1) == [[16, 17, 17], [17, 17, 17]]\n    assert candidate([6, 14, 6, 15, 14, 6], 17) == [[6, 6, 6], [14, 14, 15]]\n    assert candidate([23, 19, 21, 10, 10, 13, 15, 19, 19, 3, 15, 3], 12) == [[3, 3, 10], [10, 13, 15], [15, 19, 19], [19, 21, 23]]\n    assert candidate([11, 4, 3, 11, 3, 27, 19, 10, 6, 12, 11, 24, 27, 1, 31], 17) == [[1, 3, 3], [4, 6, 10], [11, 11, 11], [12, 19, 24], [27, 27, 31]]\n    assert candidate([8, 18, 18, 20, 20, 19, 20, 31, 7], 17) == [[7, 8, 18], [18, 19, 20], [20, 20, 31]]\n    assert candidate([4, 22, 8, 12, 1, 4, 4, 17, 22, 4, 10, 1], 12) == [[1, 1, 4], [4, 4, 4], [8, 10, 12], [17, 22, 22]]\n    assert candidate([16, 15, 16, 6, 9, 22, 14, 16, 10, 26, 18, 16, 11, 18, 7], 10) == [[6, 7, 9], [10, 11, 14], [15, 16, 16], [16, 16, 18], [18, 22, 26]]\n    assert candidate([5, 16, 12, 26, 16, 18, 1, 6, 23, 2, 1, 21, 8, 11, 9], 14) == [[1, 1, 2], [5, 6, 8], [9, 11, 12], [16, 16, 18], [21, 23, 26]]\n    assert candidate([6, 3, 24, 13, 19, 24, 13, 12, 15, 3, 6, 3], 17) == [[3, 3, 3], [6, 6, 12], [13, 13, 15], [19, 24, 24]]\n\ndef test_check():\n    check(divideArray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3242_maxFrequencyElements", "language": "py", "prompt": "from typing import List\n\ndef maxFrequencyElements(nums: List[int]) -> int:\n    \"\"\"You are given an array nums consisting of positive integers.\nReturn the total frequencies of elements in numssuch that those elements all have the maximum frequency.\nThe frequency of an element is the number of occurrences of that element in the array.\nExample 1:\nInput: nums = [1,2,2,3,1,4]\nOutput: 4\nExplanation: The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\nExample 2:\nInput: nums = [1,2,3,4,5]\nOutput: 5\nExplanation: All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\nConstraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3242_maxFrequencyElements.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 2, 3, 1, 4]) == 4\n    assert candidate([1, 2, 3, 4, 5]) == 5\n    assert candidate([15]) == 1\n    assert candidate([10, 12, 11, 9, 6, 19, 11]) == 2\n    assert candidate([2, 12, 17, 18, 11]) == 5\n    assert candidate([19, 19, 19, 20, 19, 8, 19]) == 5\n    assert candidate([1, 1, 1, 1]) == 4\n    assert candidate([10, 1, 12, 10, 10, 19, 10]) == 4\n    assert candidate([1, 1, 1, 20, 6, 1]) == 4\n    assert candidate([17, 17]) == 2\n    assert candidate([6, 13, 15, 15, 11, 6, 7, 12, 4, 11]) == 6\n    assert candidate([1, 2]) == 2\n    assert candidate([14, 14, 17]) == 2\n    assert candidate([17, 17, 2, 12, 20, 17, 12]) == 3\n    assert candidate([3, 9, 11, 11, 20]) == 2\n    assert candidate([8, 15, 8, 11, 8, 13, 12, 11, 8]) == 4\n    assert candidate([17, 8, 17, 19, 17, 13, 17, 17, 17, 5]) == 6\n    assert candidate([11]) == 1\n    assert candidate([5]) == 1\n    assert candidate([4, 4, 10]) == 2\n    assert candidate([15, 13, 2, 16, 2, 5, 1, 18, 8, 16]) == 4\n    assert candidate([1, 17, 12, 7, 17, 3]) == 2\n    assert candidate([8, 2, 8, 6, 1, 1]) == 4\n    assert candidate([3, 9, 7, 9]) == 2\n    assert candidate([20, 20, 20, 5, 12, 20, 9, 16]) == 4\n    assert candidate([2, 14, 3, 8, 16, 4, 4, 3]) == 4\n    assert candidate([6, 12, 3, 3, 11, 2]) == 2\n    assert candidate([5, 2, 13, 19, 15, 20]) == 6\n    assert candidate([2, 13, 13]) == 2\n    assert candidate([4, 5]) == 2\n    assert candidate([20, 20, 15, 20, 20, 20]) == 5\n    assert candidate([16, 16, 16, 16, 1, 10, 16, 9]) == 5\n    assert candidate([5, 3, 5, 8, 5, 3, 5, 15]) == 4\n    assert candidate([17]) == 1\n    assert candidate([2, 2, 3, 3, 9]) == 4\n    assert candidate([5, 11, 4, 2]) == 4\n    assert candidate([13, 13, 7]) == 2\n    assert candidate([2, 15, 10, 10, 10, 4, 13]) == 3\n    assert candidate([3, 7, 1]) == 3\n    assert candidate([19, 6, 19, 19, 19, 19, 19]) == 6\n    assert candidate([15, 3, 12, 4, 9, 14, 10]) == 7\n    assert candidate([1, 19, 12, 1, 12, 12, 1, 6]) == 6\n    assert candidate([17, 7, 3, 3, 6, 5, 6, 2]) == 4\n    assert candidate([12, 4, 2, 9, 17, 14, 1, 12, 6]) == 2\n    assert candidate([16, 11]) == 2\n    assert candidate([11, 11, 11, 11, 10, 11, 3, 11, 11]) == 7\n    assert candidate([16, 4, 20, 10, 12]) == 5\n    assert candidate([3, 11, 3, 11]) == 4\n    assert candidate([13, 9, 13, 13, 13, 13, 2, 13]) == 6\n    assert candidate([2, 8, 9, 4, 3]) == 5\n    assert candidate([19, 6, 9, 12, 12]) == 2\n    assert candidate([20]) == 1\n    assert candidate([1, 11]) == 2\n    assert candidate([6, 4, 7, 19, 20, 10, 13, 14]) == 8\n    assert candidate([16, 8, 5]) == 3\n    assert candidate([15, 15, 4, 7, 15, 15, 15, 15, 15, 7]) == 7\n    assert candidate([5, 20]) == 2\n    assert candidate([13]) == 1\n    assert candidate([7, 15, 13, 18, 3, 11, 13, 7, 1, 13]) == 3\n    assert candidate([17, 5, 17, 5, 5]) == 3\n    assert candidate([4, 5, 3, 5]) == 2\n    assert candidate([11, 2]) == 2\n    assert candidate([1, 17, 17, 20, 2, 2]) == 4\n    assert candidate([2, 5, 2, 2]) == 3\n    assert candidate([1, 1, 1, 3, 8, 1]) == 4\n    assert candidate([1, 19, 19, 5, 14, 13, 1, 20, 6]) == 4\n    assert candidate([19, 12, 8, 20, 3, 1, 12, 17]) == 2\n    assert candidate([7, 15, 1, 1, 6, 3]) == 2\n    assert candidate([8, 8, 8, 3, 8, 8, 3]) == 5\n    assert candidate([5, 1, 2, 2, 2, 1, 1]) == 6\n    assert candidate([12, 13, 6]) == 3\n    assert candidate([18, 12, 8, 2, 16, 19]) == 6\n    assert candidate([15, 10, 2, 18, 11, 14, 9]) == 7\n    assert candidate([19, 17, 9, 13, 1, 13]) == 2\n    assert candidate([4, 12, 15, 1, 4, 4, 2]) == 3\n    assert candidate([16, 16, 16, 8]) == 3\n    assert candidate([2]) == 1\n    assert candidate([13, 15, 1]) == 3\n    assert candidate([10, 10, 5, 16, 17, 6, 18]) == 2\n    assert candidate([3, 2, 14, 2, 18, 7]) == 2\n    assert candidate([16, 16, 3]) == 2\n    assert candidate([1, 8, 10, 11, 8, 15]) == 2\n    assert candidate([8, 19, 2, 7, 5, 6, 3, 4]) == 8\n    assert candidate([9]) == 1\n    assert candidate([13, 6, 13, 10]) == 2\n    assert candidate([14, 13, 14, 4, 4, 14]) == 3\n    assert candidate([9, 9, 1, 9, 9, 1]) == 4\n    assert candidate([14, 4, 11, 14, 14, 4, 4]) == 6\n    assert candidate([4, 20, 20, 4, 1]) == 4\n    assert candidate([5, 11, 8, 3, 11, 11, 11]) == 4\n    assert candidate([3, 2, 18, 5]) == 4\n    assert candidate([3, 8, 20, 7, 16, 20, 18, 13]) == 2\n    assert candidate([19, 9, 16, 4, 10, 3, 18]) == 7\n    assert candidate([11, 2, 2, 3, 19, 3, 11, 2, 14, 1]) == 3\n    assert candidate([19, 14, 11, 7, 19, 1, 11, 2, 16]) == 4\n    assert candidate([18, 15, 3, 2, 8, 12, 19, 14, 12]) == 2\n    assert candidate([5, 6, 11, 9, 5, 5, 5]) == 4\n    assert candidate([8, 4, 4, 12, 8, 1]) == 4\n    assert candidate([9, 1, 9, 9, 3]) == 3\n    assert candidate([18]) == 1\n\ndef test_check():\n    check(maxFrequencyElements)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3243_numberOfPowerfulInt", "language": "py", "prompt": "def numberOfPowerfulInt(start: int, finish: int, limit: int, s: str) -> int:\n    \"\"\"You are given three integers start, finish, and limit. You are also given a 0-indexed string s representing a positive integer.\nA positive integer x is called powerful if it ends with s (in other words, s is a suffix of x) and each digit in x is at most limit.\nReturn the total number of powerful integers in the range [start..finish].\nA string x is a suffix of a string y if and only if x is a substring of y that starts from some index (including 0) in y and extends to the index y.length - 1. For example, 25 is a suffix of 5125 whereas 512 is not.\nExample 1:\nInput: start = 1, finish = 6000, limit = 4, s = \"124\"\nOutput: 5\nExplanation: The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4.\nIt can be shown that there are only 5 powerful integers in this range.\nExample 2:\nInput: start = 15, finish = 215, limit = 6, s = \"10\"\nOutput: 2\nExplanation: The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix.\nIt can be shown that there are only 2 powerful integers in this range.\nExample 3:\nInput: start = 1000, finish = 2000, limit = 4, s = \"3000\"\nOutput: 0\nExplanation: All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range.\nConstraints:\n1 <= start <= finish <= 1015\n1 <= limit <= 9\n1 <= s.length <= floor(log10(finish)) + 1\ns only consists of numeric digits which are at most limit.\ns does not have leading zeros.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3243_numberOfPowerfulInt.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(1, 6000, 4, 124) == 5\n    assert candidate(15, 215, 6, 10) == 2\n    assert candidate(1000, 2000, 4, 3000) == 0\n    assert candidate(141, 148, 9, 9) == 0\n    assert candidate(1, 971, 9, 17) == 10\n    assert candidate(1, 971, 9, 27) == 10\n    assert candidate(1, 971, 9, 41) == 10\n    assert candidate(1, 971, 9, 47) == 10\n    assert candidate(1, 971, 9, 61) == 10\n    assert candidate(1, 971, 9, 66) == 10\n    assert candidate(1, 971, 9, 71) == 10\n    assert candidate(1, 971, 9, 72) == 9\n    assert candidate(20, 1159, 5, 20) == 8\n    assert candidate(20, 1159, 5, 24) == 8\n    assert candidate(20, 1159, 5, 32) == 8\n    assert candidate(20, 1159, 5, 33) == 8\n    assert candidate(20, 1159, 5, 40) == 8\n    assert candidate(20, 1159, 5, 41) == 8\n    assert candidate(20, 1159, 5, 42) == 8\n    assert candidate(20, 1159, 5, 43) == 8\n    assert candidate(20, 1159, 5, 44) == 8\n    assert candidate(1300, 1400, 5, 245) == 0\n    assert candidate(3, 1429, 5, 11) == 11\n    assert candidate(3, 1429, 5, 12) == 11\n    assert candidate(3, 1429, 5, 13) == 11\n    assert candidate(3, 1429, 5, 14) == 11\n    assert candidate(3, 1429, 5, 20) == 11\n    assert candidate(3, 1429, 5, 21) == 11\n    assert candidate(3, 1429, 5, 34) == 10\n    assert candidate(3, 1429, 5, 40) == 10\n    assert candidate(3, 1429, 5, 43) == 10\n    assert candidate(15, 1440, 5, 11) == 10\n    assert candidate(15, 1440, 5, 12) == 10\n    assert candidate(15, 1440, 5, 14) == 10\n    assert candidate(15, 1440, 5, 21) == 11\n    assert candidate(15, 1440, 5, 23) == 11\n    assert candidate(15, 1440, 5, 31) == 11\n    assert candidate(15, 1440, 5, 34) == 11\n    assert candidate(15, 1440, 5, 42) == 10\n    assert candidate(10, 1844, 5, 12) == 12\n    assert candidate(10, 1844, 5, 20) == 12\n    assert candidate(10, 1844, 5, 24) == 12\n    assert candidate(10, 1844, 5, 30) == 12\n    assert candidate(10, 1844, 5, 33) == 12\n    assert candidate(10, 1844, 5, 40) == 12\n    assert candidate(10, 1844, 5, 42) == 12\n    assert candidate(10, 1844, 5, 44) == 12\n    assert candidate(16, 1848, 5, 11) == 11\n    assert candidate(16, 1848, 5, 13) == 11\n    assert candidate(16, 1848, 5, 14) == 11\n    assert candidate(16, 1848, 5, 22) == 12\n    assert candidate(16, 1848, 5, 30) == 12\n    assert candidate(16, 1848, 5, 33) == 12\n    assert candidate(16, 1848, 5, 43) == 12\n    assert candidate(1, 2000, 8, 1) == 162\n    assert candidate(1, 2000, 8, 10) == 18\n    assert candidate(1, 2000, 8, 100) == 2\n    assert candidate(1, 2000, 8, 11) == 18\n    assert candidate(1, 2000, 8, 12) == 18\n    assert candidate(1, 2000, 8, 13) == 18\n    assert candidate(1, 2000, 8, 14) == 18\n    assert candidate(1, 2000, 8, 15) == 18\n    assert candidate(1, 2000, 8, 16) == 18\n    assert candidate(1, 2000, 8, 17) == 18\n    assert candidate(1, 2000, 8, 18) == 18\n    assert candidate(1, 2000, 8, 2) == 162\n    assert candidate(1, 2000, 8, 20) == 18\n    assert candidate(1, 2000, 8, 21) == 18\n    assert candidate(1, 2000, 8, 22) == 18\n    assert candidate(1, 2000, 8, 23) == 18\n    assert candidate(1, 2000, 8, 24) == 18\n    assert candidate(1, 2000, 8, 25) == 18\n    assert candidate(1, 2000, 8, 26) == 18\n    assert candidate(1, 2000, 8, 27) == 18\n    assert candidate(1, 2000, 8, 28) == 18\n    assert candidate(1, 2000, 8, 3) == 162\n    assert candidate(1, 2000, 8, 30) == 18\n    assert candidate(1, 2000, 8, 31) == 18\n    assert candidate(1, 2000, 8, 32) == 18\n    assert candidate(1, 2000, 8, 33) == 18\n    assert candidate(1, 2000, 8, 34) == 18\n    assert candidate(1, 2000, 8, 35) == 18\n    assert candidate(1, 2000, 8, 36) == 18\n    assert candidate(1, 2000, 8, 37) == 18\n    assert candidate(1, 2000, 8, 38) == 18\n    assert candidate(1, 2000, 8, 4) == 162\n    assert candidate(1, 2000, 8, 40) == 18\n    assert candidate(1, 2000, 8, 41) == 18\n    assert candidate(1, 2000, 8, 42) == 18\n    assert candidate(1, 2000, 8, 43) == 18\n    assert candidate(1, 2000, 8, 44) == 18\n    assert candidate(1, 2000, 8, 45) == 18\n    assert candidate(1, 2000, 8, 46) == 18\n    assert candidate(1, 2000, 8, 47) == 18\n    assert candidate(1, 2000, 8, 48) == 18\n    assert candidate(1, 2000, 8, 5) == 162\n    assert candidate(1, 2000, 8, 50) == 18\n    assert candidate(1, 2000, 8, 51) == 18\n    assert candidate(1, 2000, 8, 52) == 18\n    assert candidate(1, 2000, 8, 53) == 18\n\ndef test_check():\n    check(numberOfPowerfulInt)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3244_minimumArrayLength", "language": "py", "prompt": "from typing import List\n\ndef minimumArrayLength(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed integer array nums containing positive integers.\nYour task is to minimize the length of nums by performing the following operations any number of times (including zero):\nSelect two distinct indices i and j from nums, such that nums[i] > 0 and nums[j] > 0.\nInsert the result of nums[i] % nums[j] at the end of nums.\nDelete the elements at indices i and j from nums.\nReturn an integer denoting the minimum length of nums after performing the operation any number of times.\nExample 1:\nInput: nums = [1,4,3,1]\nOutput: 1\nExplanation: One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length. \nExample 2:\nInput: nums = [5,5,5,10,5]\nOutput: 2\nExplanation: One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length. \nExample 3:\nInput: nums = [2,3,4]\nOutput: 1\nExplanation: One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length.\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3244_minimumArrayLength.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 1]) == 1\n    assert candidate([5, 5, 5, 10, 5]) == 2\n    assert candidate([2, 3, 4]) == 1\n    assert candidate([1]) == 1\n    assert candidate([3]) == 1\n    assert candidate([6]) == 1\n    assert candidate([1, 4]) == 1\n    assert candidate([1, 5]) == 1\n    assert candidate([2, 4]) == 1\n    assert candidate([3, 4]) == 1\n    assert candidate([5, 3]) == 1\n    assert candidate([6, 9]) == 1\n    assert candidate([8, 2]) == 1\n    assert candidate([9, 9]) == 1\n    assert candidate([9, 10]) == 1\n    assert candidate([1, 2, 5]) == 1\n    assert candidate([2, 1, 1]) == 1\n    assert candidate([2, 7, 10]) == 1\n    assert candidate([2, 9, 5]) == 1\n    assert candidate([3, 2, 1]) == 1\n    assert candidate([3, 2, 7]) == 1\n    assert candidate([3, 3, 1]) == 1\n    assert candidate([4, 1, 3]) == 1\n    assert candidate([4, 4, 4]) == 2\n    assert candidate([5, 1, 5]) == 1\n    assert candidate([5, 5, 5]) == 2\n    assert candidate([6, 5, 1]) == 1\n    assert candidate([8, 4, 5]) == 1\n    assert candidate([9, 2, 2]) == 1\n    assert candidate([1, 2, 3, 2]) == 1\n    assert candidate([1, 3, 1, 7]) == 1\n    assert candidate([1, 5, 5, 4]) == 1\n    assert candidate([1, 8, 7, 2]) == 1\n    assert candidate([2, 2, 1, 1]) == 1\n    assert candidate([2, 7, 10, 1]) == 1\n    assert candidate([2, 10, 1, 7]) == 1\n    assert candidate([4, 2, 3, 5]) == 1\n    assert candidate([4, 4, 1, 1]) == 1\n    assert candidate([5, 3, 10, 10]) == 1\n    assert candidate([6, 3, 4, 4]) == 1\n    assert candidate([6, 5, 2, 10]) == 1\n    assert candidate([7, 2, 5, 9]) == 1\n    assert candidate([1, 3, 4, 4, 3]) == 1\n    assert candidate([4, 1, 7, 10, 1]) == 1\n    assert candidate([4, 3, 1, 4, 3]) == 1\n    assert candidate([4, 6, 2, 6, 4]) == 1\n    assert candidate([6, 10, 6, 3, 3]) == 1\n    assert candidate([1, 4, 5, 4, 5, 1]) == 1\n    assert candidate([1, 6, 6, 9, 5, 7]) == 1\n    assert candidate([2, 1, 2, 5, 3, 1]) == 1\n    assert candidate([2, 2, 4, 4, 2, 1]) == 1\n    assert candidate([3, 5, 2, 5, 5, 2]) == 1\n    assert candidate([4, 1, 4, 4, 5, 1]) == 1\n    assert candidate([4, 3, 1, 2, 5, 2]) == 1\n    assert candidate([4, 8, 8, 7, 6, 8]) == 1\n    assert candidate([5, 2, 2, 2, 9, 10]) == 1\n    assert candidate([7, 3, 2, 4, 3, 10]) == 1\n    assert candidate([7, 5, 6, 6, 7, 3]) == 1\n    assert candidate([8, 3, 9, 4, 5, 8]) == 1\n    assert candidate([2, 5, 4, 3, 5, 5, 4]) == 1\n    assert candidate([4, 5, 5, 1, 2, 5, 2]) == 1\n    assert candidate([4, 8, 7, 4, 9, 3, 9]) == 1\n    assert candidate([5, 3, 5, 7, 9, 10, 10]) == 1\n    assert candidate([7, 1, 9, 3, 9, 2, 6]) == 1\n    assert candidate([7, 10, 1, 8, 6, 1, 2]) == 1\n    assert candidate([9, 1, 10, 7, 3, 9, 7]) == 1\n    assert candidate([10, 10, 3, 9, 8, 3, 5]) == 1\n    assert candidate([10, 10, 4, 8, 5, 2, 6]) == 1\n    assert candidate([1, 5, 2, 10, 4, 5, 10, 1]) == 1\n    assert candidate([2, 1, 3, 3, 3, 3, 1, 4]) == 1\n    assert candidate([2, 2, 7, 4, 5, 5, 1, 2]) == 1\n    assert candidate([2, 4, 5, 5, 3, 5, 2, 4]) == 1\n    assert candidate([2, 10, 6, 7, 7, 2, 3, 4]) == 1\n    assert candidate([3, 3, 2, 2, 4, 2, 3, 3]) == 1\n    assert candidate([3, 4, 3, 4, 1, 1, 1, 2]) == 2\n    assert candidate([3, 4, 4, 3, 5, 4, 5, 5]) == 1\n    assert candidate([3, 6, 7, 7, 6, 9, 1, 6]) == 1\n    assert candidate([5, 1, 1, 1, 1, 5, 5, 5]) == 2\n    assert candidate([6, 7, 5, 5, 3, 6, 1, 8]) == 1\n    assert candidate([8, 5, 4, 5, 4, 7, 6, 10]) == 1\n    assert candidate([8, 10, 4, 6, 7, 9, 2, 1]) == 1\n    assert candidate([2, 6, 3, 8, 9, 10, 9, 3, 10]) == 1\n    assert candidate([4, 2, 2, 1, 3, 1, 5, 3, 3]) == 1\n    assert candidate([4, 4, 5, 1, 2, 1, 1, 1, 2]) == 2\n    assert candidate([4, 5, 3, 5, 5, 4, 4, 2, 1]) == 1\n    assert candidate([5, 1, 5, 1, 1, 5, 4, 3, 3]) == 2\n    assert candidate([5, 1, 5, 3, 3, 2, 2, 4, 4]) == 1\n    assert candidate([6, 4, 5, 7, 9, 10, 10, 6, 9]) == 1\n    assert candidate([6, 5, 6, 4, 9, 8, 8, 3, 7]) == 1\n    assert candidate([9, 7, 6, 10, 1, 8, 5, 4, 2]) == 1\n    assert candidate([9, 10, 1, 6, 4, 10, 1, 3, 4]) == 1\n    assert candidate([10, 5, 4, 8, 4, 3, 7, 10, 3]) == 1\n    assert candidate([1, 1, 1, 2, 2, 2, 5, 5, 1, 3]) == 2\n    assert candidate([4, 5, 1, 8, 2, 7, 2, 7, 7, 6]) == 1\n    assert candidate([7, 1, 3, 10, 1, 4, 5, 2, 9, 7]) == 1\n    assert candidate([7, 2, 2, 9, 5, 6, 6, 10, 2, 3]) == 1\n    assert candidate([7, 7, 3, 6, 8, 10, 3, 7, 6, 9]) == 1\n    assert candidate([1, 4, 5, 8, 9, 3, 1, 4, 7, 4, 5]) == 1\n    assert candidate([4, 10, 3, 8, 9, 5, 7, 6, 9, 10, 10]) == 1\n    assert candidate([5, 9, 3, 9, 3, 10, 1, 1, 6, 3, 10]) == 1\n\ndef test_check():\n    check(minimumArrayLength)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3245_beautifulIndices", "language": "py", "prompt": "from typing import List\n\ndef beautifulIndices(s: str, a: str, b: str, k: int) -> List[int]:\n    \"\"\"You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\n0 <= i <= s.length - a.length\ns[i..(i + a.length - 1)] == a\nThere exists an index j such that:\n0 <= j <= s.length - b.length\ns[j..(j + b.length - 1)] == b\n|j - i| <= k\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\nExample 1:\nInput: s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\nOutput: [16,33]\nExplanation: There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.\nExample 2:\nInput: s = \"abcd\", a = \"a\", b = \"a\", k = 4\nOutput: [0]\nExplanation: There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.\nConstraints:\n1 <= k <= s.length <= 105\n1 <= a.length, b.length <= 10\ns, a, and b contain only lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3245_beautifulIndices.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(isawsquirrelnearmysquirrelhouseohmy, my, squirrel, 15) == [16, 33]\n    assert candidate(abcd, a, a, 4) == [0]\n    assert candidate(sqgrt, rt, sq, 3) == [3]\n    assert candidate(mquz, tklr, caz, 4) == []\n    assert candidate(wl, xjigt, wl, 2) == []\n    assert candidate(bavgoc, ba, c, 6) == [0]\n    assert candidate(xpcp, yxnod, xpc, 4) == []\n    assert candidate(lahhnlwx, hhnlw, ty, 6) == []\n    assert candidate(dexgscgecd, gscge, d, 6) == [3]\n    assert candidate(vjrao, vjr, yxpsw, 5) == []\n    assert candidate(oo, swhup, o, 1) == []\n    assert candidate(bxlzgxc, ducf, xlzgx, 3) == []\n    assert candidate(wetlgztzm, box, wetl, 4) == []\n    assert candidate(ocmm, m, oc, 3) == [2, 3]\n    assert candidate(goxmox, gibs, ox, 6) == []\n    assert candidate(kzlrqzldvy, zl, tfsr, 9) == []\n    assert candidate(qhd, hd, od, 1) == []\n    assert candidate(bozpeh, bozp, vrjn, 2) == []\n    assert candidate(ggfsg, gfsg, g, 4) == [1]\n    assert candidate(fape, vq, ap, 4) == []\n    assert candidate(isitbenom, pmng, itben, 5) == []\n    assert candidate(gw, ln, gw, 1) == []\n    assert candidate(jhu, sio, xnx, 3) == []\n    assert candidate(elcklvcvdg, lck, e, 5) == [1]\n    assert candidate(subsu, tdo, su, 1) == []\n    assert candidate(jqcdc, c, d, 2) == [2, 4]\n    assert candidate(hhvc, gfwo, hh, 4) == []\n    assert candidate(tyoq, vhjit, yoq, 2) == []\n    assert candidate(rtbp, migjb, es, 2) == []\n    assert candidate(gkkstqvl, gkkst, xszl, 2) == []\n    assert candidate(bc, spzk, wsick, 1) == []\n    assert candidate(gyalx, neet, rbhl, 3) == []\n    assert candidate(qo, agt, xrh, 2) == []\n    assert candidate(rinzbrrr, nzb, r, 2) == [2]\n    assert candidate(tjly, j, n, 2) == []\n    assert candidate(frkxslnnn, rkxsl, n, 2) == []\n    assert candidate(cffczbccc, ff, c, 9) == [1]\n    assert candidate(uiddqbeoaw, iddq, rlr, 6) == []\n    assert candidate(fh, ywab, qcjyl, 2) == []\n    assert candidate(gdbm, gdbm, uefwm, 3) == []\n    assert candidate(bpcwswu, zi, pcwsw, 1) == []\n    assert candidate(dh, jmcds, nytk, 1) == []\n    assert candidate(qjgckhiif, hiif, jgc, 4) == [5]\n    assert candidate(qyixufgyk, y, ixuf, 5) == [1, 7]\n    assert candidate(wiwiwinwio, hm, wi, 8) == []\n    assert candidate(ffnlge, bjt, pavkr, 6) == []\n    assert candidate(rj, m, umg, 2) == []\n    assert candidate(bkgqxl, yufy, kgq, 1) == []\n    assert candidate(hhcwp, sixek, cwp, 4) == []\n    assert candidate(czr, cz, wxxql, 3) == []\n    assert candidate(tdbnme, t, dbnme, 4) == [0]\n    assert candidate(px, acgz, jaxel, 2) == []\n    assert candidate(wfa, fyntx, a, 1) == []\n    assert candidate(ixfkxfld, ixfk, urkke, 6) == []\n    assert candidate(kmjvlkjy, gll, vlk, 6) == []\n    assert candidate(bsbsvnmvnm, vnm, bs, 7) == [4, 7]\n    assert candidate(uzqauzqw, uzq, psnso, 2) == []\n    assert candidate(fsvkche, yot, svkc, 1) == []\n    assert candidate(cwwzmfzz, fnlgc, cwwzm, 6) == []\n    assert candidate(profguo, o, oyzje, 6) == []\n    assert candidate(ckbdnw, djpc, ckbdn, 5) == []\n    assert candidate(ankfahcorr, r, kfah, 7) == [8, 9]\n    assert candidate(ahjzfg, hjzf, zs, 6) == []\n    assert candidate(eueuau, u, e, 3) == [1, 3, 5]\n    assert candidate(etuwwhwljf, uwwh, efcuq, 3) == []\n    assert candidate(vvjhgg, g, kj, 1) == []\n    assert candidate(igytmsmsgx, msmsg, gyt, 3) == [4]\n    assert candidate(cheoeo, eo, y, 1) == []\n    assert candidate(gqzf, cgpdn, zf, 1) == []\n    assert candidate(zapqwtmx, apqwt, m, 1) == []\n    assert candidate(klxtee, e, klx, 2) == []\n    assert candidate(xa, gzsj, oooq, 2) == []\n    assert candidate(gxoxqgxoxq, gxoxq, x, 2) == [0, 5]\n    assert candidate(lsuo, d, uo, 3) == []\n    assert candidate(yhi, ph, yhi, 3) == []\n    assert candidate(cj, j, em, 2) == []\n    assert candidate(clxzclxz, ge, clxz, 5) == []\n    assert candidate(gjtcpyiniv, cpyi, hjvtq, 9) == []\n    assert candidate(kyrvedszzo, rve, y, 3) == [2]\n    assert candidate(makolbcrme, qlhpf, akol, 9) == []\n    assert candidate(vgxshd, vgx, en, 2) == []\n    assert candidate(wfvxfzut, wfv, ut, 6) == [0]\n    assert candidate(xxtxxuftxt, tx, x, 2) == [2, 7]\n    assert candidate(cwtybs, wgfez, cwty, 4) == []\n    assert candidate(opnkctux, op, nkctu, 5) == [0]\n    assert candidate(swswmcsksw, mcsk, sw, 4) == [4]\n    assert candidate(qqnb, q, q, 2) == [0, 1]\n    assert candidate(tt, t, q, 1) == []\n    assert candidate(lllclbii, l, i, 7) == [0, 1, 2, 4]\n    assert candidate(oanyzue, yzu, oan, 5) == [3]\n    assert candidate(opmfgzthj, opmf, g, 9) == [0]\n    assert candidate(uiddidde, idd, sal, 7) == []\n    assert candidate(gzzau, za, rwu, 2) == []\n    assert candidate(srpxqurxx, nsr, x, 3) == []\n    assert candidate(sxaono, jy, xaon, 6) == []\n    assert candidate(acxtjiova, acx, tjiov, 3) == [0]\n    assert candidate(iltazkww, k, z, 6) == [5]\n    assert candidate(ltxbhpi, cjfbb, ltxb, 5) == []\n    assert candidate(gysgysh, gys, qzvae, 5) == []\n    assert candidate(zypvgt, zypv, ljxni, 4) == []\n\ndef test_check():\n    check(beautifulIndices)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3246_hasTrailingZeros", "language": "py", "prompt": "from typing import List\n\ndef hasTrailingZeros(nums: List[int]) -> bool:\n    \"\"\"You are given an array of positive integers nums.\nYou have to check if it is possible to select two or more elements in the array such that the bitwise OR of the selected elements has at least one trailing zero in its binary representation.\nFor example, the binary representation of 5, which is \"101\", does not have any trailing zeros, whereas the binary representation of 4, which is \"100\", has two trailing zeros.\nReturn true if it is possible to select two or more elements whose bitwise OR has trailing zeros, return false otherwise.\nExample 1:\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\nExample 2:\nInput: nums = [2,4,8,16]\nOutput: true\nExplanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\nOther possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16).\nExample 3:\nInput: nums = [1,3,5,7,9]\nOutput: false\nExplanation: There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR.\nConstraints:\n2 <= nums.length <= 100\n1 <= nums[i] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3246_hasTrailingZeros.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 5, 7, 9]) == False\n    assert candidate([1, 2]) == False\n    assert candidate([2, 4, 8, 16]) == True\n    assert candidate([1, 3]) == False\n    assert candidate([1, 7]) == False\n    assert candidate([3, 3]) == False\n    assert candidate([3, 4]) == False\n    assert candidate([2, 2]) == True\n    assert candidate([4, 8]) == True\n    assert candidate([4, 32]) == True\n    assert candidate([6, 2]) == True\n    assert candidate([6, 8]) == True\n    assert candidate([3, 9]) == False\n    assert candidate([4, 3]) == False\n    assert candidate([5, 6]) == False\n    assert candidate([7, 9]) == False\n    assert candidate([8, 2]) == True\n    assert candidate([8, 4]) == True\n    assert candidate([7, 10]) == False\n    assert candidate([9, 73]) == False\n    assert candidate([8, 8]) == True\n    assert candidate([10, 5]) == False\n    assert candidate([11, 17]) == False\n    assert candidate([19, 11]) == False\n    assert candidate([19, 35]) == False\n    assert candidate([19, 51]) == False\n    assert candidate([21, 61]) == False\n    assert candidate([23, 21]) == False\n    assert candidate([25, 25]) == False\n    assert candidate([10, 2]) == True\n    assert candidate([12, 8]) == True\n    assert candidate([27, 77]) == False\n    assert candidate([16, 4]) == True\n    assert candidate([16, 8]) == True\n    assert candidate([16, 16]) == True\n    assert candidate([16, 32]) == True\n    assert candidate([29, 13]) == False\n    assert candidate([37, 69]) == False\n    assert candidate([39, 53]) == False\n    assert candidate([24, 32]) == True\n    assert candidate([32, 32]) == True\n    assert candidate([42, 9]) == False\n    assert candidate([45, 24]) == False\n    assert candidate([64, 16]) == True\n    assert candidate([49, 23]) == False\n    assert candidate([4, 6, 4]) == True\n    assert candidate([8, 16, 4]) == True\n    assert candidate([57, 27]) == False\n    assert candidate([8, 16, 16]) == True\n    assert candidate([10, 4, 6]) == True\n    assert candidate([12, 8, 8]) == True\n    assert candidate([63, 47]) == False\n    assert candidate([67, 69]) == False\n    assert candidate([69, 87]) == False\n    assert candidate([16, 8, 4]) == True\n    assert candidate([77, 49]) == False\n    assert candidate([89, 31]) == False\n    assert candidate([1, 3, 4]) == False\n    assert candidate([1, 5, 3]) == False\n    assert candidate([1, 7, 9]) == False\n    assert candidate([3, 69, 59]) == False\n    assert candidate([16, 16, 16]) == True\n    assert candidate([6, 5, 5]) == False\n    assert candidate([7, 77, 9]) == False\n    assert candidate([9, 77, 51]) == False\n    assert candidate([16, 32, 8]) == True\n    assert candidate([16, 32, 16]) == True\n    assert candidate([10, 1, 9]) == False\n    assert candidate([10, 7, 5]) == False\n    assert candidate([11, 23, 27]) == False\n    assert candidate([15, 13, 63]) == False\n    assert candidate([21, 27, 79]) == False\n    assert candidate([23, 23, 47]) == False\n    assert candidate([35, 91, 15]) == False\n    assert candidate([32, 4, 16]) == True\n    assert candidate([32, 8, 48]) == True\n    assert candidate([33, 40, 84]) == True\n    assert candidate([41, 83, 53]) == False\n    assert candidate([64, 48, 6]) == True\n    assert candidate([75, 34, 58]) == True\n    assert candidate([3, 8, 2, 3]) == True\n    assert candidate([43, 15, 41]) == False\n    assert candidate([43, 65, 79]) == False\n    assert candidate([47, 7, 19]) == False\n    assert candidate([4, 6, 1, 1]) == True\n    assert candidate([4, 10, 1, 7]) == True\n    assert candidate([49, 73, 81]) == False\n    assert candidate([6, 3, 10, 6]) == True\n    assert candidate([6, 4, 2, 8]) == True\n    assert candidate([6, 12, 12, 24]) == True\n    assert candidate([7, 2, 4, 4]) == True\n    assert candidate([8, 6, 4, 32]) == True\n    assert candidate([8, 12, 16, 2]) == True\n    assert candidate([12, 64, 16, 8]) == True\n    assert candidate([16, 4, 8, 16]) == True\n    assert candidate([51, 33, 25]) == False\n    assert candidate([16, 8, 64, 4]) == True\n    assert candidate([16, 16, 12, 8]) == True\n    assert candidate([51, 43, 9]) == False\n\ndef test_check():\n    check(hasTrailingZeros)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3249_minOperations", "language": "py", "prompt": "from typing import List\n\ndef minOperations(nums: List[int], k: int) -> int:\n    \"\"\"You are given a 0-indexed integer array nums and a positive integer k.\nYou can apply the following operation on the array any number of times:\nChoose any element of the array and flip a bit in its binary representation. Flipping a bit means changing a 0 to 1 or vice versa.\nReturn the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k.\nNote that you can flip leading zero bits in the binary representation of elements. For example, for the number (101)2 you can flip the fourth bit and obtain (1101)2.\nExample 1:\nInput: nums = [2,1,3,4], k = 1\nOutput: 2\nExplanation: We can do the following operations:\n- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\nThe XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\nIt can be shown that we cannot make the XOR equal to k in less than 2 operations.\nExample 2:\nInput: nums = [2,0,2,0], k = 0\nOutput: 0\nExplanation: The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed.\nConstraints:\n1 <= nums.length <= 105\n0 <= nums[i] <= 106\n0 <= k <= 106\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3249_minOperations.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([2, 1, 3, 4], 1) == 2\n    assert candidate([2, 0, 2, 0], 0) == 0\n    assert candidate([4], 7) == 2\n    assert candidate([3, 13, 9, 8, 5, 18, 11, 10], 13) == 2\n    assert candidate([9, 7, 9, 14, 8, 6], 12) == 3\n    assert candidate([13, 9, 10, 16, 11, 8, 1], 17) == 3\n    assert candidate([12, 14], 1) == 2\n    assert candidate([18, 18], 20) == 2\n    assert candidate([3, 5, 1, 1], 19) == 3\n    assert candidate([7, 0, 0, 0], 8) == 4\n    assert candidate([13, 15, 19, 18, 2, 9, 18, 11, 0, 7], 6) == 1\n    assert candidate([9, 15, 19, 15, 10, 15, 14, 0, 2, 5], 20) == 1\n    assert candidate([19, 4, 19, 6, 3, 19, 14, 4, 16, 12], 4) == 0\n    assert candidate([2, 10, 5, 5, 12, 3, 14, 6, 11, 14], 3) == 2\n    assert candidate([11, 20], 10) == 3\n    assert candidate([10, 12, 5, 3, 16, 0], 1) == 2\n    assert candidate([0, 4, 4, 7, 14, 13], 1) == 2\n    assert candidate([16, 2, 20, 13, 15, 20, 13], 16) == 3\n    assert candidate([19, 11, 11, 0, 16, 2, 2, 0, 9], 4) == 3\n    assert candidate([10, 17, 19, 8, 15], 19) == 3\n    assert candidate([8, 17, 7, 18], 6) == 2\n    assert candidate([10, 20], 7) == 3\n    assert candidate([11, 14, 5, 9, 19, 3, 1], 10) == 2\n    assert candidate([19, 13, 16], 4) == 2\n    assert candidate([12, 18, 13, 2, 1, 5, 8, 5, 8, 6], 7) == 2\n    assert candidate([15], 9) == 2\n    assert candidate([8, 5, 4, 5, 13, 18], 0) == 3\n    assert candidate([9, 18], 3) == 2\n    assert candidate([6, 9, 15, 17, 16], 19) == 2\n    assert candidate([14, 0, 17], 2) == 4\n    assert candidate([12, 1, 14, 13], 4) == 2\n    assert candidate([4, 10, 6, 10, 10, 16], 18) == 2\n    assert candidate([2, 11, 6, 12, 2, 15, 4, 8, 11], 3) == 2\n    assert candidate([7, 3, 12, 5, 1, 12, 8], 11) == 2\n    assert candidate([11, 14, 18, 14, 6, 18, 4, 16, 20, 5], 16) == 2\n    assert candidate([20, 2, 6, 0, 7], 20) == 2\n    assert candidate([9, 18, 19, 16, 8, 11, 15], 14) == 3\n    assert candidate([0, 3, 20, 0, 15, 7, 17, 4], 3) == 2\n    assert candidate([15, 6], 8) == 1\n    assert candidate([2, 7, 13, 16, 2, 2], 15) == 4\n    assert candidate([2, 12, 11, 11, 2, 12], 17) == 2\n    assert candidate([10, 8, 10], 11) == 2\n    assert candidate([1, 10, 2, 13], 0) == 1\n    assert candidate([1, 20, 4, 19, 12, 18, 5, 3, 11, 8], 14) == 4\n    assert candidate([16, 12, 12], 20) == 1\n    assert candidate([2, 1, 7, 3, 4, 9], 6) == 2\n    assert candidate([20, 0, 19, 14, 7, 0], 18) == 3\n    assert candidate([0, 15, 9, 1, 15], 11) == 2\n    assert candidate([9, 11, 8, 20, 10], 0) == 2\n    assert candidate([2, 10, 2, 14, 7, 13, 4, 9, 2], 20) == 3\n    assert candidate([7, 12, 8], 14) == 3\n    assert candidate([20, 11, 5, 8, 1, 8, 4, 16], 7) == 1\n    assert candidate([8, 2, 19, 9, 8], 9) == 2\n    assert candidate([17], 8) == 3\n    assert candidate([19, 6], 13) == 2\n    assert candidate([12, 3, 20, 19], 4) == 2\n    assert candidate([4, 10, 18, 17, 20, 6, 4], 10) == 2\n    assert candidate([8, 6, 12, 6, 6], 4) == 2\n    assert candidate([18, 12, 9, 18, 12, 12, 1], 12) == 1\n    assert candidate([14, 4, 0, 18, 18, 8, 4, 9], 17) == 4\n    assert candidate([7, 16, 16, 6], 19) == 2\n    assert candidate([7, 16, 2, 13, 0, 17, 16], 18) == 3\n    assert candidate([3, 17, 4, 2, 3, 9], 12) == 2\n    assert candidate([13, 14, 9, 19, 5, 13], 8) == 3\n    assert candidate([4, 15, 10, 15, 11, 1, 3, 5, 18, 13], 16) == 3\n    assert candidate([9, 7, 8], 11) == 3\n    assert candidate([7, 4, 6, 20, 9, 9, 6, 6], 10) == 4\n    assert candidate([1, 9, 13, 19, 19, 0, 16, 20, 4], 2) == 3\n    assert candidate([20, 3, 9, 6, 5, 8], 20) == 1\n    assert candidate([11, 20, 5, 16, 15, 11, 8], 11) == 3\n    assert candidate([12, 10, 16, 18, 17, 4, 2, 19, 17, 2], 19) == 0\n    assert candidate([15, 2], 10) == 3\n    assert candidate([13, 3, 10, 2, 9, 13, 5, 11, 5], 20) == 4\n    assert candidate([20, 12, 9, 3, 2, 11], 13) == 3\n    assert candidate([3, 19, 0, 18, 6], 15) == 3\n    assert candidate([12, 6], 18) == 2\n    assert candidate([10, 11, 12, 6, 10, 1, 15], 8) == 3\n    assert candidate([12, 8, 1, 16, 6, 12], 2) == 4\n    assert candidate([11, 5, 9], 2) == 2\n    assert candidate([2, 7], 6) == 2\n    assert candidate([20, 1], 8) == 4\n    assert candidate([9], 16) == 3\n    assert candidate([9, 5, 7, 11, 8, 18, 5, 1, 4], 8) == 2\n    assert candidate([1, 8, 7, 19, 3, 20, 13, 9, 10], 1) == 2\n    assert candidate([19, 18, 6], 8) == 4\n    assert candidate([19, 12, 3, 18, 12, 19, 5, 20], 0) == 0\n    assert candidate([6, 18, 12, 9, 20], 13) == 1\n    assert candidate([19, 5, 5, 7, 4, 7, 15], 7) == 5\n    assert candidate([17, 7, 19], 18) == 4\n    assert candidate([14, 13, 3, 15, 18, 20, 2, 9, 3], 14) == 4\n    assert candidate([16, 10, 3, 2, 3, 19], 4) == 4\n    assert candidate([2, 0, 8], 18) == 2\n    assert candidate([19, 5, 5, 12, 20, 2, 10, 17], 12) == 4\n    assert candidate([6, 0, 0, 1, 15, 9, 19, 12], 6) == 2\n    assert candidate([8, 16, 13, 8, 18, 9, 16, 16, 19, 11], 12) == 2\n    assert candidate([3, 7, 6, 7, 4, 3, 2], 2) == 1\n    assert candidate([0, 2, 9], 10) == 1\n    assert candidate([14, 10, 16, 9, 6, 13, 11, 13, 11, 16], 20) == 5\n    assert candidate([13, 19, 0, 12, 11, 10, 11, 2, 6], 7) == 4\n    assert candidate([6, 1, 4, 9, 1, 7, 11, 15, 15, 0], 8) == 4\n\ndef test_check():\n    check(minOperations)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3250_maximizeSquareArea", "language": "py", "prompt": "from typing import List\n\ndef maximizeSquareArea(m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n    \"\"\"There is a large (m - 1) x (n - 1) rectangular field with corners at (1, 1) and (m, n) containing some horizontal and vertical fences given in arrays hFences and vFences respectively.\nHorizontal fences are from the coordinates (hFences[i], 1) to (hFences[i], n) and vertical fences are from the coordinates (1, vFences[i]) to (m, vFences[i]).\nReturn the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field.\nSince the answer may be large, return it modulo 109 + 7.\nNote: The field is surrounded by two horizontal fences from the coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n). These fences cannot be removed.\nExample 1:\nInput: m = 4, n = 3, hFences = [2,3], vFences = [2]\nOutput: 4\nExplanation: Removing the horizontal fence at 2 and the vertical fence at 2 will give a square field of area 4.\nExample 2:\nInput: m = 6, n = 7, hFences = [2], vFences = [4]\nOutput: -1\nExplanation: It can be proved that there is no way to create a square field by removing fences.\nConstraints:\n3 <= m, n <= 109\n1 <= hFences.length, vFences.length <= 600\n1 < hFences[i] < m\n1 < vFences[i] < n\nhFences and vFences are unique.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3250_maximizeSquareArea.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(4, 3, [2, 3], [2]) == 4\n    assert candidate(6, 7, [2], [4]) == -1\n    assert candidate(4, 4, [2], [2, 3]) == 9\n    assert candidate(8, 5, [5, 4], [4]) == 16\n    assert candidate(4, 5, [2], [4]) == 9\n    assert candidate(5, 6, [4, 2, 3], [4, 5]) == 16\n    assert candidate(3, 9, [2], [8, 6, 5, 4]) == 4\n    assert candidate(6, 4, [3], [3, 2]) == 9\n    assert candidate(7, 4, [2, 3, 6, 5], [3, 2]) == 9\n    assert candidate(8, 8, [2, 3, 6, 7], [6, 5, 7, 4, 2, 3]) == 49\n    assert candidate(9, 9, [2, 4], [6, 4, 2]) == 64\n    assert candidate(7, 7, [4, 3], [2, 6]) == 36\n    assert candidate(4, 6, [2], [3, 4, 2]) == 9\n    assert candidate(8, 6, [7, 5, 2, 4, 3], [5, 3]) == 25\n    assert candidate(9, 3, [7, 4, 5], [2]) == 4\n    assert candidate(4, 3, [3], [2]) == 4\n    assert candidate(4, 3, [3, 2], [2]) == 4\n    assert candidate(8, 6, [6, 4, 3, 7, 2, 5], [5, 3, 4, 2]) == 25\n    assert candidate(8, 8, [6, 3, 7, 5], [6, 2, 7]) == 49\n    assert candidate(5, 5, [4, 3], [4]) == 16\n    assert candidate(5, 3, [4], [2]) == 1\n    assert candidate(7, 9, [5], [2, 7, 6, 8, 3]) == 36\n    assert candidate(8, 6, [5, 4, 6, 7, 3], [5, 3]) == 25\n    assert candidate(9, 7, [6, 4, 7, 5, 8], [6, 4, 2, 3]) == 36\n    assert candidate(6, 7, [5], [5, 3, 6]) == 25\n    assert candidate(3, 3, [2], [2]) == 4\n    assert candidate(7, 8, [4, 6, 2, 5, 3], [3, 5, 2, 4, 7]) == 36\n    assert candidate(3, 5, [2], [4, 2]) == 4\n    assert candidate(4, 3, [2], [2]) == 4\n    assert candidate(9, 3, [3], [2]) == 4\n    assert candidate(6, 7, [4, 2, 3, 5], [3, 5, 6]) == 25\n    assert candidate(8, 4, [6, 3, 2, 4, 7, 5], [2, 3]) == 9\n    assert candidate(4, 4, [2], [2]) == 9\n    assert candidate(3, 6, [2], [4, 3, 5]) == 4\n    assert candidate(8, 6, [5], [4, 2, 5]) == 16\n    assert candidate(9, 9, [5, 4, 2], [8, 4, 3, 5, 6]) == 64\n    assert candidate(5, 9, [3, 2, 4], [7, 6, 5]) == 16\n    assert candidate(5, 5, [4, 3, 2], [3, 4, 2]) == 16\n    assert candidate(7, 4, [5, 2, 4], [3]) == 9\n    assert candidate(8, 5, [4, 6, 2, 3], [4]) == 16\n    assert candidate(9, 5, [6], [3]) == -1\n    assert candidate(9, 4, [2, 8, 3, 7, 4, 6, 5], [2, 3]) == 9\n    assert candidate(5, 8, [2, 3, 4], [3, 5, 6, 4]) == 16\n    assert candidate(9, 6, [7, 3, 4, 5, 8, 2], [5, 3, 2, 4]) == 25\n    assert candidate(5, 4, [4], [2]) == 9\n    assert candidate(9, 6, [2, 5], [5, 2]) == 16\n    assert candidate(6, 9, [4, 5, 2], [5, 7, 8, 2, 3, 6]) == 25\n    assert candidate(4, 5, [2], [2]) == 9\n    assert candidate(9, 6, [2, 4], [5, 3]) == 25\n    assert candidate(4, 7, [2], [4, 3, 6, 2, 5]) == 9\n    assert candidate(8, 3, [3, 2, 5], [2]) == 4\n    assert candidate(6, 8, [4, 2, 3, 5], [7, 4, 5, 6]) == 25\n    assert candidate(3, 5, [2], [3]) == 4\n    assert candidate(8, 8, [2, 5, 6], [3, 7, 4, 2, 5]) == 49\n    assert candidate(8, 7, [3, 4, 7], [2, 6, 3, 4]) == 36\n    assert candidate(7, 4, [3, 6, 5], [2]) == 9\n    assert candidate(5, 6, [2, 3], [3, 2, 5]) == 16\n    assert candidate(6, 7, [5], [4, 2, 5, 6]) == 25\n    assert candidate(8, 8, [4, 5, 2, 7], [5, 3, 4, 2, 7, 6]) == 49\n    assert candidate(7, 9, [6, 3, 4], [8, 6, 2]) == 36\n    assert candidate(7, 4, [3, 4, 6], [3, 2]) == 9\n    assert candidate(6, 8, [5, 4, 3], [5, 7, 3, 2, 6, 4]) == 25\n    assert candidate(8, 9, [2, 3, 4, 7, 6, 5], [3, 7, 8]) == 49\n    assert candidate(3, 4, [2], [2, 3]) == 4\n    assert candidate(9, 9, [8, 5, 6, 2, 7], [8, 6, 4, 2]) == 64\n    assert candidate(7, 6, [4, 5], [5, 3]) == 16\n    assert candidate(5, 4, [2], [3]) == 9\n    assert candidate(5, 5, [3], [3, 4, 2]) == 16\n    assert candidate(9, 7, [3], [3, 2, 5, 4]) == 36\n    assert candidate(8, 6, [4], [5, 2, 3]) == 16\n    assert candidate(6, 9, [3, 4, 2], [3, 2, 8]) == 25\n    assert candidate(7, 6, [3, 6, 5, 2, 4], [2, 3, 5, 4]) == 25\n    assert candidate(7, 3, [5, 3, 6, 4], [2]) == 4\n    assert candidate(4, 7, [3], [2]) == 1\n    assert candidate(3, 7, [2], [4, 3, 2, 6, 5]) == 4\n    assert candidate(5, 9, [2, 4], [4, 7]) == 9\n    assert candidate(5, 9, [4, 2], [8, 7, 3, 2, 6, 4]) == 16\n    assert candidate(3, 8, [2], [3, 7, 2, 5, 4]) == 4\n    assert candidate(4, 7, [2, 3], [4, 2]) == 9\n    assert candidate(8, 9, [7, 6, 3, 2, 5, 4], [3, 2, 6]) == 49\n    assert candidate(7, 8, [6], [5]) == -1\n    assert candidate(9, 7, [2, 7, 8, 5], [6, 3]) == 36\n    assert candidate(9, 9, [4, 7, 2, 5, 8, 6], [7, 6, 4, 5, 8, 2, 3]) == 64\n    assert candidate(7, 7, [6, 3, 2, 5], [6, 3]) == 36\n    assert candidate(7, 7, [5], [2, 3, 6]) == 36\n    assert candidate(4, 9, [3], [4, 3, 7, 6, 8, 5, 2]) == 9\n    assert candidate(4, 5, [2, 3], [3, 4]) == 9\n    assert candidate(3, 7, [2], [3, 6]) == 4\n    assert candidate(4, 9, [3, 2], [4, 6]) == 9\n    assert candidate(9, 9, [5], [6, 5, 2, 7, 3, 8]) == 64\n    assert candidate(5, 6, [3, 4, 2], [5, 3, 2]) == 16\n    assert candidate(5, 6, [3, 2], [5]) == 16\n    assert candidate(5, 5, [3, 4], [3, 2, 4]) == 16\n    assert candidate(9, 5, [7, 5, 8], [4, 2, 3]) == 16\n    assert candidate(3, 6, [2], [2, 5, 4]) == 4\n    assert candidate(5, 9, [4, 2, 3], [8, 3, 5, 6, 4, 2]) == 16\n    assert candidate(4, 7, [3, 2], [5]) == 4\n    assert candidate(6, 9, [4, 2], [3, 4, 7, 2]) == 25\n    assert candidate(6, 5, [4], [3, 2]) == 9\n    assert candidate(8, 5, [6, 7, 4, 5, 2], [4]) == 16\n\ndef test_check():\n    check(maximizeSquareArea)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3251_areaOfMaxDiagonal", "language": "py", "prompt": "from typing import List\n\ndef areaOfMaxDiagonal(dimensions: List[List[int]]) -> int:\n    \"\"\"You are given a 2D 0-indexed integer array dimensions.\nFor all indices i, 0 <= i < dimensions.length, dimensions[i][0] represents the length and dimensions[i][1] represents the width of the rectangle i.\nReturn the area of the rectangle having the longest diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the maximum area.\nExample 1:\nInput: dimensions = [[9,3],[8,6]]\nOutput: 48\nExplanation: \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) \u2248 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\nExample 2:\nInput: dimensions = [[3,4],[4,3]]\nOutput: 12\nExplanation: Length of diagonal is the same for both which is 5, so maximum area = 12.\nConstraints:\n1 <= dimensions.length <= 100\ndimensions[i].length == 2\n1 <= dimensions[i][0], dimensions[i][1] <= 100\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3251_areaOfMaxDiagonal.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([[9, 3], [8, 6]]) == 48\n    assert candidate([[3, 4], [4, 3]]) == 12\n    assert candidate([[4, 10], [4, 9], [9, 3], [10, 8]]) == 80\n    assert candidate([[2, 6], [5, 1], [3, 10], [8, 4]]) == 30\n    assert candidate([[3, 7], [2, 10], [3, 4], [9, 9], [5, 10]]) == 81\n    assert candidate([[10, 4]]) == 40\n    assert candidate([[9, 9], [1, 8], [10, 5], [2, 8], [6, 3], [7, 1]]) == 81\n    assert candidate([[10, 3], [5, 9], [8, 3]]) == 30\n    assert candidate([[2, 7], [3, 2], [3, 3], [10, 4], [5, 3], [8, 10], [8, 8], [4, 7]]) == 80\n    assert candidate([[1, 10], [3, 10], [4, 4], [2, 6], [6, 3], [6, 4], [9, 1], [6, 1], [2, 3]]) == 30\n    assert candidate([[4, 7], [10, 10], [3, 7], [9, 1], [5, 7], [3, 9], [10, 4], [4, 8]]) == 100\n    assert candidate([[1, 1], [6, 8], [6, 9], [7, 2], [6, 8], [1, 3], [3, 1], [1, 9]]) == 54\n    assert candidate([[6, 6], [1, 3], [8, 10], [10, 1], [3, 10], [7, 7], [10, 8]]) == 80\n    assert candidate([[6, 5], [8, 6], [2, 10], [8, 1], [9, 2], [3, 5], [3, 5]]) == 20\n    assert candidate([[5, 1], [4, 9], [9, 1], [5, 8], [2, 9], [3, 2], [10, 10], [5, 2]]) == 100\n    assert candidate([[8, 3], [9, 10], [7, 7], [6, 5], [6, 9], [9, 10], [5, 10]]) == 90\n    assert candidate([[6, 10], [8, 6], [10, 1], [7, 10], [10, 10], [9, 5]]) == 100\n    assert candidate([[9, 5], [9, 2], [2, 2], [8, 9], [5, 7], [8, 10], [3, 5]]) == 80\n    assert candidate([[3, 9], [9, 5]]) == 45\n    assert candidate([[10, 10], [5, 5], [3, 2], [2, 6], [3, 1], [10, 7], [4, 8], [7, 9], [9, 9], [1, 2]]) == 100\n    assert candidate([[2, 3], [3, 5], [2, 1]]) == 15\n    assert candidate([[4, 4], [7, 7]]) == 49\n    assert candidate([[7, 5], [9, 6], [9, 4], [5, 7], [2, 6], [10, 3], [9, 9], [9, 4], [8, 2]]) == 81\n    assert candidate([[5, 1], [9, 1], [7, 1], [7, 1], [3, 1], [10, 7], [9, 1], [7, 2], [4, 6], [3, 6]]) == 70\n    assert candidate([[8, 4], [7, 4], [1, 5], [7, 8], [5, 6], [5, 2]]) == 56\n    assert candidate([[5, 10], [3, 7], [8, 6], [8, 6], [5, 9], [10, 5], [7, 8], [1, 9], [2, 5], [6, 6]]) == 50\n    assert candidate([[9, 4]]) == 36\n    assert candidate([[7, 6], [2, 8], [9, 6], [1, 10], [5, 1]]) == 54\n    assert candidate([[4, 2], [1, 6], [2, 1], [4, 10], [10, 1], [7, 5], [8, 3]]) == 40\n    assert candidate([[1, 4]]) == 4\n    assert candidate([[9, 4], [6, 7]]) == 36\n    assert candidate([[7, 5]]) == 35\n    assert candidate([[1, 9], [9, 7], [8, 4], [6, 6], [7, 8], [4, 6], [7, 4], [9, 9], [9, 8], [8, 8]]) == 81\n    assert candidate([[3, 8], [6, 3], [5, 2], [3, 7], [1, 3], [9, 8], [4, 2], [3, 8]]) == 72\n    assert candidate([[5, 4], [2, 4], [8, 5], [8, 4], [1, 2], [6, 4]]) == 40\n    assert candidate([[7, 2], [4, 6]]) == 14\n    assert candidate([[8, 10], [5, 2], [4, 9]]) == 80\n    assert candidate([[9, 2], [5, 6], [4, 2]]) == 18\n    assert candidate([[3, 8], [2, 9], [7, 7], [1, 5], [1, 1]]) == 49\n    assert candidate([[6, 2], [8, 2], [6, 8], [7, 6], [1, 2], [6, 8], [10, 9], [2, 8]]) == 90\n    assert candidate([[3, 8], [4, 1], [5, 2], [2, 6], [4, 9], [10, 6], [6, 10], [3, 4], [6, 6], [4, 3]]) == 60\n    assert candidate([[5, 5], [3, 8], [2, 8]]) == 24\n    assert candidate([[8, 1], [5, 8], [3, 8]]) == 40\n    assert candidate([[2, 8], [8, 1], [7, 10], [5, 7], [2, 4], [3, 10], [2, 10], [7, 10], [5, 6]]) == 70\n    assert candidate([[3, 10], [1, 3], [10, 5], [5, 9]]) == 50\n    assert candidate([[10, 6], [4, 3]]) == 60\n    assert candidate([[7, 8], [8, 6], [10, 10], [6, 7], [7, 10]]) == 100\n    assert candidate([[7, 2], [7, 3], [4, 6], [4, 4], [7, 8], [2, 4]]) == 56\n    assert candidate([[4, 7], [3, 1], [1, 10], [4, 2], [4, 10], [8, 8]]) == 64\n    assert candidate([[1, 8], [4, 3], [7, 7], [10, 6], [5, 5], [1, 3], [9, 1], [8, 3], [3, 2], [5, 8]]) == 60\n    assert candidate([[6, 7], [1, 7], [5, 10], [10, 1], [8, 3]]) == 50\n    assert candidate([[3, 5], [2, 7], [4, 4], [4, 9], [7, 6], [2, 4], [5, 2]]) == 36\n    assert candidate([[8, 8], [6, 10], [6, 6]]) == 60\n    assert candidate([[10, 2], [3, 3], [5, 9], [3, 7]]) == 45\n    assert candidate([[4, 3], [4, 1], [8, 9], [10, 1], [2, 7], [7, 7], [9, 3], [8, 6], [1, 5], [8, 3]]) == 72\n    assert candidate([[6, 8], [2, 3], [4, 9], [1, 1]]) == 48\n    assert candidate([[1, 6], [2, 10], [1, 5], [9, 3], [9, 1], [2, 2]]) == 20\n    assert candidate([[6, 5], [7, 10], [1, 2], [10, 3], [4, 2], [4, 8], [5, 10], [5, 9]]) == 70\n    assert candidate([[1, 2], [1, 2], [2, 4], [9, 9], [3, 8], [3, 9], [2, 3]]) == 81\n    assert candidate([[4, 4], [6, 1], [1, 10], [10, 7], [10, 5]]) == 70\n    assert candidate([[3, 2], [2, 8], [10, 9], [9, 8], [2, 2], [9, 1]]) == 90\n    assert candidate([[4, 10], [9, 6], [4, 10], [6, 7], [2, 3], [7, 9], [9, 2], [1, 9]]) == 63\n    assert candidate([[7, 4], [10, 2], [10, 8], [4, 9], [4, 9], [10, 3], [5, 4], [4, 5], [10, 6], [3, 9]]) == 80\n    assert candidate([[2, 5], [7, 4], [5, 3], [2, 4], [3, 10], [3, 5], [4, 5], [4, 4], [6, 5]]) == 30\n    assert candidate([[3, 2], [7, 10], [8, 10], [7, 4], [6, 1]]) == 80\n    assert candidate([[3, 8], [4, 5], [3, 8]]) == 24\n    assert candidate([[6, 8], [9, 9], [1, 7]]) == 81\n    assert candidate([[8, 1], [7, 5]]) == 35\n    assert candidate([[10, 6], [5, 1], [9, 5], [5, 7], [5, 8], [6, 5], [8, 3]]) == 60\n    assert candidate([[8, 6]]) == 48\n    assert candidate([[5, 2], [5, 9], [9, 5], [5, 5], [8, 6]]) == 45\n    assert candidate([[7, 8], [9, 9], [3, 5], [8, 1], [1, 3], [8, 2], [8, 6]]) == 81\n    assert candidate([[3, 10], [6, 8], [4, 5], [8, 1], [7, 2], [9, 8], [3, 7], [3, 3], [9, 10]]) == 90\n    assert candidate([[1, 1], [8, 7], [4, 6], [5, 2], [5, 9]]) == 56\n    assert candidate([[6, 2], [8, 4], [8, 6], [2, 10], [6, 1], [9, 8], [10, 8], [10, 10], [5, 9]]) == 100\n    assert candidate([[10, 2], [9, 7], [4, 2], [8, 6], [9, 10], [10, 7], [7, 5], [5, 10], [5, 9]]) == 90\n    assert candidate([[1, 4], [7, 2], [2, 6], [7, 7]]) == 49\n    assert candidate([[2, 5], [10, 10], [4, 4]]) == 100\n    assert candidate([[2, 10], [10, 4], [3, 9], [6, 10], [2, 10], [10, 1], [4, 1]]) == 60\n    assert candidate([[3, 6], [5, 4], [9, 5], [6, 2], [4, 4], [7, 2], [6, 7]]) == 45\n    assert candidate([[1, 1], [1, 7]]) == 7\n    assert candidate([[1, 2], [8, 8]]) == 64\n    assert candidate([[3, 7]]) == 21\n    assert candidate([[6, 7], [1, 5], [10, 9], [10, 2]]) == 90\n    assert candidate([[7, 8]]) == 56\n    assert candidate([[2, 6], [10, 3], [10, 5], [1, 9], [5, 2], [9, 10], [7, 2], [7, 7], [1, 10]]) == 90\n    assert candidate([[3, 4], [8, 2], [9, 3], [2, 9], [6, 5], [10, 5], [4, 1], [8, 7], [3, 9]]) == 50\n    assert candidate([[7, 6], [6, 8], [5, 7], [1, 1], [4, 5], [6, 10], [9, 3], [4, 4]]) == 60\n    assert candidate([[1, 3], [2, 4], [4, 9], [10, 9], [3, 9], [7, 5], [2, 3], [10, 7], [2, 3], [1, 5]]) == 90\n    assert candidate([[1, 8], [6, 10], [4, 8], [3, 8], [4, 3]]) == 60\n    assert candidate([[6, 5], [3, 10], [8, 7], [10, 10], [2, 8], [5, 8], [10, 8], [9, 10], [2, 8], [8, 9]]) == 100\n    assert candidate([[1, 6], [8, 3], [6, 1], [2, 10], [2, 5], [3, 8]]) == 20\n    assert candidate([[7, 2], [3, 8], [10, 10], [7, 1], [6, 8], [6, 7], [10, 6], [4, 6], [5, 7], [10, 4]]) == 100\n    assert candidate([[9, 6]]) == 54\n    assert candidate([[8, 2], [7, 6], [1, 4], [1, 6], [4, 8], [10, 9], [9, 4], [1, 5]]) == 90\n    assert candidate([[7, 3], [2, 5], [7, 1], [10, 7], [7, 4], [8, 1]]) == 70\n    assert candidate([[9, 2]]) == 18\n    assert candidate([[9, 2], [7, 2], [2, 7]]) == 18\n    assert candidate([[2, 8], [10, 6], [8, 10], [9, 9]]) == 80\n    assert candidate([[3, 3]]) == 9\n\ndef test_check():\n    check(areaOfMaxDiagonal)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3252_incremovableSubarrayCount", "language": "py", "prompt": "from typing import List\n\ndef incremovableSubarrayCount(nums: List[int]) -> int:\n    \"\"\"You are given a 0-indexed array of positive integers nums.\nA subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.\nReturn the total number of incremovable subarrays of nums.\nNote that an empty array is considered strictly increasing.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nInput: nums = [1,2,3,4]\nOutput: 10\nExplanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray.\nExample 2:\nInput: nums = [6,5,7,8]\nOutput: 7\nExplanation: The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums.\nExample 3:\nInput: nums = [8,7,6,6]\nOutput: 3\nExplanation: The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.\nConstraints:\n1 <= nums.length <= 50\n1 <= nums[i] <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3252_incremovableSubarrayCount.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == 10\n    assert candidate([6, 5, 7, 8]) == 7\n    assert candidate([8, 7, 6, 6]) == 3\n    assert candidate([1]) == 1\n    assert candidate([2]) == 1\n    assert candidate([3]) == 1\n    assert candidate([4]) == 1\n    assert candidate([5]) == 1\n    assert candidate([6]) == 1\n    assert candidate([7]) == 1\n    assert candidate([8]) == 1\n    assert candidate([9]) == 1\n    assert candidate([10]) == 1\n    assert candidate([1, 2]) == 3\n    assert candidate([1, 4]) == 3\n    assert candidate([1, 8]) == 3\n    assert candidate([2, 10]) == 3\n    assert candidate([3, 4]) == 3\n    assert candidate([3, 8]) == 3\n    assert candidate([3, 10]) == 3\n    assert candidate([4, 2]) == 3\n    assert candidate([4, 3]) == 3\n    assert candidate([4, 5]) == 3\n    assert candidate([5, 1]) == 3\n    assert candidate([5, 4]) == 3\n    assert candidate([5, 6]) == 3\n    assert candidate([5, 7]) == 3\n    assert candidate([5, 9]) == 3\n    assert candidate([6, 4]) == 3\n    assert candidate([6, 5]) == 3\n    assert candidate([6, 9]) == 3\n    assert candidate([9, 3]) == 3\n    assert candidate([9, 4]) == 3\n    assert candidate([9, 7]) == 3\n    assert candidate([9, 8]) == 3\n    assert candidate([10, 5]) == 3\n    assert candidate([10, 10]) == 3\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1, 2, 6]) == 6\n    assert candidate([2, 1, 6]) == 5\n    assert candidate([2, 4, 5]) == 6\n    assert candidate([2, 6, 8]) == 6\n    assert candidate([2, 6, 9]) == 6\n    assert candidate([2, 10, 9]) == 5\n    assert candidate([3, 1, 9]) == 5\n    assert candidate([3, 5, 9]) == 6\n    assert candidate([3, 7, 2]) == 4\n    assert candidate([3, 8, 8]) == 5\n    assert candidate([3, 10, 10]) == 5\n    assert candidate([4, 5, 2]) == 4\n    assert candidate([5, 8, 4]) == 4\n    assert candidate([5, 9, 3]) == 4\n    assert candidate([5, 9, 7]) == 5\n    assert candidate([6, 7, 4]) == 4\n    assert candidate([8, 7, 4]) == 3\n    assert candidate([8, 7, 5]) == 3\n    assert candidate([8, 9, 5]) == 4\n    assert candidate([9, 2, 5]) == 4\n    assert candidate([9, 5, 2]) == 3\n    assert candidate([9, 6, 9]) == 4\n    assert candidate([9, 9, 4]) == 3\n    assert candidate([10, 7, 4]) == 3\n    assert candidate([10, 10, 6]) == 3\n    assert candidate([2, 1, 1, 4]) == 5\n    assert candidate([2, 5, 7, 9]) == 10\n    assert candidate([3, 5, 3, 5]) == 6\n    assert candidate([3, 7, 10, 6]) == 6\n    assert candidate([3, 8, 3, 8]) == 6\n    assert candidate([4, 1, 3, 7]) == 6\n    assert candidate([4, 3, 5, 1]) == 3\n    assert candidate([4, 3, 7, 5]) == 4\n    assert candidate([4, 8, 7, 6]) == 5\n    assert candidate([4, 9, 10, 6]) == 6\n    assert candidate([5, 4, 3, 8]) == 5\n    assert candidate([5, 5, 9, 5]) == 3\n    assert candidate([5, 10, 10, 9]) == 5\n    assert candidate([6, 4, 4, 9]) == 5\n    assert candidate([6, 5, 2, 10]) == 5\n    assert candidate([7, 3, 2, 3]) == 4\n    assert candidate([7, 5, 1, 10]) == 5\n    assert candidate([7, 9, 7, 2]) == 4\n    assert candidate([7, 9, 8, 8]) == 5\n    assert candidate([7, 10, 4, 3]) == 4\n    assert candidate([8, 8, 1, 7]) == 4\n    assert candidate([9, 2, 8, 7]) == 3\n    assert candidate([10, 5, 9, 5]) == 3\n    assert candidate([10, 7, 2, 8]) == 4\n    assert candidate([10, 9, 1, 3]) == 4\n    assert candidate([1, 1, 4, 4, 7]) == 6\n    assert candidate([1, 2, 3, 4, 5]) == 15\n    assert candidate([1, 2, 8, 9, 2]) == 7\n    assert candidate([1, 7, 4, 9, 2]) == 5\n    assert candidate([2, 2, 4, 6, 3]) == 4\n    assert candidate([2, 7, 1, 3, 9]) == 9\n    assert candidate([3, 1, 9, 6, 5]) == 4\n    assert candidate([3, 3, 3, 6, 1]) == 3\n    assert candidate([3, 7, 1, 8, 1]) == 4\n    assert candidate([4, 1, 6, 10, 2]) == 3\n    assert candidate([5, 4, 8, 4, 2]) == 3\n    assert candidate([6, 1, 1, 8, 10]) == 7\n\ndef test_check():\n    check(incremovableSubarrayCount)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3260_minimumCost", "language": "py", "prompt": "from typing import List\n\ndef minimumCost(nums: List[int], k: int, dist: int) -> int:\n    \"\"\"You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into k disjoint contiguous subarrays, such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist.\nReturn the minimum possible sum of the cost of these subarrays.\nExample 1:\nInput: nums = [1,3,2,6,4,2], k = 3, dist = 3\nOutput: 5\nExplanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\nExample 2:\nInput: nums = [10,1,2,2,2,1], k = 4, dist = 3\nOutput: 15\nExplanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\nExample 3:\nInput: nums = [10,8,18,9], k = 3, dist = 1\nOutput: 36\nExplanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\nConstraints:\n3 <= n <= 105\n1 <= nums[i] <= 109\n3 <= k <= n\nk - 2 <= dist <= n - 2\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3260_minimumCost.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 3, 2, 6, 4, 2], 3, 3) == 5\n    assert candidate([10, 1, 2, 2, 2, 1], 4, 3) == 15\n    assert candidate([10, 8, 18, 9], 3, 1) == 36\n    assert candidate([1, 1, 1], 3, 1) == 3\n    assert candidate([1, 1, 3], 3, 1) == 5\n    assert candidate([1, 2, 2], 3, 1) == 5\n    assert candidate([1, 2, 5], 3, 1) == 8\n    assert candidate([1, 4, 4], 3, 1) == 9\n    assert candidate([2, 2, 1], 3, 1) == 5\n    assert candidate([2, 3, 2], 3, 1) == 7\n    assert candidate([2, 5, 4], 3, 1) == 11\n    assert candidate([3, 1, 2], 3, 1) == 6\n    assert candidate([3, 1, 3], 3, 1) == 7\n    assert candidate([3, 2, 2], 3, 1) == 7\n    assert candidate([3, 3, 2], 3, 1) == 8\n    assert candidate([3, 4, 1], 3, 1) == 8\n    assert candidate([3, 5, 3], 3, 1) == 11\n    assert candidate([4, 1, 4], 3, 1) == 9\n    assert candidate([4, 1, 5], 3, 1) == 10\n    assert candidate([4, 2, 1], 3, 1) == 7\n    assert candidate([4, 2, 2], 3, 1) == 8\n    assert candidate([4, 2, 4], 3, 1) == 10\n    assert candidate([4, 2, 5], 3, 1) == 11\n    assert candidate([4, 3, 1], 3, 1) == 8\n    assert candidate([4, 3, 2], 3, 1) == 9\n    assert candidate([4, 5, 3], 3, 1) == 12\n    assert candidate([5, 2, 1], 3, 1) == 8\n    assert candidate([5, 3, 5], 3, 1) == 13\n    assert candidate([50, 50, 50], 3, 1) == 150\n    assert candidate([1, 5, 3, 6], 3, 2) == 9\n    assert candidate([1, 5, 3, 7], 3, 1) == 9\n    assert candidate([1, 5, 3, 7], 3, 2) == 9\n    assert candidate([1, 5, 3, 8], 3, 1) == 9\n    assert candidate([1, 5, 3, 8], 3, 2) == 9\n    assert candidate([1, 5, 4, 6], 4, 2) == 16\n    assert candidate([1, 6, 3, 5], 3, 2) == 9\n    assert candidate([1, 6, 3, 8], 3, 2) == 10\n    assert candidate([1, 6, 4, 5], 4, 2) == 16\n    assert candidate([1, 7, 4, 6], 4, 2) == 18\n    assert candidate([1, 7, 4, 8], 4, 2) == 20\n    assert candidate([1, 8, 3, 8], 3, 1) == 12\n    assert candidate([1, 8, 4, 7], 4, 2) == 20\n    assert candidate([2, 5, 3, 8], 3, 2) == 10\n    assert candidate([2, 5, 4, 7], 4, 2) == 18\n    assert candidate([2, 5, 4, 8], 4, 2) == 19\n    assert candidate([2, 6, 3, 5], 3, 1) == 10\n    assert candidate([2, 6, 3, 6], 3, 1) == 11\n    assert candidate([2, 6, 4, 5], 4, 2) == 17\n    assert candidate([2, 6, 4, 7], 4, 2) == 19\n    assert candidate([2, 6, 4, 8], 4, 2) == 20\n    assert candidate([2, 7, 3, 5], 3, 2) == 10\n    assert candidate([2, 7, 3, 8], 3, 2) == 12\n    assert candidate([2, 7, 4, 6], 4, 2) == 19\n    assert candidate([2, 8, 3, 5], 3, 1) == 10\n    assert candidate([2, 8, 4, 5], 4, 2) == 19\n    assert candidate([3, 5, 3, 5], 3, 1) == 11\n    assert candidate([3, 5, 3, 5], 3, 2) == 11\n    assert candidate([3, 5, 3, 8], 3, 2) == 11\n    assert candidate([3, 5, 4, 7], 4, 2) == 19\n    assert candidate([3, 6, 3, 5], 3, 1) == 11\n    assert candidate([3, 6, 3, 7], 3, 2) == 12\n    assert candidate([3, 6, 3, 8], 3, 1) == 12\n    assert candidate([3, 6, 4, 5], 4, 2) == 18\n    assert candidate([3, 7, 3, 5], 3, 1) == 11\n    assert candidate([3, 7, 3, 5], 3, 2) == 11\n    assert candidate([3, 7, 3, 6], 3, 1) == 12\n    assert candidate([3, 7, 3, 8], 3, 2) == 13\n    assert candidate([3, 7, 4, 7], 4, 2) == 21\n    assert candidate([3, 8, 3, 5], 3, 1) == 11\n    assert candidate([3, 8, 4, 6], 4, 2) == 21\n    assert candidate([4, 5, 3, 5], 3, 2) == 12\n    assert candidate([4, 5, 3, 6], 3, 2) == 12\n    assert candidate([4, 5, 3, 8], 3, 2) == 12\n    assert candidate([4, 5, 4, 5], 4, 2) == 18\n    assert candidate([4, 6, 3, 6], 3, 1) == 13\n    assert candidate([4, 6, 3, 7], 3, 1) == 13\n    assert candidate([4, 6, 4, 5], 4, 2) == 19\n    assert candidate([4, 6, 4, 8], 4, 2) == 22\n    assert candidate([4, 7, 3, 6], 3, 2) == 13\n    assert candidate([4, 7, 4, 5], 4, 2) == 20\n    assert candidate([4, 7, 4, 7], 4, 2) == 22\n    assert candidate([4, 8, 3, 5], 3, 2) == 12\n    assert candidate([4, 8, 3, 6], 3, 1) == 13\n    assert candidate([4, 8, 3, 7], 3, 2) == 14\n    assert candidate([4, 8, 4, 6], 4, 2) == 22\n    assert candidate([4, 8, 4, 8], 4, 2) == 24\n    assert candidate([1, 5, 6, 6, 3, 7, 2], 6, 5) == 23\n    assert candidate([1, 6, 4, 6, 2, 9, 11], 4, 3) == 13\n    assert candidate([1, 6, 4, 7, 9, 6, 1], 4, 4) == 12\n    assert candidate([1, 6, 5, 6, 4, 9, 11], 5, 5) == 22\n    assert candidate([1, 6, 5, 7, 8, 7, 5], 5, 4) == 25\n    assert candidate([1, 6, 5, 8, 11, 10, 6], 5, 3) == 31\n    assert candidate([1, 6, 6, 8, 4, 8, 7], 6, 4) == 33\n    assert candidate([1, 7, 6, 8, 5, 10, 10], 6, 5) == 37\n    assert candidate([1, 8, 3, 8, 11, 11, 10], 3, 5) == 12\n    assert candidate([1, 8, 4, 7, 11, 1, 8], 4, 4) == 13\n    assert candidate([1, 8, 6, 5, 6, 12, 12], 6, 5) == 38\n    assert candidate([1, 8, 6, 6, 12, 5, 2], 6, 5) == 28\n    assert candidate([2, 5, 3, 5, 7, 4, 3], 3, 3) == 9\n    assert candidate([2, 5, 4, 6, 6, 1, 3], 4, 5) == 10\n\ndef test_check():\n    check(minimumCost)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3262_largestPerimeter", "language": "py", "prompt": "from typing import List\n\ndef largestPerimeter(nums: List[int]) -> int:\n    \"\"\"You are given an array of positive integers nums of length n.\nA polygon is a closed plane figure that has at least 3 sides. The longest side of a polygon is smaller than the sum of its other sides.\nConversely, if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak.\nThe perimeter of a polygon is the sum of lengths of its sides.\nReturn the largest possible perimeter of a polygon whose sides can be formed from nums, or -1 if it is not possible to create a polygon.\nExample 1:\nInput: nums = [5,5,5]\nOutput: 15\nExplanation: The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15.\nExample 2:\nInput: nums = [1,12,1,2,5,50,3]\nOutput: 12\nExplanation: The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12.\nWe cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them.\nIt can be shown that the largest possible perimeter is 12.\nExample 3:\nInput: nums = [5,5,50]\nOutput: -1\nExplanation: There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5.\nConstraints:\n3 <= n <= 105\n1 <= nums[i] <= 109\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3262_largestPerimeter.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([5, 5, 5]) == 15\n    assert candidate([1, 12, 1, 2, 5, 50, 3]) == 12\n    assert candidate([5, 5, 50]) == -1\n    assert candidate([1, 1, 1]) == 3\n    assert candidate([1, 1, 2]) == -1\n    assert candidate([1, 1, 3]) == -1\n    assert candidate([1, 1, 4]) == -1\n    assert candidate([1, 1, 5]) == -1\n    assert candidate([1, 2, 1]) == -1\n    assert candidate([1, 2, 2]) == 5\n    assert candidate([1, 2, 3]) == -1\n    assert candidate([1, 2, 4]) == -1\n    assert candidate([1, 2, 5]) == -1\n    assert candidate([1, 3, 1]) == -1\n    assert candidate([1, 3, 2]) == -1\n    assert candidate([1, 3, 3]) == 7\n    assert candidate([1, 3, 4]) == -1\n    assert candidate([1, 3, 5]) == -1\n    assert candidate([1, 4, 1]) == -1\n    assert candidate([1, 4, 2]) == -1\n    assert candidate([1, 4, 3]) == -1\n    assert candidate([1, 4, 4]) == 9\n    assert candidate([1, 4, 5]) == -1\n    assert candidate([1, 5, 1]) == -1\n    assert candidate([1, 5, 2]) == -1\n    assert candidate([1, 5, 3]) == -1\n    assert candidate([1, 5, 4]) == -1\n    assert candidate([1, 5, 5]) == 11\n    assert candidate([2, 1, 1]) == -1\n    assert candidate([2, 1, 2]) == 5\n    assert candidate([2, 1, 3]) == -1\n    assert candidate([2, 1, 4]) == -1\n    assert candidate([2, 1, 5]) == -1\n    assert candidate([2, 2, 1]) == 5\n    assert candidate([2, 2, 2]) == 6\n    assert candidate([2, 2, 3]) == 7\n    assert candidate([2, 2, 4]) == -1\n    assert candidate([2, 2, 5]) == -1\n    assert candidate([2, 3, 1]) == -1\n    assert candidate([2, 3, 2]) == 7\n    assert candidate([2, 3, 3]) == 8\n    assert candidate([2, 3, 4]) == 9\n    assert candidate([2, 3, 5]) == -1\n    assert candidate([2, 4, 1]) == -1\n    assert candidate([2, 4, 2]) == -1\n    assert candidate([2, 4, 3]) == 9\n    assert candidate([2, 4, 4]) == 10\n    assert candidate([2, 4, 5]) == 11\n    assert candidate([2, 5, 1]) == -1\n    assert candidate([2, 5, 2]) == -1\n    assert candidate([2, 5, 3]) == -1\n    assert candidate([2, 5, 4]) == 11\n    assert candidate([2, 5, 5]) == 12\n    assert candidate([3, 1, 1]) == -1\n    assert candidate([3, 1, 2]) == -1\n    assert candidate([3, 1, 3]) == 7\n    assert candidate([3, 1, 4]) == -1\n    assert candidate([3, 1, 5]) == -1\n    assert candidate([3, 2, 1]) == -1\n    assert candidate([3, 2, 2]) == 7\n    assert candidate([3, 2, 3]) == 8\n    assert candidate([3, 2, 4]) == 9\n    assert candidate([3, 2, 5]) == -1\n    assert candidate([3, 3, 1]) == 7\n    assert candidate([3, 3, 2]) == 8\n    assert candidate([3, 3, 3]) == 9\n    assert candidate([3, 3, 4]) == 10\n    assert candidate([3, 3, 5]) == 11\n    assert candidate([3, 4, 1]) == -1\n    assert candidate([3, 4, 2]) == 9\n    assert candidate([3, 4, 3]) == 10\n    assert candidate([3, 4, 4]) == 11\n    assert candidate([3, 4, 5]) == 12\n    assert candidate([3, 5, 1]) == -1\n    assert candidate([3, 5, 2]) == -1\n    assert candidate([3, 5, 3]) == 11\n    assert candidate([3, 5, 4]) == 12\n    assert candidate([3, 5, 5]) == 13\n    assert candidate([4, 1, 1]) == -1\n    assert candidate([4, 1, 2]) == -1\n    assert candidate([4, 1, 3]) == -1\n    assert candidate([4, 1, 4]) == 9\n    assert candidate([4, 1, 5]) == -1\n    assert candidate([4, 2, 1]) == -1\n    assert candidate([4, 2, 2]) == -1\n    assert candidate([4, 2, 3]) == 9\n    assert candidate([4, 2, 4]) == 10\n    assert candidate([4, 2, 5]) == 11\n    assert candidate([4, 3, 1]) == -1\n    assert candidate([4, 3, 2]) == 9\n    assert candidate([4, 3, 3]) == 10\n    assert candidate([4, 3, 4]) == 11\n    assert candidate([4, 3, 5]) == 12\n    assert candidate([4, 4, 1]) == 9\n    assert candidate([4, 4, 2]) == 10\n    assert candidate([4, 4, 3]) == 11\n    assert candidate([4, 4, 4]) == 12\n    assert candidate([4, 4, 5]) == 13\n    assert candidate([4, 5, 1]) == -1\n    assert candidate([4, 5, 2]) == 11\n\ndef test_check():\n    check(largestPerimeter)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3263_minimumCost", "language": "py", "prompt": "from typing import List\n\ndef minimumCost(nums: List[int]) -> int:\n    \"\"\"You are given an array of integers nums of length n.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into 3 disjoint contiguous subarrays.\nReturn the minimum possible sum of the cost of these subarrays.\nExample 1:\nInput: nums = [1,2,3,12]\nOutput: 6\nExplanation: The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16.\nExample 2:\nInput: nums = [5,4,3]\nOutput: 12\nExplanation: The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\nIt can be shown that 12 is the minimum cost achievable.\nExample 3:\nInput: nums = [10,3,1,1]\nOutput: 12\nExplanation: The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\nIt can be shown that 12 is the minimum cost achievable.\nConstraints:\n3 <= n <= 50\n1 <= nums[i] <= 50\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3263_minimumCost.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 12]) == 6\n    assert candidate([5, 4, 3]) == 12\n    assert candidate([10, 3, 1, 1]) == 12\n    assert candidate([1, 1, 1]) == 3\n    assert candidate([1, 1, 2]) == 4\n    assert candidate([1, 1, 3]) == 5\n    assert candidate([1, 1, 4]) == 6\n    assert candidate([1, 1, 5]) == 7\n    assert candidate([1, 2, 1]) == 4\n    assert candidate([1, 2, 2]) == 5\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1, 2, 4]) == 7\n    assert candidate([1, 2, 5]) == 8\n    assert candidate([1, 3, 1]) == 5\n    assert candidate([1, 3, 2]) == 6\n    assert candidate([1, 3, 3]) == 7\n    assert candidate([1, 3, 4]) == 8\n    assert candidate([1, 3, 5]) == 9\n    assert candidate([1, 4, 1]) == 6\n    assert candidate([1, 4, 2]) == 7\n    assert candidate([1, 4, 3]) == 8\n    assert candidate([1, 4, 4]) == 9\n    assert candidate([1, 4, 5]) == 10\n    assert candidate([1, 5, 1]) == 7\n    assert candidate([1, 5, 2]) == 8\n    assert candidate([1, 5, 3]) == 9\n    assert candidate([1, 5, 4]) == 10\n    assert candidate([1, 5, 5]) == 11\n    assert candidate([2, 1, 1]) == 4\n    assert candidate([2, 1, 2]) == 5\n    assert candidate([2, 1, 3]) == 6\n    assert candidate([2, 1, 4]) == 7\n    assert candidate([2, 1, 5]) == 8\n    assert candidate([2, 2, 1]) == 5\n    assert candidate([2, 2, 2]) == 6\n    assert candidate([2, 2, 3]) == 7\n    assert candidate([2, 2, 4]) == 8\n    assert candidate([2, 2, 5]) == 9\n    assert candidate([2, 3, 1]) == 6\n    assert candidate([2, 3, 2]) == 7\n    assert candidate([2, 3, 3]) == 8\n    assert candidate([2, 3, 4]) == 9\n    assert candidate([2, 3, 5]) == 10\n    assert candidate([2, 4, 1]) == 7\n    assert candidate([2, 4, 2]) == 8\n    assert candidate([2, 4, 3]) == 9\n    assert candidate([2, 4, 4]) == 10\n    assert candidate([2, 4, 5]) == 11\n    assert candidate([2, 5, 1]) == 8\n    assert candidate([2, 5, 2]) == 9\n    assert candidate([2, 5, 3]) == 10\n    assert candidate([2, 5, 4]) == 11\n    assert candidate([2, 5, 5]) == 12\n    assert candidate([3, 1, 1]) == 5\n    assert candidate([3, 1, 2]) == 6\n    assert candidate([3, 1, 3]) == 7\n    assert candidate([3, 1, 4]) == 8\n    assert candidate([3, 1, 5]) == 9\n    assert candidate([3, 2, 1]) == 6\n    assert candidate([3, 2, 2]) == 7\n    assert candidate([3, 2, 3]) == 8\n    assert candidate([3, 2, 4]) == 9\n    assert candidate([3, 2, 5]) == 10\n    assert candidate([3, 3, 1]) == 7\n    assert candidate([3, 3, 2]) == 8\n    assert candidate([3, 3, 3]) == 9\n    assert candidate([3, 3, 4]) == 10\n    assert candidate([3, 3, 5]) == 11\n    assert candidate([3, 4, 1]) == 8\n    assert candidate([3, 4, 2]) == 9\n    assert candidate([3, 4, 3]) == 10\n    assert candidate([3, 4, 4]) == 11\n    assert candidate([3, 4, 5]) == 12\n    assert candidate([3, 5, 1]) == 9\n    assert candidate([3, 5, 2]) == 10\n    assert candidate([3, 5, 3]) == 11\n    assert candidate([3, 5, 4]) == 12\n    assert candidate([3, 5, 5]) == 13\n    assert candidate([4, 1, 1]) == 6\n    assert candidate([4, 1, 2]) == 7\n    assert candidate([4, 1, 3]) == 8\n    assert candidate([4, 1, 4]) == 9\n    assert candidate([4, 1, 5]) == 10\n    assert candidate([4, 2, 1]) == 7\n    assert candidate([4, 2, 2]) == 8\n    assert candidate([4, 2, 3]) == 9\n    assert candidate([4, 2, 4]) == 10\n    assert candidate([4, 2, 5]) == 11\n    assert candidate([4, 3, 1]) == 8\n    assert candidate([4, 3, 2]) == 9\n    assert candidate([4, 3, 3]) == 10\n    assert candidate([4, 3, 4]) == 11\n    assert candidate([4, 3, 5]) == 12\n    assert candidate([4, 4, 1]) == 9\n    assert candidate([4, 4, 2]) == 10\n    assert candidate([4, 4, 3]) == 11\n    assert candidate([4, 4, 4]) == 12\n    assert candidate([4, 4, 5]) == 13\n    assert candidate([4, 5, 1]) == 10\n    assert candidate([4, 5, 2]) == 11\n\ndef test_check():\n    check(minimumCost)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3267_maximumLength", "language": "py", "prompt": "def maximumLength(s: str) -> int:\n    \"\"\"You are given a string s that consists of lowercase English letters.\nA string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special.\nReturn the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nInput: s = \"aaaa\"\nOutput: 2\nExplanation: The longest special substring which occurs thrice is \"aa\": substrings \"aaaa\", \"aaaa\", and \"aaaa\".\nIt can be shown that the maximum length achievable is 2.\nExample 2:\nInput: s = \"abcdef\"\nOutput: -1\nExplanation: There exists no special substring which occurs at least thrice. Hence return -1.\nExample 3:\nInput: s = \"abcaba\"\nOutput: 1\nExplanation: The longest special substring which occurs thrice is \"a\": substrings \"abcaba\", \"abcaba\", and \"abcaba\".\nIt can be shown that the maximum length achievable is 1.\nConstraints:\n3 <= s.length <= 50\ns consists of only lowercase English letters.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3267_maximumLength.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(aaaa) == 2\n    assert candidate(abcdef) == -1\n    assert candidate(abcaba) == 1\n    assert candidate(abcccccdddd) == 3\n    assert candidate(aaa) == 1\n    assert candidate(acc) == -1\n    assert candidate(cab) == -1\n    assert candidate(cad) == -1\n    assert candidate(cbc) == -1\n    assert candidate(ccc) == 1\n    assert candidate(dca) == -1\n    assert candidate(ddd) == 1\n    assert candidate(fff) == 1\n    assert candidate(ggg) == 1\n    assert candidate(hhh) == 1\n    assert candidate(kkk) == 1\n    assert candidate(lll) == 1\n    assert candidate(ooo) == 1\n    assert candidate(ppp) == 1\n    assert candidate(qqq) == 1\n    assert candidate(rrr) == 1\n    assert candidate(xxx) == 1\n    assert candidate(yyy) == 1\n    assert candidate(aaau) == 1\n    assert candidate(affe) == -1\n    assert candidate(agae) == -1\n    assert candidate(aiii) == 1\n    assert candidate(bbbb) == 2\n    assert candidate(bbbz) == 1\n    assert candidate(bddd) == 1\n    assert candidate(beee) == 1\n    assert candidate(bnnn) == 1\n    assert candidate(bsss) == 1\n    assert candidate(bxxx) == 1\n    assert candidate(cafc) == -1\n    assert candidate(ccag) == -1\n    assert candidate(cfff) == 1\n    assert candidate(dddd) == 2\n    assert candidate(dsss) == 1\n    assert candidate(eccc) == 1\n    assert candidate(eeew) == 1\n    assert candidate(gfdc) == -1\n    assert candidate(giii) == 1\n    assert candidate(hhhn) == 1\n    assert candidate(hyyy) == 1\n    assert candidate(iiii) == 2\n    assert candidate(jiii) == 1\n    assert candidate(jjjj) == 2\n    assert candidate(kbbb) == 1\n    assert candidate(kddd) == 1\n    assert candidate(looo) == 1\n    assert candidate(nnnn) == 2\n    assert candidate(oaaa) == 1\n    assert candidate(osss) == 1\n    assert candidate(pppp) == 2\n    assert candidate(pppw) == 1\n    assert candidate(qqqc) == 1\n    assert candidate(qqqo) == 1\n    assert candidate(qqqq) == 2\n    assert candidate(reee) == 1\n    assert candidate(rzzz) == 1\n    assert candidate(thhh) == 1\n    assert candidate(tttt) == 2\n    assert candidate(unnn) == 1\n    assert candidate(uuuu) == 2\n    assert candidate(uyyy) == 1\n    assert candidate(vddd) == 1\n    assert candidate(vfff) == 1\n    assert candidate(vvvv) == 2\n    assert candidate(wbbb) == 1\n    assert candidate(wqqq) == 1\n    assert candidate(wwwg) == 1\n    assert candidate(xxxk) == 1\n    assert candidate(xxxx) == 2\n    assert candidate(zfff) == 1\n    assert candidate(ammmm) == 2\n    assert candidate(aqqqu) == 1\n    assert candidate(axxxx) == 2\n    assert candidate(bahhh) == 1\n    assert candidate(bbbbz) == 2\n    assert candidate(bbccc) == 1\n    assert candidate(biaei) == -1\n    assert candidate(bjjjj) == 2\n    assert candidate(cccll) == 1\n    assert candidate(ceaaa) == 1\n    assert candidate(cjlll) == 1\n    assert candidate(crqqq) == 1\n    assert candidate(cyyyy) == 2\n    assert candidate(ddddj) == 2\n    assert candidate(ddddt) == 2\n    assert candidate(dkkkk) == 2\n    assert candidate(eefff) == 1\n    assert candidate(efage) == -1\n    assert candidate(epppp) == 2\n    assert candidate(fafff) == 1\n    assert candidate(ffbbb) == 1\n    assert candidate(ffffr) == 2\n    assert candidate(gcgbf) == -1\n    assert candidate(gcooo) == 1\n    assert candidate(gfgec) == -1\n\ndef test_check():\n    check(maximumLength)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3270_minMovesToCaptureTheQueen", "language": "py", "prompt": "def minMovesToCaptureTheQueen(a: int, b: int, c: int, d: int, e: int, f: int) -> int:\n    \"\"\"There is a 1-indexed 8 x 8 chessboard containing 3 pieces.\nYou are given 6 integers a, b, c, d, e, and f where:\n(a, b) denotes the position of the white rook.\n(c, d) denotes the position of the white bishop.\n(e, f) denotes the position of the black queen.\nGiven that you can only move the white pieces, return the minimum number of moves required to capture the black queen.\nNote that:\nRooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.\nBishops can move any number of squares diagonally, but cannot jump over other pieces.\nA rook or a bishop can capture the queen if it is located in a square that they can move to.\nThe queen does not move.\nExample 1:\nInput: a = 1, b = 1, c = 8, d = 8, e = 2, f = 3\nOutput: 2\nExplanation: We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\nIt is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.\nExample 2:\nInput: a = 5, b = 3, c = 3, d = 4, e = 5, f = 2\nOutput: 1\nExplanation: We can capture the black queen in a single move by doing one of the following: \n- Move the white rook to (5, 2).\n- Move the white bishop to (5, 2).\nConstraints:\n1 <= a, b, c, d, e, f <= 8\nNo two pieces are on the same square.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3270_minMovesToCaptureTheQueen.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(1, 1, 8, 8, 2, 3) == 2\n    assert candidate(5, 3, 3, 4, 5, 2) == 1\n    assert candidate(4, 3, 3, 4, 5, 2) == 2\n    assert candidate(1, 1, 1, 4, 1, 8) == 2\n    assert candidate(4, 3, 3, 4, 2, 5) == 1\n    assert candidate(8, 4, 7, 5, 5, 5) == 2\n    assert candidate(1, 8, 4, 3, 2, 7) == 2\n    assert candidate(1, 6, 3, 3, 5, 6) == 1\n    assert candidate(5, 3, 6, 6, 6, 4) == 2\n    assert candidate(5, 1, 6, 6, 2, 7) == 2\n    assert candidate(8, 4, 8, 8, 7, 7) == 1\n    assert candidate(5, 1, 6, 5, 3, 7) == 2\n    assert candidate(5, 2, 8, 6, 7, 4) == 2\n    assert candidate(1, 1, 8, 2, 4, 1) == 1\n    assert candidate(3, 1, 1, 1, 2, 5) == 2\n    assert candidate(8, 5, 2, 4, 5, 7) == 1\n    assert candidate(8, 1, 5, 8, 1, 7) == 2\n    assert candidate(4, 6, 6, 2, 1, 4) == 2\n    assert candidate(7, 5, 7, 6, 2, 8) == 2\n    assert candidate(8, 6, 3, 2, 6, 8) == 2\n    assert candidate(3, 3, 8, 1, 2, 5) == 2\n    assert candidate(4, 5, 6, 1, 4, 7) == 1\n    assert candidate(7, 2, 2, 8, 7, 3) == 1\n    assert candidate(3, 8, 2, 7, 1, 4) == 2\n    assert candidate(3, 5, 5, 3, 1, 8) == 2\n    assert candidate(2, 2, 7, 4, 3, 1) == 2\n    assert candidate(4, 3, 1, 5, 5, 3) == 1\n    assert candidate(7, 5, 2, 5, 6, 3) == 2\n    assert candidate(1, 7, 8, 1, 3, 4) == 2\n    assert candidate(8, 6, 6, 4, 1, 2) == 2\n    assert candidate(7, 8, 4, 4, 3, 6) == 2\n    assert candidate(8, 4, 7, 7, 4, 4) == 1\n    assert candidate(5, 7, 4, 2, 3, 8) == 2\n    assert candidate(6, 1, 7, 8, 8, 7) == 1\n    assert candidate(3, 7, 7, 6, 7, 4) == 2\n    assert candidate(7, 3, 6, 4, 6, 7) == 2\n    assert candidate(5, 7, 1, 1, 5, 6) == 1\n    assert candidate(6, 8, 5, 8, 5, 3) == 2\n    assert candidate(4, 2, 3, 7, 6, 1) == 2\n    assert candidate(3, 2, 6, 1, 6, 2) == 1\n    assert candidate(5, 4, 6, 7, 1, 8) == 2\n    assert candidate(7, 6, 2, 3, 3, 4) == 1\n    assert candidate(7, 6, 2, 1, 2, 6) == 1\n    assert candidate(5, 8, 6, 5, 6, 1) == 2\n    assert candidate(6, 2, 6, 7, 5, 4) == 2\n    assert candidate(7, 5, 4, 4, 7, 4) == 1\n    assert candidate(6, 1, 4, 4, 2, 2) == 1\n    assert candidate(3, 4, 1, 8, 3, 7) == 1\n    assert candidate(7, 7, 1, 6, 3, 1) == 2\n    assert candidate(6, 8, 2, 2, 3, 5) == 2\n    assert candidate(5, 5, 3, 7, 5, 3) == 1\n    assert candidate(7, 3, 5, 3, 8, 5) == 2\n    assert candidate(7, 4, 1, 4, 7, 8) == 1\n    assert candidate(6, 3, 7, 3, 4, 4) == 2\n    assert candidate(1, 4, 6, 7, 4, 4) == 1\n    assert candidate(4, 5, 6, 8, 2, 1) == 2\n    assert candidate(5, 6, 5, 7, 8, 3) == 2\n    assert candidate(5, 1, 8, 2, 1, 3) == 2\n    assert candidate(1, 2, 8, 3, 2, 2) == 1\n    assert candidate(1, 7, 5, 5, 4, 3) == 2\n    assert candidate(4, 3, 7, 8, 1, 5) == 2\n    assert candidate(8, 7, 6, 8, 6, 1) == 2\n    assert candidate(4, 3, 4, 7, 7, 6) == 2\n    assert candidate(8, 4, 6, 6, 2, 1) == 2\n    assert candidate(8, 2, 6, 4, 1, 4) == 2\n    assert candidate(3, 5, 3, 2, 1, 4) == 1\n    assert candidate(3, 6, 1, 3, 3, 7) == 1\n    assert candidate(1, 1, 7, 6, 4, 3) == 1\n    assert candidate(1, 8, 7, 2, 6, 1) == 1\n    assert candidate(5, 8, 4, 5, 7, 4) == 2\n    assert candidate(8, 3, 8, 8, 5, 3) == 1\n    assert candidate(7, 2, 8, 1, 4, 3) == 2\n    assert candidate(3, 5, 8, 7, 6, 1) == 2\n    assert candidate(5, 5, 2, 2, 1, 1) == 1\n    assert candidate(1, 8, 8, 4, 4, 7) == 2\n    assert candidate(3, 6, 7, 6, 8, 8) == 2\n    assert candidate(5, 6, 3, 7, 3, 6) == 1\n    assert candidate(1, 5, 3, 4, 7, 4) == 2\n    assert candidate(5, 6, 2, 2, 5, 8) == 1\n    assert candidate(7, 3, 2, 6, 3, 4) == 2\n    assert candidate(5, 4, 6, 5, 5, 8) == 1\n    assert candidate(1, 1, 2, 4, 5, 4) == 2\n    assert candidate(4, 5, 5, 4, 2, 4) == 2\n    assert candidate(6, 5, 6, 2, 2, 2) == 2\n    assert candidate(1, 5, 4, 2, 8, 1) == 2\n    assert candidate(1, 1, 2, 5, 8, 1) == 1\n    assert candidate(4, 8, 3, 8, 8, 5) == 2\n    assert candidate(1, 8, 4, 7, 5, 6) == 1\n    assert candidate(5, 5, 3, 6, 8, 8) == 2\n    assert candidate(1, 2, 3, 1, 2, 4) == 2\n    assert candidate(1, 8, 6, 3, 2, 8) == 1\n    assert candidate(6, 1, 8, 8, 7, 3) == 2\n    assert candidate(7, 8, 6, 1, 4, 2) == 2\n    assert candidate(1, 6, 4, 2, 8, 5) == 2\n    assert candidate(1, 4, 2, 5, 5, 4) == 1\n    assert candidate(4, 4, 3, 2, 6, 7) == 2\n    assert candidate(8, 3, 6, 7, 4, 6) == 2\n    assert candidate(2, 5, 1, 1, 8, 4) == 2\n    assert candidate(7, 8, 1, 4, 5, 1) == 2\n    assert candidate(5, 5, 2, 1, 1, 1) == 2\n\ndef test_check():\n    check(minMovesToCaptureTheQueen)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3271_countOfPairs", "language": "py", "prompt": "from typing import List\n\ndef countOfPairs(n: int, x: int, y: int) -> List[int]:\n    \"\"\"You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.\nExample 1:\nInput: n = 3, x = 1, y = 3\nOutput: [6,0,0]\nExplanation: Let's look at each pair of houses:\n- For the pair (1, 2), we can go from house 1 to house 2 directly.\n- For the pair (2, 1), we can go from house 2 to house 1 directly.\n- For the pair (1, 3), we can go from house 1 to house 3 directly.\n- For the pair (3, 1), we can go from house 3 to house 1 directly.\n- For the pair (2, 3), we can go from house 2 to house 3 directly.\n- For the pair (3, 2), we can go from house 3 to house 2 directly.\nExample 2:\nInput: n = 5, x = 2, y = 4\nOutput: [10,8,2,0,0]\nExplanation: For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n- For k == 3, the pairs are (1, 5), and (5, 1).\n- For k == 4 and k == 5, there are no pairs.\nExample 3:\nInput: n = 4, x = 1, y = 1\nOutput: [6,4,2,0]\nExplanation: For each distance k the pairs are:\n- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n- For k == 3, the pairs are (1, 4), and (4, 1).\n- For k == 4, there are no pairs.\nConstraints:\n2 <= n <= 100\n1 <= x, y <= n\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3271_countOfPairs.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(3, 1, 3) == [6, 0, 0]\n    assert candidate(5, 2, 4) == [10, 8, 2, 0, 0]\n    assert candidate(4, 1, 1) == [6, 4, 2, 0]\n    assert candidate(2, 1, 1) == [2, 0]\n    assert candidate(2, 1, 2) == [2, 0]\n    assert candidate(2, 2, 1) == [2, 0]\n    assert candidate(2, 2, 2) == [2, 0]\n    assert candidate(3, 1, 1) == [4, 2, 0]\n    assert candidate(3, 1, 2) == [4, 2, 0]\n    assert candidate(3, 2, 1) == [4, 2, 0]\n    assert candidate(3, 2, 2) == [4, 2, 0]\n    assert candidate(3, 2, 3) == [4, 2, 0]\n    assert candidate(3, 3, 1) == [6, 0, 0]\n    assert candidate(3, 3, 2) == [4, 2, 0]\n    assert candidate(3, 3, 3) == [4, 2, 0]\n    assert candidate(4, 1, 2) == [6, 4, 2, 0]\n    assert candidate(4, 1, 3) == [8, 4, 0, 0]\n    assert candidate(4, 1, 4) == [8, 4, 0, 0]\n    assert candidate(4, 2, 1) == [6, 4, 2, 0]\n    assert candidate(4, 2, 2) == [6, 4, 2, 0]\n    assert candidate(4, 2, 3) == [6, 4, 2, 0]\n    assert candidate(4, 2, 4) == [8, 4, 0, 0]\n    assert candidate(4, 3, 1) == [8, 4, 0, 0]\n    assert candidate(4, 3, 2) == [6, 4, 2, 0]\n    assert candidate(4, 3, 3) == [6, 4, 2, 0]\n    assert candidate(4, 3, 4) == [6, 4, 2, 0]\n    assert candidate(4, 4, 1) == [8, 4, 0, 0]\n    assert candidate(4, 4, 2) == [8, 4, 0, 0]\n    assert candidate(4, 4, 3) == [6, 4, 2, 0]\n    assert candidate(4, 4, 4) == [6, 4, 2, 0]\n    assert candidate(5, 1, 1) == [8, 6, 4, 2, 0]\n    assert candidate(5, 1, 2) == [8, 6, 4, 2, 0]\n    assert candidate(5, 1, 3) == [10, 6, 4, 0, 0]\n    assert candidate(5, 1, 4) == [10, 8, 2, 0, 0]\n    assert candidate(5, 1, 5) == [10, 10, 0, 0, 0]\n    assert candidate(5, 2, 1) == [8, 6, 4, 2, 0]\n    assert candidate(5, 2, 2) == [8, 6, 4, 2, 0]\n    assert candidate(5, 2, 3) == [8, 6, 4, 2, 0]\n    assert candidate(5, 2, 5) == [10, 8, 2, 0, 0]\n    assert candidate(5, 3, 1) == [10, 6, 4, 0, 0]\n    assert candidate(5, 3, 2) == [8, 6, 4, 2, 0]\n    assert candidate(5, 3, 3) == [8, 6, 4, 2, 0]\n    assert candidate(5, 3, 4) == [8, 6, 4, 2, 0]\n    assert candidate(5, 3, 5) == [10, 6, 4, 0, 0]\n    assert candidate(5, 4, 1) == [10, 8, 2, 0, 0]\n    assert candidate(5, 4, 2) == [10, 8, 2, 0, 0]\n    assert candidate(5, 4, 3) == [8, 6, 4, 2, 0]\n    assert candidate(5, 4, 4) == [8, 6, 4, 2, 0]\n    assert candidate(5, 4, 5) == [8, 6, 4, 2, 0]\n    assert candidate(5, 5, 1) == [10, 10, 0, 0, 0]\n    assert candidate(5, 5, 2) == [10, 8, 2, 0, 0]\n    assert candidate(5, 5, 3) == [10, 6, 4, 0, 0]\n    assert candidate(5, 5, 4) == [8, 6, 4, 2, 0]\n    assert candidate(5, 5, 5) == [8, 6, 4, 2, 0]\n    assert candidate(6, 1, 1) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 1, 2) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 1, 3) == [12, 8, 6, 4, 0, 0]\n    assert candidate(6, 1, 4) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 1, 5) == [12, 14, 4, 0, 0, 0]\n    assert candidate(6, 1, 6) == [12, 12, 6, 0, 0, 0]\n    assert candidate(6, 2, 1) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 2, 2) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 2, 5) == [12, 12, 6, 0, 0, 0]\n    assert candidate(6, 2, 6) == [12, 14, 4, 0, 0, 0]\n    assert candidate(6, 3, 1) == [12, 8, 6, 4, 0, 0]\n    assert candidate(6, 3, 2) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 3, 3) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 3, 4) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 3, 5) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 3, 6) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 4, 1) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 4, 2) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 4, 3) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 4, 4) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 4, 6) == [12, 8, 6, 4, 0, 0]\n    assert candidate(6, 5, 1) == [12, 14, 4, 0, 0, 0]\n    assert candidate(6, 5, 2) == [12, 12, 6, 0, 0, 0]\n    assert candidate(6, 5, 3) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 5, 4) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 5, 5) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 5, 6) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 6, 1) == [12, 12, 6, 0, 0, 0]\n    assert candidate(6, 6, 2) == [12, 14, 4, 0, 0, 0]\n    assert candidate(6, 6, 3) == [12, 10, 6, 2, 0, 0]\n    assert candidate(6, 6, 4) == [12, 8, 6, 4, 0, 0]\n    assert candidate(6, 6, 5) == [10, 8, 6, 4, 2, 0]\n    assert candidate(6, 6, 6) == [10, 8, 6, 4, 2, 0]\n    assert candidate(7, 1, 2) == [12, 10, 8, 6, 4, 2, 0]\n    assert candidate(7, 1, 3) == [14, 10, 8, 6, 4, 0, 0]\n    assert candidate(7, 1, 4) == [14, 12, 8, 6, 2, 0, 0]\n    assert candidate(7, 1, 5) == [14, 16, 8, 4, 0, 0, 0]\n    assert candidate(7, 1, 6) == [14, 16, 10, 2, 0, 0, 0]\n    assert candidate(7, 1, 7) == [14, 14, 14, 0, 0, 0, 0]\n    assert candidate(7, 2, 1) == [12, 10, 8, 6, 4, 2, 0]\n    assert candidate(7, 2, 2) == [12, 10, 8, 6, 4, 2, 0]\n    assert candidate(7, 2, 3) == [12, 10, 8, 6, 4, 2, 0]\n    assert candidate(7, 2, 7) == [14, 16, 10, 2, 0, 0, 0]\n    assert candidate(7, 3, 1) == [14, 10, 8, 6, 4, 0, 0]\n    assert candidate(7, 3, 2) == [12, 10, 8, 6, 4, 2, 0]\n    assert candidate(7, 3, 3) == [12, 10, 8, 6, 4, 2, 0]\n\ndef test_check():\n    check(countOfPairs)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3275_minimumPushes", "language": "py", "prompt": "def minimumPushes(word: str) -> int:\n    \"\"\"You are given a string word containing distinct lowercase English letters.\nTelephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" .\nIt is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word.\nReturn the minimum number of pushes needed to type word after remapping the keys.\nAn example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.\nExample 1:\nInput: word = \"abcde\"\nOutput: 5\nExplanation: The remapped keypad given in the image provides the minimum cost.\n\"a\" -> one push on key 2\n\"b\" -> one push on key 3\n\"c\" -> one push on key 4\n\"d\" -> one push on key 5\n\"e\" -> one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\nExample 2:\nInput: word = \"xycdefghij\"\nOutput: 12\nExplanation: The remapped keypad given in the image provides the minimum cost.\n\"x\" -> one push on key 2\n\"y\" -> two pushes on key 2\n\"c\" -> one push on key 3\n\"d\" -> two pushes on key 3\n\"e\" -> one push on key 4\n\"f\" -> one push on key 5\n\"g\" -> one push on key 6\n\"h\" -> one push on key 7\n\"i\" -> one push on key 8\n\"j\" -> one push on key 9\nTotal cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12.\nIt can be shown that no other mapping can provide a lower cost.\nConstraints:\n1 <= word.length <= 26\nword consists of lowercase English letters.\nAll letters in word are distinct.\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3275_minimumPushes.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate(abcde) == 5\n    assert candidate(xycdefghij) == 12\n    assert candidate(b) == 1\n    assert candidate(d) == 1\n    assert candidate(e) == 1\n    assert candidate(f) == 1\n    assert candidate(g) == 1\n    assert candidate(h) == 1\n    assert candidate(i) == 1\n    assert candidate(k) == 1\n    assert candidate(n) == 1\n    assert candidate(o) == 1\n    assert candidate(q) == 1\n    assert candidate(u) == 1\n    assert candidate(v) == 1\n    assert candidate(w) == 1\n    assert candidate(x) == 1\n    assert candidate(bc) == 2\n    assert candidate(cu) == 2\n    assert candidate(dl) == 2\n    assert candidate(dn) == 2\n    assert candidate(ev) == 2\n    assert candidate(gn) == 2\n    assert candidate(gq) == 2\n    assert candidate(hu) == 2\n    assert candidate(jr) == 2\n    assert candidate(ln) == 2\n    assert candidate(lz) == 2\n    assert candidate(mv) == 2\n    assert candidate(mw) == 2\n    assert candidate(sw) == 2\n    assert candidate(wz) == 2\n    assert candidate(amw) == 3\n    assert candidate(bco) == 3\n    assert candidate(btx) == 3\n    assert candidate(cgp) == 3\n    assert candidate(cjq) == 3\n    assert candidate(clu) == 3\n    assert candidate(clx) == 3\n    assert candidate(crs) == 3\n    assert candidate(csz) == 3\n    assert candidate(dfp) == 3\n    assert candidate(htv) == 3\n    assert candidate(iwz) == 3\n    assert candidate(kux) == 3\n    assert candidate(nsv) == 3\n    assert candidate(svz) == 3\n    assert candidate(cfos) == 4\n    assert candidate(demr) == 4\n    assert candidate(dimo) == 4\n    assert candidate(dnpt) == 4\n    assert candidate(dorz) == 4\n    assert candidate(fgkn) == 4\n    assert candidate(fimn) == 4\n    assert candidate(hior) == 4\n    assert candidate(jkpy) == 4\n    assert candidate(jluv) == 4\n    assert candidate(knpv) == 4\n    assert candidate(kopu) == 4\n    assert candidate(lmpt) == 4\n    assert candidate(ltuw) == 4\n    assert candidate(qwxz) == 4\n    assert candidate(abhoz) == 5\n    assert candidate(aejwx) == 5\n    assert candidate(agjnr) == 5\n    assert candidate(aikmu) == 5\n    assert candidate(ajkmv) == 5\n    assert candidate(cflvx) == 5\n    assert candidate(dhstu) == 5\n    assert candidate(djmnx) == 5\n    assert candidate(dlovx) == 5\n    assert candidate(eglqy) == 5\n    assert candidate(ejntw) == 5\n    assert candidate(ekrsz) == 5\n    assert candidate(fopuz) == 5\n    assert candidate(jlnvz) == 5\n    assert candidate(jnstu) == 5\n    assert candidate(afikno) == 6\n    assert candidate(almsyz) == 6\n    assert candidate(bcehov) == 6\n    assert candidate(bdmprt) == 6\n    assert candidate(bfhmnu) == 6\n    assert candidate(bfhpty) == 6\n    assert candidate(bfjstu) == 6\n    assert candidate(cdfjmw) == 6\n    assert candidate(dfilps) == 6\n    assert candidate(dmswyz) == 6\n    assert candidate(dpqruw) == 6\n    assert candidate(fhmprz) == 6\n    assert candidate(gjqrvy) == 6\n    assert candidate(ijopsv) == 6\n    assert candidate(lmqrtz) == 6\n    assert candidate(bxnqpha) == 7\n    assert candidate(ekbfqat) == 7\n    assert candidate(esoizcx) == 7\n    assert candidate(fmteczo) == 7\n    assert candidate(lrywetm) == 7\n    assert candidate(lvbornx) == 7\n    assert candidate(pesmonc) == 7\n    assert candidate(pudymjw) == 7\n\ndef test_check():\n    check(minimumPushes)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
{"name": "LeetCodeContests_3291_canSortArray", "language": "py", "prompt": "from typing import List\n\ndef canSortArray(nums: List[int]) -> bool:\n    \"\"\"You are given a 0-indexed array of positive integers nums.\nIn one operation, you can swap any two adjacent elements if they have the same number of set bits. You are allowed to do this operation any number of times (including zero).\nReturn true if you can sort the array, else return false.\nExample 1:\nInput: nums = [8,4,2,30,15]\nOutput: true\nExplanation: Let's look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \"10\", \"100\", and \"1000\" respectively. The numbers 15 and 30 have four set bits each with binary representation \"1111\" and \"11110\".\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array.\nExample 2:\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: The array is already sorted, hence we return true.\nExample 3:\nInput: nums = [3,16,8,4,2]\nOutput: false\nExplanation: It can be shown that it is not possible to sort the input array using any number of operations.\nConstraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 28\"\"\"\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3291_canSortArray.py", "prompt_terminology": "verbatim", "tests": "def check(candidate):\n    assert candidate([8, 4, 2, 30, 15]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1]) == True\n    assert candidate([4]) == True\n    assert candidate([3, 16, 8, 4, 2]) == False\n    assert candidate([7]) == True\n    assert candidate([10]) == True\n    assert candidate([20, 16]) == False\n    assert candidate([18]) == True\n    assert candidate([21, 17]) == False\n    assert candidate([30]) == True\n    assert candidate([26, 10]) == False\n    assert candidate([1, 2]) == True\n    assert candidate([2, 28, 9]) == False\n    assert candidate([2, 17]) == True\n    assert candidate([18, 3, 8]) == False\n    assert candidate([31, 18, 23]) == False\n    assert candidate([75, 34, 30]) == False\n    assert candidate([107, 76, 52]) == False\n    assert candidate([125, 92, 159]) == False\n    assert candidate([136, 256, 10]) == False\n    assert candidate([160, 247, 127]) == False\n    assert candidate([187, 4, 32]) == False\n    assert candidate([197, 171, 144]) == False\n    assert candidate([214, 200, 176]) == False\n    assert candidate([222, 191, 39]) == False\n    assert candidate([24, 12]) == True\n    assert candidate([225, 163, 64]) == False\n    assert candidate([128, 128]) == True\n    assert candidate([229, 253, 127]) == False\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 256, 64]) == True\n    assert candidate([6, 6, 192]) == True\n    assert candidate([239, 83, 71]) == False\n    assert candidate([6, 96, 20]) == True\n    assert candidate([247, 153, 90]) == False\n    assert candidate([256, 255, 255]) == False\n    assert candidate([1, 201, 251, 191]) == False\n    assert candidate([4, 157, 191, 127]) == False\n    assert candidate([8, 8, 2]) == True\n    assert candidate([10, 34, 130]) == True\n    assert candidate([12, 19, 1, 11]) == False\n    assert candidate([10, 91, 127]) == True\n    assert candidate([15, 8, 21, 25]) == False\n    assert candidate([17, 25, 4, 27]) == False\n    assert candidate([10, 130, 206]) == True\n    assert candidate([14, 183, 251]) == True\n    assert candidate([29, 20, 17, 4]) == False\n    assert candidate([15, 147, 174]) == True\n    assert candidate([16, 245, 125]) == True\n    assert candidate([32, 12, 25, 19]) == False\n    assert candidate([22, 21, 26]) == True\n    assert candidate([23, 30, 32]) == True\n    assert candidate([24, 72, 160]) == True\n    assert candidate([33, 223, 239]) == True\n    assert candidate([35, 143, 127, 254]) == False\n    assert candidate([55, 147, 16, 8]) == False\n    assert candidate([34, 52, 104]) == True\n    assert candidate([100, 104, 96, 144]) == False\n    assert candidate([129, 70, 126, 253]) == False\n    assert candidate([129, 162, 158, 253]) == False\n    assert candidate([145, 127, 55, 43]) == False\n    assert candidate([36, 177, 244]) == True\n    assert candidate([159, 111, 124, 233]) == False\n    assert candidate([36, 213, 236]) == True\n    assert candidate([175, 231, 27, 92]) == False\n    assert candidate([205, 234, 127, 223]) == False\n    assert candidate([215, 10, 8, 256]) == False\n    assert candidate([223, 127, 172, 210]) == False\n    assert candidate([38, 221, 224]) == True\n    assert candidate([41, 14, 50]) == True\n    assert candidate([41, 79, 239]) == True\n    assert candidate([44, 124, 247]) == True\n    assert candidate([225, 201, 121, 103]) == False\n    assert candidate([232, 45, 175, 231]) == False\n    assert candidate([250, 131, 50, 46]) == False\n    assert candidate([254, 249, 173, 163]) == False\n    assert candidate([255, 255, 214, 229]) == False\n    assert candidate([256, 151, 141, 15]) == False\n    assert candidate([47, 205, 182]) == True\n    assert candidate([48, 64, 251]) == True\n    assert candidate([51, 253, 254]) == True\n    assert candidate([53, 172, 195]) == True\n    assert candidate([57, 127, 251]) == True\n    assert candidate([4, 98, 210, 79, 254]) == False\n    assert candidate([59, 31, 236]) == True\n    assert candidate([8, 5, 103, 247, 235]) == False\n    assert candidate([8, 74, 170, 254, 132]) == False\n    assert candidate([8, 148, 182, 62, 255]) == False\n    assert candidate([62, 153, 210]) == True\n    assert candidate([64, 93, 253]) == True\n    assert candidate([9, 28, 18, 26, 11]) == False\n    assert candidate([12, 208, 240, 216, 139]) == False\n    assert candidate([13, 21, 23, 13, 32]) == False\n    assert candidate([16, 24, 13, 46, 156]) == False\n    assert candidate([16, 192, 71, 31, 239]) == False\n    assert candidate([64, 195, 203]) == True\n    assert candidate([65, 254, 239]) == True\n    assert candidate([17, 11, 5, 20, 8]) == False\n    assert candidate([23, 12, 22, 29, 20]) == False\n\ndef test_check():\n    check(canSortArray)\n\ntest_check()\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}
