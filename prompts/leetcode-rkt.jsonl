{"name": "LeetCodeContests_2811_minimumSum", "language": "rkt", "prompt": "#lang racket\n;; You are given two integers,\u00a0n and k.\n;; An array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\n;; Return the minimum possible sum of a k-avoiding array of length n.\n;; Example 1:\n;; Input: n = 5, k = 4\n;; Output: 18\n;; Explanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\n;; It can be proven that there is no k-avoiding array with a sum less than 18.\n;; Example 2:\n;; Input: n = 2, k = 6\n;; Output: 3\n;; Explanation: We can construct the array [1,2], which has a sum of 3.\n;; It can be proven that there is no k-avoiding array with a sum less than 3.\n;; Constraints:\n;;  * 1 <= n, k <= 50\n(define (minimumSum n k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2811_minimumSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumSum))\n    (check-within (candidate 5 4) 18 0.001)\n    (check-within (candidate 2 6) 3 0.001)\n    (check-within (candidate 1 1) 1 0.001)\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate 1 3) 1 0.001)\n    (check-within (candidate 1 4) 1 0.001)\n    (check-within (candidate 1 5) 1 0.001)\n    (check-within (candidate 1 6) 1 0.001)\n    (check-within (candidate 1 7) 1 0.001)\n    (check-within (candidate 1 8) 1 0.001)\n    (check-within (candidate 1 9) 1 0.001)\n    (check-within (candidate 1 10) 1 0.001)\n    (check-within (candidate 1 11) 1 0.001)\n    (check-within (candidate 1 12) 1 0.001)\n    (check-within (candidate 1 13) 1 0.001)\n    (check-within (candidate 1 14) 1 0.001)\n    (check-within (candidate 1 15) 1 0.001)\n    (check-within (candidate 1 16) 1 0.001)\n    (check-within (candidate 1 17) 1 0.001)\n    (check-within (candidate 1 18) 1 0.001)\n    (check-within (candidate 1 19) 1 0.001)\n    (check-within (candidate 1 20) 1 0.001)\n    (check-within (candidate 1 21) 1 0.001)\n    (check-within (candidate 1 22) 1 0.001)\n    (check-within (candidate 1 23) 1 0.001)\n    (check-within (candidate 1 24) 1 0.001)\n    (check-within (candidate 1 25) 1 0.001)\n    (check-within (candidate 1 26) 1 0.001)\n    (check-within (candidate 1 27) 1 0.001)\n    (check-within (candidate 1 28) 1 0.001)\n    (check-within (candidate 1 29) 1 0.001)\n    (check-within (candidate 1 30) 1 0.001)\n    (check-within (candidate 1 31) 1 0.001)\n    (check-within (candidate 1 32) 1 0.001)\n    (check-within (candidate 1 33) 1 0.001)\n    (check-within (candidate 1 34) 1 0.001)\n    (check-within (candidate 1 35) 1 0.001)\n    (check-within (candidate 1 36) 1 0.001)\n    (check-within (candidate 1 37) 1 0.001)\n    (check-within (candidate 1 38) 1 0.001)\n    (check-within (candidate 1 39) 1 0.001)\n    (check-within (candidate 1 40) 1 0.001)\n    (check-within (candidate 1 41) 1 0.001)\n    (check-within (candidate 1 42) 1 0.001)\n    (check-within (candidate 1 43) 1 0.001)\n    (check-within (candidate 1 44) 1 0.001)\n    (check-within (candidate 1 45) 1 0.001)\n    (check-within (candidate 1 46) 1 0.001)\n    (check-within (candidate 1 47) 1 0.001)\n    (check-within (candidate 1 48) 1 0.001)\n    (check-within (candidate 1 49) 1 0.001)\n    (check-within (candidate 1 50) 1 0.001)\n    (check-within (candidate 2 1) 3 0.001)\n    (check-within (candidate 2 2) 3 0.001)\n    (check-within (candidate 2 3) 4 0.001)\n    (check-within (candidate 2 4) 3 0.001)\n    (check-within (candidate 2 5) 3 0.001)\n    (check-within (candidate 2 7) 3 0.001)\n    (check-within (candidate 2 8) 3 0.001)\n    (check-within (candidate 2 9) 3 0.001)\n    (check-within (candidate 2 10) 3 0.001)\n    (check-within (candidate 2 11) 3 0.001)\n    (check-within (candidate 2 12) 3 0.001)\n    (check-within (candidate 2 13) 3 0.001)\n    (check-within (candidate 2 14) 3 0.001)\n    (check-within (candidate 2 15) 3 0.001)\n    (check-within (candidate 2 16) 3 0.001)\n    (check-within (candidate 2 17) 3 0.001)\n    (check-within (candidate 2 18) 3 0.001)\n    (check-within (candidate 2 19) 3 0.001)\n    (check-within (candidate 2 20) 3 0.001)\n    (check-within (candidate 2 21) 3 0.001)\n    (check-within (candidate 2 22) 3 0.001)\n    (check-within (candidate 2 23) 3 0.001)\n    (check-within (candidate 2 24) 3 0.001)\n    (check-within (candidate 2 25) 3 0.001)\n    (check-within (candidate 2 26) 3 0.001)\n    (check-within (candidate 2 27) 3 0.001)\n    (check-within (candidate 2 28) 3 0.001)\n    (check-within (candidate 2 29) 3 0.001)\n    (check-within (candidate 2 30) 3 0.001)\n    (check-within (candidate 2 31) 3 0.001)\n    (check-within (candidate 2 32) 3 0.001)\n    (check-within (candidate 2 33) 3 0.001)\n    (check-within (candidate 2 34) 3 0.001)\n    (check-within (candidate 2 35) 3 0.001)\n    (check-within (candidate 2 36) 3 0.001)\n    (check-within (candidate 2 37) 3 0.001)\n    (check-within (candidate 2 38) 3 0.001)\n    (check-within (candidate 2 39) 3 0.001)\n    (check-within (candidate 2 40) 3 0.001)\n    (check-within (candidate 2 41) 3 0.001)\n    (check-within (candidate 2 42) 3 0.001)\n    (check-within (candidate 2 43) 3 0.001)\n    (check-within (candidate 2 44) 3 0.001)\n    (check-within (candidate 2 45) 3 0.001)\n    (check-within (candidate 2 46) 3 0.001)\n    (check-within (candidate 2 47) 3 0.001)\n    (check-within (candidate 2 48) 3 0.001)\n    (check-within (candidate 2 49) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2812_theMaximumAchievableX", "language": "rkt", "prompt": "#lang racket\n;; You are given two integers, num and t.\n;; An integer x is called achievable if it can become equal to num after applying the following operation no more than t times:\n;;  * Increase or decrease x by 1, and simultaneously increase or decrease num by 1.\n;; Return the maximum possible achievable number. It can be proven that there exists at least one achievable number.\n;; Example 1:\n;; Input: num = 4, t = 1\n;; Output: 6\n;; Explanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation:\n;; 1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\n;; It can be proven that there is no achievable number larger than 6.\n;; Example 2:\n;; Input: num = 3, t = 2\n;; Output: 7\n;; Explanation: The maximum achievable number is x = 7; after performing these operations, x will equal num:\n;; 1- Decrease x by 1, and increase num by 1. Now, x = 6 and num = 4.\n;; 2- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\n;; It can be proven that there is no achievable number larger than 7.\n;; Constraints:\n;;  * 1 <= num, t\u00a0<= 50\n(define (theMaximumAchievableX num t)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2812_theMaximumAchievableX.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate theMaximumAchievableX))\n    (check-within (candidate 4 1) 6 0.001)\n    (check-within (candidate 3 2) 7 0.001)\n    (check-within (candidate 1 1) 3 0.001)\n    (check-within (candidate 1 2) 5 0.001)\n    (check-within (candidate 1 3) 7 0.001)\n    (check-within (candidate 1 4) 9 0.001)\n    (check-within (candidate 1 5) 11 0.001)\n    (check-within (candidate 1 6) 13 0.001)\n    (check-within (candidate 1 7) 15 0.001)\n    (check-within (candidate 1 8) 17 0.001)\n    (check-within (candidate 1 9) 19 0.001)\n    (check-within (candidate 1 10) 21 0.001)\n    (check-within (candidate 1 11) 23 0.001)\n    (check-within (candidate 1 12) 25 0.001)\n    (check-within (candidate 1 13) 27 0.001)\n    (check-within (candidate 1 14) 29 0.001)\n    (check-within (candidate 1 15) 31 0.001)\n    (check-within (candidate 1 16) 33 0.001)\n    (check-within (candidate 1 17) 35 0.001)\n    (check-within (candidate 1 18) 37 0.001)\n    (check-within (candidate 1 19) 39 0.001)\n    (check-within (candidate 1 20) 41 0.001)\n    (check-within (candidate 1 21) 43 0.001)\n    (check-within (candidate 1 22) 45 0.001)\n    (check-within (candidate 1 23) 47 0.001)\n    (check-within (candidate 1 24) 49 0.001)\n    (check-within (candidate 1 25) 51 0.001)\n    (check-within (candidate 1 26) 53 0.001)\n    (check-within (candidate 1 27) 55 0.001)\n    (check-within (candidate 1 28) 57 0.001)\n    (check-within (candidate 1 29) 59 0.001)\n    (check-within (candidate 1 30) 61 0.001)\n    (check-within (candidate 1 31) 63 0.001)\n    (check-within (candidate 1 32) 65 0.001)\n    (check-within (candidate 1 33) 67 0.001)\n    (check-within (candidate 1 34) 69 0.001)\n    (check-within (candidate 1 35) 71 0.001)\n    (check-within (candidate 1 36) 73 0.001)\n    (check-within (candidate 1 37) 75 0.001)\n    (check-within (candidate 1 38) 77 0.001)\n    (check-within (candidate 1 39) 79 0.001)\n    (check-within (candidate 1 40) 81 0.001)\n    (check-within (candidate 1 41) 83 0.001)\n    (check-within (candidate 1 42) 85 0.001)\n    (check-within (candidate 1 43) 87 0.001)\n    (check-within (candidate 1 44) 89 0.001)\n    (check-within (candidate 1 45) 91 0.001)\n    (check-within (candidate 1 46) 93 0.001)\n    (check-within (candidate 1 47) 95 0.001)\n    (check-within (candidate 1 48) 97 0.001)\n    (check-within (candidate 1 49) 99 0.001)\n    (check-within (candidate 1 50) 101 0.001)\n    (check-within (candidate 2 1) 4 0.001)\n    (check-within (candidate 2 2) 6 0.001)\n    (check-within (candidate 2 3) 8 0.001)\n    (check-within (candidate 2 4) 10 0.001)\n    (check-within (candidate 2 5) 12 0.001)\n    (check-within (candidate 2 6) 14 0.001)\n    (check-within (candidate 2 7) 16 0.001)\n    (check-within (candidate 2 8) 18 0.001)\n    (check-within (candidate 2 9) 20 0.001)\n    (check-within (candidate 2 10) 22 0.001)\n    (check-within (candidate 2 11) 24 0.001)\n    (check-within (candidate 2 12) 26 0.001)\n    (check-within (candidate 2 13) 28 0.001)\n    (check-within (candidate 2 14) 30 0.001)\n    (check-within (candidate 2 15) 32 0.001)\n    (check-within (candidate 2 16) 34 0.001)\n    (check-within (candidate 2 17) 36 0.001)\n    (check-within (candidate 2 18) 38 0.001)\n    (check-within (candidate 2 19) 40 0.001)\n    (check-within (candidate 2 20) 42 0.001)\n    (check-within (candidate 2 21) 44 0.001)\n    (check-within (candidate 2 22) 46 0.001)\n    (check-within (candidate 2 23) 48 0.001)\n    (check-within (candidate 2 24) 50 0.001)\n    (check-within (candidate 2 25) 52 0.001)\n    (check-within (candidate 2 26) 54 0.001)\n    (check-within (candidate 2 27) 56 0.001)\n    (check-within (candidate 2 28) 58 0.001)\n    (check-within (candidate 2 29) 60 0.001)\n    (check-within (candidate 2 30) 62 0.001)\n    (check-within (candidate 2 31) 64 0.001)\n    (check-within (candidate 2 32) 66 0.001)\n    (check-within (candidate 2 33) 68 0.001)\n    (check-within (candidate 2 34) 70 0.001)\n    (check-within (candidate 2 35) 72 0.001)\n    (check-within (candidate 2 36) 74 0.001)\n    (check-within (candidate 2 37) 76 0.001)\n    (check-within (candidate 2 38) 78 0.001)\n    (check-within (candidate 2 39) 80 0.001)\n    (check-within (candidate 2 40) 82 0.001)\n    (check-within (candidate 2 41) 84 0.001)\n    (check-within (candidate 2 42) 86 0.001)\n    (check-within (candidate 2 43) 88 0.001)\n    (check-within (candidate 2 44) 90 0.001)\n    (check-within (candidate 2 45) 92 0.001)\n    (check-within (candidate 2 46) 94 0.001)\n    (check-within (candidate 2 47) 96 0.001)\n    (check-within (candidate 2 48) 98 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2832_longestEqualSubarray", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and an integer k.\n;; A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.\n;; Return the length of the longest possible equal subarray after deleting at most k elements from nums.\n;; A subarray is a contiguous, possibly empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [1,3,2,3,1,3], k = 3\n;; Output: 3\n;; Explanation: It's optimal to delete the elements at index 2 and index 4.\n;; After deleting them, nums becomes equal to [1, 3, 3, 3].\n;; The longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\n;; It can be proven that no longer equal subarrays can be created.\n;; Example 2:\n;; Input: nums = [1,1,2,2,1,1], k = 2\n;; Output: 4\n;; Explanation: It's optimal to delete the elements at index 2 and index 3.\n;; After deleting them, nums becomes equal to [1, 1, 1, 1].\n;; The array itself is an equal subarray, so the answer is 4.\n;; It can be proven that no longer equal subarrays can be created.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= nums.length\n;;  * 0 <= k <= nums.length\n(define (longestEqualSubarray nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2832_longestEqualSubarray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longestEqualSubarray))\n    (check-within (candidate (list 1 3 2 3 1 3) 3) 3 0.001)\n    (check-within (candidate (list 1 1 2 2 1 1) 2) 4 0.001)\n    (check-within (candidate (list 1) 0) 1 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n    (check-within (candidate (list 2 1) 1) 1 0.001)\n    (check-within (candidate (list 2 2) 1) 2 0.001)\n    (check-within (candidate (list 1 1) 0) 2 0.001)\n    (check-within (candidate (list 2 1) 0) 1 0.001)\n    (check-within (candidate (list 1 2) 1) 1 0.001)\n    (check-within (candidate (list 2 2) 2) 2 0.001)\n    (check-within (candidate (list 2 3 2) 1) 2 0.001)\n    (check-within (candidate (list 3 2 2) 1) 2 0.001)\n    (check-within (candidate (list 3 1 1) 2) 2 0.001)\n    (check-within (candidate (list 1 2 3) 2) 1 0.001)\n    (check-within (candidate (list 1 2 3) 3) 1 0.001)\n    (check-within (candidate (list 2 3 1) 2) 1 0.001)\n    (check-within (candidate (list 2 2 1) 1) 2 0.001)\n    (check-within (candidate (list 1 3 2) 3) 1 0.001)\n    (check-within (candidate (list 2 3 3) 3) 2 0.001)\n    (check-within (candidate (list 3 2 3) 3) 2 0.001)\n    (check-within (candidate (list 2 2 3) 0) 2 0.001)\n    (check-within (candidate (list 2 2 2) 1) 3 0.001)\n    (check-within (candidate (list 1 2 1) 0) 1 0.001)\n    (check-within (candidate (list 3 3 3) 2) 3 0.001)\n    (check-within (candidate (list 1 2 2) 1) 2 0.001)\n    (check-within (candidate (list 1 1 3) 1) 2 0.001)\n    (check-within (candidate (list 1 2 3) 1) 1 0.001)\n    (check-within (candidate (list 1 2 2) 3) 2 0.001)\n    (check-within (candidate (list 3 2 4 2) 1) 2 0.001)\n    (check-within (candidate (list 3 4 2 1) 0) 1 0.001)\n    (check-within (candidate (list 1 3 4 2) 0) 1 0.001)\n    (check-within (candidate (list 2 4 2 2) 3) 3 0.001)\n    (check-within (candidate (list 4 2 2 3) 1) 2 0.001)\n    (check-within (candidate (list 4 1 3 2) 4) 1 0.001)\n    (check-within (candidate (list 1 1 2 1) 4) 3 0.001)\n    (check-within (candidate (list 2 4 1 3) 3) 1 0.001)\n    (check-within (candidate (list 1 1 1 2) 3) 3 0.001)\n    (check-within (candidate (list 4 2 1 4) 4) 2 0.001)\n    (check-within (candidate (list 1 1 4 1) 4) 3 0.001)\n    (check-within (candidate (list 2 1 4 1) 4) 2 0.001)\n    (check-within (candidate (list 2 4 3 3) 2) 2 0.001)\n    (check-within (candidate (list 1 2 2 4) 3) 2 0.001)\n    (check-within (candidate (list 2 2 2 4) 3) 3 0.001)\n    (check-within (candidate (list 2 3 3 1) 3) 2 0.001)\n    (check-within (candidate (list 2 4 1 4) 1) 2 0.001)\n    (check-within (candidate (list 3 4 1 4) 2) 2 0.001)\n    (check-within (candidate (list 3 2 3 1) 3) 2 0.001)\n    (check-within (candidate (list 3 1 1 3) 3) 2 0.001)\n    (check-within (candidate (list 2 3 2 5 1) 0) 1 0.001)\n    (check-within (candidate (list 5 3 3 1 3) 3) 3 0.001)\n    (check-within (candidate (list 4 4 2 2 4) 1) 2 0.001)\n    (check-within (candidate (list 5 4 2 3 3) 5) 2 0.001)\n    (check-within (candidate (list 4 4 4 3 4) 1) 4 0.001)\n    (check-within (candidate (list 1 5 5 5 3) 2) 3 0.001)\n    (check-within (candidate (list 2 1 4 5 2) 1) 1 0.001)\n    (check-within (candidate (list 5 1 5 2 3) 3) 2 0.001)\n    (check-within (candidate (list 5 3 2 3 4) 1) 2 0.001)\n    (check-within (candidate (list 3 2 1 4 1) 0) 1 0.001)\n    (check-within (candidate (list 3 2 2 5 3) 5) 2 0.001)\n    (check-within (candidate (list 2 2 4 4 2) 1) 2 0.001)\n    (check-within (candidate (list 4 3 3 4 3) 2) 3 0.001)\n    (check-within (candidate (list 1 5 4 3 4) 0) 1 0.001)\n    (check-within (candidate (list 4 4 2 5 3) 0) 2 0.001)\n    (check-within (candidate (list 3 3 5 2 3) 4) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 3) 5) 4 0.001)\n    (check-within (candidate (list 1 3 2 5 1) 1) 1 0.001)\n    (check-within (candidate (list 3 3 1 4 5) 2) 2 0.001)\n    (check-within (candidate (list 1 2 5 5 4) 3) 2 0.001)\n    (check-within (candidate (list 3 1 5 3 1 1) 0) 2 0.001)\n    (check-within (candidate (list 6 4 1 5 5 3) 0) 2 0.001)\n    (check-within (candidate (list 2 2 2 1 2 4) 4) 4 0.001)\n    (check-within (candidate (list 1 1 2 2 6 2) 1) 3 0.001)\n    (check-within (candidate (list 1 2 3 6 6 2) 4) 2 0.001)\n    (check-within (candidate (list 2 4 5 1 4 1) 2) 2 0.001)\n    (check-within (candidate (list 1 5 6 4 6 3) 3) 2 0.001)\n    (check-within (candidate (list 5 4 2 4 1 3) 2) 2 0.001)\n    (check-within (candidate (list 2 1 1 3 1 3) 2) 3 0.001)\n    (check-within (candidate (list 2 4 6 6 6 4) 3) 3 0.001)\n    (check-within (candidate (list 3 6 2 5 4 5) 1) 2 0.001)\n    (check-within (candidate (list 1 1 5 6 1 4) 4) 3 0.001)\n    (check-within (candidate (list 4 6 6 6 2 4) 3) 3 0.001)\n    (check-within (candidate (list 2 5 5 5 6 4) 1) 3 0.001)\n    (check-within (candidate (list 2 3 3 2 3 3) 2) 4 0.001)\n    (check-within (candidate (list 5 2 5 3 3 2) 6) 2 0.001)\n    (check-within (candidate (list 3 5 3 2 3 6) 6) 3 0.001)\n    (check-within (candidate (list 4 3 2 5 4 2) 4) 2 0.001)\n    (check-within (candidate (list 1 2 4 2 1 3) 3) 2 0.001)\n    (check-within (candidate (list 3 1 3 4 1 6) 6) 2 0.001)\n    (check-within (candidate (list 2 3 7 7 3 2 2) 7) 3 0.001)\n    (check-within (candidate (list 5 6 7 7 4 4 2) 5) 2 0.001)\n    (check-within (candidate (list 7 2 4 1 3 3 4) 4) 2 0.001)\n    (check-within (candidate (list 5 3 1 7 5 5 7) 6) 3 0.001)\n    (check-within (candidate (list 4 2 6 2 3 4 6) 6) 2 0.001)\n    (check-within (candidate (list 2 7 6 7 3 7 4) 5) 3 0.001)\n    (check-within (candidate (list 3 2 5 1 4 3 4) 4) 2 0.001)\n    (check-within (candidate (list 2 3 3 7 2 5 1) 2) 2 0.001)\n    (check-within (candidate (list 4 1 6 7 5 3 5) 1) 2 0.001)\n    (check-within (candidate (list 3 1 4 1 5 5 6) 6) 2 0.001)\n    (check-within (candidate (list 1 5 5 7 7 7 4) 0) 3 0.001)\n    (check-within (candidate (list 5 7 4 4 1 6 7) 5) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2834_relocateMarbles", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\n;; Throughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i].\n;; After completing all the steps, return the sorted list of occupied positions.\n;; Notes:\n;;  * We call a position occupied if there is at least one marble in that position.\n;;  * There may be multiple marbles in a single position.\n;; Example 1:\n;; Input: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\n;; Output: [5,6,8,9]\n;; Explanation: Initially, the marbles are at positions 1,6,7,8.\n;; At the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\n;; At the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\n;; At the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\n;; At the end, the final positions containing at least one marbles are [5,6,8,9].\n;; Example 2:\n;; Input: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\n;; Output: [2]\n;; Explanation: Initially, the marbles are at positions [1,1,3,3].\n;; At the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\n;; At the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\n;; Since 2 is the only occupied position, we return [2].\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= moveFrom.length <= 105\n;;  * moveFrom.length == moveTo.length\n;;  * 1 <= nums[i], moveFrom[i], moveTo[i] <= 109\n;;  * The test cases are generated such that there is at least a marble in\u00a0moveFrom[i]\u00a0at the moment we want to apply\u00a0the ith\u00a0move.\n(define (relocateMarbles nums moveFrom moveTo)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2834_relocateMarbles.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate relocateMarbles))\n    (check-within (candidate (list 1 6 7 8) (list 1 7 2) (list 2 9 5)) (list 5 6 8 9) 0.001)\n    (check-within (candidate (list 1 1 3 3) (list 1 3) (list 2 2)) (list 2) 0.001)\n    (check-within (candidate (list 5 7 8 15) (list 5 7 8 9) (list 9 15 2 7)) (list 2 7 15) 0.001)\n    (check-within (candidate (list 4 6 6 9 18) (list 18 6 17 4 9 19 2) (list 23 17 20 19 11 2 20)) (list 11 20 23) 0.001)\n    (check-within (candidate (list 3 4) (list 4 3 1 2 2 3 2 4 1) (list 3 1 2 2 3 2 4 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 5 13 22 23 23 33) (list 13 5 12) (list 1 12 13)) (list 1 13 22 23 33) 0.001)\n    (check-within (candidate (list 21 24 35 72 77 82 82 96 97 97) (list 82 76 3 97) (list 76 3 52 27)) (list 21 24 27 35 52 72 77 96) 0.001)\n    (check-within (candidate (list 4 6 17 41 46 46 52 57) (list 4) (list 62)) (list 6 17 41 46 52 57 62) 0.001)\n    (check-within (candidate (list 1 4 10 24 46 55 61 63 71) (list 10 52 1 80 63 55 4 46 71 24) (list 52 42 80 55 50 62 60 17 46 38)) (list 17 38 42 46 50 60 61 62) 0.001)\n    (check-within (candidate (list 8 9 16 17 23) (list 8 5 16 2 9) (list 5 20 2 18 22)) (list 17 18 20 22 23) 0.001)\n    (check-within (candidate (list 12 37 46 47 49 55 59 65 71 88) (list 88 59 71) (list 81 39 73)) (list 12 37 39 46 47 49 55 65 73 81) 0.001)\n    (check-within (candidate (list 2 45 45 48 51 57 67 73 78 78) (list 78 67 45 34 51 62 48 95 2 67) (list 34 65 62 95 62 12 85 67 79 71)) (list 12 57 65 71 73 79 85) 0.001)\n    (check-within (candidate (list 1 2) (list 1 2 3) (list 2 3 2)) (list 2) 0.001)\n    (check-within (candidate (list 7 19 28 34 36 36 47) (list 36 33 34 28 41 19 14 47 28 40) (list 33 41 27 47 14 40 46 28 42 16)) (list 7 16 27 42 46) 0.001)\n    (check-within (candidate (list 1 1 1) (list 1) (list 7)) (list 7) 0.001)\n    (check-within (candidate (list 1) (list 1 1 1 1 1 1) (list 1 1 1 1 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 5 9 17 20 29 29) (list 20 5 1 29 22 21 9 36 33 1) (list 1 22 21 36 36 15 33 1 3 15)) (list 3 15 17) 0.001)\n    (check-within (candidate (list 1) (list 1 1 1 1) (list 1 1 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 27 41 50 52 57 60 65 67 70) (list 52 67 70 50 57 27 47) (list 45 45 61 47 21 65 60)) (list 21 41 45 60 61 65) 0.001)\n    (check-within (candidate (list 2 3 7) (list 2 7 8 8 3 5 1 4) (list 8 5 8 1 4 4 4 5)) (list 5) 0.001)\n    (check-within (candidate (list 4 6 8 10) (list 8 6) (list 4 3)) (list 3 4 10) 0.001)\n    (check-within (candidate (list 2 4 29 34 41 44 48) (list 29 3 44 48 2 43 4) (list 3 24 43 42 24 8 6)) (list 6 8 24 34 41 42) 0.001)\n    (check-within (candidate (list 12 16 22 28 36 42 60 63) (list 42 28 12 22) (list 22 63 14 45)) (list 14 16 36 45 60 63) 0.001)\n    (check-within (candidate (list 12 18 21 21 31 38 39 41 84 90) (list 41 31 12 84 9 39 21 62) (list 24 17 58 9 62 36 23 90)) (list 17 18 23 24 36 38 58 90) 0.001)\n    (check-within (candidate (list 12 23 30 35 46 53 64 74 81) (list 53 74 54 48 52 64 35 30 46 29) (list 54 48 52 47 53 29 52 10 44 28)) (list 10 12 23 28 44 47 52 53 81) 0.001)\n    (check-within (candidate (list 2 10 13 14 16 30) (list 2 6 14 16 25 13 30) (list 6 30 25 1 32 17 11)) (list 1 10 11 17 32) 0.001)\n    (check-within (candidate (list 1 6 10 11 18 22 30) (list 10 18 1 30 6) (list 1 37 28 38 15)) (list 11 15 22 28 37 38) 0.001)\n    (check-within (candidate (list 3 9 10 13) (list 9 3 13 10 5 11 8) (list 11 5 11 15 8 5 14)) (list 5 14 15) 0.001)\n    (check-within (candidate (list 15 31 32 52 61 65 78 84 93 100) (list 15 32 93 3 78 65 61 84) (list 61 3 8 55 23 87 95 44)) (list 8 23 31 44 52 55 87 95 100) 0.001)\n    (check-within (candidate (list 1 2) (list 1 2 1 1 1 3 4 4) (list 1 1 1 1 3 4 4 2)) (list 2) 0.001)\n    (check-within (candidate (list 2 2 2) (list 2 8 5 9) (list 8 5 9 2)) (list 2) 0.001)\n    (check-within (candidate (list 3 10 11 27 58 59 61 66 68) (list 59 61 3 15) (list 15 68 77 52)) (list 10 11 27 52 58 66 68 77) 0.001)\n    (check-within (candidate (list 2 9 9) (list 9 2 8 9 4 6 7 1 5 5) (list 4 8 9 4 6 7 1 5 5 5)) (list 5) 0.001)\n    (check-within (candidate (list 1 18 24 25 29 31) (list 18 25 29 18 23) (list 3 23 18 18 8)) (list 1 3 8 18 24 31) 0.001)\n    (check-within (candidate (list 2 18 38 38 48 50 51 61 71) (list 61 71 2 18 47 22 24 51) (list 58 38 22 47 68 24 47 60)) (list 38 47 48 50 58 60 68) 0.001)\n    (check-within (candidate (list 11 11 35 35 38 43 45) (list 35 11 2 27 38 45 47 17) (list 2 47 27 17 47 24 35 21)) (list 21 24 35 43) 0.001)\n    (check-within (candidate (list 4 11 15 28 36 42 45 57) (list 57 32 36 11 52 42 55 4) (list 32 55 39 52 11 54 31 56)) (list 11 15 28 31 39 45 54 56) 0.001)\n    (check-within (candidate (list 2 4) (list 4 2) (list 4 1)) (list 1 4) 0.001)\n    (check-within (candidate (list 9 14 24 31 32 40 47 54 75 76) (list 31 75 76 3 47 32 24 9 14 18) (list 76 76 3 8 18 66 32 2 62 82)) (list 2 8 32 40 54 62 66 82) 0.001)\n    (check-within (candidate (list 1) (list 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 2 12 13 14 18) (list 13 2 14) (list 17 20 19)) (list 12 17 18 19 20) 0.001)\n    (check-within (candidate (list 12 21 24 28 41 60 62 70 76) (list 21 76 41 3) (list 23 33 3 53)) (list 12 23 24 28 33 53 60 62 70) 0.001)\n    (check-within (candidate (list 7 29 40 43 48 56 60 72 81) (list 56 60 6 62) (list 62 6 34 17)) (list 7 17 29 34 40 43 48 72 81) 0.001)\n    (check-within (candidate (list 2 4 5 8) (list 2 4 3 7 5 8 14) (list 3 7 9 14 9 6 16)) (list 6 9 16) 0.001)\n    (check-within (candidate (list 9 15 18 24 39 48 59 64) (list 59 64 63 60 9) (list 60 63 61 45 57)) (list 15 18 24 39 45 48 57 61) 0.001)\n    (check-within (candidate (list 2 8 8 9 11 21) (list 8 11 30 21 14 27 9 22 2 7) (list 30 27 22 14 7 3 1 21 4 16)) (list 1 3 4 16 21) 0.001)\n    (check-within (candidate (list 5 11 30 43 47 63 65 82 86 93) (list 43 63 11 93 82 47 54 5 30) (list 36 53 54 49 18 3 29 66 22)) (list 3 18 22 29 36 49 53 65 66 86) 0.001)\n    (check-within (candidate (list 9 14 14 16 26 51 53 64 76) (list 64 45 9 14 26 53 51 67 80) (list 45 67 23 37 80 16 27 51 44)) (list 16 23 27 37 44 51 76) 0.001)\n    (check-within (candidate (list 16 21 21 25 39 41 44) (list 41 21 45 29 35 39 29 25 28) (list 21 45 29 35 33 29 20 28 45)) (list 16 20 33 44 45) 0.001)\n    (check-within (candidate (list 1 1 3) (list 3 1 9 5 5) (list 9 9 5 5 9)) (list 9) 0.001)\n    (check-within (candidate (list 12 14 16 16 21 32) (list 32 5 14 21 15 22 16) (list 5 22 15 16 15 27 22)) (list 12 15 22 27) 0.001)\n    (check-within (candidate (list 1 5 9) (list 1 5 9 3 8 5 9 1 5) (list 8 3 9 1 5 8 1 5 2)) (list 2 8) 0.001)\n    (check-within (candidate (list 1 2 14 30 43 44 76 76 77) (list 76 77 43 1) (list 56 44 11 45)) (list 2 11 14 30 44 45 56) 0.001)\n    (check-within (candidate (list 4 25 27 33 33 35) (list 25 27 27 34 7 36) (list 34 27 36 7 25 1)) (list 1 4 25 33 35) 0.001)\n    (check-within (candidate (list 3 7 18 25 37 48 48 62) (list 48 18 62 48 2 18 56 53 37) (list 15 48 56 2 18 55 53 40 22)) (list 3 7 15 22 25 40 55) 0.001)\n    (check-within (candidate (list 19 35 46 55 59 59 68 72 93 100) (list 46 100 35 19 68 87 21 93 27) (list 76 94 87 66 57 21 27 89 40)) (list 40 55 57 59 66 72 76 89 94) 0.001)\n    (check-within (candidate (list 1 3) (list 3 1 3 4 4) (list 1 3 4 4 4)) (list 4) 0.001)\n    (check-within (candidate (list 22 30 36 40 44 48 50 59) (list 30 44 64 59 4) (list 64 4 50 25 36)) (list 22 25 36 40 48 50) 0.001)\n    (check-within (candidate (list 1) (list 1 1 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 8 18 23 37 37 39 48) (list 8 39 23 7 37 36) (list 39 7 36 25 10 28)) (list 10 18 25 28 48) 0.001)\n    (check-within (candidate (list 1 4) (list 1 2 4) (list 2 3 1)) (list 1 3) 0.001)\n    (check-within (candidate (list 3 7 9 13) (list 3 16 9 7 6 15 16 7 13 7) (list 16 6 2 15 8 16 7 1 7 9)) (list 1 2 8 9) 0.001)\n    (check-within (candidate (list 11 12 17 18 20) (list 11 17) (list 18 13)) (list 12 13 18 20) 0.001)\n    (check-within (candidate (list 5 11 17 21 25) (list 17) (list 14)) (list 5 11 14 21 25) 0.001)\n    (check-within (candidate (list 7 9 12 20 23) (list 7 8) (list 8 12)) (list 9 12 20 23) 0.001)\n    (check-within (candidate (list 1) (list 1 1) (list 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 10 13 17 49 56 57 59 62 68) (list 49 62 59 45) (list 58 64 45 77)) (list 10 13 17 56 57 58 64 68 77) 0.001)\n    (check-within (candidate (list 1 8 15 23 24 29 47) (list 8 23 24 47 10 1) (list 38 10 10 48 22 24)) (list 15 22 24 29 38 48) 0.001)\n    (check-within (candidate (list 3 3) (list 3 1 4 2 2 2 2 2 1) (list 1 4 2 2 2 2 2 1 3)) (list 3) 0.001)\n    (check-within (candidate (list 4 8 8) (list 8 7 7) (list 7 7 8)) (list 4 8) 0.001)\n    (check-within (candidate (list 1 2) (list 1 2 1 3 4 2 3 4 1 4) (list 3 1 3 4 2 3 4 1 4 4)) (list 4) 0.001)\n    (check-within (candidate (list 12 13 16 31 48 52 56 72 79) (list 13 79 12 72 14 48 56 52) (list 56 14 8 63 70 54 19 73)) (list 8 16 19 31 54 63 70 73) 0.001)\n    (check-within (candidate (list 3 7 7 14) (list 3 16 7 15 12 5 14 16 13) (list 16 15 5 12 16 14 9 13 5)) (list 5 9) 0.001)\n    (check-within (candidate (list 9 13 14 15) (list 15 14 13 5 8) (list 8 3 5 3 12)) (list 3 9 12) 0.001)\n    (check-within (candidate (list 11 16 28 33 37 45 45 58 79) (list 16 57 81 79 11) (list 57 81 29 45 31)) (list 28 29 31 33 37 45 58) 0.001)\n    (check-within (candidate (list 1 6 7 7) (list 6 8 8 12 15 8 9 15) (list 8 8 12 15 8 9 15 8)) (list 1 7 8) 0.001)\n    (check-within (candidate (list 7 20 23 25 33 39 51 74 76) (list 76 20 74 7 15) (list 74 64 15 40 71)) (list 23 25 33 39 40 51 64 71) 0.001)\n    (check-within (candidate (list 4 6 6) (list 6 4 7 6 4 7 8 1 2 4) (list 6 7 4 7 8 2 1 9 4 2)) (list 2 9) 0.001)\n    (check-within (candidate (list 8 14 17 19 21) (list 19 8 14 21 17 1 14 18) (list 14 18 14 1 18 23 10 12)) (list 10 12 23) 0.001)\n    (check-within (candidate (list 13 18 39 44 45 49 72 81 95 100) (list 49 81 18 39 44 22 100 66 45 5) (list 54 22 66 32 13 4 76 5 92 33)) (list 4 13 32 33 54 72 76 92 95) 0.001)\n    (check-within (candidate (list 1 3) (list 3 1 3 4 3 3 3 3 2) (list 1 3 4 3 3 3 3 2 3)) (list 3) 0.001)\n    (check-within (candidate (list 2 4 5 13) (list 13 5 2) (list 1 9 10)) (list 1 4 9 10) 0.001)\n    (check-within (candidate (list 1) (list 1) (list 1)) (list 1) 0.001)\n    (check-within (candidate (list 3 4 13 14 19) (list 13 3 19 3 3 14 13 4 15 11) (list 15 3 8 3 13 1 10 22 11 2)) (list 1 2 8 10 22) 0.001)\n    (check-within (candidate (list 3 6 9 11) (list 9 3 8) (list 7 8 9)) (list 6 7 9 11) 0.001)\n    (check-within (candidate (list 9 15 16 18 20 26) (list 20 18 13) (list 31 13 32)) (list 9 15 16 26 31 32) 0.001)\n    (check-within (candidate (list 6 11 21 25 25) (list 11 21 2 25 17 1) (list 17 2 19 8 1 9)) (list 6 8 9 19) 0.001)\n    (check-within (candidate (list 2 6 8) (list 2 6 8 2 9 2 7) (list 8 2 2 9 2 7 8)) (list 8) 0.001)\n    (check-within (candidate (list 1 7 7) (list 1 7 1 6 2 9 5 6) (list 2 1 6 9 5 6 5 6)) (list 5 6) 0.001)\n    (check-within (candidate (list 4 6 7 12 12 25 37) (list 37 41 37 6 4 7 25) (list 41 37 37 26 7 45 45)) (list 12 26 37 45) 0.001)\n    (check-within (candidate (list 3 4) (list 4 3) (list 2 1)) (list 1 2) 0.001)\n    (check-within (candidate (list 1 2) (list 1 2 3 3 2 1 2) (list 2 3 3 2 1 2 2)) (list 2) 0.001)\n    (check-within (candidate (list 20 37 44 53 55 59 60 62) (list 20 44 53 60 11 55 37 59) (list 53 28 62 11 16 63 9 6)) (list 6 9 16 28 62 63) 0.001)\n    (check-within (candidate (list 2 4) (list 4 2 2 1 4 2 2 3) (list 2 2 1 4 2 2 3 4)) (list 4) 0.001)\n    (check-within (candidate (list 2 6 7) (list 6 7 6 3 6 5 2) (list 6 6 3 6 5 4 8)) (list 4 8) 0.001)\n    (check-within (candidate (list 3 7 13 13) (list 13 7 4 6) (list 9 4 6 15)) (list 3 9 15) 0.001)\n    (check-within (candidate (list 2 3) (list 2 3) (list 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 12 13 25 27 34 34 38) (list 12 13 11 33 2 25 34 27 38) (list 11 2 33 26 25 30 24 38 47)) (list 24 26 30 47) 0.001)\n    (check-within (candidate (list 2 13 20 29 34 48 48) (list 2 13) (list 5 42)) (list 5 20 29 34 42 48) 0.001)\n    (check-within (candidate (list 19 30 31 41 47 54 57 62) (list 41 31 62 30 54) (list 38 49 10 60 31)) (list 10 19 31 38 47 49 57 60) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2844_sumOfSquares", "language": "rkt", "prompt": "#lang racket\n;; You are given a 1-indexed integer array nums of length n.\n;; An element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\n;; Return the sum of the squares of all special elements of nums.\n;; Example 1:\n;; Input: nums = [1,2,3,4]\n;; Output: 21\n;; Explanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4.\n;; Hence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.\n;; Example 2:\n;; Input: nums = [2,7,1,19,18,3]\n;; Output: 63\n;; Explanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6.\n;; Hence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63.\n;; Constraints:\n;;  * 1 <= nums.length == n <= 50\n;;  * 1 <= nums[i] <= 50\n(define (sumOfSquares nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2844_sumOfSquares.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumOfSquares))\n    (check-within (candidate (list 1 2 3 4)) 21 0.001)\n    (check-within (candidate (list 2 7 1 19 18 3)) 63 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 2)) 4 0.001)\n    (check-within (candidate (list 3)) 9 0.001)\n    (check-within (candidate (list 4)) 16 0.001)\n    (check-within (candidate (list 5)) 25 0.001)\n    (check-within (candidate (list 6)) 36 0.001)\n    (check-within (candidate (list 7)) 49 0.001)\n    (check-within (candidate (list 8)) 64 0.001)\n    (check-within (candidate (list 9)) 81 0.001)\n    (check-within (candidate (list 10)) 100 0.001)\n    (check-within (candidate (list 11)) 121 0.001)\n    (check-within (candidate (list 12)) 144 0.001)\n    (check-within (candidate (list 13)) 169 0.001)\n    (check-within (candidate (list 14)) 196 0.001)\n    (check-within (candidate (list 15)) 225 0.001)\n    (check-within (candidate (list 16)) 256 0.001)\n    (check-within (candidate (list 17)) 289 0.001)\n    (check-within (candidate (list 18)) 324 0.001)\n    (check-within (candidate (list 19)) 361 0.001)\n    (check-within (candidate (list 20)) 400 0.001)\n    (check-within (candidate (list 21)) 441 0.001)\n    (check-within (candidate (list 22)) 484 0.001)\n    (check-within (candidate (list 23)) 529 0.001)\n    (check-within (candidate (list 24)) 576 0.001)\n    (check-within (candidate (list 25)) 625 0.001)\n    (check-within (candidate (list 26)) 676 0.001)\n    (check-within (candidate (list 27)) 729 0.001)\n    (check-within (candidate (list 28)) 784 0.001)\n    (check-within (candidate (list 29)) 841 0.001)\n    (check-within (candidate (list 30)) 900 0.001)\n    (check-within (candidate (list 31)) 961 0.001)\n    (check-within (candidate (list 32)) 1024 0.001)\n    (check-within (candidate (list 33)) 1089 0.001)\n    (check-within (candidate (list 34)) 1156 0.001)\n    (check-within (candidate (list 35)) 1225 0.001)\n    (check-within (candidate (list 36)) 1296 0.001)\n    (check-within (candidate (list 37)) 1369 0.001)\n    (check-within (candidate (list 38)) 1444 0.001)\n    (check-within (candidate (list 39)) 1521 0.001)\n    (check-within (candidate (list 40)) 1600 0.001)\n    (check-within (candidate (list 41)) 1681 0.001)\n    (check-within (candidate (list 42)) 1764 0.001)\n    (check-within (candidate (list 43)) 1849 0.001)\n    (check-within (candidate (list 44)) 1936 0.001)\n    (check-within (candidate (list 45)) 2025 0.001)\n    (check-within (candidate (list 46)) 2116 0.001)\n    (check-within (candidate (list 47)) 2209 0.001)\n    (check-within (candidate (list 48)) 2304 0.001)\n    (check-within (candidate (list 49)) 2401 0.001)\n    (check-within (candidate (list 50)) 2500 0.001)\n    (check-within (candidate (list 16 16)) 512 0.001)\n    (check-within (candidate (list 13 36)) 1465 0.001)\n    (check-within (candidate (list 40 37)) 2969 0.001)\n    (check-within (candidate (list 33 42)) 2853 0.001)\n    (check-within (candidate (list 46 9)) 2197 0.001)\n    (check-within (candidate (list 30 14)) 1096 0.001)\n    (check-within (candidate (list 5 41)) 1706 0.001)\n    (check-within (candidate (list 17 9)) 370 0.001)\n    (check-within (candidate (list 29 21)) 1282 0.001)\n    (check-within (candidate (list 4 38)) 1460 0.001)\n    (check-within (candidate (list 14 18)) 520 0.001)\n    (check-within (candidate (list 11 7)) 170 0.001)\n    (check-within (candidate (list 11 36)) 1417 0.001)\n    (check-within (candidate (list 18 26)) 1000 0.001)\n    (check-within (candidate (list 37 46)) 3485 0.001)\n    (check-within (candidate (list 13 33)) 1258 0.001)\n    (check-within (candidate (list 39 1)) 1522 0.001)\n    (check-within (candidate (list 37 16)) 1625 0.001)\n    (check-within (candidate (list 22 34)) 1640 0.001)\n    (check-within (candidate (list 4 50)) 2516 0.001)\n    (check-within (candidate (list 42 40)) 3364 0.001)\n    (check-within (candidate (list 7 44)) 1985 0.001)\n    (check-within (candidate (list 21 27)) 1170 0.001)\n    (check-within (candidate (list 49 35)) 3626 0.001)\n    (check-within (candidate (list 32 20)) 1424 0.001)\n    (check-within (candidate (list 30 12)) 1044 0.001)\n    (check-within (candidate (list 50 42)) 4264 0.001)\n    (check-within (candidate (list 3 11)) 130 0.001)\n    (check-within (candidate (list 38 17)) 1733 0.001)\n    (check-within (candidate (list 50 32)) 3524 0.001)\n    (check-within (candidate (list 12 35)) 1369 0.001)\n    (check-within (candidate (list 9 32)) 1105 0.001)\n    (check-within (candidate (list 6 11)) 157 0.001)\n    (check-within (candidate (list 11 39)) 1642 0.001)\n    (check-within (candidate (list 18 29)) 1165 0.001)\n    (check-within (candidate (list 44 29)) 2777 0.001)\n    (check-within (candidate (list 50 13)) 2669 0.001)\n    (check-within (candidate (list 46 46)) 4232 0.001)\n    (check-within (candidate (list 27 5)) 754 0.001)\n    (check-within (candidate (list 12 13)) 313 0.001)\n    (check-within (candidate (list 10 46)) 2216 0.001)\n    (check-within (candidate (list 37 32)) 2393 0.001)\n    (check-within (candidate (list 26 33)) 1765 0.001)\n    (check-within (candidate (list 44 3)) 1945 0.001)\n    (check-within (candidate (list 9 16)) 337 0.001)\n    (check-within (candidate (list 7 21)) 490 0.001)\n    (check-within (candidate (list 23 33)) 1618 0.001)\n    (check-within (candidate (list 22 5)) 509 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2849_sumImbalanceNumbers", "language": "rkt", "prompt": "#lang racket\n;;     The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\n;; * 0 <= i < n - 1, and\n;; * sarr[i+1] - sarr[i] > 1\n;;     Here, sorted(arr) is the function that returns the sorted version of arr.\n;;     Given a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\n;;     A subarray is a contiguous non-empty sequence of elements within an array.\n;;     Example 1:\n;;     Input: nums = [2,3,1,4]\n;;     Output: 3\n;;     Explanation: There are 3 subarrays with non-zero imbalance numbers:\n;;     - Subarray [3, 1] with an imbalance number of 1.\n;;     - Subarray [3, 1, 4] with an imbalance number of 1.\n;;     - Subarray [1, 4] with an imbalance number of 1.\n;;     The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3.\n;;     Example 2:\n;;     Input: nums = [1,3,3,3,5]\n;;     Output: 8\n;;     Explanation: There are 7 subarrays with non-zero imbalance numbers:\n;;     - Subarray [1, 3] with an imbalance number of 1.\n;;     - Subarray [1, 3, 3] with an imbalance number of 1.\n;;     - Subarray [1, 3, 3, 3] with an imbalance number of 1.\n;;     - Subarray [1, 3, 3, 3, 5] with an imbalance number of 2.\n;;     - Subarray [3, 3, 3, 5] with an imbalance number of 1.\n;;     - Subarray [3, 3, 5] with an imbalance number of 1.\n;;     - Subarray [3, 5] with an imbalance number of 1.\n;;     The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8.\n;;     Constraints:\n;; * 1 <= nums.length <= 1000\n;; * 1 <= nums[i] <= nums.length\n(define (sumImbalanceNumbers nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2849_sumImbalanceNumbers.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumImbalanceNumbers))\n    (check-within (candidate (list 2 3 1 4)) 3 0.001)\n    (check-within (candidate (list 1 3 3 3 5)) 8 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 1 1)) 0 0.001)\n    (check-within (candidate (list 1 2)) 0 0.001)\n    (check-within (candidate (list 2 1)) 0 0.001)\n    (check-within (candidate (list 2 2)) 0 0.001)\n    (check-within (candidate (list 1 1 1)) 0 0.001)\n    (check-within (candidate (list 1 1 2)) 0 0.001)\n    (check-within (candidate (list 1 1 3)) 2 0.001)\n    (check-within (candidate (list 1 2 1)) 0 0.001)\n    (check-within (candidate (list 1 2 2)) 0 0.001)\n    (check-within (candidate (list 1 2 3)) 0 0.001)\n    (check-within (candidate (list 1 3 1)) 3 0.001)\n    (check-within (candidate (list 1 3 2)) 1 0.001)\n    (check-within (candidate (list 1 3 3)) 2 0.001)\n    (check-within (candidate (list 2 1 1)) 0 0.001)\n    (check-within (candidate (list 2 1 2)) 0 0.001)\n    (check-within (candidate (list 2 1 3)) 1 0.001)\n    (check-within (candidate (list 2 2 1)) 0 0.001)\n    (check-within (candidate (list 2 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2 3)) 0 0.001)\n    (check-within (candidate (list 2 3 1)) 1 0.001)\n    (check-within (candidate (list 2 3 2)) 0 0.001)\n    (check-within (candidate (list 2 3 3)) 0 0.001)\n    (check-within (candidate (list 3 1 1)) 2 0.001)\n    (check-within (candidate (list 3 1 2)) 1 0.001)\n    (check-within (candidate (list 3 1 3)) 3 0.001)\n    (check-within (candidate (list 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 2 2)) 0 0.001)\n    (check-within (candidate (list 3 2 3)) 0 0.001)\n    (check-within (candidate (list 3 3 1)) 2 0.001)\n    (check-within (candidate (list 3 3 2)) 0 0.001)\n    (check-within (candidate (list 3 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2)) 0 0.001)\n    (check-within (candidate (list 1 1 1 3)) 3 0.001)\n    (check-within (candidate (list 1 1 1 4)) 3 0.001)\n    (check-within (candidate (list 1 1 2 1)) 0 0.001)\n    (check-within (candidate (list 1 1 2 2)) 0 0.001)\n    (check-within (candidate (list 1 1 2 3)) 0 0.001)\n    (check-within (candidate (list 1 1 2 4)) 3 0.001)\n    (check-within (candidate (list 1 1 3 1)) 5 0.001)\n    (check-within (candidate (list 1 1 3 2)) 2 0.001)\n    (check-within (candidate (list 1 1 3 3)) 4 0.001)\n    (check-within (candidate (list 1 1 3 4)) 4 0.001)\n    (check-within (candidate (list 1 1 4 1)) 5 0.001)\n    (check-within (candidate (list 1 1 4 2)) 5 0.001)\n    (check-within (candidate (list 1 1 4 3)) 4 0.001)\n    (check-within (candidate (list 1 1 4 4)) 4 0.001)\n    (check-within (candidate (list 1 2 1 1)) 0 0.001)\n    (check-within (candidate (list 1 2 1 2)) 0 0.001)\n    (check-within (candidate (list 1 2 1 3)) 1 0.001)\n    (check-within (candidate (list 1 2 1 4)) 3 0.001)\n    (check-within (candidate (list 1 2 2 1)) 0 0.001)\n    (check-within (candidate (list 1 2 2 2)) 0 0.001)\n    (check-within (candidate (list 1 2 2 3)) 0 0.001)\n    (check-within (candidate (list 1 2 2 4)) 3 0.001)\n    (check-within (candidate (list 1 2 3 1)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2)) 0 0.001)\n    (check-within (candidate (list 1 2 3 3)) 0 0.001)\n    (check-within (candidate (list 1 2 3 4)) 0 0.001)\n    (check-within (candidate (list 1 2 4 1)) 5 0.001)\n    (check-within (candidate (list 1 2 4 2)) 5 0.001)\n    (check-within (candidate (list 1 2 4 3)) 2 0.001)\n    (check-within (candidate (list 1 2 4 4)) 4 0.001)\n    (check-within (candidate (list 1 3 1 1)) 5 0.001)\n    (check-within (candidate (list 1 3 1 2)) 3 0.001)\n    (check-within (candidate (list 1 3 1 3)) 6 0.001)\n    (check-within (candidate (list 1 3 1 4)) 6 0.001)\n    (check-within (candidate (list 1 3 2 1)) 1 0.001)\n    (check-within (candidate (list 1 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 3 2 3)) 1 0.001)\n    (check-within (candidate (list 1 3 2 4)) 2 0.001)\n    (check-within (candidate (list 1 3 3 1)) 5 0.001)\n    (check-within (candidate (list 1 3 3 2)) 2 0.001)\n    (check-within (candidate (list 1 3 3 3)) 3 0.001)\n    (check-within (candidate (list 1 3 3 4)) 3 0.001)\n    (check-within (candidate (list 1 3 4 1)) 5 0.001)\n    (check-within (candidate (list 1 3 4 2)) 3 0.001)\n    (check-within (candidate (list 1 3 4 3)) 3 0.001)\n    (check-within (candidate (list 1 3 4 4)) 3 0.001)\n    (check-within (candidate (list 1 4 1 1)) 5 0.001)\n    (check-within (candidate (list 1 4 1 2)) 5 0.001)\n    (check-within (candidate (list 1 4 1 3)) 6 0.001)\n    (check-within (candidate (list 1 4 1 4)) 6 0.001)\n    (check-within (candidate (list 1 4 2 1)) 5 0.001)\n    (check-within (candidate (list 1 4 2 2)) 5 0.001)\n    (check-within (candidate (list 1 4 2 3)) 3 0.001)\n    (check-within (candidate (list 1 4 2 4)) 6 0.001)\n    (check-within (candidate (list 1 4 3 1)) 5 0.001)\n    (check-within (candidate (list 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list 1 4 3 3)) 3 0.001)\n    (check-within (candidate (list 1 4 3 4)) 3 0.001)\n    (check-within (candidate (list 1 4 4 1)) 5 0.001)\n    (check-within (candidate (list 1 4 4 2)) 5 0.001)\n    (check-within (candidate (list 1 4 4 3)) 3 0.001)\n    (check-within (candidate (list 1 4 4 4)) 3 0.001)\n    (check-within (candidate (list 2 1 1 1)) 0 0.001)\n    (check-within (candidate (list 2 1 1 2)) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2855_maximumJumps", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums of n integers and an integer target.\n;; You are initially positioned at index 0. In one step, you can jump from index i to any index j such that:\n;;  * 0 <= i < j < n\n;;  * -target <= nums[j] - nums[i] <= target\n;; Return the maximum number of jumps you can make to reach index n - 1.\n;; If there is no way to reach index n - 1, return -1.\n;; Example 1:\n;; Input: nums = [1,3,6,4,1,2], target = 2\n;; Output: 3\n;; Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n;; - Jump from index 0 to index 1.\n;; - Jump from index 1 to index 3.\n;; - Jump from index 3 to index 5.\n;; It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3.\n;; Example 2:\n;; Input: nums = [1,3,6,4,1,2], target = 3\n;; Output: 5\n;; Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n;; - Jump from index 0 to index 1.\n;; - Jump from index 1 to index 2.\n;; - Jump from index 2 to index 3.\n;; - Jump from index 3 to index 4.\n;; - Jump from index 4 to index 5.\n;; It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5.\n;; Example 3:\n;; Input: nums = [1,3,6,4,1,2], target = 0\n;; Output: -1\n;; Explanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1.\n;; Constraints:\n;;  * 2 <= nums.length == n <= 1000\n;;  * -109\u00a0<= nums[i]\u00a0<= 109\n;;  * 0 <= target <= 2 * 109\n(define (maximumJumps nums target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2855_maximumJumps.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumJumps))\n    (check-within (candidate (list 1 3 6 4 1 2) 2) 3 0.001)\n    (check-within (candidate (list 1 3 6 4 1 2) 3) 5 0.001)\n    (check-within (candidate (list 1 3 6 4 1 2) 0) -1 0.001)\n    (check-within (candidate (list 0 1) 0) -1 0.001)\n    (check-within (candidate (list 0 1) 1) 1 0.001)\n    (check-within (candidate (list 0 1) 2) 1 0.001)\n    (check-within (candidate (list 1 0) 0) -1 0.001)\n    (check-within (candidate (list 1 0) 1) 1 0.001)\n    (check-within (candidate (list 1 0) 2) 1 0.001)\n    (check-within (candidate (list 0 1 2) 0) -1 0.001)\n    (check-within (candidate (list 0 1 2) 1) 2 0.001)\n    (check-within (candidate (list 0 1 2) 2) 2 0.001)\n    (check-within (candidate (list 0 1 2) 3) 2 0.001)\n    (check-within (candidate (list 0 2 1) 0) -1 0.001)\n    (check-within (candidate (list 0 2 1) 1) 1 0.001)\n    (check-within (candidate (list 0 2 1) 2) 2 0.001)\n    (check-within (candidate (list 0 2 1) 3) 2 0.001)\n    (check-within (candidate (list 1 0 2) 0) -1 0.001)\n    (check-within (candidate (list 1 0 2) 1) 1 0.001)\n    (check-within (candidate (list 1 0 2) 2) 2 0.001)\n    (check-within (candidate (list 1 0 2) 3) 2 0.001)\n    (check-within (candidate (list 1 2 0) 0) -1 0.001)\n    (check-within (candidate (list 1 2 0) 1) 1 0.001)\n    (check-within (candidate (list 1 2 0) 2) 2 0.001)\n    (check-within (candidate (list 1 2 0) 3) 2 0.001)\n    (check-within (candidate (list 2 0 1) 0) -1 0.001)\n    (check-within (candidate (list 2 0 1) 1) 1 0.001)\n    (check-within (candidate (list 2 0 1) 2) 2 0.001)\n    (check-within (candidate (list 2 0 1) 3) 2 0.001)\n    (check-within (candidate (list 2 1 0) 0) -1 0.001)\n    (check-within (candidate (list 2 1 0) 1) 2 0.001)\n    (check-within (candidate (list 2 1 0) 2) 2 0.001)\n    (check-within (candidate (list 2 1 0) 3) 2 0.001)\n    (check-within (candidate (list 0 1 2 3) 0) -1 0.001)\n    (check-within (candidate (list 0 1 2 3) 1) 3 0.001)\n    (check-within (candidate (list 0 1 2 3) 2) 3 0.001)\n    (check-within (candidate (list 0 1 2 3) 3) 3 0.001)\n    (check-within (candidate (list 0 1 2 3) 4) 3 0.001)\n    (check-within (candidate (list 0 1 3 2) 0) -1 0.001)\n    (check-within (candidate (list 0 1 3 2) 1) 2 0.001)\n    (check-within (candidate (list 0 1 3 2) 2) 3 0.001)\n    (check-within (candidate (list 0 1 3 2) 3) 3 0.001)\n    (check-within (candidate (list 0 1 3 2) 4) 3 0.001)\n    (check-within (candidate (list 0 2 1 3) 0) -1 0.001)\n    (check-within (candidate (list 0 2 1 3) 1) -1 0.001)\n    (check-within (candidate (list 0 2 1 3) 2) 3 0.001)\n    (check-within (candidate (list 0 2 1 3) 3) 3 0.001)\n    (check-within (candidate (list 0 2 1 3) 4) 3 0.001)\n    (check-within (candidate (list 0 2 3 1) 0) -1 0.001)\n    (check-within (candidate (list 0 2 3 1) 1) 1 0.001)\n    (check-within (candidate (list 0 2 3 1) 2) 3 0.001)\n    (check-within (candidate (list 0 2 3 1) 3) 3 0.001)\n    (check-within (candidate (list 0 2 3 1) 4) 3 0.001)\n    (check-within (candidate (list 0 3 1 2) 0) -1 0.001)\n    (check-within (candidate (list 0 3 1 2) 1) 2 0.001)\n    (check-within (candidate (list 0 3 1 2) 2) 2 0.001)\n    (check-within (candidate (list 0 3 1 2) 3) 3 0.001)\n    (check-within (candidate (list 0 3 1 2) 4) 3 0.001)\n    (check-within (candidate (list 0 3 2 1) 0) -1 0.001)\n    (check-within (candidate (list 0 3 2 1) 1) 1 0.001)\n    (check-within (candidate (list 0 3 2 1) 2) 2 0.001)\n    (check-within (candidate (list 0 3 2 1) 3) 3 0.001)\n    (check-within (candidate (list 0 3 2 1) 4) 3 0.001)\n    (check-within (candidate (list 1 0 2 3) 0) -1 0.001)\n    (check-within (candidate (list 1 0 2 3) 1) 2 0.001)\n    (check-within (candidate (list 1 0 2 3) 2) 3 0.001)\n    (check-within (candidate (list 1 0 2 3) 3) 3 0.001)\n    (check-within (candidate (list 1 0 2 3) 4) 3 0.001)\n    (check-within (candidate (list 1 0 3 2) 0) -1 0.001)\n    (check-within (candidate (list 1 0 3 2) 1) 1 0.001)\n    (check-within (candidate (list 1 0 3 2) 2) 2 0.001)\n    (check-within (candidate (list 1 0 3 2) 3) 3 0.001)\n    (check-within (candidate (list 1 0 3 2) 4) 3 0.001)\n    (check-within (candidate (list 1 2 0 3) 0) -1 0.001)\n    (check-within (candidate (list 1 2 0 3) 1) 2 0.001)\n    (check-within (candidate (list 1 2 0 3) 2) 2 0.001)\n    (check-within (candidate (list 1 2 0 3) 3) 3 0.001)\n    (check-within (candidate (list 1 2 0 3) 4) 3 0.001)\n    (check-within (candidate (list 1 2 3 0) 0) -1 0.001)\n    (check-within (candidate (list 1 2 3 0) 1) 1 0.001)\n    (check-within (candidate (list 1 2 3 0) 2) 2 0.001)\n    (check-within (candidate (list 1 2 3 0) 3) 3 0.001)\n    (check-within (candidate (list 1 2 3 0) 4) 3 0.001)\n    (check-within (candidate (list 1 3 0 2) 0) -1 0.001)\n    (check-within (candidate (list 1 3 0 2) 1) 1 0.001)\n    (check-within (candidate (list 1 3 0 2) 2) 2 0.001)\n    (check-within (candidate (list 1 3 0 2) 3) 3 0.001)\n    (check-within (candidate (list 1 3 0 2) 4) 3 0.001)\n    (check-within (candidate (list 1 3 2 0) 0) -1 0.001)\n    (check-within (candidate (list 1 3 2 0) 1) 1 0.001)\n    (check-within (candidate (list 1 3 2 0) 2) 3 0.001)\n    (check-within (candidate (list 1 3 2 0) 3) 3 0.001)\n    (check-within (candidate (list 1 3 2 0) 4) 3 0.001)\n    (check-within (candidate (list 2 0 1 3) 0) -1 0.001)\n    (check-within (candidate (list 2 0 1 3) 1) 1 0.001)\n    (check-within (candidate (list 2 0 1 3) 2) 3 0.001)\n    (check-within (candidate (list 2 0 1 3) 3) 3 0.001)\n    (check-within (candidate (list 2 0 1 3) 4) 3 0.001)\n    (check-within (candidate (list 2 0 3 1) 0) -1 0.001)\n    (check-within (candidate (list 2 0 3 1) 1) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2856_countCompleteSubarrays", "language": "rkt", "prompt": "#lang racket\n;; You are given an array nums consisting of positive integers.\n;; We call a subarray of an array complete if the following condition is satisfied:\n;;  * The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.\n;; Return the number of complete subarrays.\n;; A subarray is a contiguous non-empty part of an array.\n;; Example 1:\n;; Input: nums = [1,3,1,2,2]\n;; Output: 4\n;; Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].\n;; Example 2:\n;; Input: nums = [5,5,5,5]\n;; Output: 10\n;; Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.\n;; Constraints:\n;;  * 1 <= nums.length <= 1000\n;;  * 1 <= nums[i] <= 2000\n(define (countCompleteSubarrays nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2856_countCompleteSubarrays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countCompleteSubarrays))\n    (check-within (candidate (list 1 3 1 2 2)) 4 0.001)\n    (check-within (candidate (list 5 5 5 5)) 10 0.001)\n    (check-within (candidate (list 459 459 962 1579 1435 756 1872 1597)) 2 0.001)\n    (check-within (candidate (list 1786 1786 1786 114)) 3 0.001)\n    (check-within (candidate (list 1632 1632 528 359 1671 1632 511 1087 424 1684)) 3 0.001)\n    (check-within (candidate (list 1430 12 1430 1075 1722)) 2 0.001)\n    (check-within (candidate (list 1917 1917 608 608 1313 751 558 1561 608)) 4 0.001)\n    (check-within (candidate (list 254 1690 1690 1068 1779)) 1 0.001)\n    (check-within (candidate (list 1116)) 1 0.001)\n    (check-within (candidate (list 1677 1677 1352 1219 1666 1677 1892 1892 319)) 3 0.001)\n    (check-within (candidate (list 1386 1997 1997 574 574 1360 989)) 1 0.001)\n    (check-within (candidate (list 50 48 1118 540 1248 1984 1698 41 1984 186)) 1 0.001)\n    (check-within (candidate (list 273 524 40 1323 1323)) 2 0.001)\n    (check-within (candidate (list 246 376 828 191 1942 210)) 1 0.001)\n    (check-within (candidate (list 463 1497 1676 127 1379 17 1075 190)) 1 0.001)\n    (check-within (candidate (list 765 1370)) 1 0.001)\n    (check-within (candidate (list 1110 804 1110 839 728 839)) 4 0.001)\n    (check-within (candidate (list 1001)) 1 0.001)\n    (check-within (candidate (list 665 867 954 1411 728 1006 372 1411)) 2 0.001)\n    (check-within (candidate (list 1213 1203 1277 369 1277)) 2 0.001)\n    (check-within (candidate (list 1898 370 822 1659 1360 128 370 360 261 1898)) 4 0.001)\n    (check-within (candidate (list 1881 1446)) 1 0.001)\n    (check-within (candidate (list 474 315 155 155 1986)) 1 0.001)\n    (check-within (candidate (list 1389 1817 401 1067 1356 1997)) 1 0.001)\n    (check-within (candidate (list 1586 1332 1055 1586 1586 1861 892 1445)) 2 0.001)\n    (check-within (candidate (list 1601 1601)) 3 0.001)\n    (check-within (candidate (list 1417 1417 1160 387 928 1572 1832)) 2 0.001)\n    (check-within (candidate (list 1497 1237 1237 946 682 331 742)) 1 0.001)\n    (check-within (candidate (list 377 377)) 3 0.001)\n    (check-within (candidate (list 356 356 356 356 356 315)) 5 0.001)\n    (check-within (candidate (list 285)) 1 0.001)\n    (check-within (candidate (list 211 211 731 226)) 2 0.001)\n    (check-within (candidate (list 1253 188 188 5 1393 1696 1062)) 1 0.001)\n    (check-within (candidate (list 90 1297 482 482 90 1836 1045 1497 482)) 4 0.001)\n    (check-within (candidate (list 1857 273 609 609 1803 1491 223 609 1857 1052)) 2 0.001)\n    (check-within (candidate (list 617 1014 679 934 955)) 1 0.001)\n    (check-within (candidate (list 577 577)) 3 0.001)\n    (check-within (candidate (list 1793 997 1082 1411 997 546 224 336 307 336)) 2 0.001)\n    (check-within (candidate (list 1150 1150)) 3 0.001)\n    (check-within (candidate (list 634)) 1 0.001)\n    (check-within (candidate (list 1454 1789 1454)) 3 0.001)\n    (check-within (candidate (list 1657 1090 1682 1376 547 547 407 755 1124 1376)) 2 0.001)\n    (check-within (candidate (list 379)) 1 0.001)\n    (check-within (candidate (list 1673 1584 1584 1055 1971 1122 1086 1692 75)) 1 0.001)\n    (check-within (candidate (list 722 1427)) 1 0.001)\n    (check-within (candidate (list 1641 448 1641 1437 448 1406 1437)) 6 0.001)\n    (check-within (candidate (list 1440 704 1440 1440 749)) 2 0.001)\n    (check-within (candidate (list 832 832)) 3 0.001)\n    (check-within (candidate (list 1635 1759 1759 1976 700)) 1 0.001)\n    (check-within (candidate (list 1577 1674 1745 156 596 1973 1390 156 1497 415)) 1 0.001)\n    (check-within (candidate (list 1646 1991)) 1 0.001)\n    (check-within (candidate (list 1613 881 1660 1270 1783 881 773 1783 1229 111)) 1 0.001)\n    (check-within (candidate (list 431)) 1 0.001)\n    (check-within (candidate (list 113)) 1 0.001)\n    (check-within (candidate (list 151)) 1 0.001)\n    (check-within (candidate (list 999 701 389 999 409 488 993 999 517 1860)) 2 0.001)\n    (check-within (candidate (list 236 596 1263 1563 860 596 1184 575)) 1 0.001)\n    (check-within (candidate (list 278 338)) 1 0.001)\n    (check-within (candidate (list 939)) 1 0.001)\n    (check-within (candidate (list 1293 564 614 694 1386 564)) 2 0.001)\n    (check-within (candidate (list 681 448)) 1 0.001)\n    (check-within (candidate (list 1563 558 1778 1404 1973)) 1 0.001)\n    (check-within (candidate (list 1508 1508 649)) 2 0.001)\n    (check-within (candidate (list 1077 445 1947 445 789 789 789 956 1988 189)) 1 0.001)\n    (check-within (candidate (list 1984 526 30 1205 1691 1984 1241 280 280 1984)) 6 0.001)\n    (check-within (candidate (list 1802 1876 1143 1802 1012 1876 1802 1821)) 3 0.001)\n    (check-within (candidate (list 1338 901 613 575 613)) 2 0.001)\n    (check-within (candidate (list 406 406 242 242 770 1063 1436 1063 1063)) 6 0.001)\n    (check-within (candidate (list 1235 1235)) 3 0.001)\n    (check-within (candidate (list 1337 1088 1088 892 1209 1269)) 1 0.001)\n    (check-within (candidate (list 1941 1941)) 3 0.001)\n    (check-within (candidate (list 319)) 1 0.001)\n    (check-within (candidate (list 1891 1891 1748 1748 923 1748 923 763 1062 1748)) 4 0.001)\n    (check-within (candidate (list 1111 503 1980)) 1 0.001)\n    (check-within (candidate (list 213 1666 469 1675)) 1 0.001)\n    (check-within (candidate (list 769 1774 1654 928 1204)) 1 0.001)\n    (check-within (candidate (list 294 294 294 294 1351 294 1351 62 585)) 6 0.001)\n    (check-within (candidate (list 1197)) 1 0.001)\n    (check-within (candidate (list 21 1549 21 1549 1998 1219 1549 1021)) 3 0.001)\n    (check-within (candidate (list 1124 1124 556 1322 556)) 4 0.001)\n    (check-within (candidate (list 908 908 863 1977 908 8 427 1322)) 3 0.001)\n    (check-within (candidate (list 770)) 1 0.001)\n    (check-within (candidate (list 517 1497 334 334 996 1497 1394 534)) 1 0.001)\n    (check-within (candidate (list 564 750 750 750 1965 1965 1402)) 1 0.001)\n    (check-within (candidate (list 403 1080 365 1962 1589 1740 1335 1335 1589)) 3 0.001)\n    (check-within (candidate (list 1712 1621 1295 522 1734 522 1371 1935 684)) 1 0.001)\n    (check-within (candidate (list 270 1443 807 1704 1487)) 1 0.001)\n    (check-within (candidate (list 1880 1880 1880 604 1634 1412 1880 67 1759 1488)) 4 0.001)\n    (check-within (candidate (list 540 1799 1784 1799 972 1786 1578 1480 178 532)) 1 0.001)\n    (check-within (candidate (list 1235 471 367)) 1 0.001)\n    (check-within (candidate (list 1887 1373 190 1764 1764 959 959 1373 17)) 1 0.001)\n    (check-within (candidate (list 1313 910 1172 1541 1758 140 1380 492 240 1664)) 1 0.001)\n    (check-within (candidate (list 381 1304 381 758 1304 381 758)) 14 0.001)\n    (check-within (candidate (list 1517 665)) 1 0.001)\n    (check-within (candidate (list 1555 223 379 223 379 1982)) 1 0.001)\n    (check-within (candidate (list 1268 1268 1268 1268)) 10 0.001)\n    (check-within (candidate (list 1051 266 266 94 761 1051 255)) 3 0.001)\n    (check-within (candidate (list 420 945 3 172)) 1 0.001)\n    (check-within (candidate (list 1045 1120 1045 511 1045 1777 1224 336 560 153)) 2 0.001)\n    (check-within (candidate (list 627 592 592 1416 370 229 526 633)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2866_longestAlternatingSubarray", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and an integer threshold.\n;; Find the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions:\n;;  * nums[l] % 2 == 0\n;;  * For all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2\n;;  * For all indices i in the range [l, r], nums[i] <= threshold\n;; Return an integer denoting the length of the longest such subarray.\n;; Note: A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [3,2,5,4], threshold = 5\n;; Output: 3\n;; Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions.\n;; Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n;; Example 2:\n;; Input: nums = [1,2], threshold = 2\n;; Output: 1\n;; Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2].\n;; It satisfies all the conditions and we can show that 1 is the maximum possible achievable length.\n;; Example 3:\n;; Input: nums = [2,3,4,5], threshold = 4\n;; Output: 3\n;; Explanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4].\n;; It satisfies all the conditions.\n;; Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n;; Constraints:\n;;  * 1 <= nums.length <= 100\n;;  * 1 <= nums[i] <= 100\n;;  * 1 <= threshold <= 100\n(define (longestAlternatingSubarray nums threshold)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2866_longestAlternatingSubarray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longestAlternatingSubarray))\n    (check-within (candidate (list 3 2 5 4) 5) 3 0.001)\n    (check-within (candidate (list 1 2) 2) 1 0.001)\n    (check-within (candidate (list 2 3 4 5) 4) 3 0.001)\n    (check-within (candidate (list 1) 1) 0 0.001)\n    (check-within (candidate (list 2) 2) 1 0.001)\n    (check-within (candidate (list 3) 3) 0 0.001)\n    (check-within (candidate (list 4) 1) 0 0.001)\n    (check-within (candidate (list 5) 3) 0 0.001)\n    (check-within (candidate (list 6) 5) 0 0.001)\n    (check-within (candidate (list 7) 2) 0 0.001)\n    (check-within (candidate (list 8) 1) 0 0.001)\n    (check-within (candidate (list 9) 7) 0 0.001)\n    (check-within (candidate (list 10) 7) 0 0.001)\n    (check-within (candidate (list 1 3) 16) 0 0.001)\n    (check-within (candidate (list 1 6) 2) 0 0.001)\n    (check-within (candidate (list 1 10) 6) 0 0.001)\n    (check-within (candidate (list 1 10) 7) 0 0.001)\n    (check-within (candidate (list 2 2) 18) 1 0.001)\n    (check-within (candidate (list 2 4) 7) 1 0.001)\n    (check-within (candidate (list 2 5) 2) 1 0.001)\n    (check-within (candidate (list 2 6) 15) 1 0.001)\n    (check-within (candidate (list 2 7) 9) 2 0.001)\n    (check-within (candidate (list 2 8) 4) 1 0.001)\n    (check-within (candidate (list 2 8) 8) 1 0.001)\n    (check-within (candidate (list 2 8) 16) 1 0.001)\n    (check-within (candidate (list 2 9) 14) 2 0.001)\n    (check-within (candidate (list 3 1) 9) 0 0.001)\n    (check-within (candidate (list 3 4) 10) 1 0.001)\n    (check-within (candidate (list 3 10) 3) 0 0.001)\n    (check-within (candidate (list 4 2) 11) 1 0.001)\n    (check-within (candidate (list 4 2) 15) 1 0.001)\n    (check-within (candidate (list 4 4) 9) 1 0.001)\n    (check-within (candidate (list 4 7) 8) 2 0.001)\n    (check-within (candidate (list 4 9) 17) 2 0.001)\n    (check-within (candidate (list 5 8) 5) 0 0.001)\n    (check-within (candidate (list 5 8) 15) 1 0.001)\n    (check-within (candidate (list 6 2) 10) 1 0.001)\n    (check-within (candidate (list 6 4) 14) 1 0.001)\n    (check-within (candidate (list 6 4) 16) 1 0.001)\n    (check-within (candidate (list 6 5) 10) 2 0.001)\n    (check-within (candidate (list 7 3) 8) 0 0.001)\n    (check-within (candidate (list 7 4) 7) 1 0.001)\n    (check-within (candidate (list 7 5) 1) 0 0.001)\n    (check-within (candidate (list 7 10) 52) 1 0.001)\n    (check-within (candidate (list 7 17) 31) 0 0.001)\n    (check-within (candidate (list 8 4) 6) 1 0.001)\n    (check-within (candidate (list 8 8) 20) 1 0.001)\n    (check-within (candidate (list 9 2) 11) 1 0.001)\n    (check-within (candidate (list 9 4) 15) 1 0.001)\n    (check-within (candidate (list 10 3) 11) 2 0.001)\n    (check-within (candidate (list 10 4) 7) 1 0.001)\n    (check-within (candidate (list 10 5) 20) 2 0.001)\n    (check-within (candidate (list 10 7) 11) 2 0.001)\n    (check-within (candidate (list 10 8) 4) 0 0.001)\n    (check-within (candidate (list 10 18) 43) 1 0.001)\n    (check-within (candidate (list 12 34) 7) 0 0.001)\n    (check-within (candidate (list 12 35) 8) 0 0.001)\n    (check-within (candidate (list 13 9) 53) 0 0.001)\n    (check-within (candidate (list 15 13) 23) 0 0.001)\n    (check-within (candidate (list 15 15) 18) 0 0.001)\n    (check-within (candidate (list 17 2) 17) 1 0.001)\n    (check-within (candidate (list 23 37) 35) 0 0.001)\n    (check-within (candidate (list 24 11) 54) 2 0.001)\n    (check-within (candidate (list 27 9) 55) 0 0.001)\n    (check-within (candidate (list 27 17) 40) 0 0.001)\n    (check-within (candidate (list 33 4) 43) 1 0.001)\n    (check-within (candidate (list 41 16) 9) 0 0.001)\n    (check-within (candidate (list 47 44) 20) 0 0.001)\n    (check-within (candidate (list 49 39) 52) 0 0.001)\n    (check-within (candidate (list 50 8) 19) 1 0.001)\n    (check-within (candidate (list 76 46) 91) 1 0.001)\n    (check-within (candidate (list 1 1 7) 4) 0 0.001)\n    (check-within (candidate (list 1 3 1) 18) 0 0.001)\n    (check-within (candidate (list 1 4 3) 1) 0 0.001)\n    (check-within (candidate (list 1 5 3) 8) 0 0.001)\n    (check-within (candidate (list 1 10 5) 9) 0 0.001)\n    (check-within (candidate (list 2 1 8) 6) 2 0.001)\n    (check-within (candidate (list 2 10 5) 7) 1 0.001)\n    (check-within (candidate (list 3 2 8) 18) 1 0.001)\n    (check-within (candidate (list 3 3 10) 20) 1 0.001)\n    (check-within (candidate (list 3 4 2) 19) 1 0.001)\n    (check-within (candidate (list 3 6 10) 6) 1 0.001)\n    (check-within (candidate (list 3 8 9) 19) 2 0.001)\n    (check-within (candidate (list 4 3 1) 4) 2 0.001)\n    (check-within (candidate (list 4 4 4) 8) 1 0.001)\n    (check-within (candidate (list 4 5 10) 3) 0 0.001)\n    (check-within (candidate (list 4 10 2) 4) 1 0.001)\n    (check-within (candidate (list 4 10 3) 8) 1 0.001)\n    (check-within (candidate (list 4 10 3) 10) 2 0.001)\n    (check-within (candidate (list 4 40 8) 45) 1 0.001)\n    (check-within (candidate (list 5 3 9) 7) 0 0.001)\n    (check-within (candidate (list 5 5 6) 7) 1 0.001)\n    (check-within (candidate (list 6 2 2) 16) 1 0.001)\n    (check-within (candidate (list 6 2 4) 17) 1 0.001)\n    (check-within (candidate (list 6 3 4) 6) 3 0.001)\n    (check-within (candidate (list 6 5 2) 17) 3 0.001)\n    (check-within (candidate (list 6 5 3) 17) 2 0.001)\n    (check-within (candidate (list 6 7 2) 14) 3 0.001)\n    (check-within (candidate (list 7 1 10) 9) 0 0.001)\n    (check-within (candidate (list 7 5 6) 8) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2868_continuousSubarrays", "language": "rkt", "prompt": "#lang racket\n;;     You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:\n;; * Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.\n;;     Return the total number of continuous subarrays.\n;;     A subarray is a contiguous non-empty sequence of elements within an array.\n;;     Example 1:\n;;     Input: nums = [5,4,2,4]\n;;     Output: 8\n;;     Explanation:\n;;     Continuous subarray of size 1: [5], [4], [2], [4].\n;;     Continuous subarray of size 2: [5,4], [4,2], [2,4].\n;;     Continuous subarray of size 3: [4,2,4].\n;;     Thereare no subarrys of size 4.\n;;     Total continuous subarrays = 4 + 3 + 1 = 8.\n;;     It can be shown that there are no more continuous subarrays.\n;;     Example 2:\n;;     Input: nums = [1,2,3]\n;;     Output: 6\n;;     Explanation:\n;;     Continuous subarray of size 1: [1], [2], [3].\n;;     Continuous subarray of size 2: [1,2], [2,3].\n;;     Continuous subarray of size 3: [1,2,3].\n;;     Total continuous subarrays = 3 + 2 + 1 = 6.\n;;     Constraints:\n;; * 1 <= nums.length <= 105\n;; * 1 <= nums[i] <= 109\n(define (continuousSubarrays nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2868_continuousSubarrays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate continuousSubarrays))\n    (check-within (candidate (list 5 4 2 4)) 8 0.001)\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 31 30 31 32)) 10 0.001)\n    (check-within (candidate (list 65 66 67 66 66 65 64 65 65 64)) 43 0.001)\n    (check-within (candidate (list 42 41 42 41 41 40 39 38)) 28 0.001)\n    (check-within (candidate (list 35 35 36 37 36 37 38 37 38)) 39 0.001)\n    (check-within (candidate (list 43 44 43 44)) 10 0.001)\n    (check-within (candidate (list 14 15 15 15 16 16 16 16 15 16)) 55 0.001)\n    (check-within (candidate (list 21)) 1 0.001)\n    (check-within (candidate (list 34 34 33 34 33 33 32 31 30 31)) 39 0.001)\n    (check-within (candidate (list 58 59 59 58 59)) 15 0.001)\n    (check-within (candidate (list 10 9 8 7 8 9 9)) 24 0.001)\n    (check-within (candidate (list 65 66 65 64 63 62 62)) 20 0.001)\n    (check-within (candidate (list 65 65 64 65 66 65)) 21 0.001)\n    (check-within (candidate (list 85 84 83 84 83 82)) 20 0.001)\n    (check-within (candidate (list 60 59 60)) 6 0.001)\n    (check-within (candidate (list 96 97 98)) 6 0.001)\n    (check-within (candidate (list 21 22 23 22 23)) 15 0.001)\n    (check-within (candidate (list 76 77 77 78 77 78 78)) 28 0.001)\n    (check-within (candidate (list 27 27 27 26 26 27 27 27 27)) 45 0.001)\n    (check-within (candidate (list 17)) 1 0.001)\n    (check-within (candidate (list 95)) 1 0.001)\n    (check-within (candidate (list 62)) 1 0.001)\n    (check-within (candidate (list 10 10 9 8 9 9 9 8 8)) 45 0.001)\n    (check-within (candidate (list 21 22 22 23 24 24 23 24 23 24)) 49 0.001)\n    (check-within (candidate (list 94 94 94 94 94 93 94)) 28 0.001)\n    (check-within (candidate (list 66 65 64 64 64 65 64 63)) 35 0.001)\n    (check-within (candidate (list 35 35 36 36 35)) 15 0.001)\n    (check-within (candidate (list 35 34 33 34 35 35 34 35 34)) 45 0.001)\n    (check-within (candidate (list 70 69 70 71 70 70 71 71)) 36 0.001)\n    (check-within (candidate (list 49 49 49 50 50 49 50 51 51)) 45 0.001)\n    (check-within (candidate (list 70 71 72 72 72)) 15 0.001)\n    (check-within (candidate (list 73 73 74 75 76 76 75 76)) 28 0.001)\n    (check-within (candidate (list 74 74 74 75 76 75 75 76 77 77)) 49 0.001)\n    (check-within (candidate (list 21 21 20 19 20 20 21 21)) 36 0.001)\n    (check-within (candidate (list 86 85)) 3 0.001)\n    (check-within (candidate (list 94 95 96 96 97 98 99 100 100)) 28 0.001)\n    (check-within (candidate (list 16 17 16)) 6 0.001)\n    (check-within (candidate (list 25 26 26 27 28 27 28 28 27 27)) 49 0.001)\n    (check-within (candidate (list 54)) 1 0.001)\n    (check-within (candidate (list 94 95 96 95 94 93 92 91)) 24 0.001)\n    (check-within (candidate (list 84 84 83)) 6 0.001)\n    (check-within (candidate (list 26 26)) 3 0.001)\n    (check-within (candidate (list 53 54 54 55)) 10 0.001)\n    (check-within (candidate (list 67 67 66 67 68 69 70 71 71)) 28 0.001)\n    (check-within (candidate (list 43 42 42 42 43)) 15 0.001)\n    (check-within (candidate (list 93 94 93)) 6 0.001)\n    (check-within (candidate (list 80 80)) 3 0.001)\n    (check-within (candidate (list 54 54 53 54 55 56 57 58 59)) 27 0.001)\n    (check-within (candidate (list 52 51 50 49 48 49 48 47 46)) 29 0.001)\n    (check-within (candidate (list 93 92 91 92 92 92 92)) 28 0.001)\n    (check-within (candidate (list 91 91 90 90 90 91 91 90)) 36 0.001)\n    (check-within (candidate (list 37 37 37 36)) 10 0.001)\n    (check-within (candidate (list 40 39 39 39 39 40 40 41 40 39)) 55 0.001)\n    (check-within (candidate (list 82 83 83 83 83 84)) 21 0.001)\n    (check-within (candidate (list 35 36 36 37 37 37 36 37 36)) 45 0.001)\n    (check-within (candidate (list 50 49 50 51 50)) 15 0.001)\n    (check-within (candidate (list 86 86 86 86 87)) 15 0.001)\n    (check-within (candidate (list 52)) 1 0.001)\n    (check-within (candidate (list 96 95 94 93)) 9 0.001)\n    (check-within (candidate (list 56 56 55 55 54 55 54 54 53 52)) 47 0.001)\n    (check-within (candidate (list 91)) 1 0.001)\n    (check-within (candidate (list 91 90 91 91)) 10 0.001)\n    (check-within (candidate (list 56 55 55 55)) 10 0.001)\n    (check-within (candidate (list 1 2 2 2 1 2 3 4 4 5)) 39 0.001)\n    (check-within (candidate (list 84 85 84 84 85 85 85)) 28 0.001)\n    (check-within (candidate (list 71 71 71 71)) 10 0.001)\n    (check-within (candidate (list 47 47 46)) 6 0.001)\n    (check-within (candidate (list 65)) 1 0.001)\n    (check-within (candidate (list 20 20 19 18)) 10 0.001)\n    (check-within (candidate (list 22 23 23 22 22 22 22)) 28 0.001)\n    (check-within (candidate (list 92 92)) 3 0.001)\n    (check-within (candidate (list 93 92 92 91 90 90 89 88)) 27 0.001)\n    (check-within (candidate (list 13 13 12 11)) 10 0.001)\n    (check-within (candidate (list 22 22 22 21 22 21)) 21 0.001)\n    (check-within (candidate (list 24 25 26 26 25 26 25 25 26)) 45 0.001)\n    (check-within (candidate (list 37 36)) 3 0.001)\n    (check-within (candidate (list 52 51)) 3 0.001)\n    (check-within (candidate (list 58)) 1 0.001)\n    (check-within (candidate (list 88 88 88 87 87 87 87 88 88)) 45 0.001)\n    (check-within (candidate (list 84 83 83 84 83 82 81)) 24 0.001)\n    (check-within (candidate (list 87 88 88 87 87 88 88 89)) 36 0.001)\n    (check-within (candidate (list 28 28 27)) 6 0.001)\n    (check-within (candidate (list 82 83 83 82)) 10 0.001)\n    (check-within (candidate (list 97 96 96 95 96 95)) 21 0.001)\n    (check-within (candidate (list 72 73 73 74 73 73)) 21 0.001)\n    (check-within (candidate (list 21 21 20)) 6 0.001)\n    (check-within (candidate (list 38 38)) 3 0.001)\n    (check-within (candidate (list 24 24 24 23 22 22 22 23)) 36 0.001)\n    (check-within (candidate (list 62 62)) 3 0.001)\n    (check-within (candidate (list 11 10 9 10 11)) 15 0.001)\n    (check-within (candidate (list 34 34 35 34 35 36 36)) 28 0.001)\n    (check-within (candidate (list 73 74 75 75)) 10 0.001)\n    (check-within (candidate (list 24 23 24 24)) 10 0.001)\n    (check-within (candidate (list 21 22 22 23 22 23 22 23 23 22)) 55 0.001)\n    (check-within (candidate (list 53 53 54 54 54)) 15 0.001)\n    (check-within (candidate (list 94 95 96 96 97 97 98 99)) 28 0.001)\n    (check-within (candidate (list 89 89 89 88 87 87)) 21 0.001)\n    (check-within (candidate (list 89 90)) 3 0.001)\n    (check-within (candidate (list 18 18)) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2869_maxNonDecreasingLength", "language": "rkt", "prompt": "#lang racket\n;; You are given two 0-indexed integer arrays nums1 and nums2 of length n.\n;; Let's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i].\n;; Your task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally.\n;; Return an integer representing the length of the longest non-decreasing subarray in nums3.\n;; Note: A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums1 = [2,3,1], nums2 = [1,2,1]\n;; Output: 2\n;; Explanation: One way to construct nums3 is:\n;; nums3 = [nums1[0], nums2[1], nums2[2]] => [2,2,1].\n;; The subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2.\n;; We can show that 2 is the maximum achievable length.\n;; Example 2:\n;; Input: nums1 = [1,3,2,1], nums2 = [2,2,3,4]\n;; Output: 4\n;; Explanation: One way to construct nums3 is:\n;; nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1,2,3,4].\n;; The entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.\n;; Example 3:\n;; Input: nums1 = [1,1], nums2 = [2,2]\n;; Output: 2\n;; Explanation: One way to construct nums3 is:\n;; nums3 = [nums1[0], nums1[1]] => [1,1].\n;; The entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.\n;; Constraints:\n;;  * 1 <= nums1.length == nums2.length == n <= 105\n;;  * 1 <= nums1[i], nums2[i] <= 109\n(define (maxNonDecreasingLength nums1 nums2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2869_maxNonDecreasingLength.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxNonDecreasingLength))\n    (check-within (candidate (list 2 3 1) (list 1 2 1)) 2 0.001)\n    (check-within (candidate (list 1 3 2 1) (list 2 2 3 4)) 4 0.001)\n    (check-within (candidate (list 1 1) (list 2 2)) 2 0.001)\n    (check-within (candidate (list 1) (list 1)) 1 0.001)\n    (check-within (candidate (list 1) (list 2)) 1 0.001)\n    (check-within (candidate (list 1 4) (list 4 19)) 2 0.001)\n    (check-within (candidate (list 1 8) (list 10 1)) 2 0.001)\n    (check-within (candidate (list 1 11) (list 9 1)) 2 0.001)\n    (check-within (candidate (list 1 13) (list 18 1)) 2 0.001)\n    (check-within (candidate (list 1 19) (list 12 20)) 2 0.001)\n    (check-within (candidate (list 1 19) (list 18 9)) 2 0.001)\n    (check-within (candidate (list 2 20) (list 1 18)) 2 0.001)\n    (check-within (candidate (list 3 5) (list 13 3)) 2 0.001)\n    (check-within (candidate (list 3 6) (list 10 12)) 2 0.001)\n    (check-within (candidate (list 3 7) (list 8 3)) 2 0.001)\n    (check-within (candidate (list 3 8) (list 15 2)) 2 0.001)\n    (check-within (candidate (list 3 9) (list 11 3)) 2 0.001)\n    (check-within (candidate (list 3 12) (list 7 3)) 2 0.001)\n    (check-within (candidate (list 3 12) (list 20 3)) 2 0.001)\n    (check-within (candidate (list 3 20) (list 5 17)) 2 0.001)\n    (check-within (candidate (list 4 2) (list 10 4)) 2 0.001)\n    (check-within (candidate (list 4 12) (list 6 4)) 2 0.001)\n    (check-within (candidate (list 4 15) (list 3 3)) 2 0.001)\n    (check-within (candidate (list 5 5) (list 19 8)) 2 0.001)\n    (check-within (candidate (list 5 7) (list 19 5)) 2 0.001)\n    (check-within (candidate (list 5 11) (list 2 5)) 2 0.001)\n    (check-within (candidate (list 5 14) (list 8 3)) 2 0.001)\n    (check-within (candidate (list 5 15) (list 16 5)) 2 0.001)\n    (check-within (candidate (list 5 20) (list 4 5)) 2 0.001)\n    (check-within (candidate (list 5 20) (list 10 17)) 2 0.001)\n    (check-within (candidate (list 6 7) (list 3 2)) 2 0.001)\n    (check-within (candidate (list 6 14) (list 5 5)) 2 0.001)\n    (check-within (candidate (list 6 14) (list 18 6)) 2 0.001)\n    (check-within (candidate (list 6 16) (list 16 20)) 2 0.001)\n    (check-within (candidate (list 6 17) (list 4 20)) 2 0.001)\n    (check-within (candidate (list 7 3) (list 16 7)) 2 0.001)\n    (check-within (candidate (list 7 4) (list 15 7)) 2 0.001)\n    (check-within (candidate (list 7 9) (list 3 18)) 2 0.001)\n    (check-within (candidate (list 7 10) (list 10 14)) 2 0.001)\n    (check-within (candidate (list 7 11) (list 5 7)) 2 0.001)\n    (check-within (candidate (list 7 12) (list 20 5)) 2 0.001)\n    (check-within (candidate (list 7 20) (list 12 8)) 2 0.001)\n    (check-within (candidate (list 8 5) (list 13 8)) 2 0.001)\n    (check-within (candidate (list 8 11) (list 9 3)) 2 0.001)\n    (check-within (candidate (list 8 16) (list 9 8)) 2 0.001)\n    (check-within (candidate (list 8 17) (list 2 8)) 2 0.001)\n    (check-within (candidate (list 8 18) (list 16 12)) 2 0.001)\n    (check-within (candidate (list 4 2) (list 10 4)) 2 0.001)\n    (check-within (candidate (list 9 1) (list 11 9)) 2 0.001)\n    (check-within (candidate (list 9 6) (list 8 14)) 2 0.001)\n    (check-within (candidate (list 9 9) (list 11 8)) 2 0.001)\n    (check-within (candidate (list 9 12) (list 20 9)) 2 0.001)\n    (check-within (candidate (list 9 15) (list 20 9)) 2 0.001)\n    (check-within (candidate (list 9 16) (list 11 15)) 2 0.001)\n    (check-within (candidate (list 9 19) (list 17 9)) 2 0.001)\n    (check-within (candidate (list 10 19) (list 17 10)) 2 0.001)\n    (check-within (candidate (list 11 1) (list 3 11)) 2 0.001)\n    (check-within (candidate (list 11 3) (list 9 17)) 2 0.001)\n    (check-within (candidate (list 11 6) (list 9 17)) 2 0.001)\n    (check-within (candidate (list 11 19) (list 17 11)) 2 0.001)\n    (check-within (candidate (list 11 69) (list 26 62)) 2 0.001)\n    (check-within (candidate (list 12 1) (list 10 12)) 2 0.001)\n    (check-within (candidate (list 12 10) (list 16 2)) 1 0.001)\n    (check-within (candidate (list 13 6) (list 20 13)) 2 0.001)\n    (check-within (candidate (list 13 16) (list 5 13)) 2 0.001)\n    (check-within (candidate (list 14 2) (list 2 14)) 2 0.001)\n    (check-within (candidate (list 14 4) (list 2 13)) 2 0.001)\n    (check-within (candidate (list 15 10) (list 17 15)) 2 0.001)\n    (check-within (candidate (list 15 11) (list 19 2)) 1 0.001)\n    (check-within (candidate (list 16 9) (list 5 16)) 2 0.001)\n    (check-within (candidate (list 16 17) (list 9 16)) 2 0.001)\n    (check-within (candidate (list 17 8) (list 11 10)) 1 0.001)\n    (check-within (candidate (list 17 10) (list 9 17)) 2 0.001)\n    (check-within (candidate (list 17 10) (list 18 7)) 1 0.001)\n    (check-within (candidate (list 17 11) (list 19 17)) 2 0.001)\n    (check-within (candidate (list 17 14) (list 17 17)) 2 0.001)\n    (check-within (candidate (list 17 17) (list 15 17)) 2 0.001)\n    (check-within (candidate (list 17 17) (list 16 1)) 2 0.001)\n    (check-within (candidate (list 18 4) (list 1 6)) 2 0.001)\n    (check-within (candidate (list 18 9) (list 10 18)) 2 0.001)\n    (check-within (candidate (list 18 9) (list 17 18)) 2 0.001)\n    (check-within (candidate (list 18 10) (list 1 18)) 2 0.001)\n    (check-within (candidate (list 18 104) (list 117 18)) 2 0.001)\n    (check-within (candidate (list 19 2) (list 1 19)) 2 0.001)\n    (check-within (candidate (list 19 5) (list 15 5)) 1 0.001)\n    (check-within (candidate (list 19 5) (list 52 10)) 1 0.001)\n    (check-within (candidate (list 19 15) (list 12 19)) 2 0.001)\n    (check-within (candidate (list 19 15) (list 18 4)) 1 0.001)\n    (check-within (candidate (list 20 1) (list 1 20)) 2 0.001)\n    (check-within (candidate (list 20 5) (list 2 3)) 2 0.001)\n    (check-within (candidate (list 20 5) (list 14 8)) 1 0.001)\n    (check-within (candidate (list 20 7) (list 12 20)) 2 0.001)\n    (check-within (candidate (list 20 12) (list 2 20)) 2 0.001)\n    (check-within (candidate (list 20 16) (list 8 5)) 2 0.001)\n    (check-within (candidate (list 20 18) (list 18 20)) 2 0.001)\n    (check-within (candidate (list 25 83) (list 28 18)) 2 0.001)\n    (check-within (candidate (list 26 47) (list 87 26)) 2 0.001)\n    (check-within (candidate (list 28 41) (list 87 3)) 2 0.001)\n    (check-within (candidate (list 36 53) (list 66 3)) 2 0.001)\n    (check-within (candidate (list 44 34) (list 53 44)) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2870_alternatingSubarray", "language": "rkt", "prompt": "#lang racket\n;;     You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\n;; * m is greater than 1.\n;; * s1 = s0 + 1.\n;; * The 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.\n;;     Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\n;;     A subarray is a contiguous non-empty sequence of elements within an array.\n;;     Example 1:\n;;     Input: nums = [2,3,4,3,4]\n;;     Output: 4\n;;     Explanation: The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.\n;;     Example 2:\n;;     Input: nums = [4,5,6]\n;;     Output: 2\n;;     Explanation: [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.\n;;     Constraints:\n;; * 2 <= nums.length <= 100\n;; * 1 <= nums[i] <= 104\n(define (alternatingSubarray nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2870_alternatingSubarray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate alternatingSubarray))\n    (check-within (candidate (list 2 3 4 3 4)) 4 0.001)\n    (check-within (candidate (list 4 5 6)) 2 0.001)\n    (check-within (candidate (list 31 32 31 32 33)) 4 0.001)\n    (check-within (candidate (list 21 9 5)) -1 0.001)\n    (check-within (candidate (list 42 43 44 43 44 43 44 45 46)) 6 0.001)\n    (check-within (candidate (list 13 14 15 14)) 3 0.001)\n    (check-within (candidate (list 74 75 74 75 74 75 74 75)) 8 0.001)\n    (check-within (candidate (list 77 78 79 78 79 78 79 78 79 80)) 8 0.001)\n    (check-within (candidate (list 88 42 53)) -1 0.001)\n    (check-within (candidate (list 64 65 64 65 64 65 66 65 66 65)) 6 0.001)\n    (check-within (candidate (list 99 100 99 100)) 4 0.001)\n    (check-within (candidate (list 21 22)) 2 0.001)\n    (check-within (candidate (list 23 24 23 24 25 24 25 24 25)) 6 0.001)\n    (check-within (candidate (list 20 9 15 15)) -1 0.001)\n    (check-within (candidate (list 92 93 92 93 92)) 5 0.001)\n    (check-within (candidate (list 24 25 26)) 2 0.001)\n    (check-within (candidate (list 51 52 53 52 53 52 53 54 53)) 6 0.001)\n    (check-within (candidate (list 65 66 65 66 67 68 69)) 4 0.001)\n    (check-within (candidate (list 29 2 5 24)) -1 0.001)\n    (check-within (candidate (list 26 27 26 27 28 27 28 27 28)) 6 0.001)\n    (check-within (candidate (list 21 22 21 22 21 22)) 6 0.001)\n    (check-within (candidate (list 94 95 94 95 94)) 5 0.001)\n    (check-within (candidate (list 82 83 84 83 84 83 84 83)) 7 0.001)\n    (check-within (candidate (list 14 30 29 49 3 23 44 21 26 52)) -1 0.001)\n    (check-within (candidate (list 4 5 4 5 6 5 6)) 4 0.001)\n    (check-within (candidate (list 62 63)) 2 0.001)\n    (check-within (candidate (list 24 25 26 25 26 25 26 25 26)) 8 0.001)\n    (check-within (candidate (list 55 56 55 56 55 56 55 56 57 56)) 8 0.001)\n    (check-within (candidate (list 52 77 42 21)) -1 0.001)\n    (check-within (candidate (list 80 81)) 2 0.001)\n    (check-within (candidate (list 50 51 50 51 50 51 50 51 50)) 9 0.001)\n    (check-within (candidate (list 83 84 83)) 3 0.001)\n    (check-within (candidate (list 17 18 17 18 19 18 19 20 19 20)) 4 0.001)\n    (check-within (candidate (list 5 14 8 12 5 4)) -1 0.001)\n    (check-within (candidate (list 35 36 35 36 35 36 35 36 35 36)) 10 0.001)\n    (check-within (candidate (list 8 9 8 9 8 9)) 6 0.001)\n    (check-within (candidate (list 59 60)) 2 0.001)\n    (check-within (candidate (list 55 56 55)) 3 0.001)\n    (check-within (candidate (list 47 46 65 37 24 54 39 70)) -1 0.001)\n    (check-within (candidate (list 45 46 45 46 45 46 45)) 7 0.001)\n    (check-within (candidate (list 78 79 78 79 78 79 78 79 80 79)) 8 0.001)\n    (check-within (candidate (list 65 66 65 66 65 66 67 68)) 6 0.001)\n    (check-within (candidate (list 62 63 62 63 62 63)) 6 0.001)\n    (check-within (candidate (list 7 10 5 2 11 3 9 12 9 11)) -1 0.001)\n    (check-within (candidate (list 79 80 79 80 79 80)) 6 0.001)\n    (check-within (candidate (list 19 20 21 20 21 22)) 4 0.001)\n    (check-within (candidate (list 84 85 86 85 86 85 86 87 88 87)) 6 0.001)\n    (check-within (candidate (list 54 55)) 2 0.001)\n    (check-within (candidate (list 71 14 24 13 21 14 18 84 37 2)) -1 0.001)\n    (check-within (candidate (list 26 27 26)) 3 0.001)\n    (check-within (candidate (list 53 54 53 54 53)) 5 0.001)\n    (check-within (candidate (list 67 68 67 68 67 68 69 70 69 70)) 6 0.001)\n    (check-within (candidate (list 85 86 85 86 85 86 85 86 85 86)) 10 0.001)\n    (check-within (candidate (list 22 16 27 22 44 10)) -1 0.001)\n    (check-within (candidate (list 27 28 27 28 27 28 27 28 29 28)) 8 0.001)\n    (check-within (candidate (list 54 55 54 55 54 55 54 55 56 57)) 8 0.001)\n    (check-within (candidate (list 24 25 26 27 28)) 2 0.001)\n    (check-within (candidate (list 55 56)) 2 0.001)\n    (check-within (candidate (list 13 6 6 8 12 7 1)) -1 0.001)\n    (check-within (candidate (list 40 41 40 41 40 41 40 41)) 8 0.001)\n    (check-within (candidate (list 10 11 10 11 10 11 12)) 6 0.001)\n    (check-within (candidate (list 58 59 58 59)) 4 0.001)\n    (check-within (candidate (list 1 15 44 74 56 41 48 71)) -1 0.001)\n    (check-within (candidate (list 89 90 89 90 89 90)) 6 0.001)\n    (check-within (candidate (list 4 5 4 5 4 5 6)) 6 0.001)\n    (check-within (candidate (list 50 51 52 53 52 53)) 4 0.001)\n    (check-within (candidate (list 44 45 46 45 46 45 46 47 48)) 6 0.001)\n    (check-within (candidate (list 16 3 25 12 2 19 1 26)) -1 0.001)\n    (check-within (candidate (list 17 18 19 20 19 20)) 4 0.001)\n    (check-within (candidate (list 91 92 93 92 93)) 4 0.001)\n    (check-within (candidate (list 28 29 28 29 28 29 30)) 6 0.001)\n    (check-within (candidate (list 88 89 88 89 88 89)) 6 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1)) -1 0.001)\n    (check-within (candidate (list 32 33 32 33 32 33 34)) 6 0.001)\n    (check-within (candidate (list 61 62 61 62 63 62 63 64 63)) 4 0.001)\n    (check-within (candidate (list 6 7 6 7)) 4 0.001)\n    (check-within (candidate (list 20 21 20 21 20)) 5 0.001)\n    (check-within (candidate (list 14 6 21)) -1 0.001)\n    (check-within (candidate (list 12 13 12 13 12 13 12 13 12)) 9 0.001)\n    (check-within (candidate (list 33 34 33 34 33 34 33)) 7 0.001)\n    (check-within (candidate (list 92 93 92)) 3 0.001)\n    (check-within (candidate (list 93 94 95 94 95 96 95 96 97)) 4 0.001)\n    (check-within (candidate (list 8 4 27)) -1 0.001)\n    (check-within (candidate (list 30 31 32 31 32 33 34 33)) 4 0.001)\n    (check-within (candidate (list 26 27 26 27 26 27)) 6 0.001)\n    (check-within (candidate (list 67 68 69)) 2 0.001)\n    (check-within (candidate (list 83 84 85 84 85)) 4 0.001)\n    (check-within (candidate (list 6 26 4 2)) -1 0.001)\n    (check-within (candidate (list 81 82 81 82 81 82 81 82 83)) 8 0.001)\n    (check-within (candidate (list 58 59)) 2 0.001)\n    (check-within (candidate (list 82 83 82 83 82 83 82 83 82)) 9 0.001)\n    (check-within (candidate (list 48 49)) 2 0.001)\n    (check-within (candidate (list 8 6 2)) -1 0.001)\n    (check-within (candidate (list 69 70 69 70 69 70 69 70 69)) 9 0.001)\n    (check-within (candidate (list 28 29 28 29)) 4 0.001)\n    (check-within (candidate (list 82 83 82 83 84)) 4 0.001)\n    (check-within (candidate (list 97 98 97 98 97 98 97)) 7 0.001)\n    (check-within (candidate (list 2 2 1)) -1 0.001)\n    (check-within (candidate (list 84 85 84 85 84 85 84)) 7 0.001)\n    (check-within (candidate (list 21 22 21 22)) 4 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2872_maxArrayValue", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums consisting of positive integers.\n;; You can do the following operation on the array any number of times:\n;;  * Choose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array.\n;; Return the value of the largest element that you can possibly obtain in the final array.\n;; Example 1:\n;; Input: nums = [2,3,7,9,3]\n;; Output: 21\n;; Explanation: We can apply the following operations on the array:\n;; - Choose i = 0. The resulting array will be nums = [5,7,9,3].\n;; - Choose i = 1. The resulting array will be nums = [5,16,3].\n;; - Choose i = 0. The resulting array will be nums = [21,3].\n;; The largest element in the final array is 21. It can be shown that we cannot obtain a larger element.\n;; Example 2:\n;; Input: nums = [5,3,3]\n;; Output: 11\n;; Explanation: We can do the following operations on the array:\n;; - Choose i = 1. The resulting array will be nums = [5,6].\n;; - Choose i = 0. The resulting array will be nums = [11].\n;; There is only one element in the final array, which is 11.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 106\n(define (maxArrayValue nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2872_maxArrayValue.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxArrayValue))\n    (check-within (candidate (list 2 3 7 9 3)) 21 0.001)\n    (check-within (candidate (list 5 3 3)) 11 0.001)\n    (check-within (candidate (list 77)) 77 0.001)\n    (check-within (candidate (list 34 95 50 12 25 100 21 3 25 16 76 73 93 46 18)) 623 0.001)\n    (check-within (candidate (list 40 15 35 98 77 79 24 62 53 84 97 16 30 22 49)) 781 0.001)\n    (check-within (candidate (list 64 35 42 19 95 8 83 89 33 21 97 11 51 93 36 34 67 53)) 878 0.001)\n    (check-within (candidate (list 65 68 55 6 79 30 81 25 61 2 28 59 63 15 35 8 10 83)) 773 0.001)\n    (check-within (candidate (list 56)) 56 0.001)\n    (check-within (candidate (list 100)) 100 0.001)\n    (check-within (candidate (list 35 23 71 38)) 129 0.001)\n    (check-within (candidate (list 56 67 18 81 95 41 39 56 63 70 56 31 84 46 28 38 27 56 13 10 58 16 85 21 63 8)) 1134 0.001)\n    (check-within (candidate (list 72 72)) 144 0.001)\n    (check-within (candidate (list 16 31 55)) 102 0.001)\n    (check-within (candidate (list 6 65 68 7 35 19 28)) 228 0.001)\n    (check-within (candidate (list 38 37 88 60 93 4 5 65 74 25 59 28 86 33 28 33 93)) 849 0.001)\n    (check-within (candidate (list 29 9 3 55 25 38 88 39 38 73 47 57 40 56 4 52 1 44 88 20 18 8)) 786 0.001)\n    (check-within (candidate (list 34 92 42 24 98 87 40 82 51 67 70 75 45 57 67)) 931 0.001)\n    (check-within (candidate (list 31 75 44 92 13 10 3 41 47 89 5 92 17 62 65 40 43 68 30 45 85 24 40 77 80 65)) 1218 0.001)\n    (check-within (candidate (list 63 58 61 58 82 48 83 24 24 61 31 16 26 50)) 685 0.001)\n    (check-within (candidate (list 10 82 74 54 20 43 74 95 17 28 44 74 25 19 75 2 84 99)) 919 0.001)\n    (check-within (candidate (list 91 32 21 55 44 29 82 75 66 29 77 62 55 94 49 80 12 46 80 64 88 51 2 24 11 10 86 39 16)) 1415 0.001)\n    (check-within (candidate (list 18 16 56 64 82 25 16 2 19)) 236 0.001)\n    (check-within (candidate (list 29 79 47 55 13 47 48 91 29 28 34 85 98 44 93 56 24 77 61)) 977 0.001)\n    (check-within (candidate (list 74 8 1 57 25 62)) 227 0.001)\n    (check-within (candidate (list 25 36 55 32 15 16 73 67 82 23 17 29 78 34 4 91 1 1 55 65)) 799 0.001)\n    (check-within (candidate (list 6 36 69 97 86 44 27 46)) 411 0.001)\n    (check-within (candidate (list 18 36 100 34 31 89 96 6 73 10 82 20 26 13 24 51 87 70 63 36)) 796 0.001)\n    (check-within (candidate (list 86 57 57 56 38 97 82 48 33 55 19 21 57 85 11 11 71 94 61 41 1 78 39 45)) 1243 0.001)\n    (check-within (candidate (list 33 9 11 6 68 43 76 40 91)) 377 0.001)\n    (check-within (candidate (list 89 45 50 98 23 79 10 98 69 65 47 46 95)) 814 0.001)\n    (check-within (candidate (list 58 95)) 153 0.001)\n    (check-within (candidate (list 91 50)) 91 0.001)\n    (check-within (candidate (list 99 82 49 52 5 69 65 94 94 57 46 26 28 84 42 61 19 87 71 66 1 72)) 1269 0.001)\n    (check-within (candidate (list 75 75 93 44 16 27 43 71 65 90 100 97 39 100 55 15 10 7 25 23 47)) 1117 0.001)\n    (check-within (candidate (list 65)) 65 0.001)\n    (check-within (candidate (list 50)) 50 0.001)\n    (check-within (candidate (list 56 8 10 87 83 79 33 72 32 59 75 2 46 9)) 594 0.001)\n    (check-within (candidate (list 26 77 78 94 90 90 57 100 60 1 98 85 78 77 63 30 88 60 41 55)) 1348 0.001)\n    (check-within (candidate (list 65 53 93 76 75 18 32 88 4)) 500 0.001)\n    (check-within (candidate (list 24 89 92 48 81 49 83 4 53 39 48 10 53 51 41 23 83 8 53 91 43 58 82)) 1206 0.001)\n    (check-within (candidate (list 59 17 33)) 59 0.001)\n    (check-within (candidate (list 15 35 97 93 34 34 90 2 21)) 398 0.001)\n    (check-within (candidate (list 87 64 21 27 41 63 28 75 64 22 30 76 77 91 84 81 99 86 1 74 46 4 7)) 1030 0.001)\n    (check-within (candidate (list 89 49 59 59 2 77 55 44 51 47 100 77 30 71 47 100 13 17 12 38 26 55 89 41)) 1207 0.001)\n    (check-within (candidate (list 71 4 53 51 9 92 91 86 84 58 31 39 38 49 56 27 91 17 10 56 52 78 35 76 39)) 1254 0.001)\n    (check-within (candidate (list 9 46 6 42 81 7 61 88 37 15 20 67)) 479 0.001)\n    (check-within (candidate (list 50 64 31 70 46 30 41 69 80 45 73 4 100 88 7 3 59)) 703 0.001)\n    (check-within (candidate (list 20 41 58 61 79 7 58 42 89 39)) 455 0.001)\n    (check-within (candidate (list 68 86 34 99 4 6 24 88 26 83 2 33 37 79 30 60 56 44 53 4 86 60 13 81 95 28 83 24)) 1362 0.001)\n    (check-within (candidate (list 5 61 59 13 21 90 32 93 84 16 71 78 53 90 5 50 47 85 83 72 88 20 97 28 73 75 59 34 21)) 1489 0.001)\n    (check-within (candidate (list 99 57 14 77 78 88 47 12 45 72 70 73 75 35 50 88 26 38 77 23 86 27 9 16)) 1230 0.001)\n    (check-within (candidate (list 68 65 95 53 51 26 2 3 17 26 15 37 50 79 20 71 99 72 82 37 29 34 74 93)) 1198 0.001)\n    (check-within (candidate (list 68 21 61 74 38 91 99 32 98 12 52)) 582 0.001)\n    (check-within (candidate (list 98 95 15 53 31 15 9 24 59)) 399 0.001)\n    (check-within (candidate (list 51 18 21 99 6 55 41 20 74 43 98 41 58 29 75 16 8 83 23 79 73 68 95 10 67)) 1174 0.001)\n    (check-within (candidate (list 78 91 52 92 42 53 77 88 40 33 86 70 85 50 65 43 75 60 28 97 95 95)) 1495 0.001)\n    (check-within (candidate (list 99 6)) 99 0.001)\n    (check-within (candidate (list 59 50 38 100 42 42 99 7)) 430 0.001)\n    (check-within (candidate (list 35 23 73 45 29 94 1 18 46 7 52 6 47 47 19 93 48 70 85 98 50 89 23)) 1075 0.001)\n    (check-within (candidate (list 2 55 19 10 28 45 86 31 45 32 38 95 65 23 50 39 51 24 40 15 16)) 778 0.001)\n    (check-within (candidate (list 31 59 12 90 39)) 192 0.001)\n    (check-within (candidate (list 53 87 11 58 79 42 44 24 68 61)) 466 0.001)\n    (check-within (candidate (list 20 45)) 65 0.001)\n    (check-within (candidate (list 85 36 99 11 91 88 55 25 68 88 27 98 7 14 40 27 18 51 90 21 77 12 87 11 37 80 70)) 1343 0.001)\n    (check-within (candidate (list 43 50 40 92 31 2 92)) 350 0.001)\n    (check-within (candidate (list 79 90 32 30 33 18 55 96)) 433 0.001)\n    (check-within (candidate (list 65 15 18 94 96 22 37 19 23 11 27 94 5 99)) 625 0.001)\n    (check-within (candidate (list 74 26 11 96 49 19 25 77 47 31 87 96 19 40 95 91 48 79 33 96)) 1139 0.001)\n    (check-within (candidate (list 17 90 66)) 107 0.001)\n    (check-within (candidate (list 60 11 95 75 10 64 62 20)) 166 0.001)\n    (check-within (candidate (list 99 6 67 44 84 29 87 13 44 12 92 53 26 47 88 44 75 33 19)) 910 0.001)\n    (check-within (candidate (list 69 21 11 10 42 3 38 36 50 28 25 93 37 45 73 37 97)) 715 0.001)\n    (check-within (candidate (list 32 76 65 61 84 11 94 96 17 14 79 15 62)) 629 0.001)\n    (check-within (candidate (list 59 91 27 74 57 30 51 67 88 26 89 10 70 31 32 26 42)) 870 0.001)\n    (check-within (candidate (list 8 73 22 37 39 1 66 59 5 20 16 68 55 50 48 6 8 46 93 76 48 14 92)) 950 0.001)\n    (check-within (candidate (list 58 34 72 5 33 34 68 96 63 85 84 74 87 33 75 43 36 28 62 44 95 39 2)) 1209 0.001)\n    (check-within (candidate (list 49 88 44 17 36 65 94 92 75 23 67 55 68 80 95 11 68 66 77 66 3 32 16 81 34 20 56 87 87 29)) 1652 0.001)\n    (check-within (candidate (list 94 27 5 47)) 94 0.001)\n    (check-within (candidate (list 83 85 59 55)) 168 0.001)\n    (check-within (candidate (list 72 56 30 65 94 91 12 99 9)) 519 0.001)\n    (check-within (candidate (list 9 99 20 61 57 88 50 36 21 100 62 98 94 81 96 3 98 37 88)) 1198 0.001)\n    (check-within (candidate (list 45 18 13 66 54 45 64 70 94 67 26 48 84 57 81 85 35 17 20 84 78 24 63 9)) 1238 0.001)\n    (check-within (candidate (list 5 38 82 83 92 97)) 397 0.001)\n    (check-within (candidate (list 95 15 19 26 59 58)) 214 0.001)\n    (check-within (candidate (list 94 75 16 33 2 70 56 4 64)) 414 0.001)\n    (check-within (candidate (list 64 50 26 66)) 206 0.001)\n    (check-within (candidate (list 3 48 11 71 57 72 83 61 59 25 36 29 11 69 75 48 44 44)) 846 0.001)\n    (check-within (candidate (list 88 7 38 15 43 8 87 7 25 2 51 29 74 34 84 87 83 34 74 22 45 96 71 4 23 28 27 68 61)) 1254 0.001)\n    (check-within (candidate (list 30 58 2 20 54)) 164 0.001)\n    (check-within (candidate (list 17 34 71 23 88 84 35 49 89 39 33 13 87 49 48 97)) 856 0.001)\n    (check-within (candidate (list 50 67 98 47 18 91 80 3 19 74 40 89 85 99 95 81 72 96 56 15 48 93 64)) 1416 0.001)\n    (check-within (candidate (list 58 10 99 6 16 94 45 47 4 30 58)) 467 0.001)\n    (check-within (candidate (list 92 58 90 38 37 95 47 82 6 86 99 9 91 80 73 54 45)) 830 0.001)\n    (check-within (candidate (list 31 100 59 88 81 74 49 21 31 53 9 89 67 4 84 46 41)) 840 0.001)\n    (check-within (candidate (list 25 3 94 55 70 23 43 8 65 34 83 60 53 62 97 55 3 10)) 775 0.001)\n    (check-within (candidate (list 27 53 99 55 15 59 85 40 46 45 45 71 42 67)) 749 0.001)\n    (check-within (candidate (list 8 62 12 10 79 36 59 73 76 24 45 98 72 83 61 6 19 49)) 872 0.001)\n    (check-within (candidate (list 2 24 30 18 94 26 22 60 50 3 27 31)) 387 0.001)\n    (check-within (candidate (list 64 17 57 72 24 88 29 2 23 82 15 69 80 93 38 47 9 10 68 89 65 16)) 976 0.001)\n    (check-within (candidate (list 99 58 59 5 67 15 6 91 71 75 79 59 40 1 18 49 48 75 92 72 81 43 31 31 29 94 39)) 1388 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2873_findPrimePairs", "language": "rkt", "prompt": "#lang racket\n;;     You are given an integer n. We say that two integers x and y form a prime number pair if:\n;; * 1 <= x <= y <= n\n;; * x + y == n\n;; * x and y are prime numbers\n;;     Return the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array.\n;;     Note: A prime number is a natural number greater than 1 with only two factors, itself and 1.\n;;     Example 1:\n;;     Input: n = 10\n;;     Output: [[3,7],[5,5]]\n;;     Explanation: In this example, there are two prime pairs that satisfy the criteria.\n;;     These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.\n;;     Example 2:\n;;     Input: n = 2\n;;     Output: []\n;;     Explanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array.\n;;     Constraints:\n;; * 1 <= n <= 106\n(define (findPrimePairs n)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2873_findPrimePairs.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findPrimePairs))\n    (check-within (candidate 10) (list (list 3 7) (list 5 5)) 0.001)\n    (check-within (candidate 2) (list ) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 3) (list ) 0.001)\n    (check-within (candidate 4) (list (list 2 2)) 0.001)\n    (check-within (candidate 5) (list (list 2 3)) 0.001)\n    (check-within (candidate 6) (list (list 3 3)) 0.001)\n    (check-within (candidate 7) (list (list 2 5)) 0.001)\n    (check-within (candidate 8) (list (list 3 5)) 0.001)\n    (check-within (candidate 9) (list (list 2 7)) 0.001)\n    (check-within (candidate 11) (list ) 0.001)\n    (check-within (candidate 12) (list (list 5 7)) 0.001)\n    (check-within (candidate 13) (list (list 2 11)) 0.001)\n    (check-within (candidate 14) (list (list 3 11) (list 7 7)) 0.001)\n    (check-within (candidate 15) (list (list 2 13)) 0.001)\n    (check-within (candidate 16) (list (list 3 13) (list 5 11)) 0.001)\n    (check-within (candidate 17) (list ) 0.001)\n    (check-within (candidate 18) (list (list 5 13) (list 7 11)) 0.001)\n    (check-within (candidate 19) (list (list 2 17)) 0.001)\n    (check-within (candidate 20) (list (list 3 17) (list 7 13)) 0.001)\n    (check-within (candidate 21) (list (list 2 19)) 0.001)\n    (check-within (candidate 22) (list (list 3 19) (list 5 17) (list 11 11)) 0.001)\n    (check-within (candidate 23) (list ) 0.001)\n    (check-within (candidate 24) (list (list 5 19) (list 7 17) (list 11 13)) 0.001)\n    (check-within (candidate 25) (list (list 2 23)) 0.001)\n    (check-within (candidate 26) (list (list 3 23) (list 7 19) (list 13 13)) 0.001)\n    (check-within (candidate 27) (list ) 0.001)\n    (check-within (candidate 28) (list (list 5 23) (list 11 17)) 0.001)\n    (check-within (candidate 29) (list ) 0.001)\n    (check-within (candidate 30) (list (list 7 23) (list 11 19) (list 13 17)) 0.001)\n    (check-within (candidate 31) (list (list 2 29)) 0.001)\n    (check-within (candidate 32) (list (list 3 29) (list 13 19)) 0.001)\n    (check-within (candidate 33) (list (list 2 31)) 0.001)\n    (check-within (candidate 34) (list (list 3 31) (list 5 29) (list 11 23) (list 17 17)) 0.001)\n    (check-within (candidate 35) (list ) 0.001)\n    (check-within (candidate 36) (list (list 5 31) (list 7 29) (list 13 23) (list 17 19)) 0.001)\n    (check-within (candidate 37) (list ) 0.001)\n    (check-within (candidate 38) (list (list 7 31) (list 19 19)) 0.001)\n    (check-within (candidate 39) (list (list 2 37)) 0.001)\n    (check-within (candidate 40) (list (list 3 37) (list 11 29) (list 17 23)) 0.001)\n    (check-within (candidate 41) (list ) 0.001)\n    (check-within (candidate 42) (list (list 5 37) (list 11 31) (list 13 29) (list 19 23)) 0.001)\n    (check-within (candidate 43) (list (list 2 41)) 0.001)\n    (check-within (candidate 44) (list (list 3 41) (list 7 37) (list 13 31)) 0.001)\n    (check-within (candidate 45) (list (list 2 43)) 0.001)\n    (check-within (candidate 46) (list (list 3 43) (list 5 41) (list 17 29) (list 23 23)) 0.001)\n    (check-within (candidate 47) (list ) 0.001)\n    (check-within (candidate 48) (list (list 5 43) (list 7 41) (list 11 37) (list 17 31) (list 19 29)) 0.001)\n    (check-within (candidate 49) (list (list 2 47)) 0.001)\n    (check-within (candidate 50) (list (list 3 47) (list 7 43) (list 13 37) (list 19 31)) 0.001)\n    (check-within (candidate 51) (list ) 0.001)\n    (check-within (candidate 52) (list (list 5 47) (list 11 41) (list 23 29)) 0.001)\n    (check-within (candidate 53) (list ) 0.001)\n    (check-within (candidate 54) (list (list 7 47) (list 11 43) (list 13 41) (list 17 37) (list 23 31)) 0.001)\n    (check-within (candidate 55) (list (list 2 53)) 0.001)\n    (check-within (candidate 56) (list (list 3 53) (list 13 43) (list 19 37)) 0.001)\n    (check-within (candidate 57) (list ) 0.001)\n    (check-within (candidate 58) (list (list 5 53) (list 11 47) (list 17 41) (list 29 29)) 0.001)\n    (check-within (candidate 59) (list ) 0.001)\n    (check-within (candidate 60) (list (list 7 53) (list 13 47) (list 17 43) (list 19 41) (list 23 37) (list 29 31)) 0.001)\n    (check-within (candidate 61) (list (list 2 59)) 0.001)\n    (check-within (candidate 62) (list (list 3 59) (list 19 43) (list 31 31)) 0.001)\n    (check-within (candidate 63) (list (list 2 61)) 0.001)\n    (check-within (candidate 64) (list (list 3 61) (list 5 59) (list 11 53) (list 17 47) (list 23 41)) 0.001)\n    (check-within (candidate 65) (list ) 0.001)\n    (check-within (candidate 66) (list (list 5 61) (list 7 59) (list 13 53) (list 19 47) (list 23 43) (list 29 37)) 0.001)\n    (check-within (candidate 67) (list ) 0.001)\n    (check-within (candidate 68) (list (list 7 61) (list 31 37)) 0.001)\n    (check-within (candidate 69) (list (list 2 67)) 0.001)\n    (check-within (candidate 70) (list (list 3 67) (list 11 59) (list 17 53) (list 23 47) (list 29 41)) 0.001)\n    (check-within (candidate 71) (list ) 0.001)\n    (check-within (candidate 72) (list (list 5 67) (list 11 61) (list 13 59) (list 19 53) (list 29 43) (list 31 41)) 0.001)\n    (check-within (candidate 73) (list (list 2 71)) 0.001)\n    (check-within (candidate 74) (list (list 3 71) (list 7 67) (list 13 61) (list 31 43) (list 37 37)) 0.001)\n    (check-within (candidate 75) (list (list 2 73)) 0.001)\n    (check-within (candidate 76) (list (list 3 73) (list 5 71) (list 17 59) (list 23 53) (list 29 47)) 0.001)\n    (check-within (candidate 77) (list ) 0.001)\n    (check-within (candidate 78) (list (list 5 73) (list 7 71) (list 11 67) (list 17 61) (list 19 59) (list 31 47) (list 37 41)) 0.001)\n    (check-within (candidate 79) (list ) 0.001)\n    (check-within (candidate 80) (list (list 7 73) (list 13 67) (list 19 61) (list 37 43)) 0.001)\n    (check-within (candidate 81) (list (list 2 79)) 0.001)\n    (check-within (candidate 82) (list (list 3 79) (list 11 71) (list 23 59) (list 29 53) (list 41 41)) 0.001)\n    (check-within (candidate 83) (list ) 0.001)\n    (check-within (candidate 84) (list (list 5 79) (list 11 73) (list 13 71) (list 17 67) (list 23 61) (list 31 53) (list 37 47) (list 41 43)) 0.001)\n    (check-within (candidate 85) (list (list 2 83)) 0.001)\n    (check-within (candidate 86) (list (list 3 83) (list 7 79) (list 13 73) (list 19 67) (list 43 43)) 0.001)\n    (check-within (candidate 87) (list ) 0.001)\n    (check-within (candidate 88) (list (list 5 83) (list 17 71) (list 29 59) (list 41 47)) 0.001)\n    (check-within (candidate 89) (list ) 0.001)\n    (check-within (candidate 90) (list (list 7 83) (list 11 79) (list 17 73) (list 19 71) (list 23 67) (list 29 61) (list 31 59) (list 37 53) (list 43 47)) 0.001)\n    (check-within (candidate 91) (list (list 2 89)) 0.001)\n    (check-within (candidate 92) (list (list 3 89) (list 13 79) (list 19 73) (list 31 61)) 0.001)\n    (check-within (candidate 93) (list ) 0.001)\n    (check-within (candidate 94) (list (list 5 89) (list 11 83) (list 23 71) (list 41 53) (list 47 47)) 0.001)\n    (check-within (candidate 95) (list ) 0.001)\n    (check-within (candidate 96) (list (list 7 89) (list 13 83) (list 17 79) (list 23 73) (list 29 67) (list 37 59) (list 43 53)) 0.001)\n    (check-within (candidate 97) (list ) 0.001)\n    (check-within (candidate 98) (list (list 19 79) (list 31 67) (list 37 61)) 0.001)\n    (check-within (candidate 99) (list (list 2 97)) 0.001)\n    (check-within (candidate 100) (list (list 3 97) (list 11 89) (list 17 83) (list 29 71) (list 41 59) (list 47 53)) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2876_numberOfEmployeesWhoMetTarget", "language": "rkt", "prompt": "#lang racket\n;; There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\n;; The company requires each employee to work for at least target hours.\n;; You are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\n;; Return the integer denoting the number of employees who worked at least target hours.\n;; Example 1:\n;; Input: hours = [0,1,2,3,4], target = 2\n;; Output: 3\n;; Explanation: The company wants each employee to work for at least 2 hours.\n;; - Employee 0 worked for 0 hours and didn't meet the target.\n;; - Employee 1 worked for 1 hours and didn't meet the target.\n;; - Employee 2 worked for 2 hours and met the target.\n;; - Employee 3 worked for 3 hours and met the target.\n;; - Employee 4 worked for 4 hours and met the target.\n;; There are 3 employees who met the target.\n;; Example 2:\n;; Input: hours = [5,1,4,2,2], target = 6\n;; Output: 0\n;; Explanation: The company wants each employee to work for at least 6 hours.\n;; There are 0 employees who met the target.\n;; Constraints:\n;;  * 1 <= n == hours.length <= 50\n;;  * 0 <=\u00a0hours[i], target <= 105\n(define (numberOfEmployeesWhoMetTarget hours target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2876_numberOfEmployeesWhoMetTarget.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfEmployeesWhoMetTarget))\n    (check-within (candidate (list 0 1 2 3 4) 2) 3 0.001)\n    (check-within (candidate (list 5 1 4 2 2) 6) 0 0.001)\n    (check-within (candidate (list 98) 5) 1 0.001)\n    (check-within (candidate (list 19) 13) 1 0.001)\n    (check-within (candidate (list 70) 13) 1 0.001)\n    (check-within (candidate (list 26) 14) 1 0.001)\n    (check-within (candidate (list 2) 16) 0 0.001)\n    (check-within (candidate (list 77) 19) 1 0.001)\n    (check-within (candidate (list 6) 21) 0 0.001)\n    (check-within (candidate (list 27) 21) 1 0.001)\n    (check-within (candidate (list 36) 22) 1 0.001)\n    (check-within (candidate (list 42) 25) 1 0.001)\n    (check-within (candidate (list 70) 27) 1 0.001)\n    (check-within (candidate (list 2) 28) 0 0.001)\n    (check-within (candidate (list 14) 31) 0 0.001)\n    (check-within (candidate (list 45) 34) 1 0.001)\n    (check-within (candidate (list 44) 35) 1 0.001)\n    (check-within (candidate (list 11) 39) 0 0.001)\n    (check-within (candidate (list 71) 39) 1 0.001)\n    (check-within (candidate (list 91) 45) 1 0.001)\n    (check-within (candidate (list 81) 51) 1 0.001)\n    (check-within (candidate (list 15) 52) 0 0.001)\n    (check-within (candidate (list 90) 59) 1 0.001)\n    (check-within (candidate (list 40) 64) 0 0.001)\n    (check-within (candidate (list 12) 69) 0 0.001)\n    (check-within (candidate (list 83) 70) 1 0.001)\n    (check-within (candidate (list 38) 74) 0 0.001)\n    (check-within (candidate (list 18) 78) 0 0.001)\n    (check-within (candidate (list 60) 83) 0 0.001)\n    (check-within (candidate (list 50) 87) 0 0.001)\n    (check-within (candidate (list 75) 92) 0 0.001)\n    (check-within (candidate (list 91) 96) 0 0.001)\n    (check-within (candidate (list 11) 97) 0 0.001)\n    (check-within (candidate (list 48 28) 2) 2 0.001)\n    (check-within (candidate (list 38 46) 3) 2 0.001)\n    (check-within (candidate (list 30 79) 6) 2 0.001)\n    (check-within (candidate (list 45 78) 6) 2 0.001)\n    (check-within (candidate (list 20 69) 10) 2 0.001)\n    (check-within (candidate (list 82 67) 11) 2 0.001)\n    (check-within (candidate (list 29 75) 12) 2 0.001)\n    (check-within (candidate (list 97 37) 17) 2 0.001)\n    (check-within (candidate (list 42 100) 20) 2 0.001)\n    (check-within (candidate (list 11 58) 21) 1 0.001)\n    (check-within (candidate (list 12 46) 21) 1 0.001)\n    (check-within (candidate (list 70 84) 37) 2 0.001)\n    (check-within (candidate (list 7 100) 38) 1 0.001)\n    (check-within (candidate (list 47 94) 40) 2 0.001)\n    (check-within (candidate (list 18 34) 50) 0 0.001)\n    (check-within (candidate (list 47 79) 55) 1 0.001)\n    (check-within (candidate (list 74 99) 56) 2 0.001)\n    (check-within (candidate (list 53 81) 67) 1 0.001)\n    (check-within (candidate (list 36 61) 68) 0 0.001)\n    (check-within (candidate (list 48 98) 71) 1 0.001)\n    (check-within (candidate (list 71 94) 72) 1 0.001)\n    (check-within (candidate (list 60 99) 73) 1 0.001)\n    (check-within (candidate (list 12 12) 74) 0 0.001)\n    (check-within (candidate (list 100 87) 75) 2 0.001)\n    (check-within (candidate (list 12 56) 77) 0 0.001)\n    (check-within (candidate (list 15 36) 86) 0 0.001)\n    (check-within (candidate (list 53 45) 86) 0 0.001)\n    (check-within (candidate (list 4 77) 89) 0 0.001)\n    (check-within (candidate (list 23 29) 93) 0 0.001)\n    (check-within (candidate (list 76 62 96) 5) 3 0.001)\n    (check-within (candidate (list 82 67 33) 5) 3 0.001)\n    (check-within (candidate (list 28 96 39) 10) 3 0.001)\n    (check-within (candidate (list 42 93 58) 13) 3 0.001)\n    (check-within (candidate (list 53 22 48) 13) 3 0.001)\n    (check-within (candidate (list 68 81 61) 13) 3 0.001)\n    (check-within (candidate (list 68 32 33) 22) 3 0.001)\n    (check-within (candidate (list 59 65 70) 26) 3 0.001)\n    (check-within (candidate (list 15 43 21) 29) 1 0.001)\n    (check-within (candidate (list 40 80 75) 33) 3 0.001)\n    (check-within (candidate (list 64 11 73) 34) 2 0.001)\n    (check-within (candidate (list 1 74 34) 44) 1 0.001)\n    (check-within (candidate (list 96 79 91) 44) 3 0.001)\n    (check-within (candidate (list 59 9 9) 48) 1 0.001)\n    (check-within (candidate (list 79 48 62) 53) 2 0.001)\n    (check-within (candidate (list 58 83 2) 54) 2 0.001)\n    (check-within (candidate (list 51 40 12) 57) 0 0.001)\n    (check-within (candidate (list 54 2 80) 60) 1 0.001)\n    (check-within (candidate (list 92 45 91) 65) 2 0.001)\n    (check-within (candidate (list 93 23 46) 67) 1 0.001)\n    (check-within (candidate (list 17 60 1) 70) 0 0.001)\n    (check-within (candidate (list 9 63 77) 73) 1 0.001)\n    (check-within (candidate (list 44 86 37) 73) 1 0.001)\n    (check-within (candidate (list 75 37 68) 73) 1 0.001)\n    (check-within (candidate (list 33 26 77) 78) 0 0.001)\n    (check-within (candidate (list 11 88 27) 79) 1 0.001)\n    (check-within (candidate (list 12 48 44) 80) 0 0.001)\n    (check-within (candidate (list 19 88 13) 82) 1 0.001)\n    (check-within (candidate (list 61 56 67) 82) 0 0.001)\n    (check-within (candidate (list 46 24 38) 84) 0 0.001)\n    (check-within (candidate (list 93 51 83) 85) 1 0.001)\n    (check-within (candidate (list 58 14 83) 87) 0 0.001)\n    (check-within (candidate (list 52 33 56) 89) 0 0.001)\n    (check-within (candidate (list 34 73 46) 91) 0 0.001)\n    (check-within (candidate (list 26 59 55) 94) 0 0.001)\n    (check-within (candidate (list 41 89 34) 100) 0 0.001)\n    (check-within (candidate (list 9 26 77 55) 0) 4 0.001)\n    (check-within (candidate (list 24 79 63 37) 1) 4 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2877_minimumString", "language": "rkt", "prompt": "#lang racket\n;; Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings.\n;; If there are multiple such strings, return the lexicographically smallest one.\n;; Return a string denoting the answer to the problem.\n;; Notes\n;;  * A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n;;  * A substring is a contiguous sequence of characters within a string.\n;; Example 1:\n;; Input: a = \"abc\", b = \"bca\", c = \"aaa\"\n;; Output: \"aaabca\"\n;; Explanation:  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one.\n;; Example 2:\n;; Input: a = \"ab\", b = \"ba\", c = \"aba\"\n;; Output: \"aba\"\n;; Explanation: We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.\n;; Constraints:\n;;  * 1 <= a.length, b.length, c.length <= 100\n;;  * a, b, c consist only of lowercase English letters.\n(define (minimumString a b c)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2877_minimumString.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumString))\n    (check-within (candidate abc bca aaa) \"aaabca\" 0.001)\n    (check-within (candidate ab ba aba) \"aba\" 0.001)\n    (check-within (candidate xyyyz xzyz zzz) \"xyyyzxzyzzz\" 0.001)\n    (check-within (candidate a a a) \"a\" 0.001)\n    (check-within (candidate a a b) \"ab\" 0.001)\n    (check-within (candidate a c a) \"ac\" 0.001)\n    (check-within (candidate a b b) \"ab\" 0.001)\n    (check-within (candidate a a c) \"ac\" 0.001)\n    (check-within (candidate a c b) \"abc\" 0.001)\n    (check-within (candidate c c a) \"ac\" 0.001)\n    (check-within (candidate k e a) \"aek\" 0.001)\n    (check-within (candidate a b a) \"ab\" 0.001)\n    (check-within (candidate b b a) \"ab\" 0.001)\n    (check-within (candidate b b b) \"b\" 0.001)\n    (check-within (candidate b b c) \"bc\" 0.001)\n    (check-within (candidate c b b) \"bc\" 0.001)\n    (check-within (candidate b c c) \"bc\" 0.001)\n    (check-within (candidate b c a) \"abc\" 0.001)\n    (check-within (candidate c a c) \"ac\" 0.001)\n    (check-within (candidate c b c) \"bc\" 0.001)\n    (check-within (candidate c c c) \"c\" 0.001)\n    (check-within (candidate e k y) \"eky\" 0.001)\n    (check-within (candidate z p m) \"mpz\" 0.001)\n    (check-within (candidate a aa a) \"aa\" 0.001)\n    (check-within (candidate ac a a) \"ac\" 0.001)\n    (check-within (candidate ca a a) \"ca\" 0.001)\n    (check-within (candidate a cc a) \"acc\" 0.001)\n    (check-within (candidate a a aa) \"aa\" 0.001)\n    (check-within (candidate c a aa) \"aac\" 0.001)\n    (check-within (candidate a ab a) \"ab\" 0.001)\n    (check-within (candidate ab b a) \"ab\" 0.001)\n    (check-within (candidate ab a c) \"abc\" 0.001)\n    (check-within (candidate c ac a) \"ac\" 0.001)\n    (check-within (candidate ab a b) \"ab\" 0.001)\n    (check-within (candidate b a ba) \"ba\" 0.001)\n    (check-within (candidate ba a a) \"ba\" 0.001)\n    (check-within (candidate b ba a) \"ba\" 0.001)\n    (check-within (candidate a bc a) \"abc\" 0.001)\n    (check-within (candidate c a bc) \"abc\" 0.001)\n    (check-within (candidate a c ab) \"abc\" 0.001)\n    (check-within (candidate c a ac) \"ac\" 0.001)\n    (check-within (candidate a c ca) \"ca\" 0.001)\n    (check-within (candidate c a cc) \"acc\" 0.001)\n    (check-within (candidate a ca a) \"ca\" 0.001)\n    (check-within (candidate a cc c) \"acc\" 0.001)\n    (check-within (candidate aa a a) \"aa\" 0.001)\n    (check-within (candidate aa b a) \"aab\" 0.001)\n    (check-within (candidate a aa c) \"aac\" 0.001)\n    (check-within (candidate b c aa) \"aabc\" 0.001)\n    (check-within (candidate b b ab) \"ab\" 0.001)\n    (check-within (candidate ab b c) \"abc\" 0.001)\n    (check-within (candidate ac c b) \"acb\" 0.001)\n    (check-within (candidate c c ac) \"ac\" 0.001)\n    (check-within (candidate ba b a) \"ba\" 0.001)\n    (check-within (candidate a b ca) \"bca\" 0.001)\n    (check-within (candidate b a aa) \"aab\" 0.001)\n    (check-within (candidate b b aa) \"aab\" 0.001)\n    (check-within (candidate b ab a) \"ab\" 0.001)\n    (check-within (candidate b ab b) \"ab\" 0.001)\n    (check-within (candidate ac b a) \"acb\" 0.001)\n    (check-within (candidate b b ac) \"acb\" 0.001)\n    (check-within (candidate bb b b) \"bb\" 0.001)\n    (check-within (candidate b bc b) \"bc\" 0.001)\n    (check-within (candidate b b ca) \"bca\" 0.001)\n    (check-within (candidate cb b b) \"cb\" 0.001)\n    (check-within (candidate b b bb) \"bb\" 0.001)\n    (check-within (candidate b a bc) \"abc\" 0.001)\n    (check-within (candidate b bc c) \"bc\" 0.001)\n    (check-within (candidate b ab c) \"abc\" 0.001)\n    (check-within (candidate b bb c) \"bbc\" 0.001)\n    (check-within (candidate c b bc) \"bc\" 0.001)\n    (check-within (candidate b cb c) \"cb\" 0.001)\n    (check-within (candidate b cc c) \"bcc\" 0.001)\n    (check-within (candidate b cb a) \"acb\" 0.001)\n    (check-within (candidate b b cb) \"cb\" 0.001)\n    (check-within (candidate c b cb) \"cb\" 0.001)\n    (check-within (candidate a ba b) \"ba\" 0.001)\n    (check-within (candidate ba a b) \"ba\" 0.001)\n    (check-within (candidate ba b b) \"ba\" 0.001)\n    (check-within (candidate b ba c) \"bac\" 0.001)\n    (check-within (candidate c ba b) \"bac\" 0.001)\n    (check-within (candidate c c ba) \"bac\" 0.001)\n    (check-within (candidate bb a b) \"abb\" 0.001)\n    (check-within (candidate b bb b) \"bb\" 0.001)\n    (check-within (candidate c bb b) \"bbc\" 0.001)\n    (check-within (candidate a bc b) \"abc\" 0.001)\n    (check-within (candidate bc b c) \"bc\" 0.001)\n    (check-within (candidate bc c b) \"bc\" 0.001)\n    (check-within (candidate bc c c) \"bc\" 0.001)\n    (check-within (candidate ac a c) \"ac\" 0.001)\n    (check-within (candidate c c aa) \"aac\" 0.001)\n    (check-within (candidate cb b c) \"cb\" 0.001)\n    (check-within (candidate c b cc) \"bcc\" 0.001)\n    (check-within (candidate ba b c) \"bac\" 0.001)\n    (check-within (candidate aa c c) \"aac\" 0.001)\n    (check-within (candidate c bc c) \"bc\" 0.001)\n    (check-within (candidate c ca c) \"ca\" 0.001)\n    (check-within (candidate c cb c) \"cb\" 0.001)\n    (check-within (candidate c c cc) \"cc\" 0.001)\n    (check-within (candidate ca c a) \"ca\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2878_checkArray", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and a positive integer k.\n;; You can apply the following operation on the array any number of times:\n;;  * Choose any subarray of size k from the array and decrease all its elements by 1.\n;; Return true if you can make all the array elements equal to 0, or false otherwise.\n;; A subarray is a contiguous non-empty part of an array.\n;; Example 1:\n;; Input: nums = [2,2,3,1,1,0], k = 3\n;; Output: true\n;; Explanation: We can do the following operations:\n;; - Choose the subarray [2,2,3]. The resulting array will be nums = [1,1,2,1,1,0].\n;; - Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,1,0,0,0].\n;; - Choose the subarray [1,1,1]. The resulting array will be nums = [0,0,0,0,0,0].\n;; Example 2:\n;; Input: nums = [1,3,1,1], k = 2\n;; Output: false\n;; Explanation: It is not possible to make all the array elements equal to 0.\n;; Constraints:\n;;  * 1 <= k <= nums.length <= 105\n;;  * 0 <= nums[i] <= 106\n(define (checkArray nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2878_checkArray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate checkArray))\n    (check-within (candidate (list 1 3 1 1) 2) #f 0.001)\n    (check-within (candidate (list 2 2 3 1 1 0) 3) #t 0.001)\n    (check-within (candidate (list 24 24 14 37 31 88 94 38 94 0 100 100 4 46 5 50 0 33 22 25 0) 10) #f 0.001)\n    (check-within (candidate (list 60 72 87 89 63 52 64 62 31 37 57 83 98 94 92 77 94 91 87 100 91 91 50 26) 4) #t 0.001)\n    (check-within (candidate (list 22 4 1 25 68 30 97 99 100 22 20 39 85 68 3 1 1 74) 4) #f 0.001)\n    (check-within (candidate (list 63 40 30 0 72 53) 1) #t 0.001)\n    (check-within (candidate (list 27 99 7 1 94 63 84 46 76 35 97 77 19 72 3) 2) #f 0.001)\n    (check-within (candidate (list 60 78 96 97 97 97 49 7 97 97 97 99 97 97 97 97 85 97 97 97 37 5 1) 20) #f 0.001)\n    (check-within (candidate (list 34 34 99 93 93 26 99 100 94 94 82 86 100 100 87 100 100 100 100 100 63 100 100 66 17 10 8 7 3 1) 23) #f 0.001)\n    (check-within (candidate (list 67 98 97 99 98 97 97 96 99 99 99 42 68 18 99 44 95 79 1 16 49 1 2 2 0) 16) #f 0.001)\n    (check-within (candidate (list 59 60 99 99 99 99 99 99 99 40 39 0) 9) #t 0.001)\n    (check-within (candidate (list 12 87 91 18) 3) #f 0.001)\n    (check-within (candidate (list 0 0 51 67 80 98 88 75 89 83 100 70 77 82 57 100 80 69 19 17) 3) #t 0.001)\n    (check-within (candidate (list 22) 1) #t 0.001)\n    (check-within (candidate (list 52 92 51 24 23 79 100 94 78 96 38 14 72 27 99 94 32 67 43 31 88 8) 4) #f 0.001)\n    (check-within (candidate (list 8 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 43 0) 25) #t 0.001)\n    (check-within (candidate (list 0 0 39 84 86 94 55 10 8 0) 4) #t 0.001)\n    (check-within (candidate (list 12 79 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 83 16 0) 24) #t 0.001)\n    (check-within (candidate (list 15 11 99 86 58 23 82 100 100 80 58 58 84 57 0 25 6) 3) #f 0.001)\n    (check-within (candidate (list 99 0 82 66 3 25 92 41 3 0 46) 7) #f 0.001)\n    (check-within (candidate (list 18 52 56 96 98 82 76 87 2 61 88 100) 2) #f 0.001)\n    (check-within (candidate (list 0 6 100 74 4 50 100 92 18 70 15 88 0 24) 9) #f 0.001)\n    (check-within (candidate (list 0 0 33 72 86 53 14) 3) #t 0.001)\n    (check-within (candidate (list 67 0 68 97 94) 3) #f 0.001)\n    (check-within (candidate (list 0 0 8 64 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 81 25) 25) #t 0.001)\n    (check-within (candidate (list 84 0 68 95 95 0 25 0 7 71 4 68 23 97 80 0) 1) #t 0.001)\n    (check-within (candidate (list 95 92 99 99 2 100 100 100 100 100 100 100 8 57 65 69 69 100 100 100 100 100 100 100 100 0 79 72 32) 12) #f 0.001)\n    (check-within (candidate (list 7 33 97 98 100 100 74 98 95 13 39 31 82 51 28 68 37 59 21 5 66 77 89 6 0) 6) #f 0.001)\n    (check-within (candidate (list 48 48 48 48 48) 5) #t 0.001)\n    (check-within (candidate (list 42 60 56 99 72 2 100 51 65 14 13 51 1 55 56 61 99 49 96 2) 3) #f 0.001)\n    (check-within (candidate (list 8 82 98 99 66 39 71 100 81 85 100 19 96 0 2 85 40 0 19 0) 11) #f 0.001)\n    (check-within (candidate (list 92 96 96 96 97 99 99 99 99 99 99 99 99 22 18 18 18 17 15 15 15 15 15 15 15 15) 13) #t 0.001)\n    (check-within (candidate (list 89 8 8 8 8 8 8 8 8 8 8 8) 12) #f 0.001)\n    (check-within (candidate (list 4 19 0 74 0 26 94 25 99 35 0) 10) #f 0.001)\n    (check-within (candidate (list 79 4 27 35 16 27 85 92 75 99 7 98 86 92 33 8 96 44 21 52 34) 4) #f 0.001)\n    (check-within (candidate (list 75 18 0 81 18 16 51 0) 1) #t 0.001)\n    (check-within (candidate (list 74 74 74 74 74 74 74 74 74) 9) #t 0.001)\n    (check-within (candidate (list 5 5 5 9 37 81 95 95 95 98 98 99 100 100 97 99 100 96 68 24 10 10 10 7 7 6 5 5 3 1) 14) #t 0.001)\n    (check-within (candidate (list 81 100 99 99 68 66 56 100 74 63 2 84 23 67 93 92 56 90 18 57 100 33 88 26 100 72 93 57 28 17) 4) #f 0.001)\n    (check-within (candidate (list 62 76 96 12 0 20 63 29 96 97 8 18 56) 1) #t 0.001)\n    (check-within (candidate (list 31 60 97 71 53 46 63 50 91 82 40 79 96 100 55 55 57 39 50 98 72 37 27 55) 3) #f 0.001)\n    (check-within (candidate (list 100 65 78 59 17 17) 1) #t 0.001)\n    (check-within (candidate (list 57 10 53 20 40 42 64 94 82 67 100 3 22 67 95 28 61 74 67 99 100 46 67 67 76 31 99 26 85) 24) #f 0.001)\n    (check-within (candidate (list 34 76 66 48 13 89 22 24 70 17 17 42 100 2 96 8) 3) #f 0.001)\n    (check-within (candidate (list 92 94 2 6 6) 2) #t 0.001)\n    (check-within (candidate (list 100 17 95) 3) #f 0.001)\n    (check-within (candidate (list 20 27 75 96 97 84 90 77 65 64 57 44 9 0) 5) #t 0.001)\n    (check-within (candidate (list 41 39 98 99 100 100 100 100 100 100 100 100 100 100 100 37 5 2 1 0 0 92 0 0 0) 15) #f 0.001)\n    (check-within (candidate (list 45 90 90 99 99 99 99 99 54 9 9 0) 8) #t 0.001)\n    (check-within (candidate (list 41 18 59 3 52 59 59 55 1 34 67 1 2 13 60 40 5 0 4 47 73 96 33 59 98) 24) #f 0.001)\n    (check-within (candidate (list 53 88 96 97 97 97 97 97 97 97 44 9 1 0) 10) #t 0.001)\n    (check-within (candidate (list 90 74 13 81 34 10 29 18 61 94 43 99 86 0) 11) #f 0.001)\n    (check-within (candidate (list 44 47 72 0 0 68 97 67) 1) #t 0.001)\n    (check-within (candidate (list 77 78 19 97 79) 2) #t 0.001)\n    (check-within (candidate (list 36 61 86 61 0 61 61 61 61 61 61 61 61 65 62 61 95 61 61 61 80 66 61 61 25) 24) #f 0.001)\n    (check-within (candidate (list 0 44 92 94 94 50 95 98 98 99 6 1 54 58 94 94 41 36) 4) #t 0.001)\n    (check-within (candidate (list 60 71 76 93 98 98 98 98 38 27 22 5) 8) #t 0.001)\n    (check-within (candidate (list 94 94 99 94 86 100 32 96 59 69 99 95 75) 3) #f 0.001)\n    (check-within (candidate (list 6 55 95 95 95 96 95 95 90 5 0) 8) #f 0.001)\n    (check-within (candidate (list 62 90 90 90 99 57 61 96 96 97 99 78 84 0) 5) #f 0.001)\n    (check-within (candidate (list 57 77 91 66 46 32) 3) #t 0.001)\n    (check-within (candidate (list 86 87 92 20 42 99 100 97 17 18 48 11 60 98 96 28 59 5 18 56 62 35 100 87 51 54 77 98 61) 7) #f 0.001)\n    (check-within (candidate (list 21 26 20 2 38 22 0 96 79 93 9 67 34) 12) #f 0.001)\n    (check-within (candidate (list 92 14 95 100 53 99 100 100 50 99 99 99 93 99 100 15 71 100 7 5 48 65 6) 18) #f 0.001)\n    (check-within (candidate (list 64 14 64 8 0 83 17 68 5 98 36) 7) #f 0.001)\n    (check-within (candidate (list 50 50 50 50 93 92 84 96 96 96 96 96 96 96 96 46 46 46 46 33 4 1 0) 15) #f 0.001)\n    (check-within (candidate (list 79 90 100 96 22 2 100 10 100 100 78 85 54 7 35 97 98 98 98 98 33 38 4 14 63 23) 10) #f 0.001)\n    (check-within (candidate (list 49 74 96 93 93 99 100 95 73 100 41 95 99 22 13 52 19 13 11 80) 7) #f 0.001)\n    (check-within (candidate (list 6 100 100 100 100 100 98 4 74 89 89 89 85 85 15) 6) #t 0.001)\n    (check-within (candidate (list 69 48 8 3 82 10 88 76 32 95 68 30 97 64 32 62 86) 1) #t 0.001)\n    (check-within (candidate (list 87 87 87) 3) #t 0.001)\n    (check-within (candidate (list 88 98 99 99 100 100 58 82 85 87 86 86 40 6 2) 6) #t 0.001)\n    (check-within (candidate (list 26 26 46 46 70 70 95 97 98 98 98 72 72 52 52 28 28 3 1) 11) #t 0.001)\n    (check-within (candidate (list 25) 1) #t 0.001)\n    (check-within (candidate (list 71 87 87 96 99 36 61 87 98 97 93 96 71 59 75 71 27 26 18) 5) #t 0.001)\n    (check-within (candidate (list 39 90 15 100 52 27 100 67 99 79 4 78 95 84 2) 4) #f 0.001)\n    (check-within (candidate (list 39 39 39 39 39 39 39 39 39 39) 10) #t 0.001)\n    (check-within (candidate (list 58 72 93 99 99 64 50 29 23 23 0 0 0 0 0) 5) #t 0.001)\n    (check-within (candidate (list 30 86 23) 3) #f 0.001)\n    (check-within (candidate (list 65 69 74 79 90 95 98 99 99 99 100 100 100 100 100 100 35 31 26 21 10 5 2 1 1 1 0 0) 16) #t 0.001)\n    (check-within (candidate (list 69 2 71 4 97 97 100 26 100 100 100 100 100 77 13 8 13 3 3 72 0 0 0) 13) #f 0.001)\n    (check-within (candidate (list 77 90 94 94 98 98 28 29 36 91 91 94 87 73 80 81 77 74 74 74 56) 6) #t 0.001)\n    (check-within (candidate (list 93) 1) #t 0.001)\n    (check-within (candidate (list 70 91 100 17 80 94 35 83 33 0) 4) #f 0.001)\n    (check-within (candidate (list 79 87 87 99 50 77 97 85 92 91 71 71 34) 4) #t 0.001)\n    (check-within (candidate (list 75 9 96 100 100 77 7 99 100 99 94 71 5 78 3 8 8 7 59 8 6) 10) #f 0.001)\n    (check-within (candidate (list 36 37 69 88 88 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 60 59 27 8 8 0) 21) #t 0.001)\n    (check-within (candidate (list 94 94 96 97 98 11 64 85 84 87 98 45 65 83 79 63 74 79 61 61 59 48) 5) #t 0.001)\n    (check-within (candidate (list 80 80 98 98 98 18 18 0 0) 5) #t 0.001)\n    (check-within (candidate (list 14 100 17 100 13 85 100 100 14 100 100 1 83 0) 11) #f 0.001)\n    (check-within (candidate (list 98 74 91 70) 2) #f 0.001)\n    (check-within (candidate (list 0 29 29 93 93 93 93 93 93 93 93 93 64 64) 11) #t 0.001)\n    (check-within (candidate (list 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 0) 15) #t 0.001)\n    (check-within (candidate (list 34 89 92 96 96 98 99 98 79 4 100 100 12 99 100 44 100 66 25 8 4 98 2 1 97 70 1 15 0 88) 17) #f 0.001)\n    (check-within (candidate (list 95 95 98 99 99 99 100 100 100 100 100 100 100 5 5 2 1 1 1) 13) #t 0.001)\n    (check-within (candidate (list 15 58 78 10 68 49 100 94 30 14 72) 5) #f 0.001)\n    (check-within (candidate (list 9 44 70 75 28 23 11 37 69 34 61) 10) #f 0.001)\n    (check-within (candidate (list 70 51 47 100 59 66 17 98 60) 4) #f 0.001)\n    (check-within (candidate (list 92 33 58 88) 2) #f 0.001)\n    (check-within (candidate (list 99 15 91 32 7 98) 3) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2879_minimumChanges", "language": "rkt", "prompt": "#lang racket\n;; Given a string s and an integer k, partition s into k substrings such that the sum of the number of letter changes required to turn each substring into a semi-palindrome is minimized.\n;; Return an integer denoting the minimum number of letter changes required.\n;; Notes\n;;  * A string is a palindrome if it can be read the same way from left to right and right to left.\n;;  * A string with a length of len is considered a semi-palindrome if there exists a positive integer d such that 1 <= d < len and len % d == 0, and if we take indices that have the same modulo by d, they form a palindrome. For example, \"aa\", \"aba\", \"adbgad\", and, \"abab\" are semi-palindrome and \"a\", \"ab\", and, \"abca\" are not.\n;;  * A substring is a contiguous sequence of characters within a string.\n;; Example 1:\n;; Input: s = \"abcac\", k = 2\n;; Output: 1\n;; Explanation: We can divide s into substrings \"ab\" and \"cac\". The string \"cac\" is already a semi-palindrome. If we change \"ab\" to \"aa\", it becomes a semi-palindrome with d = 1.\n;; It can be shown that there is no way to divide the string \"abcac\" into two semi-palindrome substrings. Therefore, the answer would be at least 1.\n;; Example 2:\n;; Input: s = \"abcdef\", k = 2\n;; Output: 2\n;; Explanation: We can divide it into substrings \"abc\" and \"def\". Each of the substrings \"abc\" and \"def\" requires one change to become a semi-palindrome, so we need 2 changes in total to make all substrings semi-palindrome.\n;; It can be shown that we cannot divide the given string into two substrings in a way that it would require less than 2 changes.\n;; Example 3:\n;; Input: s = \"aabbaa\", k = 3\n;; Output: 0\n;; Explanation: We can divide it into substrings \"aa\", \"bb\" and \"aa\".\n;; The strings \"aa\" and \"bb\" are already semi-palindromes. Thus, the answer is zero.\n;; Constraints:\n;;  * 2 <= s.length <= 200\n;;  * 1 <= k <= s.length / 2\n;;  * s consists only of lowercase English letters.\n(define (minimumChanges s k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2879_minimumChanges.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumChanges))\n    (check-within (candidate abcac 2) 1 0.001)\n    (check-within (candidate abcdef 2) 2 0.001)\n    (check-within (candidate aabbaa 3) 0 0.001)\n    (check-within (candidate aq 1) 1 0.001)\n    (check-within (candidate bb 1) 0 0.001)\n    (check-within (candidate aac 1) 1 0.001)\n    (check-within (candidate abcc 1) 2 0.001)\n    (check-within (candidate acba 2) 2 0.001)\n    (check-within (candidate edaswf 1) 2 0.001)\n    (check-within (candidate aabcbaa 1) 0 0.001)\n    (check-within (candidate dqpldq 3) 3 0.001)\n    (check-within (candidate eksddulf 1) 3 0.001)\n    (check-within (candidate aaaaacabbb 1) 3 0.001)\n    (check-within (candidate aaabacacbb 1) 3 0.001)\n    (check-within (candidate abbbbacaaa 1) 3 0.001)\n    (check-within (candidate abcccbaccb 1) 2 0.001)\n    (check-within (candidate baacbbbaba 1) 2 0.001)\n    (check-within (candidate babcbaccba 1) 1 0.001)\n    (check-within (candidate cabbcabcbc 1) 3 0.001)\n    (check-within (candidate ccbccaaabb 1) 4 0.001)\n    (check-within (candidate cccbabbbbc 1) 2 0.001)\n    (check-within (candidate cccccbaaac 1) 3 0.001)\n    (check-within (candidate dyfnbbbqbm 1) 4 0.001)\n    (check-within (candidate hafrypzupv 1) 4 0.001)\n    (check-within (candidate aabcacccabc 1) 4 0.001)\n    (check-within (candidate abbcaabaaac 1) 5 0.001)\n    (check-within (candidate baabaabbcb 2) 0 0.001)\n    (check-within (candidate bbbabcbaccb 1) 2 0.001)\n    (check-within (candidate bcababccaa 2) 1 0.001)\n    (check-within (candidate bcacacacaab 1) 1 0.001)\n    (check-within (candidate bcacccacbaa 1) 4 0.001)\n    (check-within (candidate bccaaccacb 2) 2 0.001)\n    (check-within (candidate caacbacbaca 1) 4 0.001)\n    (check-within (candidate ccccaaacca 2) 1 0.001)\n    (check-within (candidate efrsgmjneph 1) 5 0.001)\n    (check-within (candidate ehdvhthgbxq 1) 4 0.001)\n    (check-within (candidate eymakkvrvc 2) 3 0.001)\n    (check-within (candidate gilkaelnfr 2) 4 0.001)\n    (check-within (candidate iiaenfiasiv 1) 4 0.001)\n    (check-within (candidate piazrazesdk 1) 5 0.001)\n    (check-within (candidate pypwcllynf 2) 3 0.001)\n    (check-within (candidate uqicxuvkorn 1) 5 0.001)\n    (check-within (candidate ziirnywodfz 1) 4 0.001)\n    (check-within (candidate zpogsiabazr 1) 5 0.001)\n    (check-within (candidate aacacaacabba 1) 2 0.001)\n    (check-within (candidate abacacabba 3) 0 0.001)\n    (check-within (candidate acbcbccccba 2) 2 0.001)\n    (check-within (candidate bbcaaaaacbb 2) 2 0.001)\n    (check-within (candidate cbabaabccba 2) 1 0.001)\n    (check-within (candidate cbacccbabcaa 1) 3 0.001)\n    (check-within (candidate cbbcbcacca 3) 1 0.001)\n    (check-within (candidate ccaabbbccacb 1) 3 0.001)\n    (check-within (candidate ccabcbbcaa 3) 1 0.001)\n    (check-within (candidate epenvgssid 3) 3 0.001)\n    (check-within (candidate grllkopehr 3) 3 0.001)\n    (check-within (candidate iaemfpyhrtgb 1) 4 0.001)\n    (check-within (candidate iqjvqxzhjc 3) 4 0.001)\n    (check-within (candidate kpkzjgcvgopr 1) 4 0.001)\n    (check-within (candidate neocjmpaltv 2) 4 0.001)\n    (check-within (candidate uvdbxsjyso 3) 4 0.001)\n    (check-within (candidate wsezruidpcy 2) 4 0.001)\n    (check-within (candidate ybexlzsvsi 3) 3 0.001)\n    (check-within (candidate abacabccaa 4) 1 0.001)\n    (check-within (candidate abccbacbcbc 3) 1 0.001)\n    (check-within (candidate abccccbaaba 3) 2 0.001)\n    (check-within (candidate acabbbacacbb 2) 1 0.001)\n    (check-within (candidate acbbbbccacc 3) 1 0.001)\n    (check-within (candidate acbcbbaaca 4) 2 0.001)\n    (check-within (candidate accbabbbaacaa 1) 2 0.001)\n    (check-within (candidate baaaccbaaa 4) 2 0.001)\n    (check-within (candidate baababcacc 4) 2 0.001)\n    (check-within (candidate baabbccbbc 4) 2 0.001)\n    (check-within (candidate bacbbaaccb 4) 2 0.001)\n    (check-within (candidate baccbbccab 4) 3 0.001)\n    (check-within (candidate bbababccabca 2) 2 0.001)\n    (check-within (candidate bbacbccbca 4) 2 0.001)\n    (check-within (candidate bbacccbbaabbb 1) 4 0.001)\n    (check-within (candidate bbccbbbcaab 3) 2 0.001)\n    (check-within (candidate bbccbcccaba 3) 0 0.001)\n    (check-within (candidate bcaacaabaa 4) 2 0.001)\n    (check-within (candidate bcbcbabaabaa 2) 1 0.001)\n    (check-within (candidate bofqvqapnjo 3) 3 0.001)\n    (check-within (candidate bvatyzbdffqdp 1) 6 0.001)\n    (check-within (candidate cabbcbcbcbcca 1) 3 0.001)\n    (check-within (candidate cbacbbcbccccc 1) 3 0.001)\n    (check-within (candidate ccaccaacbcaac 1) 3 0.001)\n    (check-within (candidate ccbabcbabb 4) 1 0.001)\n    (check-within (candidate ccbacacbcbac 2) 2 0.001)\n    (check-within (candidate edulrtnsbb 4) 3 0.001)\n    (check-within (candidate feecuhvurk 4) 4 0.001)\n    (check-within (candidate ffqbqdocclh 3) 2 0.001)\n    (check-within (candidate gceeouniipz 3) 4 0.001)\n    (check-within (candidate gdlitshyeehtx 1) 6 0.001)\n    (check-within (candidate hpbijyuygkk 3) 3 0.001)\n    (check-within (candidate kxvwhuewyftpp 1) 6 0.001)\n    (check-within (candidate mrqvwotsqjtfv 1) 6 0.001)\n    (check-within (candidate qhzievvxauf 3) 4 0.001)\n    (check-within (candidate rbiuxrgidyzuu 1) 6 0.001)\n    (check-within (candidate rkyidomzyud 3) 4 0.001)\n    (check-within (candidate wvewmaevkzjp 2) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2882_numberOfWays", "language": "rkt", "prompt": "#lang racket\n;; Given two positive integers n and x.\n;; Return the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.\n;; Since the result can be very large, return it modulo 109 + 7.\n;; For example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.\n;; Example 1:\n;; Input: n = 10, x = 2\n;; Output: 1\n;; Explanation: We can express n as the following: n = 32 + 12 = 10.\n;; It can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.\n;; Example 2:\n;; Input: n = 4, x = 1\n;; Output: 2\n;; Explanation: We can express n in the following ways:\n;; - n = 41 = 4.\n;; - n = 31 + 11 = 4.\n;; Constraints:\n;;  * 1 <= n <= 300\n;;  * 1 <= x <= 5\n(define (numberOfWays n x)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2882_numberOfWays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfWays))\n    (check-within (candidate 10 2) 1 0.001)\n    (check-within (candidate 4 1) 2 0.001)\n    (check-within (candidate 1 1) 1 0.001)\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate 1 3) 1 0.001)\n    (check-within (candidate 1 4) 1 0.001)\n    (check-within (candidate 1 5) 1 0.001)\n    (check-within (candidate 2 1) 1 0.001)\n    (check-within (candidate 2 2) 0 0.001)\n    (check-within (candidate 2 3) 0 0.001)\n    (check-within (candidate 2 4) 0 0.001)\n    (check-within (candidate 2 5) 0 0.001)\n    (check-within (candidate 3 1) 2 0.001)\n    (check-within (candidate 3 2) 0 0.001)\n    (check-within (candidate 3 3) 0 0.001)\n    (check-within (candidate 3 4) 0 0.001)\n    (check-within (candidate 3 5) 0 0.001)\n    (check-within (candidate 4 2) 1 0.001)\n    (check-within (candidate 4 3) 0 0.001)\n    (check-within (candidate 4 4) 0 0.001)\n    (check-within (candidate 4 5) 0 0.001)\n    (check-within (candidate 5 1) 3 0.001)\n    (check-within (candidate 5 2) 1 0.001)\n    (check-within (candidate 5 3) 0 0.001)\n    (check-within (candidate 5 4) 0 0.001)\n    (check-within (candidate 5 5) 0 0.001)\n    (check-within (candidate 6 1) 4 0.001)\n    (check-within (candidate 6 2) 0 0.001)\n    (check-within (candidate 6 3) 0 0.001)\n    (check-within (candidate 6 4) 0 0.001)\n    (check-within (candidate 6 5) 0 0.001)\n    (check-within (candidate 7 1) 5 0.001)\n    (check-within (candidate 7 2) 0 0.001)\n    (check-within (candidate 7 3) 0 0.001)\n    (check-within (candidate 7 4) 0 0.001)\n    (check-within (candidate 7 5) 0 0.001)\n    (check-within (candidate 8 1) 6 0.001)\n    (check-within (candidate 8 2) 0 0.001)\n    (check-within (candidate 8 3) 1 0.001)\n    (check-within (candidate 8 4) 0 0.001)\n    (check-within (candidate 8 5) 0 0.001)\n    (check-within (candidate 9 1) 8 0.001)\n    (check-within (candidate 9 2) 1 0.001)\n    (check-within (candidate 9 3) 1 0.001)\n    (check-within (candidate 9 4) 0 0.001)\n    (check-within (candidate 9 5) 0 0.001)\n    (check-within (candidate 10 1) 10 0.001)\n    (check-within (candidate 10 3) 0 0.001)\n    (check-within (candidate 10 4) 0 0.001)\n    (check-within (candidate 10 5) 0 0.001)\n    (check-within (candidate 11 1) 12 0.001)\n    (check-within (candidate 11 2) 0 0.001)\n    (check-within (candidate 11 3) 0 0.001)\n    (check-within (candidate 11 4) 0 0.001)\n    (check-within (candidate 11 5) 0 0.001)\n    (check-within (candidate 12 1) 15 0.001)\n    (check-within (candidate 12 2) 0 0.001)\n    (check-within (candidate 12 3) 0 0.001)\n    (check-within (candidate 12 4) 0 0.001)\n    (check-within (candidate 12 5) 0 0.001)\n    (check-within (candidate 13 1) 18 0.001)\n    (check-within (candidate 13 2) 1 0.001)\n    (check-within (candidate 13 3) 0 0.001)\n    (check-within (candidate 13 4) 0 0.001)\n    (check-within (candidate 13 5) 0 0.001)\n    (check-within (candidate 14 1) 22 0.001)\n    (check-within (candidate 14 2) 1 0.001)\n    (check-within (candidate 14 3) 0 0.001)\n    (check-within (candidate 14 4) 0 0.001)\n    (check-within (candidate 14 5) 0 0.001)\n    (check-within (candidate 15 1) 27 0.001)\n    (check-within (candidate 15 2) 0 0.001)\n    (check-within (candidate 15 3) 0 0.001)\n    (check-within (candidate 15 4) 0 0.001)\n    (check-within (candidate 15 5) 0 0.001)\n    (check-within (candidate 16 1) 32 0.001)\n    (check-within (candidate 16 2) 1 0.001)\n    (check-within (candidate 16 3) 0 0.001)\n    (check-within (candidate 16 4) 1 0.001)\n    (check-within (candidate 16 5) 0 0.001)\n    (check-within (candidate 17 1) 38 0.001)\n    (check-within (candidate 17 2) 1 0.001)\n    (check-within (candidate 17 3) 0 0.001)\n    (check-within (candidate 17 4) 1 0.001)\n    (check-within (candidate 17 5) 0 0.001)\n    (check-within (candidate 18 1) 46 0.001)\n    (check-within (candidate 18 2) 0 0.001)\n    (check-within (candidate 18 3) 0 0.001)\n    (check-within (candidate 18 4) 0 0.001)\n    (check-within (candidate 18 5) 0 0.001)\n    (check-within (candidate 19 1) 54 0.001)\n    (check-within (candidate 19 2) 0 0.001)\n    (check-within (candidate 19 3) 0 0.001)\n    (check-within (candidate 19 4) 0 0.001)\n    (check-within (candidate 19 5) 0 0.001)\n    (check-within (candidate 20 1) 64 0.001)\n    (check-within (candidate 20 2) 1 0.001)\n    (check-within (candidate 20 3) 0 0.001)\n    (check-within (candidate 20 4) 0 0.001)\n    (check-within (candidate 20 5) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2883_minimumBeautifulSubstrings", "language": "rkt", "prompt": "#lang racket\n;; Given a binary string s, partition the string into one or more substrings such that each substring is beautiful.\n;; A string is beautiful if:\n;;  * It doesn't contain leading zeros.\n;;  * It's the binary representation of a number that is a power of 5.\n;; Return the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings,\u00a0return -1.\n;; A substring is a contiguous sequence of characters in a string.\n;; Example 1:\n;; Input: s = \"1011\"\n;; Output: 2\n;; Explanation: We can paritition the given string into [\"101\", \"1\"].\n;; - The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5.\n;; - The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\n;; It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.\n;; Example 2:\n;; Input: s = \"111\"\n;; Output: 3\n;; Explanation: We can paritition the given string into [\"1\", \"1\", \"1\"].\n;; - The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\n;; It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.\n;; Example 3:\n;; Input: s = \"0\"\n;; Output: -1\n;; Explanation: We can not partition the given string into beautiful substrings.\n;; Constraints:\n;;  * 1 <= s.length <= 15\n;;  * s[i] is either '0' or '1'.\n(define (minimumBeautifulSubstrings s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2883_minimumBeautifulSubstrings.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumBeautifulSubstrings))\n    (check-within (candidate 1011) 2 0.001)\n    (check-within (candidate 111) 3 0.001)\n    (check-within (candidate 0) -1 0.001)\n    (check-within (candidate 100111000110111) 4 0.001)\n    (check-within (candidate 100111000111) 3 0.001)\n    (check-within (candidate 1001110001111) 4 0.001)\n    (check-within (candidate 100111000111101) 4 0.001)\n    (check-within (candidate 10110011100011) 3 0.001)\n    (check-within (candidate 101101) 2 0.001)\n    (check-within (candidate 101101101) 3 0.001)\n    (check-within (candidate 101101101101101) 5 0.001)\n    (check-within (candidate 1011011011101) 5 0.001)\n    (check-within (candidate 10110110111011) 6 0.001)\n    (check-within (candidate 101101101111001) 5 0.001)\n    (check-within (candidate 1011011011111) 7 0.001)\n    (check-within (candidate 101101110011101) 5 0.001)\n    (check-within (candidate 10110111001111) 6 0.001)\n    (check-within (candidate 1011011101101) 5 0.001)\n    (check-within (candidate 101101110110111) 7 0.001)\n    (check-within (candidate 101101110111011) 7 0.001)\n    (check-within (candidate 1011011101111) 7 0.001)\n    (check-within (candidate 101101110111101) 7 0.001)\n    (check-within (candidate 10110111011111) 8 0.001)\n    (check-within (candidate 101101111001101) 5 0.001)\n    (check-within (candidate 10110111101) 5 0.001)\n    (check-within (candidate 10110111101101) 6 0.001)\n    (check-within (candidate 101101111011011) 7 0.001)\n    (check-within (candidate 101101111011101) 7 0.001)\n    (check-within (candidate 10110111101111) 8 0.001)\n    (check-within (candidate 101101111011111) 9 0.001)\n    (check-within (candidate 1011011111) 6 0.001)\n    (check-within (candidate 1011011111001) 5 0.001)\n    (check-within (candidate 101101111101) 6 0.001)\n    (check-within (candidate 1011011111011) 7 0.001)\n    (check-within (candidate 10110111110111) 8 0.001)\n    (check-within (candidate 10110111111001) 6 0.001)\n    (check-within (candidate 101101111110011) 7 0.001)\n    (check-within (candidate 10110111111011) 4 0.001)\n    (check-within (candidate 101101111110111) 5 0.001)\n    (check-within (candidate 101101111111) 8 0.001)\n    (check-within (candidate 101101111111101) 5 0.001)\n    (check-within (candidate 101110011011) 4 0.001)\n    (check-within (candidate 10111001101101) 4 0.001)\n    (check-within (candidate 101110011011111) 7 0.001)\n    (check-within (candidate 1011100111) 4 0.001)\n    (check-within (candidate 10111001110001) 3 0.001)\n    (check-within (candidate 10111001110011) 4 0.001)\n    (check-within (candidate 1011100111011) 5 0.001)\n    (check-within (candidate 10111001110111) 6 0.001)\n    (check-within (candidate 10111001111) 5 0.001)\n    (check-within (candidate 10111001111001) 4 0.001)\n    (check-within (candidate 1011100111101) 5 0.001)\n    (check-within (candidate 101110011110111) 7 0.001)\n    (check-within (candidate 101110011111001) 5 0.001)\n    (check-within (candidate 10111001111101) 6 0.001)\n    (check-within (candidate 101110011111011) 7 0.001)\n    (check-within (candidate 1011100111111) 7 0.001)\n    (check-within (candidate 10111001111111) 8 0.001)\n    (check-within (candidate 1011101101) 4 0.001)\n    (check-within (candidate 10111011011011) 6 0.001)\n    (check-within (candidate 101110110111) 6 0.001)\n    (check-within (candidate 101110110111011) 7 0.001)\n    (check-within (candidate 1011101101111) 7 0.001)\n    (check-within (candidate 101110111001101) 5 0.001)\n    (check-within (candidate 101110111001111) 7 0.001)\n    (check-within (candidate 10111011101) 5 0.001)\n    (check-within (candidate 10111011101111) 8 0.001)\n    (check-within (candidate 101110111011111) 9 0.001)\n    (check-within (candidate 1011101111) 6 0.001)\n    (check-within (candidate 1011101111001) 5 0.001)\n    (check-within (candidate 10111011110011) 6 0.001)\n    (check-within (candidate 101110111101) 6 0.001)\n    (check-within (candidate 1011101111011) 7 0.001)\n    (check-within (candidate 10111011111) 7 0.001)\n    (check-within (candidate 10111011111001) 6 0.001)\n    (check-within (candidate 10111011111011) 8 0.001)\n    (check-within (candidate 101110111110111) 9 0.001)\n    (check-within (candidate 101110111111001) 7 0.001)\n    (check-within (candidate 101110111111011) 5 0.001)\n    (check-within (candidate 101110111111101) 5 0.001)\n    (check-within (candidate 10111011111111) 10 0.001)\n    (check-within (candidate 101110111111111) 11 0.001)\n    (check-within (candidate 101111) 4 0.001)\n    (check-within (candidate 101111001) 3 0.001)\n    (check-within (candidate 1011110011) 4 0.001)\n    (check-within (candidate 10111100110111) 6 0.001)\n    (check-within (candidate 101111001110001) 4 0.001)\n    (check-within (candidate 101111001111101) 7 0.001)\n    (check-within (candidate 10111100111111) 8 0.001)\n    (check-within (candidate 101111011) 5 0.001)\n    (check-within (candidate 10111101101) 5 0.001)\n    (check-within (candidate 101111011011) 6 0.001)\n    (check-within (candidate 10111101101101) 6 0.001)\n    (check-within (candidate 1011110110111) 7 0.001)\n    (check-within (candidate 1011110111101) 7 0.001)\n    (check-within (candidate 101111011110111) 9 0.001)\n    (check-within (candidate 101111011111) 8 0.001)\n    (check-within (candidate 1011110111111) 9 0.001)\n    (check-within (candidate 101111011111101) 5 0.001)\n    (check-within (candidate 10111101111111) 10 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2884_longestValidSubstring", "language": "rkt", "prompt": "#lang racket\n;; You are given a string word and an array of strings forbidden.\n;; A string is called valid if none of its substrings are present in forbidden.\n;; Return the length of the longest valid substring of the string word.\n;; A substring is a contiguous sequence of characters in a string, possibly empty.\n;; Example 1:\n;; Input: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\n;; Output: 4\n;; Explanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4.\n;; It can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring.\n;; Example 2:\n;; Input: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\n;; Output: 4\n;; Explanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\n;; It can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring.\n;; Constraints:\n;;  * 1 <= word.length <= 105\n;;  * word consists only of lowercase English letters.\n;;  * 1 <= forbidden.length <= 105\n;;  * 1 <= forbidden[i].length <= 10\n;;  * forbidden[i] consists only of lowercase English letters.\n(define (longestValidSubstring word forbidden)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2884_longestValidSubstring.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longestValidSubstring))\n    (check-within (candidate cbaaaabc (list \"aaa\" \"cb\")) 4 0.001)\n    (check-within (candidate leetcode (list \"de\" \"le\" \"e\")) 4 0.001)\n    (check-within (candidate a (list \"n\")) 1 0.001)\n    (check-within (candidate a (list \"s\")) 1 0.001)\n    (check-within (candidate a (list \"a\")) 0 0.001)\n    (check-within (candidate b (list \"g\")) 1 0.001)\n    (check-within (candidate b (list \"t\")) 1 0.001)\n    (check-within (candidate b (list \"b\")) 0 0.001)\n    (check-within (candidate c (list \"k\")) 1 0.001)\n    (check-within (candidate c (list \"s\")) 1 0.001)\n    (check-within (candidate c (list \"c\")) 0 0.001)\n    (check-within (candidate d (list \"h\")) 1 0.001)\n    (check-within (candidate d (list \"n\")) 1 0.001)\n    (check-within (candidate d (list \"d\")) 0 0.001)\n    (check-within (candidate e (list \"s\")) 1 0.001)\n    (check-within (candidate e (list \"e\")) 0 0.001)\n    (check-within (candidate f (list \"b\")) 1 0.001)\n    (check-within (candidate f (list \"s\")) 1 0.001)\n    (check-within (candidate f (list \"f\")) 0 0.001)\n    (check-within (candidate g (list \"r\")) 1 0.001)\n    (check-within (candidate g (list \"y\")) 1 0.001)\n    (check-within (candidate g (list \"g\")) 0 0.001)\n    (check-within (candidate h (list \"v\")) 1 0.001)\n    (check-within (candidate h (list \"b\")) 1 0.001)\n    (check-within (candidate h (list \"h\")) 0 0.001)\n    (check-within (candidate i (list \"k\")) 1 0.001)\n    (check-within (candidate i (list \"y\")) 1 0.001)\n    (check-within (candidate i (list \"i\")) 0 0.001)\n    (check-within (candidate j (list \"v\")) 1 0.001)\n    (check-within (candidate j (list \"u\")) 1 0.001)\n    (check-within (candidate j (list \"j\")) 0 0.001)\n    (check-within (candidate k (list \"z\")) 1 0.001)\n    (check-within (candidate k (list \"o\")) 1 0.001)\n    (check-within (candidate k (list \"k\")) 0 0.001)\n    (check-within (candidate l (list \"i\")) 1 0.001)\n    (check-within (candidate l (list \"r\")) 1 0.001)\n    (check-within (candidate l (list \"l\")) 0 0.001)\n    (check-within (candidate m (list \"s\")) 1 0.001)\n    (check-within (candidate m (list \"g\")) 1 0.001)\n    (check-within (candidate m (list \"m\")) 0 0.001)\n    (check-within (candidate n (list \"e\")) 1 0.001)\n    (check-within (candidate n (list \"i\")) 1 0.001)\n    (check-within (candidate n (list \"n\")) 0 0.001)\n    (check-within (candidate o (list \"j\")) 1 0.001)\n    (check-within (candidate o (list \"f\")) 1 0.001)\n    (check-within (candidate o (list \"o\")) 0 0.001)\n    (check-within (candidate p (list \"z\")) 1 0.001)\n    (check-within (candidate p (list \"i\")) 1 0.001)\n    (check-within (candidate p (list \"p\")) 0 0.001)\n    (check-within (candidate q (list \"j\")) 1 0.001)\n    (check-within (candidate q (list \"z\")) 1 0.001)\n    (check-within (candidate q (list \"q\")) 0 0.001)\n    (check-within (candidate r (list \"v\")) 1 0.001)\n    (check-within (candidate r (list \"p\")) 1 0.001)\n    (check-within (candidate r (list \"r\")) 0 0.001)\n    (check-within (candidate s (list \"m\")) 1 0.001)\n    (check-within (candidate s (list \"x\")) 1 0.001)\n    (check-within (candidate s (list \"s\")) 0 0.001)\n    (check-within (candidate t (list \"v\")) 1 0.001)\n    (check-within (candidate t (list \"m\")) 1 0.001)\n    (check-within (candidate t (list \"t\")) 0 0.001)\n    (check-within (candidate u (list \"l\")) 1 0.001)\n    (check-within (candidate u (list \"n\")) 1 0.001)\n    (check-within (candidate u (list \"u\")) 0 0.001)\n    (check-within (candidate v (list \"o\")) 1 0.001)\n    (check-within (candidate v (list \"v\")) 0 0.001)\n    (check-within (candidate w (list \"w\")) 0 0.001)\n    (check-within (candidate w (list \"s\")) 1 0.001)\n    (check-within (candidate x (list \"r\")) 1 0.001)\n    (check-within (candidate x (list \"q\")) 1 0.001)\n    (check-within (candidate x (list \"x\")) 0 0.001)\n    (check-within (candidate y (list \"w\")) 1 0.001)\n    (check-within (candidate y (list \"t\")) 1 0.001)\n    (check-within (candidate y (list \"y\")) 0 0.001)\n    (check-within (candidate z (list \"l\")) 1 0.001)\n    (check-within (candidate z (list \"o\")) 1 0.001)\n    (check-within (candidate z (list \"z\")) 0 0.001)\n    (check-within (candidate acbc (list \"cbc\" \"acb\" \"acb\" \"acbc\")) 2 0.001)\n    (check-within (candidate cabba (list \"aaba\" \"abba\" \"acabb\" \"cabb\")) 3 0.001)\n    (check-within (candidate bbc (list \"baba\" \"babc\" \"bbc\" \"bbc\")) 2 0.001)\n    (check-within (candidate acb (list \"acb\" \"caccc\" \"baaab\" \"baa\")) 2 0.001)\n    (check-within (candidate aaac (list \"aaac\" \"aac\" \"aaa\" \"aaac\")) 2 0.001)\n    (check-within (candidate ca (list \"ababa\" \"ca\" \"caac\" \"babb\")) 1 0.001)\n    (check-within (candidate babbb (list \"bbb\" \"aacb\" \"babbb\" \"bcab\")) 4 0.001)\n    (check-within (candidate cbbba (list \"bca\" \"cbbba\" \"acbcc\" \"aabb\")) 4 0.001)\n    (check-within (candidate abab (list \"aab\" \"abab\" \"cacb\" \"bab\")) 3 0.001)\n    (check-within (candidate cbab (list \"bbcc\" \"aaccc\" \"cbab\" \"babca\")) 3 0.001)\n    (check-within (candidate caaa (list \"aaa\" \"cbb\" \"aaa\" \"caaa\")) 3 0.001)\n    (check-within (candidate baa (list \"aaab\" \"bbaa\" \"babac\" \"baa\")) 2 0.001)\n    (check-within (candidate cbcc (list \"cbcc\" \"baa\" \"bbba\" \"cac\")) 3 0.001)\n    (check-within (candidate cac (list \"cccaa\" \"baaca\" \"cac\" \"cac\")) 2 0.001)\n    (check-within (candidate cabab (list \"cabab\" \"abab\" \"cabab\" \"abab\")) 4 0.001)\n    (check-within (candidate caa (list \"caa\" \"bba\" \"acc\" \"bcabb\")) 2 0.001)\n    (check-within (candidate ba (list \"ba\" \"ba\" \"cab\" \"cbcac\")) 1 0.001)\n    (check-within (candidate bbc (list \"baca\" \"bbc\" \"bbc\" \"caa\")) 2 0.001)\n    (check-within (candidate bbb (list \"cbaab\" \"bbb\" \"bbb\" \"bab\")) 2 0.001)\n    (check-within (candidate bbccc (list \"ccc\" \"bcba\" \"bcc\" \"bcc\")) 3 0.001)\n    (check-within (candidate bcac (list \"bcac\" \"caca\" \"bcac\" \"bca\")) 3 0.001)\n    (check-within (candidate ab (list \"aca\" \"cabcc\" \"caba\" \"ab\")) 1 0.001)\n    (check-within (candidate caa (list \"bab\" \"babbb\" \"abbaa\" \"caa\")) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2886_finalString", "language": "rkt", "prompt": "#lang racket\n;; Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected.\n;; You are given a 0-indexed string s, and you type each character of s using your faulty keyboard.\n;; Return the final string that will be present on your laptop screen.\n;; Example 1:\n;; Input: s = \"string\"\n;; Output: \"rtsng\"\n;; Explanation:\n;; After typing first character, the text on the screen is \"s\".\n;; After the second character, the text is \"st\".\n;; After the third character, the text is \"str\".\n;; Since the fourth character is an 'i', the text gets reversed and becomes \"rts\".\n;; After the fifth character, the text is \"rtsn\".\n;; After the sixth character, the text is \"rtsng\".\n;; Therefore, we return \"rtsng\".\n;; Example 2:\n;; Input: s = \"poiinter\"\n;; Output: \"ponter\"\n;; Explanation:\n;; After the first character, the text on the screen is \"p\".\n;; After the second character, the text is \"po\".\n;; Since the third character you type is an 'i', the text gets reversed and becomes \"op\".\n;; Since the fourth character you type is an 'i', the text gets reversed and becomes \"po\".\n;; After the fifth character, the text is \"pon\".\n;; After the sixth character, the text is \"pont\".\n;; After the seventh character, the text is \"ponte\".\n;; After the eighth character, the text is \"ponter\".\n;; Therefore, we return \"ponter\".\n;; Constraints:\n;;  * 1 <= s.length <= 100\n;;  * s consists of lowercase English letters.\n;;  * s[0] != 'i'\n(define (finalString s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2886_finalString.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate finalString))\n    (check-within (candidate string) \"rtsng\" 0.001)\n    (check-within (candidate poiinter) \"ponter\" 0.001)\n    (check-within (candidate goci) \"cog\" 0.001)\n    (check-within (candidate ksi) \"sk\" 0.001)\n    (check-within (candidate fii) \"f\" 0.001)\n    (check-within (candidate qskyviiiii) \"vyksq\" 0.001)\n    (check-within (candidate pft) \"pft\" 0.001)\n    (check-within (candidate viwif) \"wvf\" 0.001)\n    (check-within (candidate wiie) \"we\" 0.001)\n    (check-within (candidate kiis) \"ks\" 0.001)\n    (check-within (candidate xihbosxitx) \"xsobhxtx\" 0.001)\n    (check-within (candidate uwioili) \"lwuo\" 0.001)\n    (check-within (candidate aapziai) \"aaapz\" 0.001)\n    (check-within (candidate pviist) \"pvst\" 0.001)\n    (check-within (candidate miiuiei) \"emu\" 0.001)\n    (check-within (candidate diiiiq) \"dq\" 0.001)\n    (check-within (candidate eirov) \"erov\" 0.001)\n    (check-within (candidate niiiiisiii) \"sn\" 0.001)\n    (check-within (candidate siiuii) \"su\" 0.001)\n    (check-within (candidate piijciivq) \"pjcvq\" 0.001)\n    (check-within (candidate tidtwitik) \"ttdtwk\" 0.001)\n    (check-within (candidate z) \"z\" 0.001)\n    (check-within (candidate ffyuidnn) \"uyffdnn\" 0.001)\n    (check-within (candidate xitiiinix) \"nxtx\" 0.001)\n    (check-within (candidate ciiiuifab) \"ucfab\" 0.001)\n    (check-within (candidate x) \"x\" 0.001)\n    (check-within (candidate v) \"v\" 0.001)\n    (check-within (candidate liinii) \"ln\" 0.001)\n    (check-within (candidate ziii) \"z\" 0.001)\n    (check-within (candidate ei) \"e\" 0.001)\n    (check-within (candidate tidiiiii) \"dt\" 0.001)\n    (check-within (candidate krjiqjii) \"jrkqj\" 0.001)\n    (check-within (candidate mxczii) \"mxcz\" 0.001)\n    (check-within (candidate bz) \"bz\" 0.001)\n    (check-within (candidate zbwri) \"rwbz\" 0.001)\n    (check-within (candidate biiq) \"bq\" 0.001)\n    (check-within (candidate mmiiliir) \"mmlr\" 0.001)\n    (check-within (candidate plibeici) \"clpbe\" 0.001)\n    (check-within (candidate cii) \"c\" 0.001)\n    (check-within (candidate wiilg) \"wlg\" 0.001)\n    (check-within (candidate cdidi) \"dcd\" 0.001)\n    (check-within (candidate fsq) \"fsq\" 0.001)\n    (check-within (candidate hkjciaiii) \"ahkjc\" 0.001)\n    (check-within (candidate l) \"l\" 0.001)\n    (check-within (candidate vilcoizi) \"zvlco\" 0.001)\n    (check-within (candidate tgigivipx) \"vgtgpx\" 0.001)\n    (check-within (candidate ri) \"r\" 0.001)\n    (check-within (candidate kficiiioiy) \"ofkcy\" 0.001)\n    (check-within (candidate o) \"o\" 0.001)\n    (check-within (candidate piifwiiit) \"wfpt\" 0.001)\n    (check-within (candidate sifsiui) \"usfs\" 0.001)\n    (check-within (candidate sxiuiiiii) \"usx\" 0.001)\n    (check-within (candidate tiiiihiw) \"htw\" 0.001)\n    (check-within (candidate ko) \"ko\" 0.001)\n    (check-within (candidate gagi) \"gag\" 0.001)\n    (check-within (candidate yyigiir) \"yygr\" 0.001)\n    (check-within (candidate jimiiaci) \"camj\" 0.001)\n    (check-within (candidate xiiiei) \"ex\" 0.001)\n    (check-within (candidate hwi) \"wh\" 0.001)\n    (check-within (candidate ji) \"j\" 0.001)\n    (check-within (candidate heii) \"he\" 0.001)\n    (check-within (candidate zitjcq) \"ztjcq\" 0.001)\n    (check-within (candidate upmipaw) \"mpupaw\" 0.001)\n    (check-within (candidate fiixkgp) \"fxkgp\" 0.001)\n    (check-within (candidate ldr) \"ldr\" 0.001)\n    (check-within (candidate kiboiithi) \"htobk\" 0.001)\n    (check-within (candidate svcii) \"svc\" 0.001)\n    (check-within (candidate d) \"d\" 0.001)\n    (check-within (candidate edgijwiua) \"wjedgua\" 0.001)\n    (check-within (candidate wiidqoiwov) \"oqdwwov\" 0.001)\n    (check-within (candidate zimxiiqqi) \"qqxmz\" 0.001)\n    (check-within (candidate githpgiini) \"ngphtg\" 0.001)\n    (check-within (candidate fy) \"fy\" 0.001)\n    (check-within (candidate hesi) \"seh\" 0.001)\n    (check-within (candidate eiiii) \"e\" 0.001)\n    (check-within (candidate be) \"be\" 0.001)\n    (check-within (candidate rpi) \"pr\" 0.001)\n    (check-within (candidate mi) \"m\" 0.001)\n    (check-within (candidate wiiiiii) \"w\" 0.001)\n    (check-within (candidate rbiiiii) \"br\" 0.001)\n    (check-within (candidate diiii) \"d\" 0.001)\n    (check-within (candidate poiiifl) \"opfl\" 0.001)\n    (check-within (candidate loifiicii) \"olfc\" 0.001)\n    (check-within (candidate bii) \"b\" 0.001)\n    (check-within (candidate nirii) \"nr\" 0.001)\n    (check-within (candidate wiigipio) \"pwgo\" 0.001)\n    (check-within (candidate gimliibin) \"blmgn\" 0.001)\n    (check-within (candidate zi) \"z\" 0.001)\n    (check-within (candidate tjn) \"tjn\" 0.001)\n    (check-within (candidate ly) \"ly\" 0.001)\n    (check-within (candidate sqzviyiimi) \"mysqzv\" 0.001)\n    (check-within (candidate jhmaxm) \"jhmaxm\" 0.001)\n    (check-within (candidate py) \"py\" 0.001)\n    (check-within (candidate yyilwiib) \"yylwb\" 0.001)\n    (check-within (candidate ryjiilj) \"ryjlj\" 0.001)\n    (check-within (candidate tnokpgfii) \"tnokpgf\" 0.001)\n    (check-within (candidate niihiliiv) \"hnlv\" 0.001)\n    (check-within (candidate gvhms) \"gvhms\" 0.001)\n    (check-within (candidate yg) \"yg\" 0.001)\n    (check-within (candidate eiiiuizgi) \"gzeu\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2887_sortVowels", "language": "rkt", "prompt": "#lang racket\n;;     Given a 0-indexed string s, permute s to get a new string t such that:\n;; * All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].\n;; * The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].\n;;     Return the resulting string.\n;;     The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n;;     Example 1:\n;;     Input: s = \"lEetcOde\"\n;;     Output: \"lEOtcede\"\n;;     Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.\n;;     Example 2:\n;;     Input: s = \"lYmpH\"\n;;     Output: \"lYmpH\"\n;;     Explanation: There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".\n;;     Constraints:\n;; * 1 <= s.length <= 105\n;; * s consists only of letters of the\u00a0English alphabet\u00a0in uppercase and lowercase.\n(define (sortVowels s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2887_sortVowels.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sortVowels))\n    (check-within (candidate lEetcOde) \"lEOtcede\" 0.001)\n    (check-within (candidate lYmpH) \"lYmpH\" 0.001)\n    (check-within (candidate mDVD) \"mDVD\" 0.001)\n    (check-within (candidate xdX) \"xdX\" 0.001)\n    (check-within (candidate xdE) \"xdE\" 0.001)\n    (check-within (candidate RiQYo) \"RiQYo\" 0.001)\n    (check-within (candidate LQRamBOHfq) \"LQROmBaHfq\" 0.001)\n    (check-within (candidate UpjPbEnOj) \"EpjPbOnUj\" 0.001)\n    (check-within (candidate ziF) \"ziF\" 0.001)\n    (check-within (candidate WxkKdjhL) \"WxkKdjhL\" 0.001)\n    (check-within (candidate uZcPmqAd) \"AZcPmqud\" 0.001)\n    (check-within (candidate UjshJXjkjS) \"UjshJXjkjS\" 0.001)\n    (check-within (candidate nElwWTQHJ) \"nElwWTQHJ\" 0.001)\n    (check-within (candidate kwcJqvsgM) \"kwcJqvsgM\" 0.001)\n    (check-within (candidate z) \"z\" 0.001)\n    (check-within (candidate Pz) \"Pz\" 0.001)\n    (check-within (candidate T) \"T\" 0.001)\n    (check-within (candidate syRWvFi) \"syRWvFi\" 0.001)\n    (check-within (candidate G) \"G\" 0.001)\n    (check-within (candidate MuQYHVy) \"MuQYHVy\" 0.001)\n    (check-within (candidate gsc) \"gsc\" 0.001)\n    (check-within (candidate nynBd) \"nynBd\" 0.001)\n    (check-within (candidate qUSUCJeJZt) \"qUSUCJeJZt\" 0.001)\n    (check-within (candidate PoEvPD) \"PEovPD\" 0.001)\n    (check-within (candidate SrSuArHDvA) \"SrSAArHDvu\" 0.001)\n    (check-within (candidate zI) \"zI\" 0.001)\n    (check-within (candidate zpVZt) \"zpVZt\" 0.001)\n    (check-within (candidate dZVLG) \"dZVLG\" 0.001)\n    (check-within (candidate EHhQZGJBbp) \"EHhQZGJBbp\" 0.001)\n    (check-within (candidate aPLCji) \"aPLCji\" 0.001)\n    (check-within (candidate HSe) \"HSe\" 0.001)\n    (check-within (candidate HvDMPPU) \"HvDMPPU\" 0.001)\n    (check-within (candidate LYACGrvJLZ) \"LYACGrvJLZ\" 0.001)\n    (check-within (candidate RepLvwHFI) \"RIpLvwHFe\" 0.001)\n    (check-within (candidate vjbObvLfs) \"vjbObvLfs\" 0.001)\n    (check-within (candidate sKQwLo) \"sKQwLo\" 0.001)\n    (check-within (candidate PoqU) \"PUqo\" 0.001)\n    (check-within (candidate QgUxRvJTfH) \"QgUxRvJTfH\" 0.001)\n    (check-within (candidate wUMnwnblpu) \"wUMnwnblpu\" 0.001)\n    (check-within (candidate JpqXrPuMd) \"JpqXrPuMd\" 0.001)\n    (check-within (candidate wdtDPSQdKl) \"wdtDPSQdKl\" 0.001)\n    (check-within (candidate Dl) \"Dl\" 0.001)\n    (check-within (candidate v) \"v\" 0.001)\n    (check-within (candidate axRukCyOHm) \"OxRakCyuHm\" 0.001)\n    (check-within (candidate sQyytiAh) \"sQyytAih\" 0.001)\n    (check-within (candidate ieTwHeOR) \"OeTwHeiR\" 0.001)\n    (check-within (candidate LLxyZ) \"LLxyZ\" 0.001)\n    (check-within (candidate s) \"s\" 0.001)\n    (check-within (candidate oefu) \"eofu\" 0.001)\n    (check-within (candidate XV) \"XV\" 0.001)\n    (check-within (candidate VkfjDpSH) \"VkfjDpSH\" 0.001)\n    (check-within (candidate rg) \"rg\" 0.001)\n    (check-within (candidate ecV) \"ecV\" 0.001)\n    (check-within (candidate RUnxytMua) \"RUnxytMau\" 0.001)\n    (check-within (candidate gUyMeyzOZo) \"gOyMUyzeZo\" 0.001)\n    (check-within (candidate WEir) \"WEir\" 0.001)\n    (check-within (candidate zZWs) \"zZWs\" 0.001)\n    (check-within (candidate WULsDqIhp) \"WILsDqUhp\" 0.001)\n    (check-within (candidate pw) \"pw\" 0.001)\n    (check-within (candidate nOWxdSzo) \"nOWxdSzo\" 0.001)\n    (check-within (candidate NfK) \"NfK\" 0.001)\n    (check-within (candidate wXRFu) \"wXRFu\" 0.001)\n    (check-within (candidate XXtjDoinAD) \"XXtjDAinoD\" 0.001)\n    (check-within (candidate SGUzEv) \"SGEzUv\" 0.001)\n    (check-within (candidate RFOvEt) \"RFEvOt\" 0.001)\n    (check-within (candidate umQePdr) \"emQuPdr\" 0.001)\n    (check-within (candidate wRqZ) \"wRqZ\" 0.001)\n    (check-within (candidate blu) \"blu\" 0.001)\n    (check-within (candidate QeOQEatFaW) \"QEOQaatFeW\" 0.001)\n    (check-within (candidate jzWiXrYa) \"jzWaXrYi\" 0.001)\n    (check-within (candidate xs) \"xs\" 0.001)\n    (check-within (candidate DwROc) \"DwROc\" 0.001)\n    (check-within (candidate XMhLlJd) \"XMhLlJd\" 0.001)\n    (check-within (candidate uAmir) \"Aimur\" 0.001)\n    (check-within (candidate PTlFpeAI) \"PTlFpAIe\" 0.001)\n    (check-within (candidate XLYy) \"XLYy\" 0.001)\n    (check-within (candidate vA) \"vA\" 0.001)\n    (check-within (candidate y) \"y\" 0.001)\n    (check-within (candidate C) \"C\" 0.001)\n    (check-within (candidate wrnMlek) \"wrnMlek\" 0.001)\n    (check-within (candidate JWbfCfGgf) \"JWbfCfGgf\" 0.001)\n    (check-within (candidate OPGlnq) \"OPGlnq\" 0.001)\n    (check-within (candidate DeOMW) \"DOeMW\" 0.001)\n    (check-within (candidate xG) \"xG\" 0.001)\n    (check-within (candidate ZcaBhfkWC) \"ZcaBhfkWC\" 0.001)\n    (check-within (candidate pKa) \"pKa\" 0.001)\n    (check-within (candidate DXSEKrfJCe) \"DXSEKrfJCe\" 0.001)\n    (check-within (candidate xA) \"xA\" 0.001)\n    (check-within (candidate Jb) \"Jb\" 0.001)\n    (check-within (candidate SBQT) \"SBQT\" 0.001)\n    (check-within (candidate LWRfYb) \"LWRfYb\" 0.001)\n    (check-within (candidate tvLWAeGDFK) \"tvLWAeGDFK\" 0.001)\n    (check-within (candidate jFkj) \"jFkj\" 0.001)\n    (check-within (candidate zC) \"zC\" 0.001)\n    (check-within (candidate ikYSsAveh) \"AkYSsevih\" 0.001)\n    (check-within (candidate YXkS) \"YXkS\" 0.001)\n    (check-within (candidate SOEo) \"SEOo\" 0.001)\n    (check-within (candidate qoJx) \"qoJx\" 0.001)\n    (check-within (candidate qGJbgTQ) \"qGJbgTQ\" 0.001)\n    (check-within (candidate yiYYO) \"yOYYi\" 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2888_minimumIndex", "language": "rkt", "prompt": "#lang racket\n;; An element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element.\n;; You are given a 0-indexed integer array nums of length n with one dominant element.\n;; You can split nums at an index i into two arrays nums[0, ..., i] and nums[i + 1, ..., n - 1], but the split is only valid if:\n;;  * 0 <= i < n - 1\n;;  * nums[0, ..., i], and nums[i + 1, ..., n - 1] have the same dominant element.\n;; Here, nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i, ..., j] denotes an empty subarray.\n;; Return the minimum index of a valid split. If no valid split exists, return -1.\n;; Example 1:\n;; Input: nums = [1,2,2,2]\n;; Output: 2\n;; Explanation: We can split the array at index 2 to obtain arrays [1,2,2] and [2].\n;; In array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3.\n;; In array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1.\n;; Both [1,2,2] and [2] have the same dominant element as nums, so this is a valid split.\n;; It can be shown that index 2 is the minimum index of a valid split.\n;; Example 2:\n;; Input: nums = [2,1,3,1,1,1,7,1,2,1]\n;; Output: 4\n;; Explanation: We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].\n;; In array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\n;; In array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\n;; Both [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.\n;; It can be shown that index 4 is the minimum index of a valid split.\n;; Example 3:\n;; Input: nums = [3,3,3,3,7,2,2]\n;; Output: -1\n;; Explanation: It can be shown that there is no valid split.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n;;  * nums has exactly one dominant element.\n(define (minimumIndex nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2888_minimumIndex.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumIndex))\n    (check-within (candidate (list 1 2 2 2)) 2 0.001)\n    (check-within (candidate (list 2 1 3 1 1 1 7 1 2 1)) 4 0.001)\n    (check-within (candidate (list 3 3 3 3 7 2 2)) -1 0.001)\n    (check-within (candidate (list 1)) -1 0.001)\n    (check-within (candidate (list 1 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2)) 0 0.001)\n    (check-within (candidate (list 1 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1 1 1 4)) 0 0.001)\n    (check-within (candidate (list 1 1 2)) -1 0.001)\n    (check-within (candidate (list 1 1 2 1)) 0 0.001)\n    (check-within (candidate (list 1 1 3)) -1 0.001)\n    (check-within (candidate (list 1 1 3 1)) 0 0.001)\n    (check-within (candidate (list 1 1 4)) -1 0.001)\n    (check-within (candidate (list 1 1 4 1)) 0 0.001)\n    (check-within (candidate (list 1 2 1)) -1 0.001)\n    (check-within (candidate (list 1 2 1 1)) 0 0.001)\n    (check-within (candidate (list 1 2 2)) -1 0.001)\n    (check-within (candidate (list 1 3 1)) -1 0.001)\n    (check-within (candidate (list 1 3 1 1)) 0 0.001)\n    (check-within (candidate (list 1 3 3)) -1 0.001)\n    (check-within (candidate (list 1 3 3 3)) 2 0.001)\n    (check-within (candidate (list 1 4 1)) -1 0.001)\n    (check-within (candidate (list 1 4 1 1)) 0 0.001)\n    (check-within (candidate (list 1 4 4)) -1 0.001)\n    (check-within (candidate (list 1 4 4 4)) 2 0.001)\n    (check-within (candidate (list 2)) -1 0.001)\n    (check-within (candidate (list 2 1 1)) -1 0.001)\n    (check-within (candidate (list 2 1 1 1)) 2 0.001)\n    (check-within (candidate (list 2 1 2)) -1 0.001)\n    (check-within (candidate (list 2 1 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2 1)) -1 0.001)\n    (check-within (candidate (list 2 2 1 2)) 0 0.001)\n    (check-within (candidate (list 2 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2 2 1)) 0 0.001)\n    (check-within (candidate (list 2 2 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2 2 3)) 0 0.001)\n    (check-within (candidate (list 2 2 2 4)) 0 0.001)\n    (check-within (candidate (list 2 2 3)) -1 0.001)\n    (check-within (candidate (list 2 2 3 2)) 0 0.001)\n    (check-within (candidate (list 2 2 4)) -1 0.001)\n    (check-within (candidate (list 2 2 4 2)) 0 0.001)\n    (check-within (candidate (list 2 3 2)) -1 0.001)\n    (check-within (candidate (list 2 3 2 2)) 0 0.001)\n    (check-within (candidate (list 2 3 3)) -1 0.001)\n    (check-within (candidate (list 2 3 3 3)) 2 0.001)\n    (check-within (candidate (list 2 4 2)) -1 0.001)\n    (check-within (candidate (list 2 4 2 2)) 0 0.001)\n    (check-within (candidate (list 2 4 4)) -1 0.001)\n    (check-within (candidate (list 2 4 4 4)) 2 0.001)\n    (check-within (candidate (list 3)) -1 0.001)\n    (check-within (candidate (list 3 1 1)) -1 0.001)\n    (check-within (candidate (list 3 1 1 1)) 2 0.001)\n    (check-within (candidate (list 3 1 3)) -1 0.001)\n    (check-within (candidate (list 3 1 3 3)) 0 0.001)\n    (check-within (candidate (list 3 2 2)) -1 0.001)\n    (check-within (candidate (list 3 2 2 2)) 2 0.001)\n    (check-within (candidate (list 3 2 3)) -1 0.001)\n    (check-within (candidate (list 3 2 3 3)) 0 0.001)\n    (check-within (candidate (list 3 3)) 0 0.001)\n    (check-within (candidate (list 3 3 1)) -1 0.001)\n    (check-within (candidate (list 3 3 1 3)) 0 0.001)\n    (check-within (candidate (list 3 3 2)) -1 0.001)\n    (check-within (candidate (list 3 3 2 3)) 0 0.001)\n    (check-within (candidate (list 3 3 3)) 0 0.001)\n    (check-within (candidate (list 3 3 3 1)) 0 0.001)\n    (check-within (candidate (list 3 3 3 2)) 0 0.001)\n    (check-within (candidate (list 3 3 3 3)) 0 0.001)\n    (check-within (candidate (list 3 3 3 4)) 0 0.001)\n    (check-within (candidate (list 3 3 4)) -1 0.001)\n    (check-within (candidate (list 3 3 4 3)) 0 0.001)\n    (check-within (candidate (list 3 4 3)) -1 0.001)\n    (check-within (candidate (list 3 4 3 3)) 0 0.001)\n    (check-within (candidate (list 3 4 4)) -1 0.001)\n    (check-within (candidate (list 3 4 4 4)) 2 0.001)\n    (check-within (candidate (list 4)) -1 0.001)\n    (check-within (candidate (list 4 1 1)) -1 0.001)\n    (check-within (candidate (list 4 1 1 1)) 2 0.001)\n    (check-within (candidate (list 4 1 4)) -1 0.001)\n    (check-within (candidate (list 4 1 4 4)) 0 0.001)\n    (check-within (candidate (list 4 2 2)) -1 0.001)\n    (check-within (candidate (list 4 2 2 2)) 2 0.001)\n    (check-within (candidate (list 4 2 4)) -1 0.001)\n    (check-within (candidate (list 4 2 4 4)) 0 0.001)\n    (check-within (candidate (list 4 3 3)) -1 0.001)\n    (check-within (candidate (list 4 3 3 3)) 2 0.001)\n    (check-within (candidate (list 4 3 4)) -1 0.001)\n    (check-within (candidate (list 4 3 4 4)) 0 0.001)\n    (check-within (candidate (list 4 4)) 0 0.001)\n    (check-within (candidate (list 4 4 1)) -1 0.001)\n    (check-within (candidate (list 4 4 1 4)) 0 0.001)\n    (check-within (candidate (list 4 4 2)) -1 0.001)\n    (check-within (candidate (list 4 4 2 4)) 0 0.001)\n    (check-within (candidate (list 4 4 3)) -1 0.001)\n    (check-within (candidate (list 4 4 3 4)) 0 0.001)\n    (check-within (candidate (list 4 4 4)) 0 0.001)\n    (check-within (candidate (list 4 4 4 1)) 0 0.001)\n    (check-within (candidate (list 4 4 4 2)) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2889_countBlackBlocks", "language": "rkt", "prompt": "#lang racket\n;; You are given two integers m and n representing the dimensions of a\u00a00-indexed\u00a0m x n grid.\n;; You are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white.\n;; A block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1].\n;; Return a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.\n;; Example 1:\n;; Input: m = 3, n = 3, coordinates = [[0,0]]\n;; Output: [3,1,0,0,0]\n;; Explanation: The grid looks like this:\n;; [https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png]\n;; There is only 1 block with one black cell, and it is the block starting with cell [0,0].\n;; The other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells.\n;; Thus, we return [3,1,0,0,0].\n;; Example 2:\n;; Input: m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]\n;; Output: [0,2,2,0,0]\n;; Explanation: The grid looks like this:\n;; [https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png]\n;; There are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\n;; The other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\n;; Therefore, we return [0,2,2,0,0].\n;; Constraints:\n;;  * 2 <= m <= 105\n;;  * 2 <= n <= 105\n;;  * 0 <= coordinates.length <= 104\n;;  * coordinates[i].length == 2\n;;  * 0 <= coordinates[i][0] < m\n;;  * 0 <= coordinates[i][1] < n\n;;  * It is guaranteed that coordinates contains pairwise distinct coordinates.\n(define (countBlackBlocks m n coordinates)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2889_countBlackBlocks.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countBlackBlocks))\n    (check-within (candidate 3 3 (list (list 0 0))) (list 3 1 0 0 0) 0.001)\n    (check-within (candidate 3 3 (list (list 0 0) (list 1 1) (list 0 2))) (list 0 2 2 0 0) 0.001)\n    (check-within (candidate 32 32 (list (list 17 29) (list 29 16) (list 19 20) (list 18 9) (list 16 7) (list 20 25) (list 22 19) (list 4 9) (list 14 17) (list 6 23) (list 2 2) (list 20 1) (list 8 7) (list 4 7) (list 14 14) (list 10 10) (list 1 27) (list 18 23) (list 6 30) (list 8 18) (list 26 23) (list 25 8) (list 5 6) (list 3 4))) (list 866 94 1 0 0) 0.001)\n    (check-within (candidate 22 73 (list (list 11 14) (list 16 11) (list 20 5) (list 5 33) (list 14 7) (list 16 60) (list 0 15) (list 15 72) (list 6 60) (list 9 16) (list 14 51) (list 1 52) (list 18 24) (list 17 30) (list 3 4) (list 19 13) (list 9 10) (list 11 40) (list 15 7) (list 13 62) (list 8 41) (list 12 71) (list 4 72) (list 18 7) (list 1 0) (list 4 35) (list 16 33) (list 7 30) (list 13 52) (list 5 1) (list 15 21) (list 3 59) (list 2 41) (list 4 28))) (list 1387 122 3 0 0) 0.001)\n    (check-within (candidate 22 79 (list (list 11 43) (list 17 56) (list 11 58) (list 19 68) (list 5 10) (list 18 35) (list 18 27) (list 10 53) (list 1 72) (list 4 64) (list 4 72) (list 3 76) (list 18 36) (list 14 47) (list 12 57) (list 10 11) (list 13 5) (list 17 39) (list 1 4) (list 3 32) (list 6 34) (list 2 62) (list 8 35) (list 9 18) (list 12 77) (list 8 43) (list 1 49) (list 15 14) (list 15 27) (list 4 68) (list 19 24) (list 9 19) (list 17 3) (list 3 51) (list 5 61))) (list 1503 130 5 0 0) 0.001)\n    (check-within (candidate 3 89 (list (list 0 46) (list 1 29) (list 0 50) (list 1 61))) (list 164 12 0 0 0) 0.001)\n    (check-within (candidate 25 97 (list (list 23 65) (list 11 33) (list 6 76) (list 9 65) (list 18 13) (list 16 59) (list 0 86) (list 17 14) (list 23 61) (list 8 78) (list 19 40) (list 18 57) (list 1 66) (list 15 1) (list 13 44) (list 17 6) (list 14 90) (list 1 22) (list 5 34) (list 0 53) (list 1 65) (list 20 32) (list 22 54) (list 3 11) (list 20 53) (list 7 70) (list 0 30) (list 23 17) (list 18 2) (list 14 93) (list 1 28) (list 19 82) (list 6 61) (list 13 64) (list 6 73) (list 0 52) (list 17 93) (list 20 63) (list 16 24) (list 14 6) (list 20 28) (list 4 57) (list 19 76) (list 21 50) (list 5 44) (list 5 29) (list 11 36) (list 14 87) (list 2 10) (list 4 78) (list 12 35) (list 11 27) (list 20 7) (list 11 20) (list 9 51) (list 22 37) (list 11 30) (list 2 77) (list 5 87) (list 13 5) (list 2 56) (list 23 25) (list 0 44) (list 19 23) (list 23 1) (list 3 70) (list 3 86) (list 17 92) (list 19 24) (list 23 39) (list 16 2) (list 15 45) (list 14 82) (list 21 30) (list 11 90) (list 7 82) (list 17 50) (list 12 66) (list 22 84) (list 15 71) (list 14 54))) (list 2002 290 12 0 0) 0.001)\n    (check-within (candidate 58 74 (list (list 38 21) (list 1 34) (list 29 15) (list 46 33) (list 56 7) (list 55 63) (list 7 32) (list 53 38) (list 30 73) (list 17 68) (list 32 26) (list 13 39) (list 10 22) (list 42 38) (list 29 9) (list 7 53) (list 17 2) (list 56 13) (list 34 26) (list 31 30) (list 16 21) (list 13 56) (list 16 72) (list 21 8) (list 47 28) (list 2 24) (list 32 23) (list 13 4) (list 37 29) (list 1 11) (list 45 70) (list 49 40) (list 11 61) (list 20 49) (list 11 4) (list 17 61) (list 11 68) (list 14 64) (list 31 10) (list 1 14) (list 10 47) (list 21 48) (list 46 51) (list 25 59) (list 45 12) (list 47 43) (list 32 39) (list 11 28) (list 55 46) (list 50 7))) (list 3964 196 1 0 0) 0.001)\n    (check-within (candidate 40 82 (list (list 11 63) (list 20 43) (list 16 53) (list 33 52) (list 7 30) (list 36 2) (list 25 65) (list 10 31) (list 4 29) (list 31 17) (list 14 52) (list 36 32) (list 35 68) (list 26 8) (list 20 68) (list 21 45) (list 7 46) (list 32 15) (list 33 13) (list 30 4) (list 32 9) (list 32 78) (list 32 66) (list 27 58) (list 20 14) (list 12 29) (list 8 80) (list 2 1) (list 1 0) (list 34 41) (list 1 3) (list 1 74) (list 0 69) (list 21 7) (list 36 16) (list 0 21) (list 4 80) (list 33 78) (list 18 11) (list 18 50) (list 17 63) (list 24 29))) (list 3000 156 3 0 0) 0.001)\n    (check-within (candidate 57 92 (list (list 38 14) (list 27 72))) (list 5088 8 0 0 0) 0.001)\n    (check-within (candidate 94 98 (list (list 39 62) (list 40 20) (list 47 78) (list 75 10) (list 52 82) (list 11 77) (list 52 21) (list 22 12) (list 75 42) (list 75 68) (list 42 39) (list 68 75) (list 1 29) (list 18 79) (list 56 82) (list 72 41) (list 52 28) (list 61 83) (list 44 55) (list 73 81) (list 43 71) (list 55 23) (list 4 13) (list 89 68) (list 36 57) (list 48 22) (list 64 49) (list 10 72) (list 84 80) (list 1 77) (list 50 7) (list 54 0) (list 76 9) (list 57 6) (list 7 81) (list 66 80))) (list 8880 140 1 0 0) 0.001)\n    (check-within (candidate 30 97 (list )) (list 2784 0 0 0 0) 0.001)\n    (check-within (candidate 11 28 (list (list 7 24) (list 8 22) (list 1 5) (list 6 21) (list 0 22) (list 0 15) (list 4 16) (list 2 11) (list 0 11) (list 1 3) (list 3 26) (list 1 20) (list 5 27) (list 9 8) (list 7 25) (list 0 19) (list 3 21) (list 2 13) (list 6 7) (list 5 13) (list 0 1) (list 4 18) (list 4 1) (list 2 24) (list 7 17) (list 3 15) (list 9 18) (list 1 25) (list 3 18) (list 4 27) (list 4 20) (list 4 7) (list 9 12) (list 7 1) (list 3 12) (list 5 26) (list 5 23) (list 2 4) (list 3 5) (list 6 18) (list 4 10) (list 8 8) (list 2 7) (list 7 15) (list 5 0) (list 4 9) (list 8 1) (list 8 0) (list 1 17) (list 3 9) (list 2 10) (list 1 13) (list 0 10) (list 8 14) (list 1 21) (list 1 10) (list 7 8) (list 4 6) (list 7 23) (list 0 20) (list 8 13) (list 3 24) (list 1 15) (list 5 24) (list 4 11) (list 9 14) (list 4 12) (list 7 2) (list 2 25) (list 2 9) (list 6 14) (list 0 25) (list 7 4) (list 4 2) (list 6 1) (list 4 8) (list 6 17))) (list 83 107 63 17 0) 0.001)\n    (check-within (candidate 6 47 (list (list 1 1) (list 1 23) (list 1 5) (list 0 22) (list 1 12) (list 0 24) (list 4 24) (list 2 8) (list 1 11) (list 0 31) (list 1 39) (list 0 43) (list 2 18) (list 1 17) (list 1 3) (list 3 10) (list 0 26) (list 2 38) (list 1 0) (list 3 37) (list 3 2) (list 1 26) (list 4 34) (list 3 24) (list 0 23))) (list 159 58 11 2 0) 0.001)\n    (check-within (candidate 45 88 (list (list 13 14) (list 6 48) (list 4 20) (list 18 57) (list 2 48) (list 0 70) (list 42 71) (list 20 70) (list 29 11) (list 34 24) (list 24 28) (list 38 45) (list 31 73) (list 41 85) (list 18 69))) (list 3770 58 0 0 0) 0.001)\n    (check-within (candidate 7 36 (list (list 2 21) (list 3 14) (list 4 18) (list 5 30) (list 4 26) (list 5 7) (list 2 31) (list 4 22) (list 0 0) (list 2 22) (list 4 6) (list 0 30) (list 0 19) (list 0 21) (list 3 11) (list 4 28) (list 5 25) (list 2 11) (list 0 23) (list 5 16) (list 3 29) (list 3 17) (list 4 11) (list 1 7) (list 1 19) (list 1 34) (list 5 19) (list 5 6) (list 5 28) (list 4 8) (list 2 9) (list 1 6) (list 4 24) (list 2 14) (list 1 24) (list 3 16) (list 0 2) (list 0 26) (list 5 27) (list 3 35) (list 2 16) (list 4 2) (list 4 32) (list 5 0) (list 0 34) (list 1 5) (list 2 4) (list 1 4) (list 0 22) (list 2 2) (list 3 19) (list 3 4) (list 1 10) (list 3 5) (list 1 29) (list 0 33) (list 0 3))) (list 63 99 42 6 0) 0.001)\n    (check-within (candidate 59 60 (list (list 4 37) (list 56 0) (list 32 53) (list 27 8) (list 18 42) (list 5 25) (list 11 46) (list 51 55) (list 55 16) (list 7 17) (list 47 1) (list 47 38) (list 28 7) (list 17 39) (list 29 59) (list 47 39) (list 56 42) (list 2 31) (list 41 16) (list 44 32) (list 27 1) (list 14 8) (list 38 52) (list 38 48) (list 40 12) (list 25 32) (list 15 55) (list 12 22) (list 0 38) (list 38 58) (list 54 52) (list 19 28) (list 39 45) (list 10 43) (list 44 26) (list 18 14) (list 34 30) (list 6 23) (list 39 22) (list 15 29) (list 50 31) (list 24 11) (list 12 5) (list 42 45) (list 18 38) (list 27 56) (list 33 58) (list 54 24) (list 40 24) (list 24 2) (list 28 44) (list 33 53) (list 49 57) (list 47 56) (list 50 18) (list 25 14) (list 56 54) (list 40 55) (list 53 44) (list 27 42) (list 39 23) (list 44 38) (list 25 2) (list 47 14) (list 27 50) (list 26 46) (list 15 1) (list 16 15) (list 55 56) (list 27 21) (list 6 7))) (list 3155 256 11 0 0) 0.001)\n    (check-within (candidate 89 90 (list (list 12 15) (list 31 16) (list 75 79) (list 86 48) (list 19 77) (list 39 82) (list 77 62) (list 75 35) (list 19 35))) (list 7796 36 0 0 0) 0.001)\n    (check-within (candidate 26 42 (list (list 7 13) (list 1 3) (list 11 32) (list 5 8) (list 11 4) (list 9 24) (list 0 0) (list 18 20) (list 13 35) (list 19 31) (list 15 35) (list 1 41) (list 18 40) (list 18 41) (list 14 11) (list 20 0) (list 11 6) (list 14 16) (list 0 11) (list 4 36) (list 9 12) (list 20 36) (list 14 33) (list 6 34) (list 0 12) (list 22 6) (list 22 34) (list 13 6) (list 12 1) (list 4 23) (list 6 18) (list 11 38) (list 19 17) (list 22 27) (list 21 6) (list 3 35) (list 9 11) (list 23 6) (list 22 29) (list 8 5) (list 6 26) (list 3 18) (list 0 2) (list 3 41) (list 24 6) (list 24 1) (list 7 9) (list 8 35) (list 0 6) (list 6 23) (list 13 40) (list 10 38) (list 10 20) (list 21 7) (list 20 11) (list 10 11) (list 19 3) (list 14 9) (list 1 5) (list 3 30) (list 9 9) (list 17 34) (list 18 16) (list 3 26) (list 18 19) (list 17 16) (list 2 17) (list 5 22) (list 5 41) (list 16 32) (list 9 7) (list 1 36) (list 6 30) (list 6 38) (list 9 20) (list 4 28) (list 12 8) (list 7 26) (list 5 30) (list 2 27) (list 3 32) (list 11 7) (list 7 41) (list 8 4) (list 10 34) (list 19 19) (list 13 32) (list 23 25))) (list 739 246 37 3 0) 0.001)\n    (check-within (candidate 31 46 (list (list 5 31) (list 13 5) (list 6 32) (list 3 24) (list 5 41) (list 22 22) (list 18 38) (list 29 11) (list 25 28) (list 10 43) (list 29 5) (list 10 28) (list 21 2) (list 27 1) (list 4 42) (list 18 2) (list 22 26) (list 22 4) (list 2 26) (list 21 4) (list 5 32) (list 0 43) (list 24 32) (list 2 30) (list 18 44) (list 18 43) (list 7 36) (list 15 13) (list 11 29) (list 6 17) (list 10 7) (list 15 8) (list 4 11) (list 9 7) (list 28 1) (list 0 15) (list 21 19) (list 6 0) (list 24 19) (list 1 0) (list 15 30) (list 1 18) (list 4 24) (list 1 9) (list 24 16) (list 22 28) (list 4 35) (list 14 15) (list 27 23) (list 13 1) (list 2 8) (list 4 20) (list 19 30) (list 15 11) (list 0 34) (list 27 21) (list 10 1) (list 10 33) (list 11 26) (list 13 40) (list 11 45) (list 25 4) (list 28 28) (list 4 7) (list 7 29) (list 3 45) (list 20 17) (list 25 38) (list 27 41) (list 23 35) (list 19 10) (list 2 7) (list 0 25) (list 4 18) (list 23 37) (list 6 38))) (list 1081 251 17 1 0) 0.001)\n    (check-within (candidate 11 21 (list (list 0 19) (list 2 8) (list 6 9) (list 5 15) (list 6 15) (list 2 5) (list 3 14) (list 2 10) (list 8 13) (list 4 2) (list 0 0) (list 7 19) (list 9 10) (list 8 19))) (list 153 43 4 0 0) 0.001)\n    (check-within (candidate 76 95 (list (list 16 61) (list 1 23) (list 51 8) (list 36 87) (list 60 92) (list 23 44) (list 28 93) (list 15 35) (list 8 68) (list 58 57) (list 58 80) (list 53 7) (list 47 25) (list 55 4) (list 6 61) (list 43 56) (list 6 40) (list 39 44) (list 67 76) (list 44 16) (list 40 93) (list 7 6) (list 59 44) (list 74 6) (list 1 72) (list 38 93) (list 58 51) (list 17 79) (list 73 79) (list 58 65) (list 45 28) (list 17 36) (list 69 94) (list 66 73) (list 56 1) (list 31 62) (list 62 68) (list 54 64) (list 72 46) (list 67 59) (list 9 47) (list 33 86) (list 45 49) (list 3 6) (list 63 59) (list 51 47) (list 31 74) (list 52 42) (list 34 80) (list 61 30) (list 62 4) (list 11 9) (list 44 21) (list 73 69) (list 7 77) (list 43 17) (list 53 22) (list 37 10) (list 49 5) (list 64 82) (list 51 77) (list 74 2) (list 60 2) (list 17 53) (list 16 51) (list 52 80) (list 22 23) (list 17 80) (list 52 26) (list 15 1) (list 19 59) (list 7 39))) (list 6768 278 4 0 0) 0.001)\n    (check-within (candidate 65 71 (list (list 62 8) (list 18 63) (list 23 43) (list 30 3) (list 40 48) (list 60 62) (list 58 9) (list 13 20) (list 47 46) (list 34 0) (list 11 6) (list 17 28) (list 20 34) (list 24 48) (list 24 18) (list 43 18) (list 31 59) (list 25 60) (list 15 68) (list 24 35) (list 33 47) (list 32 4) (list 26 42) (list 35 63) (list 31 22) (list 16 0) (list 45 45) (list 52 19) (list 46 49) (list 36 37) (list 11 10) (list 23 5) (list 4 13) (list 17 20) (list 14 41) (list 26 4) (list 21 7) (list 52 40) (list 31 18) (list 55 26) (list 17 57) (list 41 31) (list 1 47) (list 56 61) (list 46 38) (list 7 16) (list 53 13) (list 45 4) (list 1 69) (list 29 15) (list 46 12) (list 29 65) (list 61 10) (list 35 54) (list 33 26) (list 41 34) (list 55 48) (list 42 48) (list 0 8) (list 44 44) (list 52 10) (list 30 37) (list 14 54) (list 4 29) (list 50 58) (list 41 10) (list 30 19) (list 31 1) (list 31 62) (list 31 44) (list 53 7) (list 12 56) (list 57 69) (list 34 2) (list 34 16) (list 42 68) (list 45 15) (list 44 61) (list 15 60) (list 54 69) (list 1 39) (list 50 59) (list 51 47) (list 52 15) (list 33 69) (list 5 51) (list 19 38) (list 10 61) (list 42 17) (list 60 30))) (list 4131 344 5 0 0) 0.001)\n    (check-within (candidate 25 95 (list (list 8 74) (list 20 10) (list 18 56) (list 23 20) (list 7 16) (list 7 5) (list 23 52) (list 19 31) (list 11 93) (list 0 68) (list 4 3) (list 21 52) (list 17 61) (list 7 65) (list 11 20) (list 1 61) (list 20 63) (list 9 71) (list 11 63) (list 11 61) (list 0 74) (list 17 60) (list 16 12) (list 3 54) (list 23 66) (list 23 37) (list 14 0) (list 19 64) (list 18 82) (list 4 87) (list 14 82) (list 23 3) (list 11 86) (list 3 64) (list 9 32) (list 14 8) (list 1 24) (list 21 20) (list 21 38) (list 22 27) (list 21 82) (list 10 58) (list 19 5) (list 22 57) (list 18 44) (list 10 83))) (list 2081 172 3 0 0) 0.001)\n    (check-within (candidate 40 84 (list (list 19 36) (list 35 7) (list 3 78) (list 17 4) (list 28 8) (list 20 38) (list 12 38) (list 30 6) (list 37 45) (list 26 53) (list 11 46))) (list 3193 44 0 0 0) 0.001)\n    (check-within (candidate 8 57 (list (list 3 38) (list 1 41) (list 6 23) (list 0 54) (list 3 11) (list 3 44) (list 1 24) (list 0 38) (list 5 28))) (list 360 32 0 0 0) 0.001)\n    (check-within (candidate 32 41 (list (list 12 13) (list 20 33) (list 3 12) (list 28 40) (list 9 10) (list 18 10) (list 5 18) (list 9 24) (list 29 24) (list 9 33) (list 25 38) (list 29 17) (list 28 25) (list 0 35) (list 2 30) (list 18 37) (list 7 0) (list 14 21) (list 25 27) (list 17 33) (list 9 38) (list 19 22) (list 17 5) (list 18 4) (list 9 18) (list 15 6) (list 4 21) (list 12 4) (list 5 35) (list 19 26) (list 6 6) (list 0 2) (list 0 28) (list 1 13) (list 19 10) (list 5 16) (list 2 31) (list 24 2) (list 3 22) (list 23 12) (list 0 17) (list 6 30) (list 20 31) (list 10 32) (list 17 15) (list 1 34) (list 28 6) (list 21 15) (list 14 11) (list 27 23) (list 4 16) (list 2 11) (list 21 26) (list 23 19) (list 27 15) (list 3 5) (list 28 10) (list 1 2) (list 27 18) (list 19 36) (list 2 2) (list 17 13) (list 7 19) (list 25 0) (list 5 37) (list 30 6) (list 3 39) (list 28 30) (list 26 0) (list 9 5) (list 23 5) (list 27 6) (list 4 26) (list 15 39) (list 10 26))) (list 976 244 20 0 0) 0.001)\n    (check-within (candidate 63 99 (list (list 17 28) (list 7 39) (list 14 81) (list 44 4) (list 21 7) (list 21 95) (list 1 89) (list 57 74) (list 34 2) (list 55 56) (list 43 50) (list 52 28) (list 38 61) (list 35 62) (list 57 46) (list 30 72) (list 25 46) (list 4 32) (list 18 25) (list 53 98))) (list 5998 78 0 0 0) 0.001)\n    (check-within (candidate 44 97 (list (list 17 3) (list 29 4) (list 40 71) (list 32 45) (list 3 59) (list 22 34) (list 11 17) (list 17 43) (list 4 32) (list 8 8) (list 19 43) (list 12 19) (list 32 57) (list 9 15) (list 7 46) (list 4 39) (list 11 26) (list 17 87) (list 21 70) (list 12 58) (list 35 88) (list 12 72) (list 23 61) (list 23 43) (list 3 86) (list 31 30) (list 17 26) (list 14 22) (list 16 77) (list 41 73) (list 39 91) (list 41 74) (list 15 78) (list 31 36) (list 11 45) (list 9 57) (list 25 68) (list 42 28) (list 5 60) (list 38 72) (list 26 14) (list 33 48) (list 39 50) (list 38 33) (list 41 21) (list 39 86) (list 29 64) (list 4 69) (list 37 25) (list 28 85) (list 9 32) (list 9 76) (list 13 25) (list 26 43) (list 10 79) (list 2 2) (list 23 85) (list 39 29) (list 34 47) (list 13 17) (list 34 59) (list 27 84) (list 29 93) (list 17 89) (list 23 27) (list 9 16) (list 39 64) (list 3 37) (list 41 75) (list 32 26) (list 27 11))) (list 3853 266 9 0 0) 0.001)\n    (check-within (candidate 45 53 (list (list 15 41) (list 0 27) (list 24 15) (list 34 31) (list 36 27) (list 32 46) (list 1 39) (list 4 8) (list 18 8) (list 39 3) (list 2 50) (list 6 33) (list 25 46) (list 17 41) (list 27 46) (list 37 30) (list 41 23) (list 16 14) (list 21 17) (list 26 47) (list 31 47) (list 9 23) (list 32 21) (list 29 28) (list 37 41) (list 10 37) (list 21 31) (list 1 25) (list 31 19) (list 16 49) (list 2 22) (list 1 43) (list 39 33) (list 6 12) (list 12 39) (list 40 15) (list 31 50) (list 8 7) (list 5 21) (list 8 4) (list 30 10) (list 15 20) (list 9 21) (list 38 28) (list 42 14) (list 36 8) (list 27 5) (list 2 2) (list 13 32) (list 13 50) (list 22 8) (list 23 25) (list 33 23) (list 9 22) (list 28 12) (list 15 37) (list 40 10) (list 42 45) (list 1 11) (list 26 2) (list 30 18) (list 0 19) (list 15 38) (list 32 2) (list 26 19) (list 29 29) (list 24 21) (list 24 10) (list 19 8) (list 24 31) (list 37 34) (list 5 20) (list 11 30) (list 41 19) (list 34 43) (list 41 7) (list 38 36) (list 13 10) (list 39 14) (list 22 4) (list 34 27) (list 23 21) (list 9 24) (list 13 29) (list 14 30) (list 32 48) (list 9 47) (list 13 37) (list 3 4) (list 1 6) (list 19 48) (list 41 47) (list 40 33) (list 26 23) (list 1 4) (list 40 28) (list 31 37))) (list 1929 334 25 0 0) 0.001)\n    (check-within (candidate 36 62 (list (list 5 42) (list 14 2) (list 32 11) (list 28 38) (list 18 49) (list 23 52) (list 32 52) (list 15 39) (list 11 38) (list 15 54) (list 21 27) (list 14 0) (list 26 38) (list 4 43) (list 22 26) (list 5 17))) (list 2075 58 2 0 0) 0.001)\n    (check-within (candidate 30 98 (list (list 10 13) (list 23 8) (list 9 69) (list 20 70) (list 17 12) (list 12 39) (list 7 72) (list 14 0) (list 5 45) (list 21 24) (list 10 88) (list 2 8) (list 22 86) (list 2 28) (list 20 62) (list 6 82) (list 27 10) (list 7 28) (list 12 79) (list 21 38) (list 24 92) (list 0 47) (list 8 8) (list 26 3) (list 20 57) (list 12 36) (list 21 47) (list 19 12) (list 20 35) (list 28 26) (list 4 61) (list 5 90) (list 0 48) (list 14 50) (list 3 63) (list 17 93) (list 12 5) (list 12 94) (list 7 25))) (list 2664 148 1 0 0) 0.001)\n    (check-within (candidate 20 41 (list (list 11 3) (list 1 36) (list 17 23) (list 13 1) (list 14 33) (list 2 23) (list 0 5) (list 5 32) (list 14 36) (list 8 16) (list 0 9) (list 14 26) (list 8 9) (list 6 5) (list 10 12) (list 17 20) (list 10 33) (list 16 23) (list 12 40) (list 8 17) (list 12 35) (list 11 23) (list 6 34) (list 2 4) (list 7 0) (list 7 7) (list 8 27) (list 7 39) (list 13 19) (list 14 2) (list 9 23) (list 12 33) (list 14 20) (list 12 27) (list 15 22) (list 1 19) (list 10 17) (list 7 36) (list 4 29) (list 12 37) (list 7 18) (list 10 20))) (list 608 144 8 0 0) 0.001)\n    (check-within (candidate 60 73 (list (list 45 35) (list 12 1) (list 43 11) (list 58 9) (list 0 3) (list 51 34) (list 1 65) (list 15 55) (list 32 29) (list 41 36) (list 41 61) (list 5 39) (list 54 2) (list 21 35) (list 41 69) (list 12 71) (list 17 5) (list 56 59) (list 41 40) (list 49 17) (list 48 56) (list 18 71) (list 39 57) (list 1 46) (list 53 44) (list 40 46) (list 52 14) (list 57 68) (list 14 66) (list 20 26) (list 48 8) (list 46 22) (list 34 41) (list 15 47) (list 18 45) (list 16 29) (list 40 6) (list 51 51) (list 47 70) (list 29 64) (list 51 32) (list 18 40) (list 10 62) (list 5 28) (list 57 3) (list 43 69) (list 49 58) (list 8 7) (list 18 9) (list 24 0) (list 56 0) (list 23 39) (list 31 19) (list 56 12) (list 34 17) (list 13 42) (list 8 23) (list 28 20) (list 42 38) (list 5 16) (list 29 36) (list 56 47) (list 45 23) (list 51 58) (list 2 69) (list 2 44) (list 5 6) (list 53 6) (list 50 48) (list 51 64) (list 43 15) (list 37 70) (list 18 44) (list 41 23) (list 51 31) (list 31 10) (list 25 53) (list 28 46) (list 56 42) (list 7 49) (list 55 50) (list 31 26) (list 3 26) (list 43 52) (list 54 68) (list 21 37))) (list 3915 328 5 0 0) 0.001)\n    (check-within (candidate 37 80 (list (list 5 3) (list 29 79) (list 35 32) (list 29 8) (list 10 57))) (list 2826 18 0 0 0) 0.001)\n    (check-within (candidate 31 97 (list (list 29 40) (list 29 6) (list 11 73) (list 10 81) (list 12 92) (list 23 62) (list 16 86) (list 26 0) (list 9 95) (list 17 17) (list 22 60) (list 27 15) (list 15 70) (list 7 18) (list 1 27) (list 18 51) (list 14 38) (list 2 42) (list 26 43) (list 0 52) (list 1 69) (list 23 50) (list 26 68) (list 24 53) (list 23 31) (list 7 78) (list 18 23) (list 14 96) (list 25 49) (list 23 74) (list 11 35) (list 5 14) (list 24 35))) (list 2754 126 0 0 0) 0.001)\n    (check-within (candidate 17 43 (list (list 8 38) (list 2 23) (list 15 18) (list 1 3) (list 7 40) (list 3 30) (list 13 1) (list 12 40) (list 9 4) (list 0 10) (list 5 36) (list 3 15) (list 3 5) (list 7 23) (list 5 13) (list 11 26) (list 3 28) (list 14 23) (list 10 16) (list 2 11) (list 14 5) (list 11 32) (list 1 20) (list 4 0) (list 15 13) (list 3 12) (list 12 9) (list 3 31) (list 8 35) (list 8 17) (list 3 42) (list 1 36) (list 5 2) (list 13 14) (list 9 2) (list 6 28) (list 5 4) (list 2 1) (list 13 36) (list 2 24) (list 12 29) (list 15 3) (list 11 20) (list 2 25) (list 13 8) (list 4 17) (list 8 29) (list 0 33) (list 11 3) (list 0 29) (list 12 30) (list 6 16) (list 7 33) (list 13 7) (list 5 26) (list 14 24) (list 3 16) (list 0 11) (list 11 28) (list 11 34) (list 6 8) (list 4 25) (list 14 20) (list 8 0) (list 7 32) (list 7 27) (list 8 23) (list 5 14) (list 4 30) (list 14 3) (list 6 21) (list 6 41) (list 12 18) (list 14 25) (list 8 3) (list 8 14))) (list 418 219 34 1 0) 0.001)\n    (check-within (candidate 12 73 (list (list 7 64) (list 5 14) (list 5 46))) (list 780 12 0 0 0) 0.001)\n    (check-within (candidate 36 91 (list (list 14 10) (list 28 69) (list 34 15) (list 6 62) (list 2 44) (list 12 81) (list 19 47) (list 32 89) (list 13 59) (list 12 25) (list 8 62) (list 26 87) (list 31 29) (list 16 49) (list 4 46) (list 3 46) (list 10 47) (list 31 87) (list 15 44) (list 1 75) (list 0 61) (list 3 35) (list 3 58) (list 25 88) (list 15 56) (list 30 30) (list 13 26) (list 9 49) (list 24 56) (list 17 17) (list 19 85) (list 23 80) (list 5 68) (list 30 79) (list 34 34) (list 32 69) (list 19 58) (list 20 43) (list 4 40) (list 33 44) (list 21 71) (list 3 37) (list 34 54) (list 10 28) (list 9 62) (list 20 19) (list 21 84) (list 22 32) (list 9 90) (list 10 82) (list 19 38) (list 15 51) (list 32 11) (list 26 72) (list 34 46) (list 17 89) (list 16 28) (list 15 81) (list 0 39) (list 5 28) (list 10 5) (list 20 0) (list 32 40) (list 14 76) (list 8 72))) (list 2905 238 7 0 0) 0.001)\n    (check-within (candidate 11 76 (list (list 2 6) (list 1 36) (list 2 60) (list 3 57) (list 1 72) (list 5 15) (list 1 30) (list 1 28) (list 8 15) (list 4 39) (list 1 2) (list 0 56) (list 5 2) (list 4 27) (list 9 2) (list 3 67) (list 7 19) (list 6 54) (list 7 73) (list 9 51) (list 8 63) (list 0 27) (list 8 44) (list 5 31) (list 0 11))) (list 657 92 1 0 0) 0.001)\n    (check-within (candidate 24 70 (list (list 9 49) (list 13 17) (list 14 52) (list 17 13) (list 20 40) (list 6 62) (list 18 62) (list 14 9) (list 13 0) (list 15 34) (list 5 33) (list 18 1) (list 17 33) (list 6 63) (list 4 26) (list 3 28) (list 18 68) (list 2 15) (list 5 10) (list 21 13) (list 10 53) (list 5 35) (list 21 60) (list 9 59) (list 1 0) (list 15 53) (list 5 45) (list 0 42) (list 6 24) (list 9 9) (list 2 44) (list 8 12) (list 1 16) (list 13 29) (list 21 38) (list 20 39) (list 4 13) (list 17 56) (list 10 45) (list 3 65) (list 14 15) (list 5 62) (list 13 18) (list 4 35) (list 18 11) (list 12 31) (list 18 18) (list 7 50) (list 12 52) (list 11 47) (list 7 14) (list 11 61) (list 13 1) (list 2 1) (list 4 19) (list 15 8) (list 0 7) (list 18 15) (list 20 31) (list 1 17) (list 15 31) (list 7 39) (list 5 52) (list 8 9) (list 1 50) (list 16 34) (list 21 15) (list 8 66) (list 5 53) (list 18 43) (list 5 19) (list 9 61) (list 11 52) (list 18 36) (list 4 9) (list 21 28) (list 10 30) (list 17 68) (list 4 52) (list 16 38) (list 15 57) (list 13 35) (list 9 32) (list 2 65) (list 17 34) (list 14 1) (list 16 3))) (list 1290 258 35 4 0) 0.001)\n    (check-within (candidate 55 74 (list (list 33 73) (list 38 37) (list 4 69) (list 23 58) (list 47 17) (list 48 36) (list 46 42) (list 6 63) (list 22 23) (list 36 57) (list 20 38) (list 42 66) (list 31 6) (list 13 3) (list 5 40) (list 25 28) (list 50 7) (list 6 7) (list 23 66) (list 29 17) (list 5 67) (list 41 63) (list 2 53) (list 3 24) (list 25 49) (list 43 18) (list 27 11) (list 37 72) (list 30 14) (list 16 70) (list 22 71) (list 0 48) (list 21 4) (list 8 9) (list 38 57) (list 14 12) (list 13 54) (list 11 40) (list 10 28) (list 9 49) (list 31 24) (list 11 28) (list 11 51) (list 10 62) (list 46 39) (list 3 35) (list 23 15) (list 52 25) (list 37 55) (list 28 63) (list 1 2) (list 26 12) (list 29 30) (list 44 62) (list 35 34) (list 25 31) (list 8 63) (list 8 6) (list 38 14) (list 19 14) (list 8 28) (list 26 14) (list 27 36) (list 20 61) (list 23 12) (list 15 20))) (list 3685 254 3 0 0) 0.001)\n    (check-within (candidate 6 79 (list (list 2 64) (list 4 74) (list 2 3) (list 1 63) (list 2 34) (list 3 57) (list 1 1) (list 3 52) (list 1 56) (list 3 1) (list 1 61) (list 2 49) (list 1 66) (list 2 25) (list 1 20) (list 4 51) (list 0 78) (list 1 30))) (list 323 65 2 0 0) 0.001)\n    (check-within (candidate 36 75 (list (list 23 28) (list 21 10) (list 16 48) (list 26 45) (list 13 45) (list 24 66) (list 34 15) (list 20 13) (list 4 42) (list 17 14) (list 7 19) (list 8 5) (list 4 27) (list 16 32) (list 19 0) (list 27 69) (list 18 62) (list 18 63) (list 4 24) (list 15 51) (list 24 53) (list 6 46) (list 33 51) (list 13 65) (list 11 39) (list 14 37) (list 33 1) (list 5 16) (list 24 15) (list 30 63) (list 34 23) (list 12 22) (list 29 44) (list 19 8) (list 3 4) (list 12 67) (list 0 44) (list 4 65) (list 5 44) (list 16 13) (list 16 71) (list 16 10) (list 27 71) (list 28 56) (list 1 23) (list 11 42) (list 1 1) (list 10 19) (list 10 18) (list 8 55) (list 23 68) (list 12 23) (list 12 61) (list 31 3) (list 13 14) (list 20 30) (list 25 1) (list 4 37) (list 25 32))) (list 2365 218 7 0 0) 0.001)\n    (check-within (candidate 31 87 (list (list 12 40) (list 28 11) (list 20 65) (list 24 38) (list 21 65) (list 29 11) (list 11 8) (list 26 16) (list 8 25) (list 18 63) (list 11 69) (list 9 16) (list 14 25) (list 2 34) (list 7 14) (list 26 74) (list 27 51) (list 13 53) (list 25 2) (list 27 17) (list 3 45) (list 23 22) (list 28 38) (list 5 26) (list 23 33) (list 2 16) (list 14 41) (list 22 79) (list 25 75) (list 7 79) (list 9 6) (list 14 73) (list 15 61) (list 27 16) (list 29 21) (list 27 72) (list 16 17) (list 1 37))) (list 2437 135 7 1 0) 0.001)\n    (check-within (candidate 55 67 (list (list 44 3) (list 12 10) (list 20 17) (list 41 24) (list 25 40) (list 21 46) (list 5 9) (list 34 64) (list 29 40) (list 49 32) (list 19 37) (list 42 61) (list 35 46) (list 49 52) (list 16 65) (list 4 32) (list 20 48) (list 5 59) (list 28 26) (list 2 3) (list 40 28) (list 20 35) (list 4 29) (list 47 20) (list 3 8) (list 26 39) (list 7 54) (list 8 10) (list 37 5) (list 33 13) (list 3 44) (list 14 63) (list 21 24) (list 26 17) (list 11 60) (list 19 44) (list 46 23) (list 37 6) (list 9 64) (list 15 36) (list 1 36) (list 44 31) (list 3 24) (list 13 3) (list 49 39) (list 28 11) (list 21 32) (list 27 34) (list 44 52) (list 51 51) (list 17 50) (list 49 47) (list 0 5) (list 11 51) (list 37 23) (list 45 45) (list 50 19) (list 33 51) (list 14 36) (list 7 44) (list 3 36) (list 7 27) (list 18 54) (list 31 4) (list 15 12) (list 38 38) (list 52 33) (list 36 16) (list 25 42) (list 28 37) (list 24 50) (list 26 24) (list 48 26) (list 2 24) (list 33 10) (list 10 9) (list 25 26) (list 15 64) (list 52 58) (list 0 44) (list 7 48) (list 32 43) (list 10 6) (list 43 11) (list 50 53) (list 43 26) (list 13 45) (list 50 28) (list 40 0) (list 31 50) (list 42 51) (list 4 59) (list 18 62) (list 26 45) (list 22 44) (list 37 58) (list 38 43) (list 5 53) (list 23 1) (list 21 21))) (list 3182 370 12 0 0) 0.001)\n    (check-within (candidate 19 40 (list (list 8 25) (list 14 19) (list 9 0) (list 10 26) (list 11 8) (list 4 8) (list 2 0) (list 13 6) (list 4 24) (list 6 11) (list 5 19) (list 2 21) (list 4 11) (list 4 29) (list 1 25) (list 6 14) (list 0 28) (list 5 39) (list 7 33) (list 15 7) (list 13 25) (list 15 5) (list 9 34) (list 0 33) (list 6 10) (list 3 20) (list 6 13) (list 14 12) (list 6 17) (list 3 1) (list 2 30) (list 13 16) (list 14 1) (list 9 9) (list 14 10) (list 17 4) (list 13 39) (list 8 7) (list 16 19) (list 2 5) (list 10 19) (list 1 6) (list 15 4) (list 7 0) (list 3 18) (list 16 3) (list 14 21) (list 10 31) (list 11 31) (list 1 33) (list 2 23) (list 17 20) (list 8 9) (list 0 16) (list 4 32) (list 9 4) (list 9 8) (list 0 8) (list 1 0) (list 13 1) (list 1 34) (list 7 9) (list 8 34) (list 4 39) (list 10 7) (list 4 5) (list 9 12) (list 5 36) (list 15 0) (list 15 36) (list 6 22))) (list 478 190 32 2 0) 0.001)\n    (check-within (candidate 16 27 (list (list 7 4) (list 11 26) (list 2 21) (list 3 3) (list 13 11) (list 7 14) (list 0 8))) (list 366 24 0 0 0) 0.001)\n    (check-within (candidate 34 39 (list (list 4 12) (list 29 24) (list 15 28) (list 3 1) (list 7 0) (list 0 27) (list 15 5) (list 2 0) (list 16 7) (list 19 33) (list 3 11) (list 5 26) (list 29 32) (list 21 32) (list 31 10) (list 17 4) (list 23 32) (list 5 10) (list 3 12) (list 27 11) (list 12 26) (list 2 5) (list 1 0) (list 20 2) (list 11 26) (list 0 11) (list 12 4) (list 14 7) (list 13 18) (list 9 7) (list 16 9) (list 10 3) (list 3 33) (list 13 27) (list 27 18) (list 11 19) (list 18 13) (list 16 21) (list 2 15) (list 11 27) (list 13 33) (list 8 21) (list 16 19) (list 26 27) (list 3 36) (list 9 3) (list 13 38) (list 10 22) (list 1 38) (list 12 31) (list 13 13) (list 17 19) (list 30 1) (list 15 37) (list 21 5) (list 14 15) (list 6 37) (list 8 23) (list 26 22) (list 24 38) (list 21 23))) (list 1041 200 11 2 0) 0.001)\n    (check-within (candidate 26 41 (list (list 12 9) (list 1 18) (list 7 10) (list 22 0) (list 15 10) (list 12 3) (list 20 15) (list 0 27) (list 16 35) (list 20 40) (list 7 38) (list 13 27) (list 9 32) (list 4 26) (list 9 40) (list 4 1) (list 21 33) (list 16 12) (list 6 38) (list 22 40) (list 10 24) (list 20 21) (list 17 31) (list 12 6) (list 8 27) (list 9 15) (list 5 13) (list 14 31) (list 11 17) (list 20 31) (list 22 35) (list 23 19) (list 23 16) (list 3 15) (list 16 11) (list 23 27) (list 9 33) (list 16 3) (list 5 12) (list 21 20) (list 12 1) (list 13 30) (list 13 17) (list 13 22) (list 9 28) (list 7 8) (list 8 5) (list 19 15) (list 16 1) (list 23 36) (list 4 6) (list 18 40) (list 8 19) (list 5 2) (list 21 2) (list 23 7))) (list 804 180 16 0 0) 0.001)\n    (check-within (candidate 39 68 (list (list 35 51) (list 9 25) (list 13 28) (list 14 62) (list 24 6))) (list 2526 20 0 0 0) 0.001)\n    (check-within (candidate 33 94 (list (list 15 21) (list 0 63) (list 25 30) (list 11 77) (list 6 65) (list 14 5) (list 3 18) (list 30 61) (list 21 52) (list 17 8) (list 10 69) (list 24 84) (list 19 18) (list 10 75) (list 4 47) (list 8 9) (list 17 22) (list 3 70) (list 30 90) (list 22 58) (list 15 84) (list 4 78) (list 8 15) (list 20 18) (list 23 60) (list 26 83) (list 27 14) (list 5 31) (list 2 48) (list 18 48) (list 16 33) (list 6 31) (list 1 82) (list 5 46) (list 19 13) (list 0 86) (list 3 44) (list 9 49) (list 13 47) (list 0 4) (list 31 52) (list 6 68) (list 15 79) (list 29 47) (list 6 4) (list 5 33) (list 10 9) (list 30 50) (list 9 77) (list 13 79) (list 20 87) (list 11 27) (list 23 86))) (list 2775 196 5 0 0) 0.001)\n    (check-within (candidate 65 78 (list (list 43 38) (list 0 36) (list 40 68) (list 52 19) (list 16 59) (list 10 35) (list 23 1) (list 1 58) (list 29 38) (list 19 49) (list 34 40) (list 57 37) (list 32 66) (list 35 37) (list 16 10) (list 53 51) (list 9 53) (list 23 40) (list 42 74) (list 31 51) (list 17 51) (list 21 32) (list 33 72))) (list 4838 90 0 0 0) 0.001)\n    (check-within (candidate 47 80 (list (list 26 59) (list 14 64) (list 4 67) (list 17 51) (list 10 66) (list 18 78) (list 17 69) (list 33 57) (list 18 44) (list 16 78) (list 27 39) (list 22 18) (list 16 69) (list 21 5) (list 19 52) (list 39 40) (list 13 17) (list 15 10) (list 30 33) (list 9 67) (list 34 10) (list 3 39) (list 32 52) (list 33 71) (list 24 65) (list 15 57) (list 43 53))) (list 3529 102 3 0 0) 0.001)\n    (check-within (candidate 42 99 (list (list 27 29) (list 39 18) (list 40 17) (list 36 14) (list 17 76) (list 15 67) (list 2 41) (list 37 70) (list 34 67) (list 36 15) (list 23 57) (list 7 46) (list 7 42) (list 3 91) (list 3 32) (list 17 30) (list 35 37) (list 25 91) (list 32 83) (list 20 81) (list 20 19) (list 23 51) (list 17 10) (list 23 61) (list 18 24) (list 3 13) (list 16 48) (list 0 88) (list 31 81) (list 4 20) (list 34 95) (list 30 22) (list 28 58) (list 4 50) (list 1 77) (list 4 13) (list 7 37) (list 13 1) (list 28 75) (list 28 77) (list 4 4) (list 31 20) (list 40 6) (list 18 65))) (list 3849 164 5 0 0) 0.001)\n    (check-within (candidate 77 80 (list (list 34 8) (list 7 40) (list 67 29) (list 64 70) (list 32 71) (list 17 29) (list 19 15) (list 6 77) (list 68 39) (list 11 9) (list 9 59) (list 19 63) (list 44 11) (list 24 54) (list 13 15) (list 10 23) (list 27 35) (list 14 68) (list 9 61) (list 17 74) (list 44 56) (list 37 78) (list 20 68) (list 7 58) (list 9 38) (list 72 22) (list 72 33) (list 41 33) (list 64 63) (list 22 69) (list 2 12) (list 51 73) (list 43 32) (list 16 57) (list 11 16) (list 3 38) (list 14 45) (list 73 28) (list 8 51) (list 72 42) (list 18 65) (list 45 42) (list 42 18) (list 34 38) (list 47 50) (list 47 0) (list 29 32) (list 15 66) (list 43 61) (list 49 36) (list 69 71) (list 47 45) (list 55 64) (list 1 62) (list 42 0) (list 18 49) (list 57 48) (list 22 16) (list 14 7) (list 56 10) (list 49 42) (list 19 46) (list 40 68) (list 65 49) (list 8 20) (list 12 0) (list 31 17) (list 50 6) (list 8 14) (list 6 38) (list 32 67) (list 4 3) (list 10 13) (list 44 8) (list 21 43) (list 70 34) (list 49 22) (list 72 47) (list 59 59) (list 56 72) (list 33 30) (list 18 20) (list 2 76) (list 22 33))) (list 5674 330 0 0 0) 0.001)\n    (check-within (candidate 53 93 (list )) (list 4784 0 0 0 0) 0.001)\n    (check-within (candidate 48 91 (list (list 19 79) (list 30 11) (list 6 54) (list 35 3) (list 41 20) (list 8 3) (list 8 46) (list 37 67) (list 21 61) (list 27 70) (list 15 32) (list 44 61) (list 1 70) (list 9 68) (list 28 16) (list 19 43) (list 12 68) (list 21 12) (list 7 77) (list 18 32) (list 1 25) (list 31 11) (list 1 82) (list 10 18) (list 31 86) (list 21 24) (list 11 43) (list 15 4) (list 8 12) (list 39 68) (list 11 65) (list 37 53) (list 10 39) (list 30 61) (list 34 46) (list 33 9) (list 30 64) (list 27 59) (list 31 60) (list 14 64) (list 11 70) (list 16 83) (list 28 15) (list 26 21) (list 33 71) (list 31 53) (list 39 36) (list 27 77) (list 41 82) (list 21 45) (list 3 59) (list 42 14) (list 19 59) (list 5 57))) (list 4019 206 5 0 0) 0.001)\n    (check-within (candidate 53 77 (list (list 29 74) (list 44 76) (list 10 11) (list 11 14) (list 45 0) (list 41 19) (list 32 49) (list 21 50) (list 14 41) (list 7 74) (list 42 47) (list 50 19) (list 6 34) (list 47 0) (list 19 64) (list 39 25) (list 49 46) (list 45 1) (list 9 67) (list 51 19) (list 6 59) (list 24 52) (list 40 61) (list 48 23) (list 23 49) (list 4 64) (list 40 27) (list 49 42) (list 17 30) (list 13 14) (list 3 49) (list 41 14) (list 36 0) (list 5 32) (list 6 1) (list 4 27) (list 11 22) (list 26 37) (list 5 61) (list 22 15) (list 42 1) (list 9 33) (list 20 25) (list 44 38) (list 46 16) (list 10 20) (list 45 13) (list 31 27) (list 27 70) (list 22 11) (list 28 17))) (list 3760 188 4 0 0) 0.001)\n    (check-within (candidate 12 69 (list (list 8 6) (list 1 19) (list 0 23) (list 7 8) (list 7 31) (list 10 16) (list 9 2) (list 6 1) (list 8 63) (list 7 45) (list 5 40) (list 1 27) (list 2 14) (list 6 54) (list 0 4) (list 1 62) (list 4 45) (list 5 31) (list 7 33) (list 2 38))) (list 672 76 0 0 0) 0.001)\n    (check-within (candidate 49 78 (list (list 4 26) (list 9 25) (list 9 77) (list 42 45) (list 47 12) (list 30 68) (list 15 63) (list 23 11) (list 24 24) (list 23 49) (list 26 77))) (list 3656 40 0 0 0) 0.001)\n    (check-within (candidate 63 95 (list (list 36 71) (list 2 38) (list 25 72) (list 16 54) (list 38 59) (list 44 82) (list 7 57) (list 8 65) (list 5 90) (list 8 82) (list 56 26) (list 39 15) (list 36 30) (list 31 53) (list 59 80) (list 38 25) (list 50 47) (list 12 72) (list 27 26) (list 41 23) (list 20 25) (list 19 74) (list 22 18) (list 19 75) (list 53 61) (list 25 17) (list 12 22) (list 32 40) (list 40 1) (list 6 7) (list 6 24) (list 46 43) (list 39 84) (list 17 92) (list 12 91) (list 32 25) (list 20 68) (list 11 12) (list 23 20) (list 7 36) (list 42 22) (list 21 69) (list 19 9) (list 25 8) (list 57 82) (list 52 83) (list 43 81) (list 60 19) (list 26 83) (list 18 73) (list 44 12) (list 30 45) (list 25 84) (list 55 77) (list 35 41) (list 53 8) (list 0 44) (list 29 36) (list 36 69) (list 9 53) (list 37 15) (list 24 0) (list 13 60) (list 31 62) (list 56 84) (list 45 59) (list 45 82) (list 58 35) (list 12 15) (list 34 60) (list 28 51) (list 18 40) (list 53 73) (list 10 48) (list 28 6) (list 8 16) (list 41 34) (list 50 15) (list 23 30) (list 33 21) (list 2 34))) (list 5517 302 9 0 0) 0.001)\n    (check-within (candidate 42 58 (list (list 35 34) (list 26 21) (list 17 14) (list 34 44) (list 12 51) (list 1 33) (list 23 17) (list 30 54) (list 25 46) (list 39 12) (list 21 13) (list 26 37) (list 13 38) (list 37 10) (list 27 57) (list 3 14) (list 19 31))) (list 2271 66 0 0 0) 0.001)\n    (check-within (candidate 6 12 (list (list 4 7) (list 2 11) (list 0 7) (list 0 10) (list 1 4) (list 2 0) (list 2 10) (list 0 8) (list 3 8) (list 3 2) (list 0 5) (list 1 10) (list 0 9) (list 3 4) (list 2 9) (list 1 1) (list 3 7) (list 2 3) (list 0 0))) (list 18 19 14 4 0) 0.001)\n    (check-within (candidate 51 77 (list (list 41 39) (list 28 5) (list 6 8) (list 36 7) (list 2 46) (list 18 75) (list 12 63) (list 42 26) (list 16 42) (list 6 9) (list 9 55) (list 37 61) (list 8 69) (list 35 10) (list 34 51) (list 33 2) (list 37 64) (list 5 32) (list 17 53) (list 38 51) (list 42 18) (list 24 35) (list 8 25) (list 17 58) (list 41 53) (list 2 9) (list 48 37) (list 13 7) (list 47 20) (list 28 59) (list 17 8) (list 32 27) (list 39 16) (list 43 74) (list 38 61) (list 40 14) (list 35 28) (list 9 46) (list 30 44) (list 46 12) (list 7 45) (list 26 76) (list 34 10) (list 28 51) (list 47 1) (list 46 65) (list 29 71) (list 2 24) (list 11 43) (list 16 28) (list 33 40) (list 18 29) (list 8 73) (list 30 55) (list 0 47) (list 45 34) (list 3 45) (list 16 5) (list 33 9) (list 4 68) (list 36 47) (list 11 39) (list 8 37) (list 6 63) (list 42 51) (list 4 16) (list 37 5) (list 32 60) (list 40 17) (list 9 14) (list 5 29) (list 22 34) (list 47 21) (list 44 37) (list 2 75) (list 21 76) (list 30 46) (list 20 60))) (list 3505 284 11 0 0) 0.001)\n    (check-within (candidate 58 65 (list (list 20 24) (list 4 13) (list 38 14) (list 41 21) (list 6 36) (list 12 3) (list 51 52) (list 10 7) (list 14 50) (list 47 60) (list 30 59) (list 46 58) (list 55 49) (list 35 25) (list 15 53) (list 24 39) (list 55 40) (list 4 43) (list 36 28) (list 21 38) (list 36 1) (list 44 42) (list 12 26) (list 50 30) (list 36 14) (list 53 0) (list 11 48) (list 0 55) (list 42 17) (list 34 48) (list 15 43) (list 13 6) (list 33 29) (list 32 20) (list 12 13) (list 7 1) (list 22 41) (list 26 64) (list 16 16) (list 3 5) (list 14 0) (list 39 19) (list 32 47) (list 47 14) (list 51 64) (list 51 12) (list 7 45) (list 43 46) (list 47 28) (list 50 60) (list 45 8) (list 6 30) (list 9 35) (list 21 47) (list 17 39))) (list 3438 210 0 0 0) 0.001)\n    (check-within (candidate 6 10 (list (list 2 7) (list 0 4) (list 3 3) (list 0 2) (list 3 0) (list 4 2) (list 2 1))) (list 25 18 2 0 0) 0.001)\n    (check-within (candidate 37 75 (list (list 34 9) (list 30 27) (list 20 54) (list 35 35) (list 24 8) (list 0 68) (list 22 23) (list 10 20) (list 4 32) (list 8 20) (list 33 6) (list 7 63) (list 17 72) (list 8 37) (list 28 48) (list 25 24) (list 25 74) (list 20 38) (list 9 51) (list 10 74) (list 3 37) (list 20 17) (list 11 31) (list 14 67) (list 19 26) (list 34 7) (list 31 51) (list 5 47) (list 24 28))) (list 2555 108 1 0 0) 0.001)\n    (check-within (candidate 32 90 (list (list 14 54) (list 13 33) (list 27 23) (list 28 68) (list 23 46) (list 12 22) (list 4 85) (list 4 41) (list 26 32) (list 0 42) (list 16 24) (list 17 83) (list 28 75) (list 4 39) (list 5 46) (list 10 51) (list 27 88) (list 6 69) (list 22 11) (list 7 9) (list 19 37) (list 0 74) (list 24 85) (list 28 74) (list 28 3) (list 13 80) (list 9 30) (list 16 86) (list 3 22) (list 2 3) (list 21 68) (list 11 32) (list 19 68) (list 25 83) (list 25 31) (list 12 10) (list 26 3) (list 16 57) (list 24 47) (list 12 73) (list 21 87) (list 9 28) (list 21 16) (list 23 29) (list 25 13) (list 23 82) (list 19 7) (list 29 11) (list 21 78) (list 24 23) (list 7 66) (list 9 57) (list 6 78) (list 13 22) (list 0 39) (list 20 48) (list 18 66) (list 17 77) (list 25 66) (list 11 25) (list 19 26) (list 20 75) (list 29 63) (list 3 52) (list 28 15) (list 13 84) (list 12 21) (list 0 4) (list 7 60) (list 16 74) (list 1 3) (list 7 5) (list 14 27) (list 22 4) (list 12 6) (list 16 0) (list 16 14) (list 12 17) (list 27 75) (list 20 16) (list 0 16) (list 9 26) (list 4 43) (list 19 0) (list 22 81) (list 12 71) (list 15 54) (list 3 61) (list 13 72) (list 7 71) (list 2 30) (list 2 18) (list 16 15) (list 28 5) (list 2 7) (list 25 89))) (list 2413 326 18 2 0) 0.001)\n    (check-within (candidate 21 81 (list (list 5 71) (list 9 65) (list 12 36) (list 19 38) (list 7 66) (list 7 2) (list 14 13) (list 4 71) (list 19 32) (list 14 30) (list 13 21) (list 16 79) (list 0 2) (list 3 27) (list 13 72) (list 18 49) (list 0 72) (list 0 52) (list 18 24) (list 18 41) (list 13 7) (list 1 29) (list 15 24) (list 16 2) (list 8 25) (list 5 51) (list 19 15) (list 12 18) (list 16 61) (list 9 6) (list 7 61) (list 18 37) (list 10 79) (list 6 35) (list 17 12) (list 2 36) (list 13 64) (list 9 59) (list 5 42) (list 19 30) (list 7 51) (list 15 53) (list 10 75) (list 2 34) (list 8 0) (list 2 70) (list 3 36) (list 12 38) (list 4 35) (list 9 25) (list 13 68) (list 13 13) (list 14 25) (list 6 48) (list 15 33) (list 15 29))) (list 1396 192 12 0 0) 0.001)\n    (check-within (candidate 44 54 (list (list 37 23) (list 27 31) (list 19 28) (list 30 2) (list 15 29) (list 4 40) (list 7 47) (list 36 18) (list 17 49) (list 18 51) (list 29 42) (list 8 34) (list 28 51) (list 17 27) (list 18 49) (list 26 16) (list 34 39) (list 11 19) (list 20 43) (list 23 47) (list 25 0) (list 20 32) (list 16 5) (list 29 30) (list 22 3) (list 4 12) (list 13 8) (list 5 6) (list 35 40) (list 15 49) (list 27 14) (list 37 8) (list 41 15) (list 0 16) (list 37 37) (list 38 31) (list 36 52) (list 18 22) (list 30 3) (list 31 18))) (list 2128 146 5 0 0) 0.001)\n    (check-within (candidate 2 52 (list (list 0 24) (list 0 29) (list 0 14) (list 0 23) (list 0 33) (list 0 51) (list 0 27) (list 0 50) (list 0 7) (list 0 32) (list 0 9) (list 0 26) (list 0 17) (list 0 31) (list 0 19) (list 0 11) (list 0 3) (list 0 15) (list 0 20) (list 0 12) (list 0 18) (list 0 45) (list 0 48) (list 0 41) (list 0 8) (list 0 42) (list 0 47) (list 0 43) (list 0 2) (list 0 34) (list 0 0) (list 0 5) (list 0 49) (list 0 4) (list 0 36) (list 0 40) (list 0 44) (list 0 6) (list 0 38) (list 0 22) (list 0 13))) (list 0 22 29 0 0) 0.001)\n    (check-within (candidate 3 75 (list (list 0 49) (list 1 17) (list 1 18) (list 0 20) (list 1 65) (list 0 35) (list 1 70) (list 1 20) (list 0 43) (list 1 58) (list 1 36) (list 0 28) (list 0 74) (list 0 30) (list 1 51) (list 1 63) (list 1 66))) (list 102 39 7 0 0) 0.001)\n    (check-within (candidate 33 93 (list (list 18 53) (list 29 30) (list 29 23) (list 10 74) (list 5 25) (list 17 26) (list 5 87) (list 27 11) (list 29 16) (list 22 34) (list 19 86) (list 24 80) (list 11 46) (list 13 41) (list 7 24) (list 24 86) (list 30 89) (list 17 92) (list 11 21) (list 8 71) (list 7 8) (list 24 21) (list 22 32) (list 27 21) (list 29 17) (list 4 25) (list 22 91) (list 23 81) (list 10 59) (list 19 87) (list 20 16) (list 30 56) (list 13 70) (list 18 78) (list 13 27) (list 3 48) (list 8 3) (list 1 27) (list 16 62) (list 3 46) (list 6 23) (list 22 12) (list 0 26) (list 18 91) (list 0 1) (list 8 36) (list 8 16) (list 27 17) (list 12 1) (list 9 88))) (list 2760 174 10 0 0) 0.001)\n    (check-within (candidate 70 88 (list (list 40 71) (list 29 33) (list 59 67) (list 55 61) (list 17 41))) (list 5983 20 0 0 0) 0.001)\n    (check-within (candidate 76 88 (list (list 39 76) (list 42 86) (list 4 51) (list 60 0) (list 5 28) (list 1 46) (list 28 25) (list 21 12) (list 5 39) (list 19 20) (list 71 58) (list 70 25) (list 38 32) (list 42 51) (list 49 62) (list 39 20) (list 48 24) (list 10 14) (list 17 85) (list 27 2) (list 5 40) (list 56 23) (list 21 67) (list 15 28) (list 15 84) (list 73 34) (list 50 81) (list 20 68) (list 0 30) (list 30 53) (list 33 82) (list 58 65) (list 4 7) (list 73 50) (list 55 25) (list 45 59) (list 69 78) (list 63 47) (list 19 83) (list 46 41) (list 23 66) (list 0 76) (list 63 18) (list 1 3) (list 18 71) (list 27 79) (list 51 21) (list 9 46) (list 48 30) (list 11 30) (list 67 74) (list 74 9) (list 8 8) (list 29 9) (list 66 4) (list 52 42) (list 21 56) (list 40 74) (list 16 57) (list 54 64) (list 41 4) (list 20 64) (list 28 9) (list 55 85) (list 13 35) (list 15 33) (list 43 43) (list 24 61) (list 11 52) (list 34 70) (list 19 66) (list 23 57) (list 68 86) (list 58 53) (list 23 19) (list 46 10) (list 59 49) (list 66 9) (list 24 64) (list 23 36) (list 20 10) (list 1 68) (list 12 20) (list 8 73) (list 59 41))) (list 6196 324 5 0 0) 0.001)\n    (check-within (candidate 77 92 (list (list 57 46) (list 24 2) (list 13 78) (list 50 91) (list 50 3) (list 17 80) (list 62 17) (list 5 88) (list 17 53) (list 73 42) (list 10 62) (list 21 60) (list 36 45) (list 36 53) (list 57 29) (list 68 43) (list 4 80) (list 74 26) (list 18 23) (list 44 69) (list 9 16) (list 52 20) (list 25 13) (list 0 60) (list 23 80) (list 26 23) (list 49 34) (list 58 71) (list 24 53) (list 56 82) (list 30 63) (list 53 19) (list 34 14) (list 47 5) (list 2 49) (list 20 2) (list 38 87) (list 30 46) (list 56 48) (list 34 1) (list 24 14) (list 70 40) (list 33 74) (list 65 86) (list 17 39) (list 48 80) (list 24 19) (list 30 90) (list 17 61) (list 31 83) (list 66 79) (list 25 30) (list 57 51) (list 25 43) (list 54 47) (list 60 12) (list 17 67) (list 2 57) (list 40 32) (list 58 90) (list 19 62) (list 9 47) (list 45 26) (list 0 37) (list 10 65) (list 64 1) (list 64 38) (list 2 34) (list 53 4) (list 16 37) (list 2 22) (list 69 91) (list 27 64) (list 50 4) (list 27 88) (list 17 47) (list 9 28) (list 19 57) (list 35 88) (list 4 55) (list 7 21) (list 37 68) (list 8 83) (list 70 37) (list 38 0) (list 40 89) (list 5 36) (list 74 37) (list 59 64) (list 28 89) (list 34 75) (list 42 21) (list 51 26) (list 21 57) (list 66 63))) (list 6552 358 6 0 0) 0.001)\n    (check-within (candidate 25 52 (list (list 7 8) (list 3 21) (list 10 39) (list 12 35) (list 20 21) (list 5 37) (list 4 28) (list 15 49) (list 14 26) (list 12 47) (list 10 28))) (list 1180 44 0 0 0) 0.001)\n    (check-within (candidate 78 84 (list (list 70 29) (list 22 36) (list 60 16) (list 39 28) (list 67 15) (list 50 11) (list 69 28) (list 24 32) (list 48 52))) (list 6356 34 1 0 0) 0.001)\n    (check-within (candidate 46 76 (list (list 18 2) (list 41 13) (list 38 28) (list 9 54) (list 35 67) (list 31 72) (list 29 47) (list 44 16) (list 35 5) (list 36 14) (list 16 69) (list 34 74) (list 15 32) (list 37 29) (list 41 37) (list 5 9) (list 26 68) (list 40 38) (list 30 38) (list 42 57) (list 2 2) (list 42 54) (list 4 23) (list 40 15) (list 22 18) (list 0 28) (list 34 33) (list 37 17) (list 24 49) (list 25 73) (list 35 63) (list 20 60) (list 20 16) (list 10 50) (list 24 46) (list 26 8) (list 43 56) (list 9 37) (list 24 56) (list 42 73) (list 2 9) (list 14 72) (list 35 0) (list 40 20) (list 30 8) (list 12 30) (list 15 37) (list 42 75) (list 31 2) (list 43 34) (list 24 18) (list 19 27) (list 42 23) (list 6 70) (list 22 21) (list 15 63) (list 13 39) (list 36 12) (list 13 46) (list 23 71) (list 21 44) (list 21 26) (list 3 15) (list 41 41) (list 17 43) (list 34 47) (list 4 65) (list 36 18) (list 19 1) (list 31 55) (list 44 21) (list 15 9) (list 18 46) (list 29 32) (list 32 19) (list 1 48) (list 41 55) (list 40 66) (list 43 3) (list 32 25) (list 36 49) (list 7 5) (list 26 4) (list 27 21) (list 27 44))) (list 3047 322 6 0 0) 0.001)\n    (check-within (candidate 6 35 (list (list 1 26) (list 4 24) (list 2 2) (list 4 17) (list 2 5) (list 3 32) (list 3 21) (list 1 0) (list 2 8) (list 4 20) (list 1 4) (list 2 9) (list 1 17) (list 3 1) (list 0 2) (list 4 6) (list 0 18) (list 4 23) (list 2 24) (list 0 16) (list 1 15) (list 3 22) (list 2 12) (list 1 18) (list 4 21) (list 0 26) (list 4 19) (list 4 2) (list 3 34) (list 0 24) (list 3 31) (list 2 34) (list 3 2) (list 1 24) (list 0 33) (list 0 31))) (list 81 59 25 5 0) 0.001)\n    (check-within (candidate 95 99 (list (list 40 34) (list 77 26) (list 5 19) (list 84 36) (list 6 42) (list 92 59) (list 67 70) (list 62 38) (list 87 44) (list 79 79) (list 92 44) (list 75 85) (list 43 2) (list 91 34) (list 78 69) (list 19 1) (list 10 15) (list 82 79) (list 28 14) (list 79 72) (list 57 84) (list 75 93) (list 29 93) (list 91 66) (list 84 38) (list 76 81) (list 5 11) (list 32 7) (list 48 25) (list 10 70) (list 67 37) (list 31 91) (list 45 19) (list 59 19) (list 29 98) (list 37 57) (list 83 18) (list 44 80) (list 91 27) (list 74 69) (list 13 62) (list 5 23) (list 91 70) (list 89 71) (list 11 32) (list 82 30) (list 45 61) (list 10 50) (list 25 65) (list 22 32) (list 77 13) (list 9 79) (list 69 37) (list 77 63) (list 6 48) (list 7 77) (list 35 8) (list 27 94) (list 45 37) (list 30 78) (list 81 21) (list 89 84) (list 75 73) (list 74 18) (list 4 28) (list 10 66) (list 43 54) (list 28 7) (list 26 41) (list 2 74) (list 6 70) (list 8 30) (list 18 98) (list 63 10) (list 22 98))) (list 8918 294 0 0 0) 0.001)\n    (check-within (candidate 57 91 (list (list 42 12) (list 38 56) (list 28 82) (list 54 52) (list 24 5))) (list 5020 20 0 0 0) 0.001)\n    (check-within (candidate 60 73 (list (list 22 24) (list 22 4) (list 45 1) (list 38 57) (list 54 41) (list 6 58) (list 8 44) (list 40 42) (list 19 47) (list 31 47) (list 48 33) (list 43 37) (list 22 54) (list 36 23) (list 23 9) (list 51 15) (list 24 39) (list 32 0) (list 17 7) (list 41 27) (list 39 12) (list 11 10) (list 22 58) (list 13 69) (list 37 37) (list 17 48) (list 18 19) (list 52 40) (list 52 32) (list 11 2) (list 32 21) (list 39 33) (list 32 1) (list 54 17) (list 0 71) (list 7 21) (list 18 24) (list 0 13) (list 22 29) (list 49 62) (list 44 63) (list 53 53) (list 31 44) (list 28 5) (list 46 65) (list 37 27) (list 39 55) (list 16 56) (list 33 10) (list 40 19) (list 43 58) (list 6 65) (list 24 41) (list 48 61) (list 28 46) (list 0 15) (list 0 55) (list 29 49) (list 5 72) (list 34 21) (list 33 40) (list 14 34) (list 9 70) (list 3 48) (list 16 15) (list 56 68) (list 18 68) (list 2 13) (list 47 38) (list 55 55) (list 22 13) (list 19 59) (list 48 60) (list 53 2) (list 46 67) (list 58 9) (list 56 67) (list 23 50))) (list 3955 286 7 0 0) 0.001)\n    (check-within (candidate 14 76 (list (list 1 20) (list 9 9) (list 6 57) (list 3 8) (list 6 71) (list 2 67) (list 12 53) (list 6 44) (list 6 16) (list 3 26) (list 10 39) (list 7 4))) (list 927 48 0 0 0) 0.001)\n    (check-within (candidate 69 72 (list (list 45 12) (list 54 37) (list 43 47) (list 4 45) (list 28 24) (list 56 5) (list 10 67) (list 30 0) (list 34 48) (list 40 45) (list 27 47) (list 47 58) (list 63 59) (list 53 53) (list 24 31) (list 16 51) (list 55 40) (list 42 27) (list 7 38) (list 3 0) (list 9 43) (list 17 15) (list 63 52) (list 27 24) (list 6 32) (list 13 50) (list 55 68) (list 11 34) (list 42 18) (list 20 42) (list 48 20) (list 36 8) (list 29 50) (list 4 55) (list 33 24) (list 43 32) (list 20 67) (list 29 37) (list 36 7) (list 66 60) (list 61 6) (list 8 28) (list 55 31) (list 61 17) (list 55 49) (list 64 33) (list 32 9) (list 54 67) (list 34 40) (list 52 39) (list 45 64) (list 4 38) (list 44 8) (list 48 34) (list 35 14) (list 25 43) (list 35 31) (list 10 21) (list 63 13) (list 7 0) (list 13 54) (list 54 68) (list 13 44) (list 51 62) (list 17 28) (list 33 31) (list 8 70) (list 25 32) (list 44 49) (list 25 16) (list 35 44) (list 23 37) (list 23 48) (list 8 49) (list 23 42))) (list 4543 277 7 1 0) 0.001)\n    (check-within (candidate 29 79 (list (list 26 78) (list 24 55) (list 3 8) (list 3 55) (list 12 76) (list 11 23) (list 4 52) (list 5 73) (list 27 21) (list 8 19) (list 14 54) (list 10 4) (list 8 23) (list 13 16) (list 4 1) (list 21 47) (list 11 15) (list 2 26) (list 24 59) (list 12 22) (list 2 69) (list 20 1) (list 10 74) (list 25 53) (list 0 13) (list 9 28) (list 7 4) (list 10 76) (list 13 75) (list 24 25) (list 14 19) (list 12 7) (list 5 53) (list 5 59) (list 7 41) (list 8 25) (list 7 65) (list 23 48) (list 18 37) (list 7 67) (list 2 76) (list 8 64) (list 22 46) (list 2 16) (list 20 31) (list 7 38) (list 13 66) (list 22 30) (list 17 23) (list 22 60) (list 4 10) (list 6 37) (list 5 33) (list 19 58) (list 22 53) (list 9 53) (list 4 22) (list 12 4) (list 2 51) (list 3 63) (list 4 18) (list 22 43))) (list 1946 232 6 0 0) 0.001)\n    (check-within (candidate 6 58 (list (list 0 33) (list 3 43) (list 4 25) (list 0 42) (list 4 2) (list 0 31) (list 2 10) (list 0 18) (list 1 46) (list 2 55) (list 0 13) (list 1 8) (list 2 24) (list 1 54) (list 3 54) (list 0 6) (list 0 37) (list 3 34) (list 3 53) (list 1 33) (list 2 1) (list 2 26) (list 3 11) (list 2 37) (list 1 24) (list 0 2) (list 0 14) (list 2 33) (list 0 41) (list 4 7) (list 4 28) (list 3 48) (list 3 0) (list 4 38) (list 1 34) (list 0 26) (list 4 43) (list 3 35) (list 2 7) (list 4 37) (list 4 26) (list 4 51) (list 4 21) (list 3 1) (list 4 53) (list 0 34) (list 4 3) (list 3 50) (list 3 24) (list 2 5) (list 3 40) (list 2 14) (list 4 39) (list 2 43) (list 2 50) (list 0 21) (list 2 8) (list 0 51) (list 0 47) (list 1 22) (list 3 17) (list 4 13) (list 2 2) (list 3 55) (list 4 29) (list 0 16) (list 1 55) (list 2 49) (list 0 24) (list 1 16) (list 2 17) (list 1 19) (list 1 42) (list 4 40) (list 0 5) (list 0 9) (list 2 32) (list 2 25) (list 0 40) (list 2 18) (list 3 31) (list 3 26) (list 1 57) (list 0 45) (list 0 17) (list 2 22) (list 3 3) (list 1 27) (list 1 20) (list 0 44) (list 2 0) (list 3 30) (list 2 40) (list 3 39) (list 4 50))) (list 80 107 76 19 3) 0.001)\n    (check-within (candidate 28 64 (list (list 3 3) (list 13 53) (list 17 60) (list 1 30) (list 21 59) (list 1 51) (list 2 49) (list 1 16) (list 14 22) (list 23 17) (list 13 55) (list 8 38) (list 13 31) (list 8 34) (list 17 6))) (list 1641 60 0 0 0) 0.001)\n    (check-within (candidate 15 45 (list (list 4 29) (list 0 10) (list 10 21) (list 6 5) (list 4 27) (list 3 11) (list 8 36) (list 1 38) (list 5 19) (list 9 1) (list 5 14) (list 8 18) (list 2 8) (list 13 5) (list 5 11) (list 6 37) (list 2 17) (list 5 39) (list 7 3) (list 2 3) (list 9 20) (list 9 41) (list 0 40) (list 10 20) (list 12 30) (list 2 4) (list 12 0) (list 5 16) (list 11 35) (list 4 38) (list 9 11) (list 3 34) (list 4 39) (list 5 8) (list 10 27) (list 5 13) (list 2 36) (list 9 44) (list 5 42) (list 7 43) (list 13 16) (list 0 30) (list 6 35) (list 8 12) (list 7 33) (list 11 12) (list 13 0) (list 10 0) (list 4 17) (list 0 34) (list 10 4) (list 0 22) (list 2 25) (list 8 39) (list 9 40) (list 4 35) (list 9 10) (list 7 18) (list 7 28) (list 13 12) (list 7 8) (list 10 37) (list 11 27) (list 12 40) (list 8 0) (list 7 4))) (list 402 186 26 2 0) 0.001)\n    (check-within (candidate 50 60 (list (list 37 49) (list 8 45) (list 11 21) (list 38 10) (list 47 35) (list 15 33) (list 18 8) (list 15 22) (list 16 24) (list 14 50) (list 38 24) (list 8 23) (list 24 58) (list 11 35) (list 37 39) (list 29 18) (list 1 8) (list 40 47) (list 40 59) (list 47 48) (list 15 54) (list 16 33) (list 22 29) (list 39 16) (list 35 43) (list 40 54) (list 11 8) (list 16 14) (list 8 7) (list 38 1) (list 17 3) (list 8 3) (list 0 38) (list 43 22) (list 14 10) (list 31 15) (list 11 46) (list 21 45) (list 13 6) (list 0 34) (list 2 42) (list 47 57) (list 30 2) (list 6 38) (list 8 31) (list 11 44) (list 44 36) (list 10 45) (list 41 29) (list 31 30) (list 47 54) (list 3 51) (list 26 5) (list 3 43) (list 22 42) (list 27 28) (list 48 4) (list 0 49) (list 45 22) (list 7 58) (list 26 27) (list 35 31) (list 40 15) (list 45 44) (list 42 34) (list 17 54))) (list 2642 242 7 0 0) 0.001)\n    (check-within (candidate 36 54 (list (list 7 0) (list 22 50) (list 2 41) (list 33 48) (list 1 26))) (list 1837 18 0 0 0) 0.001)\n    (check-within (candidate 26 68 (list (list 8 51) (list 18 5) (list 18 64))) (list 1663 12 0 0 0) 0.001)\n    (check-within (candidate 21 46 (list (list 12 7) (list 12 35) (list 13 14) (list 11 22) (list 2 1) (list 11 28) (list 1 7) (list 6 36) (list 2 15) (list 15 18) (list 1 39) (list 12 38) (list 11 35) (list 9 9) (list 17 6) (list 12 10))) (list 838 60 2 0 0) 0.001)\n    (check-within (candidate 35 74 (list (list 9 54) (list 9 23) (list 8 48) (list 14 29) (list 17 37) (list 6 4) (list 17 39) (list 18 41) (list 18 50) (list 24 20) (list 29 65) (list 30 3) (list 5 19) (list 11 58) (list 6 67) (list 21 44) (list 8 3) (list 7 11) (list 18 29) (list 22 46) (list 19 51) (list 4 49) (list 13 15) (list 19 48) (list 12 33) (list 8 6) (list 25 48) (list 17 70) (list 2 68) (list 21 53) (list 9 37) (list 27 8) (list 14 69) (list 2 16) (list 20 54) (list 8 67) (list 31 44) (list 10 38) (list 19 21) (list 16 43) (list 25 65) (list 33 20) (list 17 5) (list 23 6) (list 14 23) (list 14 26) (list 1 61) (list 28 21) (list 1 68) (list 24 59) (list 19 17) (list 23 4) (list 25 52) (list 2 43) (list 30 13) (list 31 34) (list 32 43) (list 14 20) (list 11 4) (list 30 20) (list 0 67) (list 27 20) (list 32 64) (list 20 17) (list 24 61) (list 5 35) (list 31 18) (list 28 40) (list 13 11) (list 29 59) (list 17 50) (list 13 54) (list 20 67) (list 32 2) (list 4 18))) (list 2197 272 13 0 0) 0.001)\n    (check-within (candidate 28 52 (list (list 3 23) (list 24 28) (list 7 19) (list 11 12) (list 4 27) (list 3 17) (list 8 41) (list 20 30) (list 23 24) (list 1 41) (list 12 30) (list 2 50) (list 18 36) (list 5 7) (list 1 42) (list 7 0) (list 10 51) (list 20 46) (list 20 24) (list 19 7) (list 23 28) (list 26 8) (list 17 31) (list 22 7) (list 22 26) (list 15 8) (list 19 27) (list 16 33) (list 15 39) (list 13 51) (list 20 47) (list 3 39) (list 25 36) (list 25 37) (list 10 0) (list 19 26) (list 8 9) (list 12 31) (list 19 44) (list 8 1) (list 3 12) (list 8 5) (list 23 46) (list 22 15) (list 18 2) (list 22 10) (list 24 43) (list 16 9) (list 18 22) (list 22 8) (list 20 6) (list 3 1) (list 8 17) (list 25 1) (list 9 32) (list 11 34) (list 7 44) (list 2 38) (list 13 37) (list 26 1) (list 2 26) (list 14 38) (list 6 36) (list 22 24) (list 6 27) (list 18 38) (list 25 41) (list 22 39) (list 18 51) (list 2 18) (list 12 24) (list 4 14) (list 21 38) (list 6 44) (list 18 25) (list 12 1) (list 12 4) (list 1 22) (list 12 40) (list 18 11))) (list 1096 252 29 0 0) 0.001)\n    (check-within (candidate 5 56 (list (list 1 2) (list 3 7) (list 2 24) (list 0 5) (list 2 3) (list 2 25) (list 3 20) (list 1 8) (list 2 26) (list 0 53) (list 2 44) (list 0 49) (list 3 30) (list 0 11) (list 1 6) (list 0 14) (list 1 9) (list 2 34) (list 2 54) (list 0 31) (list 1 10) (list 0 39) (list 0 26) (list 0 12) (list 0 37) (list 0 42) (list 0 28) (list 2 29) (list 2 46) (list 1 44) (list 0 47) (list 0 35) (list 1 53) (list 1 38) (list 0 24) (list 0 2) (list 3 23) (list 3 36) (list 3 24) (list 2 17) (list 2 35) (list 3 37) (list 2 0) (list 3 45) (list 0 16) (list 1 34) (list 0 29) (list 1 5) (list 2 38))) (list 105 76 35 4 0) 0.001)\n    (check-within (candidate 36 38 (list (list 7 13) (list 24 30) (list 23 29) (list 31 14) (list 28 33) (list 16 37) (list 3 27) (list 21 36) (list 9 30) (list 22 12) (list 22 21) (list 6 37) (list 18 31) (list 19 4) (list 18 20) (list 11 8) (list 16 14) (list 7 1) (list 11 30) (list 23 16) (list 15 15) (list 23 26) (list 13 12) (list 11 19))) (list 1205 88 2 0 0) 0.001)\n    (check-within (candidate 70 75 (list (list 17 67) (list 60 71) (list 53 71) (list 14 36) (list 19 57) (list 35 22) (list 8 11) (list 27 36) (list 47 71) (list 58 54) (list 35 63) (list 54 18) (list 17 22) (list 34 60) (list 26 35) (list 61 39) (list 65 20) (list 38 37) (list 58 34) (list 34 23) (list 63 32) (list 55 32) (list 35 53) (list 29 52) (list 6 4) (list 5 66) (list 5 6) (list 6 60) (list 61 50) (list 16 24) (list 24 51) (list 65 45) (list 11 14) (list 7 27) (list 67 24) (list 34 53) (list 61 16) (list 60 50) (list 19 41) (list 56 19) (list 10 15) (list 17 0) (list 8 59) (list 32 24) (list 35 27) (list 41 34) (list 59 6) (list 17 30))) (list 4923 176 7 0 0) 0.001)\n    (check-within (candidate 8 68 (list (list 5 36) (list 4 65) (list 1 9) (list 5 49) (list 5 34) (list 6 59) (list 5 27) (list 4 2) (list 6 53) (list 6 22) (list 4 60) (list 3 65) (list 6 16) (list 2 56) (list 0 27) (list 6 25) (list 3 32) (list 5 2) (list 3 63) (list 0 58) (list 0 37) (list 6 44) (list 0 61) (list 6 37) (list 1 36) (list 2 1) (list 1 4) (list 6 24) (list 5 12) (list 5 23) (list 0 57) (list 4 59) (list 1 44) (list 2 51) (list 5 1) (list 0 8) (list 5 22) (list 4 3) (list 5 0) (list 5 45) (list 2 8) (list 1 12) (list 1 8) (list 2 10) (list 0 48) (list 1 55) (list 1 14) (list 3 12) (list 5 39) (list 1 31) (list 1 27) (list 0 31) (list 4 61) (list 0 54) (list 2 46) (list 4 66) (list 6 32) (list 5 53) (list 3 11) (list 5 4) (list 2 21) (list 1 49))) (list 288 140 35 6 0) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2891_maximumBeauty", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums and a non-negative integer k.\n;; In one operation, you can do the following:\n;;  * Choose an index i that hasn't been chosen before from the range [0, nums.length - 1].\n;;  * Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k].\n;; The beauty of the array is the length of the longest subsequence consisting of equal elements.\n;; Return the maximum possible beauty of the array nums after applying the operation any number of times.\n;; Note that you can apply the operation to each index only once.\n;; A\u00a0subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n;; Example 1:\n;; Input: nums = [4,6,1,2], k = 2\n;; Output: 3\n;; Explanation: In this example, we apply the following operations:\n;; - Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n;; - Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\n;; After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\n;; It can be proven that 3 is the maximum possible length we can achieve.\n;; Example 2:\n;; Input: nums = [1,1,1,1], k = 10\n;; Output: 4\n;; Explanation: In this example we don't have to apply any operations.\n;; The beauty of the array nums is 4 (whole array).\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 0 <= nums[i], k <= 105\n(define (maximumBeauty nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2891_maximumBeauty.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumBeauty))\n    (check-within (candidate (list 4 6 1 2) 2) 3 0.001)\n    (check-within (candidate (list 1 1 1 1) 10) 4 0.001)\n    (check-within (candidate (list 12 71) 10) 1 0.001)\n    (check-within (candidate (list 27 55) 1) 1 0.001)\n    (check-within (candidate (list 52 34) 21) 2 0.001)\n    (check-within (candidate (list 76 0) 16) 1 0.001)\n    (check-within (candidate (list 56 40) 26) 2 0.001)\n    (check-within (candidate (list 49 26) 12) 2 0.001)\n    (check-within (candidate (list 69 66) 14) 2 0.001)\n    (check-within (candidate (list 64 98) 12) 1 0.001)\n    (check-within (candidate (list 83 81) 7) 2 0.001)\n    (check-within (candidate (list 44 93) 15) 1 0.001)\n    (check-within (candidate (list 44 31) 26) 2 0.001)\n    (check-within (candidate (list 70 60) 15) 2 0.001)\n    (check-within (candidate (list 60 22) 11) 1 0.001)\n    (check-within (candidate (list 33 20) 1) 1 0.001)\n    (check-within (candidate (list 64 24) 4) 1 0.001)\n    (check-within (candidate (list 59 20) 28) 2 0.001)\n    (check-within (candidate (list 10 98) 27) 1 0.001)\n    (check-within (candidate (list 54 21) 20) 2 0.001)\n    (check-within (candidate (list 61 11) 15) 1 0.001)\n    (check-within (candidate (list 99 40) 27) 1 0.001)\n    (check-within (candidate (list 32 91) 3) 1 0.001)\n    (check-within (candidate (list 91 57) 21) 2 0.001)\n    (check-within (candidate (list 60 92) 26) 2 0.001)\n    (check-within (candidate (list 4 45) 6) 1 0.001)\n    (check-within (candidate (list 24 35) 6) 2 0.001)\n    (check-within (candidate (list 11 29) 3) 1 0.001)\n    (check-within (candidate (list 51 29) 3) 1 0.001)\n    (check-within (candidate (list 43 21) 14) 2 0.001)\n    (check-within (candidate (list 32 25) 18) 2 0.001)\n    (check-within (candidate (list 13 66) 5) 1 0.001)\n    (check-within (candidate (list 89 71) 28) 2 0.001)\n    (check-within (candidate (list 36 29) 20) 2 0.001)\n    (check-within (candidate (list 11 43) 21) 2 0.001)\n    (check-within (candidate (list 15 36) 4) 1 0.001)\n    (check-within (candidate (list 11 51) 1) 1 0.001)\n    (check-within (candidate (list 2 57) 20) 1 0.001)\n    (check-within (candidate (list 94 66) 26) 2 0.001)\n    (check-within (candidate (list 87 51) 8) 1 0.001)\n    (check-within (candidate (list 5 57 46) 15) 2 0.001)\n    (check-within (candidate (list 81 46 85) 23) 3 0.001)\n    (check-within (candidate (list 51 83 0) 11) 1 0.001)\n    (check-within (candidate (list 75 15 9) 28) 2 0.001)\n    (check-within (candidate (list 10 59 86) 23) 2 0.001)\n    (check-within (candidate (list 41 11 59) 17) 2 0.001)\n    (check-within (candidate (list 62 77 100) 5) 1 0.001)\n    (check-within (candidate (list 27 35 15) 6) 2 0.001)\n    (check-within (candidate (list 81 76 40) 5) 2 0.001)\n    (check-within (candidate (list 84 43 96) 7) 2 0.001)\n    (check-within (candidate (list 62 1 93) 30) 2 0.001)\n    (check-within (candidate (list 13 46 71) 29) 3 0.001)\n    (check-within (candidate (list 92 99 44) 28) 3 0.001)\n    (check-within (candidate (list 73 30 40) 26) 3 0.001)\n    (check-within (candidate (list 83 89 17) 5) 2 0.001)\n    (check-within (candidate (list 38 20 11) 9) 2 0.001)\n    (check-within (candidate (list 63 56 23) 14) 2 0.001)\n    (check-within (candidate (list 32 16 98) 0) 1 0.001)\n    (check-within (candidate (list 57 58 71) 2) 2 0.001)\n    (check-within (candidate (list 61 50 35) 2) 1 0.001)\n    (check-within (candidate (list 22 97 13) 22) 2 0.001)\n    (check-within (candidate (list 89 52 33) 14) 2 0.001)\n    (check-within (candidate (list 89 4 77) 20) 2 0.001)\n    (check-within (candidate (list 50 26 72) 30) 3 0.001)\n    (check-within (candidate (list 72 75 47) 7) 2 0.001)\n    (check-within (candidate (list 23 1 73) 25) 2 0.001)\n    (check-within (candidate (list 36 74 20) 20) 2 0.001)\n    (check-within (candidate (list 34 64 11) 18) 2 0.001)\n    (check-within (candidate (list 29 94 45) 27) 2 0.001)\n    (check-within (candidate (list 22 80 34) 28) 2 0.001)\n    (check-within (candidate (list 52 63 75) 11) 2 0.001)\n    (check-within (candidate (list 53 63 93 89) 23) 4 0.001)\n    (check-within (candidate (list 47 76 100 51) 27) 4 0.001)\n    (check-within (candidate (list 73 83 46 88) 13) 3 0.001)\n    (check-within (candidate (list 50 28 30 51) 2) 2 0.001)\n    (check-within (candidate (list 88 87 9 17) 10) 2 0.001)\n    (check-within (candidate (list 27 56 27 40) 6) 2 0.001)\n    (check-within (candidate (list 88 19 2 30) 6) 2 0.001)\n    (check-within (candidate (list 58 50 0 97) 18) 2 0.001)\n    (check-within (candidate (list 83 10 99 99) 18) 3 0.001)\n    (check-within (candidate (list 58 75 1 25) 12) 2 0.001)\n    (check-within (candidate (list 77 35 1 69) 15) 2 0.001)\n    (check-within (candidate (list 23 33 62 20) 12) 3 0.001)\n    (check-within (candidate (list 42 34 18 0) 5) 2 0.001)\n    (check-within (candidate (list 10 58 37 46) 0) 1 0.001)\n    (check-within (candidate (list 34 73 57 55) 27) 4 0.001)\n    (check-within (candidate (list 53 100 74 5) 4) 1 0.001)\n    (check-within (candidate (list 48 93 96 19) 24) 3 0.001)\n    (check-within (candidate (list 91 12 29 31) 22) 3 0.001)\n    (check-within (candidate (list 48 9 35 36) 12) 3 0.001)\n    (check-within (candidate (list 24 64 40 30) 3) 2 0.001)\n    (check-within (candidate (list 19 58 41 42) 14) 3 0.001)\n    (check-within (candidate (list 72 44 29 76) 4) 2 0.001)\n    (check-within (candidate (list 37 19 10 16) 16) 4 0.001)\n    (check-within (candidate (list 54 84 73 31) 30) 4 0.001)\n    (check-within (candidate (list 83 92 30 60) 19) 3 0.001)\n    (check-within (candidate (list 14 51 99 64) 15) 2 0.001)\n    (check-within (candidate (list 7 60 16 2) 17) 3 0.001)\n    (check-within (candidate (list 7 89 54 54) 5) 2 0.001)\n    (check-within (candidate (list 43 86 33 18) 23) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2892_isGood", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\n;; base[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\n;; Return true if the given array is good, otherwise return false.\n;; Note: A permutation of integers represents an arrangement of these numbers.\n;; Example 1:\n;; Input: nums = [2, 1, 3]\n;; Output: false\n;; Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n;; Example 2:\n;; Input: nums = [1, 3, 3, 2]\n;; Output: true\n;; Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.\n;; Example 3:\n;; Input: nums = [1, 1]\n;; Output: true\n;; Explanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.\n;; Example 4:\n;; Input: nums = [3, 4, 4, 1, 2, 1]\n;; Output: false\n;; Explanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.\n;; Constraints:\n;;  * 1 <= nums.length <= 100\n;;  * 1 <= num[i] <= 200\n(define (isGood nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2892_isGood.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate isGood))\n    (check-within (candidate (list 1 3 3 2)) #t 0.001)\n    (check-within (candidate (list 2 1 3)) #f 0.001)\n    (check-within (candidate (list 1 1)) #t 0.001)\n    (check-within (candidate (list 1 2 2)) #t 0.001)\n    (check-within (candidate (list 3 4 4 1 2 1)) #f 0.001)\n    (check-within (candidate (list 2 2 1)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 2)) #f 0.001)\n    (check-within (candidate (list 3)) #f 0.001)\n    (check-within (candidate (list 3 3 1 2)) #t 0.001)\n    (check-within (candidate (list 1 3 4 4 2)) #t 0.001)\n    (check-within (candidate (list 4)) #f 0.001)\n    (check-within (candidate (list 1 4 2 4 3)) #t 0.001)\n    (check-within (candidate (list 5)) #f 0.001)\n    (check-within (candidate (list 4 4 1 2 3)) #t 0.001)\n    (check-within (candidate (list 6)) #f 0.001)\n    (check-within (candidate (list 4 4 2 3 1)) #t 0.001)\n    (check-within (candidate (list 8)) #f 0.001)\n    (check-within (candidate (list 9)) #f 0.001)\n    (check-within (candidate (list 5 5 1 3 2 4)) #t 0.001)\n    (check-within (candidate (list 1 5 3 6 6 4 2)) #t 0.001)\n    (check-within (candidate (list 5 4 6 6 3 2 1)) #t 0.001)\n    (check-within (candidate (list 10)) #f 0.001)\n    (check-within (candidate (list 6 3 6 4 2 1 5)) #t 0.001)\n    (check-within (candidate (list 6 3 6 5 1 2 4)) #t 0.001)\n    (check-within (candidate (list 12)) #f 0.001)\n    (check-within (candidate (list 7 2 5 7 3 6 1 4)) #t 0.001)\n    (check-within (candidate (list 1 2 8 8 6 5 4 3 7)) #t 0.001)\n    (check-within (candidate (list 1 8 4 8 2 7 6 3 5)) #t 0.001)\n    (check-within (candidate (list 13)) #f 0.001)\n    (check-within (candidate (list 14)) #f 0.001)\n    (check-within (candidate (list 2 8 6 1 7 5 3 4 8)) #t 0.001)\n    (check-within (candidate (list 4 1 3 2 8 5 8 6 7)) #t 0.001)\n    (check-within (candidate (list 15)) #f 0.001)\n    (check-within (candidate (list 7 2 1 5 6 8 8 4 3)) #t 0.001)\n    (check-within (candidate (list 82)) #f 0.001)\n    (check-within (candidate (list 1 8)) #f 0.001)\n    (check-within (candidate (list 8 6 2 5 7 4 1 8 3)) #t 0.001)\n    (check-within (candidate (list 4 6 1 9 8 9 5 7 3 2)) #t 0.001)\n    (check-within (candidate (list 1 13)) #f 0.001)\n    (check-within (candidate (list 2 3)) #f 0.001)\n    (check-within (candidate (list 9 5 8 9 6 1 2 7 4 3)) #t 0.001)\n    (check-within (candidate (list 1 2 10 9 10 5 6 4 8 7 3)) #t 0.001)\n    (check-within (candidate (list 1 9 2 6 5 4 7 10 3 10 8)) #t 0.001)\n    (check-within (candidate (list 1 10 7 8 10 4 6 3 5 2 9)) #t 0.001)\n    (check-within (candidate (list 8 2 1 4 3 10 9 5 10 7 6)) #t 0.001)\n    (check-within (candidate (list 10 9 5 3 6 4 2 10 8 7 1)) #t 0.001)\n    (check-within (candidate (list 2 9)) #f 0.001)\n    (check-within (candidate (list 1 4 5 10 11 2 9 7 6 11 3 8)) #t 0.001)\n    (check-within (candidate (list 2 11)) #f 0.001)\n    (check-within (candidate (list 11 5 9 10 3 11 1 2 8 4 7 6)) #t 0.001)\n    (check-within (candidate (list 11 9 8 1 12 4 2 15 16 10 13 6 3 16 7 5 14)) #t 0.001)\n    (check-within (candidate (list 11 16 9 5 14 13 4 1 3 16 15 8 10 7 12 2 6)) #t 0.001)\n    (check-within (candidate (list 2 12)) #f 0.001)\n    (check-within (candidate (list 17 1 18 11 9 4 7 6 3 21 16 14 10 8 20 21 5 2 12 19 15 13)) #t 0.001)\n    (check-within (candidate (list 3 1)) #f 0.001)\n    (check-within (candidate (list 20 13 7 10 16 12 19 2 21 17 3 11 5 15 21 1 18 6 8 14 9 4)) #t 0.001)\n    (check-within (candidate (list 8 19 16 17 20 15 11 4 22 3 13 10 1 18 9 12 22 7 6 2 5 21 14)) #t 0.001)\n    (check-within (candidate (list 22 1 17 13 8 22 9 5 21 6 14 12 10 11 2 18 4 7 19 20 3 15 16)) #t 0.001)\n    (check-within (candidate (list 21 15 16 13 3 4 11 22 7 14 20 10 18 17 6 8 9 1 19 5 2 12 23 24 24)) #t 0.001)\n    (check-within (candidate (list 22 24 24 12 17 15 14 16 8 11 23 5 2 10 6 21 9 13 3 20 19 7 4 18 1)) #t 0.001)\n    (check-within (candidate (list 3 2)) #f 0.001)\n    (check-within (candidate (list 6 16 26 9 4 24 12 26 22 3 11 23 15 2 17 5 1 21 14 19 18 20 13 25 8 7 10)) #t 0.001)\n    (check-within (candidate (list 29 24 5 6 4 25 9 8 21 13 27 7 20 18 3 15 23 28 29 19 17 10 22 26 1 11 12 14 16 2)) #t 0.001)\n    (check-within (candidate (list 25 21 6 10 20 15 16 26 7 3 30 1 12 29 11 30 14 19 2 28 23 9 8 24 17 5 4 27 22 18 13)) #t 0.001)\n    (check-within (candidate (list 3 11)) #f 0.001)\n    (check-within (candidate (list 2 25 20 30 4 6 1 29 15 11 10 19 14 12 32 3 21 27 16 17 28 13 5 32 8 24 22 7 31 23 18 26 9)) #t 0.001)\n    (check-within (candidate (list 4 10)) #f 0.001)\n    (check-within (candidate (list 4 12)) #f 0.001)\n    (check-within (candidate (list 5 9)) #f 0.001)\n    (check-within (candidate (list 5 12)) #f 0.001)\n    (check-within (candidate (list 5 13)) #f 0.001)\n    (check-within (candidate (list 4 29 5 24 19 1 8 31 18 21 9 28 32 27 10 17 22 2 11 15 13 23 6 16 7 30 12 33 14 25 33 26 3 20)) #t 0.001)\n    (check-within (candidate (list 6 1)) #f 0.001)\n    (check-within (candidate (list 30 32 1 35 19 34 4 23 18 6 11 8 22 33 31 16 17 20 24 10 21 7 14 15 29 9 12 2 36 3 26 36 5 13 25 27 28)) #t 0.001)\n    (check-within (candidate (list 5 34 42 17 9 44 40 24 38 21 30 14 39 11 18 36 4 43 12 32 2 6 45 46 37 47 8 3 26 1 31 28 16 20 22 35 25 15 10 29 7 27 19 33 41 47 23 13)) #t 0.001)\n    (check-within (candidate (list 6 7)) #f 0.001)\n    (check-within (candidate (list 5 41 8 2 32 24 9 44 27 6 22 36 14 21 43 28 45 37 17 18 20 26 3 12 10 33 30 13 29 38 4 47 46 15 25 11 1 19 47 16 39 31 40 34 23 7 42 35)) #t 0.001)\n    (check-within (candidate (list 6 10)) #f 0.001)\n    (check-within (candidate (list 6 12)) #f 0.001)\n    (check-within (candidate (list 6 15)) #f 0.001)\n    (check-within (candidate (list 7 9)) #f 0.001)\n    (check-within (candidate (list 8 4)) #f 0.001)\n    (check-within (candidate (list 8 6)) #f 0.001)\n    (check-within (candidate (list 26 35 9 3 46 33 13 8 47 27 17 40 15 20 37 12 16 44 34 2 14 30 1 29 10 11 25 18 43 42 6 5 47 38 41 32 24 31 7 4 45 19 39 22 28 36 21 23)) #t 0.001)\n    (check-within (candidate (list 8 9)) #f 0.001)\n    (check-within (candidate (list 8 10)) #f 0.001)\n    (check-within (candidate (list 8 13)) #f 0.001)\n    (check-within (candidate (list 32 39 25 49 6 48 9 7 34 3 8 26 14 27 43 30 1 21 36 10 31 38 40 12 2 46 20 15 11 24 22 28 33 4 19 18 44 41 35 29 16 37 45 47 49 23 42 13 5 17)) #t 0.001)\n    (check-within (candidate (list 9 7)) #f 0.001)\n    (check-within (candidate (list 18 35 44 41 8 33 28 9 3 14 43 56 6 10 25 53 61 22 17 23 32 50 31 13 1 29 45 34 30 48 36 58 46 15 4 7 52 60 16 12 54 19 24 40 26 55 49 42 21 38 2 20 57 61 5 37 47 27 39 11 51 59)) #t 0.001)\n    (check-within (candidate (list 9 9)) #f 0.001)\n    (check-within (candidate (list 10 4)) #f 0.001)\n    (check-within (candidate (list 10 11)) #f 0.001)\n    (check-within (candidate (list 11 1)) #f 0.001)\n    (check-within (candidate (list 60 62 16 59 8 49 51 41 42 40 46 3 10 13 53 2 63 54 32 33 31 14 12 15 1 66 61 18 52 4 55 11 26 28 47 21 25 43 65 58 45 50 17 64 23 22 30 9 38 19 24 44 37 39 48 20 35 36 27 34 56 57 29 5 7 6 66)) #t 0.001)\n    (check-within (candidate (list 46 9 21 14 24 15 6 58 22 40 63 39 49 65 30 5 43 36 29 55 67 45 61 35 67 56 16 23 50 17 19 13 26 66 47 59 2 51 27 28 31 1 44 42 53 57 11 25 4 54 37 20 48 52 41 32 10 7 64 34 60 12 33 38 3 18 62 8)) #t 0.001)\n    (check-within (candidate (list 11 5)) #f 0.001)\n    (check-within (candidate (list 57 40 35 55 42 24 43 29 30 59 21 52 67 72 32 78 13 51 36 48 74 64 69 65 9 4 37 31 6 27 7 2 38 61 15 19 71 49 44 47 46 54 76 26 63 17 22 3 16 12 18 41 25 62 8 10 23 50 56 11 20 5 28 77 66 53 14 33 68 34 73 45 1 78 39 70 75 60 58)) #t 0.001)\n    (check-within (candidate (list 14 38 18 10 21 9 67 68 23 19 80 13 74 75 32 55 65 45 5 28 43 8 17 42 40 44 31 1 7 25 6 47 27 50 4 76 63 52 71 34 83 56 77 81 16 12 60 79 46 41 24 35 33 2 49 70 78 36 48 69 26 66 37 72 61 30 22 58 20 39 82 64 73 59 57 3 51 29 83 53 15 54 11 62)) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2893_maxScore", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and a positive integer x.\n;; You are initially at position 0 in the array and you can visit other positions according to the following rules:\n;;  * If you are currently in position i, then you can move to any position j such that i < j.\n;;  * For each position i that you visit, you get a score of nums[i].\n;;  * If you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x.\n;; Return the maximum total score you can get.\n;; Note that initially you have nums[0] points.\n;; Example 1:\n;; Input: nums = [2,3,6,1,9,2], x = 5\n;; Output: 13\n;; Explanation: We can visit the following positions in the array: 0 -> 2 -> 3 -> 4.\n;; The corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5.\n;; The total score will be: 2 + 6 + 1 + 9 - 5 = 13.\n;; Example 2:\n;; Input: nums = [2,4,6,8], x = 3\n;; Output: 20\n;; Explanation: All the integers in the array have the same parities, so we can visit all of them without losing any score.\n;; The total score is: 2 + 4 + 6 + 8 = 20.\n;; Constraints:\n;;  * 2 <= nums.length <= 105\n;;  * 1 <= nums[i], x <= 106\n(define (maxScore nums x)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2893_maxScore.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxScore))\n    (check-within (candidate (list 2 3 6 1 9 2) 5) 13 0.001)\n    (check-within (candidate (list 2 4 6 8) 3) 20 0.001)\n    (check-within (candidate (list 38 92 23 30 25 96 6 71 78 77 33 23 71 48 87 77 53 28 6 20 90 83 42 21 64 95 84 29 22 21 33 36 53 51 85 25 80 56 71 69 5 21 4 84 28 16 65 7) 52) 1545 0.001)\n    (check-within (candidate (list 18 13 60 61 57 21 10 98 51 3 13 36 72 70 68 62 52 83 63 63 53 42 59 98 95 48 22 64 94 80 14 14) 2) 1633 0.001)\n    (check-within (candidate (list 90 87 79 59 91 19 96) 51) 419 0.001)\n    (check-within (candidate (list 96 81 48 3 60 78 74 82 14 7 87 72 42 41 80 4 92 82 59 16 19 94 70 45 83 58 2 91 11 96 17 62 79 34 44 47 89 76 85 21 5 57 35 51) 24) 1952 0.001)\n    (check-within (candidate (list 99 88 98 15 34 40 29 81 2 6 12 9 82 93 5 81 84 71 83 31 12 22 9 65 56 9 68 79 39 84 50 7 25 3 49) 19) 1363 0.001)\n    (check-within (candidate (list 8 50 65 85 8 73 55 50 29 95 5 68 52 79) 74) 470 0.001)\n    (check-within (candidate (list 45 9 20 89 18 94 12 51 38 77 100 95 46 1 76 41 8 90 82 33 92 32 76 43 6 61 85 40 63 10 74 18 44 43 17 100 17 33 100 77 97 8 99 85 88 9 63 31 32) 68) 1694 0.001)\n    (check-within (candidate (list 87 23 53 57 21 60 68 84 66 49 48 61 32 95 71 11 15 61 10 86 50 53 38 20 63) 92) 814 0.001)\n    (check-within (candidate (list 39 47 76 64 90 17 30 57 19 40 9 76 68 33 36 61 19 93 8 1 31 2 55 70 24 85 97 40 35 93 56 67 64 67 52 2 75 13 89 97) 77) 1390 0.001)\n    (check-within (candidate (list 92 87 85 27 27 10 24 94 26 78 24 61 4 46 3 76 29 65 52 61 34 67 74 61 90 40 81 60 10 98 87 57 28 77 55 33 10 91 57 72 3 72 4 39 99) 70) 1551 0.001)\n    (check-within (candidate (list 20 90 68) 39) 178 0.001)\n    (check-within (candidate (list 43 100 72 33 45 9 51 10 22 42 7 74 41 68 100 24 20 20 79 30 99 82) 1) 1060 0.001)\n    (check-within (candidate (list 100 87 29 94 56 41 53 98 34 17 52 3 54 51 22 39 37 9 76) 40) 670 0.001)\n    (check-within (candidate (list 55 37 87 45 96 7 66 62 91 51 33 92 65 99) 81) 625 0.001)\n    (check-within (candidate (list 2 75 65 43) 39) 146 0.001)\n    (check-within (candidate (list 74 82 80 95 72 23 49 43 76 28 87 27 58 39 7 77 26 63 56 96 77 75 82 60 90 69 83 20 13 82 16 90 40 23 36 17 77 15 18 10) 40) 1571 0.001)\n    (check-within (candidate (list 75 99 45 34 63 19 71 48 73 66 2 14 76 41 92 23 6 31 49 6 70 40 69 25 97 58 20 84 21 37 100 75 73 10 59 87 30) 96) 1181 0.001)\n    (check-within (candidate (list 9 58 17 54 91 90 32 6 13 67 24 80 8 56 29 66 85 38 45 13 20 73 16 98 28 56 23 2 47 85 11 97 72 2 28 52 33) 90) 886 0.001)\n    (check-within (candidate (list 96 89 30 38 58 26 47 52 27 77 87 92 6) 83) 423 0.001)\n    (check-within (candidate (list 35 11 46 34 57 2 21 98 85 7 65 26 22 14 48 14 38 72 56 63 73 11 70 92 62 3 9 72 32 99 8 71 85 66 73 29 74 88 41 24 21 40 41 19 49 90) 11) 1948 0.001)\n    (check-within (candidate (list 31 17 68 37 56 25 43 71 46 59 6 30 98 69 91) 78) 443 0.001)\n    (check-within (candidate (list 53 49 57 84 69 39 97 78 19 42 10 16 16 62 79 74 49 59 21 29 76 6 14 64 76 29 8 27 26) 80) 855 0.001)\n    (check-within (candidate (list 42 60 23 29 66 46 82 83 97 56 71 39 19 31 23 60 34 63 14 73 4 92 37 65 50 49 100 72 63) 88) 943 0.001)\n    (check-within (candidate (list 79 60 100 62 25 2 86 9 66 67 20 14 92 27 93 52 12 67 9 8 69 21 31 77 71 52 60) 84) 906 0.001)\n    (check-within (candidate (list 40 54 14 66 95 97 3 10 34 100 68 35 54 35 48 3 79 69 71 2 44 82 85 67 47 5 37 61 68 64 61 49 36 87 77 57 69 31 40 45 50 17 2 50 71) 69) 1564 0.001)\n    (check-within (candidate (list 53 15 2 58 28 93 55 41 88 69 93 67 67 40 37 99 17 30 10 7 94 50 73 53 37 84 50 37 81 91 72 28 22 22 67) 82) 1165 0.001)\n    (check-within (candidate (list 41 35 43 93 79 62 66 16 92 29 74 67 93 100 56 73) 69) 714 0.001)\n    (check-within (candidate (list 67 9 2 39 28 92 99 62 37 75 3 53 26 32 76 14 88 16 68 56 60) 91) 727 0.001)\n    (check-within (candidate (list 95 29 91 86 23 30 46 95 6 84 62 23 71 6 13 19 25 65 29 6 65 92) 28) 886 0.001)\n    (check-within (candidate (list 74 47 86 24 44 91 88 64 37) 24) 436 0.001)\n    (check-within (candidate (list 36 62 82 46 40) 54) 266 0.001)\n    (check-within (candidate (list 66 28 100 33 15 47 80 43 61 16 10) 3) 487 0.001)\n    (check-within (candidate (list 62 1 66 47 85 69 35 42 42 7 20 91) 41) 436 0.001)\n    (check-within (candidate (list 8 23 19 37 12 78 25 62 99 88 86 27 1 78 40 57 5 62 12 93 10 42) 60) 578 0.001)\n    (check-within (candidate (list 35 49 85 37 74 50 77 21 68 49 86 92 36 31 70 66 10 75 6 70 55 72 40 99 24 74 55 46 4 46 22 36 58 36 68 68 54 9 36 76 57 83 86 92 6 47 44 31) 55) 1797 0.001)\n    (check-within (candidate (list 75 96 53 79 89 57 75 94 24 75 71 8 44 70 12 92 38 24 3 38 88 10) 31) 1057 0.001)\n    (check-within (candidate (list 93 68 62 23 56 95 7 38 43 87 76 60 34 32 40 4 49 15 41 18 76 50) 46) 776 0.001)\n    (check-within (candidate (list 53 78 79 81 75 36 35 37) 61) 360 0.001)\n    (check-within (candidate (list 60 55 100 61 23 45 43 31) 62) 301 0.001)\n    (check-within (candidate (list 98 48 29 44 96 57) 40) 303 0.001)\n    (check-within (candidate (list 96 18 77 100 88 19 41 32 15 41 14) 30) 405 0.001)\n    (check-within (candidate (list 46 69 20 84 52 23 13 52 68 49 99 23 14 60 56 71 68 43 44 66 96 58 94) 6) 1208 0.001)\n    (check-within (candidate (list 85 12) 79) 85 0.001)\n    (check-within (candidate (list 63 95 35 79 39 14 55 5 44 57 31 23 67 61 75 61 40 51 55 27 53 100 15 100 23 89 76 99 31 47 49 52 47) 49) 1419 0.001)\n    (check-within (candidate (list 60 94 97 97 57 16 45 84 10 44 16) 10) 584 0.001)\n    (check-within (candidate (list 24 28 63 5 13 83 2 15 81 34 9 10 54 88 12 36 81 87 81 42 56 82 85 85 31 47 29 59 21 55 73 31 80 75 61 70 82 90 23 44 71 94) 57) 1665 0.001)\n    (check-within (candidate (list 92 7 95 1 79 49 58 77 54 12 38 18 9 23 75 98 76 86 40 33 22 14 62 67 60 36 67 51 85 100 75 30 55 63 28 100 94 4) 89) 1282 0.001)\n    (check-within (candidate (list 76 24 85 30 37 86 3 50 94 19 48 95 31) 93) 441 0.001)\n    (check-within (candidate (list 50 19 12 63 20 33 21 77 25 24 46 22 46 57 86 65 13 99 36 23 85 99 10) 7) 949 0.001)\n    (check-within (candidate (list 68 26 50 20 54 30 12 66 30 75 31 89 78 30 17 38 97 15 43 39 82 25 3 78 66 6 68 86 29 20 99) 97) 985 0.001)\n    (check-within (candidate (list 62 1 18 37 87 73 16) 44) 233 0.001)\n    (check-within (candidate (list 35 60 95 31 19 87 19 37 78 82 81 96 23 58 93 96 92 41 48 67 90 70 6 97 6 2 77 47 34 17 51 15 13 93 12 46) 1) 1895 0.001)\n    (check-within (candidate (list 21 29) 68) 50 0.001)\n    (check-within (candidate (list 37 98 2 60 89 82 99 80 28 54 12 15 16 88 82 72 63 8 45 56 99 19 29 38 26 35) 94) 813 0.001)\n    (check-within (candidate (list 84 8 44 48 85 77 18 34 17 46 53 84 52 77 12 94 18 67 46 45) 44) 684 0.001)\n    (check-within (candidate (list 50 1 21 95 20 65 80 75 47 74 95 23 89 61 48 25 84 76 81 51 52 37 84 24 15 32 11 88) 65) 982 0.001)\n    (check-within (candidate (list 54 2 22 17 41 23 51 16 5 42 12 77 9 71 92 87 78 50 14 74 72 42 90) 52) 780 0.001)\n    (check-within (candidate (list 3 34 22 49 66 40 13 7 71 35 1 96 36 83 31 55 60 20 90 76 51 95 21 47 82 91 75 99 72 48 53 2 56 64) 70) 1105 0.001)\n    (check-within (candidate (list 75 34 33 97 3 25 4 71 8 73) 27) 377 0.001)\n    (check-within (candidate (list 27 91 78 7 48 79 23 34 17 42 94 85 48 36 26 57 53 10 38 32 45 89 74 5 35 39 9 59 71 39 1 60 39 50 47 47 48 74 71 91 85 86 22) 74) 1292 0.001)\n    (check-within (candidate (list 26 97 16 94 49 98 78 84 76 21 75 88 22 49 34 98 7 94 100 98 72 70 47 6 56 8 50 9 37 37 34 36 48 95 8 63 35 81 26 57 91 4 83 38 64 45 98 51) 86) 1919 0.001)\n    (check-within (candidate (list 14 64 4 14 94 58 67 15 79 26 66 34 47 42 20 67 5 21 63 73 44 96 29 72 26 20 84 84 62 39 93 53 13 35 32 82 22 58) 87) 1252 0.001)\n    (check-within (candidate (list 42 98 75 46 10 21 10 35 4 59 100 78 62 51 84 99 92 2 4 12 59 8 42 85 86 81 20 1 43 41 56 2 30 25 21 56 43 82 38 45 89 54 15 63 69 20 64) 45) 1442 0.001)\n    (check-within (candidate (list 99 80 22 56 93 18 65 63 8 16 80) 39) 465 0.001)\n    (check-within (candidate (list 2 17 64 100 23 2 8 93 31 6 16 28 32 98 18 33 22 54 73 35 47 16 76 74 17 5 6 1 7 19 100 17 70 98 94 5 78 38 10 80) 59) 1246 0.001)\n    (check-within (candidate (list 15 10 55 18 55 54 63 79 97 9 98 10 95 3 88 43 75 17 19 36 64 44 85 10 45 42 58 75 79 7 55 75 50 89 8 89 58 87 30 36 59 59 25) 4) 2072 0.001)\n    (check-within (candidate (list 97 60 79 8 79 39 37 66 78 58 32 59 83 23 36 82 34 70 17 17 33 91 1 55 54 45 30 11 30 19 8 8 98 36 39 30 87 34 99 83 6 90) 91) 1214 0.001)\n    (check-within (candidate (list 52 83 17 67 51 47 8 86 59 56 96 74 36 38 73 96 95 50 25 45 5 48 16 3 65 22 92 11 80 46 15) 4) 1497 0.001)\n    (check-within (candidate (list 38 97 36 48 88 68 66 39 40 36 39 53 96 21 3 28 86 94 31 53 76 24 54 45 10 99 92 21 52 25 15 42 12 17 89 51) 14) 1547 0.001)\n    (check-within (candidate (list 6 13 9) 98) 6 0.001)\n    (check-within (candidate (list 52 66 40 14 6 26 37 93 23 2 40 10 42 1 85 22 45 46 16 14 70 76 48 100 68 85 72 31 15 56 65 61 83 90 31 31 2 27 55 91 50 32) 18) 1679 0.001)\n    (check-within (candidate (list 8 60 58) 18) 126 0.001)\n    (check-within (candidate (list 74 24 7 80 13 46 52 19 20 6 70 95 20 82 97 32 28 16 4 21 19 56 9 56 30 99 64 94 61 5 28 51 58 49 49 92 68 66 17 84 54) 51) 1331 0.001)\n    (check-within (candidate (list 99 30 17 54 77 71 48 19 80 43 20 59 95 76 64 32 29 84 80 33 90 11 76 65 76 51 50 36 99) 6) 1533 0.001)\n    (check-within (candidate (list 21 99 29 76 1 25 62 67 82 90 99 12 51 53 62 78 41 14 55 66 90 73 30 76 97) 60) 935 0.001)\n    (check-within (candidate (list 59 78 89 17 43 89 21 43 73 76 68 94 69 76 26 3 86 65 45 29 68 53 41 87 79 37 11 55 82 97 9 48 64 13 56 56 60 22 22 50 23 51 14 36 2) 81) 1655 0.001)\n    (check-within (candidate (list 5 2 24 57 9 5 71 90 20 80 9 99 45 27 60 7 65 23 55 46 49 57 7 22 28 35) 77) 661 0.001)\n    (check-within (candidate (list 76 60 37 9 31 30 86 64 83 71 70 18 32 74 38 11 6 4 9 62 52 14 20 41 60 54 40 15 90 52 27 46 47 1 7 79 22 49 99 82) 100) 1230 0.001)\n    (check-within (candidate (list 20 89 67 20 1 84 36 92 41 79 35 85 58 76 42 12 96 38 44 93 54 80 44 49 55 6 34 84 3 74 13) 23) 1403 0.001)\n    (check-within (candidate (list 69 86 56 72 35 8 57 10 42 90 92 46 7 22 69 16 62 9 57 74 52 49 14 23 13 43 73 63 88 18 31 89 94 3 23 14 39 82 70 78) 95) 1234 0.001)\n    (check-within (candidate (list 28 66 78 21 47 6 18 60 8 82 34 19 62 26 34 56 59 56 7 75 35 42 19 23 92 88 83 65 74 24 69 83 12 63 4 71 78 40 64 98 15 17 81 19) 84) 1430 0.001)\n    (check-within (candidate (list 77 48 31 26) 53) 108 0.001)\n    (check-within (candidate (list 33 69 10 90 86 82 66 19 28 33 9 98 87 7 7 17 69 79 85 65 31 38 75) 21) 1042 0.001)\n    (check-within (candidate (list 16 99 70 71 62 42) 83) 190 0.001)\n    (check-within (candidate (list 55 64 59 68 50 32 56 75 84 53 97 7 40 62 56 80 36 52 43 77 82 47 7 96 94 43 77 71 36 92) 48) 1267 0.001)\n    (check-within (candidate (list 61 12 92 54 88 10 49 19 83 24 82 29 64 96 67 12 27 97 15 96 35 43 92 96 28 84 49 72 16 92 29 41) 73) 1151 0.001)\n    (check-within (candidate (list 90 84 13 56 24 54 29 20) 31) 328 0.001)\n    (check-within (candidate (list 94 12 26 83 92 8 64 21 80 32 47 71 30) 66) 460 0.001)\n    (check-within (candidate (list 42 11 1) 16) 42 0.001)\n    (check-within (candidate (list 22 56 65 84 34 80 56 63 22 52 94 29 99 45 20 66 50 62 44 10 3 70 13 23 99 99 71 61 11 28 48 66 41 4 5 18 22 44 36 92 10 90 20) 36) 1706 0.001)\n    (check-within (candidate (list 6 45 84 69 49 47 49 13 6 25 82 38 1 4 99 68 89 78 53 29 73 96 71 58 88 18 97 61 37 80 20 93 77 38 84) 40) 1336 0.001)\n    (check-within (candidate (list 85 71 5 91 31 75 36 4 42 81 92 42 40 14 57 72 33 66 4 1 26 81 45 56 64 76 43 39 53 9 37 38 53 26 2 55 6 70 9 45 35 60 73 38 62 58 3) 86) 1343 0.001)\n    (check-within (candidate (list 32 53 27 49 7 40 22 85 53 46 28 95 59 85 78 16 15 63 24 64 90 9 84 9 66 41 75 8 22 53 72 29 15 32 49 29 37 66 82 63 59 58) 70) 1221 0.001)\n    (check-within (candidate (list 76 100 47 98 31 46 73 18 40 46 4 70 33 43 58 21 72 24 97 17 18 61 86 9 8 96 54 55) 43) 997 0.001)\n    (check-within (candidate (list 78 66 10 19 59 87 27 40 49 80 25 3 33 54 29 97 9 36 73 80 59 68) 97) 626 0.001)\n    (check-within (candidate (list 13 26 3 19 21 43 33 62 32 61 40 22 56 69 15 21 10 87 84 66 26 35 54 64 7 53 32 14 7) 76) 649 0.001)\n    (check-within (candidate (list 73 93 27 67 11 40 18 88 78 77 79 80 15 100 83 33 36 63 90 44 89 23 25 79 56 41 8 62 32 98 58) 10) 1641 0.001)\n    (check-within (candidate (list 38 97 76 72 85 23 70 90 89 1 65 50 1 93 41 33 94 43 45 39 98 52 85 18 70 79 79 33 22 93 72 25 20 42 19 66 64 64 95 29 3 75 54 40 17 86 71 23 26 23) 66) 1683 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2894_findMaximumElegance", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed 2D integer array items of length n and an integer k.\n;; items[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\n;; Let's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\n;; Your task is to find the maximum elegance from all subsequences of size k in items.\n;; Return an integer denoting the maximum elegance of a subsequence of items with size exactly k.\n;; Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n;; Example 1:\n;; Input: items = [[3,2],[5,1],[10,1]], k = 2\n;; Output: 17\n;; Explanation: In this example, we have to select a subsequence of size 2.\n;; We can select items[0] = [3,2] and items[2] = [10,1].\n;; The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\n;; Hence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance.\n;; Example 2:\n;; Input: items = [[3,1],[3,1],[2,2],[5,3]], k = 3\n;; Output: 19\n;; Explanation: In this example, we have to select a subsequence of size 3.\n;; We can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3].\n;; The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3].\n;; Hence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.\n;; Example 3:\n;; Input: items = [[1,1],[2,1],[3,1]], k = 3\n;; Output: 7\n;; Explanation: In this example, we have to select a subsequence of size 3.\n;; We should select all the items.\n;; The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1].\n;; Hence, the maximum elegance is 6 + 12 = 7.\n;; Constraints:\n;;  * 1 <= items.length == n <= 105\n;;  * items[i].length == 2\n;;  * items[i][0] == profiti\n;;  * items[i][1] == categoryi\n;;  * 1 <= profiti <= 109\n;;  * 1 <= categoryi <= n\n;;  * 1 <= k <= n\n(define (findMaximumElegance items k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2894_findMaximumElegance.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findMaximumElegance))\n    (check-within (candidate (list (list 3 2) (list 5 1) (list 10 1)) 2) 17 0.001)\n    (check-within (candidate (list (list 3 1) (list 3 1) (list 2 2) (list 5 3)) 3) 19 0.001)\n    (check-within (candidate (list (list 1 1) (list 2 1) (list 3 1)) 3) 7 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 2)) 2) 6 0.001)\n    (check-within (candidate (list (list 1 1) (list 4 1)) 1) 5 0.001)\n    (check-within (candidate (list (list 1 1) (list 4 1)) 2) 6 0.001)\n    (check-within (candidate (list (list 1 1) (list 6 1)) 1) 7 0.001)\n    (check-within (candidate (list (list 1 1) (list 6 1)) 2) 8 0.001)\n    (check-within (candidate (list (list 1 1) (list 8 2)) 2) 13 0.001)\n    (check-within (candidate (list (list 1 2) (list 6 2)) 1) 7 0.001)\n    (check-within (candidate (list (list 1 2) (list 10 1)) 1) 11 0.001)\n    (check-within (candidate (list (list 2 1) (list 6 1)) 2) 9 0.001)\n    (check-within (candidate (list (list 2 1) (list 7 1)) 2) 10 0.001)\n    (check-within (candidate (list (list 2 1) (list 9 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 2 2) (list 2 2)) 1) 3 0.001)\n    (check-within (candidate (list (list 2 2) (list 2 2)) 2) 5 0.001)\n    (check-within (candidate (list (list 2 2) (list 3 1)) 2) 9 0.001)\n    (check-within (candidate (list (list 2 2) (list 6 1)) 2) 12 0.001)\n    (check-within (candidate (list (list 3 1) (list 1 2)) 2) 8 0.001)\n    (check-within (candidate (list (list 3 1) (list 9 1)) 2) 13 0.001)\n    (check-within (candidate (list (list 3 1) (list 9 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 3 1) (list 10 2)) 2) 17 0.001)\n    (check-within (candidate (list (list 3 2) (list 3 1)) 1) 4 0.001)\n    (check-within (candidate (list (list 3 2) (list 5 2)) 1) 6 0.001)\n    (check-within (candidate (list (list 3 2) (list 10 1)) 2) 17 0.001)\n    (check-within (candidate (list (list 3 2) (list 10 2)) 2) 14 0.001)\n    (check-within (candidate (list (list 4 1) (list 7 2)) 2) 15 0.001)\n    (check-within (candidate (list (list 4 1) (list 9 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 4 2) (list 2 1)) 2) 10 0.001)\n    (check-within (candidate (list (list 4 2) (list 3 1)) 2) 11 0.001)\n    (check-within (candidate (list (list 4 2) (list 5 2)) 1) 6 0.001)\n    (check-within (candidate (list (list 4 2) (list 7 2)) 1) 8 0.001)\n    (check-within (candidate (list (list 4 2) (list 8 1)) 2) 16 0.001)\n    (check-within (candidate (list (list 4 2) (list 10 1)) 2) 18 0.001)\n    (check-within (candidate (list (list 5 1) (list 4 2)) 1) 6 0.001)\n    (check-within (candidate (list (list 5 1) (list 8 1)) 2) 14 0.001)\n    (check-within (candidate (list (list 5 1) (list 8 2)) 1) 9 0.001)\n    (check-within (candidate (list (list 5 1) (list 9 1)) 1) 10 0.001)\n    (check-within (candidate (list (list 5 2) (list 2 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 5 2) (list 4 2)) 2) 10 0.001)\n    (check-within (candidate (list (list 5 2) (list 5 1)) 2) 14 0.001)\n    (check-within (candidate (list (list 6 1) (list 1 1)) 1) 7 0.001)\n    (check-within (candidate (list (list 6 1) (list 4 1)) 1) 7 0.001)\n    (check-within (candidate (list (list 6 1) (list 7 1)) 1) 8 0.001)\n    (check-within (candidate (list (list 6 1) (list 7 2)) 2) 17 0.001)\n    (check-within (candidate (list (list 6 1) (list 8 1)) 2) 15 0.001)\n    (check-within (candidate (list (list 6 1) (list 8 2)) 2) 18 0.001)\n    (check-within (candidate (list (list 6 1) (list 9 1)) 1) 10 0.001)\n    (check-within (candidate (list (list 6 2) (list 2 1)) 1) 7 0.001)\n    (check-within (candidate (list (list 6 2) (list 4 2)) 1) 7 0.001)\n    (check-within (candidate (list (list 6 2) (list 5 1)) 1) 7 0.001)\n    (check-within (candidate (list (list 6 2) (list 6 2)) 1) 7 0.001)\n    (check-within (candidate (list (list 6 2) (list 6 2)) 2) 13 0.001)\n    (check-within (candidate (list (list 6 2) (list 7 1)) 1) 8 0.001)\n    (check-within (candidate (list (list 6 2) (list 7 1)) 2) 17 0.001)\n    (check-within (candidate (list (list 6 2) (list 8 2)) 2) 15 0.001)\n    (check-within (candidate (list (list 6 2) (list 10 2)) 2) 17 0.001)\n    (check-within (candidate (list (list 7 1) (list 1 1)) 1) 8 0.001)\n    (check-within (candidate (list (list 7 1) (list 3 2)) 1) 8 0.001)\n    (check-within (candidate (list (list 7 1) (list 6 1)) 2) 14 0.001)\n    (check-within (candidate (list (list 7 2) (list 5 1)) 2) 16 0.001)\n    (check-within (candidate (list (list 7 2) (list 5 2)) 1) 8 0.001)\n    (check-within (candidate (list (list 7 2) (list 7 2)) 2) 15 0.001)\n    (check-within (candidate (list (list 7 2) (list 10 2)) 2) 18 0.001)\n    (check-within (candidate (list (list 8 1) (list 2 1)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 1) (list 2 2)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 1) (list 4 2)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 1) (list 5 1)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 1) (list 6 2)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 1) (list 8 1)) 2) 17 0.001)\n    (check-within (candidate (list (list 8 1) (list 9 1)) 1) 10 0.001)\n    (check-within (candidate (list (list 8 1) (list 9 2)) 2) 21 0.001)\n    (check-within (candidate (list (list 8 2) (list 1 1)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 2) (list 1 2)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 2) (list 2 1)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 2) (list 8 2)) 1) 9 0.001)\n    (check-within (candidate (list (list 8 2) (list 9 1)) 2) 21 0.001)\n    (check-within (candidate (list (list 8 2) (list 9 2)) 2) 18 0.001)\n    (check-within (candidate (list (list 8 2) (list 10 1)) 2) 22 0.001)\n    (check-within (candidate (list (list 9 1) (list 1 1)) 1) 10 0.001)\n    (check-within (candidate (list (list 9 1) (list 3 2)) 2) 16 0.001)\n    (check-within (candidate (list (list 9 1) (list 4 2)) 2) 17 0.001)\n    (check-within (candidate (list (list 9 1) (list 6 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 9 1) (list 9 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 9 1) (list 10 2)) 1) 11 0.001)\n    (check-within (candidate (list (list 9 2) (list 1 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 9 2) (list 2 1)) 2) 15 0.001)\n    (check-within (candidate (list (list 9 2) (list 6 1)) 2) 19 0.001)\n    (check-within (candidate (list (list 9 2) (list 6 2)) 2) 16 0.001)\n    (check-within (candidate (list (list 9 2) (list 8 2)) 1) 10 0.001)\n    (check-within (candidate (list (list 10 1) (list 2 2)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 1) (list 4 2)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 1) (list 5 1)) 2) 16 0.001)\n    (check-within (candidate (list (list 10 1) (list 5 2)) 2) 19 0.001)\n    (check-within (candidate (list (list 10 1) (list 7 1)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 2) (list 1 2)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 2) (list 4 1)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 2) (list 5 1)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 2) (list 7 1)) 1) 11 0.001)\n    (check-within (candidate (list (list 10 2) (list 8 2)) 2) 19 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2902_maxSum", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal.\n;; Return the maximum sum or -1 if no such pair exists.\n;; Example 1:\n;; Input: nums = [51,71,17,24,42]\n;; Output: 88\n;; Explanation:\n;; For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88.\n;; For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\n;; It can be shown that there are no other pairs with equal maximum digits, so the answer is 88.\n;; Example 2:\n;; Input: nums = [1,2,3,4]\n;; Output: -1\n;; Explanation: No pair exists in nums with equal maximum digits.\n;; Constraints:\n;;  * 2 <= nums.length <= 100\n;;  * 1 <= nums[i] <= 104\n(define (maxSum nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2902_maxSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxSum))\n    (check-within (candidate (list 51 71 17 24 42)) 88 0.001)\n    (check-within (candidate (list 1 2 3 4)) -1 0.001)\n    (check-within (candidate (list 31 25 72 79 74)) 146 0.001)\n    (check-within (candidate (list 84 91 18 59 27 9 81 33 17 58)) 165 0.001)\n    (check-within (candidate (list 8 75 28 35 21 13 21)) 42 0.001)\n    (check-within (candidate (list 35 52 74 92 25 65 77 1 73 32)) 151 0.001)\n    (check-within (candidate (list 68 8 100 84 80 14 88)) 172 0.001)\n    (check-within (candidate (list 53 98 69 64 40 60 23)) 167 0.001)\n    (check-within (candidate (list 21 76)) -1 0.001)\n    (check-within (candidate (list 99 63 23 70 18 64)) 127 0.001)\n    (check-within (candidate (list 21 21 78)) 42 0.001)\n    (check-within (candidate (list 58 88 58 99 26 92)) 191 0.001)\n    (check-within (candidate (list 10 24 25 20 92 73 63 51)) 76 0.001)\n    (check-within (candidate (list 87 6 17 32 14 42 46 65 43 9)) 111 0.001)\n    (check-within (candidate (list 96 46 85 19 29)) 125 0.001)\n    (check-within (candidate (list 5 24)) -1 0.001)\n    (check-within (candidate (list 26 76 24 96 82 97 97 72 35)) 194 0.001)\n    (check-within (candidate (list 77 82 30 94)) -1 0.001)\n    (check-within (candidate (list 76 94 51 82 3 89 52 96)) 190 0.001)\n    (check-within (candidate (list 27 59 57 97 6 46 88 41 52 46)) 156 0.001)\n    (check-within (candidate (list 17 2)) -1 0.001)\n    (check-within (candidate (list 62 69)) -1 0.001)\n    (check-within (candidate (list 63 24 1)) -1 0.001)\n    (check-within (candidate (list 55 46 4 61 78 21 85 52 83 77)) 168 0.001)\n    (check-within (candidate (list 21 73 2 80 99 98 89)) 197 0.001)\n    (check-within (candidate (list 94 63 50 43 62 14 83 91)) 185 0.001)\n    (check-within (candidate (list 66 17 17 35 46 77 7 15 38)) 112 0.001)\n    (check-within (candidate (list 61 90 34 29 68 35)) 119 0.001)\n    (check-within (candidate (list 18 82 78)) 160 0.001)\n    (check-within (candidate (list 8 71 2 59 70 12)) 141 0.001)\n    (check-within (candidate (list 55 88 59)) -1 0.001)\n    (check-within (candidate (list 49 47 46 65 37 24 75 81 54 39)) 122 0.001)\n    (check-within (candidate (list 73 79 48 45 57 73 51 78 67 78)) 156 0.001)\n    (check-within (candidate (list 2 82 80 74 34 54 65)) 162 0.001)\n    (check-within (candidate (list 9 62 85 95 36 62 21 38 16 12)) 124 0.001)\n    (check-within (candidate (list 50 80 34 9 86 20 67 94 65 82)) 168 0.001)\n    (check-within (candidate (list 79 74 92 84 37 19)) 171 0.001)\n    (check-within (candidate (list 85 20 79)) -1 0.001)\n    (check-within (candidate (list 89 55 67 84 3)) -1 0.001)\n    (check-within (candidate (list 16 44 2 54 58 94)) -1 0.001)\n    (check-within (candidate (list 71 14 24 13 21 14 100 18 84 37)) 108 0.001)\n    (check-within (candidate (list 13 26)) -1 0.001)\n    (check-within (candidate (list 82 30 53 72 56 94 72 67)) 144 0.001)\n    (check-within (candidate (list 14 80 92 65 85 70)) 165 0.001)\n    (check-within (candidate (list 81 39 43 31 53 43 87 19 93)) 168 0.001)\n    (check-within (candidate (list 27 12 80 38 94 92 67 54 56 20)) 186 0.001)\n    (check-within (candidate (list 52 32 24 6 3 89 100 3 5 3)) 57 0.001)\n    (check-within (candidate (list 93 1 13 88 47 48 46 63)) 136 0.001)\n    (check-within (candidate (list 3 55 40 93 97 37 31 31)) 190 0.001)\n    (check-within (candidate (list 58 41 10 74 40 17)) 91 0.001)\n    (check-within (candidate (list 58 33 78 53 88 1 15 44 82)) 170 0.001)\n    (check-within (candidate (list 41 48 96 71 35 89 57 71)) 185 0.001)\n    (check-within (candidate (list 43 4 69 29 37 50)) 98 0.001)\n    (check-within (candidate (list 65 88 2)) -1 0.001)\n    (check-within (candidate (list 86 42 59 44 76 6)) 86 0.001)\n    (check-within (candidate (list 29 96 1 10 27 78 56 62)) 125 0.001)\n    (check-within (candidate (list 100 48 6)) -1 0.001)\n    (check-within (candidate (list 33 17)) -1 0.001)\n    (check-within (candidate (list 8 91)) -1 0.001)\n    (check-within (candidate (list 91 13 72 42 28)) -1 0.001)\n    (check-within (candidate (list 5 53 35 88 77 1 66 57)) 134 0.001)\n    (check-within (candidate (list 50 27 52 70 67 60 65)) 137 0.001)\n    (check-within (candidate (list 84 82 31 45 94 62 45 32)) 166 0.001)\n    (check-within (candidate (list 61 61 61 23 47 34 21 6 65 25)) 126 0.001)\n    (check-within (candidate (list 60 21 11 99)) -1 0.001)\n    (check-within (candidate (list 22 83 62 12 63 100 41 33)) 125 0.001)\n    (check-within (candidate (list 92 58 85)) 143 0.001)\n    (check-within (candidate (list 93 5 46 26 25 36 27 12 30)) 82 0.001)\n    (check-within (candidate (list 52 30 16)) -1 0.001)\n    (check-within (candidate (list 22 57 33 26 76 14 67)) 143 0.001)\n    (check-within (candidate (list 90 72 37 30)) 109 0.001)\n    (check-within (candidate (list 44 87 16)) -1 0.001)\n    (check-within (candidate (list 19 12 52 8 3 58)) 66 0.001)\n    (check-within (candidate (list 88 52 35 6 58 47 62 82 47 86)) 174 0.001)\n    (check-within (candidate (list 84 1 48 76 16 10 11 60)) 132 0.001)\n    (check-within (candidate (list 12 60 69 63 78 22 28)) 123 0.001)\n    (check-within (candidate (list 16 28 82 77 41 22)) 110 0.001)\n    (check-within (candidate (list 97 31 63 2 94 14 47)) 191 0.001)\n    (check-within (candidate (list 93 100 45 74 31 41 84 90 18 21)) 183 0.001)\n    (check-within (candidate (list 21 12 38 64 57 24)) 33 0.001)\n    (check-within (candidate (list 33 17 99 2 58 59 72 9 62)) 158 0.001)\n    (check-within (candidate (list 36 11 23 98 14 89 90 53)) 188 0.001)\n    (check-within (candidate (list 57 90 5 78 84 51)) 162 0.001)\n    (check-within (candidate (list 73 73 76 48 30)) 149 0.001)\n    (check-within (candidate (list 2 74 37 75)) 149 0.001)\n    (check-within (candidate (list 84 35 65 12)) -1 0.001)\n    (check-within (candidate (list 95 46 23 81 35)) -1 0.001)\n    (check-within (candidate (list 64 76 46 54 64 94 90 95)) 189 0.001)\n    (check-within (candidate (list 77 52 74 84 47 89 53)) 151 0.001)\n    (check-within (candidate (list 29 31 52 12 89 88 10 18)) 118 0.001)\n    (check-within (candidate (list 28 57 28 41 25 89 20)) 56 0.001)\n    (check-within (candidate (list 31 28)) -1 0.001)\n    (check-within (candidate (list 51 1 98 73 84 11 100 100 75)) 200 0.001)\n    (check-within (candidate (list 76 2 26 49 78 36 2 70 64)) 146 0.001)\n    (check-within (candidate (list 34 63 21 49)) -1 0.001)\n    (check-within (candidate (list 35 19 1 21 11 59 38)) 78 0.001)\n    (check-within (candidate (list 1 35 74 58 56 54 75)) 149 0.001)\n    (check-within (candidate (list 20 49)) -1 0.001)\n    (check-within (candidate (list 97 92 13 30)) 189 0.001)\n    (check-within (candidate (list 89 49 10 36 37)) 138 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2904_minimumOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums of length n.\n;; The numbers from 0 to n - 1 are divided into three groups numbered from 1 to 3, where number i belongs to group nums[i]. Notice that some groups may be empty.\n;; You are allowed to perform this operation any number of times:\n;;  * Pick number x and change its group. More formally, change nums[x] to any number from 1 to 3.\n;; A new array res is constructed using the following procedure:\n;;  1. Sort the numbers in each group independently.\n;;  2. Append the elements of groups 1, 2, and 3 to res in this order.\n;; Array nums is called a beautiful array if the constructed array res is sorted in non-decreasing order.\n;; Return the minimum number of operations to make nums a beautiful array.\n;; Example 1:\n;; Input: nums = [2,1,3,2,1]\n;; Output: 3\n;; Explanation: It's optimal to perform three operations:\n;; 1. change nums[0] to 1.\n;; 2. change nums[2] to 1.\n;; 3. change nums[3] to 1.\n;; After performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\n;; It can be proven that there is no valid sequence of less than three operations.\n;; Example 2:\n;; Input: nums = [1,3,2,1,3,3]\n;; Output: 2\n;; Explanation: It's optimal to perform two operations:\n;; 1. change nums[1] to 1.\n;; 2. change nums[2] to 1.\n;; After performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n;; It can be proven that there is no valid sequence of less than two operations.\n;; Example 3:\n;; Input: nums = [2,2,2,2,3,3]\n;; Output: 0\n;; Explanation: It's optimal to not perform operations.\n;; After sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n;; Constraints:\n;;  * 1 <= nums.length <= 100\n;;  * 1 <= nums[i] <= 3\n(define (minimumOperations nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2904_minimumOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumOperations))\n    (check-within (candidate (list 2 1 3 2 1)) 3 0.001)\n    (check-within (candidate (list 1 3 2 1 3 3)) 2 0.001)\n    (check-within (candidate (list 2 2 2 2 3 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 2)) 0 0.001)\n    (check-within (candidate (list 3)) 0 0.001)\n    (check-within (candidate (list 1 2)) 0 0.001)\n    (check-within (candidate (list 2 2)) 0 0.001)\n    (check-within (candidate (list 3 2)) 1 0.001)\n    (check-within (candidate (list 1 3)) 0 0.001)\n    (check-within (candidate (list 2 3)) 0 0.001)\n    (check-within (candidate (list 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 2)) 0 0.001)\n    (check-within (candidate (list 2 1 2)) 1 0.001)\n    (check-within (candidate (list 3 1 2)) 1 0.001)\n    (check-within (candidate (list 1 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2 2)) 0 0.001)\n    (check-within (candidate (list 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 3 2)) 1 0.001)\n    (check-within (candidate (list 2 3 2)) 1 0.001)\n    (check-within (candidate (list 3 3 2)) 1 0.001)\n    (check-within (candidate (list 1 1 3)) 0 0.001)\n    (check-within (candidate (list 2 1 3)) 1 0.001)\n    (check-within (candidate (list 3 1 3)) 1 0.001)\n    (check-within (candidate (list 1 2 3)) 0 0.001)\n    (check-within (candidate (list 2 2 3)) 0 0.001)\n    (check-within (candidate (list 3 2 3)) 1 0.001)\n    (check-within (candidate (list 1 3 3)) 0 0.001)\n    (check-within (candidate (list 2 3 3)) 0 0.001)\n    (check-within (candidate (list 3 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2)) 0 0.001)\n    (check-within (candidate (list 2 1 1 2)) 1 0.001)\n    (check-within (candidate (list 3 1 1 2)) 1 0.001)\n    (check-within (candidate (list 1 2 1 2)) 1 0.001)\n    (check-within (candidate (list 2 2 1 2)) 1 0.001)\n    (check-within (candidate (list 3 2 1 2)) 2 0.001)\n    (check-within (candidate (list 1 3 1 2)) 1 0.001)\n    (check-within (candidate (list 2 3 1 2)) 2 0.001)\n    (check-within (candidate (list 3 3 1 2)) 2 0.001)\n    (check-within (candidate (list 1 1 2 2)) 0 0.001)\n    (check-within (candidate (list 2 1 2 2)) 1 0.001)\n    (check-within (candidate (list 3 1 2 2)) 1 0.001)\n    (check-within (candidate (list 1 2 2 2)) 0 0.001)\n    (check-within (candidate (list 2 2 2 2)) 0 0.001)\n    (check-within (candidate (list 3 2 2 2)) 1 0.001)\n    (check-within (candidate (list 1 3 2 2)) 1 0.001)\n    (check-within (candidate (list 2 3 2 2)) 1 0.001)\n    (check-within (candidate (list 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 1 1 3 2)) 1 0.001)\n    (check-within (candidate (list 2 1 3 2)) 2 0.001)\n    (check-within (candidate (list 3 1 3 2)) 2 0.001)\n    (check-within (candidate (list 1 2 3 2)) 1 0.001)\n    (check-within (candidate (list 2 2 3 2)) 1 0.001)\n    (check-within (candidate (list 3 2 3 2)) 2 0.001)\n    (check-within (candidate (list 1 3 3 2)) 1 0.001)\n    (check-within (candidate (list 2 3 3 2)) 1 0.001)\n    (check-within (candidate (list 3 3 3 2)) 1 0.001)\n    (check-within (candidate (list 1 1 1 3)) 0 0.001)\n    (check-within (candidate (list 2 1 1 3)) 1 0.001)\n    (check-within (candidate (list 3 1 1 3)) 1 0.001)\n    (check-within (candidate (list 1 2 1 3)) 1 0.001)\n    (check-within (candidate (list 2 2 1 3)) 1 0.001)\n    (check-within (candidate (list 3 2 1 3)) 2 0.001)\n    (check-within (candidate (list 1 3 1 3)) 1 0.001)\n    (check-within (candidate (list 2 3 1 3)) 1 0.001)\n    (check-within (candidate (list 3 3 1 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 3)) 0 0.001)\n    (check-within (candidate (list 2 1 2 3)) 1 0.001)\n    (check-within (candidate (list 3 1 2 3)) 1 0.001)\n    (check-within (candidate (list 1 2 2 3)) 0 0.001)\n    (check-within (candidate (list 2 2 2 3)) 0 0.001)\n    (check-within (candidate (list 3 2 2 3)) 1 0.001)\n    (check-within (candidate (list 1 3 2 3)) 1 0.001)\n    (check-within (candidate (list 2 3 2 3)) 1 0.001)\n    (check-within (candidate (list 3 3 2 3)) 1 0.001)\n    (check-within (candidate (list 1 1 3 3)) 0 0.001)\n    (check-within (candidate (list 2 1 3 3)) 1 0.001)\n    (check-within (candidate (list 3 1 3 3)) 1 0.001)\n    (check-within (candidate (list 1 2 3 3)) 0 0.001)\n    (check-within (candidate (list 2 2 3 3)) 0 0.001)\n    (check-within (candidate (list 3 2 3 3)) 1 0.001)\n    (check-within (candidate (list 1 3 3 3)) 0 0.001)\n    (check-within (candidate (list 2 3 3 3)) 0 0.001)\n    (check-within (candidate (list 3 3 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 2)) 0 0.001)\n    (check-within (candidate (list 2 1 1 1 2)) 1 0.001)\n    (check-within (candidate (list 3 1 1 1 2)) 1 0.001)\n    (check-within (candidate (list 1 2 1 1 2)) 1 0.001)\n    (check-within (candidate (list 2 2 1 1 2)) 2 0.001)\n    (check-within (candidate (list 3 2 1 1 2)) 2 0.001)\n    (check-within (candidate (list 1 3 1 1 2)) 1 0.001)\n    (check-within (candidate (list 2 3 1 1 2)) 2 0.001)\n    (check-within (candidate (list 3 3 1 1 2)) 2 0.001)\n    (check-within (candidate (list 1 1 2 1 2)) 1 0.001)\n    (check-within (candidate (list 2 1 2 1 2)) 2 0.001)\n    (check-within (candidate (list 3 1 2 1 2)) 2 0.001)\n    (check-within (candidate (list 1 2 2 1 2)) 1 0.001)\n    (check-within (candidate (list 2 2 2 1 2)) 1 0.001)\n    (check-within (candidate (list 3 2 2 1 2)) 2 0.001)\n    (check-within (candidate (list 1 3 2 1 2)) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2905_countPalindromePaths", "language": "rkt", "prompt": "#lang racket\n;; You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\n;; You are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\n;; Return the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\n;; A string is a palindrome when it reads the same backwards as forwards.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png]\n;; Input: parent = [-1,0,0,1,1,2], s = \"acaabc\"\n;; Output: 8\n;; Explanation: The valid pairs are:\n;; - All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n;; - The pair (2,3) result in the string \"aca\" which is a palindrome.\n;; - The pair (1,5) result in the string \"cac\" which is a palindrome.\n;; - The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\".\n;; Example 2:\n;; Input: parent = [-1,0,0,0,0], s = \"aaaaa\"\n;; Output: 10\n;; Explanation: Any pair of nodes (u,v) where u < v is valid.\n;; Constraints:\n;;  * n == parent.length == s.length\n;;  * 1 <= n <= 105\n;;  * 0 <= parent[i] <= n - 1 for all i >= 1\n;;  * parent[0] == -1\n;;  * parent represents a valid tree.\n;;  * s consists of only lowercase English letters.\n(define (countPalindromePaths parent s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2905_countPalindromePaths.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countPalindromePaths))\n    (check-within (candidate (list -1 0 0 1 1 2) acaabc) 8 0.001)\n    (check-within (candidate (list -1 0 0 0 0) aaaaa) 10 0.001)\n    (check-within (candidate (list -1 0) pi) 1 0.001)\n    (check-within (candidate (list -1 5 0 5 5 2) xsbcqq) 7 0.001)\n    (check-within (candidate (list -1 6 8 5 0 4 2 0 4) tiaiaivea) 20 0.001)\n    (check-within (candidate (list -1 0 0 0 1 3 7 2) pxxgtgpp) 18 0.001)\n    (check-within (candidate (list -1 0 1 4 1 0) hfhmmf) 12 0.001)\n    (check-within (candidate (list -1 0 1) cri) 2 0.001)\n    (check-within (candidate (list -1 0 0 5 7 0 0 1 2 0) snlzlzngna) 19 0.001)\n    (check-within (candidate (list -1 0 0) sat) 2 0.001)\n    (check-within (candidate (list -1 0) ko) 1 0.001)\n    (check-within (candidate (list -1 0 6 4 1 6 3 1) jibwrfoi) 8 0.001)\n    (check-within (candidate (list -1 4 0 4 6 0 5 5) bhrlorou) 18 0.001)\n    (check-within (candidate (list -1 4 4 6 0 7 1 1) boqvndoo) 18 0.001)\n    (check-within (candidate (list -1 2 0 1 0) eixnx) 6 0.001)\n    (check-within (candidate (list -1 5 0 2 2 3) jwlllw) 14 0.001)\n    (check-within (candidate (list -1 2 6 2 5 2 7 0) pipfippl) 15 0.001)\n    (check-within (candidate (list -1 6 0 6 5 6 2 6 5 6) zwrdhnhwtf) 11 0.001)\n    (check-within (candidate (list -1 4 1 1 5 0) gndfnj) 9 0.001)\n    (check-within (candidate (list -1 0 0 0 1) crwkr) 7 0.001)\n    (check-within (candidate (list -1 4 4 4 0 2 0) wwwwewd) 13 0.001)\n    (check-within (candidate (list -1 2 0) mwz) 2 0.001)\n    (check-within (candidate (list -1 0 1 6 5 0 1 1 1 0) mqgmjzrwuq) 14 0.001)\n    (check-within (candidate (list -1 2 3 0 3 3 3 3) bnievjov) 8 0.001)\n    (check-within (candidate (list -1 0 0) kyr) 2 0.001)\n    (check-within (candidate (list -1 0 5 1 2 3 2 3 9 4) xukzwzsnww) 18 0.001)\n    (check-within (candidate (list -1 6 0 1 5 0 2 2 6 0) snlpzocqpt) 10 0.001)\n    (check-within (candidate (list -1 3 0 5 5 2) pxlxpl) 12 0.001)\n    (check-within (candidate (list -1 5 5 5 5 0) ketewj) 6 0.001)\n    (check-within (candidate (list -1 0 4 0 0) zrrqq) 7 0.001)\n    (check-within (candidate (list -1 0 0) qlw) 2 0.001)\n    (check-within (candidate (list -1 0 0) bds) 2 0.001)\n    (check-within (candidate (list -1 2 6 6 0 4 4 2) odggsrsp) 13 0.001)\n    (check-within (candidate (list -1 0 1) ldk) 2 0.001)\n    (check-within (candidate (list -1 0 7 0 6 2 3 3 3) elllffflv) 28 0.001)\n    (check-within (candidate (list -1 4 4 0 0) ntzhc) 4 0.001)\n    (check-within (candidate (list -1 5 4 1 1 0 4) gmcmavf) 8 0.001)\n    (check-within (candidate (list -1 0 0 4 0) aogkg) 6 0.001)\n    (check-within (candidate (list -1 2 0) xmt) 2 0.001)\n    (check-within (candidate (list -1 2 0) dff) 3 0.001)\n    (check-within (candidate (list -1 0 1 1) lsvw) 3 0.001)\n    (check-within (candidate (list -1 0 0) ovi) 2 0.001)\n    (check-within (candidate (list -1 6 0 5 2 2 0 3) lpnfznpf) 19 0.001)\n    (check-within (candidate (list -1 7 5 5 0 0 2 2) hqitxxwi) 16 0.001)\n    (check-within (candidate (list -1 2 0) pyw) 2 0.001)\n    (check-within (candidate (list -1 0 0 0) ybfa) 3 0.001)\n    (check-within (candidate (list -1 3 6 6 6 0 0 4) ulicllkc) 11 0.001)\n    (check-within (candidate (list -1 3 1 0) ukne) 3 0.001)\n    (check-within (candidate (list -1 2 0 1 0 0) rhlxdd) 6 0.001)\n    (check-within (candidate (list -1 4 5 0 2 0) zenbnb) 12 0.001)\n    (check-within (candidate (list -1 0 5 4 5 1 3 9 7 4) jigognjnlb) 12 0.001)\n    (check-within (candidate (list -1 4 4 6 3 0 5 3 6) imrcmdkew) 11 0.001)\n    (check-within (candidate (list -1 4 4 0 6 4 0 0) dqpipiyz) 9 0.001)\n    (check-within (candidate (list -1 0 0) mgm) 2 0.001)\n    (check-within (candidate (list -1 0 4 0 1) pzlob) 4 0.001)\n    (check-within (candidate (list -1 8 0 8 8 3 4 4 0 6) vvbvyovyvy) 30 0.001)\n    (check-within (candidate (list -1 0 4 0 5 1 1) dvrvpea) 9 0.001)\n    (check-within (candidate (list -1 0 1) jnx) 2 0.001)\n    (check-within (candidate (list -1 0 1 2) wxjj) 5 0.001)\n    (check-within (candidate (list -1 3 3 0 1 2 1) erorchx) 9 0.001)\n    (check-within (candidate (list -1 0 4 1 1 4 3) ywzwzcw) 14 0.001)\n    (check-within (candidate (list -1 4 6 2 3 3 0) bititzq) 10 0.001)\n    (check-within (candidate (list -1 2 0) uup) 2 0.001)\n    (check-within (candidate (list -1 2 3 0 0) siiou) 6 0.001)\n    (check-within (candidate (list -1 2 0 2 0) dilfs) 4 0.001)\n    (check-within (candidate (list -1 3 7 0 1 0 2 3 0) wqojvjoqq) 22 0.001)\n    (check-within (candidate (list -1 0) hi) 1 0.001)\n    (check-within (candidate (list -1 3 1 4 0 6 3 1) fwvwwqqw) 21 0.001)\n    (check-within (candidate (list -1 0 4 2 1 1 1) hkmmkmk) 16 0.001)\n    (check-within (candidate (list -1 4 3 1 0) bzeez) 9 0.001)\n    (check-within (candidate (list -1 3 3 0) zyuj) 3 0.001)\n    (check-within (candidate (list -1 0 1 4 6 2 2) tlcpcll) 13 0.001)\n    (check-within (candidate (list -1 2 0) vjw) 2 0.001)\n    (check-within (candidate (list -1 0) nz) 1 0.001)\n    (check-within (candidate (list -1 0 0) iot) 2 0.001)\n    (check-within (candidate (list -1 2 8 8 3 1 2 0 0) rlurrluxm) 19 0.001)\n    (check-within (candidate (list -1 5 0 0 0 4) zxrddx) 10 0.001)\n    (check-within (candidate (list -1 0 1 2) tffc) 5 0.001)\n    (check-within (candidate (list -1 5 3 0 3 0) ltdewr) 5 0.001)\n    (check-within (candidate (list -1 0 4 5 0 1) gjwwjv) 9 0.001)\n    (check-within (candidate (list -1 7 7 0 8 2 2 4 3 8) cnssgsoogy) 20 0.001)\n    (check-within (candidate (list -1 7 1 6 0 0 7 0) zaceoxax) 13 0.001)\n    (check-within (candidate (list -1 0 1 0 3 0) zrvyyc) 8 0.001)\n    (check-within (candidate (list -1 4 9 0 3 3 7 4 2 0) qxixxxxxix) 41 0.001)\n    (check-within (candidate (list -1 2 0 5 5 2 5) hoptvuu) 9 0.001)\n    (check-within (candidate (list -1 7 3 0 3 1 0 3) kopflpao) 13 0.001)\n    (check-within (candidate (list -1 0 1 6 1 1 1) bhhslhl) 11 0.001)\n    (check-within (candidate (list -1 0 0 1 2) khhch) 8 0.001)\n    (check-within (candidate (list -1 0 3 0) koss) 5 0.001)\n    (check-within (candidate (list -1 3 4 4 0) owzoq) 4 0.001)\n    (check-within (candidate (list -1 2 0 1 1) zqqww) 8 0.001)\n    (check-within (candidate (list -1 0 1 1 1 2 2) lacccdb) 13 0.001)\n    (check-within (candidate (list -1 4 3 4 6 6 7 0 6) sjoooorrm) 24 0.001)\n    (check-within (candidate (list -1 7 4 2 0 6 2 3 7) guqyxxtau) 9 0.001)\n    (check-within (candidate (list -1 4 4 0 0) scicc) 8 0.001)\n    (check-within (candidate (list -1 5 8 6 3 0 2 3 1) naphhahhp) 29 0.001)\n    (check-within (candidate (list -1 3 8 8 5 0 4 0 0 2) ciiyggofij) 23 0.001)\n    (check-within (candidate (list -1 2 0 2 2 3 7 8 4 2) stthtthddt) 34 0.001)\n    (check-within (candidate (list -1 2 0 7 3 7 4 0) mjjsjdsj) 18 0.001)\n    (check-within (candidate (list -1 0) ey) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2914_maximumSafenessFactor", "language": "rkt", "prompt": "#lang racket\n;;     You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\n;; * A cell containing a thief if grid[r][c] = 1\n;; * An empty cell if grid[r][c] = 0\n;;     You are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\n;;     The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\n;;     Return the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\n;;     An adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\n;;     The Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\n;;     Example 1:\n;;     [https://assets.leetcode.com/uploads/2023/07/02/example1.png]\n;;     Input: grid = [[1,0,0],[0,0,0],[0,0,1]]\n;;     Output: 0\n;;     Explanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n;;     Example 2:\n;;     [https://assets.leetcode.com/uploads/2023/07/02/example2.png]\n;;     Input: grid = [[0,0,1],[0,0,0],[0,0,0]]\n;;     Output: 2\n;;     Explanation: The path depicted in the picture above has a safeness factor of 2 since:\n;;     - The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\n;;     It can be shown that there are no other paths with a higher safeness factor.\n;;     Example 3:\n;;     [https://assets.leetcode.com/uploads/2023/07/02/example3.png]\n;;     Input: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\n;;     Output: 2\n;;     Explanation: The path depicted in the picture above has a safeness factor of 2 since:\n;;     - The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n;;     - The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\n;;     It can be shown that there are no other paths with a higher safeness factor.\n;;     Constraints:\n;; * 1 <= grid.length == n <= 400\n;; * grid[i].length == n\n;; * grid[i][j] is either 0 or 1.\n;; * There is at least one thief in the grid.\n(define (maximumSafenessFactor grid)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2914_maximumSafenessFactor.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumSafenessFactor))\n    (check-within (candidate (list (list 1 0 0) (list 0 0 0) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 0 0 1) (list 0 0 0) (list 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 1) (list 0 0 0 0) (list 0 0 0 0) (list 1 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 1 0) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 1 0 0) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 1 0) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 0 0 0) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1) (list 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 1 0) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 0 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 0 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 0) (list 1 1 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 0) (list 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 0) (list 1 0 1))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 0) (list 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 0) (list 0 1 1))) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2915_countInterestingSubarrays", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums, an integer modulo, and an integer k.\n;; Your task is to find the count of subarrays that are interesting.\n;; A subarray nums[l..r] is interesting if the following condition holds:\n;;  * Let cnt be the number of indices i in the range [l, r] such that nums[i] % modulo == k. Then, cnt % modulo == k.\n;; Return an integer denoting the count of interesting subarrays.\n;; Note: A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [3,2,4], modulo = 2, k = 1\n;; Output: 3\n;; Explanation: In this example the interesting subarrays are:\n;; The subarray nums[0..0] which is [3].\n;; - There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k.\n;; - Hence, cnt = 1 and cnt % modulo == k.\n;; The subarray nums[0..1] which is [3,2].\n;; - There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.\n;; - Hence, cnt = 1 and cnt % modulo == k.\n;; The subarray nums[0..2] which is [3,2,4].\n;; - There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k.\n;; - Hence, cnt = 1 and cnt % modulo == k.\n;; It can be shown that there are no other interesting subarrays. So, the answer is 3.\n;; Example 2:\n;; Input: nums = [3,1,9,6], modulo = 3, k = 0\n;; Output: 2\n;; Explanation: In this example the interesting subarrays are:\n;; The subarray nums[0..3] which is [3,1,9,6].\n;; - There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k.\n;; - Hence, cnt = 3 and cnt % modulo == k.\n;; The subarray nums[1..1] which is [1].\n;; - There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k.\n;; - Hence, cnt = 0 and cnt % modulo == k.\n;; It can be shown that there are no other interesting subarrays. So, the answer is 2.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n;;  * 1 <= modulo <= 109\n;;  * 0 <= k < modulo\n(define (countInterestingSubarrays nums modulo k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2915_countInterestingSubarrays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countInterestingSubarrays))\n    (check-within (candidate (list 3 2 4) 2 1) 3 0.001)\n    (check-within (candidate (list 3 1 9 6) 3 0) 2 0.001)\n    (check-within (candidate (list 11 12 21 31) 10 1) 5 0.001)\n    (check-within (candidate (list 2 4) 7 2) 0 0.001)\n    (check-within (candidate (list 2 7) 7 0) 1 0.001)\n    (check-within (candidate (list 2 45) 13 2) 0 0.001)\n    (check-within (candidate (list 3 3) 5 3) 0 0.001)\n    (check-within (candidate (list 3 4) 8 3) 0 0.001)\n    (check-within (candidate (list 4 5) 1 0) 3 0.001)\n    (check-within (candidate (list 5 1) 6 1) 2 0.001)\n    (check-within (candidate (list 7 2) 7 0) 1 0.001)\n    (check-within (candidate (list 7 4) 7 0) 1 0.001)\n    (check-within (candidate (list 8 8) 4 0) 0 0.001)\n    (check-within (candidate (list 9 2) 2 0) 1 0.001)\n    (check-within (candidate (list 18 43) 3 0) 1 0.001)\n    (check-within (candidate (list 19 67) 47 19) 0 0.001)\n    (check-within (candidate (list 20 8) 41 8) 0 0.001)\n    (check-within (candidate (list 26 5) 21 5) 0 0.001)\n    (check-within (candidate (list 81 36) 4 0) 1 0.001)\n    (check-within (candidate (list 2 1 5) 9 1) 4 0.001)\n    (check-within (candidate (list 2 2 5) 3 2) 2 0.001)\n    (check-within (candidate (list 2 2 5) 4 2) 2 0.001)\n    (check-within (candidate (list 2 3 2) 6 2) 1 0.001)\n    (check-within (candidate (list 3 2 5) 1 0) 6 0.001)\n    (check-within (candidate (list 5 1 6) 2 1) 3 0.001)\n    (check-within (candidate (list 5 2 8) 2 0) 3 0.001)\n    (check-within (candidate (list 6 5 6) 6 0) 1 0.001)\n    (check-within (candidate (list 7 1 2) 1 0) 6 0.001)\n    (check-within (candidate (list 7 2 9) 4 1) 3 0.001)\n    (check-within (candidate (list 7 5 6) 4 1) 4 0.001)\n    (check-within (candidate (list 9 1 6) 7 1) 4 0.001)\n    (check-within (candidate (list 40 1 24) 41 1) 4 0.001)\n    (check-within (candidate (list 48 36 27) 9 0) 1 0.001)\n    (check-within (candidate (list 1 9 6 1) 2 1) 6 0.001)\n    (check-within (candidate (list 2 2 1 2) 3 2) 3 0.001)\n    (check-within (candidate (list 3 5 4 2) 5 0) 4 0.001)\n    (check-within (candidate (list 4 18 38 15) 21 4) 0 0.001)\n    (check-within (candidate (list 6 6 1 4) 7 6) 0 0.001)\n    (check-within (candidate (list 7 5 2 1) 1 0) 10 0.001)\n    (check-within (candidate (list 7 5 3 4) 3 1) 6 0.001)\n    (check-within (candidate (list 8 6 5 6) 3 0) 2 0.001)\n    (check-within (candidate (list 8 7 3 2) 6 2) 1 0.001)\n    (check-within (candidate (list 9 2 2 6) 7 2) 3 0.001)\n    (check-within (candidate (list 9 7 4 1) 2 1) 6 0.001)\n    (check-within (candidate (list 9 7 8 9) 5 4) 0 0.001)\n    (check-within (candidate (list 9 48 32 11) 2 0) 6 0.001)\n    (check-within (candidate (list 53 44 40 37) 2 0) 6 0.001)\n    (check-within (candidate (list 91 5 60 93) 59 1) 6 0.001)\n    (check-within (candidate (list 2 1 1 3 5) 4 1) 6 0.001)\n    (check-within (candidate (list 2 2 5 4 3) 5 2) 4 0.001)\n    (check-within (candidate (list 2 2 5 6 1) 1 0) 15 0.001)\n    (check-within (candidate (list 2 6 2 3 1) 9 2) 3 0.001)\n    (check-within (candidate (list 2 7 4 8 5) 2 0) 7 0.001)\n    (check-within (candidate (list 4 2 1 8 8) 3 2) 4 0.001)\n    (check-within (candidate (list 4 2 8 8 2) 9 2) 2 0.001)\n    (check-within (candidate (list 5 6 3 9 3) 9 3) 0 0.001)\n    (check-within (candidate (list 6 7 1 9 2) 1 0) 15 0.001)\n    (check-within (candidate (list 6 9 5 1 6) 5 1) 7 0.001)\n    (check-within (candidate (list 7 3 6 2 6) 1 0) 15 0.001)\n    (check-within (candidate (list 7 7 9 5 8) 4 1) 5 0.001)\n    (check-within (candidate (list 7 9 1 3 2) 8 1) 5 0.001)\n    (check-within (candidate (list 8 6 9 4 4) 9 4) 0 0.001)\n    (check-within (candidate (list 8 8 6 8 9) 9 8) 0 0.001)\n    (check-within (candidate (list 9 7 8 7 8) 7 0) 3 0.001)\n    (check-within (candidate (list 26 9 14 4 24) 26 0) 10 0.001)\n    (check-within (candidate (list 31 30 24 34 20) 22 2) 0 0.001)\n    (check-within (candidate (list 39 41 6 30 38) 43 6) 0 0.001)\n    (check-within (candidate (list 1 2 7 1 6 6) 5 1) 8 0.001)\n    (check-within (candidate (list 1 6 2 1 9 7) 3 1) 11 0.001)\n    (check-within (candidate (list 1 7 8 2 5 9) 7 1) 10 0.001)\n    (check-within (candidate (list 2 4 6 6 5 1) 8 6) 0 0.001)\n    (check-within (candidate (list 2 8 2 9 2 8) 5 2) 6 0.001)\n    (check-within (candidate (list 2 9 1 6 5 7) 7 2) 5 0.001)\n    (check-within (candidate (list 2 9 1 6 6 7) 9 6) 0 0.001)\n    (check-within (candidate (list 2 9 6 8 8 3) 1 0) 21 0.001)\n    (check-within (candidate (list 4 8 4 3 7 5) 4 0) 6 0.001)\n    (check-within (candidate (list 4 9 4 9 7 7) 9 0) 5 0.001)\n    (check-within (candidate (list 5 3 7 9 8 7) 3 0) 5 0.001)\n    (check-within (candidate (list 7 1 6 1 7 2) 6 1) 7 0.001)\n    (check-within (candidate (list 7 3 1 9 1 3) 5 1) 10 0.001)\n    (check-within (candidate (list 7 4 9 8 3 4) 1 0) 21 0.001)\n    (check-within (candidate (list 7 5 1 7 7 7) 8 7) 0 0.001)\n    (check-within (candidate (list 8 4 5 6 7 4) 4 0) 6 0.001)\n    (check-within (candidate (list 8 7 3 8 4 8) 8 0) 4 0.001)\n    (check-within (candidate (list 8 7 5 5 2 1) 5 0) 6 0.001)\n    (check-within (candidate (list 8 18 36 50 12 37) 18 0) 7 0.001)\n    (check-within (candidate (list 9 9 6 7 2 3) 5 2) 8 0.001)\n    (check-within (candidate (list 16 1 33 39 15 1) 30 1) 12 0.001)\n    (check-within (candidate (list 17 25 9 20 41 26) 38 3) 0 0.001)\n    (check-within (candidate (list 21 26 39 21 31 49) 22 21) 0 0.001)\n    (check-within (candidate (list 37 44 17 22 50 15) 6 2) 4 0.001)\n    (check-within (candidate (list 40 10 31 40 30 32) 50 40) 0 0.001)\n    (check-within (candidate (list 40 22 22 35 2 16) 24 16) 0 0.001)\n    (check-within (candidate (list 98 23 66 13 70 34) 74 13) 0 0.001)\n    (check-within (candidate (list 1 1 4 8 3 2 7) 9 1) 7 0.001)\n    (check-within (candidate (list 1 8 6 3 2 8 8) 2 0) 13 0.001)\n    (check-within (candidate (list 1 9 2 1 5 4 8) 4 1) 8 0.001)\n    (check-within (candidate (list 4 6 8 3 4 3 4) 7 4) 0 0.001)\n    (check-within (candidate (list 5 4 5 8 9 1 9) 4 1) 11 0.001)\n    (check-within (candidate (list 5 4 6 1 3 2 7) 9 1) 16 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2916_canSplitArray", "language": "rkt", "prompt": "#lang racket\n;; You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n non-empty arrays by performing a series of steps.\n;; In each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two subarrays, if, for each resulting subarray, at least one of the following holds:\n;;  * The length of the subarray is one, or\n;;  * The sum of elements of the subarray is greater than or equal to m.\n;; Return true if you can split the given array into n arrays, otherwise return false.\n;; Note: A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [2, 2, 1], m = 4\n;; Output: true\n;; Explanation: We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.\n;; Example 2:\n;; Input: nums = [2, 1, 3], m = 5\n;; Output: false\n;; Explanation: We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.\n;; Example 3:\n;; Input: nums = [2, 3, 3, 2, 3], m = 6\n;; Output: true\n;; Explanation: We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.\n;; Constraints:\n;;  * 1 <= n == nums.length <= 100\n;;  * 1 <= nums[i] <= 100\n;;  * 1 <= m <= 200\n(define (canSplitArray nums m)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2916_canSplitArray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate canSplitArray))\n    (check-within (candidate (list 2 2 1) 4) #t 0.001)\n    (check-within (candidate (list 2 3 3 2 3) 6) #t 0.001)\n    (check-within (candidate (list 1) 1) #t 0.001)\n    (check-within (candidate (list 2 1 3) 5) #f 0.001)\n    (check-within (candidate (list 1 1 1) 3) #f 0.001)\n    (check-within (candidate (list 2) 1) #t 0.001)\n    (check-within (candidate (list 2 1 2) 4) #f 0.001)\n    (check-within (candidate (list 1 2 1) 5) #f 0.001)\n    (check-within (candidate (list 2 2 2) 5) #f 0.001)\n    (check-within (candidate (list 3 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 1) #t 0.001)\n    (check-within (candidate (list 1) 2) #t 0.001)\n    (check-within (candidate (list 2) 2) #t 0.001)\n    (check-within (candidate (list 1 3 1) 6) #f 0.001)\n    (check-within (candidate (list 1 3 2) 6) #f 0.001)\n    (check-within (candidate (list 2 1 1) 6) #f 0.001)\n    (check-within (candidate (list 2 2 1) 6) #f 0.001)\n    (check-within (candidate (list 2 2 3) 6) #f 0.001)\n    (check-within (candidate (list 3) 2) #t 0.001)\n    (check-within (candidate (list 3 1 1) 6) #f 0.001)\n    (check-within (candidate (list 3 1 3) 6) #f 0.001)\n    (check-within (candidate (list 3) 3) #t 0.001)\n    (check-within (candidate (list 7) 5) #t 0.001)\n    (check-within (candidate (list 4) 7) #t 0.001)\n    (check-within (candidate (list 9) 7) #t 0.001)\n    (check-within (candidate (list 2) 8) #t 0.001)\n    (check-within (candidate (list 3 2 2) 6) #f 0.001)\n    (check-within (candidate (list 4) 8) #t 0.001)\n    (check-within (candidate (list 10) 11) #t 0.001)\n    (check-within (candidate (list 6) 12) #t 0.001)\n    (check-within (candidate (list 3 2 3) 6) #f 0.001)\n    (check-within (candidate (list 3 3 6) 10) #f 0.001)\n    (check-within (candidate (list 2) 14) #t 0.001)\n    (check-within (candidate (list 5 3 6) 10) #f 0.001)\n    (check-within (candidate (list 3) 18) #t 0.001)\n    (check-within (candidate (list 4 6 5) 12) #f 0.001)\n    (check-within (candidate (list 9 7) 1) #t 0.001)\n    (check-within (candidate (list 1 2) 2) #t 0.001)\n    (check-within (candidate (list 9 1 7) 14) #f 0.001)\n    (check-within (candidate (list 8 2 4) 16) #f 0.001)\n    (check-within (candidate (list 1 3) 2) #t 0.001)\n    (check-within (candidate (list 2 1) 2) #t 0.001)\n    (check-within (candidate (list 9 5 7) 20) #f 0.001)\n    (check-within (candidate (list 2 3) 2) #t 0.001)\n    (check-within (candidate (list 1 2 1 1) 4) #f 0.001)\n    (check-within (candidate (list 1 2 2 5) 8) #f 0.001)\n    (check-within (candidate (list 4 4 4 2) 9) #f 0.001)\n    (check-within (candidate (list 3 2) 2) #t 0.001)\n    (check-within (candidate (list 8 1 2 5) 10) #f 0.001)\n    (check-within (candidate (list 10 2 9 3) 14) #f 0.001)\n    (check-within (candidate (list 3 3) 2) #t 0.001)\n    (check-within (candidate (list 10 4 8 6) 16) #f 0.001)\n    (check-within (candidate (list 14 1 1 15) 17) #f 0.001)\n    (check-within (candidate (list 6 11 2 12) 18) #f 0.001)\n    (check-within (candidate (list 14 3 12 3) 18) #f 0.001)\n    (check-within (candidate (list 1 1) 3) #t 0.001)\n    (check-within (candidate (list 1 2) 3) #t 0.001)\n    (check-within (candidate (list 1 1 2 2 1) 5) #f 0.001)\n    (check-within (candidate (list 2 2 1 3 1) 5) #f 0.001)\n    (check-within (candidate (list 1 3) 3) #t 0.001)\n    (check-within (candidate (list 3 1 1 3 1) 5) #f 0.001)\n    (check-within (candidate (list 2 2) 3) #t 0.001)\n    (check-within (candidate (list 2 3) 3) #t 0.001)\n    (check-within (candidate (list 2 10) 3) #t 0.001)\n    (check-within (candidate (list 3 1) 3) #t 0.001)\n    (check-within (candidate (list 3 3) 3) #t 0.001)\n    (check-within (candidate (list 7 9) 3) #t 0.001)\n    (check-within (candidate (list 3 3 1 5 1) 7) #f 0.001)\n    (check-within (candidate (list 1 4 2 4 2) 8) #f 0.001)\n    (check-within (candidate (list 2 9 2 3 2) 12) #f 0.001)\n    (check-within (candidate (list 1 3) 4) #t 0.001)\n    (check-within (candidate (list 2 2) 4) #t 0.001)\n    (check-within (candidate (list 4 4 4 7 5) 13) #f 0.001)\n    (check-within (candidate (list 5 2 6 5 4) 13) #f 0.001)\n    (check-within (candidate (list 2 3) 4) #t 0.001)\n    (check-within (candidate (list 3 1) 4) #t 0.001)\n    (check-within (candidate (list 13 2 13 4 11) 18) #f 0.001)\n    (check-within (candidate (list 5 6 10 7 4) 19) #f 0.001)\n    (check-within (candidate (list 16 1 12 6 7) 19) #f 0.001)\n    (check-within (candidate (list 3 3) 4) #t 0.001)\n    (check-within (candidate (list 9 9 8 10 8) 20) #f 0.001)\n    (check-within (candidate (list 9 4) 5) #t 0.001)\n    (check-within (candidate (list 10 2) 5) #t 0.001)\n    (check-within (candidate (list 16 2 2 16 2) 20) #f 0.001)\n    (check-within (candidate (list 6 2) 7) #t 0.001)\n    (check-within (candidate (list 1 3 1 2 1 4) 6) #f 0.001)\n    (check-within (candidate (list 5 1) 8) #t 0.001)\n    (check-within (candidate (list 1 4 4 2 1 5) 9) #f 0.001)\n    (check-within (candidate (list 2 5) 12) #t 0.001)\n    (check-within (candidate (list 10 9) 15) #t 0.001)\n    (check-within (candidate (list 8 4) 18) #t 0.001)\n    (check-within (candidate (list 3 4 3 5 2 1) 9) #f 0.001)\n    (check-within (candidate (list 3 7 2 8 2 4) 11) #f 0.001)\n    (check-within (candidate (list 8 1) 19) #t 0.001)\n    (check-within (candidate (list 1 1 2) 3) #t 0.001)\n    (check-within (candidate (list 5 1 1 9 1 5) 11) #f 0.001)\n    (check-within (candidate (list 1 1 3) 3) #t 0.001)\n    (check-within (candidate (list 6 4 7 2 5 4) 12) #f 0.001)\n    (check-within (candidate (list 1 2 1) 3) #t 0.001)\n    (check-within (candidate (list 1 3 1) 3) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2917_countPairs", "language": "rkt", "prompt": "#lang racket\n;; Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.\n;; Example 1:\n;; Input: nums = [-1,1,2,3,1], target = 2\n;; Output: 3\n;; Explanation: There are 3 pairs of indices that satisfy the conditions in the statement:\n;; - (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n;; - (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target\n;; - (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\n;; Note that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\n;; Example 2:\n;; Input: nums = [-6,2,5,-2,-7,-1,3], target = -2\n;; Output: 10\n;; Explanation: There are 10 pairs of indices that satisfy the conditions in the statement:\n;; - (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n;; - (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n;; - (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n;; - (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n;; - (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n;; - (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n;; - (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n;; - (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n;; - (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n;; - (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target\n;; Constraints:\n;;  * 1 <= nums.length == n <= 50\n;;  * -50 <= nums[i], target <= 50\n(define (countPairs nums target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2917_countPairs.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countPairs))\n    (check-within (candidate (list -1 1 2 3 1) 2) 3 0.001)\n    (check-within (candidate (list -6 2 5 -2 -7 -1 3) -2) 10 0.001)\n    (check-within (candidate (list 9 -5 -5 5 -5 -4 -6 6 -6) 3) 27 0.001)\n    (check-within (candidate (list -8 -5 5 -4 10) 2) 6 0.001)\n    (check-within (candidate (list -5 0 -7 -1 9 8 -9 9) -14) 1 0.001)\n    (check-within (candidate (list 6 -1 7 4 2 3) 8) 8 0.001)\n    (check-within (candidate (list 2 8 2 8 7) 10) 3 0.001)\n    (check-within (candidate (list -6 1 1 -1 -10 -7 1 -5 -4 0) -15) 2 0.001)\n    (check-within (candidate (list 10 -2 -1 7 8 5 3 -4 -9) -10) 2 0.001)\n    (check-within (candidate (list 3 8 -3 4 10 -6) 1) 4 0.001)\n    (check-within (candidate (list -4 -6 -7 8) -13) 0 0.001)\n    (check-within (candidate (list -4 0 10 8 -2) 0) 3 0.001)\n    (check-within (candidate (list -8 -5 -3 1 -7) -6) 7 0.001)\n    (check-within (candidate (list 4 -8 -2 5 2 -9 6 5 -4) -4) 9 0.001)\n    (check-within (candidate (list -1 -5 4 4 -10) -6) 2 0.001)\n    (check-within (candidate (list -5 4 -6 -5 -10 -1 10 3) 6) 24 0.001)\n    (check-within (candidate (list -9 6 -4 10 1 8) 11) 11 0.001)\n    (check-within (candidate (list -10 -6 -8 -9 6 6 -6 -6 -3) -2) 25 0.001)\n    (check-within (candidate (list -7 7 6 -9 -4 10 8 -8 2 2) -1) 17 0.001)\n    (check-within (candidate (list 0 -1 0 -6 -9) -9) 2 0.001)\n    (check-within (candidate (list 8 -10 -9 6 -3 5 -2 -2 -7) -4) 15 0.001)\n    (check-within (candidate (list -1 3 8 3) 2) 0 0.001)\n    (check-within (candidate (list 7 2 9 -10 -4 4 -3 0) -20) 0 0.001)\n    (check-within (candidate (list 6 4 1 -7) 7) 4 0.001)\n    (check-within (candidate (list 3 8 6 -2 6 1 7) 7) 7 0.001)\n    (check-within (candidate (list 1 3 -10 5 -8 0 -5 -9) -7) 11 0.001)\n    (check-within (candidate (list -6 9 2 4 -9 2 4 -6 6 -9) 11) 40 0.001)\n    (check-within (candidate (list -10 -7 -5 -1 2 4 -6 6) -3) 15 0.001)\n    (check-within (candidate (list -1 0 1 9 -2 -8 -8 7) 1) 16 0.001)\n    (check-within (candidate (list 1 9 3 2 9 -5 6 0 -6 6) 9) 29 0.001)\n    (check-within (candidate (list -3 -3 -4 1 4 9) 6) 11 0.001)\n    (check-within (candidate (list -10 3 -5 2 -10 7 9) 4) 14 0.001)\n    (check-within (candidate (list 7 10 9 8 -9 1 -7 10 -4 2) 4) 21 0.001)\n    (check-within (candidate (list 9 -9 0 5 4) 14) 9 0.001)\n    (check-within (candidate (list 7 9 7 -10 -6 -8 -5) 2) 14 0.001)\n    (check-within (candidate (list 8 -5 0 4) 0) 2 0.001)\n    (check-within (candidate (list 5 2 -1 9 -1 -1) 4) 6 0.001)\n    (check-within (candidate (list -7 -4 3 9 10 5 -1 1 -7) -4) 8 0.001)\n    (check-within (candidate (list 0 8 9 -9 8 -2 -1 2 5) -1) 7 0.001)\n    (check-within (candidate (list 10 4 -9 8 -10 3) -7) 1 0.001)\n    (check-within (candidate (list -6 -6 6 -4 -5 -1 10 -8 1) -13) 2 0.001)\n    (check-within (candidate (list 7 3 -4 1 -9 -8 10 4 -1) -2) 13 0.001)\n    (check-within (candidate (list 4 3 -3 1 -3 -1) -2) 3 0.001)\n    (check-within (candidate (list 10 -8 -9 -7 2 -10 4 7 6 6) 14) 41 0.001)\n    (check-within (candidate (list 9 -5 -4 -2 9) 4) 3 0.001)\n    (check-within (candidate (list -1 2 -3 -4 -10 -8 2) -1) 16 0.001)\n    (check-within (candidate (list -8 -9 -10 0 -5 -5) -15) 3 0.001)\n    (check-within (candidate (list -8 9 -10 2 -10 -6 -1 -8) -4) 19 0.001)\n    (check-within (candidate (list 4 -7 8 7 -4 3 7 7 -2 -10) 4) 25 0.001)\n    (check-within (candidate (list 6 3 4 5 -4) 0) 1 0.001)\n    (check-within (candidate (list 2 -4 5 3 7 10 9 -1 9 0) 9) 23 0.001)\n    (check-within (candidate (list -2 -5 9 -3 -8 5 -1 3 -9) 1) 23 0.001)\n    (check-within (candidate (list 0 -2 -3 -1 -6 -7 3) -10) 1 0.001)\n    (check-within (candidate (list 10 4 -3 9 -8 6) 14) 11 0.001)\n    (check-within (candidate (list -10 -6 6 -7 1 -7 9 3 1) 15) 35 0.001)\n    (check-within (candidate (list 2 -3 -6 -2 5) -4) 3 0.001)\n    (check-within (candidate (list -10 -8 8 -2) 0) 4 0.001)\n    (check-within (candidate (list -2 2 -7 -5 1 6 8) 0) 9 0.001)\n    (check-within (candidate (list 4 -4 -5 -8 9) -10) 2 0.001)\n    (check-within (candidate (list -5 -4 -6 -7 9 -10 0 4 9 -1) -7) 13 0.001)\n    (check-within (candidate (list -10 -6 6 -3 10 -6 4 -8) -9) 8 0.001)\n    (check-within (candidate (list -8 -1 -9 1) -17) 0 0.001)\n    (check-within (candidate (list 6 -4 2 1 10 -1) 1) 4 0.001)\n    (check-within (candidate (list 9 4 -8 8 9 -4) -16) 0 0.001)\n    (check-within (candidate (list 9 -4 8 -9 -2 -2) -11) 1 0.001)\n    (check-within (candidate (list -7 1 3 7 6 3) 10) 12 0.001)\n    (check-within (candidate (list 10 10 -2 -4) 8) 3 0.001)\n    (check-within (candidate (list -3 2 6 -6 9) 3) 4 0.001)\n    (check-within (candidate (list 5 0 2 4 2 -7) 2) 5 0.001)\n    (check-within (candidate (list 4 -5 -4 -2 -9 -6 -10 -10 2 -8) -19) 1 0.001)\n    (check-within (candidate (list -10 10 -9 -2 3 -2 -7 -1 -6 7) -17) 1 0.001)\n    (check-within (candidate (list -9 -9 3 7 -9 -10 2 3 -4) -13) 7 0.001)\n    (check-within (candidate (list -5 -4 -10 7) 14) 6 0.001)\n    (check-within (candidate (list -3 4 -6 -6 1 -10 -1 -8) -11) 7 0.001)\n    (check-within (candidate (list -7 1 -5 8 -7 -3 2 -2 -2 7) -5) 14 0.001)\n    (check-within (candidate (list 8 0 -8 -8 -1 5) 0) 8 0.001)\n    (check-within (candidate (list 9 7 2 4 3) 7) 2 0.001)\n    (check-within (candidate (list 8 -1 -5 7 7 5 -6 2) -2) 5 0.001)\n    (check-within (candidate (list -1 3 3 3 9) 8) 6 0.001)\n    (check-within (candidate (list -8 0 -1 -6 -9 2 3 1) -9) 4 0.001)\n    (check-within (candidate (list 3 -3 -7 -6 -5 -2) -2) 12 0.001)\n    (check-within (candidate (list 3 6 0 -4 -2 5) -6) 0 0.001)\n    (check-within (candidate (list -8 9 2 5 9 -4 3) 6) 12 0.001)\n    (check-within (candidate (list 0 -6 -5 -8 -4 0 7) 7) 19 0.001)\n    (check-within (candidate (list 0 9 2 -4) -8) 0 0.001)\n    (check-within (candidate (list -7 9 -3 -5 -9 -3 -8 -2 1 2) -8) 15 0.001)\n    (check-within (candidate (list 4 10 -7 0 -3 5 9 6 8 -4) 13) 34 0.001)\n    (check-within (candidate (list 2 -6 0 5 -9 -8 6 5) -3) 11 0.001)\n    (check-within (candidate (list -4 6 -2 10 -5 -7 -8 -1) -5) 13 0.001)\n    (check-within (candidate (list 10 4 8 -1 9 -5 -1 -7 -9) 19) 35 0.001)\n    (check-within (candidate (list -6 5 3 -2 0 3 -7 -7) -8) 5 0.001)\n    (check-within (candidate (list -3 -1 7 4 -10 -6 2) -4) 7 0.001)\n    (check-within (candidate (list -7 8 3 -1 2 1 -10) -7) 5 0.001)\n    (check-within (candidate (list 7 -3 -5 9 -10 -1 -3 -3 -3 1) 6) 36 0.001)\n    (check-within (candidate (list -5 -10 -7 -3 -2 -2) -15) 1 0.001)\n    (check-within (candidate (list -4 6 -9 -8 -9 -9) -17) 3 0.001)\n    (check-within (candidate (list -3 -8 -6 -4 -8 -10 -2 5 -2) 1) 32 0.001)\n    (check-within (candidate (list 1 1 -6 8 2 10 -7 -9 -9) -7) 10 0.001)\n    (check-within (candidate (list -9 -6 -3 5 -4) 2) 9 0.001)\n    (check-within (candidate (list -5 10 -5 1 7 -8 8 -6 -6) 2) 19 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2919_maxIncreasingGroups", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array usageLimits of length n.\n;; Your task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions:\n;;  * Each group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group.\n;;  * Each group (except the first one) must have a length strictly greater than the previous group.\n;; Return an integer denoting the maximum number of groups you can create while satisfying these conditions.\n;; Example 1:\n;; Input: usageLimits = [1,2,5]\n;; Output: 3\n;; Explanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\n;; One way of creating the maximum number of groups while satisfying the conditions is:\n;; Group 1 contains the number [2].\n;; Group 2 contains the numbers [1,2].\n;; Group 3 contains the numbers [0,1,2].\n;; It can be shown that the maximum number of groups is 3.\n;; So, the output is 3.\n;; Example 2:\n;; Input: usageLimits = [2,1,2]\n;; Output: 2\n;; Explanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\n;; One way of creating the maximum number of groups while satisfying the conditions is:\n;; Group 1 contains the number [0].\n;; Group 2 contains the numbers [1,2].\n;; It can be shown that the maximum number of groups is 2.\n;; So, the output is 2.\n;; Example 3:\n;; Input: usageLimits = [1,1]\n;; Output: 1\n;; Explanation: In this example, we can use both 0 and 1 at most once.\n;; One way of creating the maximum number of groups while satisfying the conditions is:\n;; Group 1 contains the number [0].\n;; It can be shown that the maximum number of groups is 1.\n;; So, the output is 1.\n;; Constraints:\n;;  * 1 <= usageLimits.length <= 105\n;;  * 1 <= usageLimits[i] <= 109\n(define (maxIncreasingGroups usageLimits)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2919_maxIncreasingGroups.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxIncreasingGroups))\n    (check-within (candidate (list 1 2 5)) 3 0.001)\n    (check-within (candidate (list 2 1 2)) 2 0.001)\n    (check-within (candidate (list 1 1)) 1 0.001)\n    (check-within (candidate (list 1 4)) 2 0.001)\n    (check-within (candidate (list 1 5)) 2 0.001)\n    (check-within (candidate (list 1 7)) 2 0.001)\n    (check-within (candidate (list 1 8)) 2 0.001)\n    (check-within (candidate (list 2 1)) 2 0.001)\n    (check-within (candidate (list 2 2)) 2 0.001)\n    (check-within (candidate (list 2 3)) 2 0.001)\n    (check-within (candidate (list 2 4)) 2 0.001)\n    (check-within (candidate (list 2 5)) 2 0.001)\n    (check-within (candidate (list 2 7)) 2 0.001)\n    (check-within (candidate (list 2 8)) 2 0.001)\n    (check-within (candidate (list 2 9)) 2 0.001)\n    (check-within (candidate (list 3 1)) 2 0.001)\n    (check-within (candidate (list 3 4)) 2 0.001)\n    (check-within (candidate (list 3 7)) 2 0.001)\n    (check-within (candidate (list 3 10)) 2 0.001)\n    (check-within (candidate (list 4 1)) 2 0.001)\n    (check-within (candidate (list 4 2)) 2 0.001)\n    (check-within (candidate (list 4 4)) 2 0.001)\n    (check-within (candidate (list 4 5)) 2 0.001)\n    (check-within (candidate (list 4 7)) 2 0.001)\n    (check-within (candidate (list 4 10)) 2 0.001)\n    (check-within (candidate (list 5 8)) 2 0.001)\n    (check-within (candidate (list 5 10)) 2 0.001)\n    (check-within (candidate (list 6 2)) 2 0.001)\n    (check-within (candidate (list 6 3)) 2 0.001)\n    (check-within (candidate (list 6 4)) 2 0.001)\n    (check-within (candidate (list 6 5)) 2 0.001)\n    (check-within (candidate (list 6 6)) 2 0.001)\n    (check-within (candidate (list 6 7)) 2 0.001)\n    (check-within (candidate (list 6 9)) 2 0.001)\n    (check-within (candidate (list 6 19)) 2 0.001)\n    (check-within (candidate (list 7 1)) 2 0.001)\n    (check-within (candidate (list 7 2)) 2 0.001)\n    (check-within (candidate (list 7 3)) 2 0.001)\n    (check-within (candidate (list 7 4)) 2 0.001)\n    (check-within (candidate (list 7 7)) 2 0.001)\n    (check-within (candidate (list 7 13)) 2 0.001)\n    (check-within (candidate (list 8 3)) 2 0.001)\n    (check-within (candidate (list 8 6)) 2 0.001)\n    (check-within (candidate (list 9 1)) 2 0.001)\n    (check-within (candidate (list 9 3)) 2 0.001)\n    (check-within (candidate (list 9 4)) 2 0.001)\n    (check-within (candidate (list 9 6)) 2 0.001)\n    (check-within (candidate (list 9 8)) 2 0.001)\n    (check-within (candidate (list 9 10)) 2 0.001)\n    (check-within (candidate (list 10 2)) 2 0.001)\n    (check-within (candidate (list 10 3)) 2 0.001)\n    (check-within (candidate (list 10 8)) 2 0.001)\n    (check-within (candidate (list 10 11)) 2 0.001)\n    (check-within (candidate (list 13 11)) 2 0.001)\n    (check-within (candidate (list 13 13)) 2 0.001)\n    (check-within (candidate (list 16 9)) 2 0.001)\n    (check-within (candidate (list 18 6)) 2 0.001)\n    (check-within (candidate (list 32 42)) 2 0.001)\n    (check-within (candidate (list 1 1 5)) 2 0.001)\n    (check-within (candidate (list 1 1 10)) 2 0.001)\n    (check-within (candidate (list 1 4 3)) 3 0.001)\n    (check-within (candidate (list 1 4 5)) 3 0.001)\n    (check-within (candidate (list 1 6 4)) 3 0.001)\n    (check-within (candidate (list 1 6 8)) 3 0.001)\n    (check-within (candidate (list 1 7 19)) 3 0.001)\n    (check-within (candidate (list 1 8 6)) 3 0.001)\n    (check-within (candidate (list 1 9 5)) 3 0.001)\n    (check-within (candidate (list 1 9 6)) 3 0.001)\n    (check-within (candidate (list 1 10 6)) 3 0.001)\n    (check-within (candidate (list 2 2 2)) 3 0.001)\n    (check-within (candidate (list 2 3 8)) 3 0.001)\n    (check-within (candidate (list 2 6 10)) 3 0.001)\n    (check-within (candidate (list 2 7 2)) 3 0.001)\n    (check-within (candidate (list 2 7 7)) 3 0.001)\n    (check-within (candidate (list 2 8 7)) 3 0.001)\n    (check-within (candidate (list 2 9 9)) 3 0.001)\n    (check-within (candidate (list 3 1 1)) 2 0.001)\n    (check-within (candidate (list 3 5 5)) 3 0.001)\n    (check-within (candidate (list 3 5 8)) 3 0.001)\n    (check-within (candidate (list 3 6 5)) 3 0.001)\n    (check-within (candidate (list 3 7 4)) 3 0.001)\n    (check-within (candidate (list 3 7 10)) 3 0.001)\n    (check-within (candidate (list 3 8 1)) 3 0.001)\n    (check-within (candidate (list 3 9 9)) 3 0.001)\n    (check-within (candidate (list 3 10 9)) 3 0.001)\n    (check-within (candidate (list 4 2 5)) 3 0.001)\n    (check-within (candidate (list 4 2 15)) 3 0.001)\n    (check-within (candidate (list 4 5 5)) 3 0.001)\n    (check-within (candidate (list 4 7 9)) 3 0.001)\n    (check-within (candidate (list 4 8 2)) 3 0.001)\n    (check-within (candidate (list 4 8 4)) 3 0.001)\n    (check-within (candidate (list 4 10 3)) 3 0.001)\n    (check-within (candidate (list 4 10 4)) 3 0.001)\n    (check-within (candidate (list 5 1 5)) 3 0.001)\n    (check-within (candidate (list 5 2 9)) 3 0.001)\n    (check-within (candidate (list 5 2 10)) 3 0.001)\n    (check-within (candidate (list 5 6 1)) 3 0.001)\n    (check-within (candidate (list 5 6 5)) 3 0.001)\n    (check-within (candidate (list 5 7 4)) 3 0.001)\n    (check-within (candidate (list 5 10 3)) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2920_minimumSeconds", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums containing n integers.\n;; At each second, you perform the following operation on the array:\n;;  * For every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n].\n;; Note that all the elements get replaced simultaneously.\n;; Return the minimum number of seconds needed to make all elements in the array nums equal.\n;; Example 1:\n;; Input: nums = [1,2,1,2]\n;; Output: 1\n;; Explanation: We can equalize the array in 1 second in the following way:\n;; - At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\n;; It can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.\n;; Example 2:\n;; Input: nums = [2,1,3,3,2]\n;; Output: 2\n;; Explanation: We can equalize the array in 2 seconds in the following way:\n;; - At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n;; - At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\n;; It can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.\n;; Example 3:\n;; Input: nums = [5,5,5,5]\n;; Output: 0\n;; Explanation: We don't need to perform any operations as all elements in the initial array are the same.\n;; Constraints:\n;;  * 1 <= n == nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n(define (minimumSeconds nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2920_minimumSeconds.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumSeconds))\n    (check-within (candidate (list 1 2 1 2)) 1 0.001)\n    (check-within (candidate (list 2 1 3 3 2)) 2 0.001)\n    (check-within (candidate (list 5 5 5 5)) 0 0.001)\n    (check-within (candidate (list 4 18)) 1 0.001)\n    (check-within (candidate (list 11 7)) 1 0.001)\n    (check-within (candidate (list 14 2)) 1 0.001)\n    (check-within (candidate (list 14 9)) 1 0.001)\n    (check-within (candidate (list 20 1)) 1 0.001)\n    (check-within (candidate (list 17 15)) 1 0.001)\n    (check-within (candidate (list 11 13)) 1 0.001)\n    (check-within (candidate (list 7 13)) 1 0.001)\n    (check-within (candidate (list 18 17)) 1 0.001)\n    (check-within (candidate (list 15 17)) 1 0.001)\n    (check-within (candidate (list 13 8)) 1 0.001)\n    (check-within (candidate (list 12 16)) 1 0.001)\n    (check-within (candidate (list 12 8)) 1 0.001)\n    (check-within (candidate (list 18 16)) 1 0.001)\n    (check-within (candidate (list 16 16)) 0 0.001)\n    (check-within (candidate (list 6 12)) 1 0.001)\n    (check-within (candidate (list 9 6)) 1 0.001)\n    (check-within (candidate (list 2 17)) 1 0.001)\n    (check-within (candidate (list 7 5)) 1 0.001)\n    (check-within (candidate (list 15 6)) 1 0.001)\n    (check-within (candidate (list 3 14)) 1 0.001)\n    (check-within (candidate (list 6 16)) 1 0.001)\n    (check-within (candidate (list 3 16)) 1 0.001)\n    (check-within (candidate (list 11 9)) 1 0.001)\n    (check-within (candidate (list 4 15)) 1 0.001)\n    (check-within (candidate (list 16 2)) 1 0.001)\n    (check-within (candidate (list 12 7)) 1 0.001)\n    (check-within (candidate (list 7 9)) 1 0.001)\n    (check-within (candidate (list 7 3)) 1 0.001)\n    (check-within (candidate (list 8 4)) 1 0.001)\n    (check-within (candidate (list 4 11)) 1 0.001)\n    (check-within (candidate (list 6 15)) 1 0.001)\n    (check-within (candidate (list 9 7)) 1 0.001)\n    (check-within (candidate (list 19 4)) 1 0.001)\n    (check-within (candidate (list 17 6)) 1 0.001)\n    (check-within (candidate (list 18 10)) 1 0.001)\n    (check-within (candidate (list 8 3)) 1 0.001)\n    (check-within (candidate (list 11 4 10)) 1 0.001)\n    (check-within (candidate (list 5 3 13)) 1 0.001)\n    (check-within (candidate (list 2 1 15)) 1 0.001)\n    (check-within (candidate (list 17 13 9)) 1 0.001)\n    (check-within (candidate (list 2 15 12)) 1 0.001)\n    (check-within (candidate (list 16 12 13)) 1 0.001)\n    (check-within (candidate (list 1 12 19)) 1 0.001)\n    (check-within (candidate (list 4 3 3)) 1 0.001)\n    (check-within (candidate (list 15 11 3)) 1 0.001)\n    (check-within (candidate (list 15 18 16)) 1 0.001)\n    (check-within (candidate (list 20 6 7)) 1 0.001)\n    (check-within (candidate (list 9 4 7)) 1 0.001)\n    (check-within (candidate (list 20 11 6)) 1 0.001)\n    (check-within (candidate (list 11 8 16)) 1 0.001)\n    (check-within (candidate (list 1 4 12)) 1 0.001)\n    (check-within (candidate (list 18 12 19)) 1 0.001)\n    (check-within (candidate (list 8 11 5)) 1 0.001)\n    (check-within (candidate (list 6 10 6)) 1 0.001)\n    (check-within (candidate (list 3 10 16)) 1 0.001)\n    (check-within (candidate (list 15 6 15)) 1 0.001)\n    (check-within (candidate (list 9 5 1)) 1 0.001)\n    (check-within (candidate (list 15 15 18)) 1 0.001)\n    (check-within (candidate (list 3 16 13)) 1 0.001)\n    (check-within (candidate (list 9 3 6)) 1 0.001)\n    (check-within (candidate (list 4 14 9)) 1 0.001)\n    (check-within (candidate (list 15 2 20)) 1 0.001)\n    (check-within (candidate (list 13 7 19)) 1 0.001)\n    (check-within (candidate (list 19 19 12)) 1 0.001)\n    (check-within (candidate (list 8 6 1)) 1 0.001)\n    (check-within (candidate (list 19 10 19)) 1 0.001)\n    (check-within (candidate (list 6 9 17)) 1 0.001)\n    (check-within (candidate (list 3 19 8 12)) 2 0.001)\n    (check-within (candidate (list 6 9 14 16)) 2 0.001)\n    (check-within (candidate (list 19 12 14 16)) 2 0.001)\n    (check-within (candidate (list 12 20 13 19)) 2 0.001)\n    (check-within (candidate (list 12 14 13 8)) 2 0.001)\n    (check-within (candidate (list 8 13 3 3)) 1 0.001)\n    (check-within (candidate (list 5 11 7 15)) 2 0.001)\n    (check-within (candidate (list 7 11 7 5)) 1 0.001)\n    (check-within (candidate (list 1 8 7 15)) 2 0.001)\n    (check-within (candidate (list 13 1 19 3)) 2 0.001)\n    (check-within (candidate (list 19 15 19 1)) 1 0.001)\n    (check-within (candidate (list 7 13 20 9)) 2 0.001)\n    (check-within (candidate (list 1 18 16 6)) 2 0.001)\n    (check-within (candidate (list 9 16 6 13)) 2 0.001)\n    (check-within (candidate (list 11 9 5 1)) 2 0.001)\n    (check-within (candidate (list 6 3 15 10)) 2 0.001)\n    (check-within (candidate (list 12 1 9 19)) 2 0.001)\n    (check-within (candidate (list 15 14 14 19)) 1 0.001)\n    (check-within (candidate (list 2 5 13 5)) 1 0.001)\n    (check-within (candidate (list 4 8 8 13)) 1 0.001)\n    (check-within (candidate (list 3 9 10 13)) 2 0.001)\n    (check-within (candidate (list 7 17 11 8)) 2 0.001)\n    (check-within (candidate (list 4 5 15 11)) 2 0.001)\n    (check-within (candidate (list 11 15 19 12)) 2 0.001)\n    (check-within (candidate (list 8 20 5 10)) 2 0.001)\n    (check-within (candidate (list 5 3 5 17)) 1 0.001)\n    (check-within (candidate (list 14 19 8 8)) 1 0.001)\n    (check-within (candidate (list 16 20 4 13)) 2 0.001)\n    (check-within (candidate (list 17 16 2 16)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2921_countSteppingNumbers", "language": "rkt", "prompt": "#lang racket\n;; Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high].\n;; A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\n;; Return an integer denoting the count of stepping numbers in the inclusive range [low, high].\n;; Since the answer may be very large, return it modulo 109 + 7.\n;; Note: A stepping number should not have a leading zero.\n;; Example 1:\n;; Input: low = \"1\", high = \"11\"\n;; Output: 10\n;; Explanation: The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.\n;; Example 2:\n;; Input: low = \"90\", high = \"101\"\n;; Output: 2\n;; Explanation: The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2.\n;; Constraints:\n;;  * 1 <= int(low) <= int(high) < 10100\n;;  * 1 <= low.length, high.length <= 100\n;;  * low and high consist of only digits.\n;;  * low and high don't have any leading zeros.\n(define (countSteppingNumbers low high)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2921_countSteppingNumbers.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countSteppingNumbers))\n    (check-within (candidate 1 11) 10 0.001)\n    (check-within (candidate 90 101) 2 0.001)\n    (check-within (candidate 2 40) 14 0.001)\n    (check-within (candidate 26 60) 6 0.001)\n    (check-within (candidate 40 70) 6 0.001)\n    (check-within (candidate 46 66) 3 0.001)\n    (check-within (candidate 58 58) 0 0.001)\n    (check-within (candidate 23 99) 14 0.001)\n    (check-within (candidate 44 86) 7 0.001)\n    (check-within (candidate 20 111) 16 0.001)\n    (check-within (candidate 70 75) 0 0.001)\n    (check-within (candidate 37 111) 12 0.001)\n    (check-within (candidate 17 149) 18 0.001)\n    (check-within (candidate 21 145) 18 0.001)\n    (check-within (candidate 47 124) 12 0.001)\n    (check-within (candidate 81 91) 2 0.001)\n    (check-within (candidate 18 159) 18 0.001)\n    (check-within (candidate 85 92) 2 0.001)\n    (check-within (candidate 66 112) 7 0.001)\n    (check-within (candidate 84 102) 4 0.001)\n    (check-within (candidate 41 156) 14 0.001)\n    (check-within (candidate 64 135) 10 0.001)\n    (check-within (candidate 57 143) 10 0.001)\n    (check-within (candidate 85 116) 4 0.001)\n    (check-within (candidate 103 104) 0 0.001)\n    (check-within (candidate 98 118) 2 0.001)\n    (check-within (candidate 28 197) 16 0.001)\n    (check-within (candidate 6 220) 26 0.001)\n    (check-within (candidate 106 121) 1 0.001)\n    (check-within (candidate 7 226) 25 0.001)\n    (check-within (candidate 105 136) 2 0.001)\n    (check-within (candidate 30 221) 18 0.001)\n    (check-within (candidate 113 139) 2 0.001)\n    (check-within (candidate 44 210) 14 0.001)\n    (check-within (candidate 13 242) 22 0.001)\n    (check-within (candidate 12 257) 23 0.001)\n    (check-within (candidate 70 205) 8 0.001)\n    (check-within (candidate 55 229) 13 0.001)\n    (check-within (candidate 16 276) 22 0.001)\n    (check-within (candidate 140 153) 0 0.001)\n    (check-within (candidate 79 218) 8 0.001)\n    (check-within (candidate 99 200) 3 0.001)\n    (check-within (candidate 90 210) 5 0.001)\n    (check-within (candidate 123 186) 1 0.001)\n    (check-within (candidate 149 160) 0 0.001)\n    (check-within (candidate 138 180) 0 0.001)\n    (check-within (candidate 160 163) 0 0.001)\n    (check-within (candidate 79 246) 10 0.001)\n    (check-within (candidate 137 189) 0 0.001)\n    (check-within (candidate 163 163) 0 0.001)\n    (check-within (candidate 37 289) 18 0.001)\n    (check-within (candidate 79 255) 10 0.001)\n    (check-within (candidate 140 197) 0 0.001)\n    (check-within (candidate 22 317) 21 0.001)\n    (check-within (candidate 146 199) 0 0.001)\n    (check-within (candidate 57 288) 14 0.001)\n    (check-within (candidate 109 237) 6 0.001)\n    (check-within (candidate 48 299) 16 0.001)\n    (check-within (candidate 158 194) 0 0.001)\n    (check-within (candidate 29 326) 22 0.001)\n    (check-within (candidate 133 223) 2 0.001)\n    (check-within (candidate 109 249) 6 0.001)\n    (check-within (candidate 20 341) 24 0.001)\n    (check-within (candidate 9 352) 29 0.001)\n    (check-within (candidate 115 253) 6 0.001)\n    (check-within (candidate 181 188) 0 0.001)\n    (check-within (candidate 120 250) 6 0.001)\n    (check-within (candidate 100 273) 7 0.001)\n    (check-within (candidate 105 269) 6 0.001)\n    (check-within (candidate 189 190) 0 0.001)\n    (check-within (candidate 148 237) 4 0.001)\n    (check-within (candidate 126 267) 4 0.001)\n    (check-within (candidate 141 252) 4 0.001)\n    (check-within (candidate 185 209) 0 0.001)\n    (check-within (candidate 14 381) 26 0.001)\n    (check-within (candidate 7 388) 31 0.001)\n    (check-within (candidate 15 383) 26 0.001)\n    (check-within (candidate 78 325) 13 0.001)\n    (check-within (candidate 131 274) 4 0.001)\n    (check-within (candidate 177 230) 2 0.001)\n    (check-within (candidate 66 346) 17 0.001)\n    (check-within (candidate 144 271) 4 0.001)\n    (check-within (candidate 96 322) 9 0.001)\n    (check-within (candidate 112 307) 6 0.001)\n    (check-within (candidate 73 349) 16 0.001)\n    (check-within (candidate 128 296) 4 0.001)\n    (check-within (candidate 189 237) 4 0.001)\n    (check-within (candidate 141 286) 4 0.001)\n    (check-within (candidate 47 382) 20 0.001)\n    (check-within (candidate 27 411) 24 0.001)\n    (check-within (candidate 16 423) 26 0.001)\n    (check-within (candidate 22 417) 25 0.001)\n    (check-within (candidate 174 266) 4 0.001)\n    (check-within (candidate 101 342) 9 0.001)\n    (check-within (candidate 76 370) 16 0.001)\n    (check-within (candidate 147 301) 4 0.001)\n    (check-within (candidate 72 376) 16 0.001)\n    (check-within (candidate 154 297) 4 0.001)\n    (check-within (candidate 15 439) 28 0.001)\n    (check-within (candidate 73 381) 16 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2952_minimumTime", "language": "rkt", "prompt": "#lang racket\n;;     You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\n;; * Choose an index 0 <= i < nums1.length and make nums1[i] = 0.\n;;     You are also given an integer x.\n;;     Return the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.\n;;     Example 1:\n;;     Input: nums1 = [1,2,3], nums2 = [1,2,3], x = 4\n;;     Output: 3\n;;     Explanation:\n;;     For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6].\n;;     For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9].\n;;     For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0].\n;;     Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n;;     Example 2:\n;;     Input: nums1 = [1,2,3], nums2 = [3,3,3], x = 4\n;;     Output: -1\n;;     Explanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n;;     Constraints:\n;; * 1 <= nums1.length <= 103\n;; * 1 <= nums1[i] <= 103\n;; * 0 <= nums2[i] <= 103\n;; * nums1.length == nums2.length\n;; * 0 <= x <= 106\n(define (minimumTime nums1 nums2 x)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2952_minimumTime.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumTime))\n    (check-within (candidate (list 1 2 3) (list 1 2 3) 4) 3 0.001)\n    (check-within (candidate (list 1 2 3) (list 3 3 3) 4) -1 0.001)\n    (check-within (candidate (list 4 4 9 10) (list 4 4 1 3) 16) 4 0.001)\n    (check-within (candidate (list 5 3) (list 3 2) 4) 2 0.001)\n    (check-within (candidate (list 4 5 3 2 3 9 5 7 10 4) (list 4 4 0 4 1 2 4 0 4 0) 47) -1 0.001)\n    (check-within (candidate (list 7 9 8 5 8 3) (list 0 1 4 2 3 1) 37) 2 0.001)\n    (check-within (candidate (list 8 2 3) (list 1 4 2) 13) 0 0.001)\n    (check-within (candidate (list 4 7 2 3 4 3 10 8) (list 3 4 0 1 1 0 2 2) 36) 4 0.001)\n    (check-within (candidate (list 2 10 10 4 6 3) (list 1 0 0 1 3 1) 35) 0 0.001)\n    (check-within (candidate (list 9 5 3) (list 4 1 3) 17) 0 0.001)\n    (check-within (candidate (list 1 7 9 4 8 8 1) (list 2 2 3 2 0 1 0) 20) 6 0.001)\n    (check-within (candidate (list 9 2 8 3 1 9 7 6) (list 0 3 4 1 3 4 2 1) 40) 8 0.001)\n    (check-within (candidate (list 10) (list 3) 10) 0 0.001)\n    (check-within (candidate (list 7 6 8 2 8 9 3 3) (list 2 2 4 0 0 2 2 3) 45) 5 0.001)\n    (check-within (candidate (list 4 9 5 2 3) (list 4 2 0 4 0) 18) 3 0.001)\n    (check-within (candidate (list 2 10 2 7 8 9 7 6 6) (list 4 2 1 4 3 2 4 4 4) 55) -1 0.001)\n    (check-within (candidate (list 6 8 10 7 10 9) (list 4 2 0 4 4 2) 38) 5 0.001)\n    (check-within (candidate (list 9 2 8 5 8 3 5 2 2) (list 4 3 4 2 0 1 4 4 2) 41) -1 0.001)\n    (check-within (candidate (list 5 3 2 3 10 4 7 9 1 10) (list 2 0 2 0 3 3 4 4 0 1) 30) -1 0.001)\n    (check-within (candidate (list 2 3 5) (list 0 0 1) 8) 1 0.001)\n    (check-within (candidate (list 7 9 7 9) (list 4 2 0 4) 32) 0 0.001)\n    (check-within (candidate (list 8 5 6 4 7 6 3 9 4) (list 0 4 2 4 3 3 1 4 4) 38) -1 0.001)\n    (check-within (candidate (list 3 1 1 1) (list 0 0 3 0) 3) 2 0.001)\n    (check-within (candidate (list 6 6 8 7 1 7) (list 2 2 1 1 2 3) 27) 5 0.001)\n    (check-within (candidate (list 10 5) (list 1 3) 14) 1 0.001)\n    (check-within (candidate (list 10 7 1 2 6) (list 4 3 2 2 4) 17) -1 0.001)\n    (check-within (candidate (list 9 5 6 1 9 4 5 7) (list 0 4 0 2 2 3 2 4) 24) -1 0.001)\n    (check-within (candidate (list 4 1 2 4 10 7 8) (list 0 2 0 4 0 2 1) 18) 5 0.001)\n    (check-within (candidate (list 4) (list 0) 4) 0 0.001)\n    (check-within (candidate (list 4 7 1 7 5 10) (list 0 4 3 2 3 1) 29) 4 0.001)\n    (check-within (candidate (list 9 8 9 7 4 6 8 6 4) (list 4 3 3 3 1 2 2 1 0) 42) -1 0.001)\n    (check-within (candidate (list 8 3 2) (list 3 1 3) 7) 3 0.001)\n    (check-within (candidate (list 6 5 2 8 8 1 6 4) (list 1 2 1 0 1 0 3 1) 23) 6 0.001)\n    (check-within (candidate (list 3 8 5 4 10 2) (list 4 1 4 2 1 0) 26) 4 0.001)\n    (check-within (candidate (list 5 3) (list 0 3) 4) 2 0.001)\n    (check-within (candidate (list 8) (list 4) 7) 1 0.001)\n    (check-within (candidate (list 1 8 6 8 6) (list 3 0 2 4 0) 16) 4 0.001)\n    (check-within (candidate (list 8 6) (list 0 3) 14) 0 0.001)\n    (check-within (candidate (list 3 4 5 2 4 10 6 3 6 4) (list 3 0 0 2 4 2 4 1 2 1) 28) -1 0.001)\n    (check-within (candidate (list 3 2 5 8 8) (list 1 3 2 1 0) 20) 3 0.001)\n    (check-within (candidate (list 9 2 8 7 5 2 3 2) (list 3 2 3 0 4 3 1 4) 37) -1 0.001)\n    (check-within (candidate (list 6 4 3 1 10 5 10 3 5 9) (list 0 4 1 2 1 2 3 3 4 2) 41) -1 0.001)\n    (check-within (candidate (list 6 10 7 10 6 7 7 4) (list 1 3 0 0 1 2 1 3) 55) 1 0.001)\n    (check-within (candidate (list 6 4 3 1) (list 1 1 3 3) 7) -1 0.001)\n    (check-within (candidate (list 2 10 8 10 1 4 7 10 5 1) (list 4 3 1 2 3 1 3 2 2 1) 29) -1 0.001)\n    (check-within (candidate (list 2 8 5) (list 2 0 2) 14) 1 0.001)\n    (check-within (candidate (list 7 10 1 3 7 3 2) (list 1 1 3 0 2 2 3) 22) 7 0.001)\n    (check-within (candidate (list 6 4 2 3 8 6 6 8 10) (list 2 1 4 1 2 1 0 1 4) 39) 9 0.001)\n    (check-within (candidate (list 4 4 8 10 2 7 9 8 1 8) (list 1 0 4 0 3 3 1 2 2 1) 44) 10 0.001)\n    (check-within (candidate (list 2 4 1 8 3 9) (list 0 2 0 0 0 4) 21) 1 0.001)\n    (check-within (candidate (list 6 10) (list 2 1) 8) 1 0.001)\n    (check-within (candidate (list 8 6) (list 3 0) 10) 1 0.001)\n    (check-within (candidate (list 5 5 5 10) (list 0 1 0 3) 21) 1 0.001)\n    (check-within (candidate (list 7 1 1 2 9 3 3 2 2) (list 0 1 4 3 4 1 2 1 2) 15) -1 0.001)\n    (check-within (candidate (list 10 4 1 10 7 5 6 3 2 10) (list 4 0 4 0 3 4 3 0 0 3) 50) 9 0.001)\n    (check-within (candidate (list 9 4 6 2) (list 3 4 0 4) 15) 4 0.001)\n    (check-within (candidate (list 7 3 9 2 9 10 7 10 10 4) (list 1 4 2 1 4 1 1 0 3 4) 69) 8 0.001)\n    (check-within (candidate (list 4 5 6) (list 4 4 0) 13) 2 0.001)\n    (check-within (candidate (list 2 3 3 4 4) (list 2 2 1 1 1) 12) 5 0.001)\n    (check-within (candidate (list 4 5 5 3 7) (list 3 3 2 0 4) 21) 4 0.001)\n    (check-within (candidate (list 1 3 3 4) (list 1 3 2 3) 6) -1 0.001)\n    (check-within (candidate (list 9 1 8 9 7 2) (list 3 3 0 2 3 4) 26) 6 0.001)\n    (check-within (candidate (list 5 5 6 8 6 1 5 7 8) (list 2 1 0 3 2 2 2 2 4) 33) -1 0.001)\n    (check-within (candidate (list 2 9 5 5 6 7 7 9) (list 1 3 0 3 3 3 4 2) 47) 8 0.001)\n    (check-within (candidate (list 3) (list 0) 2) 1 0.001)\n    (check-within (candidate (list 3 6 4 8 7 9 3 3 9) (list 4 3 2 0 0 3 3 1 4) 34) -1 0.001)\n    (check-within (candidate (list 8) (list 1) 6) 1 0.001)\n    (check-within (candidate (list 1 7 6 2 9) (list 4 2 3 3 0) 23) 4 0.001)\n    (check-within (candidate (list 9 10 10 5 2 4) (list 2 4 0 3 3 4) 40) 0 0.001)\n    (check-within (candidate (list 9 10 9 4 8 9 10 7 5) (list 2 0 3 0 2 4 3 2 4) 69) 7 0.001)\n    (check-within (candidate (list 1 7 2 7) (list 1 0 2 3) 10) 2 0.001)\n    (check-within (candidate (list 10 4) (list 2 4) 10) 1 0.001)\n    (check-within (candidate (list 2 10 3 6 2 10 4) (list 4 1 4 4 4 0 0) 30) 7 0.001)\n    (check-within (candidate (list 5 9 6) (list 1 3 2) 20) 0 0.001)\n    (check-within (candidate (list 4 5 2 4 2 7) (list 0 0 0 0 3 0) 23) 1 0.001)\n    (check-within (candidate (list 8) (list 0) 7) 1 0.001)\n    (check-within (candidate (list 3) (list 3) 3) 0 0.001)\n    (check-within (candidate (list 6 1 10 10) (list 3 2 4 0) 13) 3 0.001)\n    (check-within (candidate (list 8 9 2 10 10 1 5) (list 4 3 3 0 2 1 2) 38) 5 0.001)\n    (check-within (candidate (list 10 2) (list 3 4) 10) 1 0.001)\n    (check-within (candidate (list 8 9 2) (list 2 4 1) 16) 1 0.001)\n    (check-within (candidate (list 4 2 3) (list 4 2 2) 4) -1 0.001)\n    (check-within (candidate (list 9 8 7 6 5 1 4) (list 2 4 1 2 3 3 0) 28) 7 0.001)\n    (check-within (candidate (list 3 4 10 1 2 4 10 3 7 2) (list 4 0 0 1 1 4 4 4 2 1) 44) -1 0.001)\n    (check-within (candidate (list 3 5 5 1 6 4 3) (list 1 3 4 3 3 1 4) 23) -1 0.001)\n    (check-within (candidate (list 3 8 10 2 5 10) (list 4 0 3 2 4 3) 37) 4 0.001)\n    (check-within (candidate (list 8 8 10 8 9 6 1 8) (list 2 0 0 1 2 1 0 4) 38) 4 0.001)\n    (check-within (candidate (list 10 7 3 10 7 6 6 10) (list 1 2 4 0 3 4 0 3) 41) 7 0.001)\n    (check-within (candidate (list 6 7 4 1 9 6) (list 3 3 3 0 0 1) 32) 2 0.001)\n    (check-within (candidate (list 2) (list 2) 1) 1 0.001)\n    (check-within (candidate (list 8 9 4 5 6 7) (list 0 3 4 3 3 1) 27) 6 0.001)\n    (check-within (candidate (list 7) (list 1) 3) 1 0.001)\n    (check-within (candidate (list 9) (list 0) 5) 1 0.001)\n    (check-within (candidate (list 7 2 2 2 7 4 2 10 8) (list 4 3 2 4 4 0 1 1 2) 31) -1 0.001)\n    (check-within (candidate (list 7 2 6 4 9 9 1 9 6 7) (list 0 1 3 2 3 3 4 2 2 1) 58) -1 0.001)\n    (check-within (candidate (list 6 8 2 3 9 8 10 9 9) (list 1 4 2 3 2 0 1 1 3) 40) -1 0.001)\n    (check-within (candidate (list 1 1 5) (list 4 4 2) 3) -1 0.001)\n    (check-within (candidate (list 7 5 8 3 10 2 4 8 7) (list 4 4 2 4 2 3 1 1 1) 49) -1 0.001)\n    (check-within (candidate (list 4 7 2 6 9 2) (list 1 2 1 4 1 3) 28) 3 0.001)\n    (check-within (candidate (list 3 6 3 9 5) (list 0 4 0 3 1) 23) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2953_countPairs", "language": "rkt", "prompt": "#lang racket\n;; You are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane.\n;; We define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation.\n;; Return the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.\n;; Example 1:\n;; Input: coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5\n;; Output: 2\n;; Explanation: We can choose the following pairs:\n;; - (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n;; - (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5.\n;; Example 2:\n;; Input: coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0\n;; Output: 10\n;; Explanation: Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.\n;; Constraints:\n;;  * 2 <= coordinates.length <= 50000\n;;  * 0 <= xi, yi <= 106\n;;  * 0 <= k <= 100\n(define (countPairs coordinates k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2953_countPairs.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countPairs))\n    (check-within (candidate (list (list 1 2) (list 4 2) (list 1 3) (list 5 2)) 5) 2 0.001)\n    (check-within (candidate (list (list 1 3) (list 1 3) (list 1 3) (list 1 3) (list 1 3)) 0) 10 0.001)\n    (check-within (candidate (list (list 27 94) (list 61 68) (list 47 0) (list 100 4) (list 127 89) (list 61 103) (list 26 4) (list 51 54) (list 91 26) (list 98 23) (list 80 74) (list 19 93)) 95) 5 0.001)\n    (check-within (candidate (list (list 39 29) (list 98 59) (list 65 77) (list 41 26) (list 95 12) (list 71 66) (list 41 93) (list 28 33) (list 96 40) (list 39 8) (list 106 54) (list 8 49) (list 68 59) (list 21 15) (list 3 66) (list 77 85) (list 111 51)) 21) 6 0.001)\n    (check-within (candidate (list (list 100 32) (list 69 8) (list 85 31) (list 69 47) (list 62 34) (list 102 43) (list 81 39) (list 90 0) (list 123 6) (list 79 18) (list 21 94) (list 13 36) (list 49 97) (list 76 59) (list 42 74) (list 60 68) (list 21 11) (list 71 21) (list 64 13) (list 64 95) (list 5 85) (list 118 53) (list 70 44) (list 38 57) (list 32 119) (list 80 61) (list 13 68) (list 43 108) (list 86 49)) 39) 20 0.001)\n    (check-within (candidate (list (list 60 55) (list 35 32) (list 99 2) (list 58 57) (list 16 2) (list 43 28) (list 30 35) (list 35 83) (list 104 41) (list 20 69) (list 58 14) (list 12 92) (list 71 49) (list 7 82) (list 65 68) (list 9 40) (list 15 56) (list 57 46) (list 21 8) (list 37 64) (list 42 94) (list 73 91) (list 12 121) (list 10 21) (list 41 89)) 54) 10 0.001)\n    (check-within (candidate (list (list 94 23) (list 86 58) (list 126 55) (list 107 23) (list 121 60) (list 89 28) (list 123 15) (list 127 3) (list 100 49) (list 5 3) (list 81 49) (list 93 0) (list 95 37) (list 92 25)) 53) 18 0.001)\n    (check-within (candidate (list (list 40 54) (list 8 68) (list 33 11) (list 51 93) (list 95 95) (list 17 53) (list 35 39) (list 59 42) (list 28 63) (list 41 63) (list 54 0) (list 88 31) (list 5 107) (list 32 124) (list 74 64) (list 15 27) (list 61 92) (list 16 47) (list 62 22) (list 2 28) (list 27 14) (list 53 39) (list 21 91) (list 7 11)) 60) 11 0.001)\n    (check-within (candidate (list (list 28 14) (list 2 13) (list 28 14) (list 4 7) (list 23 1) (list 54 0) (list 43 22) (list 98 16)) 33) 5 0.001)\n    (check-within (candidate (list (list 84 92) (list 84 92) (list 84 92) (list 84 92) (list 84 92) (list 54 59) (list 84 92) (list 93 44)) 0) 15 0.001)\n    (check-within (candidate (list (list 10 57) (list 12 62) (list 92 44) (list 7 60) (list 8 55) (list 13 50) (list 5 55) (list 71 82) (list 64 26) (list 68 43) (list 61 88) (list 9 44) (list 95 16) (list 17 16) (list 12 53) (list 9 59) (list 81 44) (list 3 56) (list 70 94) (list 0 58) (list 84 29) (list 13 63) (list 79 87) (list 19 39) (list 74 35) (list 92 7) (list 31 6) (list 2 50)) 13) 19 0.001)\n    (check-within (candidate (list (list 56 47) (list 26 50) (list 51 2) (list 40 7) (list 24 34) (list 55 2) (list 13 92) (list 57 50) (list 47 35) (list 32 96) (list 14 0) (list 4 84) (list 86 95)) 56) 4 0.001)\n    (check-within (candidate (list (list 34 60) (list 17 93) (list 87 90) (list 32 125) (list 71 27) (list 27 26) (list 127 115) (list 91 27) (list 63 68) (list 97 48) (list 69 73) (list 120 78) (list 43 55) (list 101 125) (list 86 87) (list 12 35) (list 5 20) (list 46 12) (list 17 24) (list 107 62) (list 86 88) (list 26 80) (list 30 41) (list 110 114)) 81) 17 0.001)\n    (check-within (candidate (list (list 65 19) (list 12 80) (list 90 64) (list 38 68) (list 17 25) (list 49 36) (list 91 47) (list 20 31) (list 81 54) (list 83 20) (list 90 100) (list 0 6) (list 93 121)) 36) 3 0.001)\n    (check-within (candidate (list (list 24 75) (list 22 67)) 23) 0 0.001)\n    (check-within (candidate (list (list 42 32) (list 62 60) (list 57 61) (list 100 56) (list 91 62) (list 57 21) (list 100 56) (list 63 63) (list 45 52) (list 59 75) (list 32 61) (list 57 43) (list 61 57) (list 64 52) (list 24 54) (list 92 15) (list 53 25) (list 84 63) (list 1 18) (list 21 57) (list 29 9) (list 68 91) (list 22 43) (list 105 27)) 48) 18 0.001)\n    (check-within (candidate (list (list 70 98) (list 79 66) (list 71 63) (list 111 94) (list 3 50) (list 64 111) (list 98 67) (list 23 41) (list 66 14) (list 40 19) (list 15 13) (list 32 86) (list 59 58) (list 73 94) (list 18 10) (list 77 50) (list 20 60) (list 66 8) (list 15 30) (list 71 2) (list 55 9)) 60) 7 0.001)\n    (check-within (candidate (list (list 5 100) (list 60 9) (list 84 65) (list 38 66) (list 83 35) (list 17 80) (list 88 76) (list 80 101) (list 55 74) (list 46 62) (list 28 73) (list 54 40) (list 119 71) (list 10 94) (list 45 82) (list 20 90) (list 47 27) (list 41 97) (list 66 5) (list 33 0) (list 101 5) (list 89 125) (list 6 58) (list 61 107) (list 25 17) (list 104 0) (list 29 2)) 73) 15 0.001)\n    (check-within (candidate (list (list 29 23) (list 8 19) (list 26 5) (list 12 25) (list 37 2) (list 37 27) (list 18 68) (list 3 53) (list 81 85) (list 27 94) (list 29 39) (list 41 64) (list 26 28) (list 23 80) (list 13 46) (list 5 68) (list 16 18) (list 21 77)) 25) 8 0.001)\n    (check-within (candidate (list (list 90 31) (list 113 54) (list 92 36) (list 67 49) (list 123 124) (list 127 112) (list 16 24) (list 85 50) (list 58 94) (list 115 48) (list 83 30) (list 51 112) (list 39 23) (list 0 21) (list 27 44) (list 99 100) (list 122 63) (list 34 39) (list 25 48) (list 44 49) (list 84 97) (list 31 61)) 84) 10 0.001)\n    (check-within (candidate (list (list 51 47) (list 51 47) (list 8 14) (list 82 68) (list 55 85) (list 8 14) (list 51 47) (list 87 97) (list 75 65) (list 78 10) (list 51 47) (list 87 97) (list 74 19) (list 51 47) (list 56 66) (list 8 14) (list 78 10) (list 74 66) (list 65 92) (list 51 47) (list 3 31)) 0) 20 0.001)\n    (check-within (candidate (list (list 25 82) (list 86 89) (list 25 82) (list 47 118) (list 14 58) (list 22 51) (list 0 93) (list 26 9) (list 67 27) (list 43 22) (list 78 49) (list 82 15) (list 93 22) (list 67 34) (list 54 43) (list 61 55) (list 74 77) (list 115 108) (list 54 55) (list 9 30) (list 31 3) (list 26 5) (list 60 49)) 90) 22 0.001)\n    (check-within (candidate (list (list 29 23) (list 48 3) (list 58 62) (list 16 19) (list 0 30) (list 59 5) (list 96 50) (list 7 46) (list 5 18) (list 42 32) (list 78 55)) 17) 3 0.001)\n    (check-within (candidate (list (list 47 68) (list 55 68) (list 36 73) (list 33 70) (list 36 81) (list 60 81) (list 32 18) (list 38 95) (list 34 75) (list 33 5) (list 33 78) (list 32 10) (list 36 93) (list 56 77) (list 43 17) (list 99 70) (list 15 77) (list 42 87) (list 30 18) (list 36 56) (list 47 68) (list 45 70) (list 48 77) (list 53 94) (list 0 86) (list 53 9) (list 68 35) (list 32 77) (list 95 90)) 24) 31 0.001)\n    (check-within (candidate (list (list 5 100) (list 19 21) (list 83 36) (list 24 59) (list 92 49) (list 6 73) (list 57 78) (list 69 33) (list 3 81) (list 53 59) (list 23 40) (list 6 21) (list 57 55) (list 98 43) (list 33 15) (list 8 83) (list 29 29) (list 85 41) (list 47 64) (list 10 32) (list 82 94) (list 14 29) (list 13 99) (list 19 20) (list 85 108) (list 41 9)) 78) 12 0.001)\n    (check-within (candidate (list (list 8 94) (list 19 13) (list 72 75) (list 17 8) (list 57 45) (list 17 15) (list 14 95) (list 74 78) (list 17 15) (list 9 95) (list 79 76) (list 13 91) (list 28 76) (list 94 12) (list 11 90) (list 94 11) (list 94 11) (list 15 89) (list 20 13) (list 23 14) (list 22 8) (list 21 71)) 7) 24 0.001)\n    (check-within (candidate (list (list 37 76) (list 109 71) (list 66 1) (list 55 6) (list 90 22) (list 71 24) (list 3 19) (list 46 24) (list 74 74) (list 85 94) (list 2 96) (list 1 48) (list 31 86) (list 22 78) (list 93 80) (list 3 112) (list 11 11) (list 98 18) (list 81 86) (list 55 54) (list 82 18) (list 127 23)) 83) 11 0.001)\n    (check-within (candidate (list (list 9 25) (list 56 25) (list 7 58) (list 9 48) (list 77 55) (list 6 10) (list 33 98) (list 22 26) (list 41 57) (list 18 4) (list 40 74)) 49) 8 0.001)\n    (check-within (candidate (list (list 91 12) (list 86 8) (list 74 12) (list 85 58) (list 65 10) (list 49 51) (list 43 83) (list 34 91) (list 89 63) (list 26 44) (list 68 6) (list 71 8) (list 92 12) (list 49 79) (list 64 26) (list 0 87) (list 22 85) (list 15 72) (list 17 54) (list 33 37) (list 70 9) (list 88 95) (list 85 67) (list 32 85) (list 94 69) (list 87 77)) 17) 16 0.001)\n    (check-within (candidate (list (list 54 60) (list 31 62) (list 76 56) (list 79 44)) 52) 0 0.001)\n    (check-within (candidate (list (list 41 13) (list 15 74) (list 43 51) (list 44 10) (list 49 72) (list 63 48) (list 50 40) (list 90 86) (list 105 13) (list 11 118) (list 55 8) (list 3 39) (list 27 3) (list 55 72) (list 33 98) (list 10 59) (list 40 45) (list 10 59) (list 40 30) (list 97 43) (list 96 55) (list 47 32) (list 43 86) (list 57 61) (list 1 64)) 64) 23 0.001)\n    (check-within (candidate (list (list 29 96) (list 82 101) (list 1 88) (list 9 100) (list 55 42) (list 37 77) (list 89 95) (list 40 10) (list 111 114) (list 89 53) (list 91 33) (list 93 18) (list 90 14) (list 50 49) (list 27 91) (list 99 92) (list 26 15) (list 69 17) (list 61 64)) 84) 7 0.001)\n    (check-within (candidate (list (list 57 88) (list 83 2) (list 82 23) (list 19 7) (list 43 84) (list 54 87) (list 51 38) (list 61 68) (list 68 31) (list 74 49) (list 64 80) (list 2 19) (list 18 73) (list 52 73) (list 75 26) (list 32 71) (list 91 83) (list 84 15) (list 49 76)) 30) 8 0.001)\n    (check-within (candidate (list (list 34 96) (list 53 25) (list 97 70) (list 48 31) (list 48 20) (list 54 26) (list 42 99) (list 52 24) (list 56 100) (list 35 106) (list 16 71) (list 34 69) (list 42 72) (list 28 8) (list 35 97) (list 103 67) (list 12 81) (list 8 86)) 11) 10 0.001)\n    (check-within (candidate (list (list 60 56) (list 48 34) (list 21 82) (list 63 26) (list 97 51) (list 35 63) (list 39 29) (list 5 46) (list 16 115) (list 19 71) (list 34 54) (list 6 65) (list 11 21) (list 54 66) (list 2 103) (list 13 64) (list 30 73) (list 23 58) (list 31 75) (list 6 63) (list 16 66) (list 21 100)) 38) 10 0.001)\n    (check-within (candidate (list (list 5 28) (list 16 39) (list 38 16) (list 21 34) (list 5 22) (list 73 52) (list 3 24) (list 24 37) (list 11 26)) 10) 5 0.001)\n    (check-within (candidate (list (list 34 76) (list 50 71) (list 55 74) (list 36 6) (list 56 77) (list 56 86) (list 9 25) (list 7 38) (list 34 76) (list 96 85) (list 29 32)) 27) 8 0.001)\n    (check-within (candidate (list (list 69 99) (list 60 80) (list 59 72) (list 74 67) (list 34 78) (list 73 95) (list 65 72) (list 86 64) (list 42 89) (list 90 25) (list 84 48)) 31) 8 0.001)\n    (check-within (candidate (list (list 50 75) (list 84 10) (list 3 1) (list 8 12) (list 41 82) (list 68 39) (list 55 31) (list 4 103) (list 50 19) (list 15 85) (list 20 50) (list 118 81) (list 47 14) (list 1 40) (list 1 58) (list 8 58) (list 18 110) (list 62 10) (list 98 69) (list 25 31) (list 99 10) (list 74 29) (list 124 73)) 98) 15 0.001)\n    (check-within (candidate (list (list 65 100) (list 43 13) (list 80 116) (list 40 82) (list 50 5) (list 53 14) (list 62 16) (list 38 8) (list 83 107) (list 56 11) (list 82 92) (list 62 16) (list 59 21) (list 38 8) (list 55 50) (list 67 76) (list 36 65)) 33) 14 0.001)\n    (check-within (candidate (list (list 52 32) (list 42 21) (list 1 56) (list 93 52) (list 85 87) (list 14 58) (list 39 21) (list 3 105) (list 18 13) (list 5 119) (list 108 77) (list 91 81) (list 22 71) (list 76 39) (list 2 59) (list 23 54) (list 83 26) (list 28 23) (list 33 69) (list 27 91) (list 92 19) (list 53 5) (list 39 32) (list 14 124)) 83) 21 0.001)\n    (check-within (candidate (list (list 84 63) (list 92 55) (list 56 94) (list 89 27) (list 53 93) (list 85 80) (list 65 91) (list 77 16) (list 28 99) (list 48 86) (list 54 44) (list 33 47) (list 47 10) (list 11 62) (list 2 17)) 16) 4 0.001)\n    (check-within (candidate (list (list 78 84) (list 91 79) (list 1 35) (list 73 76) (list 89 92) (list 69 94) (list 78 1) (list 27 71) (list 17 58) (list 18 33) (list 82 67) (list 24 59) (list 23 53) (list 82 86)) 21) 8 0.001)\n    (check-within (candidate (list (list 29 53) (list 40 74) (list 42 73) (list 24 53) (list 79 50) (list 13 7) (list 43 72) (list 26 54) (list 41 75) (list 66 27) (list 43 72) (list 81 75) (list 47 73) (list 74 43) (list 97 60) (list 42 76) (list 46 77) (list 21 69) (list 88 77)) 5) 16 0.001)\n    (check-within (candidate (list (list 21 95) (list 53 15) (list 71 7) (list 22 40) (list 8 89) (list 66 62)) 74) 1 0.001)\n    (check-within (candidate (list (list 93 3) (list 89 13) (list 70 48) (list 75 6) (list 43 82) (list 121 49) (list 80 1) (list 122 45) (list 57 45) (list 96 96) (list 86 82) (list 46 62) (list 63 79) (list 10 6) (list 55 36) (list 63 61) (list 79 99)) 92) 8 0.001)\n    (check-within (candidate (list (list 0 36) (list 77 49) (list 25 41)) 98) 1 0.001)\n    (check-within (candidate (list (list 42 18) (list 48 0) (list 64 62) (list 61 7) (list 33 51) (list 50 26) (list 1 91) (list 24 92)) 44) 4 0.001)\n    (check-within (candidate (list (list 69 94) (list 83 39) (list 2 37) (list 117 117) (list 82 54) (list 20 84) (list 91 88) (list 67 63) (list 43 69) (list 109 42) (list 9 69) (list 46 42) (list 60 99) (list 69 74) (list 81 80) (list 12 19)) 91) 11 0.001)\n    (check-within (candidate (list (list 75 44) (list 90 42) (list 62 96) (list 80 91) (list 82 78) (list 77 42)) 23) 3 0.001)\n    (check-within (candidate (list (list 81 20) (list 74 53) (list 70 49) (list 99 66) (list 11 88)) 60) 2 0.001)\n    (check-within (candidate (list (list 33 37) (list 35 52) (list 49 38) (list 47 32) (list 98 98) (list 84 83) (list 50 54) (list 45 34) (list 105 106) (list 54 44) (list 80 57) (list 96 80) (list 83 81) (list 36 22)) 19) 7 0.001)\n    (check-within (candidate (list (list 45 38) (list 47 5) (list 13 69) (list 88 65) (list 123 11) (list 15 30) (list 91 45) (list 66 100) (list 25 50) (list 63 10) (list 46 70) (list 36 77) (list 27 9) (list 78 91)) 98) 6 0.001)\n    (check-within (candidate (list (list 71 58) (list 60 37) (list 27 97) (list 7 56) (list 56 126) (list 24 59) (list 46 76) (list 15 79) (list 18 3) (list 98 8) (list 110 62) (list 76 30) (list 38 63)) 66) 8 0.001)\n    (check-within (candidate (list (list 21 80) (list 17 111) (list 0 126) (list 20 81) (list 50 76) (list 80 32) (list 7 97) (list 21 19) (list 50 91) (list 58 68) (list 55 4) (list 37 56) (list 20 42) (list 6 35) (list 38 72) (list 96 6) (list 11 70) (list 10 91) (list 11 94) (list 46 88) (list 81 64) (list 37 78) (list 15 75) (list 90 79) (list 13 103) (list 46 66) (list 2 95)) 67) 26 0.001)\n    (check-within (candidate (list (list 65 15) (list 73 72) (list 60 97) (list 101 107) (list 3 2) (list 4 20) (list 90 74) (list 71 7) (list 113 95) (list 39 17) (list 87 56) (list 2 76) (list 27 122) (list 48 41)) 79) 9 0.001)\n    (check-within (candidate (list (list 82 41) (list 27 65) (list 94 92) (list 15 82) (list 56 69) (list 30 57) (list 28 28) (list 5 53) (list 100 2) (list 112 44) (list 23 6) (list 92 29) (list 18 69) (list 124 26) (list 125 88) (list 97 54) (list 7 31) (list 50 80)) 39) 7 0.001)\n    (check-within (candidate (list (list 72 31) (list 86 19) (list 63 97) (list 11 118) (list 8 67) (list 14 6) (list 6 69) (list 51 1) (list 70 34) (list 98 68) (list 84 29) (list 47 37) (list 94 75) (list 73 15) (list 34 59) (list 71 42) (list 45 98) (list 22 52) (list 70 94) (list 67 78) (list 64 110) (list 104 5) (list 65 28) (list 87 100) (list 93 10)) 75) 10 0.001)\n    (check-within (candidate (list (list 90 16) (list 30 5) (list 16 71) (list 21 75) (list 33 55) (list 76 76) (list 16 50) (list 19 42) (list 18 59) (list 30 46) (list 6 21) (list 19 73) (list 35 78) (list 36 98) (list 30 77) (list 6 65) (list 87 31) (list 69 46) (list 62 42) (list 14 50) (list 44 29) (list 86 56)) 17) 5 0.001)\n    (check-within (candidate (list (list 27 30) (list 15 52) (list 26 30) (list 26 30) (list 15 53) (list 75 57) (list 27 30) (list 95 67) (list 26 31) (list 27 31) (list 15 53) (list 90 84) (list 27 30) (list 90 85) (list 10 3) (list 48 59)) 1) 15 0.001)\n    (check-within (candidate (list (list 6 12) (list 53 6) (list 16 65) (list 22 42) (list 66 85)) 54) 1 0.001)\n    (check-within (candidate (list (list 45 11) (list 43 19) (list 35 27) (list 43 13) (list 38 28) (list 41 59) (list 68 39) (list 29 47)) 30) 5 0.001)\n    (check-within (candidate (list (list 39 98) (list 1 97) (list 41 90) (list 1 83) (list 65 2) (list 7 27) (list 79 51) (list 124 88) (list 32 97)) 87) 2 0.001)\n    (check-within (candidate (list (list 54 49) (list 98 5) (list 98 25) (list 75 53) (list 117 42) (list 111 6) (list 31 85) (list 124 49) (list 120 115)) 70) 4 0.001)\n    (check-within (candidate (list (list 33 9) (list 59 5) (list 71 12) (list 36 2) (list 6 92) (list 32 81) (list 45 72) (list 54 67) (list 17 83) (list 64 19) (list 24 68) (list 58 56) (list 69 87) (list 76 23) (list 86 14) (list 40 25) (list 50 38) (list 50 71)) 38) 8 0.001)\n    (check-within (candidate (list (list 7 7) (list 44 51) (list 93 41) (list 43 37) (list 31 2) (list 39 52) (list 12 68) (list 92 78) (list 59 78) (list 95 70) (list 62 45) (list 30 79) (list 7 17) (list 3 89) (list 60 35)) 29) 6 0.001)\n    (check-within (candidate (list (list 77 91) (list 3 84) (list 91 18) (list 83 18) (list 56 94) (list 92 19) (list 69 83) (list 88 0) (list 73 95) (list 65 87) (list 95 89) (list 90 90) (list 19 36) (list 94 1) (list 20 18) (list 14 62) (list 77 62) (list 76 92) (list 14 55) (list 22 39) (list 75 95) (list 94 17) (list 21 38)) 8) 10 0.001)\n    (check-within (candidate (list (list 27 49) (list 44 38) (list 99 7) (list 32 33) (list 60 98) (list 98 84) (list 93 89) (list 85 80)) 95) 1 0.001)\n    (check-within (candidate (list (list 86 74) (list 117 67) (list 106 78) (list 66 82) (list 15 75) (list 76 72) (list 116 64) (list 85 51) (list 109 87) (list 75 69) (list 103 89) (list 80 20) (list 101 95) (list 124 76) (list 91 53) (list 100 84) (list 112 108) (list 45 94) (list 14 96)) 44) 19 0.001)\n    (check-within (candidate (list (list 43 81) (list 53 103) (list 106 66) (list 75 67) (list 88 96) (list 112 90) (list 23 87) (list 26 70) (list 75 78) (list 102 100) (list 82 15) (list 69 5) (list 32 106) (list 38 116) (list 10 32) (list 48 46) (list 7 93) (list 61 43) (list 11 38) (list 4 99) (list 58 4) (list 29 10) (list 28 6) (list 40 80) (list 7 110) (list 95 91) (list 24 56) (list 92 53)) 84) 19 0.001)\n    (check-within (candidate (list (list 28 78) (list 90 77) (list 51 40) (list 67 125) (list 31 62) (list 19 116) (list 3 79) (list 61 5) (list 39 7) (list 27 9) (list 56 33) (list 100 69) (list 30 72) (list 0 66) (list 17 54) (list 123 6) (list 87 72) (list 11 25) (list 24 49) (list 103 81) (list 37 58) (list 26 53) (list 23 45) (list 120 1) (list 39 96) (list 58 84) (list 97 5)) 73) 17 0.001)\n    (check-within (candidate (list (list 63 22) (list 10 98) (list 61 3) (list 7 4) (list 0 111) (list 56 17) (list 50 11) (list 30 97) (list 16 2) (list 59 77) (list 4 48) (list 42 94) (list 63 1) (list 42 3) (list 13 9) (list 27 100) (list 60 30) (list 1 34) (list 54 43) (list 3 32) (list 15 60) (list 39 9) (list 52 82) (list 19 7) (list 42 82) (list 88 96)) 23) 18 0.001)\n    (check-within (candidate (list (list 76 84) (list 58 43) (list 15 66) (list 83 35) (list 38 10) (list 12 44) (list 70 34) (list 20 36) (list 13 29) (list 17 24) (list 53 100)) 61) 3 0.001)\n    (check-within (candidate (list (list 5 32) (list 28 98) (list 26 96) (list 30 100) (list 29 101) (list 32 50) (list 0 73) (list 29 101) (list 65 92) (list 54 15) (list 1 36) (list 68 46) (list 98 62) (list 67 90) (list 28 98) (list 12 81) (list 16 83) (list 55 77) (list 49 14) (list 0 12) (list 25 101) (list 27 99) (list 4 47) (list 19 99) (list 63 62) (list 56 92)) 8) 18 0.001)\n    (check-within (candidate (list (list 95 54) (list 53 94) (list 90 47) (list 89 90) (list 90 47) (list 73 36) (list 73 84) (list 72 49) (list 63 91) (list 39 66) (list 57 80) (list 80 59)) 30) 8 0.001)\n    (check-within (candidate (list (list 66 53) (list 64 2) (list 94 55) (list 85 23) (list 74 7) (list 18 83) (list 32 95) (list 55 13) (list 81 34) (list 25 125) (list 73 75) (list 49 32) (list 57 19) (list 0 19) (list 72 79) (list 65 8) (list 118 38) (list 44 44) (list 68 16) (list 62 62) (list 0 116) (list 60 21)) 57) 7 0.001)\n    (check-within (candidate (list (list 38 73) (list 37 117) (list 95 92) (list 28 22) (list 16 64) (list 53 0) (list 65 85) (list 91 16) (list 82 28) (list 57 9) (list 53 75) (list 47 45) (list 30 43) (list 91 47) (list 56 94) (list 53 39)) 63) 5 0.001)\n    (check-within (candidate (list (list 11 11) (list 96 86) (list 86 64) (list 94 11) (list 121 100) (list 68 1) (list 84 54) (list 21 40) (list 8 3) (list 96 44) (list 96 127) (list 42 25) (list 43 119) (list 94 10) (list 71 0) (list 84 96) (list 79 73) (list 37 11) (list 74 15) (list 4 53) (list 27 59) (list 0 67)) 83) 13 0.001)\n    (check-within (candidate (list (list 0 8) (list 45 94) (list 87 72) (list 12 98) (list 4 16) (list 91 88) (list 26 100) (list 8 31) (list 56 89) (list 13 54) (list 22 26) (list 2 18) (list 7 36) (list 19 13) (list 61 72) (list 44 10) (list 44 87) (list 1 38) (list 25 23) (list 24 36) (list 21 50) (list 27 13) (list 95 68) (list 15 13) (list 54 68) (list 5 62)) 28) 17 0.001)\n    (check-within (candidate (list (list 97 95) (list 100 90) (list 99 87) (list 100 80) (list 102 82) (list 4 7) (list 0 69) (list 99 89)) 10) 6 0.001)\n    (check-within (candidate (list (list 22 68) (list 75 70) (list 67 78)) 95) 2 0.001)\n    (check-within (candidate (list (list 36 33) (list 73 78) (list 41 27) (list 58 34) (list 10 67)) 80) 1 0.001)\n    (check-within (candidate (list (list 2 37) (list 39 2) (list 12 57) (list 33 38) (list 73 36) (list 85 22) (list 9 95) (list 31 64) (list 22 3)) 76) 4 0.001)\n    (check-within (candidate (list (list 44 0) (list 95 53) (list 37 6) (list 40 4) (list 5 73) (list 33 2) (list 16 71) (list 36 8) (list 87 50) (list 31 71) (list 83 57) (list 4 31) (list 35 79) (list 12 70) (list 93 55) (list 21 77) (list 97 9) (list 95 53) (list 10 73) (list 78 100) (list 22 48) (list 87 50) (list 74 64)) 15) 17 0.001)\n    (check-within (candidate (list (list 16 39) (list 17 57) (list 14 38) (list 22 62) (list 69 40) (list 2 53) (list 23 63) (list 20 35) (list 25 49)) 31) 15 0.001)\n    (check-within (candidate (list (list 0 46) (list 13 69) (list 38 80) (list 60 17) (list 72 83) (list 27 78) (list 21 9) (list 9 29) (list 84 39) (list 59 117) (list 79 65) (list 1 116) (list 90 71) (list 53 91) (list 46 3) (list 100 73) (list 105 23) (list 12 81) (list 113 84) (list 111 25) (list 27 1) (list 48 49) (list 51 53) (list 93 83) (list 48 29) (list 27 21) (list 9 71)) 91) 19 0.001)\n    (check-within (candidate (list (list 50 93) (list 12 98) (list 26 22) (list 50 19) (list 20 70) (list 53 119) (list 1 127) (list 38 100) (list 52 116) (list 89 71) (list 9 98) (list 34 94) (list 12 98) (list 29 119) (list 60 29) (list 97 81) (list 102 84) (list 13 15) (list 10 28) (list 40 26) (list 16 87) (list 45 83) (list 55 83) (list 62 35) (list 30 94) (list 7 75) (list 14 86) (list 16 12) (list 73 88) (list 60 124)) 78) 26 0.001)\n    (check-within (candidate (list (list 19 26) (list 2 28) (list 3 10) (list 42 61) (list 56 56)) 23) 3 0.001)\n    (check-within (candidate (list (list 56 55) (list 42 83) (list 35 97) (list 28 32) (list 52 76) (list 34 20) (list 68 88) (list 90 38) (list 99 76) (list 32 20) (list 22 85) (list 50 34) (list 4 11) (list 17 92) (list 59 80) (list 66 65) (list 47 60)) 59) 6 0.001)\n    (check-within (candidate (list (list 87 78) (list 72 88) (list 82 69) (list 88 79) (list 36 24) (list 42 15) (list 66 94) (list 32 10) (list 92 71) (list 46 89) (list 74 86) (list 37 23) (list 61 44) (list 66 87) (list 35 17) (list 91 78) (list 43 15) (list 61 75) (list 62 70) (list 61 70) (list 34 7) (list 85 64) (list 35 20) (list 42 22) (list 41 27) (list 82 85) (list 90 89) (list 41 13)) 16) 20 0.001)\n    (check-within (candidate (list (list 48 86) (list 98 33) (list 46 68) (list 91 21) (list 39 73)) 22) 1 0.001)\n    (check-within (candidate (list (list 71 47) (list 68 44) (list 65 45) (list 97 43) (list 97 45) (list 97 45) (list 71 41) (list 103 43) (list 96 20) (list 99 41) (list 57 4) (list 17 77) (list 68 44) (list 16 72) (list 17 75) (list 64 69) (list 19 75) (list 99 41) (list 2 21) (list 71 47) (list 91 4) (list 57 2)) 6) 21 0.001)\n    (check-within (candidate (list (list 5 11) (list 16 87) (list 48 55) (list 26 15) (list 41 58) (list 12 14) (list 81 66) (list 30 5)) 14) 2 0.001)\n    (check-within (candidate (list (list 85 89) (list 119 89) (list 34 16) (list 54 41) (list 55 29) (list 33 34) (list 54 30) (list 80 74) (list 12 92) (list 42 49) (list 69 7) (list 47 13) (list 26 38) (list 39 96) (list 61 58) (list 24 48) (list 46 47)) 34) 6 0.001)\n    (check-within (candidate (list (list 35 45) (list 58 17) (list 64 60) (list 117 23) (list 18 63) (list 26 55) (list 65 54)) 85) 4 0.001)\n    (check-within (candidate (list (list 60 1) (list 57 6) (list 39 3) (list 58 7) (list 61 14) (list 19 80) (list 46 0) (list 84 35) (list 43 3) (list 46 4) (list 48 71) (list 48 75) (list 85 40) (list 46 45) (list 6 20) (list 35 7) (list 57 6) (list 51 78) (list 68 25) (list 17 0)) 12) 12 0.001)\n    (check-within (candidate (list (list 95 0) (list 36 24) (list 68 27) (list 80 14) (list 39 2) (list 93 52) (list 107 52) (list 86 63) (list 82 13) (list 55 14) (list 8 52) (list 99 20) (list 101 36) (list 50 70) (list 26 98) (list 95 41)) 54) 8 0.001)\n    (check-within (candidate (list (list 43 14) (list 55 83) (list 33 89) (list 44 74) (list 46 84) (list 51 87) (list 61 69) (list 1 89)) 32) 10 0.001)\n    (check-within (candidate (list (list 88 15) (list 93 65) (list 52 39) (list 20 24) (list 100 36) (list 39 17) (list 26 77) (list 52 39) (list 47 83) (list 98 99) (list 43 28) (list 72 29) (list 21 48) (list 43 32) (list 60 108) (list 44 47) (list 45 125) (list 84 94)) 83) 13 0.001)\n    (check-within (candidate (list (list 12 2) (list 43 87) (list 21 100) (list 79 63) (list 5 6) (list 70 75) (list 20 55) (list 23 55) (list 17 31) (list 121 89) (list 27 71) (list 27 22) (list 42 34) (list 15 14) (list 16 40) (list 49 68) (list 30 48) (list 45 43) (list 88 23) (list 47 15) (list 16 41) (list 8 5)) 81) 8 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2954_maxSum", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer array nums and two positive integers m and k.\n;; Return the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.\n;; A subarray of nums is almost unique if it contains at least m distinct elements.\n;; A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [2,6,7,3,1,7], m = 3, k = 4\n;; Output: 18\n;; Explanation: There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\n;; Example 2:\n;; Input: nums = [5,9,9,2,4,5,4], m = 1, k = 3\n;; Output: 23\n;; Explanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\n;; Example 3:\n;; Input: nums = [1,2,1,2,1,2,1], m = 3, k = 3\n;; Output: 0\n;; Explanation: There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\n;; Constraints:\n;;  * 1 <= nums.length <= 2 * 104\n;;  * 1 <= m <= k <= nums.length\n;;  * 1 <= nums[i] <= 109\n(define (maxSum nums m k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2954_maxSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxSum))\n    (check-within (candidate (list 2 6 7 3 1 7) 3 4) 18 0.001)\n    (check-within (candidate (list 5 9 9 2 4 5 4) 1 3) 23 0.001)\n    (check-within (candidate (list 1 2 1 2 1 2 1) 3 3) 0 0.001)\n    (check-within (candidate (list 1) 1 1) 1 0.001)\n    (check-within (candidate (list 1 1) 2 2) 0 0.001)\n    (check-within (candidate (list 1 1 1) 1 1) 1 0.001)\n    (check-within (candidate (list 1 1 1 1) 1 1) 1 0.001)\n    (check-within (candidate (list 1 1 1 2) 2 4) 5 0.001)\n    (check-within (candidate (list 1 1 1 3) 2 2) 4 0.001)\n    (check-within (candidate (list 1 1 1 4) 2 4) 7 0.001)\n    (check-within (candidate (list 1 1 2) 1 1) 2 0.001)\n    (check-within (candidate (list 1 1 2 1) 2 2) 3 0.001)\n    (check-within (candidate (list 1 1 2 2) 1 3) 5 0.001)\n    (check-within (candidate (list 1 1 2 3) 1 1) 3 0.001)\n    (check-within (candidate (list 1 1 2 4) 1 1) 4 0.001)\n    (check-within (candidate (list 1 1 3) 1 2) 4 0.001)\n    (check-within (candidate (list 1 1 3 1) 2 4) 6 0.001)\n    (check-within (candidate (list 1 1 3 2) 1 2) 5 0.001)\n    (check-within (candidate (list 1 1 3 3) 1 1) 3 0.001)\n    (check-within (candidate (list 1 1 3 4) 1 1) 4 0.001)\n    (check-within (candidate (list 1 1 4) 1 3) 6 0.001)\n    (check-within (candidate (list 1 1 4 1) 1 3) 6 0.001)\n    (check-within (candidate (list 1 1 4 2) 2 2) 6 0.001)\n    (check-within (candidate (list 1 1 4 3) 1 1) 4 0.001)\n    (check-within (candidate (list 1 1 4 4) 3 3) 0 0.001)\n    (check-within (candidate (list 1 2) 1 2) 3 0.001)\n    (check-within (candidate (list 1 2 1) 1 1) 2 0.001)\n    (check-within (candidate (list 1 2 1 1) 1 2) 3 0.001)\n    (check-within (candidate (list 1 2 1 2) 2 4) 6 0.001)\n    (check-within (candidate (list 1 2 1 3) 1 4) 7 0.001)\n    (check-within (candidate (list 1 2 1 4) 2 4) 8 0.001)\n    (check-within (candidate (list 1 2 2) 2 2) 3 0.001)\n    (check-within (candidate (list 1 2 2 1) 2 2) 3 0.001)\n    (check-within (candidate (list 1 2 2 2) 1 1) 2 0.001)\n    (check-within (candidate (list 1 2 2 3) 3 3) 0 0.001)\n    (check-within (candidate (list 1 2 2 4) 1 4) 9 0.001)\n    (check-within (candidate (list 1 2 3) 1 2) 5 0.001)\n    (check-within (candidate (list 1 2 3 1) 1 1) 3 0.001)\n    (check-within (candidate (list 1 2 3 2) 1 1) 3 0.001)\n    (check-within (candidate (list 1 2 3 3) 2 3) 8 0.001)\n    (check-within (candidate (list 1 2 3 4) 1 2) 7 0.001)\n    (check-within (candidate (list 1 2 4) 1 1) 4 0.001)\n    (check-within (candidate (list 1 2 4 1) 1 1) 4 0.001)\n    (check-within (candidate (list 1 2 4 2) 1 1) 4 0.001)\n    (check-within (candidate (list 1 2 4 3) 1 1) 4 0.001)\n    (check-within (candidate (list 1 2 4 4) 1 2) 8 0.001)\n    (check-within (candidate (list 1 3) 1 1) 3 0.001)\n    (check-within (candidate (list 1 3 1) 1 1) 3 0.001)\n    (check-within (candidate (list 1 3 1 1) 2 3) 5 0.001)\n    (check-within (candidate (list 1 3 1 2) 4 4) 0 0.001)\n    (check-within (candidate (list 1 3 1 3) 2 2) 4 0.001)\n    (check-within (candidate (list 1 3 1 4) 1 1) 4 0.001)\n    (check-within (candidate (list 1 3 2) 1 2) 5 0.001)\n    (check-within (candidate (list 1 3 2 1) 2 2) 5 0.001)\n    (check-within (candidate (list 1 3 2 2) 1 2) 5 0.001)\n    (check-within (candidate (list 1 3 2 3) 1 3) 8 0.001)\n    (check-within (candidate (list 1 3 2 4) 3 3) 9 0.001)\n    (check-within (candidate (list 1 3 3) 2 3) 7 0.001)\n    (check-within (candidate (list 1 3 3 1) 2 4) 8 0.001)\n    (check-within (candidate (list 1 3 3 2) 2 3) 8 0.001)\n    (check-within (candidate (list 1 3 3 3) 1 2) 6 0.001)\n    (check-within (candidate (list 1 3 3 4) 2 4) 11 0.001)\n    (check-within (candidate (list 1 3 4) 1 1) 4 0.001)\n    (check-within (candidate (list 1 3 4 1) 2 4) 9 0.001)\n    (check-within (candidate (list 1 3 4 2) 3 4) 10 0.001)\n    (check-within (candidate (list 1 3 4 3) 1 1) 4 0.001)\n    (check-within (candidate (list 1 3 4 4) 1 2) 8 0.001)\n    (check-within (candidate (list 1 4) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 1) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 1 1) 1 3) 6 0.001)\n    (check-within (candidate (list 1 4 1 2) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 1 3) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 1 4) 2 3) 9 0.001)\n    (check-within (candidate (list 1 4 2) 3 3) 7 0.001)\n    (check-within (candidate (list 1 4 2 1) 2 2) 6 0.001)\n    (check-within (candidate (list 1 4 2 2) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 2 3) 3 3) 9 0.001)\n    (check-within (candidate (list 1 4 2 4) 1 3) 10 0.001)\n    (check-within (candidate (list 1 4 3) 3 3) 8 0.001)\n    (check-within (candidate (list 1 4 3 1) 1 2) 7 0.001)\n    (check-within (candidate (list 1 4 3 2) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 3 3) 2 2) 7 0.001)\n    (check-within (candidate (list 1 4 3 4) 3 3) 8 0.001)\n    (check-within (candidate (list 1 4 4) 2 3) 9 0.001)\n    (check-within (candidate (list 1 4 4 1) 1 1) 4 0.001)\n    (check-within (candidate (list 1 4 4 2) 1 2) 8 0.001)\n    (check-within (candidate (list 1 4 4 3) 3 4) 12 0.001)\n    (check-within (candidate (list 1 4 4 4) 3 3) 0 0.001)\n    (check-within (candidate (list 2) 1 1) 2 0.001)\n    (check-within (candidate (list 2 1) 2 2) 3 0.001)\n    (check-within (candidate (list 2 1 1) 1 1) 2 0.001)\n    (check-within (candidate (list 2 1 1 1) 4 4) 0 0.001)\n    (check-within (candidate (list 2 1 1 2) 2 4) 6 0.001)\n    (check-within (candidate (list 2 1 1 3) 3 3) 0 0.001)\n    (check-within (candidate (list 2 1 1 4) 2 2) 5 0.001)\n    (check-within (candidate (list 2 1 2) 1 3) 5 0.001)\n    (check-within (candidate (list 2 1 2 1) 2 2) 3 0.001)\n    (check-within (candidate (list 2 1 2 2) 1 1) 2 0.001)\n    (check-within (candidate (list 2 1 2 3) 1 3) 6 0.001)\n    (check-within (candidate (list 2 1 2 4) 1 3) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2955_accountBalanceAfterPurchase", "language": "rkt", "prompt": "#lang racket\n;; Initially, you have a bank account balance of 100 dollars.\n;; You are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars.\n;; At the store where you will make the purchase, the purchase amount is rounded to the nearest multiple of 10. In other words, you pay a non-negative amount, roundedAmount, such that roundedAmount is a multiple of 10 and abs(roundedAmount - purchaseAmount) is minimized.\n;; If there is more than one nearest multiple of 10, the largest multiple is chosen.\n;; Return an integer denoting your account balance after making a purchase worth purchaseAmount dollars from the store.\n;; Note: 0 is considered to be a multiple of 10 in this problem.\n;; Example 1:\n;; Input: purchaseAmount = 9\n;; Output: 90\n;; Explanation: In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.\n;; Example 2:\n;; Input: purchaseAmount = 15\n;; Output: 80\n;; Explanation: In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\n;; Hence, your account balance becomes 100 - 20 = 80.\n;; Constraints:\n;;  * 0 <= purchaseAmount <= 100\n(define (accountBalanceAfterPurchase purchaseAmount)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2955_accountBalanceAfterPurchase.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate accountBalanceAfterPurchase))\n    (check-within (candidate 9) 90 0.001)\n    (check-within (candidate 15) 80 0.001)\n    (check-within (candidate 10) 90 0.001)\n    (check-within (candidate 11) 90 0.001)\n    (check-within (candidate 12) 90 0.001)\n    (check-within (candidate 13) 90 0.001)\n    (check-within (candidate 14) 90 0.001)\n    (check-within (candidate 16) 80 0.001)\n    (check-within (candidate 17) 80 0.001)\n    (check-within (candidate 18) 80 0.001)\n    (check-within (candidate 19) 80 0.001)\n    (check-within (candidate 1) 100 0.001)\n    (check-within (candidate 2) 100 0.001)\n    (check-within (candidate 3) 100 0.001)\n    (check-within (candidate 4) 100 0.001)\n    (check-within (candidate 5) 90 0.001)\n    (check-within (candidate 6) 90 0.001)\n    (check-within (candidate 7) 90 0.001)\n    (check-within (candidate 8) 90 0.001)\n    (check-within (candidate 20) 80 0.001)\n    (check-within (candidate 21) 80 0.001)\n    (check-within (candidate 22) 80 0.001)\n    (check-within (candidate 23) 80 0.001)\n    (check-within (candidate 24) 80 0.001)\n    (check-within (candidate 25) 70 0.001)\n    (check-within (candidate 26) 70 0.001)\n    (check-within (candidate 27) 70 0.001)\n    (check-within (candidate 28) 70 0.001)\n    (check-within (candidate 29) 70 0.001)\n    (check-within (candidate 30) 70 0.001)\n    (check-within (candidate 31) 70 0.001)\n    (check-within (candidate 32) 70 0.001)\n    (check-within (candidate 33) 70 0.001)\n    (check-within (candidate 34) 70 0.001)\n    (check-within (candidate 35) 60 0.001)\n    (check-within (candidate 36) 60 0.001)\n    (check-within (candidate 37) 60 0.001)\n    (check-within (candidate 38) 60 0.001)\n    (check-within (candidate 39) 60 0.001)\n    (check-within (candidate 40) 60 0.001)\n    (check-within (candidate 41) 60 0.001)\n    (check-within (candidate 42) 60 0.001)\n    (check-within (candidate 43) 60 0.001)\n    (check-within (candidate 44) 60 0.001)\n    (check-within (candidate 45) 50 0.001)\n    (check-within (candidate 46) 50 0.001)\n    (check-within (candidate 47) 50 0.001)\n    (check-within (candidate 48) 50 0.001)\n    (check-within (candidate 49) 50 0.001)\n    (check-within (candidate 50) 50 0.001)\n    (check-within (candidate 51) 50 0.001)\n    (check-within (candidate 52) 50 0.001)\n    (check-within (candidate 53) 50 0.001)\n    (check-within (candidate 54) 50 0.001)\n    (check-within (candidate 55) 40 0.001)\n    (check-within (candidate 56) 40 0.001)\n    (check-within (candidate 57) 40 0.001)\n    (check-within (candidate 58) 40 0.001)\n    (check-within (candidate 59) 40 0.001)\n    (check-within (candidate 60) 40 0.001)\n    (check-within (candidate 61) 40 0.001)\n    (check-within (candidate 62) 40 0.001)\n    (check-within (candidate 63) 40 0.001)\n    (check-within (candidate 64) 40 0.001)\n    (check-within (candidate 65) 30 0.001)\n    (check-within (candidate 66) 30 0.001)\n    (check-within (candidate 67) 30 0.001)\n    (check-within (candidate 68) 30 0.001)\n    (check-within (candidate 69) 30 0.001)\n    (check-within (candidate 70) 30 0.001)\n    (check-within (candidate 71) 30 0.001)\n    (check-within (candidate 72) 30 0.001)\n    (check-within (candidate 73) 30 0.001)\n    (check-within (candidate 74) 30 0.001)\n    (check-within (candidate 75) 20 0.001)\n    (check-within (candidate 76) 20 0.001)\n    (check-within (candidate 77) 20 0.001)\n    (check-within (candidate 78) 20 0.001)\n    (check-within (candidate 79) 20 0.001)\n    (check-within (candidate 80) 20 0.001)\n    (check-within (candidate 81) 20 0.001)\n    (check-within (candidate 82) 20 0.001)\n    (check-within (candidate 83) 20 0.001)\n    (check-within (candidate 84) 20 0.001)\n    (check-within (candidate 85) 10 0.001)\n    (check-within (candidate 86) 10 0.001)\n    (check-within (candidate 87) 10 0.001)\n    (check-within (candidate 88) 10 0.001)\n    (check-within (candidate 89) 10 0.001)\n    (check-within (candidate 90) 10 0.001)\n    (check-within (candidate 91) 10 0.001)\n    (check-within (candidate 92) 10 0.001)\n    (check-within (candidate 93) 10 0.001)\n    (check-within (candidate 94) 10 0.001)\n    (check-within (candidate 95) 0 0.001)\n    (check-within (candidate 96) 0 0.001)\n    (check-within (candidate 97) 0 0.001)\n    (check-within (candidate 98) 0 0.001)\n    (check-within (candidate 99) 0 0.001)\n    (check-within (candidate 100) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2977_isAcronym", "language": "rkt", "prompt": "#lang racket\n;; Given an array of strings words and a string s, determine if s is an acronym of words.\n;; The string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\n;; Return true if s is an acronym of words, and false otherwise.\n;; Example 1:\n;; Input: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\n;; Output: true\n;; Explanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym.\n;; Example 2:\n;; Input: words = [\"an\",\"apple\"], s = \"a\"\n;; Output: false\n;; Explanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively.\n;; The acronym formed by concatenating these characters is \"aa\".\n;; Hence, s = \"a\" is not the acronym.\n;; Example 3:\n;; Input: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\n;; Output: true\n;; Explanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\".\n;; Hence, s = \"ngguoy\" is the acronym.\n;; Constraints:\n;;  * 1 <= words.length <= 100\n;;  * 1 <= words[i].length <= 10\n;;  * 1 <= s.length <= 100\n;;  * words[i] and s consist of lowercase English letters.\n(define (isAcronym words s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2977_isAcronym.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate isAcronym))\n    (check-within (candidate (list \"an\" \"apple\") a) #f 0.001)\n    (check-within (candidate (list \"alice\" \"bob\" \"charlie\") abc) #t 0.001)\n    (check-within (candidate (list \"never\" \"gonna\" \"give\" \"up\" \"on\" \"you\") ngguoy) #t 0.001)\n    (check-within (candidate (list \"ad\" \"uadhrwxki\") au) #t 0.001)\n    (check-within (candidate (list \"afqcpzsx\" \"icenu\") yi) #f 0.001)\n    (check-within (candidate (list \"afkc\" \"icxufam\") ai) #t 0.001)\n    (check-within (candidate (list \"ahbibag\" \"aoximesw\") aa) #t 0.001)\n    (check-within (candidate (list \"auqoc\" \"koioxa\") ak) #t 0.001)\n    (check-within (candidate (list \"b\" \"x\") bx) #t 0.001)\n    (check-within (candidate (list \"c\" \"df\") bd) #f 0.001)\n    (check-within (candidate (list \"dv\" \"g\") sg) #f 0.001)\n    (check-within (candidate (list \"dvn\" \"acafe\") dp) #f 0.001)\n    (check-within (candidate (list \"bpctc\" \"kaqquqbpmw\") bk) #t 0.001)\n    (check-within (candidate (list \"c\" \"evlvvhrsqa\") ce) #t 0.001)\n    (check-within (candidate (list \"dwrvgkxdtm\" \"wy\") hw) #f 0.001)\n    (check-within (candidate (list \"eceekigel\" \"gmgdfvsrkw\") wg) #f 0.001)\n    (check-within (candidate (list \"cfsrsyt\" \"md\") cm) #t 0.001)\n    (check-within (candidate (list \"envpklvi\" \"jpymde\") en) #f 0.001)\n    (check-within (candidate (list \"espleklys\" \"dg\") ea) #f 0.001)\n    (check-within (candidate (list \"euptjhixnu\" \"fwci\") kf) #f 0.001)\n    (check-within (candidate (list \"ddnlfpvy\" \"exs\") de) #t 0.001)\n    (check-within (candidate (list \"deacf\" \"hldiauk\") dh) #t 0.001)\n    (check-within (candidate (list \"dllcn\" \"tnzrnzypg\") dt) #t 0.001)\n    (check-within (candidate (list \"dmekslxlpo\" \"wqdgxqwdk\") dw) #t 0.001)\n    (check-within (candidate (list \"eyzywjsxza\" \"jxeimcc\") ex) #f 0.001)\n    (check-within (candidate (list \"f\" \"oylvtltvo\") ho) #f 0.001)\n    (check-within (candidate (list \"eo\" \"e\") ee) #t 0.001)\n    (check-within (candidate (list \"eucvcqdgg\" \"qtdwhygerb\") eq) #t 0.001)\n    (check-within (candidate (list \"fnpow\" \"ysqwqli\") jy) #f 0.001)\n    (check-within (candidate (list \"gpqyvv\" \"kihi\") ik) #f 0.001)\n    (check-within (candidate (list \"exrgiw\" \"irexgmrl\") ei) #t 0.001)\n    (check-within (candidate (list \"ez\" \"acnmits\") ea) #t 0.001)\n    (check-within (candidate (list \"fvkekkv\" \"jfbv\") fj) #t 0.001)\n    (check-within (candidate (list \"kncge\" \"nje\") kw) #f 0.001)\n    (check-within (candidate (list \"fyocwzlz\" \"lz\") fl) #t 0.001)\n    (check-within (candidate (list \"mnh\" \"clep\") pc) #f 0.001)\n    (check-within (candidate (list \"mnpdwq\" \"hziusbxr\") mg) #f 0.001)\n    (check-within (candidate (list \"g\" \"r\") gr) #t 0.001)\n    (check-within (candidate (list \"n\" \"fddigeie\") hf) #f 0.001)\n    (check-within (candidate (list \"gle\" \"irt\") gi) #t 0.001)\n    (check-within (candidate (list \"h\" \"xhtkcj\") hx) #t 0.001)\n    (check-within (candidate (list \"n\" \"ityua\") ei) #f 0.001)\n    (check-within (candidate (list \"nmxysdim\" \"xnpqsauh\") ne) #f 0.001)\n    (check-within (candidate (list \"ovdhflcck\" \"ndd\") oi) #f 0.001)\n    (check-within (candidate (list \"piiyodecdf\" \"wdwfxsjfou\") pp) #f 0.001)\n    (check-within (candidate (list \"hdmwkr\" \"jfrqh\") hj) #t 0.001)\n    (check-within (candidate (list \"hflf\" \"fvnotmdcpw\") hf) #t 0.001)\n    (check-within (candidate (list \"hnwphhozqw\" \"cfhsjlqj\") hc) #t 0.001)\n    (check-within (candidate (list \"pxcsaaa\" \"lrvxsc\") pz) #f 0.001)\n    (check-within (candidate (list \"htlsq\" \"y\") hy) #t 0.001)\n    (check-within (candidate (list \"iakfeop\" \"pd\") ip) #t 0.001)\n    (check-within (candidate (list \"qir\" \"qyyzmntl\") qa) #f 0.001)\n    (check-within (candidate (list \"iakfmr\" \"gzggxzwor\") ig) #t 0.001)\n    (check-within (candidate (list \"jna\" \"rjdbu\") jr) #t 0.001)\n    (check-within (candidate (list \"qunqyc\" \"ouzjotitvn\") co) #f 0.001)\n    (check-within (candidate (list \"rdednrsn\" \"yfrgdeapme\") ny) #f 0.001)\n    (check-within (candidate (list \"rtnbfaemv\" \"kgpcwaoik\") rf) #f 0.001)\n    (check-within (candidate (list \"s\" \"n\") sx) #f 0.001)\n    (check-within (candidate (list \"siiyqtkyis\" \"mogzgabcgk\") fm) #f 0.001)\n    (check-within (candidate (list \"tit\" \"pmuqzrs\") tz) #f 0.001)\n    (check-within (candidate (list \"uip\" \"hhstwupgg\") eh) #f 0.001)\n    (check-within (candidate (list \"uyj\" \"jlfnksqlt\") ur) #f 0.001)\n    (check-within (candidate (list \"kabfejv\" \"g\") kg) #t 0.001)\n    (check-within (candidate (list \"w\" \"eshensjifo\") ez) #f 0.001)\n    (check-within (candidate (list \"khhhdsaevp\" \"dnod\") kd) #t 0.001)\n    (check-within (candidate (list \"wefmc\" \"tmunsmg\") jt) #f 0.001)\n    (check-within (candidate (list \"wo\" \"jhaabx\") wx) #f 0.001)\n    (check-within (candidate (list \"kltil\" \"mubemf\") km) #t 0.001)\n    (check-within (candidate (list \"kxkvhylsh\" \"gyshntskq\") kg) #t 0.001)\n    (check-within (candidate (list \"wseopbedw\" \"iihrgujev\") wq) #f 0.001)\n    (check-within (candidate (list \"kzxp\" \"fy\") kf) #t 0.001)\n    (check-within (candidate (list \"wvdx\" \"jerzn\") cj) #f 0.001)\n    (check-within (candidate (list \"y\" \"qppnclhhbd\") mq) #f 0.001)\n    (check-within (candidate (list \"yegnsnddq\" \"kusrkz\") bk) #f 0.001)\n    (check-within (candidate (list \"couqsa\" \"sncuru\" \"jhgxpxipg\") csa) #f 0.001)\n    (check-within (candidate (list \"csm\" \"hexhvojfj\" \"l\") chh) #f 0.001)\n    (check-within (candidate (list \"lbor\" \"zx\") lz) #t 0.001)\n    (check-within (candidate (list \"losinu\" \"ptsjoihvj\") lp) #t 0.001)\n    (check-within (candidate (list \"maczdfm\" \"ywj\") my) #t 0.001)\n    (check-within (candidate (list \"d\" \"geviina\" \"tyljs\") dvt) #f 0.001)\n    (check-within (candidate (list \"mammhva\" \"igyzbwpj\") mi) #t 0.001)\n    (check-within (candidate (list \"ecmlkida\" \"vrjwdpe\" \"vocff\") hvv) #f 0.001)\n    (check-within (candidate (list \"emqlklvrw\" \"das\" \"bzuq\") edm) #f 0.001)\n    (check-within (candidate (list \"hawikjbs\" \"qi\" \"ssvgttkzd\") rornirdphvargyce) #f 0.001)\n    (check-within (candidate (list \"hd\" \"f\" \"meivn\") hpm) #f 0.001)\n    (check-within (candidate (list \"mqhptbyzzv\" \"mfubjraiqz\") mm) #t 0.001)\n    (check-within (candidate (list \"mvftnzftb\" \"ga\") mg) #t 0.001)\n    (check-within (candidate (list \"ncgutvi\" \"rsh\") nr) #t 0.001)\n    (check-within (candidate (list \"ntf\" \"txayzc\") nt) #t 0.001)\n    (check-within (candidate (list \"nubibbe\" \"wzwdrjcck\") nw) #t 0.001)\n    (check-within (candidate (list \"hphfek\" \"kezkkq\" \"oh\") hmo) #f 0.001)\n    (check-within (candidate (list \"odtclcvcj\" \"ufhrhk\") ou) #t 0.001)\n    (check-within (candidate (list \"ojcn\" \"naujlz\") on) #t 0.001)\n    (check-within (candidate (list \"iho\" \"ignyipken\" \"q\") wiq) #f 0.001)\n    (check-within (candidate (list \"olynt\" \"xf\") ox) #t 0.001)\n    (check-within (candidate (list \"ir\" \"wzhmxee\" \"kjfwful\") iwn) #f 0.001)\n    (check-within (candidate (list \"ixo\" \"wigba\" \"raaphui\") dwr) #f 0.001)\n    (check-within (candidate (list \"opup\" \"eme\") oe) #t 0.001)\n    (check-within (candidate (list \"kmmoq\" \"aoh\" \"hznkpurdh\") kar) #f 0.001)\n    (check-within (candidate (list \"ottxwi\" \"akpixfvbel\") oa) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2978_checkStrings", "language": "rkt", "prompt": "#lang racket\n;; You are given two strings s1 and s2, both of length n, consisting of lowercase English letters.\n;; You can apply the following operation on any of the two strings any number of times:\n;;  * Choose any two indices i and j such that i < j and the difference j - i is even, then swap the two characters at those indices in the string.\n;; Return true if you can make the strings s1 and s2 equal, and\u00a0false otherwise.\n;; Example 1:\n;; Input: s1 = \"abcdba\", s2 = \"cabdab\"\n;; Output: true\n;; Explanation: We can apply the following operations on s1:\n;; - Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\".\n;; - Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\".\n;; - Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2.\n;; Example 2:\n;; Input: s1 = \"abe\", s2 = \"bea\"\n;; Output: false\n;; Explanation: It is not possible to make the two strings equal.\n;; Constraints:\n;;  * n == s1.length == s2.length\n;;  * 1 <= n <= 105\n;;  * s1 and s2 consist only of lowercase English letters.\n(define (checkStrings s1 s2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2978_checkStrings.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate checkStrings))\n    (check-within (candidate abe bea) #f 0.001)\n    (check-within (candidate abcdba cabdab) #t 0.001)\n    (check-within (candidate ublnlasppynwgx ganplbuylnswpx) #t 0.001)\n    (check-within (candidate jghn jghn) #t 0.001)\n    (check-within (candidate pqtsprqmvi qrvqpitmps) #t 0.001)\n    (check-within (candidate aavizsxpqhxztrwi zvisqatzpaxhixwr) #f 0.001)\n    (check-within (candidate slmqqdbrwyvm qyldmmwsrqvb) #f 0.001)\n    (check-within (candidate shvqocguj vqsghujco) #f 0.001)\n    (check-within (candidate ktjpralqanofuuqsyal qjlornpasktfuyluaqa) #f 0.001)\n    (check-within (candidate mgflranpdjdkrh fpcgobmkdxbzyl) #f 0.001)\n    (check-within (candidate usvpwcehhvlg ehuvvshcwplg) #t 0.001)\n    (check-within (candidate jh fy) #f 0.001)\n    (check-within (candidate kfqofkvsoiiirznw hosthwbinxrsikkf) #f 0.001)\n    (check-within (candidate ppmfd pfdpm) #t 0.001)\n    (check-within (candidate ntuuwwh jyjwmdf) #f 0.001)\n    (check-within (candidate lcgcm brdxe) #f 0.001)\n    (check-within (candidate hjswnccgwjcapko acwjnjoscchgwpk) #f 0.001)\n    (check-within (candidate epjtzubboiallzd dboilpzzjteualb) #t 0.001)\n    (check-within (candidate c c) #t 0.001)\n    (check-within (candidate oziiqbotydegrm ytizriobogqmed) #t 0.001)\n    (check-within (candidate ztmuzn muztzn) #t 0.001)\n    (check-within (candidate jkzcqlh hkqczlj) #t 0.001)\n    (check-within (candidate qnh cmq) #f 0.001)\n    (check-within (candidate azagmtvhske mkazstvhage) #t 0.001)\n    (check-within (candidate jitb zqbg) #f 0.001)\n    (check-within (candidate tgznpamgczyvqjzvp mpyzvzzjvaqntgpgc) #f 0.001)\n    (check-within (candidate tcl lct) #t 0.001)\n    (check-within (candidate datuhdkoqe hetddokuqa) #t 0.001)\n    (check-within (candidate ztnpdilyrxz yxzitnrdlzp) #f 0.001)\n    (check-within (candidate vx zv) #f 0.001)\n    (check-within (candidate tpfcyceq fceqtpyc) #t 0.001)\n    (check-within (candidate rcugebinbszkhy zkebryhcbginus) #t 0.001)\n    (check-within (candidate ryykp rkpyy) #t 0.001)\n    (check-within (candidate lpyfmysemgoxgawwr wfoyspygralemxgwm) #t 0.001)\n    (check-within (candidate bfylavpyffcnj cljfbfyvpnayf) #t 0.001)\n    (check-within (candidate chhbmikpp hpcimbkhp) #t 0.001)\n    (check-within (candidate nateujd jeutnad) #f 0.001)\n    (check-within (candidate sxrjofoedghtplnex sgdeolnepthfojrxx) #t 0.001)\n    (check-within (candidate ajvfujrczdciilihi jcriaviuiflicdhzj) #f 0.001)\n    (check-within (candidate gajpuahzcexdunltldh xxatubgvqzmxjvzcxah) #f 0.001)\n    (check-within (candidate hnisnfvikgrhkfoe hgkivsifrekfonnh) #t 0.001)\n    (check-within (candidate fvfsxftpuemgpnkzz mgknxpuztffvzepsf) #t 0.001)\n    (check-within (candidate zrwzpibwp pwpiwzbrz) #t 0.001)\n    (check-within (candidate zoqpcssnhugxffcptsj chgospjssfxnfpcuqzt) #f 0.001)\n    (check-within (candidate ldpjhj jdlpjh) #f 0.001)\n    (check-within (candidate zodbh pqdpy) #f 0.001)\n    (check-within (candidate mdcvitezgqur mvigcqrdeztu) #f 0.001)\n    (check-within (candidate rdyau dyrau) #f 0.001)\n    (check-within (candidate pyymcw ptlqxp) #f 0.001)\n    (check-within (candidate ebicv vibce) #f 0.001)\n    (check-within (candidate xkzknvrbvajwbj rnkwzbvvxkjbja) #f 0.001)\n    (check-within (candidate zoxpiqxvnk xvkpxinqoz) #f 0.001)\n    (check-within (candidate obhmqltgmoszljeyh ogmmlbhoeysjtlhzq) #t 0.001)\n    (check-within (candidate wfsdirrheuglhfkbjk wfsuhhglifkrebrdjk) #t 0.001)\n    (check-within (candidate shn hsn) #f 0.001)\n    (check-within (candidate xdicugry igucxdry) #t 0.001)\n    (check-within (candidate bkfmkrbybim brbimkkmbyf) #t 0.001)\n    (check-within (candidate dwowyfgreakdvfi yfiddfvwerkaowg) #t 0.001)\n    (check-within (candidate bdywnvbgmum guymbwdbnmv) #f 0.001)\n    (check-within (candidate tmujoqerfvupnyy uvortyfmuqypnje) #t 0.001)\n    (check-within (candidate hggckwudke ylkgulkehd) #f 0.001)\n    (check-within (candidate zrppcm okurkg) #f 0.001)\n    (check-within (candidate ennl ennl) #t 0.001)\n    (check-within (candidate spznlxodciidngyvvkl lnvnzdixivoglydscpk) #f 0.001)\n    (check-within (candidate nxezcoklmdbekyjp cdkenlkyeomxjzbp) #t 0.001)\n    (check-within (candidate yui iyu) #f 0.001)\n    (check-within (candidate zphe hpze) #t 0.001)\n    (check-within (candidate oyjngnej oynjjeng) #f 0.001)\n    (check-within (candidate kvwdssgl wskxsdgv) #f 0.001)\n    (check-within (candidate ozzfbhzkowpcv vzpwzkbhzfoco) #t 0.001)\n    (check-within (candidate h h) #t 0.001)\n    (check-within (candidate mqkdv kqvdm) #t 0.001)\n    (check-within (candidate hphfqesitgprud tpisuhqhfgdrpe) #f 0.001)\n    (check-within (candidate yrbto orytb) #t 0.001)\n    (check-within (candidate lvahby ilbyaz) #f 0.001)\n    (check-within (candidate bbaiabphflgyfo bhglybaoaipbff) #f 0.001)\n    (check-within (candidate uielps uselpi) #t 0.001)\n    (check-within (candidate ftyhgkgwg gtfhgwgky) #t 0.001)\n    (check-within (candidate mzrfxrwlliuoi llrouzirwimfx) #t 0.001)\n    (check-within (candidate drofbzocwolcznzfi wzocdnirzfbclozfo) #t 0.001)\n    (check-within (candidate popefwbkepdxy pxbwpeekfoypd) #t 0.001)\n    (check-within (candidate swgzqluzcvhskegvdry seuwkvclqzyvdsgrgzh) #t 0.001)\n    (check-within (candidate hik ihk) #f 0.001)\n    (check-within (candidate zq zq) #t 0.001)\n    (check-within (candidate igdzd phcyi) #f 0.001)\n    (check-within (candidate cazutcxkhcklpuogt ockghuukctcztxapl) #f 0.001)\n    (check-within (candidate bx bx) #t 0.001)\n    (check-within (candidate bkujvjwgjzxdzuw zgjubjwkwzxdujv) #t 0.001)\n    (check-within (candidate ujpudt dtujpu) #t 0.001)\n    (check-within (candidate hkalpd hlpkad) #t 0.001)\n    (check-within (candidate kbcpjzadbv dsgzcapzao) #f 0.001)\n    (check-within (candidate rubbbf rbbubf) #t 0.001)\n    (check-within (candidate ybudbyrlmiddsxks nuyyabyisyptvdnb) #f 0.001)\n    (check-within (candidate wiijtcgqez ctqzwjgiei) #f 0.001)\n    (check-within (candidate bgalfvefwmhodexazkd fbgmdfholzakvxaweed) #f 0.001)\n    (check-within (candidate oxlphorosradotpshnt hdotpaoorosrlhtsxpn) #f 0.001)\n    (check-within (candidate mnvnzakjaymsxhojq oaxjoeanksmyqmglm) #f 0.001)\n    (check-within (candidate hsm hsm) #t 0.001)\n    (check-within (candidate qgloiyhewunm qehuwonmiylg) #t 0.001)\n    (check-within (candidate drdu dudr) #t 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2979_maximizeTheProfit", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.\n;; Additionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.\n;; As a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.\n;; Return the maximum amount of gold you can earn.\n;; Note that different buyers can't buy the same house, and some houses may remain unsold.\n;; Example 1:\n;; Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\n;; Output: 3\n;; Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\n;; We sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\n;; It can be proven that 3 is the maximum amount of gold we can achieve.\n;; Example 2:\n;; Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\n;; Output: 10\n;; Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\n;; We sell houses in the range [0,2] to 2nd buyer for 10 golds.\n;; It can be proven that 10 is the maximum amount of gold we can achieve.\n;; Constraints:\n;;  * 1 <= n <= 105\n;;  * 1 <= offers.length <= 105\n;;  * offers[i].length == 3\n;;  * 0 <= starti <= endi <= n - 1\n;;  * 1 <= goldi <= 103\n(define (maximizeTheProfit n offers)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2979_maximizeTheProfit.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximizeTheProfit))\n    (check-within (candidate 5 (list (list 0 0 1) (list 0 2 2) (list 1 3 2))) 3 0.001)\n    (check-within (candidate 5 (list (list 0 0 1) (list 0 2 10) (list 1 3 2))) 10 0.001)\n    (check-within (candidate 4 (list (list 1 3 10) (list 1 3 3) (list 0 0 1) (list 0 0 7))) 17 0.001)\n    (check-within (candidate 4 (list (list 0 0 6) (list 1 2 8) (list 0 3 7) (list 2 2 5) (list 0 1 5) (list 2 3 2) (list 0 2 8) (list 2 3 10) (list 0 3 2))) 16 0.001)\n    (check-within (candidate 15 (list (list 5 5 10) (list 2 6 6) (list 8 11 5) (list 7 11 9) (list 2 4 1) (list 3 8 5) (list 0 6 9) (list 0 10 5) (list 5 10 8) (list 4 5 1))) 20 0.001)\n    (check-within (candidate 10 (list (list 1 6 1) (list 0 1 10) (list 3 6 2) (list 0 5 10) (list 0 0 3) (list 0 0 4) (list 1 1 4) (list 0 6 7) (list 4 4 1))) 12 0.001)\n    (check-within (candidate 11 (list (list 7 8 6) (list 6 6 4) (list 4 6 9) (list 6 7 4) (list 5 5 8) (list 1 5 9) (list 7 7 8) (list 1 2 5) (list 0 2 9) (list 1 3 8) (list 0 2 7) (list 2 2 8))) 29 0.001)\n    (check-within (candidate 3 (list (list 0 0 6) (list 0 1 8) (list 1 2 1) (list 0 1 4) (list 0 1 2) (list 0 0 7) (list 0 0 6) (list 0 0 5))) 8 0.001)\n    (check-within (candidate 4 (list (list 0 1 9) (list 1 1 4))) 9 0.001)\n    (check-within (candidate 11 (list (list 1 10 6) (list 1 10 5) (list 0 2 7) (list 0 0 8) (list 8 10 7))) 15 0.001)\n    (check-within (candidate 3 (list (list 0 1 8) (list 1 1 6) (list 2 2 7) (list 0 2 6) (list 0 2 2) (list 0 0 6) (list 0 0 9) (list 0 1 4))) 22 0.001)\n    (check-within (candidate 6 (list (list 0 2 4))) 4 0.001)\n    (check-within (candidate 10 (list (list 5 9 3) (list 1 5 8) (list 0 0 6) (list 5 8 10))) 16 0.001)\n    (check-within (candidate 5 (list (list 1 1 3) (list 1 1 3) (list 0 0 8) (list 1 3 8) (list 0 2 1) (list 3 3 9) (list 0 0 7) (list 0 2 3) (list 0 0 5) (list 0 3 10) (list 1 3 10) (list 4 4 6) (list 0 1 1) (list 2 4 10))) 26 0.001)\n    (check-within (candidate 13 (list (list 2 2 5) (list 1 8 10) (list 2 3 3))) 10 0.001)\n    (check-within (candidate 2 (list (list 1 1 8) (list 1 1 8) (list 1 1 10) (list 1 1 7) (list 0 0 7) (list 0 0 3) (list 0 1 8) (list 0 0 4) (list 0 0 4) (list 0 0 7) (list 0 0 10) (list 0 1 4) (list 1 1 1) (list 0 1 5))) 20 0.001)\n    (check-within (candidate 3 (list (list 0 1 7) (list 1 1 3) (list 0 0 2) (list 1 1 6) (list 0 0 10) (list 1 1 7) (list 0 2 3) (list 0 1 2) (list 0 0 7))) 17 0.001)\n    (check-within (candidate 5 (list (list 0 0 5) (list 1 3 9) (list 0 2 2) (list 1 1 6) (list 1 2 10) (list 0 2 10) (list 1 1 3))) 15 0.001)\n    (check-within (candidate 10 (list (list 0 1 9) (list 5 6 10) (list 1 3 8) (list 1 9 7) (list 7 8 1) (list 2 7 1) (list 0 8 7) (list 1 6 6) (list 1 4 4) (list 0 5 4) (list 0 0 3) (list 0 8 6))) 22 0.001)\n    (check-within (candidate 4 (list (list 0 0 1) (list 0 0 10) (list 0 2 1) (list 0 0 6) (list 0 3 10) (list 0 1 5) (list 1 2 10) (list 0 0 2) (list 3 3 1) (list 0 0 9) (list 0 1 2) (list 0 0 4) (list 1 3 5) (list 1 1 1))) 21 0.001)\n    (check-within (candidate 9 (list (list 0 3 10) (list 5 6 5) (list 1 5 2) (list 1 8 9) (list 1 1 9) (list 1 7 1) (list 3 7 9) (list 2 3 2) (list 4 6 1) (list 4 5 7) (list 2 2 2) (list 6 8 10) (list 1 3 10) (list 1 4 10))) 28 0.001)\n    (check-within (candidate 10 (list (list 0 2 2))) 2 0.001)\n    (check-within (candidate 10 (list (list 2 7 4) (list 2 4 9) (list 1 8 7) (list 0 4 3))) 9 0.001)\n    (check-within (candidate 6 (list (list 0 1 4) (list 1 2 4) (list 0 1 10) (list 1 2 4) (list 2 2 5) (list 1 1 8) (list 2 3 2) (list 4 4 4) (list 0 0 3))) 20 0.001)\n    (check-within (candidate 1 (list (list 0 0 8) (list 0 0 3) (list 0 0 8) (list 0 0 8) (list 0 0 5) (list 0 0 9) (list 0 0 6) (list 0 0 1) (list 0 0 8) (list 0 0 1) (list 0 0 5) (list 0 0 9) (list 0 0 2))) 9 0.001)\n    (check-within (candidate 15 (list (list 8 10 5) (list 4 12 6) (list 6 11 7) (list 8 11 3) (list 7 13 1) (list 7 7 8) (list 8 10 5) (list 0 11 3) (list 1 1 9) (list 2 11 6) (list 3 11 8))) 22 0.001)\n    (check-within (candidate 10 (list (list 5 6 9) (list 0 2 9))) 18 0.001)\n    (check-within (candidate 11 (list (list 7 9 5) (list 0 0 8) (list 6 6 3) (list 4 9 1) (list 3 7 5) (list 0 4 7))) 16 0.001)\n    (check-within (candidate 7 (list (list 0 2 9) (list 2 4 8) (list 0 3 6) (list 4 4 10) (list 2 2 2) (list 1 1 10) (list 0 0 8) (list 4 4 9) (list 4 4 4) (list 3 3 5) (list 2 5 2) (list 0 3 6) (list 3 4 5))) 35 0.001)\n    (check-within (candidate 9 (list (list 3 8 1) (list 0 6 7) (list 0 3 6) (list 1 6 2) (list 2 3 10) (list 3 3 2) (list 1 2 2) (list 1 3 9) (list 0 0 7) (list 1 2 9) (list 5 5 4) (list 5 6 6) (list 1 5 5) (list 0 1 2) (list 0 6 1))) 24 0.001)\n    (check-within (candidate 8 (list (list 0 0 7) (list 0 1 8) (list 1 1 1) (list 2 2 7) (list 2 3 1))) 15 0.001)\n    (check-within (candidate 8 (list (list 6 6 5) (list 0 1 7) (list 1 7 10))) 12 0.001)\n    (check-within (candidate 13 (list (list 0 9 5) (list 6 8 7) (list 0 0 3) (list 4 4 2) (list 1 9 7) (list 9 12 9) (list 1 2 9) (list 1 1 10) (list 3 3 3) (list 0 3 3) (list 4 8 5) (list 0 0 9) (list 7 10 7))) 40 0.001)\n    (check-within (candidate 11 (list (list 2 5 1))) 1 0.001)\n    (check-within (candidate 3 (list (list 0 0 9) (list 0 2 6) (list 1 1 1) (list 1 2 10) (list 0 0 10) (list 0 0 4) (list 0 2 7) (list 0 0 1) (list 0 0 9) (list 2 2 5))) 20 0.001)\n    (check-within (candidate 5 (list (list 1 1 3) (list 1 2 1) (list 0 2 3) (list 1 1 10) (list 3 3 3) (list 2 4 3) (list 0 3 5) (list 4 4 2) (list 2 3 10) (list 3 3 8) (list 3 3 9) (list 0 2 8) (list 0 2 2) (list 1 1 3) (list 0 0 8))) 30 0.001)\n    (check-within (candidate 13 (list (list 6 9 3) (list 6 9 6) (list 5 12 10) (list 11 12 4) (list 4 4 2) (list 0 7 8) (list 2 6 6) (list 6 6 4))) 12 0.001)\n    (check-within (candidate 3 (list (list 0 2 9) (list 1 1 8) (list 0 1 1) (list 2 2 4) (list 2 2 1) (list 0 0 4) (list 1 1 9) (list 0 0 6) (list 0 1 7))) 19 0.001)\n    (check-within (candidate 3 (list (list 1 2 8) (list 0 0 1) (list 0 1 1) (list 0 0 3) (list 1 2 2) (list 0 0 7) (list 0 0 10) (list 1 1 6))) 18 0.001)\n    (check-within (candidate 2 (list (list 0 0 3) (list 1 1 10) (list 0 1 6))) 13 0.001)\n    (check-within (candidate 3 (list (list 0 0 9) (list 1 1 1) (list 0 2 7) (list 1 1 7) (list 1 2 6) (list 0 0 8) (list 0 2 3) (list 1 2 10) (list 2 2 3) (list 2 2 5))) 21 0.001)\n    (check-within (candidate 5 (list (list 2 3 2) (list 0 1 7) (list 0 1 1) (list 0 0 9) (list 2 4 1) (list 3 4 5) (list 1 3 10) (list 0 0 8))) 19 0.001)\n    (check-within (candidate 15 (list (list 4 6 9) (list 4 10 9) (list 3 5 4) (list 0 2 6) (list 3 13 7) (list 1 11 6) (list 1 8 4) (list 4 12 4) (list 3 8 8) (list 13 13 7) (list 4 12 3))) 22 0.001)\n    (check-within (candidate 8 (list (list 1 5 9) (list 0 4 9) (list 0 0 3) (list 1 2 9) (list 0 0 10) (list 4 7 9) (list 7 7 2) (list 0 2 6) (list 1 1 5) (list 1 4 3) (list 2 4 8) (list 0 1 1) (list 2 3 1))) 28 0.001)\n    (check-within (candidate 4 (list (list 0 2 7) (list 2 3 9) (list 2 3 2) (list 1 2 1) (list 1 2 9) (list 0 3 7) (list 0 2 9) (list 1 2 8) (list 0 3 10) (list 0 3 8) (list 0 0 5) (list 2 2 6))) 14 0.001)\n    (check-within (candidate 12 (list (list 0 0 4) (list 5 8 2) (list 2 2 10) (list 3 5 7) (list 1 2 1) (list 5 7 8) (list 8 11 3))) 25 0.001)\n    (check-within (candidate 2 (list (list 0 0 7) (list 0 1 3) (list 0 0 8))) 8 0.001)\n    (check-within (candidate 4 (list (list 2 3 8) (list 0 1 1) (list 3 3 2))) 9 0.001)\n    (check-within (candidate 14 (list (list 2 12 4) (list 7 11 4) (list 4 4 5) (list 0 1 6) (list 3 4 1) (list 4 11 9) (list 10 12 7) (list 7 12 1) (list 11 11 1) (list 0 0 5) (list 12 12 8) (list 6 7 6))) 26 0.001)\n    (check-within (candidate 10 (list (list 1 4 6) (list 7 9 9) (list 1 4 5) (list 8 8 2) (list 4 7 1) (list 6 8 8) (list 2 3 1) (list 0 1 4))) 15 0.001)\n    (check-within (candidate 7 (list (list 2 5 5) (list 1 2 9) (list 1 3 7) (list 2 4 3) (list 0 0 6) (list 0 0 1) (list 4 4 9) (list 1 5 7) (list 2 2 10))) 25 0.001)\n    (check-within (candidate 11 (list (list 0 4 10))) 10 0.001)\n    (check-within (candidate 3 (list (list 0 1 10) (list 1 2 2) (list 0 2 6) (list 0 0 1) (list 0 0 3) (list 0 1 8) (list 0 0 2) (list 2 2 8) (list 0 0 3) (list 2 2 3) (list 1 2 6) (list 0 0 4) (list 1 2 5))) 18 0.001)\n    (check-within (candidate 14 (list (list 11 11 4) (list 1 11 10) (list 11 12 2) (list 7 8 2))) 10 0.001)\n    (check-within (candidate 2 (list (list 0 0 1) (list 0 0 1) (list 1 1 9) (list 0 0 1) (list 1 1 2) (list 0 1 10))) 10 0.001)\n    (check-within (candidate 6 (list (list 0 5 6) (list 1 2 10) (list 0 2 4) (list 2 4 5) (list 4 4 6) (list 2 2 2) (list 0 0 7) (list 2 5 9) (list 2 2 3))) 23 0.001)\n    (check-within (candidate 6 (list (list 0 0 7) (list 2 5 5))) 12 0.001)\n    (check-within (candidate 10 (list (list 2 3 2) (list 0 1 6) (list 0 0 2) (list 1 1 5) (list 3 3 8) (list 2 8 7) (list 1 7 8) (list 0 1 4) (list 7 7 8) (list 1 3 7) (list 5 5 10) (list 2 6 6) (list 0 0 4) (list 5 7 4) (list 1 9 4))) 35 0.001)\n    (check-within (candidate 10 (list (list 0 2 4) (list 1 4 7) (list 0 1 10) (list 0 5 1))) 10 0.001)\n    (check-within (candidate 12 (list (list 0 5 6) (list 4 10 9) (list 7 11 10) (list 10 11 1) (list 6 10 1) (list 2 2 6))) 16 0.001)\n    (check-within (candidate 11 (list (list 3 7 8) (list 2 7 10) (list 3 9 3))) 10 0.001)\n    (check-within (candidate 4 (list (list 0 0 3) (list 0 2 6) (list 0 0 1) (list 1 1 2) (list 0 2 8) (list 1 1 3) (list 1 3 8) (list 1 1 10) (list 1 2 7) (list 1 1 8) (list 0 0 9))) 19 0.001)\n    (check-within (candidate 1 (list (list 0 0 9))) 9 0.001)\n    (check-within (candidate 3 (list (list 0 1 5) (list 0 0 5) (list 0 0 6) (list 0 1 6) (list 0 2 10) (list 1 2 6) (list 0 0 9) (list 1 2 9))) 18 0.001)\n    (check-within (candidate 4 (list (list 0 0 2) (list 2 3 9) (list 0 1 8) (list 0 0 9) (list 0 0 1) (list 3 3 9) (list 1 2 1) (list 1 3 5) (list 0 1 4) (list 0 1 4))) 19 0.001)\n    (check-within (candidate 3 (list (list 0 0 7) (list 2 2 1) (list 1 1 3) (list 0 0 3) (list 1 1 7) (list 0 1 5) (list 0 2 3) (list 1 1 5) (list 0 1 10) (list 1 1 5) (list 1 1 6) (list 0 1 3) (list 0 0 8) (list 1 2 7) (list 1 1 4))) 16 0.001)\n    (check-within (candidate 14 (list (list 5 7 2) (list 1 5 3) (list 11 13 2) (list 12 12 5) (list 4 5 6) (list 5 10 2) (list 4 10 8) (list 1 1 4) (list 4 4 2) (list 3 7 9) (list 5 10 1) (list 0 3 2))) 18 0.001)\n    (check-within (candidate 11 (list (list 1 1 5) (list 4 4 9) (list 0 0 1) (list 1 3 3) (list 3 7 4) (list 3 9 6) (list 7 10 2) (list 3 7 5) (list 4 4 8) (list 7 8 10) (list 1 3 7) (list 1 4 5) (list 0 0 10))) 36 0.001)\n    (check-within (candidate 13 (list (list 4 9 9) (list 1 9 8) (list 1 9 8) (list 0 0 8) (list 8 11 3) (list 2 3 6) (list 9 9 10) (list 5 12 1) (list 4 6 4))) 28 0.001)\n    (check-within (candidate 5 (list (list 2 2 7) (list 0 2 10) (list 2 3 10))) 10 0.001)\n    (check-within (candidate 10 (list (list 0 4 6) (list 1 1 1) (list 0 5 1) (list 1 6 3) (list 8 9 1) (list 2 3 7) (list 2 3 10) (list 1 2 1) (list 0 0 8) (list 3 5 5) (list 0 0 10))) 22 0.001)\n    (check-within (candidate 4 (list (list 0 1 1) (list 0 0 9) (list 1 1 8) (list 3 3 1) (list 1 1 5) (list 0 0 9) (list 0 1 9) (list 0 0 7) (list 2 2 2) (list 2 3 5) (list 1 1 10) (list 1 2 8))) 24 0.001)\n    (check-within (candidate 7 (list (list 0 1 9) (list 0 1 4) (list 0 0 3) (list 0 0 1) (list 1 6 5) (list 4 6 9) (list 4 5 7) (list 0 0 3) (list 1 5 9) (list 0 2 2))) 18 0.001)\n    (check-within (candidate 12 (list (list 8 8 6) (list 8 8 6) (list 1 10 7) (list 0 0 3) (list 9 10 7) (list 1 7 2) (list 1 1 1) (list 2 3 6) (list 0 11 1) (list 1 8 5) (list 1 5 7) (list 1 2 4) (list 9 9 5) (list 0 3 1))) 23 0.001)\n    (check-within (candidate 15 (list (list 5 6 3) (list 2 2 7) (list 0 0 5) (list 1 7 10) (list 11 14 5) (list 13 14 1) (list 2 12 1) (list 0 4 5) (list 0 6 2) (list 6 9 10) (list 3 5 2) (list 0 1 1) (list 1 14 1) (list 1 6 1))) 29 0.001)\n    (check-within (candidate 7 (list (list 1 1 5) (list 1 1 4) (list 0 0 9) (list 1 1 6) (list 0 6 4) (list 2 6 3) (list 2 5 9) (list 0 6 3) (list 0 2 1) (list 1 1 6) (list 4 5 5))) 24 0.001)\n    (check-within (candidate 1 (list (list 0 0 5) (list 0 0 3) (list 0 0 4) (list 0 0 8) (list 0 0 10) (list 0 0 6) (list 0 0 7) (list 0 0 7) (list 0 0 7) (list 0 0 3) (list 0 0 4) (list 0 0 5))) 10 0.001)\n    (check-within (candidate 7 (list (list 2 2 3) (list 2 6 4) (list 4 6 5) (list 0 0 4) (list 1 1 4) (list 2 3 1) (list 2 4 3) (list 0 2 8) (list 1 3 10) (list 1 3 2) (list 1 6 7) (list 0 6 9) (list 2 2 2) (list 1 1 9) (list 4 4 2))) 21 0.001)\n    (check-within (candidate 12 (list (list 0 0 7) (list 0 2 3) (list 0 7 2) (list 2 3 1) (list 2 11 6) (list 2 10 2) (list 1 3 6) (list 4 7 9) (list 7 9 3) (list 4 6 1) (list 5 6 8) (list 0 2 4) (list 0 0 3) (list 5 5 9) (list 2 5 3))) 25 0.001)\n    (check-within (candidate 9 (list (list 1 8 4) (list 5 6 5) (list 0 2 6) (list 4 5 4))) 11 0.001)\n    (check-within (candidate 8 (list (list 0 4 6) (list 2 3 6) (list 2 5 9) (list 2 6 7) (list 6 6 5) (list 4 4 4) (list 1 1 5) (list 2 5 7))) 20 0.001)\n    (check-within (candidate 13 (list (list 0 6 10))) 10 0.001)\n    (check-within (candidate 6 (list (list 0 1 2) (list 0 0 9) (list 3 3 10) (list 0 3 7) (list 0 0 2) (list 0 0 3) (list 2 2 2) (list 2 3 2) (list 5 5 6) (list 0 1 2) (list 0 5 2))) 27 0.001)\n    (check-within (candidate 14 (list (list 3 12 7) (list 1 3 2) (list 4 11 3) (list 0 1 7) (list 1 5 2) (list 1 1 4))) 14 0.001)\n    (check-within (candidate 14 (list (list 0 0 3) (list 0 1 3) (list 1 11 3) (list 6 7 6) (list 7 7 5) (list 1 2 8) (list 7 10 9))) 20 0.001)\n    (check-within (candidate 13 (list (list 0 12 7) (list 2 2 4) (list 2 2 8) (list 3 3 2) (list 1 11 5) (list 1 7 2))) 10 0.001)\n    (check-within (candidate 1 (list (list 0 0 2) (list 0 0 8) (list 0 0 1))) 8 0.001)\n    (check-within (candidate 1 (list (list 0 0 1) (list 0 0 4) (list 0 0 7) (list 0 0 2) (list 0 0 5) (list 0 0 1) (list 0 0 4) (list 0 0 2) (list 0 0 6) (list 0 0 6) (list 0 0 3) (list 0 0 3))) 7 0.001)\n    (check-within (candidate 1 (list (list 0 0 6) (list 0 0 6) (list 0 0 3) (list 0 0 6) (list 0 0 6) (list 0 0 10) (list 0 0 1) (list 0 0 2))) 10 0.001)\n    (check-within (candidate 9 (list (list 4 6 7) (list 1 3 10))) 17 0.001)\n    (check-within (candidate 13 (list (list 2 6 3) (list 1 12 6) (list 2 11 3) (list 7 7 2) (list 5 12 4) (list 0 1 2) (list 0 1 8) (list 1 1 3) (list 6 6 4) (list 8 9 7) (list 8 8 2) (list 2 2 2) (list 0 0 9) (list 9 11 7) (list 8 9 7))) 29 0.001)\n    (check-within (candidate 8 (list (list 0 1 8) (list 0 0 6) (list 5 5 9))) 17 0.001)\n    (check-within (candidate 1 (list (list 0 0 10) (list 0 0 3) (list 0 0 8) (list 0 0 9) (list 0 0 1) (list 0 0 8) (list 0 0 2) (list 0 0 7) (list 0 0 10) (list 0 0 8) (list 0 0 5) (list 0 0 3) (list 0 0 2) (list 0 0 4))) 10 0.001)\n    (check-within (candidate 9 (list (list 0 2 6) (list 1 3 5) (list 1 1 5) (list 2 3 10) (list 4 8 4) (list 5 8 5) (list 6 6 10))) 25 0.001)\n    (check-within (candidate 6 (list (list 0 0 7))) 7 0.001)\n    (check-within (candidate 8 (list (list 1 1 5) (list 1 2 9) (list 1 2 6) (list 0 3 6) (list 1 1 10) (list 3 4 1) (list 3 5 3) (list 1 5 8) (list 0 2 6) (list 5 7 9))) 20 0.001)\n    (check-within (candidate 14 (list (list 3 4 4) (list 6 8 1) (list 0 4 1))) 5 0.001)\n    (check-within (candidate 11 (list (list 4 4 2) (list 1 2 7) (list 2 8 10) (list 1 1 3) (list 8 10 4) (list 1 2 1) (list 4 6 10))) 21 0.001)\n    (check-within (candidate 11 (list (list 1 8 1) (list 1 5 5) (list 0 1 3) (list 10 10 10) (list 1 1 8) (list 1 2 1) (list 2 3 10) (list 2 10 10) (list 2 2 9) (list 0 9 4))) 28 0.001)\n    (check-within (candidate 6 (list (list 2 2 6) (list 0 1 2) (list 2 2 2))) 8 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2998_countSymmetricIntegers", "language": "rkt", "prompt": "#lang racket\n;; You are given two positive integers low and high.\n;; An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.\n;; Return the number of symmetric integers in the range [low, high].\n;; Example 1:\n;; Input: low = 1, high = 100\n;; Output: 9\n;; Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.\n;; Example 2:\n;; Input: low = 1200, high = 1230\n;; Output: 4\n;; Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.\n;; Constraints:\n;;  * 1 <= low <= high <= 104\n(define (countSymmetricIntegers low high)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2998_countSymmetricIntegers.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countSymmetricIntegers))\n    (check-within (candidate 1 100) 9 0.001)\n    (check-within (candidate 1200 1230) 4 0.001)\n    (check-within (candidate 1 1) 0 0.001)\n    (check-within (candidate 1 2) 0 0.001)\n    (check-within (candidate 1 3) 0 0.001)\n    (check-within (candidate 1 4) 0 0.001)\n    (check-within (candidate 1 5) 0 0.001)\n    (check-within (candidate 1 6) 0 0.001)\n    (check-within (candidate 1 7) 0 0.001)\n    (check-within (candidate 1 8) 0 0.001)\n    (check-within (candidate 1 9) 0 0.001)\n    (check-within (candidate 1 10) 0 0.001)\n    (check-within (candidate 1 11) 1 0.001)\n    (check-within (candidate 1 12) 1 0.001)\n    (check-within (candidate 1 13) 1 0.001)\n    (check-within (candidate 1 14) 1 0.001)\n    (check-within (candidate 1 15) 1 0.001)\n    (check-within (candidate 1 16) 1 0.001)\n    (check-within (candidate 1 17) 1 0.001)\n    (check-within (candidate 1 18) 1 0.001)\n    (check-within (candidate 1 19) 1 0.001)\n    (check-within (candidate 1 20) 1 0.001)\n    (check-within (candidate 1 21) 1 0.001)\n    (check-within (candidate 1 22) 2 0.001)\n    (check-within (candidate 1 23) 2 0.001)\n    (check-within (candidate 1 24) 2 0.001)\n    (check-within (candidate 1 25) 2 0.001)\n    (check-within (candidate 1 26) 2 0.001)\n    (check-within (candidate 1 27) 2 0.001)\n    (check-within (candidate 1 28) 2 0.001)\n    (check-within (candidate 1 29) 2 0.001)\n    (check-within (candidate 1 30) 2 0.001)\n    (check-within (candidate 1 31) 2 0.001)\n    (check-within (candidate 1 32) 2 0.001)\n    (check-within (candidate 1 33) 3 0.001)\n    (check-within (candidate 1 34) 3 0.001)\n    (check-within (candidate 1 35) 3 0.001)\n    (check-within (candidate 1 36) 3 0.001)\n    (check-within (candidate 1 37) 3 0.001)\n    (check-within (candidate 1 38) 3 0.001)\n    (check-within (candidate 1 39) 3 0.001)\n    (check-within (candidate 1 40) 3 0.001)\n    (check-within (candidate 1 41) 3 0.001)\n    (check-within (candidate 1 42) 3 0.001)\n    (check-within (candidate 1 43) 3 0.001)\n    (check-within (candidate 1 44) 4 0.001)\n    (check-within (candidate 1 45) 4 0.001)\n    (check-within (candidate 1 46) 4 0.001)\n    (check-within (candidate 1 47) 4 0.001)\n    (check-within (candidate 1 48) 4 0.001)\n    (check-within (candidate 100 1782) 44 0.001)\n    (check-within (candidate 1 49) 4 0.001)\n    (check-within (candidate 1 50) 4 0.001)\n    (check-within (candidate 1 51) 4 0.001)\n    (check-within (candidate 1 52) 4 0.001)\n    (check-within (candidate 1 53) 4 0.001)\n    (check-within (candidate 1 54) 4 0.001)\n    (check-within (candidate 1 55) 5 0.001)\n    (check-within (candidate 1 56) 5 0.001)\n    (check-within (candidate 1 57) 5 0.001)\n    (check-within (candidate 1 58) 5 0.001)\n    (check-within (candidate 1 59) 5 0.001)\n    (check-within (candidate 1 60) 5 0.001)\n    (check-within (candidate 2 2) 0 0.001)\n    (check-within (candidate 2 3) 0 0.001)\n    (check-within (candidate 2 4) 0 0.001)\n    (check-within (candidate 2 5) 0 0.001)\n    (check-within (candidate 2 6) 0 0.001)\n    (check-within (candidate 2 7) 0 0.001)\n    (check-within (candidate 2 8) 0 0.001)\n    (check-within (candidate 2 9) 0 0.001)\n    (check-within (candidate 2 10) 0 0.001)\n    (check-within (candidate 2 11) 1 0.001)\n    (check-within (candidate 2 12) 1 0.001)\n    (check-within (candidate 2 13) 1 0.001)\n    (check-within (candidate 2 14) 1 0.001)\n    (check-within (candidate 2 15) 1 0.001)\n    (check-within (candidate 2 16) 1 0.001)\n    (check-within (candidate 2 17) 1 0.001)\n    (check-within (candidate 2 18) 1 0.001)\n    (check-within (candidate 2 19) 1 0.001)\n    (check-within (candidate 2 20) 1 0.001)\n    (check-within (candidate 2 21) 1 0.001)\n    (check-within (candidate 2 22) 2 0.001)\n    (check-within (candidate 2 23) 2 0.001)\n    (check-within (candidate 2 24) 2 0.001)\n    (check-within (candidate 2 25) 2 0.001)\n    (check-within (candidate 2 26) 2 0.001)\n    (check-within (candidate 2 27) 2 0.001)\n    (check-within (candidate 2 28) 2 0.001)\n    (check-within (candidate 2 29) 2 0.001)\n    (check-within (candidate 2 30) 2 0.001)\n    (check-within (candidate 2 31) 2 0.001)\n    (check-within (candidate 2 32) 2 0.001)\n    (check-within (candidate 2 33) 3 0.001)\n    (check-within (candidate 2 34) 3 0.001)\n    (check-within (candidate 2 35) 3 0.001)\n    (check-within (candidate 2 36) 3 0.001)\n    (check-within (candidate 2 37) 3 0.001)\n    (check-within (candidate 2 38) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_2999_canBeEqual", "language": "rkt", "prompt": "#lang racket\n;; You are given two strings s1 and s2, both of length 4, consisting of lowercase English letters.\n;; You can apply the following operation on any of the two strings any number of times:\n;;  * Choose any two indices i and j such that j - i = 2, then swap the two characters at those indices in the string.\n;; Return true if you can make the strings s1 and s2 equal, and false otherwise.\n;; Example 1:\n;; Input: s1 = \"abcd\", s2 = \"cdab\"\n;; Output: true\n;; Explanation: We can do the following operations on s1:\n;; - Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\".\n;; - Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2.\n;; Example 2:\n;; Input: s1 = \"abcd\", s2 = \"dacb\"\n;; Output: false\n;; Explanation: It is not possible to make the two strings equal.\n;; Constraints:\n;;  * s1.length == s2.length == 4\n;;  * s1 and s2 consist only of lowercase English letters.\n(define (canBeEqual s1 s2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_2999_canBeEqual.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate canBeEqual))\n    (check-within (candidate abcd cdab) #t 0.001)\n    (check-within (candidate abcd dacb) #f 0.001)\n    (check-within (candidate gudo ogdu) #f 0.001)\n    (check-within (candidate bnxw bwxn) #t 0.001)\n    (check-within (candidate zzon zozn) #f 0.001)\n    (check-within (candidate cmpr rmcp) #f 0.001)\n    (check-within (candidate qnde flsi) #f 0.001)\n    (check-within (candidate vofo oofv) #f 0.001)\n    (check-within (candidate xsvc vcxs) #t 0.001)\n    (check-within (candidate hvsz hzsv) #t 0.001)\n    (check-within (candidate ifjz jzfi) #f 0.001)\n    (check-within (candidate zrmq mrzq) #t 0.001)\n    (check-within (candidate hazw pfmp) #f 0.001)\n    (check-within (candidate kina kina) #t 0.001)\n    (check-within (candidate fymg famj) #f 0.001)\n    (check-within (candidate riti riti) #t 0.001)\n    (check-within (candidate goze gezo) #t 0.001)\n    (check-within (candidate seeo vfvm) #f 0.001)\n    (check-within (candidate ybyd himj) #f 0.001)\n    (check-within (candidate gcdm dmgc) #t 0.001)\n    (check-within (candidate kvne nekv) #t 0.001)\n    (check-within (candidate cbyo cbyo) #t 0.001)\n    (check-within (candidate fezu zufe) #t 0.001)\n    (check-within (candidate homs fhdu) #f 0.001)\n    (check-within (candidate zlek zlek) #t 0.001)\n    (check-within (candidate bxqt xbtq) #f 0.001)\n    (check-within (candidate waso wyjd) #f 0.001)\n    (check-within (candidate nibi seua) #f 0.001)\n    (check-within (candidate oynw sgxl) #f 0.001)\n    (check-within (candidate ehui uhei) #t 0.001)\n    (check-within (candidate vchn jfwr) #f 0.001)\n    (check-within (candidate zgmt zgmt) #t 0.001)\n    (check-within (candidate eobz boez) #t 0.001)\n    (check-within (candidate zpzg zzpg) #f 0.001)\n    (check-within (candidate bbfp fbbp) #t 0.001)\n    (check-within (candidate vxqp xpvq) #f 0.001)\n    (check-within (candidate ihtv ixji) #f 0.001)\n    (check-within (candidate ahsk aksh) #t 0.001)\n    (check-within (candidate zexw miva) #f 0.001)\n    (check-within (candidate iicq ihda) #f 0.001)\n    (check-within (candidate kunv ziac) #f 0.001)\n    (check-within (candidate gqzd gqzd) #t 0.001)\n    (check-within (candidate ppeb ebpp) #t 0.001)\n    (check-within (candidate uouc ucuo) #t 0.001)\n    (check-within (candidate laxa xala) #t 0.001)\n    (check-within (candidate rbwe wbre) #t 0.001)\n    (check-within (candidate mswt wsmt) #t 0.001)\n    (check-within (candidate yfyz deyv) #f 0.001)\n    (check-within (candidate jlai alji) #t 0.001)\n    (check-within (candidate uliu bsmu) #f 0.001)\n    (check-within (candidate bhag kuws) #f 0.001)\n    (check-within (candidate bvwr wrbv) #t 0.001)\n    (check-within (candidate safs safs) #t 0.001)\n    (check-within (candidate hzfp hpfz) #t 0.001)\n    (check-within (candidate xide dixe) #t 0.001)\n    (check-within (candidate qpye qpye) #t 0.001)\n    (check-within (candidate zaus zsua) #t 0.001)\n    (check-within (candidate lpsc cslp) #f 0.001)\n    (check-within (candidate taxc taxc) #t 0.001)\n    (check-within (candidate kkjc kcjk) #t 0.001)\n    (check-within (candidate pshr prhs) #t 0.001)\n    (check-within (candidate kpdr djoe) #f 0.001)\n    (check-within (candidate vzla lzva) #t 0.001)\n    (check-within (candidate tcar tacr) #f 0.001)\n    (check-within (candidate zkyt yfzr) #f 0.001)\n    (check-within (candidate puwg pgwu) #t 0.001)\n    (check-within (candidate ownv ovnw) #t 0.001)\n    (check-within (candidate rayz bpnf) #f 0.001)\n    (check-within (candidate zbwg wbzg) #t 0.001)\n    (check-within (candidate rypk pyrk) #t 0.001)\n    (check-within (candidate qchw bcqn) #f 0.001)\n    (check-within (candidate qtpf qfpt) #t 0.001)\n    (check-within (candidate apnl nlap) #t 0.001)\n    (check-within (candidate pkmh mkph) #t 0.001)\n    (check-within (candidate ouxw xuow) #t 0.001)\n    (check-within (candidate dlgd gdld) #f 0.001)\n    (check-within (candidate xbcx cxxb) #t 0.001)\n    (check-within (candidate eaba uaul) #f 0.001)\n    (check-within (candidate fyro rofy) #t 0.001)\n    (check-within (candidate bzqb bzqb) #t 0.001)\n    (check-within (candidate zyjv xjzr) #f 0.001)\n    (check-within (candidate jdvv djvv) #f 0.001)\n    (check-within (candidate nyxb ocry) #f 0.001)\n    (check-within (candidate gxlx lxgx) #t 0.001)\n    (check-within (candidate kgkr krkg) #t 0.001)\n    (check-within (candidate edfw fdew) #t 0.001)\n    (check-within (candidate vxkq kqxv) #f 0.001)\n    (check-within (candidate qnjc jivc) #f 0.001)\n    (check-within (candidate zzaf azzf) #t 0.001)\n    (check-within (candidate esgr gres) #t 0.001)\n    (check-within (candidate meuu yqlh) #f 0.001)\n    (check-within (candidate gjda djga) #t 0.001)\n    (check-within (candidate qaqz qaqz) #t 0.001)\n    (check-within (candidate legy lyge) #t 0.001)\n    (check-within (candidate eeum emue) #t 0.001)\n    (check-within (candidate vsvs vsvs) #t 0.001)\n    (check-within (candidate mxlk mxlk) #t 0.001)\n    (check-within (candidate nbre renb) #t 0.001)\n    (check-within (candidate erfk gmfy) #f 0.001)\n    (check-within (candidate gsic snvs) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3000_minAbsoluteDifference", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and an integer x.\n;; Find the minimum absolute difference between two elements in the array that are at least x indices apart.\n;; In other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized.\n;; Return an integer denoting the minimum absolute difference between two elements that are at least x indices apart.\n;; Example 1:\n;; Input: nums = [4,3,2,4], x = 2\n;; Output: 0\n;; Explanation: We can select nums[0] = 4 and nums[3] = 4.\n;; They are at least 2 indices apart, and their absolute difference is the minimum, 0.\n;; It can be shown that 0 is the optimal answer.\n;; Example 2:\n;; Input: nums = [5,3,2,10,15], x = 1\n;; Output: 1\n;; Explanation: We can select nums[1] = 3 and nums[2] = 2.\n;; They are at least 1 index apart, and their absolute difference is the minimum, 1.\n;; It can be shown that 1 is the optimal answer.\n;; Example 3:\n;; Input: nums = [1,2,3,4], x = 3\n;; Output: 3\n;; Explanation: We can select nums[0] = 1 and nums[3] = 4.\n;; They are at least 3 indices apart, and their absolute difference is the minimum, 3.\n;; It can be shown that 3 is the optimal answer.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n;;  * 0 <= x < nums.length\n(define (minAbsoluteDifference nums x)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3000_minAbsoluteDifference.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minAbsoluteDifference))\n    (check-within (candidate (list 4 3 2 4) 2) 0 0.001)\n    (check-within (candidate (list 5 3 2 10 15) 1) 1 0.001)\n    (check-within (candidate (list 1 2 3 4) 3) 3 0.001)\n    (check-within (candidate (list 1 67) 1) 66 0.001)\n    (check-within (candidate (list 7 398) 1) 391 0.001)\n    (check-within (candidate (list 12 141) 1) 129 0.001)\n    (check-within (candidate (list 21 75) 1) 54 0.001)\n    (check-within (candidate (list 22 147) 1) 125 0.001)\n    (check-within (candidate (list 25 197) 1) 172 0.001)\n    (check-within (candidate (list 27 275) 1) 248 0.001)\n    (check-within (candidate (list 37 192) 1) 155 0.001)\n    (check-within (candidate (list 41 163) 1) 122 0.001)\n    (check-within (candidate (list 45 49) 1) 4 0.001)\n    (check-within (candidate (list 48 195) 1) 147 0.001)\n    (check-within (candidate (list 68 68) 1) 0 0.001)\n    (check-within (candidate (list 71 4) 1) 67 0.001)\n    (check-within (candidate (list 72 169) 1) 97 0.001)\n    (check-within (candidate (list 74 62) 1) 12 0.001)\n    (check-within (candidate (list 75 1) 1) 74 0.001)\n    (check-within (candidate (list 76 49) 1) 27 0.001)\n    (check-within (candidate (list 88 72) 1) 16 0.001)\n    (check-within (candidate (list 99 370) 1) 271 0.001)\n    (check-within (candidate (list 103 39) 1) 64 0.001)\n    (check-within (candidate (list 109 99) 1) 10 0.001)\n    (check-within (candidate (list 111 161) 1) 50 0.001)\n    (check-within (candidate (list 113 117) 1) 4 0.001)\n    (check-within (candidate (list 119 184) 1) 65 0.001)\n    (check-within (candidate (list 122 118) 1) 4 0.001)\n    (check-within (candidate (list 123 13) 1) 110 0.001)\n    (check-within (candidate (list 123 162) 1) 39 0.001)\n    (check-within (candidate (list 126 69) 1) 57 0.001)\n    (check-within (candidate (list 127 18) 1) 109 0.001)\n    (check-within (candidate (list 127 346) 1) 219 0.001)\n    (check-within (candidate (list 132 110) 1) 22 0.001)\n    (check-within (candidate (list 134 23) 1) 111 0.001)\n    (check-within (candidate (list 136 150) 1) 14 0.001)\n    (check-within (candidate (list 139 215) 1) 76 0.001)\n    (check-within (candidate (list 153 3) 1) 150 0.001)\n    (check-within (candidate (list 156 67) 1) 89 0.001)\n    (check-within (candidate (list 160 168) 1) 8 0.001)\n    (check-within (candidate (list 161 93) 1) 68 0.001)\n    (check-within (candidate (list 164 81) 1) 83 0.001)\n    (check-within (candidate (list 167 83) 1) 84 0.001)\n    (check-within (candidate (list 174 58) 1) 116 0.001)\n    (check-within (candidate (list 174 102) 1) 72 0.001)\n    (check-within (candidate (list 175 137) 1) 38 0.001)\n    (check-within (candidate (list 176 99) 1) 77 0.001)\n    (check-within (candidate (list 178 179) 1) 1 0.001)\n    (check-within (candidate (list 228 359) 1) 131 0.001)\n    (check-within (candidate (list 243 280) 1) 37 0.001)\n    (check-within (candidate (list 283 62) 1) 221 0.001)\n    (check-within (candidate (list 288 149) 1) 139 0.001)\n    (check-within (candidate (list 293 278) 1) 15 0.001)\n    (check-within (candidate (list 327 425) 1) 98 0.001)\n    (check-within (candidate (list 337 187) 1) 150 0.001)\n    (check-within (candidate (list 346 160) 1) 186 0.001)\n    (check-within (candidate (list 347 369) 1) 22 0.001)\n    (check-within (candidate (list 355 199) 1) 156 0.001)\n    (check-within (candidate (list 413 311) 1) 102 0.001)\n    (check-within (candidate (list 417 320) 1) 97 0.001)\n    (check-within (candidate (list 418 131) 1) 287 0.001)\n    (check-within (candidate (list 3274 71) 1) 3203 0.001)\n    (check-within (candidate (list 5 14 81) 2) 76 0.001)\n    (check-within (candidate (list 9 25 15) 2) 6 0.001)\n    (check-within (candidate (list 9 113 136) 1) 23 0.001)\n    (check-within (candidate (list 13 19 12) 1) 1 0.001)\n    (check-within (candidate (list 13 94 59) 2) 46 0.001)\n    (check-within (candidate (list 14 111 16) 1) 2 0.001)\n    (check-within (candidate (list 17 173 69) 1) 52 0.001)\n    (check-within (candidate (list 24 39 28) 2) 4 0.001)\n    (check-within (candidate (list 32 129 93) 1) 36 0.001)\n    (check-within (candidate (list 33 18 131) 1) 15 0.001)\n    (check-within (candidate (list 36 19 27) 2) 9 0.001)\n    (check-within (candidate (list 40 18 17) 1) 1 0.001)\n    (check-within (candidate (list 43 49 20) 2) 23 0.001)\n    (check-within (candidate (list 44 186 163) 2) 119 0.001)\n    (check-within (candidate (list 56 23 158) 1) 33 0.001)\n    (check-within (candidate (list 62 37 182) 2) 120 0.001)\n    (check-within (candidate (list 63 116 12) 2) 51 0.001)\n    (check-within (candidate (list 66 345 278) 2) 212 0.001)\n    (check-within (candidate (list 67 81 165) 2) 98 0.001)\n    (check-within (candidate (list 70 184 70) 2) 0 0.001)\n    (check-within (candidate (list 73 106 172) 1) 33 0.001)\n    (check-within (candidate (list 74 199 57) 1) 17 0.001)\n    (check-within (candidate (list 83 14 14) 1) 0 0.001)\n    (check-within (candidate (list 86 1 129) 2) 43 0.001)\n    (check-within (candidate (list 87 194 107) 1) 20 0.001)\n    (check-within (candidate (list 88 75 122) 2) 34 0.001)\n    (check-within (candidate (list 93 96 28) 1) 3 0.001)\n    (check-within (candidate (list 95 86 132) 2) 37 0.001)\n    (check-within (candidate (list 96 41 24) 1) 17 0.001)\n    (check-within (candidate (list 116 6 3) 1) 3 0.001)\n    (check-within (candidate (list 120 102 184) 1) 18 0.001)\n    (check-within (candidate (list 123 113 20) 1) 10 0.001)\n    (check-within (candidate (list 125 14 141) 1) 16 0.001)\n    (check-within (candidate (list 126 2 180) 1) 54 0.001)\n    (check-within (candidate (list 136 24 114) 1) 22 0.001)\n    (check-within (candidate (list 136 177 98) 2) 38 0.001)\n    (check-within (candidate (list 136 177 123) 1) 13 0.001)\n    (check-within (candidate (list 136 178 18) 2) 118 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3001_maximumScore", "language": "rkt", "prompt": "#lang racket\n;; You are given an array nums of n positive integers and an integer k.\n;; Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:\n;;  * Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously.\n;;  * Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index.\n;;  * Multiply your score by x.\n;; Here, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.\n;; The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.\n;; Return the maximum possible score after applying at most k operations.\n;; Since the answer may be large, return it modulo 109 + 7.\n;; Example 1:\n;; Input: nums = [8,3,9,3,8], k = 2\n;; Output: 81\n;; Explanation: To get a score of 81, we can apply the following operations:\n;; - Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n;; - Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\n;; It can be proven that 81 is the highest score one can obtain.\n;; Example 2:\n;; Input: nums = [19,12,14,6,10,18], k = 3\n;; Output: 4788\n;; Explanation: To get a score of 4788, we can apply the following operations:\n;; - Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n;; - Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n;; - Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\n;; It can be proven that 4788 is the highest score one can obtain.\n;; Constraints:\n;;  * 1 <= nums.length == n <= 105\n;;  * 1 <= nums[i] <= 105\n;;  * 1 <= k <= min(n * (n + 1) / 2, 109)\n(define (maximumScore nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3001_maximumScore.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumScore))\n    (check-within (candidate (list 8 3 9 3 8) 2) 81 0.001)\n    (check-within (candidate (list 19 12 14 6 10 18) 3) 4788 0.001)\n    (check-within (candidate (list 3289 2832 14858 22011) 6) 256720975 0.001)\n    (check-within (candidate (list 1 7 11 1 5) 14) 823751938 0.001)\n    (check-within (candidate (list 1 1 2 18 1 9 3 1) 32) 346264255 0.001)\n    (check-within (candidate (list 1 1 1) 2) 1 0.001)\n    (check-within (candidate (list 1 2 1 12 1 3) 3) 1728 0.001)\n    (check-within (candidate (list 12 5 1 6 9 1 17 14) 12) 62996359 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n    (check-within (candidate (list 1 10 15 1 3) 13) 499978741 0.001)\n    (check-within (candidate (list 6 1 13 10 1 17 6) 27) 630596200 0.001)\n    (check-within (candidate (list 1 14) 1) 14 0.001)\n    (check-within (candidate (list 2 1 14 5 18 1 8 5) 34) 799392504 0.001)\n    (check-within (candidate (list 5 12 11 15 10 18) 18) 557423913 0.001)\n    (check-within (candidate (list 4 1) 3) 16 0.001)\n    (check-within (candidate (list 1 2 5 1 10 1 1) 20) 600000014 0.001)\n    (check-within (candidate (list 13 16 12 15 12 1 13 1 18 1) 46) 912532739 0.001)\n    (check-within (candidate (list 10 11) 3) 1100 0.001)\n    (check-within (candidate (list 15 16 12 1 10 14) 19) 311972352 0.001)\n    (check-within (candidate (list 14 12 5 2 14) 6) 7529536 0.001)\n    (check-within (candidate (list 1 13 12 1 9 12 1 18) 31) 846374420 0.001)\n    (check-within (candidate (list 1 6 14 10 16) 4) 43904 0.001)\n    (check-within (candidate (list 14 1 9 1 10) 3) 2744 0.001)\n    (check-within (candidate (list 13 1 1 15 9 1 1) 22) 925331761 0.001)\n    (check-within (candidate (list 1 17 3 9 10 17 1 1 1 11) 22) 407065837 0.001)\n    (check-within (candidate (list 1 1 1) 5) 1 0.001)\n    (check-within (candidate (list 1 13 4 1 1) 14) 206765780 0.001)\n    (check-within (candidate (list 3 1 3 10 2 16) 16) 996976007 0.001)\n    (check-within (candidate (list 1 2 1 1 16 8 11 6) 27) 33977400 0.001)\n    (check-within (candidate (list 1 10 13 1 9 15 1) 2) 225 0.001)\n    (check-within (candidate (list 18 1) 3) 324 0.001)\n    (check-within (candidate (list 16) 1) 16 0.001)\n    (check-within (candidate (list 14 6 18 10 1 8 1 17) 25) 677968714 0.001)\n    (check-within (candidate (list 15 16 12) 6) 7776000 0.001)\n    (check-within (candidate (list 1 10 1 2) 7) 2000000 0.001)\n    (check-within (candidate (list 13 1 10 1 15 6 1 12 6) 10) 650386593 0.001)\n    (check-within (candidate (list 1 15 5 1 1 15 1 1) 17) 10486853 0.001)\n    (check-within (candidate (list 1 9) 2) 81 0.001)\n    (check-within (candidate (list 13 8 14 6 3 14 13 10 1) 21) 247566578 0.001)\n    (check-within (candidate (list 4) 1) 4 0.001)\n    (check-within (candidate (list 1 12 5 1 12) 15) 209137175 0.001)\n    (check-within (candidate (list 1 5 1 11) 4) 3025 0.001)\n    (check-within (candidate (list 3 6 17 1 1 17 18 12 16 5) 9) 359288982 0.001)\n    (check-within (candidate (list 2 2 15 2 15 15) 10) 650386593 0.001)\n    (check-within (candidate (list 1 12) 1) 12 0.001)\n    (check-within (candidate (list 2 11 1 1) 2) 121 0.001)\n    (check-within (candidate (list 11 15 18 4 11 7 1 1) 32) 179964426 0.001)\n    (check-within (candidate (list 10 1 15) 1) 15 0.001)\n    (check-within (candidate (list 10 1 1 9 14 6 4 18 8) 10) 420565606 0.001)\n    (check-within (candidate (list 6 8) 3) 288 0.001)\n    (check-within (candidate (list 13 1 10 6) 4) 16900 0.001)\n    (check-within (candidate (list 8 10 16 1 1 1) 2) 256 0.001)\n    (check-within (candidate (list 11 2 1) 4) 2662 0.001)\n    (check-within (candidate (list 15) 1) 15 0.001)\n    (check-within (candidate (list 5 5 16 12 8 1 1 7 12) 34) 15762264 0.001)\n    (check-within (candidate (list 1 1) 1) 1 0.001)\n    (check-within (candidate (list 3 18 12 8 1 3 6) 23) 18966086 0.001)\n    (check-within (candidate (list 13 1 5 6) 8) 14236560 0.001)\n    (check-within (candidate (list 1 1 15 1 9 1 1) 23) 929527145 0.001)\n    (check-within (candidate (list 6 2 1 17 9 14 1) 25) 808455901 0.001)\n    (check-within (candidate (list 1 18) 3) 324 0.001)\n    (check-within (candidate (list 1 10) 2) 100 0.001)\n    (check-within (candidate (list 17) 1) 17 0.001)\n    (check-within (candidate (list 18 13 12 1 11) 8) 537271275 0.001)\n    (check-within (candidate (list 10 14 18 6 12 14 3 13) 23) 795923147 0.001)\n    (check-within (candidate (list 16 1 14 13 3 1) 6) 9834496 0.001)\n    (check-within (candidate (list 10 4 4 3 10 1) 15) 997200007 0.001)\n    (check-within (candidate (list 2 4 1 5 14 13 13 17) 19) 241329678 0.001)\n    (check-within (candidate (list 6 1 15 1 13) 12) 820232542 0.001)\n    (check-within (candidate (list 14 13 1 14) 5) 537824 0.001)\n    (check-within (candidate (list 10 4 12 12 16 9 1 18) 36) 892891506 0.001)\n    (check-within (candidate (list 6) 1) 6 0.001)\n    (check-within (candidate (list 12) 1) 12 0.001)\n    (check-within (candidate (list 10 17 17 15 1 15 1) 19) 301460564 0.001)\n    (check-within (candidate (list 10 3 1 1 4 2 14) 10) 295359475 0.001)\n    (check-within (candidate (list 10 12) 3) 1200 0.001)\n    (check-within (candidate (list 9 10 2 3 2 1 11 1 1 13) 49) 900432644 0.001)\n    (check-within (candidate (list 1 10 18 18 3 1 8 1 15 15) 18) 38759446 0.001)\n    (check-within (candidate (list 15 1 11 13 16) 14) 753886562 0.001)\n    (check-within (candidate (list 12 1 6 1 1 4 8 17 18 1) 2) 324 0.001)\n    (check-within (candidate (list 1 1 1 17 8 18 8 1) 14) 958387476 0.001)\n    (check-within (candidate (list 7 1 6 9 11 7 13 12 1) 39) 21295572 0.001)\n    (check-within (candidate (list 12 1 1 15 2 1 1 16 1 1) 8) 294967268 0.001)\n    (check-within (candidate (list 3 14 13 1 11 1 1 1) 22) 810815174 0.001)\n    (check-within (candidate (list 14 3 6 6 1 7 13 16) 28) 312142986 0.001)\n    (check-within (candidate (list 3 4 4 15 18 12 6) 8) 428674972 0.001)\n    (check-within (candidate (list 6 15 17 9 9 17) 5) 1419857 0.001)\n    (check-within (candidate (list 2 12 1 11 12) 5) 248832 0.001)\n    (check-within (candidate (list 1 15 15) 4) 50625 0.001)\n    (check-within (candidate (list 7 11 3 1 12 10) 15) 784368200 0.001)\n    (check-within (candidate (list 18 1 11 15 16 18 18 13 10 10) 41) 911212578 0.001)\n    (check-within (candidate (list 11 15 2 14 6 15) 2) 225 0.001)\n    (check-within (candidate (list 11 2 15 1 1 11 7 1) 16) 734032462 0.001)\n    (check-within (candidate (list 1 6 12 4 10 13 7 6 17 1) 50) 377786273 0.001)\n    (check-within (candidate (list 1 5 4 18 12 1 1 1 7 12) 3) 5832 0.001)\n    (check-within (candidate (list 5 1 17 10 12) 9) 467999979 0.001)\n    (check-within (candidate (list 6 1 1 4 10 15 16 8) 12) 999939527 0.001)\n    (check-within (candidate (list 1 1) 3) 1 0.001)\n    (check-within (candidate (list 8) 1) 8 0.001)\n    (check-within (candidate (list 9 8 14 1 14 14 5 1 6) 44) 439903801 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3017_numberOfBeautifulIntegers", "language": "rkt", "prompt": "#lang racket\n;; You are given positive integers low, high, and k.\n;; A number is beautiful if it meets both of the following conditions:\n;;  * The count of even digits in the number is equal to the count of odd digits.\n;;  * The number is divisible by k.\n;; Return the number of beautiful integers in the range [low, high].\n;; Example 1:\n;; Input: low = 10, high = 20, k = 3\n;; Output: 2\n;; Explanation: There are 2 beautiful integers in the given range: [12,18].\n;; - 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n;; - 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n;; Additionally we can see that:\n;; - 16 is not beautiful because it is not divisible by k = 3.\n;; - 15 is not beautiful because it does not contain equal counts even and odd digits.\n;; It can be shown that there are only 2 beautiful integers in the given range.\n;; Example 2:\n;; Input: low = 1, high = 10, k = 1\n;; Output: 1\n;; Explanation: There is 1 beautiful integer in the given range: [10].\n;; - 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\n;; It can be shown that there is only 1 beautiful integer in the given range.\n;; Example 3:\n;; Input: low = 5, high = 5, k = 2\n;; Output: 0\n;; Explanation: There are 0 beautiful integers in the given range.\n;; - 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\n;; Constraints:\n;;  * 0 < low <= high <= 109\n;;  * 0 < k <= 20\n(define (numberOfBeautifulIntegers low high k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3017_numberOfBeautifulIntegers.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfBeautifulIntegers))\n    (check-within (candidate 10 20 3) 2 0.001)\n    (check-within (candidate 1 10 1) 1 0.001)\n    (check-within (candidate 5 5 2) 0 0.001)\n    (check-within (candidate 3 31 16) 1 0.001)\n    (check-within (candidate 25 31 11) 0 0.001)\n    (check-within (candidate 9 25 4) 2 0.001)\n    (check-within (candidate 58 72 16) 0 0.001)\n    (check-within (candidate 5 79 12) 3 0.001)\n    (check-within (candidate 26 74 7) 4 0.001)\n    (check-within (candidate 36 65 7) 3 0.001)\n    (check-within (candidate 12 84 8) 4 0.001)\n    (check-within (candidate 13 91 13) 3 0.001)\n    (check-within (candidate 8 18 4) 2 0.001)\n    (check-within (candidate 22 59 6) 3 0.001)\n    (check-within (candidate 15 27 9) 2 0.001)\n    (check-within (candidate 4 9 19) 0 0.001)\n    (check-within (candidate 14 81 17) 1 0.001)\n    (check-within (candidate 12 33 18) 1 0.001)\n    (check-within (candidate 10 17 8) 1 0.001)\n    (check-within (candidate 42 58 3) 2 0.001)\n    (check-within (candidate 22 42 4) 2 0.001)\n    (check-within (candidate 5 8 5) 0 0.001)\n    (check-within (candidate 12 75 13) 2 0.001)\n    (check-within (candidate 2 28 1) 9 0.001)\n    (check-within (candidate 29 35 17) 1 0.001)\n    (check-within (candidate 13 21 9) 1 0.001)\n    (check-within (candidate 1 13 15) 0 0.001)\n    (check-within (candidate 12 21 16) 1 0.001)\n    (check-within (candidate 47 72 13) 2 0.001)\n    (check-within (candidate 1 35 12) 1 0.001)\n    (check-within (candidate 38 52 4) 1 0.001)\n    (check-within (candidate 10 74 3) 11 0.001)\n    (check-within (candidate 60 92 11) 0 0.001)\n    (check-within (candidate 3 25 15) 0 0.001)\n    (check-within (candidate 63 65 20) 0 0.001)\n    (check-within (candidate 22 77 7) 4 0.001)\n    (check-within (candidate 1 1 4) 0 0.001)\n    (check-within (candidate 28 73 20) 0 0.001)\n    (check-within (candidate 21 32 6) 1 0.001)\n    (check-within (candidate 43 43 11) 0 0.001)\n    (check-within (candidate 31 68 16) 1 0.001)\n    (check-within (candidate 1 8 4) 0 0.001)\n    (check-within (candidate 47 100 18) 3 0.001)\n    (check-within (candidate 45 84 19) 1 0.001)\n    (check-within (candidate 31 80 11) 0 0.001)\n    (check-within (candidate 14 14 5) 0 0.001)\n    (check-within (candidate 21 88 10) 3 0.001)\n    (check-within (candidate 11 42 3) 6 0.001)\n    (check-within (candidate 19 53 16) 1 0.001)\n    (check-within (candidate 57 98 6) 4 0.001)\n    (check-within (candidate 57 69 9) 1 0.001)\n    (check-within (candidate 17 64 1) 23 0.001)\n    (check-within (candidate 29 40 15) 1 0.001)\n    (check-within (candidate 36 60 3) 3 0.001)\n    (check-within (candidate 16 23 13) 0 0.001)\n    (check-within (candidate 36 99 3) 11 0.001)\n    (check-within (candidate 23 83 4) 6 0.001)\n    (check-within (candidate 4 5 9) 0 0.001)\n    (check-within (candidate 15 21 2) 2 0.001)\n    (check-within (candidate 51 76 7) 3 0.001)\n    (check-within (candidate 24 34 8) 1 0.001)\n    (check-within (candidate 24 99 1) 38 0.001)\n    (check-within (candidate 37 63 10) 1 0.001)\n    (check-within (candidate 19 23 6) 0 0.001)\n    (check-within (candidate 35 70 17) 0 0.001)\n    (check-within (candidate 3 18 19) 0 0.001)\n    (check-within (candidate 30 64 12) 1 0.001)\n    (check-within (candidate 3 12 9) 0 0.001)\n    (check-within (candidate 14 21 16) 1 0.001)\n    (check-within (candidate 19 21 12) 0 0.001)\n    (check-within (candidate 54 78 16) 0 0.001)\n    (check-within (candidate 24 36 20) 0 0.001)\n    (check-within (candidate 54 58 13) 0 0.001)\n    (check-within (candidate 74 88 12) 0 0.001)\n    (check-within (candidate 45 58 14) 1 0.001)\n    (check-within (candidate 51 99 8) 3 0.001)\n    (check-within (candidate 8 26 13) 0 0.001)\n    (check-within (candidate 12 92 3) 15 0.001)\n    (check-within (candidate 18 91 11) 0 0.001)\n    (check-within (candidate 14 53 15) 2 0.001)\n    (check-within (candidate 4 10 11) 0 0.001)\n    (check-within (candidate 7 24 5) 1 0.001)\n    (check-within (candidate 1 25 8) 1 0.001)\n    (check-within (candidate 7 20 15) 0 0.001)\n    (check-within (candidate 51 92 1) 21 0.001)\n    (check-within (candidate 73 73 3) 0 0.001)\n    (check-within (candidate 50 63 19) 0 0.001)\n    (check-within (candidate 30 51 19) 1 0.001)\n    (check-within (candidate 2 65 7) 5 0.001)\n    (check-within (candidate 49 87 20) 0 0.001)\n    (check-within (candidate 3 6 1) 0 0.001)\n    (check-within (candidate 16 17 6) 0 0.001)\n    (check-within (candidate 17 32 16) 1 0.001)\n    (check-within (candidate 13 14 6) 0 0.001)\n    (check-within (candidate 25 42 11) 0 0.001)\n    (check-within (candidate 18 46 5) 3 0.001)\n    (check-within (candidate 1 65 6) 5 0.001)\n    (check-within (candidate 6 43 15) 1 0.001)\n    (check-within (candidate 5 9 12) 0 0.001)\n    (check-within (candidate 1 75 9) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3019_furthestDistanceFromOrigin", "language": "rkt", "prompt": "#lang racket\n;; You are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0.\n;; In the ith move, you can choose one of the following directions:\n;;  * move to the left if moves[i] = 'L' or moves[i] = '_'\n;;  * move to the right if moves[i] = 'R' or moves[i] = '_'\n;; Return the distance from the origin of the furthest point you can get to after n moves.\n;; Example 1:\n;; Input: moves = \"L_RL__R\"\n;; Output: 3\n;; Explanation: The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\".\n;; Example 2:\n;; Input: moves = \"_R__LL_\"\n;; Output: 5\n;; Explanation: The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\".\n;; Example 3:\n;; Input: moves = \"_______\"\n;; Output: 7\n;; Explanation: The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\".\n;; Constraints:\n;;  * 1 <= moves.length == n <= 50\n;;  * moves consists only of characters 'L', 'R' and '_'.\n(define (furthestDistanceFromOrigin moves)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3019_furthestDistanceFromOrigin.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate furthestDistanceFromOrigin))\n    (check-within (candidate L_RL__R) 3 0.001)\n    (check-within (candidate _R__LL_) 5 0.001)\n    (check-within (candidate _______) 7 0.001)\n    (check-within (candidate L) 1 0.001)\n    (check-within (candidate R) 1 0.001)\n    (check-within (candidate _) 1 0.001)\n    (check-within (candidate LL) 2 0.001)\n    (check-within (candidate LR) 0 0.001)\n    (check-within (candidate L_) 2 0.001)\n    (check-within (candidate RL) 0 0.001)\n    (check-within (candidate RR) 2 0.001)\n    (check-within (candidate R_) 2 0.001)\n    (check-within (candidate _L) 2 0.001)\n    (check-within (candidate _R) 2 0.001)\n    (check-within (candidate __) 2 0.001)\n    (check-within (candidate LLL) 3 0.001)\n    (check-within (candidate LLR) 1 0.001)\n    (check-within (candidate LL_) 3 0.001)\n    (check-within (candidate LRL) 1 0.001)\n    (check-within (candidate LRR) 1 0.001)\n    (check-within (candidate LR_) 1 0.001)\n    (check-within (candidate L_L) 3 0.001)\n    (check-within (candidate L_R) 1 0.001)\n    (check-within (candidate L__) 3 0.001)\n    (check-within (candidate RLL) 1 0.001)\n    (check-within (candidate RLR) 1 0.001)\n    (check-within (candidate RL_) 1 0.001)\n    (check-within (candidate RRL) 1 0.001)\n    (check-within (candidate RRR) 3 0.001)\n    (check-within (candidate RR_) 3 0.001)\n    (check-within (candidate R_L) 1 0.001)\n    (check-within (candidate R_R) 3 0.001)\n    (check-within (candidate R__) 3 0.001)\n    (check-within (candidate _LL) 3 0.001)\n    (check-within (candidate _LR) 1 0.001)\n    (check-within (candidate _L_) 3 0.001)\n    (check-within (candidate _RL) 1 0.001)\n    (check-within (candidate _RR) 3 0.001)\n    (check-within (candidate _R_) 3 0.001)\n    (check-within (candidate __L) 3 0.001)\n    (check-within (candidate __R) 3 0.001)\n    (check-within (candidate ___) 3 0.001)\n    (check-within (candidate LLLL) 4 0.001)\n    (check-within (candidate LLLR) 2 0.001)\n    (check-within (candidate LLL_) 4 0.001)\n    (check-within (candidate LLRL) 2 0.001)\n    (check-within (candidate LLRR) 0 0.001)\n    (check-within (candidate LLR_) 2 0.001)\n    (check-within (candidate LL_L) 4 0.001)\n    (check-within (candidate LL_R) 2 0.001)\n    (check-within (candidate LL__) 4 0.001)\n    (check-within (candidate LRLL) 2 0.001)\n    (check-within (candidate LRLR) 0 0.001)\n    (check-within (candidate LRL_) 2 0.001)\n    (check-within (candidate LRRL) 0 0.001)\n    (check-within (candidate LRRR) 2 0.001)\n    (check-within (candidate LRR_) 2 0.001)\n    (check-within (candidate LR_L) 2 0.001)\n    (check-within (candidate LR_R) 2 0.001)\n    (check-within (candidate LR__) 2 0.001)\n    (check-within (candidate L_LL) 4 0.001)\n    (check-within (candidate L_LR) 2 0.001)\n    (check-within (candidate L_L_) 4 0.001)\n    (check-within (candidate L_RL) 2 0.001)\n    (check-within (candidate L_RR) 2 0.001)\n    (check-within (candidate L_R_) 2 0.001)\n    (check-within (candidate L__L) 4 0.001)\n    (check-within (candidate L__R) 2 0.001)\n    (check-within (candidate L___) 4 0.001)\n    (check-within (candidate RLLL) 2 0.001)\n    (check-within (candidate RLLR) 0 0.001)\n    (check-within (candidate RLL_) 2 0.001)\n    (check-within (candidate RLRL) 0 0.001)\n    (check-within (candidate RLRR) 2 0.001)\n    (check-within (candidate RLR_) 2 0.001)\n    (check-within (candidate RL_L) 2 0.001)\n    (check-within (candidate RL_R) 2 0.001)\n    (check-within (candidate RL__) 2 0.001)\n    (check-within (candidate RRLL) 0 0.001)\n    (check-within (candidate RRLR) 2 0.001)\n    (check-within (candidate RRL_) 2 0.001)\n    (check-within (candidate RRRL) 2 0.001)\n    (check-within (candidate RRRR) 4 0.001)\n    (check-within (candidate RRR_) 4 0.001)\n    (check-within (candidate RR_L) 2 0.001)\n    (check-within (candidate RR_R) 4 0.001)\n    (check-within (candidate RR__) 4 0.001)\n    (check-within (candidate R_LL) 2 0.001)\n    (check-within (candidate R_LR) 2 0.001)\n    (check-within (candidate R_L_) 2 0.001)\n    (check-within (candidate R_RL) 2 0.001)\n    (check-within (candidate R_RR) 4 0.001)\n    (check-within (candidate R_R_) 4 0.001)\n    (check-within (candidate R__L) 2 0.001)\n    (check-within (candidate R__R) 4 0.001)\n    (check-within (candidate R___) 4 0.001)\n    (check-within (candidate _LLL) 4 0.001)\n    (check-within (candidate _LLR) 2 0.001)\n    (check-within (candidate _LL_) 4 0.001)\n    (check-within (candidate _LRL) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3024_numberOfWays", "language": "rkt", "prompt": "#lang racket\n;;     You are given two strings s and t of equal length n. You can perform the following operation on the string s:\n;; * Remove a suffix of s of length l where 0 < l < n and append it at the start of s.\n;;   For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.\n;;     You are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.\n;;     Since the answer can be large, return it modulo 109 + 7.\n;;     Example 1:\n;;     Input: s = \"abcd\", t = \"cdab\", k = 2\n;;     Output: 2\n;;     Explanation:\n;;     First way:\n;;     In first operation, choose suffix from index = 3, so resulting s = \"dabc\".\n;;     In second operation, choose suffix from index = 3, so resulting s = \"cdab\".\n;;     Second way:\n;;     In first operation, choose suffix from index = 1, so resulting s = \"bcda\".\n;;     In second operation, choose suffix from index = 1, so resulting s = \"cdab\".\n;;     Example 2:\n;;     Input: s = \"ababab\", t = \"ababab\", k = 1\n;;     Output: 2\n;;     Explanation:\n;;     First way:\n;;     Choose suffix from index = 2, so resulting s = \"ababab\".\n;;     Second way:\n;;     Choose suffix from index = 4, so resulting s = \"ababab\".\n;;     Constraints:\n;; * 2 <= s.length <= 5 * 105\n;; * 1 <= k <= 1015\n;; * s.length == t.length\n;; * s and t consist of only lowercase English alphabets.\n(define (numberOfWays s t k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3024_numberOfWays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfWays))\n    (check-within (candidate abcd cdab 2) 2 0.001)\n    (check-within (candidate ababab ababab 1) 2 0.001)\n    (check-within (candidate goxoq dfqgl 244326024901249) 0 0.001)\n    (check-within (candidate ceoceo eoceoc 4) 208 0.001)\n    (check-within (candidate ib ib 10) 1 0.001)\n    (check-within (candidate ttttttt ttttttt 5) 7776 0.001)\n    (check-within (candidate aaaa aaaa 8) 6561 0.001)\n    (check-within (candidate meplrmeplr eplrmeplrm 7) 956594 0.001)\n    (check-within (candidate dsmn smnd 3) 7 0.001)\n    (check-within (candidate jjj jjj 10) 1024 0.001)\n    (check-within (candidate rrrrr rrrrr 1) 4 0.001)\n    (check-within (candidate fefe fefe 9) 9841 0.001)\n    (check-within (candidate pfly wvqr 840550364246523) 0 0.001)\n    (check-within (candidate ltjwwltjww jwwltjwwlt 1) 2 0.001)\n    (check-within (candidate mb mb 3) 0 0.001)\n    (check-within (candidate jjjjjjjjjj jjjjjjjjjj 3) 729 0.001)\n    (check-within (candidate oqytlmi lmioqyt 8) 239945 0.001)\n    (check-within (candidate hpcg pcgh 5) 61 0.001)\n    (check-within (candidate bqbqbqbqbq bqbqbqbqbq 9) 193710244 0.001)\n    (check-within (candidate ccccccccc ccccccccc 7) 2097152 0.001)\n    (check-within (candidate jjjjjjjjjj jjjjjjjjjj 9) 387420489 0.001)\n    (check-within (candidate qqqq qqqq 9) 19683 0.001)\n    (check-within (candidate loppaqg nvbxtmh 104865546226045) 0 0.001)\n    (check-within (candidate qqqqqqqqqq qqqqqqqqqq 3) 729 0.001)\n    (check-within (candidate qsqsqsqsqs qsqsqsqsqs 2) 41 0.001)\n    (check-within (candidate nnnnn nnnnn 5) 1024 0.001)\n    (check-within (candidate klncccd klncccd 1) 0 0.001)\n    (check-within (candidate qqqqq qqqqq 9) 262144 0.001)\n    (check-within (candidate qvxrlh hqvxrl 6) 2604 0.001)\n    (check-within (candidate uuuu uuuu 9) 19683 0.001)\n    (check-within (candidate sss sss 7) 128 0.001)\n    (check-within (candidate gggggggggg gggggggggg 1) 9 0.001)\n    (check-within (candidate ks cj 400700574233583) 0 0.001)\n    (check-within (candidate lllllllll lllllllll 5) 32768 0.001)\n    (check-within (candidate uhixx xxuhi 3) 13 0.001)\n    (check-within (candidate vkrvkrvkr rvkrvkrvk 2) 21 0.001)\n    (check-within (candidate xtxtxtxt xtxtxtxt 8) 2882401 0.001)\n    (check-within (candidate nzybrhi rhinzyb 6) 6665 0.001)\n    (check-within (candidate ff ff 4) 1 0.001)\n    (check-within (candidate ubagdasws aswsubagd 9) 14913081 0.001)\n    (check-within (candidate aaaaa aaaaa 10) 1048576 0.001)\n    (check-within (candidate iiiiiiiiii iiiiiiiiii 4) 6561 0.001)\n    (check-within (candidate nnjqjmgome gbfuecwlqc 359221508193514) 0 0.001)\n    (check-within (candidate slmzyj slmzyj 4) 105 0.001)\n    (check-within (candidate vfyxl vfyxl 10) 209716 0.001)\n    (check-within (candidate sxzfvsxzfv vsxzfvsxzf 2) 16 0.001)\n    (check-within (candidate kalt ltka 7) 547 0.001)\n    (check-within (candidate jj jj 7) 1 0.001)\n    (check-within (candidate bcriunp criunpb 2) 5 0.001)\n    (check-within (candidate rutmzyj zyjrutm 6) 6665 0.001)\n    (check-within (candidate vvvvv vvvvv 3) 64 0.001)\n    (check-within (candidate hlld hlld 9) 4920 0.001)\n    (check-within (candidate kctcsgswa qfyyjeohe 966836940319300) 0 0.001)\n    (check-within (candidate otwqxmpktt totwqxmpkt 7) 478297 0.001)\n    (check-within (candidate kkkkkkk kkkkkkk 7) 279936 0.001)\n    (check-within (candidate iyl iyl 6) 22 0.001)\n    (check-within (candidate glao ogla 10) 14762 0.001)\n    (check-within (candidate jp jp 8) 1 0.001)\n    (check-within (candidate uuuuuu uuuuuu 7) 78125 0.001)\n    (check-within (candidate achach achach 10) 3255209 0.001)\n    (check-within (candidate uuuuuuuu uuuuuuuu 7) 823543 0.001)\n    (check-within (candidate gjh jhg 9) 171 0.001)\n    (check-within (candidate cliuw fphcn 647756904366432) 0 0.001)\n    (check-within (candidate zmcum mzmcu 1) 1 0.001)\n    (check-within (candidate ll ll 5) 1 0.001)\n    (check-within (candidate ccccc ccccc 1) 4 0.001)\n    (check-within (candidate rrrr rrrr 1) 3 0.001)\n    (check-within (candidate ih hi 8) 0 0.001)\n    (check-within (candidate qfgihqrw rwqfgihq 8) 720600 0.001)\n    (check-within (candidate cd cd 2) 1 0.001)\n    (check-within (candidate oooooooooo oooooooooo 4) 6561 0.001)\n    (check-within (candidate wp wp 6) 1 0.001)\n    (check-within (candidate rqq nln 776508964349618) 0 0.001)\n    (check-within (candidate rr rr 9) 1 0.001)\n    (check-within (candidate knwppsd psdknwp 2) 5 0.001)\n    (check-within (candidate epfeepfe feepfeep 9) 10088402 0.001)\n    (check-within (candidate wwwww wwwww 9) 262144 0.001)\n    (check-within (candidate cdcdcdcd cdcdcdcd 6) 58825 0.001)\n    (check-within (candidate uphfr fruph 7) 3277 0.001)\n    (check-within (candidate cocococo cocococo 3) 171 0.001)\n    (check-within (candidate vhzjo jovhz 1) 1 0.001)\n    (check-within (candidate bbbbbbbbbb bbbbbbbbbb 1) 9 0.001)\n    (check-within (candidate pgnrstuh yjzhldlg 618648276258027) 0 0.001)\n    (check-within (candidate cccccc cccccc 5) 3125 0.001)\n    (check-within (candidate kkkkkkk kkkkkkk 3) 216 0.001)\n    (check-within (candidate lxqqzsvej svejlxqqz 3) 57 0.001)\n    (check-within (candidate lllll lllll 3) 64 0.001)\n    (check-within (candidate hhhhhhhhhh hhhhhhhhhh 8) 43046721 0.001)\n    (check-within (candidate gggg gggg 5) 243 0.001)\n    (check-within (candidate jj jj 6) 1 0.001)\n    (check-within (candidate uuuuuuuuu uuuuuuuuu 10) 73741817 0.001)\n    (check-within (candidate qvx vxq 8) 85 0.001)\n    (check-within (candidate nolnqlgqcs jkguybcfcu 179216079747558) 0 0.001)\n    (check-within (candidate xpk xpk 6) 22 0.001)\n    (check-within (candidate xzoyb bxzoy 5) 205 0.001)\n    (check-within (candidate krxjvvg krxjvvg 2) 6 0.001)\n    (check-within (candidate ks sk 2) 0 0.001)\n    (check-within (candidate ty ty 6) 1 0.001)\n    (check-within (candidate otototot totototo 7) 411772 0.001)\n    (check-within (candidate uoaowbdznp npuoaowbdz 10) 348678440 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3025_minOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target.\n;; In one operation, you must apply the following changes to the array:\n;;  * Choose any element of the array nums[i] such that nums[i] > 1.\n;;  * Remove nums[i] from the array.\n;;  * Add two occurrences of nums[i] / 2 to the end of nums.\n;; Return the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1.\n;; A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n;; Example 1:\n;; Input: nums = [1,2,8], target = 7\n;; Output: 1\n;; Explanation: In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\n;; At this stage, nums contains the subsequence [1,2,4] which sums up to 7.\n;; It can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7.\n;; Example 2:\n;; Input: nums = [1,32,1,2], target = 12\n;; Output: 2\n;; Explanation: In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\n;; In the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\n;; At this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\n;; It can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12.\n;; Example 3:\n;; Input: nums = [1,32,1], target = 35\n;; Output: -1\n;; Explanation: It can be shown that no sequence of operations results in a subsequence that sums up to 35.\n;; Constraints:\n;;  * 1 <= nums.length <= 1000\n;;  * 1 <= nums[i] <= 230\n;;  * nums consists only of non-negative powers of two.\n;;  * 1 <= target < 231\n(define (minOperations nums target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3025_minOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minOperations))\n    (check-within (candidate (list 1 2 8) 7) 1 0.001)\n    (check-within (candidate (list 1 32 1 2) 12) 2 0.001)\n    (check-within (candidate (list 1 32 1) 35) -1 0.001)\n    (check-within (candidate (list 1) 1) 0 0.001)\n    (check-within (candidate (list 16 128 32) 1) 4 0.001)\n    (check-within (candidate (list 1 1) 2) 0 0.001)\n    (check-within (candidate (list 64 128 128) 2) 5 0.001)\n    (check-within (candidate (list 2) 2) 0 0.001)\n    (check-within (candidate (list 32 256 4) 2) 1 0.001)\n    (check-within (candidate (list 1 1 1) 3) 0 0.001)\n    (check-within (candidate (list 1 256 16 128) 3) 3 0.001)\n    (check-within (candidate (list 1 2) 3) 0 0.001)\n    (check-within (candidate (list 16 16 4) 3) 2 0.001)\n    (check-within (candidate (list 1 1 1 1) 4) 0 0.001)\n    (check-within (candidate (list 128 1 128 1 64) 4) 4 0.001)\n    (check-within (candidate (list 2 1 1) 4) 0 0.001)\n    (check-within (candidate (list 8 2 64 32) 4) 1 0.001)\n    (check-within (candidate (list 16 128 8 1 1) 4) 1 0.001)\n    (check-within (candidate (list 1 2 1) 4) 0 0.001)\n    (check-within (candidate (list 128 8 8 2) 4) 1 0.001)\n    (check-within (candidate (list 2 2) 4) 0 0.001)\n    (check-within (candidate (list 128 32 16) 4) 2 0.001)\n    (check-within (candidate (list 4) 4) 0 0.001)\n    (check-within (candidate (list 128 32 256) 4) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 1) 5) 0 0.001)\n    (check-within (candidate (list 1 1 128 256 1 16) 5) 2 0.001)\n    (check-within (candidate (list 2 1 1 1) 5) 0 0.001)\n    (check-within (candidate (list 32 1 8 1 64) 5) 1 0.001)\n    (check-within (candidate (list 128 256 32 1 1 1) 5) 3 0.001)\n    (check-within (candidate (list 1 1 2 1) 5) 0 0.001)\n    (check-within (candidate (list 16 16 1 1 128) 5) 2 0.001)\n    (check-within (candidate (list 2 2 1) 5) 0 0.001)\n    (check-within (candidate (list 64 32 2 8) 5) 2 0.001)\n    (check-within (candidate (list 1 4) 5) 0 0.001)\n    (check-within (candidate (list 8 64 128) 5) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1) 6) 0 0.001)\n    (check-within (candidate (list 128 1 256 1 1 1 32) 6) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 2) 6) 0 0.001)\n    (check-within (candidate (list 1 256 1 1 8 64) 6) 1 0.001)\n    (check-within (candidate (list 1 128 1 128 1 8 1) 6) 1 0.001)\n    (check-within (candidate (list 1 1 1 2 1) 6) 0 0.001)\n    (check-within (candidate (list 64 1 16 1 1 64) 6) 2 0.001)\n    (check-within (candidate (list 2 1 2 1) 6) 0 0.001)\n    (check-within (candidate (list 2 1 8 64 64) 6) 1 0.001)\n    (check-within (candidate (list 4 1 1) 6) 0 0.001)\n    (check-within (candidate (list 16 64 4 128) 6) 3 0.001)\n    (check-within (candidate (list 1 1 1 8 128 1 8) 6) 1 0.001)\n    (check-within (candidate (list 1 2 1 1 1) 6) 0 0.001)\n    (check-within (candidate (list 64 128 1 32 1 2) 6) 3 0.001)\n    (check-within (candidate (list 1 1 1 256 1 8 64) 6) 1 0.001)\n    (check-within (candidate (list 1 128 1 256 32 1) 6) 3 0.001)\n    (check-within (candidate (list 1 2 1 2) 6) 0 0.001)\n    (check-within (candidate (list 256 2 32 32 1) 6) 3 0.001)\n    (check-within (candidate (list 1 16 1 1 1 16 256) 6) 2 0.001)\n    (check-within (candidate (list 1 1 2 1 1) 6) 0 0.001)\n    (check-within (candidate (list 1 1 64 8 16 1) 6) 1 0.001)\n    (check-within (candidate (list 1 16 128 1 1 32 1) 6) 2 0.001)\n    (check-within (candidate (list 128 1 1 1 64 32) 6) 3 0.001)\n    (check-within (candidate (list 64 16 16 1 1) 6) 2 0.001)\n    (check-within (candidate (list 32 1 1 32 1 64 1) 6) 3 0.001)\n    (check-within (candidate (list 8 64 2 1 1 8) 6) 1 0.001)\n    (check-within (candidate (list 1 1 256 1 64 1 128) 6) 4 0.001)\n    (check-within (candidate (list 1 1 64 64 32 2) 6) 3 0.001)\n    (check-within (candidate (list 2 32 128 1 64) 6) 3 0.001)\n    (check-within (candidate (list 2 2 2) 6) 0 0.001)\n    (check-within (candidate (list 64 8 2 128) 6) 1 0.001)\n    (check-within (candidate (list 4 2) 6) 0 0.001)\n    (check-within (candidate (list 8 8 16) 6) 2 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1) 7) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 128 1 64 8) 7) 1 0.001)\n    (check-within (candidate (list 2 1 1 1 1 1) 7) 0 0.001)\n    (check-within (candidate (list 1 2 64 32 16 1 1) 7) 2 0.001)\n    (check-within (candidate (list 1 1 1 16 128 256 1 1) 7) 2 0.001)\n    (check-within (candidate (list 1 1 1 2 1 1) 7) 0 0.001)\n    (check-within (candidate (list 2 8 8 1 128 1 1) 7) 1 0.001)\n    (check-within (candidate (list 1 2 1 1 2) 7) 0 0.001)\n    (check-within (candidate (list 32 1 2 1 256 128) 7) 3 0.001)\n    (check-within (candidate (list 1 1 1 4) 7) 0 0.001)\n    (check-within (candidate (list 1 8 256 32 1) 7) 2 0.001)\n    (check-within (candidate (list 64 1 1 1 16 1 64 1) 7) 2 0.001)\n    (check-within (candidate (list 1 1 1 1 2 1) 7) 0 0.001)\n    (check-within (candidate (list 1 256 1 8 1 2 16) 7) 1 0.001)\n    (check-within (candidate (list 32 1 1 1 32 32 1 1) 7) 3 0.001)\n    (check-within (candidate (list 1 2 1 1 1 1) 7) 0 0.001)\n    (check-within (candidate (list 64 1 32 256 1 1 1) 7) 3 0.001)\n    (check-within (candidate (list 2 1 2 1 1) 7) 0 0.001)\n    (check-within (candidate (list 2 32 32 32 2 1) 7) 3 0.001)\n    (check-within (candidate (list 1 1 8 1 1 64 1 128) 7) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 2) 7) 0 0.001)\n    (check-within (candidate (list 64 128 2 128 1 1 1) 7) 4 0.001)\n    (check-within (candidate (list 1 1 1 128 8 32 1 1) 7) 1 0.001)\n    (check-within (candidate (list 64 256 1 1 1 32 2) 7) 3 0.001)\n    (check-within (candidate (list 1 2 2 1 1) 7) 0 0.001)\n    (check-within (candidate (list 1 256 64 2 1 128) 7) 4 0.001)\n    (check-within (candidate (list 256 1 1 1 64 1 1 64) 7) 4 0.001)\n    (check-within (candidate (list 2 1 8 256 1 128 1) 7) 1 0.001)\n    (check-within (candidate (list 1 1 16 1 1 256 1 128) 7) 2 0.001)\n    (check-within (candidate (list 1 8 128 1 1 1 256) 7) 1 0.001)\n    (check-within (candidate (list 2 2 1 1 1) 7) 0 0.001)\n    (check-within (candidate (list 64 2 64 1 32 1) 7) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3026_minimumPossibleSum", "language": "rkt", "prompt": "#lang racket\n;; You are given positive integers n and target.\n;; An array nums is beautiful if it meets the following conditions:\n;;  * nums.length == n.\n;;  * nums consists of pairwise distinct positive integers.\n;;  * There doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.\n;; Return the minimum possible sum that a beautiful array could have modulo 109 + 7.\n;; Example 1:\n;; Input: n = 2, target = 3\n;; Output: 4\n;; Explanation: We can see that nums = [1,3] is beautiful.\n;; - The array nums has length n = 2.\n;; - The array nums consists of pairwise distinct positive integers.\n;; - There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\n;; It can be proven that 4 is the minimum possible sum that a beautiful array could have.\n;; Example 2:\n;; Input: n = 3, target = 3\n;; Output: 8\n;; Explanation: We can see that nums = [1,3,4] is beautiful.\n;; - The array nums has length n = 3.\n;; - The array nums consists of pairwise distinct positive integers.\n;; - There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\n;; It can be proven that 8 is the minimum possible sum that a beautiful array could have.\n;; Example 3:\n;; Input: n = 1, target = 1\n;; Output: 1\n;; Explanation: We can see, that nums = [1] is beautiful.\n;; Constraints:\n;;  * 1 <= n <= 109\n;;  * 1 <= target <= 109\n(define (minimumPossibleSum n target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3026_minimumPossibleSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumPossibleSum))\n    (check-within (candidate 2 3) 4 0.001)\n    (check-within (candidate 3 3) 8 0.001)\n    (check-within (candidate 1 1) 1 0.001)\n    (check-within (candidate 16 6) 162 0.001)\n    (check-within (candidate 16 32) 136 0.001)\n    (check-within (candidate 13 50) 91 0.001)\n    (check-within (candidate 36 21) 926 0.001)\n    (check-within (candidate 40 17) 1076 0.001)\n    (check-within (candidate 37 46) 1011 0.001)\n    (check-within (candidate 33 7) 651 0.001)\n    (check-within (candidate 42 46) 1321 0.001)\n    (check-within (candidate 46 29) 1529 0.001)\n    (check-within (candidate 9 43) 45 0.001)\n    (check-within (candidate 30 31) 690 0.001)\n    (check-within (candidate 14 47) 105 0.001)\n    (check-within (candidate 5 3) 19 0.001)\n    (check-within (candidate 41 23) 1191 0.001)\n    (check-within (candidate 17 13) 219 0.001)\n    (check-within (candidate 9 13) 63 0.001)\n    (check-within (candidate 29 18) 595 0.001)\n    (check-within (candidate 21 14) 315 0.001)\n    (check-within (candidate 4 6) 12 0.001)\n    (check-within (candidate 38 15) 958 0.001)\n    (check-within (candidate 14 7) 138 0.001)\n    (check-within (candidate 18 26) 231 0.001)\n    (check-within (candidate 11 15) 94 0.001)\n    (check-within (candidate 7 8) 37 0.001)\n    (check-within (candidate 11 22) 66 0.001)\n    (check-within (candidate 36 11) 821 0.001)\n    (check-within (candidate 18 29) 227 0.001)\n    (check-within (candidate 26 17) 495 0.001)\n    (check-within (candidate 37 13) 889 0.001)\n    (check-within (candidate 46 38) 1567 0.001)\n    (check-within (candidate 13 7) 121 0.001)\n    (check-within (candidate 33 34) 817 0.001)\n    (check-within (candidate 39 12) 945 0.001)\n    (check-within (candidate 1 45) 1 0.001)\n    (check-within (candidate 37 36) 1026 0.001)\n    (check-within (candidate 16 19) 199 0.001)\n    (check-within (candidate 22 15) 358 0.001)\n    (check-within (candidate 34 42) 855 0.001)\n    (check-within (candidate 50 22) 1665 0.001)\n    (check-within (candidate 42 44) 1323 0.001)\n    (check-within (candidate 40 8) 928 0.001)\n    (check-within (candidate 7 19) 28 0.001)\n    (check-within (candidate 44 10) 1146 0.001)\n    (check-within (candidate 21 6) 267 0.001)\n    (check-within (candidate 27 26) 546 0.001)\n    (check-within (candidate 49 4) 1272 0.001)\n    (check-within (candidate 35 2) 630 0.001)\n    (check-within (candidate 32 29) 780 0.001)\n    (check-within (candidate 20 41) 210 0.001)\n    (check-within (candidate 30 48) 603 0.001)\n    (check-within (candidate 12 34) 78 0.001)\n    (check-within (candidate 50 44) 1863 0.001)\n    (check-within (candidate 42 26) 1251 0.001)\n    (check-within (candidate 3 18) 6 0.001)\n    (check-within (candidate 11 3) 76 0.001)\n    (check-within (candidate 38 29) 1077 0.001)\n    (check-within (candidate 17 24) 208 0.001)\n    (check-within (candidate 50 31) 1800 0.001)\n    (check-within (candidate 32 41) 768 0.001)\n    (check-within (candidate 12 24) 78 0.001)\n    (check-within (candidate 35 43) 924 0.001)\n    (check-within (candidate 9 47) 45 0.001)\n    (check-within (candidate 32 26) 756 0.001)\n    (check-within (candidate 6 42) 21 0.001)\n    (check-within (candidate 11 1) 66 0.001)\n    (check-within (candidate 11 24) 66 0.001)\n    (check-within (candidate 39 38) 1140 0.001)\n    (check-within (candidate 18 8) 213 0.001)\n    (check-within (candidate 29 5) 489 0.001)\n    (check-within (candidate 44 6) 1072 0.001)\n    (check-within (candidate 29 30) 631 0.001)\n    (check-within (candidate 13 47) 91 0.001)\n    (check-within (candidate 46 21) 1441 0.001)\n    (check-within (candidate 46 6) 1167 0.001)\n    (check-within (candidate 27 30) 546 0.001)\n    (check-within (candidate 5 35) 15 0.001)\n    (check-within (candidate 12 32) 78 0.001)\n    (check-within (candidate 13 39) 91 0.001)\n    (check-within (candidate 10 11) 80 0.001)\n    (check-within (candidate 46 14) 1315 0.001)\n    (check-within (candidate 37 18) 927 0.001)\n    (check-within (candidate 32 8) 612 0.001)\n    (check-within (candidate 26 14) 465 0.001)\n    (check-within (candidate 33 41) 821 0.001)\n    (check-within (candidate 44 39) 1465 0.001)\n    (check-within (candidate 3 21) 6 0.001)\n    (check-within (candidate 9 11) 65 0.001)\n    (check-within (candidate 16 43) 136 0.001)\n    (check-within (candidate 7 22) 28 0.001)\n    (check-within (candidate 21 49) 231 0.001)\n    (check-within (candidate 23 16) 381 0.001)\n    (check-within (candidate 33 32) 816 0.001)\n    (check-within (candidate 22 1) 253 0.001)\n    (check-within (candidate 5 47) 15 0.001)\n    (check-within (candidate 38 7) 846 0.001)\n    (check-within (candidate 38 24) 1027 0.001)\n    (check-within (candidate 13 36) 91 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3031_constructProductMatrix", "language": "rkt", "prompt": "#lang racket\n;;     Given a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met:\n;; * Each element p[i][j] is calculated as the product of all elements in grid except for the element grid[i][j]. This product is then taken modulo 12345.\n;;     Return the product matrix of grid.\n;;     Example 1:\n;;     Input: grid = [[1,2],[3,4]]\n;;     Output: [[24,12],[8,6]]\n;;     Explanation: p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\n;;     p[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\n;;     p[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\n;;     p[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\n;;     So the answer is [[24,12],[8,6]].\n;;     Example 2:\n;;     Input: grid = [[12345],[2],[1]]\n;;     Output: [[2],[0],[0]]\n;;     Explanation: p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\n;;     p[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\n;;     p[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\n;;     So the answer is [[2],[0],[0]].\n;;     Constraints:\n;; * 1 <= n == grid.length\u00a0<= 105\n;; * 1 <= m == grid[i].length\u00a0<= 105\n;; * 2 <= n * m <= 105\n;; * 1 <= grid[i][j] <= 109\n(define (constructProductMatrix grid)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3031_constructProductMatrix.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate constructProductMatrix))\n    (check-within (candidate (list (list 1 2) (list 3 4))) (list (list 24 12) (list 8 6)) 0.001)\n    (check-within (candidate (list (list 12345) (list 2) (list 1))) (list (list 2) (list 0) (list 0)) 0.001)\n    (check-within (candidate (list (list 1) (list 2))) (list (list 2) (list 1)) 0.001)\n    (check-within (candidate (list (list 1 2))) (list (list 2 1)) 0.001)\n    (check-within (candidate (list (list 12345 12345))) (list (list 0 0)) 0.001)\n    (check-within (candidate (list (list 1) (list 4))) (list (list 4) (list 1)) 0.001)\n    (check-within (candidate (list (list 3) (list 4))) (list (list 4) (list 3)) 0.001)\n    (check-within (candidate (list (list 4) (list 3))) (list (list 3) (list 4)) 0.001)\n    (check-within (candidate (list (list 1 1 1))) (list (list 1 1 1)) 0.001)\n    (check-within (candidate (list (list 2 1 1))) (list (list 1 2 2)) 0.001)\n    (check-within (candidate (list (list 3) (list 5) (list 2))) (list (list 10) (list 6) (list 15)) 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 1) (list 6 4))) (list (list 48 24) (list 48 48) (list 8 12)) 0.001)\n    (check-within (candidate (list (list 1 2 2) (list 1 4 3))) (list (list 48 24 24) (list 48 12 16)) 0.001)\n    (check-within (candidate (list (list 2) (list 7) (list 2) (list 6))) (list (list 84) (list 24) (list 84) (list 28)) 0.001)\n    (check-within (candidate (list (list 3) (list 4) (list 7) (list 7))) (list (list 196) (list 147) (list 84) (list 84)) 0.001)\n    (check-within (candidate (list (list 3 1 1) (list 1 3 4))) (list (list 12 36 36) (list 36 12 9)) 0.001)\n    (check-within (candidate (list (list 4) (list 8) (list 3) (list 7))) (list (list 168) (list 84) (list 224) (list 96)) 0.001)\n    (check-within (candidate (list (list 5) (list 8) (list 8) (list 3))) (list (list 192) (list 120) (list 120) (list 320)) 0.001)\n    (check-within (candidate (list (list 6) (list 5) (list 8) (list 5))) (list (list 200) (list 240) (list 150) (list 240)) 0.001)\n    (check-within (candidate (list (list 8) (list 1) (list 3) (list 8))) (list (list 24) (list 192) (list 64) (list 24)) 0.001)\n    (check-within (candidate (list (list 1) (list 10) (list 3) (list 10) (list 9))) (list (list 2700) (list 270) (list 900) (list 270) (list 300)) 0.001)\n    (check-within (candidate (list (list 1 1 1 1 1))) (list (list 1 1 1 1 1)) 0.001)\n    (check-within (candidate (list (list 1 1 2 2 1))) (list (list 4 4 2 2 4)) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 3 3 5) (list 3 4 2))) (list (list 6480 3240 2160) (list 2160 2160 1296) (list 2160 1620 3240)) 0.001)\n    (check-within (candidate (list (list 2) (list 7) (list 5) (list 3) (list 4))) (list (list 420) (list 120) (list 168) (list 280) (list 210)) 0.001)\n    (check-within (candidate (list (list 2 2 2 2 1))) (list (list 8 8 8 8 16)) 0.001)\n    (check-within (candidate (list (list 2 2 4 4) (list 3 2 1 4))) (list (list 768 768 384 384) (list 512 768 1536 384)) 0.001)\n    (check-within (candidate (list (list 2 4 1 1) (list 3 4 4 1))) (list (list 192 96 384 384) (list 128 96 96 384)) 0.001)\n    (check-within (candidate (list (list 3 1 1 4) (list 1 4 1 1))) (list (list 16 48 48 12) (list 48 12 48 48)) 0.001)\n    (check-within (candidate (list (list 3 2 5) (list 6 4 3) (list 6 3 1))) (list (list 615 7095 7776) (list 6480 9720 615) (list 6480 615 1845)) 0.001)\n    (check-within (candidate (list (list 5 5 5) (list 4 3 1) (list 4 5 1))) (list (list 6000 6000 6000) (list 7500 10000 5310) (list 7500 6000 5310)) 0.001)\n    (check-within (candidate (list (list 6 3) (list 1 5) (list 2 7) (list 6 5))) (list (list 6300 255) (list 765 7560) (list 6555 5400) (list 6300 7560)) 0.001)\n    (check-within (candidate (list (list 6 3 2) (list 2 3 1) (list 5 5 4))) (list (list 3600 7200 10800) (list 10800 7200 9255) (list 4320 4320 5400)) 0.001)\n    (check-within (candidate (list (list 6 5 3) (list 4 4 5) (list 3 2 5))) (list (list 11310 6165 10275) (list 4620 4620 6165) (list 10275 9240 6165)) 0.001)\n    (check-within (candidate (list (list 8) (list 5) (list 5) (list 9) (list 8))) (list (list 1800) (list 2880) (list 2880) (list 1600) (list 1800)) 0.001)\n    (check-within (candidate (list (list 10) (list 5) (list 6) (list 8) (list 6))) (list (list 1440) (list 2880) (list 2400) (list 1800) (list 2400)) 0.001)\n    (check-within (candidate (list (list 10) (list 9) (list 3) (list 4) (list 3))) (list (list 324) (list 360) (list 1080) (list 810) (list 1080)) 0.001)\n    (check-within (candidate (list (list 1 1 1 2 2 1))) (list (list 4 4 4 2 2 4)) 0.001)\n    (check-within (candidate (list (list 1 1 2 1 2 1))) (list (list 4 4 2 4 2 4)) 0.001)\n    (check-within (candidate (list (list 1 1 2 1 2 2))) (list (list 8 8 4 8 4 4)) 0.001)\n    (check-within (candidate (list (list 1 1 2 2 1 2))) (list (list 8 8 4 4 8 4)) 0.001)\n    (check-within (candidate (list (list 1 1 2 2 2 2))) (list (list 16 16 8 8 8 8)) 0.001)\n    (check-within (candidate (list (list 1 1 3 3) (list 3 4 4 2) (list 6 6 3 4))) (list (list 2898 2898 966 966) (list 966 6897 6897 1449) (list 483 483 966 6897)) 0.001)\n    (check-within (candidate (list (list 1 2 1 1 1 2))) (list (list 4 2 4 4 4 2)) 0.001)\n    (check-within (candidate (list (list 1 2 1 1 2 2))) (list (list 8 4 8 8 4 4)) 0.001)\n    (check-within (candidate (list (list 1 2 2 4 3) (list 3 4 1 4 2))) (list (list 4608 2304 2304 1152 1536) (list 1536 1152 4608 1152 2304)) 0.001)\n    (check-within (candidate (list (list 1 3 1 3 1) (list 2 1 3 2 3))) (list (list 324 108 324 108 324) (list 162 324 108 162 108)) 0.001)\n    (check-within (candidate (list (list 1 3 3 3 4) (list 2 2 1 4 4))) (list (list 6912 2304 2304 2304 1728) (list 3456 3456 6912 1728 1728)) 0.001)\n    (check-within (candidate (list (list 1 4 5) (list 1 3 2) (list 7 2 6) (list 6 2 2))) (list (list 7365 11100 11349) (list 7365 6570 9855) (list 9870 9855 3285) (list 3285 9855 9855)) 0.001)\n    (check-within (candidate (list (list 1 6 6 4) (list 4 1 2 5) (list 5 4 6 2))) (list (list 12105 8190 8190 12285) (list 12285 12105 12225 4890) (list 4890 12285 8190 12225)) 0.001)\n    (check-within (candidate (list (list 2 1 3 2 1) (list 3 1 3 1 2))) (list (list 108 216 72 108 216) (list 72 216 72 216 108)) 0.001)\n    (check-within (candidate (list (list 2 2 2 1 1 1))) (list (list 4 4 4 8 8 8)) 0.001)\n    (check-within (candidate (list (list 2 2 2 2 1 2))) (list (list 16 16 16 16 32 16)) 0.001)\n    (check-within (candidate (list (list 2 2 3 2 3) (list 3 1 3 2 4))) (list (list 2592 2592 1728 2592 1728) (list 1728 5184 1728 2592 1296)) 0.001)\n    (check-within (candidate (list (list 2 3 4) (list 2 4 2) (list 1 8 1) (list 8 8 8))) (list (list 8697 5798 10521) (list 8697 10521 8697) (list 5049 11433 5049) (list 11433 11433 11433)) 0.001)\n    (check-within (candidate (list (list 2 4 4 5) (list 5 5 1 4) (list 4 2 2 5))) (list (list 10405 11375 11375 9100) (list 9100 9100 8465 11375) (list 11375 10405 10405 9100)) 0.001)\n    (check-within (candidate (list (list 3 4 1 1) (list 3 1 4 4) (list 1 5 1 5))) (list (list 4800 3600 2055 2055) (list 4800 2055 3600 3600) (list 2055 2880 2055 2880)) 0.001)\n    (check-within (candidate (list (list 3 4 6 3) (list 4 5 4 4) (list 5 2 6 3))) (list (list 11625 11805 11985 11625) (list 11805 6975 11805 11805) (list 6975 11265 11985 11625)) 0.001)\n    (check-within (candidate (list (list 4 1 4 4 4) (list 2 2 2 3 3))) (list (list 4608 6087 4608 4608 4608) (list 9216 9216 9216 6144 6144)) 0.001)\n    (check-within (candidate (list (list 4 8 8) (list 6 2 5) (list 7 3 7) (list 6 3 5))) (list (list 3525 7935 7935) (list 6465 7050 2820) (list 7305 585 7305) (list 6465 585 2820)) 0.001)\n    (check-within (candidate (list (list 6) (list 8) (list 2) (list 12) (list 6) (list 4))) (list (list 4608) (list 3456) (list 1479) (list 2304) (list 4608) (list 6912)) 0.001)\n    (check-within (candidate (list (list 6 2 5 2) (list 5 5 2 3) (list 4 6 5 2))) (list (list 3990 11970 12195 11970) (list 12195 12195 11970 7980) (list 5985 3990 12195 11970)) 0.001)\n    (check-within (candidate (list (list 6 3 4 3) (list 6 4 2 5) (list 3 3 6 1))) (list (list 9795 7245 8520 7245) (list 9795 8520 4695 4347) (list 7245 7245 9795 9390)) 0.001)\n    (check-within (candidate (list (list 6 5 6 6) (list 3 2 6 4) (list 1 3 4 1))) (list (list 2415 2898 2415 2415) (list 4830 7245 2415 9795) (list 2145 4830 9795 2145)) 0.001)\n    (check-within (candidate (list (list 7) (list 11) (list 12) (list 7) (list 12) (list 7))) (list (list 3546) (list 12) (list 8241) (list 3546) (list 8241) (list 3546)) 0.001)\n    (check-within (candidate (list (list 7 4 5) (list 2 1 2) (list 5 3 8) (list 3 6 7))) (list (list 12135 5805 2175) (list 11610 10875 11610) (list 2175 7740 9075) (list 7740 3870 12135)) 0.001)\n    (check-within (candidate (list (list 8) (list 6) (list 7) (list 2) (list 7) (list 4))) (list (list 2352) (list 3136) (list 2688) (list 9408) (list 2688) (list 4704)) 0.001)\n    (check-within (candidate (list (list 8) (list 6) (list 7) (list 5) (list 3) (list 6))) (list (list 3780) (list 5040) (list 4320) (list 6048) (list 10080) (list 5040)) 0.001)\n    (check-within (candidate (list (list 8 1) (list 9 6) (list 2 4) (list 1 3) (list 3 6))) (list (list 10983 1449) (list 8391 6414) (list 6897 9621) (list 1449 483) (list 483 6414)) 0.001)\n    (check-within (candidate (list (list 8 4 3) (list 7 7 4) (list 1 2 3) (list 5 2 4))) (list (list 8955 5565 11535) (list 3180 3180 5565) (list 9915 11130 11535) (list 1983 11130 5565)) 0.001)\n    (check-within (candidate (list (list 12) (list 8) (list 4) (list 3) (list 9) (list 5))) (list (list 4320) (list 6480) (list 615) (list 4935) (list 5760) (list 10368)) 0.001)\n    (check-within (candidate (list (list 1 1 1 1 2 2 2))) (list (list 8 8 8 8 4 4 4)) 0.001)\n    (check-within (candidate (list (list 1 1 1 2 1 1 1))) (list (list 2 2 2 1 2 2 2)) 0.001)\n    (check-within (candidate (list (list 1 1 2 1 2 1 2))) (list (list 8 8 4 8 4 8 4)) 0.001)\n    (check-within (candidate (list (list 1 1 6 5 6) (list 1 6 6 2 5) (list 3 4 1 1 4))) (list (list 11805 11805 12255 4830 12255) (list 11805 12255 12255 12075 4830) (list 12165 12210 11805 11805 12210)) 0.001)\n    (check-within (candidate (list (list 1 2 1 1 1 2 2))) (list (list 8 4 8 8 8 4 4)) 0.001)\n    (check-within (candidate (list (list 1 2 1 2 2 1 1))) (list (list 8 4 8 4 4 8 8)) 0.001)\n    (check-within (candidate (list (list 1 3 1 2 1 2) (list 3 2 3 4 2 3))) (list (list 5184 1728 5184 2592 5184 2592) (list 1728 2592 1728 1296 2592 1728)) 0.001)\n    (check-within (candidate (list (list 1 3 5 2) (list 1 3 6 5) (list 8 1 2 7) (list 6 2 3 5))) (list (list 2895 9195 10455 7620) (list 2895 9195 10770 10455) (list 1905 2895 7620 10995) (list 10770 7620 9195 10455)) 0.001)\n    (check-within (candidate (list (list 1 4 4 4 3 3) (list 1 1 3 4 4 1))) (list (list 2958 6912 6912 6912 9216 9216) (list 2958 2958 9216 6912 6912 2958)) 0.001)\n    (check-within (candidate (list (list 1 5 5 6) (list 4 7 6 1) (list 2 3 3 6) (list 3 6 3 7))) (list (list 6570 11190 11190 1095) (list 7815 11520 1095 6570) (list 3285 2190 2190 1095) (list 2190 1095 2190 11520)) 0.001)\n    (check-within (candidate (list (list 1 6 4 4 1) (list 6 2 5 1 4) (list 6 4 3 5 6))) (list (list 3705 10905 10185 10185 3705) (list 10905 8025 3210 3705 10185) (list 10905 10185 9465 3210 10905)) 0.001)\n    (check-within (candidate (list (list 1 7 2 8) (list 3 7 2 5) (list 2 3 5 6) (list 5 4 2 7))) (list (list 4065 7635 8205 11310) (list 9585 7635 8205 8220) (list 8205 9585 8220 10965) (list 8220 10275 8205 7635)) 0.001)\n    (check-within (candidate (list (list 2 1 1 1 1 2 2))) (list (list 4 8 8 8 8 4 4)) 0.001)\n    (check-within (candidate (list (list 2 1 1 1 2 2 1))) (list (list 4 8 8 8 4 4 8)) 0.001)\n    (check-within (candidate (list (list 2 1 2 2 2 2 2))) (list (list 32 64 32 32 32 32 32)) 0.001)\n    (check-within (candidate (list (list 2 1 3 2 4 4) (list 1 3 2 2 4 1))) (list (list 4608 9216 3072 4608 2304 2304) (list 9216 3072 4608 4608 2304 9216)) 0.001)\n    (check-within (candidate (list (list 2 2 2 2 1 2 1))) (list (list 16 16 16 16 32 16 32)) 0.001)\n    (check-within (candidate (list (list 2 4 3 3 3 4) (list 3 1 4 3 4 2))) (list (list 966 483 8874 8874 8874 483) (list 8874 1932 483 8874 483 966)) 0.001)\n    (check-within (candidate (list (list 2 5 4 8) (list 4 6 3 3) (list 1 5 1 4) (list 8 6 6 5))) (list (list 30 4950 15 6180) (list 15 4125 8250 8250) (list 60 4950 60 15) (list 6180 4125 4125 4950)) 0.001)\n    (check-within (candidate (list (list 2 7) (list 10 12) (list 2 4) (list 8 11) (list 2 12) (list 11 2))) (list (list 8340 5910) (list 6606 5505) (list 8340 4170) (list 2085 8250) (list 8340 5505) (list 8250 8340)) 0.001)\n    (check-within (candidate (list (list 2 9) (list 1 4) (list 10 12) (list 2 7) (list 4 10) (list 10 8))) (list (list 3435 10365) (list 6870 7890) (list 5625 10860) (list 3435 2745) (list 7890 5625) (list 5625 3945)) 0.001)\n    (check-within (candidate (list (list 3) (list 9) (list 5) (list 1) (list 4) (list 14) (list 12))) (list (list 5550) (list 10080) (list 5799) (list 4305) (list 10335) (list 6480) (list 7560)) 0.001)\n    (check-within (candidate (list (list 3 2 2 2 4 3) (list 4 1 3 1 1 2))) (list (list 2304 3456 3456 3456 1728 2304) (list 1728 6912 2304 6912 6912 3456)) 0.001)\n    (check-within (candidate (list (list 3 2 4 2 2 3) (list 2 2 4 1 2 3))) (list (list 9216 1479 6912 1479 1479 9216) (list 1479 1479 6912 2958 1479 9216)) 0.001)\n    (check-within (candidate (list (list 3 6 2 2 5) (list 1 4 3 4 1) (list 4 5 2 4 4))) (list (list 7590 3795 11385 11385 2085) (list 10425 11865 7590 11865 10425) (list 11865 2085 11385 11865 11865)) 0.001)\n    (check-within (candidate (list (list 4 1 5 4 5) (list 6 5 3 4 4) (list 3 2 6 2 3))) (list (list 6945 3090 8025 6945 8025) (list 8745 8025 5145 6945 6945) (list 5145 1545 8745 1545 5145)) 0.001)\n    (check-within (candidate (list (list 4 3 9) (list 3 9 10) (list 9 7 8) (list 8 4 7) (list 6 1 3))) (list (list 3255 225 75) (list 225 75 11178) (list 75 1860 7800) (list 7800 3255 1860) (list 6285 675 225)) 0.001)\n    (check-within (candidate (list (list 5 1 1 1 5) (list 3 4 2 6 6) (list 3 3 2 5 1))) (list (list 6105 5835 5835 5835 6105) (list 6060 4545 9090 3030 3030) (list 6060 6060 9090 6105 5835)) 0.001)\n    (check-within (candidate (list (list 5 3) (list 9 2) (list 2 6) (list 4 9) (list 12 2) (list 10 4))) (list (list 1050 5865) (list 10185 2625) (list 2625 9105) (list 7485 10185) (list 10725 2625) (list 525 7485)) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3032_getMaxFunctionValue", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array receiver of length n and an integer k.\n;; There are n players having a unique id in the range [0, n - 1] who will play a ball passing game, and receiver[i] is the id of the player who receives passes from the player with id i. Players can pass to themselves, i.e. receiver[i] may be equal to i.\n;; You must choose one of the n players as the starting player for the game, and the ball will be passed exactly k times starting from the chosen player.\n;; For a chosen starting player having id x, we define a function f(x) that denotes the sum of x and the ids of all players who receive the ball during the k passes, including repetitions. In other words, f(x) = x + receiver[x] + receiver[receiver[x]] + ... + receiver(k)[x].\n;; Your task is to choose a starting player having id x that maximizes the value of f(x).\n;; Return an integer denoting the maximum value of the function.\n;; Note: receiver may contain duplicates.\n;; Example 1:\n;; Pass Number Sender ID Receiver ID x + Receiver IDs \u00a0 \u00a0 \u00a0 2 1 2 1 3 2 1 0 3 3 0 2 5 4 2 1 6\n;; Input: receiver = [2,0,1], k = 4\n;; Output: 6\n;; Explanation: The table above shows a simulation of the game starting with the player having id x = 2.\n;; From the table, f(2) is equal to 6.\n;; It can be shown that 6 is the maximum achievable value of the function.\n;; Hence, the output is 6.\n;; Example 2:\n;; Pass Number Sender ID Receiver ID x + Receiver IDs \u00a0 \u00a0 \u00a0 4 1 4 3 7 2 3 2 9 3 2 1 10\n;; Input: receiver = [1,1,1,2,3], k = 3\n;; Output: 10\n;; Explanation: The table above shows a simulation of the game starting with the player having id x = 4.\n;; From the table, f(4) is equal to 10.\n;; It can be shown that 10 is the maximum achievable value of the function.\n;; Hence, the output is 10.\n;; Constraints:\n;;  * 1 <= receiver.length == n <= 105\n;;  * 0 <= receiver[i] <= n - 1\n;;  * 1 <= k <= 1010\n(define (getMaxFunctionValue receiver k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3032_getMaxFunctionValue.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate getMaxFunctionValue))\n    (check-within (candidate (list 2 0 1) 4) 6 0.001)\n    (check-within (candidate (list 1 1 1 2 3) 3) 10 0.001)\n    (check-within (candidate (list 0) 1) 0 0.001)\n    (check-within (candidate (list 0) 2) 0 0.001)\n    (check-within (candidate (list 0) 3) 0 0.001)\n    (check-within (candidate (list 0) 100) 0 0.001)\n    (check-within (candidate (list 0 0) 1) 1 0.001)\n    (check-within (candidate (list 0 0) 7) 1 0.001)\n    (check-within (candidate (list 0 0) 10) 1 0.001)\n    (check-within (candidate (list 0 0) 13) 1 0.001)\n    (check-within (candidate (list 0 0) 16) 1 0.001)\n    (check-within (candidate (list 0 1) 1) 2 0.001)\n    (check-within (candidate (list 0 1) 3) 4 0.001)\n    (check-within (candidate (list 0 1) 5) 6 0.001)\n    (check-within (candidate (list 0 1) 8) 9 0.001)\n    (check-within (candidate (list 0 1) 13) 14 0.001)\n    (check-within (candidate (list 0 1) 14) 15 0.001)\n    (check-within (candidate (list 0 1) 15) 16 0.001)\n    (check-within (candidate (list 1 0) 5) 3 0.001)\n    (check-within (candidate (list 1 0) 6) 4 0.001)\n    (check-within (candidate (list 1 0) 7) 4 0.001)\n    (check-within (candidate (list 1 0) 10) 6 0.001)\n    (check-within (candidate (list 1 0) 12) 7 0.001)\n    (check-within (candidate (list 1 0) 14) 8 0.001)\n    (check-within (candidate (list 1 0) 57) 29 0.001)\n    (check-within (candidate (list 1 1) 1) 2 0.001)\n    (check-within (candidate (list 1 1) 2) 3 0.001)\n    (check-within (candidate (list 1 1) 7) 8 0.001)\n    (check-within (candidate (list 0 0 0) 1) 2 0.001)\n    (check-within (candidate (list 0 0 0) 4) 2 0.001)\n    (check-within (candidate (list 0 0 0) 6) 2 0.001)\n    (check-within (candidate (list 0 0 0) 10) 2 0.001)\n    (check-within (candidate (list 0 0 1) 3) 3 0.001)\n    (check-within (candidate (list 0 0 1) 9) 3 0.001)\n    (check-within (candidate (list 0 0 2) 11) 24 0.001)\n    (check-within (candidate (list 0 0 2) 14) 30 0.001)\n    (check-within (candidate (list 0 0 2) 82) 166 0.001)\n    (check-within (candidate (list 0 1 0) 5) 6 0.001)\n    (check-within (candidate (list 0 1 1) 2) 4 0.001)\n    (check-within (candidate (list 0 1 2) 3) 8 0.001)\n    (check-within (candidate (list 0 1 2) 6) 14 0.001)\n    (check-within (candidate (list 1 0 0) 6) 5 0.001)\n    (check-within (candidate (list 1 0 1) 2) 3 0.001)\n    (check-within (candidate (list 1 0 2) 10) 22 0.001)\n    (check-within (candidate (list 1 1 1) 4) 6 0.001)\n    (check-within (candidate (list 1 1 1) 6) 8 0.001)\n    (check-within (candidate (list 1 1 2) 8) 18 0.001)\n    (check-within (candidate (list 1 2 0) 3) 5 0.001)\n    (check-within (candidate (list 1 2 0) 8) 9 0.001)\n    (check-within (candidate (list 1 2 1) 6) 11 0.001)\n    (check-within (candidate (list 1 2 2) 7) 16 0.001)\n    (check-within (candidate (list 2 0 2) 6) 14 0.001)\n    (check-within (candidate (list 2 1 0) 3) 4 0.001)\n    (check-within (candidate (list 2 1 0) 8) 10 0.001)\n    (check-within (candidate (list 2 1 0) 10) 12 0.001)\n    (check-within (candidate (list 2 1 1) 4) 6 0.001)\n    (check-within (candidate (list 2 1 2) 2) 6 0.001)\n    (check-within (candidate (list 2 1 2) 15) 32 0.001)\n    (check-within (candidate (list 2 2 0) 4) 6 0.001)\n    (check-within (candidate (list 2 2 0) 9) 11 0.001)\n    (check-within (candidate (list 2 2 1) 1) 3 0.001)\n    (check-within (candidate (list 2 2 1) 10) 17 0.001)\n    (check-within (candidate (list 2 2 2) 15) 32 0.001)\n    (check-within (candidate (list 0 0 3 0) 4) 5 0.001)\n    (check-within (candidate (list 0 1 0 1) 11) 14 0.001)\n    (check-within (candidate (list 0 1 1 3) 5) 18 0.001)\n    (check-within (candidate (list 0 2 1 3) 5) 18 0.001)\n    (check-within (candidate (list 0 2 3 1) 6) 15 0.001)\n    (check-within (candidate (list 0 2 3 3) 8) 27 0.001)\n    (check-within (candidate (list 0 2 3 3) 15) 48 0.001)\n    (check-within (candidate (list 0 3 3 0) 10) 5 0.001)\n    (check-within (candidate (list 1 0 0 2) 9) 9 0.001)\n    (check-within (candidate (list 1 0 1 2) 15) 12 0.001)\n    (check-within (candidate (list 1 0 3 1) 6) 8 0.001)\n    (check-within (candidate (list 1 0 3 2) 2) 8 0.001)\n    (check-within (candidate (list 1 1 0 0) 2) 4 0.001)\n    (check-within (candidate (list 1 1 0 3) 3) 12 0.001)\n    (check-within (candidate (list 1 1 1 3) 7) 24 0.001)\n    (check-within (candidate (list 1 2 0 0) 14) 16 0.001)\n    (check-within (candidate (list 1 2 0 1) 5) 9 0.001)\n    (check-within (candidate (list 1 2 3 1) 47) 96 0.001)\n    (check-within (candidate (list 1 3 0 1) 2) 7 0.001)\n    (check-within (candidate (list 1 3 3 0) 7) 13 0.001)\n    (check-within (candidate (list 2 0 0 1) 9) 12 0.001)\n    (check-within (candidate (list 2 0 0 2) 12) 15 0.001)\n    (check-within (candidate (list 2 0 2 0) 5) 12 0.001)\n    (check-within (candidate (list 2 1 0 0) 8) 11 0.001)\n    (check-within (candidate (list 2 1 0 1) 97) 100 0.001)\n    (check-within (candidate (list 2 2 2 0) 1) 4 0.001)\n    (check-within (candidate (list 2 2 3 2) 8) 23 0.001)\n    (check-within (candidate (list 2 3 2 1) 56) 115 0.001)\n    (check-within (candidate (list 2 3 3 1) 15) 33 0.001)\n    (check-within (candidate (list 2 3 3 3) 2) 9 0.001)\n    (check-within (candidate (list 3 0 0 1) 4) 8 0.001)\n    (check-within (candidate (list 3 0 0 2) 85) 145 0.001)\n    (check-within (candidate (list 3 0 1 3) 9) 30 0.001)\n    (check-within (candidate (list 3 1 1 2) 7) 11 0.001)\n    (check-within (candidate (list 3 1 2 0) 60) 122 0.001)\n    (check-within (candidate (list 3 2 0 3) 12) 39 0.001)\n    (check-within (candidate (list 3 3 0 1) 1) 4 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3034_numberOfPoints", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.\n;; Return the number of integer points on the line that are covered with any part of a car.\n;; Example 1:\n;; Input: nums = [[3,6],[1,5],[4,7]]\n;; Output: 7\n;; Explanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\n;; Example 2:\n;; Input: nums = [[1,3],[5,8]]\n;; Output: 7\n;; Explanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\n;; Constraints:\n;;  * 1 <= nums.length <= 100\n;;  * nums[i].length == 2\n;;  * 1 <= starti\u00a0<= endi\u00a0<= 100\n(define (numberOfPoints nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3034_numberOfPoints.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfPoints))\n    (check-within (candidate (list (list 3 6) (list 1 5) (list 4 7))) 7 0.001)\n    (check-within (candidate (list (list 1 3) (list 5 8))) 7 0.001)\n    (check-within (candidate (list (list 4 4) (list 9 10) (list 9 10) (list 3 8))) 8 0.001)\n    (check-within (candidate (list (list 2 5) (list 3 8) (list 1 6) (list 4 10))) 10 0.001)\n    (check-within (candidate (list (list 2 3) (list 3 9) (list 5 7) (list 4 10) (list 9 10))) 9 0.001)\n    (check-within (candidate (list (list 4 10))) 7 0.001)\n    (check-within (candidate (list (list 1 9) (list 2 10) (list 6 7) (list 8 9) (list 5 8) (list 1 3))) 10 0.001)\n    (check-within (candidate (list (list 5 10) (list 3 8) (list 3 9))) 8 0.001)\n    (check-within (candidate (list (list 2 3) (list 3 10) (list 5 8) (list 4 8) (list 2 7) (list 3 4) (list 3 10) (list 7 8))) 9 0.001)\n    (check-within (candidate (list (list 1 3) (list 2 4) (list 6 6) (list 6 9) (list 2 10) (list 4 10) (list 3 6) (list 1 4) (list 1 3))) 10 0.001)\n    (check-within (candidate (list (list 4 10) (list 3 9) (list 3 5) (list 4 10) (list 7 10) (list 1 7) (list 7 9) (list 4 8))) 10 0.001)\n    (check-within (candidate (list (list 1 6) (list 6 7) (list 1 6) (list 1 3) (list 1 8) (list 2 9) (list 3 8) (list 1 9))) 9 0.001)\n    (check-within (candidate (list (list 1 6) (list 8 10) (list 3 7) (list 6 10) (list 3 10) (list 1 10) (list 7 8))) 10 0.001)\n    (check-within (candidate (list (list 6 8) (list 2 8) (list 3 9) (list 3 5) (list 6 10) (list 1 2) (list 5 5))) 10 0.001)\n    (check-within (candidate (list (list 4 5) (list 5 9) (list 2 3) (list 5 10) (list 1 9) (list 1 8) (list 2 9) (list 2 10))) 10 0.001)\n    (check-within (candidate (list (list 8 9) (list 6 7) (list 6 9) (list 3 5) (list 7 10) (list 5 9) (list 10 10))) 8 0.001)\n    (check-within (candidate (list (list 6 8) (list 7 10) (list 9 10) (list 6 10) (list 1 10) (list 5 10))) 10 0.001)\n    (check-within (candidate (list (list 9 9) (list 2 8) (list 5 8) (list 3 5) (list 2 2) (list 7 9) (list 5 10))) 9 0.001)\n    (check-within (candidate (list (list 3 9) (list 5 9))) 7 0.001)\n    (check-within (candidate (list (list 5 10) (list 2 3) (list 3 10) (list 4 7) (list 1 9) (list 5 10) (list 2 6) (list 1 7) (list 8 9) (list 2 9))) 10 0.001)\n    (check-within (candidate (list (list 2 3) (list 2 3) (list 1 5))) 5 0.001)\n    (check-within (candidate (list (list 4 7) (list 4 7))) 4 0.001)\n    (check-within (candidate (list (list 7 9) (list 5 9) (list 2 10) (list 9 9) (list 5 8) (list 4 6) (list 6 7) (list 3 9) (list 2 4))) 9 0.001)\n    (check-within (candidate (list (list 5 9) (list 7 7) (list 3 10) (list 7 9) (list 3 4) (list 1 1) (list 1 1) (list 1 7) (list 1 2) (list 6 6))) 10 0.001)\n    (check-within (candidate (list (list 7 8) (list 1 7) (list 5 5) (list 4 4) (list 5 8) (list 2 6))) 8 0.001)\n    (check-within (candidate (list (list 3 5) (list 8 8) (list 5 10) (list 1 7) (list 2 6) (list 7 10) (list 6 6) (list 5 9) (list 8 9) (list 5 6))) 10 0.001)\n    (check-within (candidate (list (list 4 9))) 6 0.001)\n    (check-within (candidate (list (list 2 7) (list 1 9) (list 5 6) (list 6 8) (list 1 10))) 10 0.001)\n    (check-within (candidate (list (list 1 4) (list 2 4) (list 7 10) (list 2 8) (list 1 6) (list 1 10) (list 3 5))) 10 0.001)\n    (check-within (candidate (list (list 1 4))) 4 0.001)\n    (check-within (candidate (list (list 6 9) (list 4 7))) 6 0.001)\n    (check-within (candidate (list (list 5 7))) 3 0.001)\n    (check-within (candidate (list (list 1 9) (list 6 8) (list 4 7) (list 7 9) (list 8 9) (list 7 9) (list 4 6) (list 6 8) (list 4 9) (list 8 8))) 9 0.001)\n    (check-within (candidate (list (list 3 6) (list 3 5) (list 1 9) (list 3 4) (list 3 8) (list 2 7) (list 3 8) (list 2 8))) 9 0.001)\n    (check-within (candidate (list (list 2 5) (list 8 8) (list 1 6) (list 4 4) (list 4 5) (list 2 4))) 7 0.001)\n    (check-within (candidate (list (list 4 7) (list 2 6))) 6 0.001)\n    (check-within (candidate (list (list 5 8) (list 4 10) (list 2 9))) 9 0.001)\n    (check-within (candidate (list (list 5 9) (list 2 4) (list 2 6))) 8 0.001)\n    (check-within (candidate (list (list 2 3) (list 1 7) (list 1 8) (list 7 9) (list 1 5))) 9 0.001)\n    (check-within (candidate (list (list 6 8) (list 6 7) (list 1 6) (list 2 10) (list 2 2) (list 6 8) (list 2 8) (list 8 9))) 10 0.001)\n    (check-within (candidate (list (list 3 4) (list 2 5) (list 4 10) (list 3 6) (list 4 6) (list 1 8) (list 2 6) (list 6 9) (list 4 10) (list 3 6))) 10 0.001)\n    (check-within (candidate (list (list 3 5) (list 2 5) (list 8 8))) 5 0.001)\n    (check-within (candidate (list (list 5 8) (list 1 3) (list 8 8))) 7 0.001)\n    (check-within (candidate (list (list 2 8) (list 5 7) (list 2 3) (list 2 7) (list 5 8) (list 1 10) (list 4 7) (list 10 10) (list 6 10))) 10 0.001)\n    (check-within (candidate (list (list 1 3) (list 5 10) (list 3 10) (list 5 9))) 10 0.001)\n    (check-within (candidate (list (list 4 10) (list 3 6))) 8 0.001)\n    (check-within (candidate (list (list 7 8) (list 6 10) (list 7 8) (list 6 10) (list 7 10))) 5 0.001)\n    (check-within (candidate (list (list 7 7) (list 4 4) (list 2 7) (list 2 3) (list 4 6) (list 4 8))) 7 0.001)\n    (check-within (candidate (list (list 3 4) (list 1 4) (list 4 8) (list 1 7) (list 2 10) (list 8 10))) 10 0.001)\n    (check-within (candidate (list (list 1 4) (list 7 10) (list 1 5) (list 8 9) (list 3 5) (list 3 8) (list 6 7) (list 3 5) (list 1 3) (list 2 8))) 10 0.001)\n    (check-within (candidate (list (list 1 6) (list 5 10) (list 7 8) (list 7 10) (list 1 3))) 10 0.001)\n    (check-within (candidate (list (list 2 3) (list 4 4) (list 2 7) (list 5 5) (list 4 7) (list 6 9) (list 2 4))) 8 0.001)\n    (check-within (candidate (list (list 6 8) (list 6 8) (list 6 10))) 5 0.001)\n    (check-within (candidate (list (list 3 10) (list 3 5) (list 2 3) (list 7 9))) 9 0.001)\n    (check-within (candidate (list (list 4 4) (list 8 10) (list 2 7) (list 8 9) (list 1 8) (list 1 3) (list 1 9) (list 7 7) (list 3 6) (list 3 5))) 10 0.001)\n    (check-within (candidate (list (list 2 6) (list 1 4) (list 3 8) (list 1 9))) 9 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 9) (list 2 9) (list 6 10) (list 3 5) (list 1 2))) 10 0.001)\n    (check-within (candidate (list (list 6 7) (list 1 10) (list 4 4) (list 5 5) (list 5 10) (list 2 3) (list 2 8) (list 9 10))) 10 0.001)\n    (check-within (candidate (list (list 1 1) (list 2 9) (list 3 3) (list 2 2) (list 2 4) (list 8 9) (list 3 9))) 9 0.001)\n    (check-within (candidate (list (list 4 6) (list 1 10) (list 4 10) (list 1 10) (list 5 7))) 10 0.001)\n    (check-within (candidate (list (list 2 3) (list 9 10) (list 2 9) (list 2 8) (list 8 9) (list 1 2))) 10 0.001)\n    (check-within (candidate (list (list 4 9) (list 4 6) (list 2 7) (list 1 9) (list 6 10) (list 7 10) (list 3 9) (list 2 9))) 10 0.001)\n    (check-within (candidate (list (list 7 10) (list 4 10) (list 4 10) (list 4 5) (list 3 10) (list 2 4) (list 8 9) (list 3 9) (list 4 5) (list 6 9))) 9 0.001)\n    (check-within (candidate (list (list 2 7) (list 2 5) (list 3 3) (list 4 4) (list 5 6) (list 3 4) (list 4 10) (list 5 5) (list 4 5))) 9 0.001)\n    (check-within (candidate (list (list 3 7) (list 7 8) (list 2 6) (list 10 10) (list 1 4))) 9 0.001)\n    (check-within (candidate (list (list 3 4) (list 3 8) (list 5 8))) 6 0.001)\n    (check-within (candidate (list (list 6 9) (list 1 8) (list 7 9))) 9 0.001)\n    (check-within (candidate (list (list 7 8) (list 1 5))) 7 0.001)\n    (check-within (candidate (list (list 5 10) (list 5 9) (list 5 6) (list 6 8) (list 1 5) (list 7 8) (list 3 5))) 10 0.001)\n    (check-within (candidate (list (list 6 8))) 3 0.001)\n    (check-within (candidate (list (list 5 5) (list 5 9) (list 2 8) (list 5 9) (list 5 6))) 8 0.001)\n    (check-within (candidate (list (list 7 9) (list 3 8) (list 1 8) (list 8 8) (list 5 9) (list 1 3) (list 2 6))) 9 0.001)\n    (check-within (candidate (list (list 3 6) (list 4 8) (list 7 9) (list 3 3) (list 9 10) (list 5 8) (list 1 2) (list 7 8) (list 3 10))) 10 0.001)\n    (check-within (candidate (list (list 1 8) (list 4 5) (list 1 5) (list 6 7) (list 2 9))) 9 0.001)\n    (check-within (candidate (list (list 6 8) (list 2 8) (list 6 9) (list 10 10) (list 2 5) (list 4 6) (list 1 10) (list 8 8) (list 9 10))) 10 0.001)\n    (check-within (candidate (list (list 9 10) (list 4 8) (list 9 10) (list 5 7) (list 2 5) (list 2 7) (list 6 10) (list 5 7) (list 9 10))) 9 0.001)\n    (check-within (candidate (list (list 1 7) (list 2 7) (list 2 4) (list 6 7))) 7 0.001)\n    (check-within (candidate (list (list 2 10) (list 4 5) (list 4 10))) 9 0.001)\n    (check-within (candidate (list (list 2 10) (list 3 6) (list 2 10) (list 4 10) (list 4 9) (list 10 10) (list 1 1))) 10 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 9) (list 4 7) (list 6 6) (list 4 5) (list 2 4) (list 2 7))) 8 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 7))) 7 0.001)\n    (check-within (candidate (list (list 1 8) (list 2 8))) 8 0.001)\n    (check-within (candidate (list (list 3 7))) 5 0.001)\n    (check-within (candidate (list (list 1 6) (list 10 10) (list 5 7) (list 2 9))) 10 0.001)\n    (check-within (candidate (list (list 7 8))) 2 0.001)\n    (check-within (candidate (list (list 2 10) (list 1 10) (list 5 9) (list 7 7) (list 1 6) (list 3 5) (list 2 9) (list 2 10) (list 7 10))) 10 0.001)\n    (check-within (candidate (list (list 3 8) (list 2 9) (list 6 10) (list 4 8) (list 3 4) (list 2 3) (list 5 9) (list 1 5) (list 7 9))) 10 0.001)\n    (check-within (candidate (list (list 6 7) (list 1 5) (list 4 6) (list 4 9) (list 6 8) (list 1 7) (list 5 10) (list 3 4))) 10 0.001)\n    (check-within (candidate (list (list 1 2) (list 4 10) (list 3 7) (list 2 10) (list 1 2) (list 3 4) (list 9 9) (list 5 9) (list 3 7) (list 3 5))) 10 0.001)\n    (check-within (candidate (list (list 1 6) (list 3 4) (list 4 8) (list 8 10) (list 3 8))) 10 0.001)\n    (check-within (candidate (list (list 3 6) (list 8 10) (list 2 5) (list 9 10) (list 2 8) (list 5 10) (list 7 10) (list 8 8) (list 8 10) (list 8 9))) 9 0.001)\n    (check-within (candidate (list (list 1 8) (list 2 6) (list 2 3) (list 3 6) (list 1 10) (list 5 8))) 10 0.001)\n    (check-within (candidate (list (list 3 7) (list 7 10) (list 6 6) (list 4 10) (list 5 10) (list 2 8) (list 1 10) (list 7 8) (list 6 6) (list 4 7))) 10 0.001)\n    (check-within (candidate (list (list 6 9))) 4 0.001)\n    (check-within (candidate (list (list 7 8) (list 1 1) (list 4 10) (list 1 9) (list 2 6) (list 4 6) (list 8 9) (list 4 5))) 10 0.001)\n    (check-within (candidate (list (list 2 7) (list 7 10) (list 7 8) (list 3 5) (list 1 7) (list 1 4))) 10 0.001)\n    (check-within (candidate (list (list 2 9))) 8 0.001)\n    (check-within (candidate (list (list 7 9) (list 2 2) (list 2 7))) 8 0.001)\n    (check-within (candidate (list (list 2 10) (list 8 9) (list 6 8) (list 9 10))) 9 0.001)\n    (check-within (candidate (list (list 3 3))) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3045_minimumRightShifts", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible.\n;; A right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.\n;; Example 1:\n;; Input: nums = [3,4,5,1,2]\n;; Output: 2\n;; Explanation:\n;; After the first right shift, nums = [2,3,4,5,1].\n;; After the second right shift, nums = [1,2,3,4,5].\n;; Now nums is sorted; therefore the answer is 2.\n;; Example 2:\n;; Input: nums = [1,3,5]\n;; Output: 0\n;; Explanation: nums is already sorted therefore, the answer is 0.\n;; Example 3:\n;; Input: nums = [2,1,4]\n;; Output: -1\n;; Explanation: It's impossible to sort the array using right shifts.\n;; Constraints:\n;;  * 1 <= nums.length <= 100\n;;  * 1 <= nums[i] <= 100\n;;  * nums contains distinct integers.\n(define (minimumRightShifts nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3045_minimumRightShifts.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumRightShifts))\n    (check-within (candidate (list 3 4 5 1 2)) 2 0.001)\n    (check-within (candidate (list 1 3 5)) 0 0.001)\n    (check-within (candidate (list 2 1 4)) -1 0.001)\n    (check-within (candidate (list 31 72 79 25)) 1 0.001)\n    (check-within (candidate (list 27 33 42 58 81 8 9 17)) 3 0.001)\n    (check-within (candidate (list 72 13 21 35 52)) 4 0.001)\n    (check-within (candidate (list 65 73 77 1)) 1 0.001)\n    (check-within (candidate (list 100 8 14 68 80 84)) 5 0.001)\n    (check-within (candidate (list 53 60 64 69 98 40)) 1 0.001)\n    (check-within (candidate (list 21)) 0 0.001)\n    (check-within (candidate (list 78 12 18 21 23 36 64 70)) 7 0.001)\n    (check-within (candidate (list 25 26 53 91 92 99 10 24)) 2 0.001)\n    (check-within (candidate (list 63 51 65 87 6 17 32 14 42 46)) -1 0.001)\n    (check-within (candidate (list 43 46 75 76 85 96 9 19 25)) 3 0.001)\n    (check-within (candidate (list 5)) 0 0.001)\n    (check-within (candidate (list 35 72 76 82 96 97 24 26)) 2 0.001)\n    (check-within (candidate (list 82 30 94 55 76 51 3 89 52 96)) -1 0.001)\n    (check-within (candidate (list 57 59 88 97 6 27 41 46 52)) 5 0.001)\n    (check-within (candidate (list 17)) 0 0.001)\n    (check-within (candidate (list 62)) 0 0.001)\n    (check-within (candidate (list 24 46 55 61 71 78 1 4)) 2 0.001)\n    (check-within (candidate (list 83 2 21 42 73 77 80)) 6 0.001)\n    (check-within (candidate (list 83 94 14 43 50 62 63)) 5 0.001)\n    (check-within (candidate (list 38 46 66 77 7 15 17 35)) 4 0.001)\n    (check-within (candidate (list 35 68 82 90 9 18 29 34)) 4 0.001)\n    (check-within (candidate (list 71)) 0 0.001)\n    (check-within (candidate (list 71 73 88 12 49 55 59 70)) 5 0.001)\n    (check-within (candidate (list 54 65 75 81 24 37)) 2 0.001)\n    (check-within (candidate (list 57 67 73 78 79 2 45 48 51)) 4 0.001)\n    (check-within (candidate (list 36 62 65 85 95 9 21)) 2 0.001)\n    (check-within (candidate (list 68 12)) 1 0.001)\n    (check-within (candidate (list 34 9 86 20 67 94 65 82 40 79)) -1 0.001)\n    (check-within (candidate (list 92 84 37 19 16 85 20 79 25 89)) -1 0.001)\n    (check-within (candidate (list 3 16 38 44 67 79 84)) 0 0.001)\n    (check-within (candidate (list 14 24 58 69 71 94 13)) 1 0.001)\n    (check-within (candidate (list 100 18)) 1 0.001)\n    (check-within (candidate (list 13)) 0 0.001)\n    (check-within (candidate (list 94 30 53 56 67 72 82)) 6 0.001)\n    (check-within (candidate (list 92 14 65 80 85)) 4 0.001)\n    (check-within (candidate (list 43 53 81 87 93 19 31 39)) 3 0.001)\n    (check-within (candidate (list 80 38)) 1 0.001)\n    (check-within (candidate (list 52 72 78 83 85 99 20)) 1 0.001)\n    (check-within (candidate (list 3 6 89)) 0 0.001)\n    (check-within (candidate (list 3)) 0 0.001)\n    (check-within (candidate (list 55 56 63 91 3 46)) 2 0.001)\n    (check-within (candidate (list 58 10 31 37 41)) 4 0.001)\n    (check-within (candidate (list 17 33 53 58 78)) 0 0.001)\n    (check-within (candidate (list 82 44)) 1 0.001)\n    (check-within (candidate (list 89 96 35 48 57 71)) 4 0.001)\n    (check-within (candidate (list 43 69 4 29 37)) 3 0.001)\n    (check-within (candidate (list 65 88)) 0 0.001)\n    (check-within (candidate (list 42 44 59 76 86)) 0 0.001)\n    (check-within (candidate (list 29 56 78 96 1 10 27)) 3 0.001)\n    (check-within (candidate (list 48 100)) 0 0.001)\n    (check-within (candidate (list 4 33 17 3 8 91 28 13 72 42)) -1 0.001)\n    (check-within (candidate (list 5 35 53 56)) 0 0.001)\n    (check-within (candidate (list 65 67 70 27 41 50 52 57 60)) 6 0.001)\n    (check-within (candidate (list 94 32 45 62)) 3 0.001)\n    (check-within (candidate (list 23 25 34 47 61 65 6 21)) 2 0.001)\n    (check-within (candidate (list 99 11 12 21 22 55 62 83)) 7 0.001)\n    (check-within (candidate (list 92 13 33 58 61 85)) 5 0.001)\n    (check-within (candidate (list 46)) 0 0.001)\n    (check-within (candidate (list 12 27 30 36)) 0 0.001)\n    (check-within (candidate (list 33 44 57 16 22 26 30)) 4 0.001)\n    (check-within (candidate (list 67 24)) 1 0.001)\n    (check-within (candidate (list 12 44 83 87)) 0 0.001)\n    (check-within (candidate (list 19 52 3 8 12)) 3 0.001)\n    (check-within (candidate (list 82 86 88 6 35 47 52 58 62)) 6 0.001)\n    (check-within (candidate (list 48)) 0 0.001)\n    (check-within (candidate (list 60 11)) 1 0.001)\n    (check-within (candidate (list 69 60)) 1 0.001)\n    (check-within (candidate (list 22 28 36 16 82 77 41 85 44 97)) -1 0.001)\n    (check-within (candidate (list 63 94 2 14)) 2 0.001)\n    (check-within (candidate (list 41 45 74 84 90 93 100 18 31)) 2 0.001)\n    (check-within (candidate (list 21 38 57 64 12)) 1 0.001)\n    (check-within (candidate (list 99 2 9 17 33 58 59 72)) 7 0.001)\n    (check-within (candidate (list 36 89 90 98 11 14 23)) 3 0.001)\n    (check-within (candidate (list 84 90 5 57 78)) 3 0.001)\n    (check-within (candidate (list 48 73 76 30)) 1 0.001)\n    (check-within (candidate (list 74)) 0 0.001)\n    (check-within (candidate (list 21 84 35 65 12 74 30 95 46 23)) -1 0.001)\n    (check-within (candidate (list 64 76 46 53 54)) 3 0.001)\n    (check-within (candidate (list 77 84 89 47 52 74)) 3 0.001)\n    (check-within (candidate (list 12 29 31 52 88 89 10)) 1 0.001)\n    (check-within (candidate (list 20 25 28 41 57 89)) 0 0.001)\n    (check-within (candidate (list 1 28 51 59)) 0 0.001)\n    (check-within (candidate (list 59 76 2 26 49 78 36 70 64 24)) -1 0.001)\n    (check-within (candidate (list 35 43 49 63 21)) 1 0.001)\n    (check-within (candidate (list 1 35 38 47 54 56 58 74)) 0 0.001)\n    (check-within (candidate (list 49 94 97)) 0 0.001)\n    (check-within (candidate (list 32 30)) 1 0.001)\n    (check-within (candidate (list 37 36)) 1 0.001)\n    (check-within (candidate (list 31 41 65 14)) 1 0.001)\n    (check-within (candidate (list 45 57 73 77 17 30 42 43)) 4 0.001)\n    (check-within (candidate (list 17 65 11)) 1 0.001)\n    (check-within (candidate (list 32 84 93 31 61 78 15 52 100 65)) -1 0.001)\n    (check-within (candidate (list 61 72 90 3 8 17 23 55)) 5 0.001)\n    (check-within (candidate (list 19 30 44 95 13)) 1 0.001)\n    (check-within (candidate (list 42 46 66 71 87 3 4 5 14)) 4 0.001)\n    (check-within (candidate (list 13 57 7)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3046_minimumOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed string num representing a non-negative integer.\n;; In one operation, you can pick any digit of num and delete it. Note that if you delete all the digits of num, num becomes 0.\n;; Return the minimum number of operations required to make num special.\n;; An integer x is considered special if it is divisible by 25.\n;; Example 1:\n;; Input: num = \"2245047\"\n;; Output: 2\n;; Explanation: Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\n;; It can be shown that 2 is the minimum number of operations required to get a special number.\n;; Example 2:\n;; Input: num = \"2908305\"\n;; Output: 3\n;; Explanation: Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\n;; It can be shown that 3 is the minimum number of operations required to get a special number.\n;; Example 3:\n;; Input: num = \"10\"\n;; Output: 1\n;; Explanation: Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\n;; It can be shown that 1 is the minimum number of operations required to get a special number.\n;; Constraints:\n;;  * 1 <= num.length <= 100\n;;  * num only consists of digits '0' through '9'.\n;;  * num does not contain any leading zeros.\n(define (minimumOperations num)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3046_minimumOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumOperations))\n    (check-within (candidate 2245047) 2 0.001)\n    (check-within (candidate 2908305) 3 0.001)\n    (check-within (candidate 10) 1 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 4) 1 0.001)\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 8) 1 0.001)\n    (check-within (candidate 9) 1 0.001)\n    (check-within (candidate 11) 2 0.001)\n    (check-within (candidate 12) 2 0.001)\n    (check-within (candidate 13) 2 0.001)\n    (check-within (candidate 14) 2 0.001)\n    (check-within (candidate 15) 2 0.001)\n    (check-within (candidate 16) 2 0.001)\n    (check-within (candidate 17) 2 0.001)\n    (check-within (candidate 18) 2 0.001)\n    (check-within (candidate 19) 2 0.001)\n    (check-within (candidate 20) 1 0.001)\n    (check-within (candidate 21) 2 0.001)\n    (check-within (candidate 22) 2 0.001)\n    (check-within (candidate 23) 2 0.001)\n    (check-within (candidate 24) 2 0.001)\n    (check-within (candidate 25) 0 0.001)\n    (check-within (candidate 26) 2 0.001)\n    (check-within (candidate 27) 2 0.001)\n    (check-within (candidate 28) 2 0.001)\n    (check-within (candidate 29) 2 0.001)\n    (check-within (candidate 30) 1 0.001)\n    (check-within (candidate 31) 2 0.001)\n    (check-within (candidate 32) 2 0.001)\n    (check-within (candidate 33) 2 0.001)\n    (check-within (candidate 34) 2 0.001)\n    (check-within (candidate 35) 2 0.001)\n    (check-within (candidate 36) 2 0.001)\n    (check-within (candidate 37) 2 0.001)\n    (check-within (candidate 38) 2 0.001)\n    (check-within (candidate 39) 2 0.001)\n    (check-within (candidate 40) 1 0.001)\n    (check-within (candidate 41) 2 0.001)\n    (check-within (candidate 42) 2 0.001)\n    (check-within (candidate 43) 2 0.001)\n    (check-within (candidate 44) 2 0.001)\n    (check-within (candidate 45) 2 0.001)\n    (check-within (candidate 46) 2 0.001)\n    (check-within (candidate 47) 2 0.001)\n    (check-within (candidate 48) 2 0.001)\n    (check-within (candidate 49) 2 0.001)\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 51) 2 0.001)\n    (check-within (candidate 52) 2 0.001)\n    (check-within (candidate 53) 2 0.001)\n    (check-within (candidate 54) 2 0.001)\n    (check-within (candidate 55) 2 0.001)\n    (check-within (candidate 56) 2 0.001)\n    (check-within (candidate 57) 2 0.001)\n    (check-within (candidate 58) 2 0.001)\n    (check-within (candidate 59) 2 0.001)\n    (check-within (candidate 60) 1 0.001)\n    (check-within (candidate 61) 2 0.001)\n    (check-within (candidate 62) 2 0.001)\n    (check-within (candidate 63) 2 0.001)\n    (check-within (candidate 64) 2 0.001)\n    (check-within (candidate 65) 2 0.001)\n    (check-within (candidate 66) 2 0.001)\n    (check-within (candidate 67) 2 0.001)\n    (check-within (candidate 68) 2 0.001)\n    (check-within (candidate 69) 2 0.001)\n    (check-within (candidate 70) 1 0.001)\n    (check-within (candidate 71) 2 0.001)\n    (check-within (candidate 72) 2 0.001)\n    (check-within (candidate 73) 2 0.001)\n    (check-within (candidate 74) 2 0.001)\n    (check-within (candidate 75) 0 0.001)\n    (check-within (candidate 76) 2 0.001)\n    (check-within (candidate 77) 2 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 2 0.001)\n    (check-within (candidate 80) 1 0.001)\n    (check-within (candidate 81) 2 0.001)\n    (check-within (candidate 82) 2 0.001)\n    (check-within (candidate 83) 2 0.001)\n    (check-within (candidate 84) 2 0.001)\n    (check-within (candidate 85) 2 0.001)\n    (check-within (candidate 86) 2 0.001)\n    (check-within (candidate 87) 2 0.001)\n    (check-within (candidate 88) 2 0.001)\n    (check-within (candidate 89) 2 0.001)\n    (check-within (candidate 90) 1 0.001)\n    (check-within (candidate 91) 2 0.001)\n    (check-within (candidate 92) 2 0.001)\n    (check-within (candidate 93) 2 0.001)\n    (check-within (candidate 94) 2 0.001)\n    (check-within (candidate 95) 2 0.001)\n    (check-within (candidate 96) 2 0.001)\n    (check-within (candidate 97) 2 0.001)\n    (check-within (candidate 98) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3047_maximumSum", "language": "rkt", "prompt": "#lang racket\n;; You are given a 1-indexed array nums of n integers.\n;; A set of numbers is complete if the product of every pair of its elements is a perfect square.\n;; For a subset of the indices set {1, 2, ..., n} represented as {i1, i2, ..., ik}, we define its element-sum as: nums[i1] + nums[i2] + ... + nums[ik].\n;; Return the maximum element-sum of a complete subset of the indices set {1, 2, ..., n}.\n;; A perfect square is a number that can be expressed as the product of an integer by itself.\n;; Example 1:\n;; Input: nums = [8,7,3,5,7,2,4,9]\n;; Output: 16\n;; Explanation: Apart from the subsets consisting of a single index, there are two other complete subsets of indices: {1,4} and {2,8}.\n;; The sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 8 + 5 = 13.\n;; The sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 7 + 9 = 16.\n;; Hence, the maximum element-sum of a complete subset of indices is 16.\n;; Example 2:\n;; Input: nums = [5,10,3,10,1,13,7,9,4]\n;; Output: 19\n;; Explanation: Apart from the subsets consisting of a single index, there are four other complete subsets of indices: {1,4}, {1,9}, {2,8}, {4,9}, and {1,4,9}.\n;; The sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 5 + 10 = 15.\n;; The sum of the elements corresponding to indices 1 and 9 is equal to nums[1] + nums[9] = 5 + 4 = 9.\n;; The sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 10 + 9 = 19.\n;; The sum of the elements corresponding to indices 4 and 9 is equal to nums[4] + nums[9] = 10 + 4 = 14.\n;; The sum of the elements corresponding to indices 1, 4, and 9 is equal to nums[1] + nums[4] + nums[9] = 5 + 10 + 4 = 19.\n;; Hence, the maximum element-sum of a complete subset of indices is 19.\n;; Constraints:\n;;  * 1 <= n == nums.length <= 104\n;;  * 1 <= nums[i] <= 109\n(define (maximumSum nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3047_maximumSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumSum))\n    (check-within (candidate (list 8 7 3 5 7 2 4 9)) 16 0.001)\n    (check-within (candidate (list 5 10 3 10 1 13 7 9 4)) 19 0.001)\n    (check-within (candidate (list 1 1 1 1)) 2 0.001)\n    (check-within (candidate (list 1 100 100 1)) 100 0.001)\n    (check-within (candidate (list 998244353 998244353 998244353 998244353)) 1996488706 0.001)\n    (check-within (candidate (list 1000000000 1 1 1000000000)) 2000000000 0.001)\n    (check-within (candidate (list 1 1 1000000000 1)) 1000000000 0.001)\n    (check-within (candidate (list 5 10 3 10 1 13 7 20 4)) 30 0.001)\n    (check-within (candidate (list 5 3 3 10 1 13 7 67 4)) 70 0.001)\n    (check-within (candidate (list 35 45 29 16 42 49 25 19 46)) 97 0.001)\n    (check-within (candidate (list 34 43 47 50 45)) 84 0.001)\n    (check-within (candidate (list 4 31 45 34 44)) 45 0.001)\n    (check-within (candidate (list 12 5 49 26)) 49 0.001)\n    (check-within (candidate (list 41)) 41 0.001)\n    (check-within (candidate (list 38 9 37 11 20 43)) 49 0.001)\n    (check-within (candidate (list 47 50 17 49 12 22)) 96 0.001)\n    (check-within (candidate (list 23 13 17 3 21 23)) 26 0.001)\n    (check-within (candidate (list 38 28)) 38 0.001)\n    (check-within (candidate (list 16 31 37 29 28 34 25 36)) 67 0.001)\n    (check-within (candidate (list 19 46 37 44 4 40 24 17 49)) 112 0.001)\n    (check-within (candidate (list 28 40 37)) 40 0.001)\n    (check-within (candidate (list 19 6 30 23 25 45 15 2 3 46)) 46 0.001)\n    (check-within (candidate (list 5 16 4 13 37 44 49 7)) 49 0.001)\n    (check-within (candidate (list 40 8 19 26)) 66 0.001)\n    (check-within (candidate (list 3 37 2)) 37 0.001)\n    (check-within (candidate (list 1 5 35 20 32 18 6 49 34 15)) 55 0.001)\n    (check-within (candidate (list 25 31 4 20 45)) 45 0.001)\n    (check-within (candidate (list 32 3 25 15 37 37 21 24 8 33)) 55 0.001)\n    (check-within (candidate (list 13)) 13 0.001)\n    (check-within (candidate (list 41 25 20 28 40 22 37 43 6 32)) 75 0.001)\n    (check-within (candidate (list 23 9 7 24 30 34 10 47)) 56 0.001)\n    (check-within (candidate (list 11 31 1 34 8 20 15 20 49)) 94 0.001)\n    (check-within (candidate (list 41 21 4 15 25 38 26 7 6)) 62 0.001)\n    (check-within (candidate (list 46 31 28 34 12 40 11 31 8 25)) 88 0.001)\n    (check-within (candidate (list 50)) 50 0.001)\n    (check-within (candidate (list 41 43 17 35)) 76 0.001)\n    (check-within (candidate (list 20 6)) 20 0.001)\n    (check-within (candidate (list 43 18 10 19 20 9 49)) 62 0.001)\n    (check-within (candidate (list 3 39 29 5 6 36 38 26 14 10)) 65 0.001)\n    (check-within (candidate (list 47 2 48 16 10 3 45 20 39)) 102 0.001)\n    (check-within (candidate (list 11 47 27 17 7)) 47 0.001)\n    (check-within (candidate (list 48 17 41 23 40 9 3 26 44 34)) 115 0.001)\n    (check-within (candidate (list 47 2 42 10 15 44 35 50)) 57 0.001)\n    (check-within (candidate (list 45 48 50 24 23 14 2 33)) 81 0.001)\n    (check-within (candidate (list 7 39 27 39 43 42 31 37 15)) 76 0.001)\n    (check-within (candidate (list 10 36 23 31)) 41 0.001)\n    (check-within (candidate (list 27 27 13 37)) 64 0.001)\n    (check-within (candidate (list 34 17 26 13)) 47 0.001)\n    (check-within (candidate (list 9 42)) 42 0.001)\n    (check-within (candidate (list 23 42 4 28 30 36 30 39)) 81 0.001)\n    (check-within (candidate (list 10 28 28 21 25 14 38)) 38 0.001)\n    (check-within (candidate (list 40 34 26 9 23 15 23 27 49)) 98 0.001)\n    (check-within (candidate (list 27 42 40 2 1)) 42 0.001)\n    (check-within (candidate (list 48 19 21 21 32 20 50 41 49 30)) 118 0.001)\n    (check-within (candidate (list 10 13 6 39 9)) 49 0.001)\n    (check-within (candidate (list 50 37 24 4 10 43 35)) 54 0.001)\n    (check-within (candidate (list 39 24)) 39 0.001)\n    (check-within (candidate (list 21)) 21 0.001)\n    (check-within (candidate (list 20 15)) 20 0.001)\n    (check-within (candidate (list 23 27 42 3 33 36 43 32 27 48 40 22 5 36 48)) 64 0.001)\n    (check-within (candidate (list 39 46 12 14 25 37 24 44 6 38 4)) 90 0.001)\n    (check-within (candidate (list 36 5 23 17 32 47 23 41 18 44 21 4 22 6 21)) 71 0.001)\n    (check-within (candidate (list 46 26 37 17 15 26 45 45 17 42 16 14 36 40)) 80 0.001)\n    (check-within (candidate (list 46 40 16 48 24 1 13 15 6 5 12 15 4)) 100 0.001)\n    (check-within (candidate (list 11 27 28 26 4 22 10 49 4 23 30 6 5)) 76 0.001)\n    (check-within (candidate (list 37 17 17 18 10 28 47 38 43 20 10)) 98 0.001)\n    (check-within (candidate (list 12 17 9 30 38 20 28 36 34 15 4 15 48)) 76 0.001)\n    (check-within (candidate (list 28 32 22 9 33 26 10 15 15 37 33 48 2 14 35)) 70 0.001)\n    (check-within (candidate (list 35 28 45 34 49 45 38 15 36 33 15 16)) 105 0.001)\n    (check-within (candidate (list 50 18 24 30 6 49 3 20 22 19 25 35 30 33)) 102 0.001)\n    (check-within (candidate (list 10 19 37 1 31 6 2 37 10 1 36 48 7 40)) 85 0.001)\n    (check-within (candidate (list 45 49 32 44 12 39 8 7 3 48 37 27 41 20 18)) 92 0.001)\n    (check-within (candidate (list 40 9 16 40 9 28 29 36 4 17 29)) 84 0.001)\n    (check-within (candidate (list 21 32 24 39 2 13 37 33 50 43 9 43 14)) 110 0.001)\n    (check-within (candidate (list 36 25 21 29 42 40 16 41 22 24 45 7 33)) 87 0.001)\n    (check-within (candidate (list 32 33 7 45 23 13 45 4 15 12)) 92 0.001)\n    (check-within (candidate (list 10 7 1 15 12 22 34 3 36 44 10 12)) 61 0.001)\n    (check-within (candidate (list 26 4 44 3 37 50 27 22 48 14 12 3 39 31)) 77 0.001)\n    (check-within (candidate (list 47 48 8 24 1 17 32 13 19 25 15 30 12)) 90 0.001)\n    (check-within (candidate (list 31 18 11 28 7 34 32 38 47 44 1 13 46)) 106 0.001)\n    (check-within (candidate (list 47 12 35 10 37 36 44 38 19 31 28 21 3 34)) 76 0.001)\n    (check-within (candidate (list 19 47 46 5 7 42 35 3 39 2 1 31)) 77 0.001)\n    (check-within (candidate (list 15 50 14 27 37 44 11 38 23 39 27 36 22)) 88 0.001)\n    (check-within (candidate (list 31 31 18 24 9 27 33 10 23 38 44 4 17 11 14)) 78 0.001)\n    (check-within (candidate (list 38 27 13 20 36 23 6 7 37 20 49 31 25 12)) 95 0.001)\n    (check-within (candidate (list 6 21 11 15 17 47 50 14 24 18 38 19 48 43)) 50 0.001)\n    (check-within (candidate (list 31 4 1 5 50 46 14 17 13 14 17 39 46 18)) 50 0.001)\n    (check-within (candidate (list 39 13 6 45 44 14 44 37 24 20 21 47 6 6 5)) 108 0.001)\n    (check-within (candidate (list 17 16 48 41 7 39 50 29 2 33)) 60 0.001)\n    (check-within (candidate (list 3 8 19 47 29 4 16 31 11 30)) 61 0.001)\n    (check-within (candidate (list 20 1 46 36 35 32 49 14 48 25 17 50 22)) 104 0.001)\n    (check-within (candidate (list 49 20 12 42 33 21 29 30 35 4 5 50)) 126 0.001)\n    (check-within (candidate (list 36 1 8 14 39 2 31 23 10 46 42)) 60 0.001)\n    (check-within (candidate (list 33 29 23 4 48 31 31 26 11 39)) 55 0.001)\n    (check-within (candidate (list 33 36 31 21 2 41 14 36 6 1 22 13 34)) 72 0.001)\n    (check-within (candidate (list 35 32 43 20 4 13 6 19 36 20)) 91 0.001)\n    (check-within (candidate (list 16 41 16 41 11 39 40 7 24 28 13)) 81 0.001)\n    (check-within (candidate (list 32 24 29 24 29 45 10 37 22 35 37 28 15)) 78 0.001)\n    (check-within (candidate (list 45 8 19 1 33 2 32 40 16 33 44 27)) 62 0.001)\n    (check-within (candidate (list 3 42 14 18 1 20 19 7 37 3 2 3 48)) 58 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3056_isReachableAtTime", "language": "rkt", "prompt": "#lang racket\n;; You are given four integers sx, sy, fx, fy, and a non-negative integer t.\n;; In an infinite 2D grid, you start at the cell (sx, sy). Each second, you must move to any of its adjacent cells.\n;; Return true if you can reach cell (fx, fy) after exactly t seconds, or false otherwise.\n;; A cell's adjacent cells are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/05/example2.svg]\n;; Input: sx = 2, sy = 4, fx = 7, fy = 7, t = 6\n;; Output: true\n;; Explanation: Starting at cell (2, 4), we can reach cell (7, 7) in exactly 6 seconds by going through the cells depicted in the picture above.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/05/example1.svg]\n;; Input: sx = 3, sy = 1, fx = 7, fy = 3, t = 3\n;; Output: false\n;; Explanation: Starting at cell (3, 1), it takes at least 4 seconds to reach cell (7, 3) by going through the cells depicted in the picture above. Hence, we cannot reach cell (7, 3) at the third second.\n;; Constraints:\n;;  * 1 <= sx, sy, fx, fy <= 109\n;;  * 0 <= t <= 109\n(define (isReachableAtTime sx sy fx fy t)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3056_isReachableAtTime.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate isReachableAtTime))\n    (check-within (candidate 3 1 7 3 3) #f 0.001)\n    (check-within (candidate 2 4 7 7 6) #t 0.001)\n    (check-within (candidate 1 1 1 2 0) #f 0.001)\n    (check-within (candidate 1 1 2 4 0) #f 0.001)\n    (check-within (candidate 1 1 3 4 1) #f 0.001)\n    (check-within (candidate 1 1 3 5 1) #f 0.001)\n    (check-within (candidate 1 1 1 1 3) #t 0.001)\n    (check-within (candidate 1 1 1 3 2) #t 0.001)\n    (check-within (candidate 1 1 4 1 0) #f 0.001)\n    (check-within (candidate 1 1 4 2 1) #f 0.001)\n    (check-within (candidate 1 1 1 4 3) #t 0.001)\n    (check-within (candidate 1 1 1 5 8) #t 0.001)\n    (check-within (candidate 1 1 2 1 2) #t 0.001)\n    (check-within (candidate 1 1 4 3 2) #f 0.001)\n    (check-within (candidate 1 1 2 2 1) #t 0.001)\n    (check-within (candidate 1 1 4 4 0) #f 0.001)\n    (check-within (candidate 1 1 5 1 0) #f 0.001)\n    (check-within (candidate 1 1 2 3 2) #t 0.001)\n    (check-within (candidate 1 1 5 2 0) #f 0.001)\n    (check-within (candidate 1 1 2 5 6) #t 0.001)\n    (check-within (candidate 1 1 3 1 3) #t 0.001)\n    (check-within (candidate 1 1 3 2 4) #t 0.001)\n    (check-within (candidate 1 1 3 3 9) #t 0.001)\n    (check-within (candidate 1 1 4 5 9) #t 0.001)\n    (check-within (candidate 1 1 5 3 9) #t 0.001)\n    (check-within (candidate 1 1 5 4 0) #f 0.001)\n    (check-within (candidate 1 2 1 1 2) #t 0.001)\n    (check-within (candidate 1 1 5 5 0) #f 0.001)\n    (check-within (candidate 1 2 1 2 1) #f 0.001)\n    (check-within (candidate 1 2 1 3 6) #t 0.001)\n    (check-within (candidate 1 2 1 4 4) #t 0.001)\n    (check-within (candidate 1 2 2 5 0) #f 0.001)\n    (check-within (candidate 1 2 3 4 0) #f 0.001)\n    (check-within (candidate 1 2 1 5 5) #t 0.001)\n    (check-within (candidate 1 2 3 5 0) #f 0.001)\n    (check-within (candidate 1 2 4 1 0) #f 0.001)\n    (check-within (candidate 1 2 2 1 10) #t 0.001)\n    (check-within (candidate 1 2 2 2 9) #t 0.001)\n    (check-within (candidate 1 2 2 3 1) #t 0.001)\n    (check-within (candidate 1 2 4 2 1) #f 0.001)\n    (check-within (candidate 1 2 2 4 2) #t 0.001)\n    (check-within (candidate 1 2 4 3 1) #f 0.001)\n    (check-within (candidate 1 2 4 4 0) #f 0.001)\n    (check-within (candidate 1 2 3 1 2) #t 0.001)\n    (check-within (candidate 1 2 3 2 2) #t 0.001)\n    (check-within (candidate 1 2 4 5 2) #f 0.001)\n    (check-within (candidate 1 2 3 3 4) #t 0.001)\n    (check-within (candidate 1 2 5 1 0) #f 0.001)\n    (check-within (candidate 1 2 5 3 0) #f 0.001)\n    (check-within (candidate 1 2 5 2 4) #t 0.001)\n    (check-within (candidate 1 2 5 4 0) #f 0.001)\n    (check-within (candidate 1 3 1 1 2) #t 0.001)\n    (check-within (candidate 1 3 1 2 3) #t 0.001)\n    (check-within (candidate 1 2 5 5 2) #f 0.001)\n    (check-within (candidate 1 3 2 1 0) #f 0.001)\n    (check-within (candidate 1 3 2 4 0) #f 0.001)\n    (check-within (candidate 1 3 1 3 0) #t 0.001)\n    (check-within (candidate 1 3 1 4 4) #t 0.001)\n    (check-within (candidate 1 3 1 5 4) #t 0.001)\n    (check-within (candidate 1 3 2 2 2) #t 0.001)\n    (check-within (candidate 1 3 2 3 3) #t 0.001)\n    (check-within (candidate 1 3 3 1 3) #t 0.001)\n    (check-within (candidate 1 3 2 5 0) #f 0.001)\n    (check-within (candidate 1 3 4 1 1) #f 0.001)\n    (check-within (candidate 1 3 3 2 2) #t 0.001)\n    (check-within (candidate 1 3 3 3 8) #t 0.001)\n    (check-within (candidate 1 3 4 5 1) #f 0.001)\n    (check-within (candidate 1 3 5 1 3) #f 0.001)\n    (check-within (candidate 1 3 5 2 2) #f 0.001)\n    (check-within (candidate 1 3 5 3 3) #f 0.001)\n    (check-within (candidate 1 3 5 4 3) #f 0.001)\n    (check-within (candidate 1 3 5 5 1) #f 0.001)\n    (check-within (candidate 1 3 3 4 4) #t 0.001)\n    (check-within (candidate 1 3 3 5 2) #t 0.001)\n    (check-within (candidate 1 4 1 2 1) #f 0.001)\n    (check-within (candidate 1 3 4 2 3) #t 0.001)\n    (check-within (candidate 1 3 4 3 10) #t 0.001)\n    (check-within (candidate 1 3 4 4 10) #t 0.001)\n    (check-within (candidate 1 4 1 1 4) #t 0.001)\n    (check-within (candidate 1 4 1 3 1) #t 0.001)\n    (check-within (candidate 1 4 1 4 6) #t 0.001)\n    (check-within (candidate 1 4 2 2 0) #f 0.001)\n    (check-within (candidate 1 4 1 5 6) #t 0.001)\n    (check-within (candidate 1 4 2 4 0) #f 0.001)\n    (check-within (candidate 1 4 2 1 4) #t 0.001)\n    (check-within (candidate 1 4 3 3 0) #f 0.001)\n    (check-within (candidate 1 4 2 3 3) #t 0.001)\n    (check-within (candidate 1 4 2 5 3) #t 0.001)\n    (check-within (candidate 1 4 3 1 4) #t 0.001)\n    (check-within (candidate 1 4 3 2 5) #t 0.001)\n    (check-within (candidate 1 4 4 1 7) #t 0.001)\n    (check-within (candidate 1 4 3 4 1) #f 0.001)\n    (check-within (candidate 1 4 4 4 10) #t 0.001)\n    (check-within (candidate 1 4 4 5 3) #t 0.001)\n    (check-within (candidate 1 4 3 5 0) #f 0.001)\n    (check-within (candidate 1 4 4 2 0) #f 0.001)\n    (check-within (candidate 1 4 4 3 1) #f 0.001)\n    (check-within (candidate 1 4 5 2 1) #f 0.001)\n    (check-within (candidate 1 4 5 4 3) #f 0.001)\n    (check-within (candidate 1 4 5 5 0) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3057_countKSubsequencesWithMaxBeauty", "language": "rkt", "prompt": "#lang racket\n;; You are given a string s and an integer k.\n;; A k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once.\n;; Let f(c) denote the number of times the character c occurs in s.\n;; The beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence.\n;; For example, consider s = \"abbbdd\" and k = 2:\n;;  * f('a') = 1, f('b') = 3, f('d') = 2\n;;  * Some k-subsequences of s are:\n;;    * \"abbbdd\" -> \"ab\" having a beauty of f('a') + f('b') = 4\n;;    * \"abbbdd\" -> \"ad\" having a beauty of f('a') + f('d') = 3\n;;    * \"abbbdd\" -> \"bd\" having a beauty of f('b') + f('d') = 5\n;; Return an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7.\n;; A subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n;; Notes\n;;  * f(c) is the number of times a character c occurs in s, not a k-subsequence.\n;;  * Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\n;; Example 1:\n;; Input: s = \"bcca\", k = 2\n;; Output: 4\n;; Explanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\n;; The k-subsequences of s are:\n;; bcca having a beauty of f('b') + f('c') = 3\n;; bcca having a beauty of f('b') + f('c') = 3\n;; bcca having a beauty of f('b') + f('a') = 2\n;; bcca having a beauty of f('c') + f('a') = 3\n;; bcca having a beauty of f('c') + f('a') = 3\n;; There are 4 k-subsequences that have the maximum beauty, 3.\n;; Hence, the answer is 4.\n;; Example 2:\n;; Input: s = \"abbcd\", k = 4\n;; Output: 2\n;; Explanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1.\n;; The k-subsequences of s are:\n;; abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n;; abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n;; There are 2 k-subsequences that have the maximum beauty, 5.\n;; Hence, the answer is 2.\n;; Constraints:\n;;  * 1 <= s.length <= 2 * 105\n;;  * 1 <= k <= s.length\n;;  * s consists only of lowercase English letters.\n(define (countKSubsequencesWithMaxBeauty s k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3057_countKSubsequencesWithMaxBeauty.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countKSubsequencesWithMaxBeauty))\n    (check-within (candidate bcca 2) 4 0.001)\n    (check-within (candidate abbcd 4) 2 0.001)\n    (check-within (candidate am 2) 1 0.001)\n    (check-within (candidate az 2) 1 0.001)\n    (check-within (candidate ci 1) 2 0.001)\n    (check-within (candidate dd 2) 0 0.001)\n    (check-within (candidate di 2) 1 0.001)\n    (check-within (candidate dw 2) 1 0.001)\n    (check-within (candidate ef 1) 2 0.001)\n    (check-within (candidate gq 2) 1 0.001)\n    (check-within (candidate hj 1) 2 0.001)\n    (check-within (candidate hx 1) 2 0.001)\n    (check-within (candidate ii 2) 0 0.001)\n    (check-within (candidate il 2) 1 0.001)\n    (check-within (candidate jb 1) 2 0.001)\n    (check-within (candidate kx 1) 2 0.001)\n    (check-within (candidate qh 2) 1 0.001)\n    (check-within (candidate qk 2) 1 0.001)\n    (check-within (candidate qr 2) 1 0.001)\n    (check-within (candidate rg 2) 1 0.001)\n    (check-within (candidate rn 1) 2 0.001)\n    (check-within (candidate st 1) 2 0.001)\n    (check-within (candidate tb 1) 2 0.001)\n    (check-within (candidate tl 2) 1 0.001)\n    (check-within (candidate xc 2) 1 0.001)\n    (check-within (candidate auy 1) 3 0.001)\n    (check-within (candidate axm 3) 1 0.001)\n    (check-within (candidate dqc 1) 3 0.001)\n    (check-within (candidate fkp 2) 3 0.001)\n    (check-within (candidate fmk 2) 3 0.001)\n    (check-within (candidate fvl 3) 1 0.001)\n    (check-within (candidate hcx 3) 1 0.001)\n    (check-within (candidate iua 3) 1 0.001)\n    (check-within (candidate kzb 2) 3 0.001)\n    (check-within (candidate mhb 3) 1 0.001)\n    (check-within (candidate nzo 1) 3 0.001)\n    (check-within (candidate oof 3) 0 0.001)\n    (check-within (candidate rfh 2) 3 0.001)\n    (check-within (candidate sty 1) 3 0.001)\n    (check-within (candidate sue 3) 1 0.001)\n    (check-within (candidate tba 3) 1 0.001)\n    (check-within (candidate tmc 1) 3 0.001)\n    (check-within (candidate wes 2) 3 0.001)\n    (check-within (candidate wvl 1) 3 0.001)\n    (check-within (candidate xho 2) 3 0.001)\n    (check-within (candidate xke 2) 3 0.001)\n    (check-within (candidate ysu 3) 1 0.001)\n    (check-within (candidate yxn 2) 3 0.001)\n    (check-within (candidate zco 1) 3 0.001)\n    (check-within (candidate zpq 3) 1 0.001)\n    (check-within (candidate axgn 4) 1 0.001)\n    (check-within (candidate dfyq 2) 6 0.001)\n    (check-within (candidate dogq 2) 6 0.001)\n    (check-within (candidate drbs 2) 6 0.001)\n    (check-within (candidate elex 4) 0 0.001)\n    (check-within (candidate fsaj 1) 4 0.001)\n    (check-within (candidate fxau 2) 6 0.001)\n    (check-within (candidate glbq 4) 1 0.001)\n    (check-within (candidate hzcj 4) 1 0.001)\n    (check-within (candidate minc 3) 4 0.001)\n    (check-within (candidate nkim 1) 4 0.001)\n    (check-within (candidate otpl 2) 6 0.001)\n    (check-within (candidate pvrz 4) 1 0.001)\n    (check-within (candidate qwmy 4) 1 0.001)\n    (check-within (candidate rliu 4) 1 0.001)\n    (check-within (candidate tpig 2) 6 0.001)\n    (check-within (candidate ucvh 4) 1 0.001)\n    (check-within (candidate vevt 2) 4 0.001)\n    (check-within (candidate xstt 3) 2 0.001)\n    (check-within (candidate ypmv 3) 4 0.001)\n    (check-within (candidate znoq 3) 4 0.001)\n    (check-within (candidate bicnt 1) 5 0.001)\n    (check-within (candidate bnhom 5) 1 0.001)\n    (check-within (candidate culhr 5) 1 0.001)\n    (check-within (candidate dpfki 1) 5 0.001)\n    (check-within (candidate dscbu 2) 10 0.001)\n    (check-within (candidate edwlo 3) 10 0.001)\n    (check-within (candidate ggsgo 3) 3 0.001)\n    (check-within (candidate guzzf 4) 2 0.001)\n    (check-within (candidate gzzzl 3) 3 0.001)\n    (check-within (candidate kjojr 3) 6 0.001)\n    (check-within (candidate kvsds 5) 0 0.001)\n    (check-within (candidate ljdvp 1) 5 0.001)\n    (check-within (candidate mdccc 5) 0 0.001)\n    (check-within (candidate mmqny 4) 2 0.001)\n    (check-within (candidate mrbrj 2) 6 0.001)\n    (check-within (candidate pwtbx 4) 5 0.001)\n    (check-within (candidate qcxkr 3) 10 0.001)\n    (check-within (candidate qvauy 1) 5 0.001)\n    (check-within (candidate tzwoq 3) 10 0.001)\n    (check-within (candidate ufxge 4) 5 0.001)\n    (check-within (candidate unzxd 4) 5 0.001)\n    (check-within (candidate vhqqj 3) 6 0.001)\n    (check-within (candidate vnkbt 1) 5 0.001)\n    (check-within (candidate wpbkz 2) 10 0.001)\n    (check-within (candidate xdgvy 1) 5 0.001)\n    (check-within (candidate yelem 5) 0 0.001)\n    (check-within (candidate zwkhq 3) 10 0.001)\n    (check-within (candidate anxnfi 5) 2 0.001)\n    (check-within (candidate cfbyuf 5) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3058_maxKDivisibleComponents", "language": "rkt", "prompt": "#lang racket\n;; There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n;; You are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k.\n;; A valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes.\n;; Return the maximum number of components in any valid split.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/07/example12-cropped2svg.jpg]\n;; Input: n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6\n;; Output: 2\n;; Explanation: We remove the edge connecting node 1 with 2. The resulting split is valid because:\n;; - The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n;; - The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\n;; It can be shown that no other valid split has more than 2 connected components.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/07/example21svg-1.jpg]\n;; Input: n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3\n;; Output: 3\n;; Explanation: We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n;; - The value of the component containing node 0 is values[0] = 3.\n;; - The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n;; - The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\n;; It can be shown that no other valid split has more than 3 connected components.\n;; Constraints:\n;;  * 1 <= n <= 3 * 104\n;;  * edges.length == n - 1\n;;  * edges[i].length == 2\n;;  * 0 <= ai, bi < n\n;;  * values.length == n\n;;  * 0 <= values[i] <= 109\n;;  * 1 <= k <= 109\n;;  * Sum of values is divisible by k.\n;;  * The input is generated such that edges represents a valid tree.\n(define (maxKDivisibleComponents n edges values k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3058_maxKDivisibleComponents.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxKDivisibleComponents))\n    (check-within (candidate 5 (list (list 0 2) (list 1 2) (list 1 3) (list 2 4)) (list 1 8 1 4 4) 6) 2 0.001)\n    (check-within (candidate 7 (list (list 0 1) (list 0 2) (list 1 3) (list 1 4) (list 2 5) (list 2 6)) (list 3 0 6 1 5 2 1) 3) 3 0.001)\n    (check-within (candidate 1 (list ) (list 0) 1) 1 0.001)\n    (check-within (candidate 1 (list ) (list 10000) 100) 1 0.001)\n    (check-within (candidate 2 (list (list 1 0)) (list 0 0) 100000000) 2 0.001)\n    (check-within (candidate 2 (list (list 0 1)) (list 1 2) 1) 2 0.001)\n    (check-within (candidate 2 (list (list 1 0)) (list 10000 10000) 4) 2 0.001)\n    (check-within (candidate 3 (list (list 0 2) (list 2 1)) (list 0 0 0) 1) 3 0.001)\n    (check-within (candidate 3 (list (list 1 0) (list 2 0)) (list 1 1 2) 2) 2 0.001)\n    (check-within (candidate 3 (list (list 1 2) (list 2 0)) (list 0 2 2) 4) 2 0.001)\n    (check-within (candidate 3 (list (list 1 0) (list 0 2)) (list 0 1 2) 3) 1 0.001)\n    (check-within (candidate 4 (list (list 0 1) (list 1 2) (list 2 3)) (list 0 0 0 0) 9999999) 4 0.001)\n    (check-within (candidate 9 (list (list 1 2) (list 1 7) (list 0 6) (list 0 8) (list 0 3) (list 3 4) (list 0 5) (list 2 5)) (list 1 4 4 0 2 1 1 6 2) 7) 2 0.001)\n    (check-within (candidate 9 (list (list 5 0) (list 5 1) (list 1 6) (list 1 7) (list 5 8) (list 0 3) (list 2 4) (list 5 2)) (list 3 0 10 0 6 1 1 3 0) 8) 4 0.001)\n    (check-within (candidate 6 (list (list 5 0) (list 1 4) (list 4 3) (list 4 2) (list 5 4)) (list 1 2 2 2 0 2) 3) 2 0.001)\n    (check-within (candidate 4 (list (list 0 3) (list 1 2) (list 0 2)) (list 12 6 0 18) 6) 4 0.001)\n    (check-within (candidate 10 (list (list 8 7) (list 8 3) (list 7 6) (list 6 2) (list 6 4) (list 3 9) (list 4 1) (list 6 0) (list 2 5)) (list 2 2 2 0 1 3 1 0 3 1) 1) 10 0.001)\n    (check-within (candidate 8 (list (list 0 4) (list 4 1) (list 0 3) (list 1 2) (list 0 5) (list 5 7) (list 1 6)) (list 2 6 2 2 2 0 0 0) 7) 4 0.001)\n    (check-within (candidate 9 (list (list 1 5) (list 5 2) (list 1 8) (list 2 0) (list 2 6) (list 1 7) (list 6 4) (list 7 3)) (list 8 8 12 12 8 8 8 8 4) 4) 9 0.001)\n    (check-within (candidate 7 (list (list 0 3) (list 3 2) (list 3 5) (list 0 6) (list 0 1) (list 6 4)) (list 12 6 6 12 18 18 12) 6) 7 0.001)\n    (check-within (candidate 4 (list (list 1 3) (list 0 2) (list 1 0)) (list 2 6 1 9) 3) 3 0.001)\n    (check-within (candidate 5 (list (list 2 0) (list 0 1) (list 2 3) (list 2 4)) (list 0 2 10 0 18) 6) 3 0.001)\n    (check-within (candidate 6 (list (list 3 5) (list 3 0) (list 5 2) (list 5 4) (list 3 1)) (list 3 3 0 18 0 0) 8) 4 0.001)\n    (check-within (candidate 10 (list (list 9 5) (list 4 9) (list 5 8) (list 3 6) (list 8 6) (list 0 1) (list 9 0) (list 6 2) (list 3 7)) (list 10 14 12 4 12 1 8 36 12 11) 12) 7 0.001)\n    (check-within (candidate 7 (list (list 3 0) (list 0 4) (list 2 6) (list 3 6) (list 2 1) (list 1 5)) (list 5 36 21 7 36 36 15) 12) 5 0.001)\n    (check-within (candidate 5 (list (list 2 3) (list 2 0) (list 2 4) (list 3 1)) (list 3 0 3 15 3) 8) 2 0.001)\n    (check-within (candidate 10 (list (list 9 1) (list 1 7) (list 7 3) (list 3 6) (list 1 8) (list 9 4) (list 3 0) (list 3 5) (list 9 2)) (list 9 9 18 9 9 18 9 9 18 27) 9) 10 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 2 0) (list 2 3)) (list 2 0 8 10) 5) 3 0.001)\n    (check-within (candidate 5 (list (list 2 4) (list 4 0) (list 0 1) (list 0 3)) (list 10 20 10 30 30) 10) 5 0.001)\n    (check-within (candidate 10 (list (list 5 6) (list 5 4) (list 5 1) (list 5 0) (list 1 7) (list 0 8) (list 0 2) (list 8 9) (list 3 8)) (list 4 0 2 9 2 8 0 2 0 0) 9) 5 0.001)\n    (check-within (candidate 9 (list (list 5 6) (list 5 1) (list 6 0) (list 6 8) (list 8 2) (list 7 3) (list 8 3) (list 8 4)) (list 33 11 33 6 11 11 33 16 33) 11) 8 0.001)\n    (check-within (candidate 4 (list (list 3 0) (list 0 2) (list 3 1)) (list 8 8 12 4) 4) 4 0.001)\n    (check-within (candidate 8 (list (list 1 6) (list 5 7) (list 6 7) (list 3 2) (list 3 4) (list 4 0) (list 1 2)) (list 6 6 6 6 3 8 15 6) 7) 3 0.001)\n    (check-within (candidate 9 (list (list 7 8) (list 4 6) (list 8 6) (list 3 0) (list 3 5) (list 5 1) (list 1 2) (list 7 0)) (list 5 0 1 1 1 3 9 30 10) 10) 4 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 1 0) (list 2 3)) (list 1 0 1 2) 2) 2 0.001)\n    (check-within (candidate 4 (list (list 1 2) (list 1 0) (list 2 3)) (list 2 1 0 1) 1) 4 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 2 3) (list 2 0)) (list 3 6 9 6) 3) 4 0.001)\n    (check-within (candidate 7 (list (list 0 4) (list 0 1) (list 4 6) (list 4 3) (list 6 5) (list 2 4)) (list 2 0 2 0 0 0 0) 2) 7 0.001)\n    (check-within (candidate 9 (list (list 6 0) (list 1 2) (list 6 2) (list 2 3) (list 3 7) (list 3 8) (list 0 5) (list 3 4)) (list 1 1 0 3 3 3 1 1 3) 1) 9 0.001)\n    (check-within (candidate 5 (list (list 0 4) (list 0 1) (list 1 3) (list 0 2)) (list 2 12 14 0 0) 7) 4 0.001)\n    (check-within (candidate 6 (list (list 1 2) (list 0 5) (list 5 4) (list 0 3) (list 2 0)) (list 2 2 2 0 0 2) 2) 6 0.001)\n    (check-within (candidate 10 (list (list 3 1) (list 1 4) (list 4 5) (list 3 0) (list 4 7) (list 7 2) (list 0 9) (list 0 8) (list 1 6)) (list 0 0 0 1 0 0 0 0 0 0) 1) 10 0.001)\n    (check-within (candidate 5 (list (list 3 1) (list 0 3) (list 4 2) (list 1 2)) (list 3 1 3 2 6) 3) 4 0.001)\n    (check-within (candidate 10 (list (list 6 3) (list 3 9) (list 3 7) (list 3 4) (list 7 8) (list 8 0) (list 8 5) (list 3 2) (list 0 1)) (list 0 0 0 0 0 0 2 0 0 0) 1) 10 0.001)\n    (check-within (candidate 5 (list (list 4 3) (list 3 1) (list 1 2) (list 1 0)) (list 8 6 0 8 2) 8) 3 0.001)\n    (check-within (candidate 8 (list (list 1 3) (list 0 3) (list 7 4) (list 4 6) (list 0 7) (list 0 2) (list 4 5)) (list 12 10 6 2 6 12 3 9) 6) 5 0.001)\n    (check-within (candidate 9 (list (list 5 4) (list 2 1) (list 2 0) (list 0 7) (list 7 8) (list 5 2) (list 6 3) (list 2 3)) (list 1 2 3 2 2 4 4 0 0) 6) 5 0.001)\n    (check-within (candidate 7 (list (list 4 6) (list 4 2) (list 2 1) (list 2 5) (list 4 3) (list 0 5)) (list 27 0 1 1 4 2 1) 9) 3 0.001)\n    (check-within (candidate 7 (list (list 4 6) (list 0 2) (list 0 5) (list 2 3) (list 3 1) (list 4 2)) (list 1 0 0 1 2 0 0) 2) 5 0.001)\n    (check-within (candidate 9 (list (list 3 2) (list 2 1) (list 1 4) (list 4 6) (list 4 8) (list 6 0) (list 0 5) (list 5 7)) (list 10 10 15 5 5 15 15 10 15) 5) 9 0.001)\n    (check-within (candidate 10 (list (list 9 6) (list 9 0) (list 9 3) (list 3 8) (list 6 5) (list 0 7) (list 8 2) (list 6 4) (list 4 1)) (list 0 0 3 0 0 0 3 0 3 3) 4) 6 0.001)\n    (check-within (candidate 8 (list (list 4 3) (list 3 6) (list 6 1) (list 6 7) (list 1 2) (list 7 0) (list 4 5)) (list 30 10 10 20 10 10 30 10) 10) 8 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 1 0) (list 0 3)) (list 9 6 6 9) 3) 4 0.001)\n    (check-within (candidate 5 (list (list 3 4) (list 3 2) (list 4 0) (list 2 1)) (list 3 2 2 3 1) 1) 5 0.001)\n    (check-within (candidate 5 (list (list 1 3) (list 3 4) (list 4 2) (list 2 0)) (list 27 14 0 0 4) 9) 3 0.001)\n    (check-within (candidate 4 (list (list 1 2) (list 2 0) (list 0 3)) (list 3 1 2 3) 1) 4 0.001)\n    (check-within (candidate 7 (list (list 6 1) (list 6 4) (list 1 3) (list 3 0) (list 2 5) (list 4 2)) (list 33 18 7 22 11 4 4) 11) 5 0.001)\n    (check-within (candidate 10 (list (list 6 2) (list 5 2) (list 0 3) (list 0 7) (list 0 1) (list 6 7) (list 2 4) (list 8 9) (list 5 9)) (list 3 0 1 0 3 3 2 0 6 3) 3) 9 0.001)\n    (check-within (candidate 8 (list (list 6 1) (list 0 5) (list 5 7) (list 5 2) (list 5 4) (list 1 4) (list 0 3)) (list 15 24 9 12 0 3 24 9) 12) 5 0.001)\n    (check-within (candidate 6 (list (list 3 1) (list 3 5) (list 1 4) (list 1 0) (list 3 2)) (list 12 12 36 12 24 36) 12) 6 0.001)\n    (check-within (candidate 7 (list (list 6 4) (list 6 5) (list 3 1) (list 1 0) (list 0 2) (list 4 2)) (list 0 0 0 1 0 0 1) 1) 7 0.001)\n    (check-within (candidate 8 (list (list 6 1) (list 2 0) (list 0 7) (list 1 2) (list 4 5) (list 7 5) (list 1 3)) (list 1 14 5 21 18 3 7 1) 7) 5 0.001)\n    (check-within (candidate 4 (list (list 1 3) (list 1 0) (list 1 2)) (list 18 18 9 27) 9) 4 0.001)\n    (check-within (candidate 5 (list (list 1 2) (list 1 3) (list 3 4) (list 1 0)) (list 2 3 0 0 0) 1) 5 0.001)\n    (check-within (candidate 5 (list (list 2 3) (list 2 4) (list 4 1) (list 2 0)) (list 0 0 1 0 0) 1) 5 0.001)\n    (check-within (candidate 6 (list (list 1 4) (list 1 3) (list 1 2) (list 4 0) (list 2 5)) (list 0 3 0 0 0 0) 1) 6 0.001)\n    (check-within (candidate 6 (list (list 4 1) (list 0 2) (list 4 2) (list 3 5) (list 1 5)) (list 3 9 6 3 9 6) 3) 6 0.001)\n    (check-within (candidate 4 (list (list 1 3) (list 0 2) (list 1 2)) (list 4 1 0 3) 4) 3 0.001)\n    (check-within (candidate 7 (list (list 4 5) (list 5 2) (list 2 0) (list 0 6) (list 5 3) (list 2 1)) (list 15 15 10 5 2 8 5) 5) 6 0.001)\n    (check-within (candidate 5 (list (list 2 4) (list 2 0) (list 0 3) (list 2 1)) (list 36 24 10 24 2) 12) 4 0.001)\n    (check-within (candidate 7 (list (list 2 4) (list 2 1) (list 2 5) (list 1 3) (list 4 0) (list 1 6)) (list 2 0 2 2 0 2 0) 4) 2 0.001)\n    (check-within (candidate 4 (list (list 3 2) (list 2 1) (list 2 0)) (list 6 2 2 6) 8) 1 0.001)\n    (check-within (candidate 10 (list (list 7 4) (list 7 2) (list 4 1) (list 6 5) (list 6 0) (list 7 6) (list 1 8) (list 9 3) (list 7 9)) (list 12 4 3 2 1 18 3 3 22 20) 11) 4 0.001)\n    (check-within (candidate 5 (list (list 0 3) (list 3 2) (list 3 1) (list 0 4)) (list 12 36 36 36 12) 12) 5 0.001)\n    (check-within (candidate 5 (list (list 0 1) (list 1 2) (list 2 3) (list 3 4)) (list 3 0 0 18 3) 8) 1 0.001)\n    (check-within (candidate 4 (list (list 3 2) (list 3 0) (list 3 1)) (list 9 0 15 3) 9) 3 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 0 3) (list 3 4) (list 1 3)) (list 3 3 0 0 0) 1) 5 0.001)\n    (check-within (candidate 5 (list (list 1 4) (list 1 3) (list 0 3) (list 1 2)) (list 10 2 15 2 1) 5) 3 0.001)\n    (check-within (candidate 6 (list (list 1 4) (list 4 5) (list 0 3) (list 1 0) (list 0 2)) (list 6 9 6 3 6 3) 3) 6 0.001)\n    (check-within (candidate 6 (list (list 5 1) (list 0 1) (list 2 4) (list 2 3) (list 1 4)) (list 21 4 3 1 3 3) 7) 3 0.001)\n    (check-within (candidate 6 (list (list 5 1) (list 1 2) (list 5 3) (list 1 4) (list 2 0)) (list 0 4 0 2 0 2) 4) 5 0.001)\n    (check-within (candidate 10 (list (list 3 6) (list 3 4) (list 6 0) (list 3 9) (list 5 7) (list 6 5) (list 0 2) (list 6 1) (list 9 8)) (list 0 12 12 3 9 8 3 4 12 3) 6) 6 0.001)\n    (check-within (candidate 7 (list (list 0 2) (list 2 5) (list 2 3) (list 5 4) (list 2 1) (list 3 6)) (list 9 9 3 6 3 0 0) 10) 2 0.001)\n    (check-within (candidate 6 (list (list 4 1) (list 4 5) (list 4 2) (list 4 0) (list 3 1)) (list 0 6 6 22 2 8) 11) 3 0.001)\n    (check-within (candidate 8 (list (list 2 7) (list 1 4) (list 2 4) (list 4 3) (list 2 5) (list 7 0) (list 7 6)) (list 12 3 12 4 1 8 12 12) 4) 7 0.001)\n    (check-within (candidate 5 (list (list 0 3) (list 0 1) (list 0 2) (list 0 4)) (list 3 3 0 18 0) 8) 3 0.001)\n    (check-within (candidate 4 (list (list 2 0) (list 2 1) (list 0 3)) (list 10 15 5 15) 5) 4 0.001)\n    (check-within (candidate 7 (list (list 2 5) (list 5 1) (list 5 4) (list 1 6) (list 4 3) (list 3 0)) (list 0 0 6 2 0 2 2) 6) 3 0.001)\n    (check-within (candidate 8 (list (list 5 2) (list 2 4) (list 5 1) (list 5 3) (list 1 0) (list 2 6) (list 2 7)) (list 18 9 9 9 27 9 9 18) 9) 8 0.001)\n    (check-within (candidate 7 (list (list 5 6) (list 6 4) (list 5 2) (list 6 3) (list 1 0) (list 5 1)) (list 9 21 6 20 2 8 4) 10) 3 0.001)\n    (check-within (candidate 8 (list (list 3 1) (list 3 0) (list 0 4) (list 3 5) (list 7 6) (list 1 6) (list 6 2)) (list 10 10 5 15 5 15 3 2) 5) 7 0.001)\n    (check-within (candidate 5 (list (list 2 4) (list 2 1) (list 2 0) (list 0 3)) (list 1 2 1 0 2) 6) 2 0.001)\n    (check-within (candidate 8 (list (list 1 0) (list 0 2) (list 0 6) (list 2 5) (list 1 3) (list 2 4) (list 2 7)) (list 0 3 18 9 0 0 0 3) 11) 4 0.001)\n    (check-within (candidate 9 (list (list 5 0) (list 2 4) (list 0 2) (list 2 3) (list 4 1) (list 2 7) (list 8 6) (list 0 8)) (list 10 10 2 20 18 20 6 10 24) 10) 7 0.001)\n    (check-within (candidate 10 (list (list 0 9) (list 9 7) (list 1 4) (list 0 4) (list 8 2) (list 4 2) (list 2 3) (list 3 5) (list 0 6)) (list 6 4 6 18 8 18 12 18 6 12) 6) 9 0.001)\n    (check-within (candidate 7 (list (list 4 2) (list 6 4) (list 5 3) (list 3 1) (list 4 5) (list 2 0)) (list 9 3 0 9 9 15 18) 9) 5 0.001)\n    (check-within (candidate 5 (list (list 2 3) (list 3 1) (list 3 0) (list 1 4)) (list 0 0 3 0 3) 2) 2 0.001)\n    (check-within (candidate 10 (list (list 3 6) (list 4 3) (list 0 8) (list 0 5) (list 8 9) (list 0 1) (list 8 7) (list 5 2) (list 3 8)) (list 6 6 0 4 7 0 3 0 3 6) 7) 6 0.001)\n    (check-within (candidate 6 (list (list 2 3) (list 4 5) (list 4 1) (list 2 4) (list 2 0)) (list 20 0 30 30 12 8) 10) 5 0.001)\n    (check-within (candidate 9 (list (list 5 7) (list 5 4) (list 5 6) (list 7 2) (list 7 1) (list 4 3) (list 2 0) (list 3 8)) (list 6 6 6 18 6 12 18 6 6) 6) 9 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3079_minOperationsQueries", "language": "rkt", "prompt": "#lang racket\n;; There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\n;; You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value.\n;; Note that:\n;;  * Queries are independent of each other, meaning that the tree returns to its initial state on each new query.\n;;  * The path from ai to bi is a sequence of distinct nodes starting with node ai and ending with node bi such that every two adjacent nodes in the sequence share an edge in the tree.\n;; Return an array answer of length m where answer[i] is the answer to the ith query.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/11/graph-6-1.png]\n;; Input: n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]\n;; Output: [0,0,1,3]\n;; Explanation: In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\n;; In the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\n;; In the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\n;; In the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\n;; For each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/11/graph-9-1.png]\n;; Input: n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]\n;; Output: [1,2,2,3]\n;; Explanation: In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\n;; In the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\n;; In the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\n;; In the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\n;; For each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.\n;; Constraints:\n;;  * 1 <= n <= 104\n;;  * edges.length == n - 1\n;;  * edges[i].length == 3\n;;  * 0 <= ui, vi < n\n;;  * 1 <= wi <= 26\n;;  * The input is generated such that edges represents a valid tree.\n;;  * 1 <= queries.length == m <= 2 * 104\n;;  * queries[i].length == 2\n;;  * 0 <= ai, bi < n\n(define (minOperationsQueries n edges queries)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3079_minOperationsQueries.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minOperationsQueries))\n    (check-within (candidate 7 (list (list 0 1 1) (list 1 2 1) (list 2 3 1) (list 3 4 2) (list 4 5 2) (list 5 6 2)) (list (list 0 3) (list 3 6) (list 2 6) (list 0 6))) (list 0 0 1 3) 0.001)\n    (check-within (candidate 8 (list (list 1 2 6) (list 1 3 4) (list 2 4 6) (list 2 5 3) (list 3 6 6) (list 3 0 8) (list 7 0 2)) (list (list 4 6) (list 0 4) (list 6 5) (list 7 4))) (list 1 2 2 3) 0.001)\n    (check-within (candidate 1 (list ) (list (list 0 0))) (list 0) 0.001)\n    (check-within (candidate 2 (list (list 0 1 26)) (list (list 0 1) (list 0 0) (list 1 1))) (list 0 0 0) 0.001)\n    (check-within (candidate 3 (list (list 2 1 1) (list 2 0 2)) (list (list 0 1) (list 0 2) (list 1 2) (list 0 0) (list 1 1) (list 2 2))) (list 1 0 0 0 0 0) 0.001)\n    (check-within (candidate 6 (list (list 1 3 3) (list 4 1 3) (list 0 3 5) (list 5 4 2) (list 2 5 1)) (list (list 2 1) (list 2 0) (list 3 0) (list 2 2) (list 2 5) (list 4 1) (list 5 2))) (list 2 3 0 0 0 0 0) 0.001)\n    (check-within (candidate 7 (list (list 2 1 2) (list 4 2 4) (list 5 2 4) (list 3 4 5) (list 6 3 5) (list 0 6 5)) (list (list 4 4) (list 6 2) (list 3 4) (list 6 1) (list 2 0) (list 4 2) (list 5 0) (list 3 2) (list 3 5))) (list 0 1 0 2 1 0 2 1 1) 0.001)\n    (check-within (candidate 5 (list (list 1 2 1) (list 4 1 5) (list 3 2 3) (list 0 1 2)) (list (list 1 2) (list 0 4) (list 0 0) (list 4 3) (list 4 2) (list 0 2) (list 3 3) (list 3 2))) (list 0 1 0 2 1 1 0 0) 0.001)\n    (check-within (candidate 10 (list (list 9 7 1) (list 5 9 2) (list 0 9 4) (list 3 9 5) (list 1 9 5) (list 4 0 4) (list 2 0 2) (list 8 7 4) (list 6 3 2)) (list (list 4 3) (list 8 1) (list 9 6) (list 7 0) (list 1 1) (list 5 0) (list 4 8) (list 3 6) (list 8 2) (list 9 7))) (list 1 2 1 1 0 1 1 0 2 0) 0.001)\n    (check-within (candidate 10 (list (list 7 1 2) (list 9 7 3) (list 8 7 1) (list 3 7 4) (list 4 8 2) (list 5 7 2) (list 6 4 5) (list 0 1 4) (list 2 1 5)) (list (list 0 4) (list 9 6) (list 8 0) (list 2 6) (list 5 9) (list 3 2) (list 4 1) (list 9 4))) (list 2 3 2 3 1 2 1 2) 0.001)\n    (check-within (candidate 5 (list (list 4 2 4) (list 3 4 3) (list 0 4 1) (list 1 3 1)) (list (list 4 3) (list 3 1) (list 1 1) (list 4 2) (list 1 4) (list 2 3) (list 3 3) (list 4 1))) (list 0 0 0 0 1 1 0 1) 0.001)\n    (check-within (candidate 6 (list (list 4 0 4) (list 1 0 5) (list 3 4 4) (list 5 0 4) (list 2 4 4)) (list (list 4 4) (list 1 2) (list 4 0) (list 0 4) (list 4 3) (list 1 4) (list 3 2) (list 3 5) (list 5 2))) (list 0 1 0 0 0 1 0 0 0) 0.001)\n    (check-within (candidate 6 (list (list 4 3 2) (list 5 3 2) (list 1 4 5) (list 0 4 2) (list 2 1 1)) (list (list 0 4) (list 2 1) (list 5 4) (list 2 0) (list 4 2) (list 4 5) (list 3 3) (list 5 0) (list 3 5) (list 5 2))) (list 0 0 0 2 1 0 0 0 0 2) 0.001)\n    (check-within (candidate 5 (list (list 0 1 5) (list 2 0 1) (list 3 0 1) (list 4 2 1)) (list (list 2 1) (list 4 3) (list 4 2) (list 1 4) (list 0 2) (list 2 2) (list 3 2) (list 1 3))) (list 1 0 0 1 0 0 0 1) 0.001)\n    (check-within (candidate 9 (list (list 6 2 1) (list 5 2 1) (list 4 2 2) (list 7 4 4) (list 1 7 4) (list 0 1 4) (list 3 2 2) (list 8 3 1)) (list (list 4 4) (list 7 4) (list 2 4) (list 6 2) (list 1 1) (list 6 8) (list 5 7) (list 4 2) (list 2 6))) (list 0 0 0 0 0 1 2 0 0) 0.001)\n    (check-within (candidate 8 (list (list 6 1 2) (list 2 1 5) (list 3 6 1) (list 7 1 3) (list 5 7 4) (list 4 7 5) (list 0 5 5)) (list (list 4 0) (list 7 1) (list 3 4) (list 4 6) (list 5 7) (list 4 5) (list 3 3) (list 0 2) (list 7 2) (list 1 0))) (list 1 0 3 2 0 1 0 2 1 2) 0.001)\n    (check-within (candidate 10 (list (list 5 3 5) (list 6 3 1) (list 1 6 4) (list 2 6 3) (list 9 1 5) (list 4 3 5) (list 7 3 4) (list 0 1 1) (list 8 6 4)) (list (list 6 5) (list 6 8) (list 0 3) (list 5 1) (list 5 7) (list 2 3) (list 7 9) (list 9 8) (list 5 9) (list 3 5))) (list 1 0 1 2 1 1 2 1 2 0) 0.001)\n    (check-within (candidate 5 (list (list 0 3 2) (list 4 3 2) (list 2 3 3) (list 1 4 5)) (list (list 2 1) (list 0 0) (list 4 3) (list 1 1) (list 2 0) (list 3 0) (list 2 3) (list 1 0))) (list 2 0 0 0 1 0 0 1) 0.001)\n    (check-within (candidate 7 (list (list 1 2 4) (list 3 2 4) (list 6 2 4) (list 0 6 5) (list 4 6 1) (list 5 1 5)) (list (list 4 4) (list 5 5) (list 0 4) (list 0 0) (list 5 4) (list 5 1) (list 2 3) (list 2 2) (list 3 2) (list 4 1))) (list 0 0 1 0 2 0 0 0 0 1) 0.001)\n    (check-within (candidate 10 (list (list 7 0 2) (list 4 0 2) (list 6 7 3) (list 1 6 4) (list 9 1 3) (list 8 1 4) (list 3 6 3) (list 2 7 5) (list 5 7 5)) (list (list 6 2) (list 0 4) (list 5 1) (list 2 3) (list 4 7) (list 8 9) (list 4 8) (list 9 1) (list 6 3) (list 1 9))) (list 1 0 2 1 0 1 3 0 0 0) 0.001)\n    (check-within (candidate 9 (list (list 1 5 4) (list 4 5 1) (list 0 4 2) (list 8 0 2) (list 6 1 5) (list 3 8 5) (list 2 3 2) (list 7 5 2)) (list (list 0 1) (list 0 4) (list 3 1) (list 1 1) (list 5 4) (list 7 0) (list 5 1) (list 8 0) (list 0 3) (list 4 7))) (list 2 0 3 0 0 1 0 0 1 1) 0.001)\n    (check-within (candidate 10 (list (list 4 8 4) (list 5 4 3) (list 6 5 3) (list 7 4 3) (list 2 8 5) (list 9 4 4) (list 1 6 1) (list 3 9 5) (list 0 8 2)) (list (list 8 8) (list 9 0) (list 6 2) (list 2 1) (list 7 7) (list 8 7) (list 9 6) (list 5 0) (list 7 5))) (list 0 1 2 3 0 1 1 2 0) 0.001)\n    (check-within (candidate 10 (list (list 4 3 1) (list 9 3 1) (list 2 3 5) (list 1 4 2) (list 5 4 2) (list 0 2 5) (list 7 1 3) (list 6 2 2) (list 8 0 4)) (list (list 0 7) (list 9 3) (list 5 8) (list 9 6) (list 5 7) (list 1 4) (list 2 9) (list 0 8) (list 3 5))) (list 3 0 3 2 1 0 1 0 1) 0.001)\n    (check-within (candidate 10 (list (list 4 0 1) (list 7 4 1) (list 3 0 3) (list 1 7 4) (list 6 7 1) (list 9 7 5) (list 5 4 5) (list 2 9 1) (list 8 9 2)) (list (list 6 2) (list 8 1) (list 1 1) (list 6 4) (list 2 9) (list 5 0) (list 2 5) (list 9 7) (list 1 9) (list 2 8))) (list 1 2 0 0 0 1 2 0 1 1) 0.001)\n    (check-within (candidate 7 (list (list 6 5 4) (list 0 5 5) (list 4 0 1) (list 1 6 4) (list 3 1 5) (list 2 3 1)) (list (list 4 1) (list 0 2) (list 3 3) (list 2 6) (list 5 6) (list 0 5) (list 5 3) (list 1 3) (list 5 2))) (list 2 3 0 2 0 0 1 0 2) 0.001)\n    (check-within (candidate 7 (list (list 2 3 2) (list 4 2 2) (list 0 2 4) (list 5 3 5) (list 6 3 2) (list 1 3 4)) (list (list 6 2) (list 4 6) (list 2 0) (list 3 0) (list 0 2) (list 0 5) (list 5 3) (list 3 5))) (list 0 0 0 1 0 2 0 0) 0.001)\n    (check-within (candidate 9 (list (list 7 6 2) (list 3 7 5) (list 4 3 4) (list 2 6 5) (list 8 4 5) (list 5 2 3) (list 1 2 4) (list 0 6 2)) (list (list 4 4) (list 3 8) (list 0 4) (list 8 1) (list 3 1) (list 7 0) (list 4 5) (list 3 6) (list 4 7))) (list 0 1 2 3 2 0 3 1 1) 0.001)\n    (check-within (candidate 6 (list (list 4 1 3) (list 2 4 4) (list 5 2 5) (list 3 1 5) (list 0 4 2)) (list (list 3 4) (list 4 3) (list 0 3) (list 4 2) (list 3 0) (list 3 3) (list 5 3) (list 5 2))) (list 1 1 2 0 2 0 2 0) 0.001)\n    (check-within (candidate 8 (list (list 0 3 3) (list 4 0 5) (list 5 4 2) (list 6 3 1) (list 1 3 3) (list 2 3 2) (list 7 3 4)) (list (list 6 2) (list 4 0) (list 3 4) (list 2 7) (list 4 3) (list 7 0) (list 7 3) (list 7 6) (list 6 3) (list 4 1))) (list 1 0 1 1 1 1 0 1 0 1) 0.001)\n    (check-within (candidate 5 (list (list 0 3 2) (list 2 0 2) (list 4 3 3) (list 1 2 3)) (list (list 0 1) (list 2 1) (list 4 3) (list 1 4) (list 2 3) (list 0 2) (list 3 3) (list 3 2) (list 1 3))) (list 1 0 0 2 0 0 0 0 1) 0.001)\n    (check-within (candidate 10 (list (list 8 0 5) (list 6 0 4) (list 7 6 3) (list 3 7 5) (list 5 3 5) (list 2 8 5) (list 1 8 4) (list 4 6 3) (list 9 4 4)) (list (list 9 0) (list 3 4) (list 6 5) (list 0 3) (list 2 3) (list 1 7) (list 7 6) (list 5 0) (list 2 5))) (list 1 1 1 2 2 2 0 2 2) 0.001)\n    (check-within (candidate 9 (list (list 2 3 1) (list 4 2 1) (list 1 3 3) (list 0 4 3) (list 5 2 3) (list 7 2 1) (list 8 5 3) (list 6 4 2)) (list (list 7 7) (list 4 3) (list 3 1) (list 5 4) (list 1 8) (list 1 4) (list 7 3) (list 7 6) (list 8 2) (list 3 5))) (list 0 0 0 1 1 1 0 1 0 1) 0.001)\n    (check-within (candidate 5 (list (list 4 1 4) (list 3 1 5) (list 0 4 3) (list 2 1 4)) (list (list 0 1) (list 2 4) (list 1 2) (list 0 4) (list 3 4) (list 0 0) (list 1 1))) (list 1 0 0 0 1 0 0) 0.001)\n    (check-within (candidate 4 (list (list 1 2 4) (list 3 2 5) (list 0 1 5)) (list (list 1 2) (list 3 1) (list 1 1) (list 2 0) (list 3 0) (list 3 3))) (list 0 1 0 1 1 0) 0.001)\n    (check-within (candidate 4 (list (list 1 2 3) (list 0 2 1) (list 3 2 5)) (list (list 3 1) (list 1 1) (list 3 0) (list 2 3) (list 3 3) (list 2 2) (list 1 0) (list 3 2))) (list 1 0 1 0 0 0 1 0) 0.001)\n    (check-within (candidate 8 (list (list 4 6 3) (list 7 4 1) (list 3 7 4) (list 1 4 1) (list 0 6 4) (list 5 7 3) (list 2 1 3)) (list (list 2 4) (list 6 2) (list 7 1) (list 5 1) (list 4 2) (list 1 7) (list 1 3) (list 3 5))) (list 1 1 0 1 1 0 1 1) 0.001)\n    (check-within (candidate 9 (list (list 1 7 4) (list 5 1 2) (list 6 1 4) (list 2 5 2) (list 3 2 5) (list 8 3 2) (list 0 3 2) (list 4 5 2)) (list (list 7 4) (list 4 0) (list 3 4) (list 6 1) (list 0 3) (list 3 3) (list 6 0) (list 5 3) (list 3 2) (list 6 3))) (list 1 1 1 0 0 0 2 1 0 2) 0.001)\n    (check-within (candidate 5 (list (list 0 3 4) (list 2 0 5) (list 4 2 1) (list 1 4 4)) (list (list 0 1) (list 0 4) (list 4 1) (list 2 0) (list 4 2) (list 0 2) (list 3 3) (list 1 0) (list 1 3))) (list 2 1 0 0 0 0 0 2 2) 0.001)\n    (check-within (candidate 8 (list (list 5 4 1) (list 0 5 3) (list 2 0 5) (list 3 5 4) (list 7 2 4) (list 1 7 5) (list 6 5 2)) (list (list 2 4) (list 4 0) (list 6 5) (list 5 4) (list 5 1) (list 0 6) (list 6 0) (list 3 5))) (list 2 1 0 0 2 1 1 0) 0.001)\n    (check-within (candidate 8 (list (list 4 2 3) (list 3 2 3) (list 6 3 3) (list 7 4 5) (list 5 3 4) (list 0 6 5) (list 1 5 3)) (list (list 0 1) (list 2 4) (list 3 4) (list 4 2) (list 7 3) (list 4 5) (list 3 6) (list 6 6) (list 6 3))) (list 2 0 0 0 1 1 0 0 0) 0.001)\n    (check-within (candidate 10 (list (list 2 4 2) (list 1 2 4) (list 5 2 1) (list 0 1 1) (list 9 4 4) (list 7 9 1) (list 3 9 5) (list 8 5 1) (list 6 2 5)) (list (list 1 2) (list 4 0) (list 8 4) (list 0 3) (list 6 7) (list 3 3) (list 1 6) (list 3 2) (list 9 1) (list 7 8))) (list 0 2 1 3 3 0 1 2 1 2) 0.001)\n    (check-within (candidate 5 (list (list 0 1 5) (list 4 1 5) (list 3 4 4) (list 2 0 2)) (list (list 2 4) (list 1 2) (list 0 4) (list 3 4) (list 0 0) (list 4 3) (list 1 1) (list 1 4) (list 3 0) (list 0 2))) (list 1 1 0 0 0 0 0 0 1 0) 0.001)\n    (check-within (candidate 8 (list (list 0 2 5) (list 7 2 2) (list 1 7 4) (list 5 0 1) (list 4 2 2) (list 3 2 3) (list 6 4 3)) (list (list 7 4) (list 0 4) (list 6 5) (list 0 0) (list 6 1) (list 2 0) (list 5 7) (list 7 2) (list 2 2) (list 1 0))) (list 0 1 3 0 2 0 2 0 0 2) 0.001)\n    (check-within (candidate 8 (list (list 7 5 4) (list 0 5 3) (list 6 7 5) (list 3 0 3) (list 2 6 3) (list 4 2 4) (list 1 4 3)) (list (list 5 5) (list 7 1) (list 3 4) (list 2 7) (list 4 3) (list 6 1) (list 1 4) (list 3 0) (list 6 0))) (list 0 2 3 1 3 1 0 0 2) 0.001)\n    (check-within (candidate 5 (list (list 4 0 4) (list 2 4 4) (list 3 2 1) (list 1 4 4)) (list (list 0 1) (list 0 4) (list 3 4) (list 4 3) (list 1 1) (list 1 4) (list 0 2) (list 3 3) (list 1 3))) (list 0 0 1 1 0 0 0 0 1) 0.001)\n    (check-within (candidate 4 (list (list 0 2 1) (list 3 2 2) (list 1 2 1)) (list (list 0 3) (list 2 3) (list 0 2) (list 3 3) (list 2 2) (list 1 0))) (list 1 0 0 0 0 0) 0.001)\n    (check-within (candidate 5 (list (list 4 2 5) (list 1 4 5) (list 0 4 4) (list 3 4 4)) (list (list 0 1) (list 0 4) (list 3 1) (list 0 3) (list 4 2) (list 3 0) (list 1 4) (list 1 0))) (list 1 0 1 0 0 0 0 1) 0.001)\n    (check-within (candidate 4 (list (list 1 3 4) (list 2 3 5) (list 0 3 2)) (list (list 1 2) (list 0 3) (list 2 0) (list 3 0) (list 0 2) (list 2 2) (list 3 2) (list 1 3))) (list 1 0 1 0 1 0 0 0) 0.001)\n    (check-within (candidate 9 (list (list 5 8 2) (list 3 8 3) (list 6 5 3) (list 7 5 3) (list 1 6 1) (list 0 8 1) (list 4 5 2) (list 2 1 4)) (list (list 8 8) (list 3 4) (list 6 5) (list 2 7) (list 8 1) (list 6 7) (list 2 5) (list 3 5))) (list 0 1 0 2 2 0 2 1) 0.001)\n    (check-within (candidate 10 (list (list 4 5 5) (list 1 4 3) (list 8 4 5) (list 2 1 3) (list 0 1 2) (list 6 0 1) (list 7 0 1) (list 3 7 4) (list 9 2 1)) (list (list 3 8) (list 1 5) (list 0 3) (list 4 6) (list 4 2) (list 2 3) (list 6 3) (list 2 5) (list 9 1) (list 1 9))) (list 4 1 1 2 0 3 1 1 1 1) 0.001)\n    (check-within (candidate 8 (list (list 0 5 5) (list 2 0 2) (list 3 5 2) (list 1 5 1) (list 7 1 5) (list 4 0 4) (list 6 2 4)) (list (list 7 4) (list 0 4) (list 7 1) (list 6 4) (list 5 0) (list 5 6) (list 2 2) (list 2 5))) (list 2 0 0 1 0 2 0 1) 0.001)\n    (check-within (candidate 9 (list (list 0 3 1) (list 4 0 5) (list 8 4 5) (list 5 8 4) (list 1 4 3) (list 6 4 4) (list 7 0 1) (list 2 5 5)) (list (list 1 2) (list 8 4) (list 2 1) (list 6 5) (list 3 4) (list 4 0) (list 2 0) (list 6 0) (list 7 8) (list 2 8))) (list 2 0 2 1 1 0 1 1 1 1) 0.001)\n    (check-within (candidate 5 (list (list 1 2 5) (list 4 2 5) (list 0 4 2) (list 3 1 1)) (list (list 0 4) (list 0 0) (list 4 3) (list 1 4) (list 3 0) (list 2 3) (list 2 2) (list 1 0) (list 1 3))) (list 0 0 1 0 2 1 0 1 0) 0.001)\n    (check-within (candidate 7 (list (list 4 1 3) (list 5 4 5) (list 0 1 2) (list 2 4 3) (list 3 4 2) (list 6 1 5)) (list (list 2 4) (list 4 0) (list 1 2) (list 3 4) (list 1 5) (list 6 1) (list 2 0) (list 3 5))) (list 0 1 0 0 1 0 1 1) 0.001)\n    (check-within (candidate 9 (list (list 8 5 5) (list 0 5 3) (list 4 5 3) (list 6 5 2) (list 1 0 2) (list 3 6 4) (list 2 4 2) (list 7 3 3)) (list (list 0 4) (list 7 7) (list 1 5) (list 8 7) (list 1 1) (list 5 1) (list 2 3) (list 8 3) (list 3 6) (list 3 2))) (list 0 0 1 3 0 1 2 2 0 2) 0.001)\n    (check-within (candidate 9 (list (list 6 3 1) (list 1 6 1) (list 8 3 2) (list 7 1 1) (list 0 8 2) (list 5 3 2) (list 4 3 5) (list 2 6 4)) (list (list 8 1) (list 8 7) (list 6 1) (list 7 3) (list 1 0) (list 1 6) (list 0 8) (list 1 3) (list 5 2))) (list 1 1 0 0 2 0 0 0 2) 0.001)\n    (check-within (candidate 9 (list (list 2 0 1) (list 5 0 1) (list 3 2 4) (list 4 5 2) (list 1 4 3) (list 7 3 5) (list 6 1 1) (list 8 5 5)) (list (list 4 0) (list 7 1) (list 6 5) (list 4 1) (list 8 7) (list 5 7) (list 2 3) (list 1 7) (list 1 3) (list 5 2))) (list 1 4 2 0 3 2 0 4 3 0) 0.001)\n    (check-within (candidate 5 (list (list 3 4 2) (list 2 3 2) (list 0 4 3) (list 1 0 1)) (list (list 4 4) (list 0 1) (list 4 0) (list 1 2) (list 0 0) (list 1 4) (list 2 3) (list 0 2))) (list 0 0 0 2 0 1 0 1) 0.001)\n    (check-within (candidate 4 (list (list 3 2 1) (list 0 3 2) (list 1 3 4)) (list (list 0 1) (list 1 2) (list 3 1) (list 1 1) (list 2 0) (list 0 2) (list 2 2) (list 1 0))) (list 1 1 0 0 1 1 0 1) 0.001)\n    (check-within (candidate 5 (list (list 0 2 2) (list 4 0 5) (list 3 2 2) (list 1 3 3)) (list (list 2 4) (list 1 2) (list 0 0) (list 0 3) (list 4 2) (list 3 0) (list 1 0) (list 3 2) (list 1 3))) (list 1 1 0 0 1 0 1 0 0) 0.001)\n    (check-within (candidate 7 (list (list 5 2 2) (list 3 5 2) (list 1 5 2) (list 0 3 4) (list 6 2 2) (list 4 0 4)) (list (list 1 5) (list 2 0) (list 6 4) (list 0 5) (list 2 2) (list 5 3) (list 1 3) (list 3 5))) (list 0 1 2 1 0 0 0 0) 0.001)\n    (check-within (candidate 4 (list (list 0 3 3) (list 1 3 1) (list 2 1 2)) (list (list 0 1) (list 1 2) (list 2 1) (list 0 0) (list 3 1) (list 1 1) (list 0 2) (list 2 2) (list 1 0) (list 3 2))) (list 1 0 0 0 0 0 2 0 1 1) 0.001)\n    (check-within (candidate 6 (list (list 0 5 3) (list 2 5 4) (list 4 5 1) (list 3 4 4) (list 1 3 5)) (list (list 4 4) (list 2 1) (list 4 1) (list 3 1) (list 0 3) (list 2 2) (list 1 0) (list 1 3))) (list 0 2 1 0 2 0 3 0) 0.001)\n    (check-within (candidate 8 (list (list 0 7 1) (list 4 7 4) (list 3 7 5) (list 1 3 2) (list 5 4 3) (list 2 3 3) (list 6 0 4)) (list (list 4 4) (list 7 4) (list 1 2) (list 7 7) (list 0 0) (list 6 1) (list 0 6) (list 2 6) (list 4 1) (list 4 7))) (list 0 0 1 0 0 3 0 3 2 0) 0.001)\n    (check-within (candidate 5 (list (list 0 3 3) (list 2 0 1) (list 1 2 5) (list 4 0 3)) (list (list 0 4) (list 2 1) (list 3 4) (list 0 0) (list 4 3) (list 3 1) (list 1 1) (list 0 2) (list 4 1))) (list 0 0 0 0 0 2 0 0 2) 0.001)\n    (check-within (candidate 7 (list (list 4 1 3) (list 2 1 2) (list 0 4 3) (list 6 0 3) (list 3 4 2) (list 5 0 5)) (list (list 0 1) (list 6 2) (list 5 4) (list 1 4) (list 3 0) (list 0 2) (list 5 6) (list 3 6) (list 1 0) (list 6 3))) (list 0 1 1 0 1 1 1 1 0 1) 0.001)\n    (check-within (candidate 9 (list (list 8 0 4) (list 4 8 5) (list 1 8 1) (list 7 0 2) (list 2 7 4) (list 3 0 1) (list 6 0 1) (list 5 2 1)) (list (list 4 4) (list 0 4) (list 3 4) (list 2 7) (list 0 0) (list 8 7) (list 8 6) (list 0 5) (list 6 6) (list 8 5))) (list 0 1 2 0 0 1 1 2 0 2) 0.001)\n    (check-within (candidate 9 (list (list 0 4 2) (list 5 4 3) (list 8 5 1) (list 2 5 5) (list 7 2 5) (list 1 0 5) (list 3 4 1) (list 6 2 5)) (list (list 6 5) (list 8 1) (list 0 0) (list 1 4) (list 7 3) (list 8 6) (list 4 8) (list 1 0) (list 3 5))) (list 0 3 0 1 2 1 1 0 1) 0.001)\n    (check-within (candidate 7 (list (list 0 5 2) (list 2 5 5) (list 4 2 3) (list 3 5 2) (list 6 3 5) (list 1 3 4)) (list (list 0 1) (list 3 4) (list 4 1) (list 4 2) (list 3 0) (list 4 5) (list 0 5) (list 3 2) (list 1 3))) (list 1 2 3 0 0 1 0 1 0) 0.001)\n    (check-within (candidate 9 (list (list 0 6 3) (list 1 0 1) (list 4 1 5) (list 3 1 4) (list 2 3 4) (list 5 6 2) (list 8 0 2) (list 7 5 4)) (list (list 7 4) (list 3 8) (list 8 4) (list 2 1) (list 6 8) (list 1 4) (list 7 6) (list 4 1) (list 7 8) (list 5 2))) (list 4 2 2 0 1 0 1 0 2 3) 0.001)\n    (check-within (candidate 6 (list (list 0 4 5) (list 1 0 3) (list 5 0 5) (list 2 1 3) (list 3 4 2)) (list (list 1 2) (list 5 5) (list 4 3) (list 2 0) (list 5 1) (list 0 5) (list 5 3) (list 5 2))) (list 0 0 0 0 1 0 1 1) 0.001)\n    (check-within (candidate 10 (list (list 6 7 1) (list 5 7 1) (list 0 5 1) (list 8 7 2) (list 3 6 2) (list 4 8 2) (list 1 3 1) (list 2 6 4) (list 9 6 5)) (list (list 0 7) (list 7 7) (list 4 3) (list 4 9) (list 9 8) (list 0 5) (list 9 1) (list 4 7) (list 9 4))) (list 0 0 1 2 2 0 2 0 2) 0.001)\n    (check-within (candidate 4 (list (list 3 0 5) (list 1 0 5) (list 2 0 5)) (list (list 0 1) (list 1 2) (list 2 1) (list 3 1) (list 1 1) (list 3 0) (list 2 3))) (list 0 0 0 0 0 0 0) 0.001)\n    (check-within (candidate 9 (list (list 6 8 4) (list 7 6 2) (list 1 7 1) (list 4 6 4) (list 0 7 2) (list 5 4 5) (list 3 5 2) (list 2 0 5)) (list (list 4 3) (list 6 4) (list 1 4) (list 2 2) (list 7 5) (list 1 3) (list 7 8) (list 0 8))) (list 1 0 2 0 2 3 1 1) 0.001)\n    (check-within (candidate 8 (list (list 5 3 1) (list 0 5 3) (list 1 5 2) (list 7 3 5) (list 4 0 2) (list 6 4 4) (list 2 0 1)) (list (list 0 7) (list 2 7) (list 5 4) (list 4 6) (list 5 1) (list 0 2) (list 5 0) (list 5 6) (list 2 2) (list 1 6))) (list 2 2 1 0 0 0 0 2 0 2) 0.001)\n    (check-within (candidate 7 (list (list 2 5 2) (list 6 2 1) (list 3 6 2) (list 1 5 1) (list 4 3 3) (list 0 2 2)) (list (list 0 4) (list 2 1) (list 6 1) (list 5 4) (list 0 3) (list 6 4) (list 0 5) (list 3 2) (list 6 3))) (list 2 1 1 2 1 1 0 1 0) 0.001)\n    (check-within (candidate 7 (list (list 2 3 5) (list 6 2 1) (list 0 3 4) (list 1 0 4) (list 5 1 1) (list 4 2 1)) (list (list 4 4) (list 0 4) (list 3 4) (list 0 0) (list 1 1) (list 0 3) (list 0 6) (list 0 2) (list 3 3) (list 6 0))) (list 0 2 1 0 0 0 2 1 0 2) 0.001)\n    (check-within (candidate 6 (list (list 0 2 2) (list 4 2 1) (list 5 4 5) (list 1 0 4) (list 3 4 5)) (list (list 0 4) (list 3 4) (list 3 1) (list 1 1) (list 5 4) (list 2 0) (list 2 2) (list 5 2))) (list 1 0 3 0 0 0 0 1) 0.001)\n    (check-within (candidate 9 (list (list 3 7 2) (list 1 7 3) (list 4 3 5) (list 6 4 3) (list 8 1 2) (list 5 1 2) (list 2 6 1) (list 0 5 2)) (list (list 3 8) (list 2 4) (list 8 1) (list 6 8) (list 7 3) (list 3 0) (list 1 0) (list 8 2) (list 7 5) (list 8 5))) (list 1 1 0 3 0 1 0 4 1 0) 0.001)\n    (check-within (candidate 9 (list (list 1 4 3) (list 3 4 3) (list 8 4 4) (list 7 1 5) (list 2 7 3) (list 5 8 4) (list 6 7 4) (list 0 2 4)) (list (list 4 4) (list 0 7) (list 1 8) (list 8 3) (list 3 3) (list 5 0) (list 7 6) (list 6 6) (list 2 5) (list 4 1))) (list 0 1 1 1 0 3 0 0 3 0) 0.001)\n    (check-within (candidate 9 (list (list 6 5 3) (list 3 5 3) (list 2 5 5) (list 1 5 2) (list 8 2 3) (list 7 6 3) (list 4 7 2) (list 0 7 4)) (list (list 2 4) (list 8 1) (list 8 7) (list 6 1) (list 4 6) (list 0 3) (list 3 2) (list 3 0) (list 0 8) (list 3 5))) (list 2 2 1 1 1 1 1 1 2 0) 0.001)\n    (check-within (candidate 6 (list (list 3 5 4) (list 4 3 5) (list 0 5 2) (list 1 4 3) (list 2 5 4)) (list (list 1 2) (list 1 5) (list 5 4) (list 5 1) (list 1 4) (list 0 2) (list 0 5) (list 2 5) (list 1 3) (list 5 2))) (list 2 2 1 2 0 1 0 0 1 0) 0.001)\n    (check-within (candidate 5 (list (list 3 0 1) (list 2 3 1) (list 4 2 1) (list 1 0 3)) (list (list 4 0) (list 3 4) (list 4 3) (list 3 1) (list 2 0) (list 3 3) (list 3 2) (list 1 3))) (list 0 0 0 1 0 0 0 1) 0.001)\n    (check-within (candidate 6 (list (list 4 2 1) (list 3 4 4) (list 1 2 5) (list 5 2 3) (list 0 3 5)) (list (list 5 5) (list 0 4) (list 3 1) (list 5 4) (list 0 3) (list 1 4) (list 0 5) (list 3 2) (list 2 5))) (list 0 1 2 1 0 1 3 1 0) 0.001)\n    (check-within (candidate 6 (list (list 3 5 2) (list 1 3 5) (list 2 3 4) (list 0 1 5) (list 4 1 3)) (list (list 0 1) (list 1 1) (list 5 3) (list 5 1) (list 4 5) (list 0 2) (list 3 3) (list 0 5) (list 1 0) (list 3 5))) (list 0 0 0 1 2 1 0 1 0 0) 0.001)\n    (check-within (candidate 7 (list (list 2 3 3) (list 1 2 1) (list 0 3 5) (list 5 1 2) (list 6 5 4) (list 4 6 2)) (list (list 6 2) (list 4 0) (list 0 4) (list 2 3) (list 0 2) (list 3 3) (list 5 0) (list 0 5) (list 1 3) (list 3 5))) (list 2 4 4 0 1 0 3 3 1 2) 0.001)\n    (check-within (candidate 7 (list (list 2 5 1) (list 1 2 2) (list 3 2 4) (list 0 5 1) (list 4 5 1) (list 6 3 2)) (list (list 2 4) (list 3 1) (list 0 3) (list 5 1) (list 4 2) (list 5 0) (list 2 2) (list 1 3))) (list 0 1 1 1 0 0 0 1) 0.001)\n    (check-within (candidate 8 (list (list 5 6 2) (list 7 6 1) (list 3 5 2) (list 1 6 3) (list 0 1 1) (list 4 6 5) (list 2 7 3)) (list (list 6 2) (list 7 1) (list 7 7) (list 4 2) (list 3 0) (list 2 3) (list 7 6) (list 5 3) (list 7 5))) (list 1 1 0 2 2 2 0 0 1) 0.001)\n    (check-within (candidate 5 (list (list 3 1 5) (list 0 1 3) (list 2 3 5) (list 4 3 3)) (list (list 0 1) (list 4 0) (list 0 4) (list 4 3) (list 0 3) (list 1 4) (list 0 2) (list 3 3) (list 2 2) (list 1 3))) (list 0 1 1 0 1 1 1 0 0 0) 0.001)\n    (check-within (candidate 6 (list (list 2 0 1) (list 1 0 1) (list 3 2 5) (list 5 2 4) (list 4 2 4)) (list (list 2 4) (list 3 4) (list 0 0) (list 4 1) (list 0 3) (list 5 1) (list 0 2) (list 4 5) (list 0 5) (list 1 3))) (list 0 1 0 1 1 1 0 0 1 1) 0.001)\n    (check-within (candidate 10 (list (list 2 9 2) (list 5 2 3) (list 7 5 1) (list 0 5 1) (list 8 2 3) (list 4 9 3) (list 3 5 2) (list 1 0 4) (list 6 4 3)) (list (list 9 3) (list 0 0) (list 9 9) (list 4 1) (list 9 6) (list 3 7) (list 4 2) (list 9 7) (list 5 2))) (list 1 0 0 3 0 1 1 2 0) 0.001)\n    (check-within (candidate 5 (list (list 4 0 4) (list 2 0 1) (list 3 0 4) (list 1 3 5)) (list (list 3 4) (list 0 0) (list 3 1) (list 2 0) (list 2 3) (list 3 3) (list 1 3))) (list 0 0 0 0 1 0 0) 0.001)\n    (check-within (candidate 8 (list (list 5 3 2) (list 2 3 2) (list 0 5 4) (list 1 5 1) (list 4 0 3) (list 6 1 1) (list 7 3 3)) (list (list 0 1) (list 5 5) (list 7 7) (list 2 1) (list 3 1) (list 4 6) (list 2 0) (list 7 6) (list 5 3) (list 7 5))) (list 1 0 0 1 1 2 1 2 0 1) 0.001)\n    (check-within (candidate 5 (list (list 0 3 1) (list 2 0 2) (list 1 3 2) (list 4 1 4)) (list (list 0 4) (list 3 4) (list 0 0) (list 1 1) (list 2 0) (list 3 0) (list 2 3) (list 4 1))) (list 2 1 0 0 0 0 1 0) 0.001)\n    (check-within (candidate 5 (list (list 3 4 3) (list 0 3 1) (list 1 4 3) (list 2 0 1)) (list (list 0 1) (list 4 4) (list 4 0) (list 2 1) (list 4 3) (list 3 1) (list 0 2) (list 3 3) (list 1 3))) (list 1 0 1 2 0 0 0 0 0) 0.001)\n    (check-within (candidate 7 (list (list 1 0 2) (list 4 1 5) (list 5 0 2) (list 6 5 3) (list 2 5 5) (list 3 4 3)) (list (list 4 4) (list 2 4) (list 6 4) (list 1 4) (list 5 0) (list 5 6) (list 2 2) (list 1 3))) (list 0 2 2 0 0 0 0 1) 0.001)\n    (check-within (candidate 9 (list (list 6 8 1) (list 1 6 2) (list 0 8 2) (list 4 8 5) (list 3 4 4) (list 5 8 4) (list 2 5 2) (list 7 1 2)) (list (list 0 0) (list 8 1) (list 8 3) (list 1 7) (list 2 6) (list 3 3) (list 0 5) (list 2 2) (list 7 5) (list 2 5))) (list 0 1 1 0 2 0 1 0 2 0) 0.001)\n    (check-within (candidate 9 (list (list 0 1 5) (list 8 1 4) (list 2 8 1) (list 3 2 1) (list 6 3 2) (list 4 2 3) (list 7 8 2) (list 5 2 3)) (list (list 8 8) (list 6 2) (list 3 7) (list 1 8) (list 2 0) (list 1 4) (list 6 3) (list 7 8) (list 5 2))) (list 0 1 1 0 2 2 0 0 0) 0.001)\n    (check-within (candidate 8 (list (list 4 5 2) (list 7 4 2) (list 0 5 2) (list 6 0 1) (list 2 6 1) (list 3 2 1) (list 1 7 5)) (list (list 4 4) (list 3 7) (list 4 6) (list 5 7) (list 3 0) (list 0 2) (list 1 7) (list 3 6) (list 4 7))) (list 0 3 1 0 0 0 0 0 0) 0.001)\n    (check-within (candidate 9 (list (list 5 8 1) (list 4 8 2) (list 1 5 1) (list 7 8 5) (list 0 8 2) (list 6 1 5) (list 2 8 3) (list 3 1 2)) (list (list 6 2) (list 2 7) (list 5 4) (list 1 8) (list 5 7) (list 3 0) (list 6 6) (list 0 8))) (list 2 1 1 0 1 2 0 0) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3080_maxSubarrays", "language": "rkt", "prompt": "#lang racket\n;; You are given an array nums consisting of non-negative integers.\n;; We define the score of subarray nums[l..r] such that l <= r as nums[l] AND nums[l + 1] AND ... AND nums[r] where AND is the bitwise AND operation.\n;; Consider splitting the array into one or more subarrays such that the following conditions are satisfied:\n;;  * Each element of the array belongs to exactly one subarray.\n;;  * The sum of scores of the subarrays is the minimum possible.\n;; Return the maximum number of subarrays in a split that satisfies the conditions above.\n;; A subarray is a contiguous part of an array.\n;; Example 1:\n;; Input: nums = [1,0,2,0,1,2]\n;; Output: 3\n;; Explanation: We can split the array into the following subarrays:\n;; - [1,0]. The score of this subarray is 1 AND 0 = 0.\n;; - [2,0]. The score of this subarray is 2 AND 0 = 0.\n;; - [1,2]. The score of this subarray is 1 AND 2 = 0.\n;; The sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\n;; It can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\n;; Example 2:\n;; Input: nums = [5,7,1,3]\n;; Output: 1\n;; Explanation: We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\n;; It can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 0 <= nums[i] <= 106\n(define (maxSubarrays nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3080_maxSubarrays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxSubarrays))\n    (check-within (candidate (list 1 0 2 0 1 2)) 3 0.001)\n    (check-within (candidate (list 5 7 1 3)) 1 0.001)\n    (check-within (candidate (list 1 0 2 1)) 2 0.001)\n    (check-within (candidate (list 0)) 1 0.001)\n    (check-within (candidate (list 0 0)) 2 0.001)\n    (check-within (candidate (list 100000)) 1 0.001)\n    (check-within (candidate (list 1 2 2 1)) 2 0.001)\n    (check-within (candidate (list 30 18 19 20 11 21 12 22 26)) 2 0.001)\n    (check-within (candidate (list 0 8 0 0 0 23)) 4 0.001)\n    (check-within (candidate (list 8 10 23 26 21 28 21 14 21 14 9 16 24 29 7 26)) 4 0.001)\n    (check-within (candidate (list 18 12 16 28 7 15 24 7 8 26 22 6 23 7 17 1 16)) 6 0.001)\n    (check-within (candidate (list 22)) 1 0.001)\n    (check-within (candidate (list 15 24 20 28 11 16 0 0 0 22 7 18)) 5 0.001)\n    (check-within (candidate (list 0 0 27)) 2 0.001)\n    (check-within (candidate (list 18 7 20 10 0 14 0 28 7 0 0 9 12 0)) 6 0.001)\n    (check-within (candidate (list 0 29 16 0 6 17)) 3 0.001)\n    (check-within (candidate (list 4 7 13 0 23 6 4)) 1 0.001)\n    (check-within (candidate (list 4 27)) 1 0.001)\n    (check-within (candidate (list 29 5 0 25 0 15 19 24 20 0 23)) 4 0.001)\n    (check-within (candidate (list 24 6)) 1 0.001)\n    (check-within (candidate (list 13 20 16 16 27 0 7 18 3 0 23 16 25 0 5 1 4)) 5 0.001)\n    (check-within (candidate (list 0 0 30 20 6 13)) 2 0.001)\n    (check-within (candidate (list 21 24 8 8 20 12 24 28 17 9 17)) 3 0.001)\n    (check-within (candidate (list 0 0 18 0 0 4 5 25 0 0 0 30 0 18 0 0 12 21 21 18)) 12 0.001)\n    (check-within (candidate (list 12 3 0 27 23 0 29 18 0 0 0 20 29 0 2 0 17 10 0 0)) 11 0.001)\n    (check-within (candidate (list 26 28 7 14 24 15 1 16 5 24 4 10 24)) 4 0.001)\n    (check-within (candidate (list 30 11 0 9 15 0 0 0)) 4 0.001)\n    (check-within (candidate (list 16 18 14 6 25 30 7 0 22 0 15 0)) 5 0.001)\n    (check-within (candidate (list 16 12 6 21 26 25 2 0 6 0 13)) 5 0.001)\n    (check-within (candidate (list 13 1 13 18 2 15 15 27 3 3 14 12 23 8 29 10 29 15 10)) 3 0.001)\n    (check-within (candidate (list 0 29 0 28 20 0 21 8 0 0 26 8 0 0 8 12)) 8 0.001)\n    (check-within (candidate (list 0 18 0 0 0 22 0 15)) 5 0.001)\n    (check-within (candidate (list 0 30 26)) 1 0.001)\n    (check-within (candidate (list 0 1 3 29 16 0 0 0 11)) 5 0.001)\n    (check-within (candidate (list 0 10 11 14 0 19 1 0 28 10 27 27 25 17 0 25 19)) 5 0.001)\n    (check-within (candidate (list 18 4 0 6 0 10 23 3 26 0)) 4 0.001)\n    (check-within (candidate (list 11 22 22 22 18 15 8 8 19 12 20 11)) 3 0.001)\n    (check-within (candidate (list 0 23 0 0 0 17 0 0)) 6 0.001)\n    (check-within (candidate (list 0 23 0 14 4 5 23 23 8 8 15 0 0 13 6 26 0)) 7 0.001)\n    (check-within (candidate (list 0 3 0 16 15 0 1 0 24 16 27 0 23 15 0 13 0 0)) 9 0.001)\n    (check-within (candidate (list 12 0 16 0 0 0 29 18)) 4 0.001)\n    (check-within (candidate (list 0 27 15 13)) 1 0.001)\n    (check-within (candidate (list 15 10 0 2 0 3 8 0 0 26 25 27 0 0 0 28 0 10 27 3)) 9 0.001)\n    (check-within (candidate (list 11 10 12 6 15 25 17 21 22)) 2 0.001)\n    (check-within (candidate (list 2 19 13)) 1 0.001)\n    (check-within (candidate (list 27 4)) 1 0.001)\n    (check-within (candidate (list 0 0 12 0 7 0 18 26 9 29 0 4 30 21 0 1)) 7 0.001)\n    (check-within (candidate (list 6 8 0 0 25 0 30 18 18 0)) 5 0.001)\n    (check-within (candidate (list 21 5 18 18 18 0 0 17 0)) 4 0.001)\n    (check-within (candidate (list 25 29 23 27)) 1 0.001)\n    (check-within (candidate (list 28 28 0 16 21 27 12 3 10 0 19 0 0)) 5 0.001)\n    (check-within (candidate (list 9 2 22 14 17 3 21 1 29 3 30 13 16 17 25 26 17)) 4 0.001)\n    (check-within (candidate (list 0 9 4 25 21 0 25 11 13 9 0 0 19 0 16 8 17 26 0 0)) 9 0.001)\n    (check-within (candidate (list 11 0 0 2 3 0 9 26 0 0 25 7 1 12 16 14)) 7 0.001)\n    (check-within (candidate (list 7 11 27 13 23 16 13 5 27 5 16)) 2 0.001)\n    (check-within (candidate (list 18)) 1 0.001)\n    (check-within (candidate (list 20 19 2 20 26 1 17 6 23 25 7 14 16 8)) 5 0.001)\n    (check-within (candidate (list 28 0 29 9 0 11 13 22 10 16 21 30 18 19 0 0 0)) 7 0.001)\n    (check-within (candidate (list 20 26 0 0 0 11 30)) 3 0.001)\n    (check-within (candidate (list 16 12 0 2 15 30 0 16 7 25)) 4 0.001)\n    (check-within (candidate (list 0 7 16 17 29 0 18 0 14 21 17 2 28 7 26 0 14)) 7 0.001)\n    (check-within (candidate (list 29 0 19 23 13)) 1 0.001)\n    (check-within (candidate (list 0 13 1 12 18 24 11 26 7)) 3 0.001)\n    (check-within (candidate (list 7 26 28 12 24 10 11 26 19 29 1 26)) 3 0.001)\n    (check-within (candidate (list 28 15 24 9 0)) 1 0.001)\n    (check-within (candidate (list 22 6 21 16 24 7 18 25 25 26 15 10 26 22 23 15)) 3 0.001)\n    (check-within (candidate (list 0 23 0 1 26 5 18 12 25 23 5 19)) 5 0.001)\n    (check-within (candidate (list 16 19 0 0)) 2 0.001)\n    (check-within (candidate (list 13)) 1 0.001)\n    (check-within (candidate (list 8 9)) 1 0.001)\n    (check-within (candidate (list 0 0 0 11 0 24 8 0 0 17 21 7 0 25 25)) 7 0.001)\n    (check-within (candidate (list 0 0 10 0 0 30 5 0)) 5 0.001)\n    (check-within (candidate (list 29 22 30 22 19 26)) 1 0.001)\n    (check-within (candidate (list 17 15 14 24 30 14 25 28 10 11)) 1 0.001)\n    (check-within (candidate (list 0 0 13 2 12 2 27)) 4 0.001)\n    (check-within (candidate (list 0 18 9 0 20 0 30 22 0)) 5 0.001)\n    (check-within (candidate (list 2 6 23 0 0 6 12 22 0 19 18 0 0 14 19 3 11 28 0 17)) 7 0.001)\n    (check-within (candidate (list 16 12 7)) 1 0.001)\n    (check-within (candidate (list 0 22 0 0 0 26 7)) 4 0.001)\n    (check-within (candidate (list 0 19 5 25 0 0 4 0 0 1 0 10 25 2 3)) 7 0.001)\n    (check-within (candidate (list 7 8 18 14 4 6 22 22 7)) 2 0.001)\n    (check-within (candidate (list 8 9 13 0 0 20)) 2 0.001)\n    (check-within (candidate (list 29 20 13 11 19 27 20 4 24 20 10 21 18 26 3 23 15 18 23 25)) 5 0.001)\n    (check-within (candidate (list 25 0 18 13 22 5 0 0)) 4 0.001)\n    (check-within (candidate (list 9 3 0 2 18 11 15 1 10 0 0 16 0 11)) 5 0.001)\n    (check-within (candidate (list 9 0 0 11 14 0 23 0)) 4 0.001)\n    (check-within (candidate (list 6 3 22 28 0 0 25 2 23 0 0 23 15 0)) 7 0.001)\n    (check-within (candidate (list 0 10 11 25 14)) 1 0.001)\n    (check-within (candidate (list 26 9 27 25 30 25 10 3 14 29 2 6 5 7 8 18)) 3 0.001)\n    (check-within (candidate (list 5 9 0 28 23 11 1 3)) 2 0.001)\n    (check-within (candidate (list 0 22 3 0 15 0 11 3 20 23 0 7 13 20 11 6 19)) 6 0.001)\n    (check-within (candidate (list 0 16 6)) 2 0.001)\n    (check-within (candidate (list 26 9 20 26 22 12 18 21 23 30 3 9 12 19 16)) 4 0.001)\n    (check-within (candidate (list 14 10 8)) 1 0.001)\n    (check-within (candidate (list 0 0 0 19 0)) 4 0.001)\n    (check-within (candidate (list 3 27)) 1 0.001)\n    (check-within (candidate (list 7 14 27)) 1 0.001)\n    (check-within (candidate (list 16 4 29 17 0 0 13 22 1 6 0 29 1 3 0 7)) 6 0.001)\n    (check-within (candidate (list 5 0 0 9 0 0 19 0 0 0 0 7 19 14 3 0 10 29)) 9 0.001)\n    (check-within (candidate (list 16 22 0 0 0 0 27 0 0 0 24 22 0 0)) 9 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3081_minLengthAfterRemovals", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed sorted array of integers nums.\n;; You can perform the following operation any number of times:\n;;  * Choose two indices, i and j, where i < j, such that nums[i] < nums[j].\n;;  * Then, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed.\n;; Return an integer that denotes the minimum length of nums after performing the operation any number of times (including zero).\n;; Note that nums is sorted in non-decreasing order.\n;; Example 1:\n;; Input: nums = [1,3,4,9]\n;; Output: 0\n;; Explanation: Initially, nums = [1, 3, 4, 9].\n;; In the first operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 1 < 3.\n;; Remove indices 0 and 1, and nums becomes [4, 9].\n;; For the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 4 < 9.\n;; Remove indices 0 and 1, and nums becomes an empty array [].\n;; Hence, the minimum length achievable is 0.\n;; Example 2:\n;; Input: nums = [2,3,6,9]\n;; Output: 0\n;; Explanation: Initially, nums = [2, 3, 6, 9].\n;; In the first operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 2 < 6.\n;; Remove indices 0 and 2, and nums becomes [3, 9].\n;; For the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 3 < 9.\n;; Remove indices 0 and 1, and nums becomes an empty array [].\n;; Hence, the minimum length achievable is 0.\n;; Example 3:\n;; Input: nums = [1,1,2]\n;; Output: 1\n;; Explanation: Initially, nums = [1, 1, 2].\n;; In an operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 1 < 2.\n;; Remove indices 0 and 2, and nums becomes [1].\n;; It is no longer possible to perform an operation on the array.\n;; Hence, the minimum achievable length is 1.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n;;  * nums is sorted in non-decreasing order.\n(define (minLengthAfterRemovals nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3081_minLengthAfterRemovals.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minLengthAfterRemovals))\n    (check-within (candidate (list 1 3 4 9)) 0 0.001)\n    (check-within (candidate (list 2 3 6 9)) 0 0.001)\n    (check-within (candidate (list 1 1 2)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 2)) 1 0.001)\n    (check-within (candidate (list 3)) 1 0.001)\n    (check-within (candidate (list 5)) 1 0.001)\n    (check-within (candidate (list 1 1)) 2 0.001)\n    (check-within (candidate (list 1 2)) 0 0.001)\n    (check-within (candidate (list 1 4)) 0 0.001)\n    (check-within (candidate (list 2 3)) 0 0.001)\n    (check-within (candidate (list 3 3)) 2 0.001)\n    (check-within (candidate (list 4 5)) 0 0.001)\n    (check-within (candidate (list 1 1 1)) 3 0.001)\n    (check-within (candidate (list 1 2 2)) 1 0.001)\n    (check-within (candidate (list 1 3 3)) 1 0.001)\n    (check-within (candidate (list 2 2 2)) 3 0.001)\n    (check-within (candidate (list 2 3 3)) 1 0.001)\n    (check-within (candidate (list 2 3 4)) 1 0.001)\n    (check-within (candidate (list 3 4 5)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1)) 4 0.001)\n    (check-within (candidate (list 1 1 2 2)) 0 0.001)\n    (check-within (candidate (list 1 1 3 3)) 0 0.001)\n    (check-within (candidate (list 2 3 3 3)) 2 0.001)\n    (check-within (candidate (list 1 1 1 1 1)) 5 0.001)\n    (check-within (candidate (list 1 1 2 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 5 6)) 1 0.001)\n    (check-within (candidate (list 1 3 3 3 4)) 1 0.001)\n    (check-within (candidate (list 2 3 4 4 4)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1)) 6 0.001)\n    (check-within (candidate (list 1 1 2 3 4 4)) 0 0.001)\n    (check-within (candidate (list 1 1 4 4 5 5)) 0 0.001)\n    (check-within (candidate (list 1 2 2 2 3 3)) 0 0.001)\n    (check-within (candidate (list 1 2 3 3 3 3)) 2 0.001)\n    (check-within (candidate (list 3 4 7 8 9 9)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1)) 7 0.001)\n    (check-within (candidate (list 1 1 1 1 2 2 2)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 2 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 1 2 2 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 1 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 3 3 4)) 1 0.001)\n    (check-within (candidate (list 1 1 2 3 4 5 5)) 1 0.001)\n    (check-within (candidate (list 1 2 3 3 3 3 3)) 3 0.001)\n    (check-within (candidate (list 2 2 2 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1)) 8 0.001)\n    (check-within (candidate (list 1 1 1 1 2 2 2 2)) 0 0.001)\n    (check-within (candidate (list 1 1 2 2 3 3 4 5)) 0 0.001)\n    (check-within (candidate (list 1 1 3 4 4 4 5 5)) 0 0.001)\n    (check-within (candidate (list 1 2 2 2 4 4 4 5)) 0 0.001)\n    (check-within (candidate (list 2 3 3 3 4 4 5 5)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 2 2)) 5 0.001)\n    (check-within (candidate (list 1 1 1 1 2 2 2 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 1 2 2 2 2 2 2)) 3 0.001)\n    (check-within (candidate (list 1 1 1 5 5 5 5 5 5)) 3 0.001)\n    (check-within (candidate (list 1 1 2 2 2 2 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 2 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 2 4 4 5 5 5 6 6)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1)) 10 0.001)\n    (check-within (candidate (list 1 1 1 1 1 2 2 2 3 4)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 2 2 2 2 2 2)) 2 0.001)\n    (check-within (candidate (list 1 1 2 2 2 3 3 3 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 2 2 2 3 3 3 3 4)) 0 0.001)\n    (check-within (candidate (list 1 2 2 4 5 6 6 7 7 8)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1)) 11 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 2 2 2 2 2)) 1 0.001)\n    (check-within (candidate (list 1 1 1 2 2 2 2 2 2 2 2)) 5 0.001)\n    (check-within (candidate (list 1 1 1 2 2 2 3 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 1 2 2 3 4 6 6 8 8)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 2 2 2 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 2 2 3 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 2 2 3 3 3 4 4)) 1 0.001)\n    (check-within (candidate (list 1 2 2 2 3 3 4 5 5 6 6)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1)) 12 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 2 2 2)) 6 0.001)\n    (check-within (candidate (list 1 1 1 1 1 2 2 3 3 4 4 4)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 2 2 2 2 2 2 2 2)) 6 0.001)\n    (check-within (candidate (list 1 1 1 2 2 3 3 3 4 5 5 5)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 4 4 4 4 4 5 6 6)) 0 0.001)\n    (check-within (candidate (list 1 1 2 2 2 2 2 2 2 2 3 3)) 4 0.001)\n    (check-within (candidate (list 1 1 2 2 2 2 2 3 3 3 5 5)) 0 0.001)\n    (check-within (candidate (list 1 1 2 2 2 3 3 4 4 4 5 5)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1 1)) 13 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 2 2 4 4 4 4)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 2 3 3 3 3 3 3 5)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 2 2 2 2 2 3 3 3 3)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 3 3 3 3 4 4 4 6 7)) 1 0.001)\n    (check-within (candidate (list 1 2 2 2 2 2 2 3 3 4 6 7 7)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) 14 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 2 2 2 2 3 3 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 2 2 2 2 2 2 2 2 2)) 4 0.001)\n    (check-within (candidate (list 1 1 1 2 2 2 3 3 3 4 4 4 5 5)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 2 3 3 3 3 4 4 5 5 6)) 0 0.001)\n    (check-within (candidate (list 1 1 2 2 2 3 3 3 5 6 7 9 9 10)) 0 0.001)\n    (check-within (candidate (list 1 3 3 3 3 3 3 3 4 4 4 4 5 5)) 0 0.001)\n    (check-within (candidate (list 2 2 2 2 2 2 2 3 3 3 3 3 3 3)) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2)) 5 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2)) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 2 2 2 4 4 4 5 5 5)) 1 0.001)\n    (check-within (candidate (list 1 1 1 3 5 6 6 7 7 8 8 8 8 9 9)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3091_countSubMultisets", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums of non-negative integers, and two integers l and r.\n;; Return the count of sub-multisets within nums where the sum of elements in each subset falls within the inclusive range of [l, r].\n;; Since the answer may be large, return it modulo 109 + 7.\n;; A sub-multiset is an unordered collection of elements of the array in which a given value x can occur 0, 1, ..., occ[x] times, where occ[x] is the number of occurrences of x in the array.\n;; Note that:\n;;  * Two sub-multisets are the same if sorting both sub-multisets results in identical multisets.\n;;  * The sum of an empty multiset is 0.\n;; Example 1:\n;; Input: nums = [1,2,2,3], l = 6, r = 6\n;; Output: 1\n;; Explanation: The only subset of nums that has a sum of 6 is {1, 2, 3}.\n;; Example 2:\n;; Input: nums = [2,1,4,2,7], l = 1, r = 5\n;; Output: 7\n;; Explanation: The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.\n;; Example 3:\n;; Input: nums = [1,2,1,3,5,2], l = 3, r = 5\n;; Output: 9\n;; Explanation: The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.\n;; Constraints:\n;;  * 1 <= nums.length <= 2 * 104\n;;  * 0 <= nums[i] <= 2 * 104\n;;  * Sum of nums does not exceed 2 * 104.\n;;  * 0 <= l <= r <= 2 * 104\n(define (countSubMultisets nums l r)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3091_countSubMultisets.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countSubMultisets))\n    (check-within (candidate (list 1 2 2 3) 6 6) 1 0.001)\n    (check-within (candidate (list 2 1 4 2 7) 1 5) 7 0.001)\n    (check-within (candidate (list 1 2 1 3 5 2) 3 5) 9 0.001)\n    (check-within (candidate (list 0 0 1 2 3) 2 3) 9 0.001)\n    (check-within (candidate (list 0 0 0 0 0) 0 0) 6 0.001)\n    (check-within (candidate (list 0 0 0 1 2 5 2 3) 0 3) 20 0.001)\n    (check-within (candidate (list 1 1) 2 2) 1 0.001)\n    (check-within (candidate (list 1 1 1) 2 2) 1 0.001)\n    (check-within (candidate (list 1 1 2) 2 4) 4 0.001)\n    (check-within (candidate (list 1 2 1) 2 2) 2 0.001)\n    (check-within (candidate (list 1 2 2) 3 5) 3 0.001)\n    (check-within (candidate (list 2 1 1) 1 2) 3 0.001)\n    (check-within (candidate (list 2 1 2) 2 2) 1 0.001)\n    (check-within (candidate (list 2 2 1) 4 5) 2 0.001)\n    (check-within (candidate (list 2 2 2) 3 6) 2 0.001)\n    (check-within (candidate (list 1 1 1 1) 3 3) 1 0.001)\n    (check-within (candidate (list 1 1 1 2) 1 1) 1 0.001)\n    (check-within (candidate (list 1 1 1 3) 4 4) 1 0.001)\n    (check-within (candidate (list 1 1 2 1) 3 4) 3 0.001)\n    (check-within (candidate (list 1 1 2 2) 2 3) 3 0.001)\n    (check-within (candidate (list 1 1 2 3) 4 5) 4 0.001)\n    (check-within (candidate (list 1 1 3 1) 2 3) 3 0.001)\n    (check-within (candidate (list 1 1 3 2) 6 6) 1 0.001)\n    (check-within (candidate (list 1 1 3 3) 8 8) 1 0.001)\n    (check-within (candidate (list 1 2 1 1) 3 3) 2 0.001)\n    (check-within (candidate (list 1 2 1 2) 4 5) 3 0.001)\n    (check-within (candidate (list 1 2 1 3) 4 7) 6 0.001)\n    (check-within (candidate (list 1 2 2 1) 4 5) 3 0.001)\n    (check-within (candidate (list 1 2 2 2) 1 7) 7 0.001)\n    (check-within (candidate (list 1 2 2 3) 3 8) 9 0.001)\n    (check-within (candidate (list 1 2 3 1) 1 4) 7 0.001)\n    (check-within (candidate (list 1 2 3 2) 4 8) 7 0.001)\n    (check-within (candidate (list 1 2 3 3) 6 6) 2 0.001)\n    (check-within (candidate (list 1 3 1 1) 6 6) 1 0.001)\n    (check-within (candidate (list 1 3 1 2) 7 7) 1 0.001)\n    (check-within (candidate (list 1 3 1 3) 5 6) 2 0.001)\n    (check-within (candidate (list 1 3 2 1) 2 2) 2 0.001)\n    (check-within (candidate (list 1 3 2 2) 7 8) 2 0.001)\n    (check-within (candidate (list 1 3 2 3) 1 9) 11 0.001)\n    (check-within (candidate (list 1 3 3 1) 7 7) 1 0.001)\n    (check-within (candidate (list 1 3 3 2) 1 6) 8 0.001)\n    (check-within (candidate (list 1 3 3 3) 9 10) 2 0.001)\n    (check-within (candidate (list 2 1 1 1) 2 3) 4 0.001)\n    (check-within (candidate (list 2 1 1 2) 1 4) 6 0.001)\n    (check-within (candidate (list 2 1 1 3) 7 7) 1 0.001)\n    (check-within (candidate (list 2 1 2 1) 3 3) 1 0.001)\n    (check-within (candidate (list 2 1 2 2) 6 7) 2 0.001)\n    (check-within (candidate (list 2 1 2 3) 7 7) 1 0.001)\n    (check-within (candidate (list 2 1 3 1) 4 4) 2 0.001)\n    (check-within (candidate (list 2 1 3 2) 3 4) 4 0.001)\n    (check-within (candidate (list 2 1 3 3) 1 5) 6 0.001)\n    (check-within (candidate (list 2 2 1 1) 6 6) 1 0.001)\n    (check-within (candidate (list 2 2 1 2) 2 4) 3 0.001)\n    (check-within (candidate (list 2 2 1 3) 6 8) 3 0.001)\n    (check-within (candidate (list 2 2 2 1) 4 7) 4 0.001)\n    (check-within (candidate (list 2 2 2 2) 3 7) 2 0.001)\n    (check-within (candidate (list 2 2 2 3) 5 6) 2 0.001)\n    (check-within (candidate (list 2 2 3 1) 7 7) 1 0.001)\n    (check-within (candidate (list 2 2 3 2) 5 9) 4 0.001)\n    (check-within (candidate (list 2 2 3 3) 4 10) 6 0.001)\n    (check-within (candidate (list 2 3 1 1) 4 6) 5 0.001)\n    (check-within (candidate (list 2 3 1 2) 3 4) 4 0.001)\n    (check-within (candidate (list 2 3 1 3) 2 8) 9 0.001)\n    (check-within (candidate (list 2 3 2 1) 3 3) 2 0.001)\n    (check-within (candidate (list 2 3 2 2) 3 3) 1 0.001)\n    (check-within (candidate (list 2 3 2 3) 5 6) 2 0.001)\n    (check-within (candidate (list 2 3 3 1) 9 9) 1 0.001)\n    (check-within (candidate (list 2 3 3 2) 8 8) 1 0.001)\n    (check-within (candidate (list 2 3 3 3) 3 5) 2 0.001)\n    (check-within (candidate (list 3 1 1 1) 4 4) 1 0.001)\n    (check-within (candidate (list 3 1 1 2) 7 7) 1 0.001)\n    (check-within (candidate (list 3 1 1 3) 1 1) 1 0.001)\n    (check-within (candidate (list 3 1 2 1) 4 4) 2 0.001)\n    (check-within (candidate (list 3 1 2 2) 3 8) 9 0.001)\n    (check-within (candidate (list 3 1 2 3) 5 9) 6 0.001)\n    (check-within (candidate (list 3 1 3 1) 1 4) 4 0.001)\n    (check-within (candidate (list 3 1 3 2) 3 5) 4 0.001)\n    (check-within (candidate (list 3 1 3 3) 9 10) 2 0.001)\n    (check-within (candidate (list 3 2 1 1) 1 5) 9 0.001)\n    (check-within (candidate (list 3 2 1 2) 1 6) 9 0.001)\n    (check-within (candidate (list 3 2 1 3) 5 7) 4 0.001)\n    (check-within (candidate (list 3 2 2 1) 4 4) 2 0.001)\n    (check-within (candidate (list 3 2 2 2) 6 7) 2 0.001)\n    (check-within (candidate (list 3 2 2 3) 2 7) 6 0.001)\n    (check-within (candidate (list 3 2 3 1) 2 3) 3 0.001)\n    (check-within (candidate (list 3 2 3 2) 8 10) 2 0.001)\n    (check-within (candidate (list 3 2 3 3) 1 11) 7 0.001)\n    (check-within (candidate (list 3 3 1 1) 8 8) 1 0.001)\n    (check-within (candidate (list 3 3 1 2) 2 5) 5 0.001)\n    (check-within (candidate (list 3 3 1 3) 1 7) 5 0.001)\n    (check-within (candidate (list 3 3 2 1) 4 6) 4 0.001)\n    (check-within (candidate (list 3 3 2 2) 7 10) 3 0.001)\n    (check-within (candidate (list 3 3 2 3) 4 10) 4 0.001)\n    (check-within (candidate (list 3 3 3 1) 6 9) 3 0.001)\n    (check-within (candidate (list 3 3 3 2) 11 11) 1 0.001)\n    (check-within (candidate (list 3 3 3 3) 8 9) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1) 3 5) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 2) 2 5) 7 0.001)\n    (check-within (candidate (list 1 1 1 1 3) 6 7) 2 0.001)\n    (check-within (candidate (list 1 1 1 1 4) 8 8) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3092_minimumMoves", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\n;; In one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\n;; Return the minimum number of moves required to place one stone in each cell.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/23/example1-3.svg]\n;; Input: grid = [[1,1,0],[1,1,1],[1,2,1]]\n;; Output: 3\n;; Explanation: One possible sequence of moves to place one stone in each cell is:\n;; 1- Move one stone from cell (2,1) to cell (2,2).\n;; 2- Move one stone from cell (2,2) to cell (1,2).\n;; 3- Move one stone from cell (1,2) to cell (0,2).\n;; In total, it takes 3 moves to place one stone in each cell of the grid.\n;; It can be shown that 3 is the minimum number of moves required to place one stone in each cell.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/23/example2-2.svg]\n;; Input: grid = [[1,3,0],[1,0,0],[1,0,3]]\n;; Output: 4\n;; Explanation: One possible sequence of moves to place one stone in each cell is:\n;; 1- Move one stone from cell (0,1) to cell (0,2).\n;; 2- Move one stone from cell (0,1) to cell (1,1).\n;; 3- Move one stone from cell (2,2) to cell (1,2).\n;; 4- Move one stone from cell (2,2) to cell (2,1).\n;; In total, it takes 4 moves to place one stone in each cell of the grid.\n;; It can be shown that 4 is the minimum number of moves required to place one stone in each cell.\n;; Constraints:\n;;  * grid.length == grid[i].length == 3\n;;  * 0 <= grid[i][j] <= 9\n;;  * Sum of grid is equal to 9.\n(define (minimumMoves grid)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3092_minimumMoves.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumMoves))\n    (check-within (candidate (list (list 1 1 0) (list 1 1 1) (list 1 2 1))) 3 0.001)\n    (check-within (candidate (list (list 1 3 0) (list 1 0 0) (list 1 0 3))) 4 0.001)\n    (check-within (candidate (list (list 1 2 2) (list 1 1 0) (list 0 1 1))) 4 0.001)\n    (check-within (candidate (list (list 1 3 3) (list 1 0 0) (list 0 1 0))) 7 0.001)\n    (check-within (candidate (list (list 3 2 0) (list 0 1 0) (list 0 3 0))) 7 0.001)\n    (check-within (candidate (list (list 1 0 4) (list 2 0 0) (list 2 0 0))) 6 0.001)\n    (check-within (candidate (list (list 0 1 3) (list 3 1 0) (list 0 1 0))) 5 0.001)\n    (check-within (candidate (list (list 3 0 0) (list 0 2 1) (list 1 0 2))) 5 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 4 1 1) (list 0 2 0))) 7 0.001)\n    (check-within (candidate (list (list 0 2 3) (list 2 0 1) (list 0 1 0))) 6 0.001)\n    (check-within (candidate (list (list 4 0 0) (list 0 0 2) (list 3 0 0))) 8 0.001)\n    (check-within (candidate (list (list 3 0 0) (list 4 1 0) (list 1 0 0))) 10 0.001)\n    (check-within (candidate (list (list 0 2 1) (list 1 2 0) (list 3 0 0))) 5 0.001)\n    (check-within (candidate (list (list 1 3 0) (list 0 0 1) (list 2 1 1))) 3 0.001)\n    (check-within (candidate (list (list 3 0 0) (list 1 0 1) (list 0 2 2))) 6 0.001)\n    (check-within (candidate (list (list 4 2 2) (list 0 1 0) (list 0 0 0))) 10 0.001)\n    (check-within (candidate (list (list 3 2 1) (list 1 1 0) (list 1 0 0))) 9 0.001)\n    (check-within (candidate (list (list 0 3 0) (list 2 0 0) (list 1 3 0))) 6 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 3 0 0) (list 4 2 0))) 13 0.001)\n    (check-within (candidate (list (list 1 1 2) (list 0 0 0) (list 0 4 1))) 5 0.001)\n    (check-within (candidate (list (list 4 0 0) (list 0 0 0) (list 1 2 2))) 6 0.001)\n    (check-within (candidate (list (list 1 3 1) (list 0 0 0) (list 1 2 1))) 5 0.001)\n    (check-within (candidate (list (list 3 1 0) (list 1 2 2) (list 0 0 0))) 6 0.001)\n    (check-within (candidate (list (list 2 3 2) (list 0 1 0) (list 0 0 1))) 7 0.001)\n    (check-within (candidate (list (list 0 1 4) (list 0 3 0) (list 0 1 0))) 8 0.001)\n    (check-within (candidate (list (list 0 1 0) (list 1 4 0) (list 0 3 0))) 7 0.001)\n    (check-within (candidate (list (list 0 0 1) (list 0 0 3) (list 2 2 1))) 7 0.001)\n    (check-within (candidate (list (list 1 0 1) (list 1 2 0) (list 1 0 3))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 4 1 2) (list 1 1 0))) 7 0.001)\n    (check-within (candidate (list (list 2 2 1) (list 0 2 1) (list 0 1 0))) 6 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 0 2 0) (list 4 2 0))) 10 0.001)\n    (check-within (candidate (list (list 2 0 1) (list 4 0 0) (list 0 2 0))) 6 0.001)\n    (check-within (candidate (list (list 0 0 3) (list 0 2 0) (list 1 3 0))) 7 0.001)\n    (check-within (candidate (list (list 2 0 1) (list 1 0 0) (list 4 0 1))) 7 0.001)\n    (check-within (candidate (list (list 0 1 0) (list 1 0 3) (list 0 3 1))) 6 0.001)\n    (check-within (candidate (list (list 0 3 1) (list 0 0 0) (list 3 1 1))) 6 0.001)\n    (check-within (candidate (list (list 3 0 1) (list 0 3 1) (list 0 0 1))) 5 0.001)\n    (check-within (candidate (list (list 0 4 0) (list 1 0 0) (list 0 2 2))) 5 0.001)\n    (check-within (candidate (list (list 4 2 0) (list 0 0 0) (list 1 1 1))) 7 0.001)\n    (check-within (candidate (list (list 0 2 0) (list 2 1 2) (list 0 2 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 0) (list 2 1 1) (list 4 0 0))) 8 0.001)\n    (check-within (candidate (list (list 0 4 1) (list 1 0 1) (list 0 0 2))) 6 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 0 0 0) (list 1 3 4))) 9 0.001)\n    (check-within (candidate (list (list 0 7 1) (list 0 1 0) (list 0 0 0))) 13 0.001)\n    (check-within (candidate (list (list 0 1 1) (list 0 2 1) (list 2 0 2))) 4 0.001)\n    (check-within (candidate (list (list 0 2 0) (list 3 0 0) (list 3 1 0))) 8 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 2 0 2) (list 0 2 3))) 8 0.001)\n    (check-within (candidate (list (list 0 3 4) (list 0 1 0) (list 1 0 0))) 9 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 0 0 1) (list 7 0 0))) 13 0.001)\n    (check-within (candidate (list (list 0 0 2) (list 2 0 0) (list 1 4 0))) 6 0.001)\n    (check-within (candidate (list (list 2 0 1) (list 1 3 0) (list 0 2 0))) 5 0.001)\n    (check-within (candidate (list (list 1 0 2) (list 2 3 0) (list 1 0 0))) 6 0.001)\n    (check-within (candidate (list (list 1 1 2) (list 0 0 0) (list 3 1 1))) 4 0.001)\n    (check-within (candidate (list (list 0 2 0) (list 0 1 0) (list 0 0 6))) 10 0.001)\n    (check-within (candidate (list (list 1 1 1) (list 3 0 0) (list 2 1 0))) 5 0.001)\n    (check-within (candidate (list (list 2 0 0) (list 2 0 1) (list 3 1 0))) 8 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 0 2 2) (list 0 3 0))) 4 0.001)\n    (check-within (candidate (list (list 1 0 3) (list 1 1 0) (list 1 0 2))) 3 0.001)\n    (check-within (candidate (list (list 1 3 0) (list 2 0 0) (list 3 0 0))) 7 0.001)\n    (check-within (candidate (list (list 1 0 1) (list 0 0 1) (list 0 1 5))) 10 0.001)\n    (check-within (candidate (list (list 2 0 0) (list 0 2 1) (list 1 1 2))) 4 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 1 0 1) (list 0 0 1))) 8 0.001)\n    (check-within (candidate (list (list 0 2 3) (list 1 0 0) (list 0 1 2))) 6 0.001)\n    (check-within (candidate (list (list 4 1 0) (list 0 1 1) (list 2 0 0))) 8 0.001)\n    (check-within (candidate (list (list 2 0 1) (list 1 0 1) (list 1 2 1))) 2 0.001)\n    (check-within (candidate (list (list 3 0 3) (list 0 0 0) (list 1 1 1))) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 3 4 2) (list 0 0 0))) 7 0.001)\n    (check-within (candidate (list (list 2 1 2) (list 0 0 1) (list 3 0 0))) 6 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 0 3 3) (list 0 0 2))) 7 0.001)\n    (check-within (candidate (list (list 0 2 0) (list 1 0 1) (list 1 3 1))) 5 0.001)\n    (check-within (candidate (list (list 0 1 0) (list 2 0 4) (list 1 0 1))) 5 0.001)\n    (check-within (candidate (list (list 1 0 3) (list 0 0 2) (list 0 1 2))) 7 0.001)\n    (check-within (candidate (list (list 2 1 1) (list 0 0 0) (list 0 1 4))) 6 0.001)\n    (check-within (candidate (list (list 2 0 1) (list 0 2 0) (list 1 3 0))) 5 0.001)\n    (check-within (candidate (list (list 2 0 2) (list 0 0 2) (list 0 0 3))) 6 0.001)\n    (check-within (candidate (list (list 0 2 2) (list 2 0 1) (list 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 1) (list 2 3 2) (list 1 0 0))) 4 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 3 0 4) (list 0 0 0))) 6 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 0 0 0) (list 5 1 2))) 11 0.001)\n    (check-within (candidate (list (list 1 0 0) (list 3 5 0) (list 0 0 0))) 9 0.001)\n    (check-within (candidate (list (list 3 1 1) (list 1 1 0) (list 2 0 0))) 8 0.001)\n    (check-within (candidate (list (list 0 1 3) (list 0 0 1) (list 1 2 1))) 6 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 1 2 0) (list 3 0 3))) 7 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 1 2 2) (list 2 0 2))) 5 0.001)\n    (check-within (candidate (list (list 4 0 0) (list 2 3 0) (list 0 0 0))) 10 0.001)\n    (check-within (candidate (list (list 1 1 0) (list 1 0 1) (list 4 1 0))) 8 0.001)\n    (check-within (candidate (list (list 0 0 1) (list 0 1 2) (list 1 0 4))) 10 0.001)\n    (check-within (candidate (list (list 0 1 3) (list 2 0 0) (list 0 3 0))) 6 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 5 0 1) (list 1 1 1))) 7 0.001)\n    (check-within (candidate (list (list 0 1 1) (list 0 0 3) (list 2 1 1))) 5 0.001)\n    (check-within (candidate (list (list 2 0 1) (list 0 0 1) (list 2 2 1))) 3 0.001)\n    (check-within (candidate (list (list 3 0 2) (list 2 1 0) (list 0 0 1))) 6 0.001)\n    (check-within (candidate (list (list 0 0 2) (list 0 0 2) (list 4 0 1))) 6 0.001)\n    (check-within (candidate (list (list 3 0 0) (list 0 2 0) (list 0 0 4))) 8 0.001)\n    (check-within (candidate (list (list 0 1 3) (list 1 0 0) (list 0 4 0))) 6 0.001)\n    (check-within (candidate (list (list 2 1 2) (list 0 2 1) (list 1 0 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 2) (list 1 0 3) (list 1 0 2))) 6 0.001)\n    (check-within (candidate (list (list 0 2 2) (list 0 1 4) (list 0 0 0))) 10 0.001)\n    (check-within (candidate (list (list 1 0 1) (list 0 0 5) (list 1 1 0))) 6 0.001)\n    (check-within (candidate (list (list 3 1 0) (list 0 0 0) (list 0 1 4))) 8 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3093_sumIndicesWithKSetBits", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and an integer k.\n;; Return an integer that denotes the sum of elements in nums whose corresponding indices have exactly k set bits in their binary representation.\n;; The set bits in an integer are the 1's present when it is written in binary.\n;;  * For example, the binary representation of 21 is 10101, which has 3 set bits.\n;; Example 1:\n;; Input: nums = [5,10,1,5,2], k = 1\n;; Output: 13\n;; Explanation: The binary representation of the indices are:\n;; 0 = 0002\n;; 1 = 0012\n;; 2 = 0102\n;; 3 = 0112\n;; 4 = 1002\n;; Indices 1, 2, and 4 have k = 1 set bits in their binary representation.\n;; Hence, the answer is nums[1] + nums[2] + nums[4] = 13.\n;; Example 2:\n;; Input: nums = [4,3,2,1], k = 2\n;; Output: 1\n;; Explanation: The binary representation of the indices are:\n;; 0 = 002\n;; 1 = 012\n;; 2 = 102\n;; 3 = 112\n;; Only index 3 has k = 2 set bits in its binary representation.\n;; Hence, the answer is nums[3] = 1.\n;; Constraints:\n;;  * 1 <= nums.length <= 1000\n;;  * 1 <= nums[i] <= 105\n;;  * 0 <= k <= 10\n(define (sumIndicesWithKSetBits nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3093_sumIndicesWithKSetBits.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumIndicesWithKSetBits))\n    (check-within (candidate (list 5 10 1 5 2) 1) 13 0.001)\n    (check-within (candidate (list 4 3 2 1) 2) 1 0.001)\n    (check-within (candidate (list 1) 0) 1 0.001)\n    (check-within (candidate (list 100000) 0) 100000 0.001)\n    (check-within (candidate (list 2 2) 1) 2 0.001)\n    (check-within (candidate (list 2 4) 1) 4 0.001)\n    (check-within (candidate (list 2 7) 1) 7 0.001)\n    (check-within (candidate (list 3 3) 1) 3 0.001)\n    (check-within (candidate (list 3 9) 1) 9 0.001)\n    (check-within (candidate (list 4 7) 1) 7 0.001)\n    (check-within (candidate (list 4 8) 1) 8 0.001)\n    (check-within (candidate (list 6 6) 1) 6 0.001)\n    (check-within (candidate (list 7 2) 1) 2 0.001)\n    (check-within (candidate (list 7 4) 1) 4 0.001)\n    (check-within (candidate (list 8 4) 1) 4 0.001)\n    (check-within (candidate (list 8 9) 1) 9 0.001)\n    (check-within (candidate (list 9 9) 1) 9 0.001)\n    (check-within (candidate (list 15 43) 1) 43 0.001)\n    (check-within (candidate (list 35 86) 1) 86 0.001)\n    (check-within (candidate (list 36 14) 1) 14 0.001)\n    (check-within (candidate (list 47 61) 1) 61 0.001)\n    (check-within (candidate (list 60 46) 1) 46 0.001)\n    (check-within (candidate (list 70 7) 1) 7 0.001)\n    (check-within (candidate (list 1 51 55) 1) 106 0.001)\n    (check-within (candidate (list 2 2 5) 1) 7 0.001)\n    (check-within (candidate (list 2 3 2) 1) 5 0.001)\n    (check-within (candidate (list 3 2 5) 1) 7 0.001)\n    (check-within (candidate (list 3 7 5) 1) 12 0.001)\n    (check-within (candidate (list 4 5 9) 1) 14 0.001)\n    (check-within (candidate (list 5 5 5) 1) 10 0.001)\n    (check-within (candidate (list 5 7 7) 1) 14 0.001)\n    (check-within (candidate (list 6 2 1) 1) 3 0.001)\n    (check-within (candidate (list 6 9 8) 1) 17 0.001)\n    (check-within (candidate (list 7 1 2) 1) 3 0.001)\n    (check-within (candidate (list 7 9 1) 1) 10 0.001)\n    (check-within (candidate (list 8 5 4) 1) 9 0.001)\n    (check-within (candidate (list 9 1 6) 1) 7 0.001)\n    (check-within (candidate (list 9 3 5) 1) 8 0.001)\n    (check-within (candidate (list 57 48 69) 1) 117 0.001)\n    (check-within (candidate (list 78 37 59) 1) 96 0.001)\n    (check-within (candidate (list 96 71 53) 1) 124 0.001)\n    (check-within (candidate (list 900 914 367) 1) 1281 0.001)\n    (check-within (candidate (list 1 4 9 2) 2) 2 0.001)\n    (check-within (candidate (list 1 5 9 5) 2) 5 0.001)\n    (check-within (candidate (list 1 8 5 6) 1) 13 0.001)\n    (check-within (candidate (list 2 2 1 2) 1) 3 0.001)\n    (check-within (candidate (list 2 4 5 2) 2) 2 0.001)\n    (check-within (candidate (list 2 5 8 1) 1) 13 0.001)\n    (check-within (candidate (list 2 7 3 9) 1) 10 0.001)\n    (check-within (candidate (list 3 5 4 2) 2) 2 0.001)\n    (check-within (candidate (list 4 1 6 3) 2) 3 0.001)\n    (check-within (candidate (list 6 3 8 8) 2) 8 0.001)\n    (check-within (candidate (list 6 6 1 4) 2) 4 0.001)\n    (check-within (candidate (list 7 1 9 6) 2) 6 0.001)\n    (check-within (candidate (list 7 5 2 1) 1) 7 0.001)\n    (check-within (candidate (list 7 5 3 4) 1) 8 0.001)\n    (check-within (candidate (list 7 8 6 2) 1) 14 0.001)\n    (check-within (candidate (list 8 3 9 8) 2) 8 0.001)\n    (check-within (candidate (list 8 7 3 2) 2) 2 0.001)\n    (check-within (candidate (list 9 4 2 2) 1) 6 0.001)\n    (check-within (candidate (list 9 6 8 8) 1) 14 0.001)\n    (check-within (candidate (list 9 7 8 9) 2) 9 0.001)\n    (check-within (candidate (list 9 40 73 19) 2) 19 0.001)\n    (check-within (candidate (list 41 51 58 2) 1) 109 0.001)\n    (check-within (candidate (list 44 96 36 56) 2) 56 0.001)\n    (check-within (candidate (list 1 1 3 1 6) 2) 1 0.001)\n    (check-within (candidate (list 2 1 1 3 5) 1) 7 0.001)\n    (check-within (candidate (list 2 5 4 3 1) 2) 3 0.001)\n    (check-within (candidate (list 3 2 7 1 5) 1) 14 0.001)\n    (check-within (candidate (list 4 2 8 8 2) 2) 8 0.001)\n    (check-within (candidate (list 4 3 7 8 8) 2) 8 0.001)\n    (check-within (candidate (list 4 6 2 2 7) 1) 15 0.001)\n    (check-within (candidate (list 4 7 5 1 1) 2) 1 0.001)\n    (check-within (candidate (list 5 6 6 6 3) 1) 15 0.001)\n    (check-within (candidate (list 6 4 8 4 2) 2) 4 0.001)\n    (check-within (candidate (list 7 7 9 5 8) 1) 24 0.001)\n    (check-within (candidate (list 7 9 1 3 2) 2) 3 0.001)\n    (check-within (candidate (list 8 5 6 9 7) 2) 9 0.001)\n    (check-within (candidate (list 8 6 9 4 4) 2) 4 0.001)\n    (check-within (candidate (list 8 8 2 9 2) 1) 12 0.001)\n    (check-within (candidate (list 9 3 7 9 6) 1) 16 0.001)\n    (check-within (candidate (list 9 5 5 5 5) 1) 15 0.001)\n    (check-within (candidate (list 27 73 37 82 78) 1) 188 0.001)\n    (check-within (candidate (list 36 28 94 49 79) 2) 49 0.001)\n    (check-within (candidate (list 48 54 75 72 77) 1) 206 0.001)\n    (check-within (candidate (list 574 419 838 216 442) 1) 1699 0.001)\n    (check-within (candidate (list 1 1 1 2 5 7) 2) 9 0.001)\n    (check-within (candidate (list 2 6 6 8 6 4) 2) 12 0.001)\n    (check-within (candidate (list 2 8 2 9 2 8) 2) 17 0.001)\n    (check-within (candidate (list 2 9 1 6 5 7) 2) 13 0.001)\n    (check-within (candidate (list 2 9 1 6 6 7) 2) 13 0.001)\n    (check-within (candidate (list 3 5 4 5 8 9) 1) 17 0.001)\n    (check-within (candidate (list 5 5 3 7 9 7) 1) 17 0.001)\n    (check-within (candidate (list 5 9 4 8 7 2) 2) 10 0.001)\n    (check-within (candidate (list 5 9 6 6 4 5) 2) 11 0.001)\n    (check-within (candidate (list 6 4 7 8 4 7) 2) 15 0.001)\n    (check-within (candidate (list 6 8 6 2 7 3) 2) 5 0.001)\n    (check-within (candidate (list 7 2 5 4 4 4) 1) 11 0.001)\n    (check-within (candidate (list 7 2 9 7 8 7) 2) 14 0.001)\n    (check-within (candidate (list 7 6 6 7 6 1) 2) 8 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3094_minOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums consisting of positive integers.\n;; There are two types of operations that you can apply on the array any number of times:\n;;  * Choose two elements with equal values and delete them from the array.\n;;  * Choose three elements with equal values and delete them from the array.\n;; Return the minimum number of operations required to make the array empty, or -1 if it is not possible.\n;; Example 1:\n;; Input: nums = [2,3,3,2,2,4,2,3,4]\n;; Output: 4\n;; Explanation: We can apply the following operations to make the array empty:\n;; - Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n;; - Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n;; - Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n;; - Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\n;; It can be shown that we cannot make the array empty in less than 4 operations.\n;; Example 2:\n;; Input: nums = [2,1,2,2,3,3]\n;; Output: -1\n;; Explanation: It is impossible to empty the array.\n;; Constraints:\n;;  * 2 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 106\n(define (minOperations nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3094_minOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minOperations))\n    (check-within (candidate (list 2 3 3 2 2 4 2 3 4)) 4 0.001)\n    (check-within (candidate (list 2 1 2 2 3 3)) -1 0.001)\n    (check-within (candidate (list 3 3)) 1 0.001)\n    (check-within (candidate (list 14 12 14 14 12 14 14 12 12 12 12 14 14 12 14 14 14 12 12)) 7 0.001)\n    (check-within (candidate (list 2 2 2 2 2 2 2 2 2)) 3 0.001)\n    (check-within (candidate (list 15 3 3 15 15 13 8 15 6 15 3 1 8 8 15)) -1 0.001)\n    (check-within (candidate (list 19 19 19 19 19 19 19 19 19 19 19 19 19)) 5 0.001)\n    (check-within (candidate (list 13 7 13 7 13 7 13 13 7)) 4 0.001)\n    (check-within (candidate (list 5 5)) 1 0.001)\n    (check-within (candidate (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3)) 5 0.001)\n    (check-within (candidate (list 3 14 3 14 3 14 14 3 3 14 14 14 3 14 14 3 14 14 14 3)) 7 0.001)\n    (check-within (candidate (list 16 16 16 19 16 3 16 8 16 16 16 19 3 16 16)) -1 0.001)\n    (check-within (candidate (list 11 11 11 11 19 11 11 11 11 11 19 11 11 11 11 11 19)) 6 0.001)\n    (check-within (candidate (list 1 1 1 5 1 5 1 1 1 1 1 1 1)) 5 0.001)\n    (check-within (candidate (list 16 16 16 3 16 16 3)) 3 0.001)\n    (check-within (candidate (list 14 4 4 19 19)) -1 0.001)\n    (check-within (candidate (list 1 14 1 1 1)) -1 0.001)\n    (check-within (candidate (list 3 10 11 3 3 11 3 3 3 3 3 3 3 3 10 3 3 3)) 7 0.001)\n    (check-within (candidate (list 3 8 8 8 8 3 8 8 8 8 8 8 8 8)) 5 0.001)\n    (check-within (candidate (list 9 9 9)) 1 0.001)\n    (check-within (candidate (list 6 6 6 6 6 8 8 8 8 6 8 6 15 15 6 15 6 6)) 7 0.001)\n    (check-within (candidate (list 9 19 19 19 9 9 19 19 19 9 9 19 9 19 19 19)) 6 0.001)\n    (check-within (candidate (list 9 4 9 20 20 4 20)) 3 0.001)\n    (check-within (candidate (list 6 9 18 16 18 1 9 1 1 1 1 16 1 6 1 1 9 6)) 7 0.001)\n    (check-within (candidate (list 11 18 11 18 11 18 11)) 3 0.001)\n    (check-within (candidate (list 20 20 20 20 20)) 2 0.001)\n    (check-within (candidate (list 12 7 7)) -1 0.001)\n    (check-within (candidate (list 10 7 9 9 10 9 9 10 10 9 10 9 10 10)) -1 0.001)\n    (check-within (candidate (list 9 9 9 8 9 9 9 9 2 9 9 9 9 9)) -1 0.001)\n    (check-within (candidate (list 5 5 18 1 5 5)) -1 0.001)\n    (check-within (candidate (list 13 13 16 4 16 13 2 16 16 16 2 16 6 16 13 18 9)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8 8 7 8 8 8 8 8 7 8)) 6 0.001)\n    (check-within (candidate (list 20 20 19 19 20 19 20 20 20 19 20 20 20 20 20 20 20 20 20)) 7 0.001)\n    (check-within (candidate (list 4 4 20 20 4 20 1 4 4 4 4 4 4 4 20 4 4)) -1 0.001)\n    (check-within (candidate (list 16 17 17 8 17 17 16 8 17 16 17)) 4 0.001)\n    (check-within (candidate (list 10 10 10 9 10 10 10 9 10 18 10 4 20 2 10 10)) -1 0.001)\n    (check-within (candidate (list 11 20 20 11 11 20 14 20 11 11 20 1)) -1 0.001)\n    (check-within (candidate (list 14 14 14 14 15 20 15)) -1 0.001)\n    (check-within (candidate (list 17 7 17 5 17 17 17 7 17 17 17 17 5 17 17 7 5)) 6 0.001)\n    (check-within (candidate (list 4 4 4 4 4 4 4 4 4)) 3 0.001)\n    (check-within (candidate (list 17 17)) 1 0.001)\n    (check-within (candidate (list 15 2 15 2 8 15 15 15 15 15 15 8 2)) 5 0.001)\n    (check-within (candidate (list 1 12 12 1 1 1 1 12 1)) 3 0.001)\n    (check-within (candidate (list 12 4 9 10 17 12 5 17 4 12 12 12 4 10 4)) -1 0.001)\n    (check-within (candidate (list 7 7 7 7 7 7 7 16 7 7 7 16 7 16 7 16 16 16 16 7)) 8 0.001)\n    (check-within (candidate (list 20 20 20 20 19)) -1 0.001)\n    (check-within (candidate (list 13 13 13 13 13 13 13 13)) 3 0.001)\n    (check-within (candidate (list 15 12 18 18 15 15 15 12 12 12 12 12 12 15 18)) 6 0.001)\n    (check-within (candidate (list 14 14 14 1)) -1 0.001)\n    (check-within (candidate (list 2 2 2 2 2 2 8 2 8 2 2 2 2)) 5 0.001)\n    (check-within (candidate (list 10 16 6 6 10 6)) -1 0.001)\n    (check-within (candidate (list 18 17 3 18 6 13 3 6 14 6 15 3)) -1 0.001)\n    (check-within (candidate (list 15 15)) 1 0.001)\n    (check-within (candidate (list 9 9 9 9 9 9 9 9 9 9 9)) 4 0.001)\n    (check-within (candidate (list 11 4 4 18 11 12 18 18 12 4 4 12 4)) 5 0.001)\n    (check-within (candidate (list 2 5 20 20 5 20 20 16 20 20 20 20 20 20 3 20 20 20)) -1 0.001)\n    (check-within (candidate (list 12 13 13 13 12 13 13 13 13 13 11 13 13 13)) -1 0.001)\n    (check-within (candidate (list 1 1 1 1)) 2 0.001)\n    (check-within (candidate (list 10 10 10 10 3 10 10 3 10)) 4 0.001)\n    (check-within (candidate (list 7 14 7 7 2 2 7)) -1 0.001)\n    (check-within (candidate (list 1 10 1 10 1)) 2 0.001)\n    (check-within (candidate (list 11 11 11 11 11 11 11 11 11 11)) 4 0.001)\n    (check-within (candidate (list 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18)) 7 0.001)\n    (check-within (candidate (list 13 13 13 13 13 13 13)) 3 0.001)\n    (check-within (candidate (list 19 19 19 19 18 19 15 7 19 19 15 5)) -1 0.001)\n    (check-within (candidate (list 2 12 12 12 17 12 12 12 12 12 12 12 12 12 12)) -1 0.001)\n    (check-within (candidate (list 19 16 19 19 16 16 16 16)) 3 0.001)\n    (check-within (candidate (list 15 15 15 15 15 15 11 13 15 15 11 15 13 15 11 13)) 6 0.001)\n    (check-within (candidate (list 15 16 16 15 16)) 2 0.001)\n    (check-within (candidate (list 9 7 14 9 14 7 7 9 9 9 9 9 9 14 14)) 6 0.001)\n    (check-within (candidate (list 12 16 5 5 7 10 2 16 12 7 2 12 5 16 2 11)) -1 0.001)\n    (check-within (candidate (list 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11)) 6 0.001)\n    (check-within (candidate (list 18 13 13 18 18 13 13 18 13 13)) 4 0.001)\n    (check-within (candidate (list 4 4 8 10 8 10 19 19 19 19 8 8 19 4)) 6 0.001)\n    (check-within (candidate (list 1 18 14 16 14)) -1 0.001)\n    (check-within (candidate (list 7 7 7 7 3 7 7 3 7 7)) 4 0.001)\n    (check-within (candidate (list 13 13)) 1 0.001)\n    (check-within (candidate (list 6 11 6 8 6 13 17 14)) -1 0.001)\n    (check-within (candidate (list 10 2 2 10)) 2 0.001)\n    (check-within (candidate (list 19 17 17 17 17 17 17 17 19 19 19 17 19 17)) 5 0.001)\n    (check-within (candidate (list 4 16 12 7 16 16 16)) -1 0.001)\n    (check-within (candidate (list 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11)) 5 0.001)\n    (check-within (candidate (list 6 6 6 13 6 18 13 18 5 18 12 3 12 12 18 6 18 3 18 6)) -1 0.001)\n    (check-within (candidate (list 4 4 3 3 4 4)) 3 0.001)\n    (check-within (candidate (list 11 11 11 11 9 11 9 9 11 11 9 9 11 11 9)) 5 0.001)\n    (check-within (candidate (list 16 16)) 1 0.001)\n    (check-within (candidate (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4)) 5 0.001)\n    (check-within (candidate (list 17 16 16 17 16 16 16)) 3 0.001)\n    (check-within (candidate (list 10 18 10 10)) -1 0.001)\n    (check-within (candidate (list 8 8)) 1 0.001)\n    (check-within (candidate (list 8 6 6 6 8 8 6 8 8 6 8 6 8 8 6 6 6 8)) 6 0.001)\n    (check-within (candidate (list 15 14 20 15 20 14 14 14 20 14 20 20)) 5 0.001)\n    (check-within (candidate (list 19 3 3 3 3 3 3 15 17 3 3 18 10 17 17 15 17 3 3)) -1 0.001)\n    (check-within (candidate (list 1 1 16 2 16 1 2 2 2 2 2 1 2 2 2 16)) 6 0.001)\n    (check-within (candidate (list 1 1 4 4 4)) 2 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) 7 0.001)\n    (check-within (candidate (list 16 18 18 20)) -1 0.001)\n    (check-within (candidate (list 2 2 2 20 15 2 20 15 2 15)) 4 0.001)\n    (check-within (candidate (list 16 16 16 16 16)) 2 0.001)\n    (check-within (candidate (list 1 14 14 14 14 1 14 14 1 14 14 14 14 1 14 14 1 14)) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3095_maxNumberOfAlloys", "language": "rkt", "prompt": "#lang racket\n;; You are the owner of a company that creates alloys using various types of metals. There are n different types of metals available, and you have access to k machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\n;; For the ith machine to create an alloy, it needs composition[i][j] units of metal of type j. Initially, you have stock[i] units of metal type i, and purchasing one unit of metal type i costs cost[i] coins.\n;; Given integers n, k, budget, a 1-indexed 2D array composition, and 1-indexed arrays stock and cost, your goal is to maximize the number of alloys the company can create while staying within the budget of budget coins.\n;; All alloys must be created with the same machine.\n;; Return the maximum number of alloys that the company can create.\n;; Example 1:\n;; Input: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]\n;; Output: 2\n;; Explanation: It is optimal to use the 1st machine to create alloys.\n;; To create 2 alloys we need to buy the:\n;; - 2 units of metal of the 1st type.\n;; - 2 units of metal of the 2nd type.\n;; - 2 units of metal of the 3rd type.\n;; In total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\n;; Notice that we have 0 units of metal of each type and we have to buy all the required units of metal.\n;; It can be proven that we can create at most 2 alloys.\n;; Example 2:\n;; Input: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]\n;; Output: 5\n;; Explanation: It is optimal to use the 2nd machine to create alloys.\n;; To create 5 alloys we need to buy:\n;; - 5 units of metal of the 1st type.\n;; - 5 units of metal of the 2nd type.\n;; - 0 units of metal of the 3rd type.\n;; In total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\n;; It can be proven that we can create at most 5 alloys.\n;; Example 3:\n;; Input: n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]\n;; Output: 2\n;; Explanation: It is optimal to use the 3rd machine to create alloys.\n;; To create 2 alloys we need to buy the:\n;; - 1 unit of metal of the 1st type.\n;; - 1 unit of metal of the 2nd type.\n;; In total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\n;; It can be proven that we can create at most 2 alloys.\n;; Constraints:\n;;  * 1 <= n, k <= 100\n;;  * 0 <= budget <= 108\n;;  * composition.length == k\n;;  * composition[i].length == n\n;;  * 1 <= composition[i][j] <= 100\n;;  * stock.length == cost.length == n\n;;  * 0 <= stock[i] <= 108\n;;  * 1 <= cost[i] <= 100\n(define (maxNumberOfAlloys n k budget composition stock cost)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3095_maxNumberOfAlloys.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxNumberOfAlloys))\n    (check-within (candidate 3 2 15 (list (list 1 1 1) (list 1 1 10)) (list 0 0 0) (list 1 2 3)) 2 0.001)\n    (check-within (candidate 3 2 15 (list (list 1 1 1) (list 1 1 10)) (list 0 0 100) (list 1 2 3)) 5 0.001)\n    (check-within (candidate 2 3 10 (list (list 2 1) (list 1 2) (list 1 1)) (list 1 1) (list 5 5)) 2 0.001)\n    (check-within (candidate 4 4 17 (list (list 10 10 1 5) (list 9 7 7 1) (list 6 3 5 9) (list 2 10 2 7)) (list 9 8 2 7) (list 9 2 6 10)) 1 0.001)\n    (check-within (candidate 4 9 55 (list (list 8 3 4 2) (list 3 9 5 5) (list 1 7 9 8) (list 7 6 5 1) (list 4 6 9 4) (list 6 8 7 1) (list 5 10 3 4) (list 10 1 2 4) (list 10 3 7 2)) (list 9 1 10 0) (list 3 4 9 9)) 1 0.001)\n    (check-within (candidate 10 10 142 (list (list 5 3 7 3 5 5 1 6 4 3) (list 4 8 10 8 8 3 10 6 3 8) (list 10 2 5 10 9 2 8 5 10 7) (list 10 8 8 8 10 8 9 6 1 8) (list 6 2 2 3 6 3 1 10 5 8) (list 10 7 3 10 7 6 6 10 4 5) (list 10 2 8 10 1 8 7 6 6 7) (list 4 1 9 6 8 8 7 1 1 4) (list 10 9 1 2 6 4 6 8 9 4) (list 5 6 7 2 7 10 7 8 3 5)) (list 0 6 3 0 0 8 1 2 8 6) (list 2 2 2 7 4 2 10 8 9 8)) 1 0.001)\n    (check-within (candidate 9 3 90 (list (list 10 9 1 3 3 5 5 10 7) (list 2 6 4 9 9 1 9 6 7) (list 1 4 7 6 7 7 10 6 6)) (list 3 10 10 8 10 5 7 1 2) (list 9 8 10 9 9 3 9 5 8)) 1 0.001)\n    (check-within (candidate 8 4 196 (list (list 5 2 3 4 7 3 3 1) (list 1 5 9 9 6 1 9 7) (list 5 8 3 10 2 4 8 7) (list 9 9 5 9 6 8 4 3)) (list 3 5 3 6 1 5 8 1) (list 4 5 4 9 4 8 7 5)) 2 0.001)\n    (check-within (candidate 2 5 48 (list (list 6 3) (list 9 5) (list 1 9) (list 1 8) (list 3 3)) (list 4 8) (list 10 1)) 5 0.001)\n    (check-within (candidate 3 8 50 (list (list 10 8 5) (list 9 8 8) (list 2 3 1) (list 6 2 7) (list 5 5 3) (list 3 5 6) (list 8 2 9) (list 10 2 1)) (list 3 9 5) (list 1 10 6)) 4 0.001)\n    (check-within (candidate 6 1 195 (list (list 4 7 7 9 6 9)) (list 7 4 1 4 4 0) (list 6 6 9 10 7 9)) 0 0.001)\n    (check-within (candidate 10 4 149 (list (list 9 10 1 7 6 4 9 5 7 8) (list 9 7 2 10 7 9 10 10 1 8) (list 1 10 9 3 5 6 6 1 8 4) (list 9 6 2 3 9 10 6 8 7 3)) (list 5 0 7 5 7 8 2 2 6 10) (list 7 5 3 3 10 9 9 3 6 8)) 1 0.001)\n    (check-within (candidate 5 3 110 (list (list 5 8 9 3 10) (list 10 10 2 1 9) (list 7 8 2 3 4)) (list 7 3 4 8 4) (list 2 2 6 5 7)) 2 0.001)\n    (check-within (candidate 2 3 12 (list (list 5 9) (list 7 8) (list 1 1)) (list 0 9) (list 8 5)) 1 0.001)\n    (check-within (candidate 9 5 172 (list (list 8 8 7 6 5 3 6 10 8) (list 9 5 4 5 9 9 2 8 5) (list 1 9 7 8 4 10 5 1 2) (list 10 10 4 4 5 5 5 5 9) (list 7 10 4 7 9 6 3 1 8)) (list 5 0 10 0 0 8 10 9 8) (list 3 7 6 10 10 5 2 10 6)) 0 0.001)\n    (check-within (candidate 7 10 31 (list (list 10 6 2 1 6 3 9) (list 9 7 1 4 3 3 6) (list 4 8 3 10 7 2 10) (list 8 1 3 3 9 3 6) (list 6 3 2 4 9 7 5) (list 4 2 10 2 9 8 2) (list 9 3 6 1 3 8 1) (list 9 5 6 9 4 10 3) (list 1 8 8 2 5 4 10) (list 1 6 6 6 10 6 4)) (list 3 9 10 4 4 8 9) (list 6 6 9 2 1 9 6)) 1 0.001)\n    (check-within (candidate 4 9 103 (list (list 5 9 6 3) (list 1 5 7 5) (list 5 4 10 6) (list 2 2 4 6) (list 1 1 2 2) (list 10 6 5 4) (list 9 7 8 9) (list 3 7 8 2) (list 8 2 4 4)) (list 7 7 7 3) (list 4 7 6 10)) 5 0.001)\n    (check-within (candidate 10 1 197 (list (list 7 6 6 1 2 4 8 6 4 10)) (list 1 3 2 1 3 4 2 6 1 1) (list 10 6 2 1 6 2 6 5 9 8)) 0 0.001)\n    (check-within (candidate 10 4 152 (list (list 1 7 1 3 9 6 8 9 10 4) (list 8 8 9 3 10 10 4 3 2 2) (list 3 6 4 6 1 9 4 1 4 5) (list 2 5 1 8 3 10 6 3 8 4)) (list 7 2 9 6 9 4 6 6 3 6) (list 8 2 3 9 1 10 1 9 5 4)) 1 0.001)\n    (check-within (candidate 6 9 72 (list (list 1 10 8 5 4 3) (list 6 7 3 6 10 3) (list 10 9 8 6 2 10) (list 8 9 10 7 9 10) (list 2 7 2 7 6 9) (list 4 2 8 2 7 9) (list 2 1 1 8 8 9) (list 5 7 1 7 3 5) (list 4 4 4 3 10 4)) (list 3 3 1 6 10 8) (list 1 8 9 8 3 3)) 1 0.001)\n    (check-within (candidate 1 10 177 (list (list 6) (list 3) (list 8) (list 8) (list 7) (list 7) (list 4) (list 5) (list 10) (list 1)) (list 2) (list 7)) 27 0.001)\n    (check-within (candidate 2 6 196 (list (list 6 5) (list 7 10) (list 3 10) (list 5 8) (list 5 7) (list 5 6)) (list 6 3) (list 3 4)) 5 0.001)\n    (check-within (candidate 7 9 148 (list (list 5 8 7 7 5 8 4) (list 8 6 2 6 3 3 2) (list 5 6 9 6 6 2 5) (list 8 2 10 5 4 5 10) (list 2 8 10 4 9 6 1) (list 4 1 2 2 5 5 5) (list 9 9 1 4 1 4 4) (list 3 8 4 4 10 4 6) (list 8 2 8 4 5 5 10)) (list 7 8 7 9 3 8 2) (list 7 5 4 5 1 3 10)) 2 0.001)\n    (check-within (candidate 8 5 151 (list (list 5 9 10 2 8 10 2 8) (list 1 5 8 9 3 4 6 6) (list 10 10 10 6 1 7 9 4) (list 6 7 6 2 10 8 6 10) (list 5 2 6 2 8 1 6 2)) (list 0 6 2 2 9 8 0 3) (list 6 7 4 6 10 3 5 1)) 1 0.001)\n    (check-within (candidate 8 3 187 (list (list 1 4 8 6 8 5 1 4) (list 10 9 4 3 1 2 5 9) (list 4 10 7 8 7 7 1 9)) (list 2 6 4 0 2 8 2 3) (list 9 2 5 7 6 10 2 7)) 1 0.001)\n    (check-within (candidate 1 3 90 (list (list 5) (list 3) (list 9)) (list 5) (list 10)) 4 0.001)\n    (check-within (candidate 10 5 91 (list (list 7 8 3 2 9 3 4 4 2 3) (list 3 2 4 1 4 5 10 9 10 7) (list 1 4 3 4 9 5 2 2 9 9) (list 6 9 9 6 2 7 1 10 5 3) (list 10 7 8 2 2 2 9 6 1 4)) (list 9 5 5 0 0 8 1 4 5 3) (list 7 3 6 4 10 10 5 4 2 1)) 0 0.001)\n    (check-within (candidate 8 3 97 (list (list 3 3 7 1 5 5 8 2) (list 10 5 1 3 1 5 1 5) (list 7 2 2 10 7 10 6 8)) (list 1 1 8 3 0 1 0 6) (list 4 1 4 5 5 3 5 4)) 1 0.001)\n    (check-within (candidate 9 3 19 (list (list 5 9 4 6 6 1 4 5 3) (list 6 9 2 3 5 4 1 4 5) (list 6 10 5 4 7 5 3 4 3)) (list 8 7 6 3 4 7 7 0 4) (list 10 8 1 6 9 7 3 7 3)) 0 0.001)\n    (check-within (candidate 8 2 168 (list (list 5 7 8 6 7 4 10 8) (list 3 7 7 4 8 9 9 9)) (list 6 4 5 10 2 5 3 8) (list 5 1 10 3 4 4 7 4)) 1 0.001)\n    (check-within (candidate 3 3 108 (list (list 6 1 10) (list 5 3 6) (list 2 8 7)) (list 3 9 7) (list 4 2 3)) 3 0.001)\n    (check-within (candidate 10 5 197 (list (list 7 2 9 6 2 3 8 9 10 10) (list 2 1 7 7 3 1 3 8 1 2) (list 4 5 1 3 6 3 2 4 4 6) (list 8 5 9 10 8 3 7 10 1 7) (list 8 3 2 4 1 5 3 6 9 6)) (list 5 2 9 8 1 3 6 4 2 3) (list 6 6 10 4 9 5 2 6 4 6)) 2 0.001)\n    (check-within (candidate 8 8 90 (list (list 6 6 9 7 6 7 7 5) (list 5 10 4 2 8 5 6 6) (list 7 7 1 10 3 3 2 2) (list 7 9 8 10 7 10 8 2) (list 7 1 2 2 1 2 3 6) (list 2 8 10 10 6 2 6 3) (list 3 2 2 2 4 7 4 3) (list 2 5 3 2 3 7 6 4)) (list 1 1 6 10 3 0 8 6) (list 3 2 1 3 2 3 8 7)) 2 0.001)\n    (check-within (candidate 4 7 87 (list (list 8 8 5 3) (list 7 8 8 9) (list 1 7 3 10) (list 4 3 9 8) (list 4 7 2 2) (list 5 8 2 2) (list 6 1 2 7)) (list 3 7 9 8) (list 6 3 1 4)) 2 0.001)\n    (check-within (candidate 2 3 184 (list (list 7 1) (list 6 7) (list 4 6)) (list 1 6) (list 8 2)) 4 0.001)\n    (check-within (candidate 4 3 25 (list (list 7 4 5 3) (list 10 8 1 2) (list 6 4 3 4)) (list 1 3 0 5) (list 1 2 6 4)) 1 0.001)\n    (check-within (candidate 10 8 33 (list (list 3 2 9 8 3 7 10 2 6 7) (list 6 6 5 6 3 3 4 6 5 7) (list 6 8 5 10 8 4 1 8 4 2) (list 7 10 7 10 4 4 10 7 5 3) (list 2 6 3 3 8 8 2 6 4 2) (list 2 2 2 4 8 2 7 3 7 4) (list 10 9 7 9 9 2 3 9 2 1) (list 8 9 10 7 10 9 7 2 3 8)) (list 0 2 5 5 8 2 5 9 1 1) (list 3 4 10 5 8 8 8 9 8 7)) 0 0.001)\n    (check-within (candidate 7 9 8 (list (list 5 4 8 9 2 2 2) (list 2 8 7 6 8 10 3) (list 6 8 4 4 5 4 10) (list 5 3 7 8 2 2 9) (list 8 4 3 2 6 4 3) (list 5 2 8 5 4 5 10) (list 9 5 4 9 6 5 7) (list 10 1 6 7 2 7 5) (list 3 6 9 9 3 7 6)) (list 3 9 1 5 1 7 9) (list 5 7 1 6 8 3 9)) 0 0.001)\n    (check-within (candidate 1 3 96 (list (list 4) (list 8) (list 3)) (list 0) (list 6)) 5 0.001)\n    (check-within (candidate 4 2 113 (list (list 6 9 5 7) (list 4 9 7 1)) (list 4 1 0 4) (list 9 2 3 5)) 2 0.001)\n    (check-within (candidate 6 6 97 (list (list 9 3 10 2 6 3) (list 9 4 3 7 1 7) (list 10 10 9 2 1 6) (list 4 5 2 3 3 10) (list 2 6 8 3 6 1) (list 4 9 6 10 3 10)) (list 2 8 10 8 9 0) (list 4 5 6 3 10 1)) 2 0.001)\n    (check-within (candidate 9 6 18 (list (list 5 10 2 4 3 3 2 10 3) (list 2 7 1 7 10 7 8 8 7) (list 6 2 10 2 4 3 4 8 9) (list 5 7 2 10 6 10 4 10 3) (list 1 9 4 4 9 9 4 2 6) (list 7 5 1 4 10 9 2 2 3)) (list 5 4 0 1 1 6 1 8 0) (list 8 1 6 5 10 4 10 9 7)) 0 0.001)\n    (check-within (candidate 2 10 197 (list (list 8 1) (list 7 4) (list 2 3) (list 10 3) (list 6 3) (list 9 8) (list 8 7) (list 3 4) (list 2 6) (list 4 5)) (list 5 9) (list 10 2)) 10 0.001)\n    (check-within (candidate 10 4 115 (list (list 4 6 5 10 9 5 2 2 10 1) (list 6 7 2 2 4 10 3 8 3 7) (list 1 9 10 5 4 6 2 1 8 4) (list 7 10 9 5 10 6 9 5 8 4)) (list 7 8 8 8 6 10 7 8 2 3) (list 3 5 1 8 7 7 10 4 7 8)) 1 0.001)\n    (check-within (candidate 6 3 168 (list (list 1 2 10 5 5 8) (list 1 3 6 1 3 6) (list 8 5 6 6 5 10)) (list 7 0 3 1 6 8) (list 5 6 2 5 3 1)) 4 0.001)\n    (check-within (candidate 4 1 13 (list (list 6 10 1 10)) (list 2 9 7 3) (list 7 8 5 5)) 0 0.001)\n    (check-within (candidate 1 3 144 (list (list 4) (list 10) (list 9)) (list 10) (list 1)) 38 0.001)\n    (check-within (candidate 8 4 34 (list (list 9 1 1 9 1 10 6 4) (list 10 8 6 5 7 5 2 9) (list 7 4 5 10 7 2 6 2) (list 3 8 3 6 9 9 10 5)) (list 9 9 6 5 5 7 5 4) (list 7 4 2 2 8 10 10 4)) 0 0.001)\n    (check-within (candidate 10 3 64 (list (list 7 2 7 4 4 6 8 3 5 6) (list 10 10 6 5 4 7 5 1 3 2) (list 10 10 8 4 6 8 9 1 8 10)) (list 8 9 7 3 10 6 6 0 6 10) (list 7 8 4 6 9 7 7 8 2 9)) 1 0.001)\n    (check-within (candidate 9 5 37 (list (list 7 5 8 5 3 1 4 10 6) (list 4 5 5 5 7 4 2 8 1) (list 3 8 3 6 7 9 10 2 7) (list 5 3 5 1 10 3 4 10 6) (list 6 2 9 3 10 6 3 9 7)) (list 1 4 1 7 10 8 8 3 6) (list 7 4 2 7 3 10 9 8 10)) 0 0.001)\n    (check-within (candidate 3 10 67 (list (list 5 3 10) (list 7 5 4) (list 3 9 9) (list 10 2 9) (list 9 4 8) (list 8 5 7) (list 5 2 3) (list 1 7 2) (list 3 9 1) (list 7 1 4)) (list 2 9 4) (list 4 9 1)) 3 0.001)\n    (check-within (candidate 4 7 113 (list (list 6 10 4 10) (list 7 8 1 1) (list 1 5 4 1) (list 4 7 8 9) (list 7 9 2 4) (list 5 1 10 4) (list 3 3 9 4)) (list 0 5 5 10) (list 1 10 8 4)) 2 0.001)\n    (check-within (candidate 10 7 128 (list (list 5 1 1 4 5 9 2 9 2 2) (list 6 10 4 8 3 10 8 4 5 10) (list 3 3 8 5 2 6 4 5 4 8) (list 5 5 4 1 3 2 10 5 3 10) (list 9 4 2 4 2 4 7 7 1 4) (list 9 2 10 5 1 5 5 9 5 6) (list 10 7 9 1 4 7 6 7 5 7)) (list 3 8 4 5 3 5 4 10 4 9) (list 4 1 8 4 2 9 1 2 1 10)) 2 0.001)\n    (check-within (candidate 1 7 48 (list (list 1) (list 5) (list 9) (list 6) (list 4) (list 2) (list 4)) (list 6) (list 1)) 54 0.001)\n    (check-within (candidate 9 4 21 (list (list 7 2 7 7 8 1 6 7 3) (list 8 10 4 3 7 2 3 2 5) (list 6 9 3 2 7 6 10 6 5) (list 10 2 4 10 7 9 5 8 6)) (list 9 10 5 2 10 9 8 10 10) (list 6 5 2 8 10 1 2 7 1)) 1 0.001)\n    (check-within (candidate 8 8 164 (list (list 8 8 7 7 4 8 8 3) (list 8 1 5 9 4 5 10 8) (list 6 3 7 5 5 5 8 7) (list 7 1 6 2 6 10 5 6) (list 9 10 1 10 3 8 9 9) (list 1 5 5 4 5 10 5 9) (list 8 3 5 3 5 4 7 1) (list 10 2 3 6 2 4 8 6)) (list 10 3 10 2 1 4 8 8) (list 2 9 7 7 4 3 2 10)) 2 0.001)\n    (check-within (candidate 1 6 149 (list (list 4) (list 8) (list 1) (list 9) (list 1) (list 9)) (list 6) (list 7)) 27 0.001)\n    (check-within (candidate 6 7 136 (list (list 8 9 8 5 9 8) (list 4 2 1 9 3 8) (list 6 8 3 1 9 9) (list 8 1 4 5 2 7) (list 4 5 6 3 4 9) (list 5 9 8 2 1 10) (list 10 10 9 9 2 8)) (list 4 1 2 9 9 2) (list 8 1 7 8 1 1)) 2 0.001)\n    (check-within (candidate 6 1 55 (list (list 3 5 3 8 9 8)) (list 9 7 0 1 9 4) (list 3 3 1 1 1 2)) 1 0.001)\n    (check-within (candidate 3 1 195 (list (list 7 3 7)) (list 0 10 7) (list 7 6 10)) 2 0.001)\n    (check-within (candidate 1 8 69 (list (list 8) (list 9) (list 10) (list 10) (list 4) (list 4) (list 7) (list 6)) (list 10) (list 9)) 4 0.001)\n    (check-within (candidate 9 2 176 (list (list 8 10 1 2 6 3 5 7 7) (list 4 6 4 8 4 5 3 6 6)) (list 10 9 1 3 10 1 10 5 2) (list 3 8 8 2 5 6 5 8 1)) 1 0.001)\n    (check-within (candidate 8 3 17 (list (list 3 1 4 8 7 8 5 5) (list 7 10 6 6 3 10 10 9) (list 5 6 7 1 4 7 5 1)) (list 0 4 0 4 4 9 2 1) (list 10 1 3 9 9 3 1 10)) 0 0.001)\n    (check-within (candidate 1 9 109 (list (list 8) (list 10) (list 4) (list 3) (list 9) (list 7) (list 9) (list 8) (list 7)) (list 10) (list 9)) 7 0.001)\n    (check-within (candidate 7 6 130 (list (list 4 2 10 2 2 9 4) (list 9 4 8 8 4 9 9) (list 9 10 7 8 7 1 4) (list 8 2 5 5 6 4 7) (list 9 8 4 3 8 6 2) (list 1 2 3 9 4 10 1)) (list 10 1 7 10 1 10 5) (list 3 7 6 5 1 5 7)) 2 0.001)\n    (check-within (candidate 1 8 48 (list (list 5) (list 6) (list 10) (list 9) (list 2) (list 8) (list 9) (list 8)) (list 9) (list 5)) 9 0.001)\n    (check-within (candidate 10 3 124 (list (list 5 8 7 1 7 7 5 4 5 2) (list 9 1 2 8 2 8 3 5 2 4) (list 7 4 6 4 4 2 4 10 4 8)) (list 9 8 7 0 9 1 4 3 1 1) (list 9 3 5 4 3 5 2 10 7 4)) 1 0.001)\n    (check-within (candidate 7 10 177 (list (list 1 8 4 1 9 7 4) (list 8 1 3 3 9 4 5) (list 8 5 4 2 9 9 10) (list 2 10 3 3 3 10 8) (list 6 3 1 3 7 1 7) (list 3 5 7 6 8 10 10) (list 2 10 10 2 2 7 7) (list 3 2 10 9 4 1 2) (list 2 7 1 8 2 7 10) (list 10 9 2 8 10 1 4)) (list 0 3 5 10 0 9 9) (list 3 5 4 8 10 1 2)) 1 0.001)\n    (check-within (candidate 6 3 135 (list (list 7 8 3 4 10 5) (list 6 5 10 3 1 1) (list 5 2 9 9 8 1)) (list 10 0 5 1 0 7) (list 3 10 3 3 3 8)) 1 0.001)\n    (check-within (candidate 10 1 131 (list (list 10 2 8 4 3 6 10 8 8 6)) (list 1 7 10 1 4 8 4 6 7 0) (list 1 10 9 3 9 8 3 2 9 6)) 1 0.001)\n    (check-within (candidate 10 7 79 (list (list 3 8 9 10 7 3 8 4 2 2) (list 7 9 1 1 2 1 8 7 5 7) (list 5 9 6 2 9 4 10 1 8 5) (list 4 3 7 2 4 7 4 6 2 10) (list 4 5 2 5 5 2 7 7 1 8) (list 9 2 9 4 9 4 7 3 4 4) (list 8 4 10 8 2 8 7 5 6 10)) (list 0 4 5 5 7 9 9 7 3 0) (list 10 8 1 2 7 7 4 7 6 6)) 0 0.001)\n    (check-within (candidate 8 7 86 (list (list 10 5 6 8 9 10 6 5) (list 7 8 9 9 3 3 9 4) (list 5 4 4 4 10 2 6 3) (list 9 7 1 10 10 4 4 6) (list 10 9 10 3 4 2 9 4) (list 2 1 4 8 3 6 4 1) (list 1 8 2 2 3 3 10 8)) (list 0 6 0 5 6 0 10 1) (list 7 9 10 10 5 5 7 1)) 1 0.001)\n    (check-within (candidate 6 8 48 (list (list 10 2 1 4 9 1) (list 5 10 6 3 3 9) (list 10 10 10 9 2 9) (list 1 5 2 2 10 9) (list 7 9 10 5 10 3) (list 3 3 10 5 6 2) (list 6 6 6 8 9 9) (list 2 4 2 7 3 3)) (list 5 6 5 1 3 5) (list 4 3 8 6 1 7)) 1 0.001)\n    (check-within (candidate 2 8 44 (list (list 8 5) (list 1 6) (list 3 10) (list 4 6) (list 5 8) (list 10 5) (list 7 5) (list 5 1)) (list 8 0) (list 8 6)) 2 0.001)\n    (check-within (candidate 9 3 107 (list (list 8 1 9 10 10 5 4 9 1) (list 8 10 6 8 10 2 10 9 4) (list 9 6 4 7 10 2 7 4 2)) (list 9 2 4 1 1 3 8 9 0) (list 6 2 8 3 1 3 5 9 9)) 1 0.001)\n    (check-within (candidate 3 5 125 (list (list 10 8 9) (list 10 7 8) (list 7 7 6) (list 9 2 5) (list 8 4 6)) (list 8 3 1) (list 4 10 10)) 1 0.001)\n    (check-within (candidate 6 10 118 (list (list 10 7 8 10 5 9) (list 2 4 4 5 4 2) (list 6 7 2 6 3 10) (list 3 8 10 8 1 6) (list 2 9 3 8 5 5) (list 1 6 8 1 7 7) (list 4 9 1 8 9 5) (list 9 4 10 4 1 4) (list 1 5 10 2 5 3) (list 2 1 3 3 2 9)) (list 9 6 2 2 6 5) (list 2 1 7 5 10 9)) 2 0.001)\n    (check-within (candidate 1 2 148 (list (list 1) (list 8)) (list 4) (list 2)) 78 0.001)\n    (check-within (candidate 5 5 91 (list (list 2 4 10 5 5) (list 4 3 8 8 10) (list 9 6 2 7 3) (list 7 7 3 6 6) (list 6 4 5 3 4)) (list 6 4 7 3 3) (list 4 10 9 7 3)) 1 0.001)\n    (check-within (candidate 8 5 143 (list (list 8 3 3 6 2 5 8 9) (list 6 8 3 6 4 10 10 6) (list 9 6 10 9 6 5 1 1) (list 1 1 10 3 4 10 2 2) (list 10 6 4 9 9 3 9 2)) (list 2 1 4 5 6 8 2 8) (list 1 8 3 9 9 7 1 8)) 1 0.001)\n    (check-within (candidate 4 9 172 (list (list 9 2 2 2) (list 4 5 3 2) (list 4 6 1 9) (list 5 3 3 5) (list 2 4 3 9) (list 7 4 4 3) (list 1 3 2 6) (list 7 2 5 4) (list 4 4 2 2)) (list 6 7 5 2) (list 2 8 5 2)) 5 0.001)\n    (check-within (candidate 5 2 110 (list (list 2 8 10 7 4) (list 5 3 5 5 5)) (list 6 8 8 1 6) (list 8 5 8 6 7)) 1 0.001)\n    (check-within (candidate 3 10 21 (list (list 9 8 5) (list 2 9 9) (list 2 6 8) (list 7 4 10) (list 10 8 6) (list 2 6 5) (list 6 6 8) (list 4 7 7) (list 8 9 10) (list 6 1 7)) (list 6 4 10) (list 7 9 4)) 1 0.001)\n    (check-within (candidate 5 1 176 (list (list 5 6 2 5 4)) (list 1 4 3 10 7) (list 10 9 9 8 10)) 1 0.001)\n    (check-within (candidate 9 1 112 (list (list 10 4 3 5 2 10 10 8 9)) (list 4 4 3 0 5 0 7 6 2) (list 7 9 8 9 2 6 10 5 5)) 0 0.001)\n    (check-within (candidate 8 9 41 (list (list 10 6 7 3 6 9 9 8) (list 5 9 5 2 4 10 2 5) (list 4 10 9 3 5 10 7 1) (list 8 3 1 4 2 5 3 1) (list 1 10 10 10 7 1 10 4) (list 6 9 7 10 8 7 6 9) (list 4 9 10 4 10 7 1 7) (list 3 5 9 5 2 8 3 10) (list 8 7 1 9 3 8 6 3)) (list 5 4 10 10 7 8 7 6) (list 5 1 10 4 9 9 4 6)) 1 0.001)\n    (check-within (candidate 2 10 2 (list (list 9 6) (list 10 1) (list 7 3) (list 5 5) (list 7 6) (list 10 2) (list 7 3) (list 7 6) (list 7 3) (list 2 7)) (list 6 10) (list 1 4)) 1 0.001)\n    (check-within (candidate 2 7 168 (list (list 8 2) (list 4 7) (list 8 3) (list 1 6) (list 3 3) (list 9 7) (list 8 4)) (list 1 7) (list 5 3)) 8 0.001)\n    (check-within (candidate 8 9 195 (list (list 2 5 4 2 2 4 4 1) (list 5 4 5 8 9 1 2 5) (list 1 10 3 9 6 7 1 3) (list 4 10 3 3 6 4 7 6) (list 4 3 10 2 7 8 4 9) (list 4 1 6 2 8 7 3 3) (list 10 7 5 2 1 5 4 5) (list 7 4 3 10 4 10 1 2) (list 9 7 9 8 9 2 3 10)) (list 1 1 7 10 1 6 3 9) (list 1 4 7 6 4 5 5 2)) 3 0.001)\n    (check-within (candidate 7 6 167 (list (list 2 2 3 4 6 2 4) (list 5 7 3 7 4 6 7) (list 5 7 4 10 5 1 1) (list 2 3 10 6 9 5 6) (list 3 9 7 8 5 10 2) (list 6 7 8 8 1 6 6)) (list 10 10 8 9 7 8 4) (list 2 6 1 9 9 9 8)) 2 0.001)\n    (check-within (candidate 6 9 73 (list (list 1 1 9 4 1 7) (list 6 8 7 7 6 2) (list 2 1 5 10 2 5) (list 3 10 7 7 5 10) (list 6 1 6 8 4 6) (list 3 10 10 9 8 2) (list 10 8 7 7 4 2) (list 10 2 3 8 7 4) (list 7 5 9 10 4 3)) (list 1 9 8 6 10 6) (list 6 3 9 7 1 4)) 1 0.001)\n    (check-within (candidate 5 3 128 (list (list 4 6 5 5 1) (list 1 4 8 8 7) (list 3 3 5 4 5)) (list 6 8 8 0 2) (list 2 4 9 7 6)) 2 0.001)\n    (check-within (candidate 10 7 96 (list (list 9 3 10 2 8 6 1 7 2 4) (list 2 10 4 5 5 3 7 5 2 10) (list 8 7 7 10 6 6 3 2 3 8) (list 8 1 5 4 7 8 1 9 2 10) (list 6 7 10 9 8 8 8 3 1 2) (list 1 6 9 1 8 4 9 4 9 7) (list 5 6 5 2 1 8 9 4 3 6)) (list 4 6 3 0 7 0 7 10 8 10) (list 4 3 6 5 6 2 7 3 1 3)) 1 0.001)\n    (check-within (candidate 5 9 81 (list (list 4 4 9 5 5) (list 7 9 10 6 8) (list 4 7 4 2 10) (list 2 9 6 9 8) (list 2 5 7 3 4) (list 4 9 9 2 5) (list 5 6 1 2 9) (list 5 3 8 7 8) (list 8 6 9 9 3)) (list 2 9 6 5 3) (list 3 3 8 7 6)) 1 0.001)\n    (check-within (candidate 10 10 102 (list (list 9 4 10 4 9 4 3 2 2 4) (list 10 8 3 4 5 6 4 10 2 7) (list 4 1 10 9 4 5 7 9 6 8) (list 1 5 9 7 8 5 10 3 8 7) (list 6 2 10 2 8 10 7 5 10 7) (list 7 2 2 6 8 7 9 10 6 8) (list 9 4 8 3 10 3 2 5 6 6) (list 3 1 3 5 10 5 8 8 1 10) (list 6 4 3 9 3 8 8 6 3 5) (list 8 9 1 2 7 8 1 10 8 1)) (list 3 6 1 3 3 7 7 2 2 2) (list 3 10 9 7 1 3 2 9 7 3)) 0 0.001)\n    (check-within (candidate 6 6 115 (list (list 2 5 8 6 2 3) (list 7 10 7 2 10 5) (list 2 7 10 10 3 8) (list 3 3 8 4 3 10) (list 10 10 4 10 4 3) (list 8 9 9 5 7 5)) (list 7 1 10 7 6 2) (list 3 8 9 7 8 4)) 1 0.001)\n    (check-within (candidate 8 10 19 (list (list 7 6 3 10 2 9 7 2) (list 5 10 3 3 10 6 6 10) (list 10 4 9 10 10 7 7 9) (list 10 6 9 3 4 9 9 5) (list 7 1 3 4 8 2 8 8) (list 9 2 3 1 1 2 2 5) (list 2 6 9 3 7 9 5 8) (list 3 10 5 2 8 5 8 10) (list 8 10 1 1 2 1 7 8) (list 10 8 4 8 5 5 10 2)) (list 6 0 9 2 5 0 10 8) (list 2 4 9 8 4 10 3 1)) 0 0.001)\n    (check-within (candidate 7 10 179 (list (list 10 5 2 6 5 2 7) (list 1 6 8 2 4 8 3) (list 8 6 1 2 7 7 4) (list 4 1 9 6 3 8 10) (list 7 6 3 5 3 4 2) (list 8 10 9 3 8 1 5) (list 5 4 1 7 7 6 3) (list 10 9 8 1 10 4 8) (list 9 4 6 2 3 3 9) (list 6 5 2 3 10 6 8)) (list 9 0 2 10 3 7 6) (list 6 2 7 10 1 2 7)) 2 0.001)\n    (check-within (candidate 9 10 123 (list (list 4 9 5 9 9 4 8 10 10) (list 3 1 5 8 4 4 8 6 3) (list 5 7 2 8 2 7 3 9 5) (list 9 4 6 7 2 3 4 3 3) (list 3 6 2 1 3 7 10 7 3) (list 2 6 9 7 5 7 3 10 1) (list 1 7 10 6 9 6 6 9 8) (list 10 8 2 1 6 8 3 8 6) (list 6 5 1 3 5 1 2 3 1) (list 8 2 6 1 8 8 3 2 1)) (list 2 6 3 4 6 1 7 2 6) (list 5 5 9 1 5 10 4 1 2)) 2 0.001)\n    (check-within (candidate 6 1 161 (list (list 4 6 9 8 5 5)) (list 7 4 5 1 9 4) (list 6 5 5 6 3 1)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3104_countWays", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums of length n where n is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\n;; The ith student will become happy if one of these two conditions is met:\n;;  * The student is selected and the total number of selected students is strictly greater than nums[i].\n;;  * The student is not selected and the total number of selected students is strictly less than nums[i].\n;; Return the number of ways to select a group of students so that everyone remains happy.\n;; Example 1:\n;; Input: nums = [1,1]\n;; Output: 2\n;; Explanation:\n;; The two possible ways are:\n;; The class teacher selects no student.\n;; The class teacher selects both students to form the group.\n;; If the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\n;; Example 2:\n;; Input: nums = [6,0,3,3,6,7,2,7]\n;; Output: 3\n;; Explanation:\n;; The three possible ways are:\n;; The class teacher selects the student with index = 1 to form the group.\n;; The class teacher selects the students with index = 1, 2, 3, 6 to form the group.\n;; The class teacher selects all the students to form the group.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 0 <= nums[i] < nums.length\n(define (countWays nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3104_countWays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countWays))\n    (check-within (candidate (list 1 1)) 2 0.001)\n    (check-within (candidate (list 6 0 3 3 6 7 2 7)) 3 0.001)\n    (check-within (candidate (list 1 1 0 1)) 1 0.001)\n    (check-within (candidate (list 5 0 3 4 2 1 2 4)) 1 0.001)\n    (check-within (candidate (list 0 4 4 4 4 4 2)) 2 0.001)\n    (check-within (candidate (list 0 1 5 6 8 7 4 7 2)) 2 0.001)\n    (check-within (candidate (list 0)) 1 0.001)\n    (check-within (candidate (list 2 2 7 1 2 2 4 7)) 3 0.001)\n    (check-within (candidate (list 0 2 2 2 3 3 3 3)) 2 0.001)\n    (check-within (candidate (list 7 7 7 7 7 7 7 7 2)) 2 0.001)\n    (check-within (candidate (list 4 2 3 6 6 0 6 8 3)) 3 0.001)\n    (check-within (candidate (list 0 0 1 7 2 0 6 5)) 1 0.001)\n    (check-within (candidate (list 6 6 6 6 6 6 6 7 1 7)) 2 0.001)\n    (check-within (candidate (list 2 2 4 5 0 1 4 4 7)) 1 0.001)\n    (check-within (candidate (list 4 4 4 4 4)) 2 0.001)\n    (check-within (candidate (list 0 4 0 3 4)) 2 0.001)\n    (check-within (candidate (list 6 5 5 8 4 2 6 4 8)) 3 0.001)\n    (check-within (candidate (list 0 9 4 6 8 8 1 7 4 7)) 2 0.001)\n    (check-within (candidate (list 1 0 0)) 1 0.001)\n    (check-within (candidate (list 1 1 2 2 2 3 3 3 3)) 2 0.001)\n    (check-within (candidate (list 4 5 0 4 2 0 2)) 1 0.001)\n    (check-within (candidate (list 8 1 2 1 2 1 2 4 0)) 1 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 8 4 1 8 8 7 4 5 3)) 2 0.001)\n    (check-within (candidate (list 1 1 0 2 5 5 4)) 1 0.001)\n    (check-within (candidate (list 6 3 1 5 5 4 5)) 2 0.001)\n    (check-within (candidate (list 0 1 1 5 5 5 5 5 5)) 2 0.001)\n    (check-within (candidate (list 2 3 5 3 0 3)) 2 0.001)\n    (check-within (candidate (list 2 2 2 0 2)) 2 0.001)\n    (check-within (candidate (list 1 1 1)) 2 0.001)\n    (check-within (candidate (list 7 7 7 7 7 7 7 7 4 5)) 2 0.001)\n    (check-within (candidate (list 2 2 2 2 4)) 2 0.001)\n    (check-within (candidate (list 3 3 3 3)) 2 0.001)\n    (check-within (candidate (list 1 0)) 1 0.001)\n    (check-within (candidate (list 6 6 6 6 6 6 6 0 4 9)) 2 0.001)\n    (check-within (candidate (list 4 4 4 4 4 5)) 2 0.001)\n    (check-within (candidate (list 2 3 2 1)) 2 0.001)\n    (check-within (candidate (list 3 3 3 3 2 2 2 2 1)) 2 0.001)\n    (check-within (candidate (list 1 5 3 0 3 6 2)) 1 0.001)\n    (check-within (candidate (list 1 1 1 1 1)) 2 0.001)\n    (check-within (candidate (list 0 0)) 1 0.001)\n    (check-within (candidate (list 4 4 4 4 4 0 1)) 2 0.001)\n    (check-within (candidate (list 4 3 1 5 1 4 2 1 6)) 2 0.001)\n    (check-within (candidate (list 6 4 0 7 5 7 5 6 0)) 2 0.001)\n    (check-within (candidate (list 5 5 5 5 5 5)) 2 0.001)\n    (check-within (candidate (list 0 3 4 3 4 1)) 2 0.001)\n    (check-within (candidate (list 1 1 1 3)) 2 0.001)\n    (check-within (candidate (list 0 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 7 6 4 1 2 1 6 4)) 2 0.001)\n    (check-within (candidate (list 2 2 2 4 4 4 4 4)) 3 0.001)\n    (check-within (candidate (list 1 3 5 2 4 6 7 5 6)) 2 0.001)\n    (check-within (candidate (list 1 1 1 1 2 2 2 3)) 2 0.001)\n    (check-within (candidate (list 3 5 3 2 0 3 3 7)) 2 0.001)\n    (check-within (candidate (list 6 6 6 6 6 6 6)) 2 0.001)\n    (check-within (candidate (list 7 9 0 3 6 9 4 0 8 7)) 2 0.001)\n    (check-within (candidate (list 0 0 0)) 1 0.001)\n    (check-within (candidate (list 2 2 2 2 1 3 3 6)) 2 0.001)\n    (check-within (candidate (list 2 2 2 2 2 2 6)) 2 0.001)\n    (check-within (candidate (list 5 3 9 2 4 2 1 2 8 6)) 2 0.001)\n    (check-within (candidate (list 2 2 2 0 0 6 6 2 5 4)) 1 0.001)\n    (check-within (candidate (list 2 0 1)) 1 0.001)\n    (check-within (candidate (list 2 2 0)) 2 0.001)\n    (check-within (candidate (list 2 2 2 2 1 0)) 1 0.001)\n    (check-within (candidate (list 2 2 2 2 4 5 0)) 2 0.001)\n    (check-within (candidate (list 0 1 2)) 1 0.001)\n    (check-within (candidate (list 1 1 3 3 3 3 7 8 2)) 2 0.001)\n    (check-within (candidate (list 1 2 0 4 4)) 2 0.001)\n    (check-within (candidate (list 1 1 0 0)) 1 0.001)\n    (check-within (candidate (list 1 7 8 7 1 0 7 3 8)) 2 0.001)\n    (check-within (candidate (list 2 2 2 1)) 2 0.001)\n    (check-within (candidate (list 1 8 6 3 3 4 3 2 3)) 2 0.001)\n    (check-within (candidate (list 8 1 6 4 1 2 2 3 3)) 2 0.001)\n    (check-within (candidate (list 2 2 2 1 1 5)) 2 0.001)\n    (check-within (candidate (list 1 3 3 3 2)) 2 0.001)\n    (check-within (candidate (list 1 3 2 3)) 2 0.001)\n    (check-within (candidate (list 1 1 2)) 2 0.001)\n    (check-within (candidate (list 0 3 6 3 0 2 3)) 1 0.001)\n    (check-within (candidate (list 7 7 7 7 7 7 7 7 2 0)) 2 0.001)\n    (check-within (candidate (list 5 4 4 4 4 7 1 4)) 2 0.001)\n    (check-within (candidate (list 3 3 3 3 0)) 2 0.001)\n    (check-within (candidate (list 7 7 4 0 2 1 5 2)) 2 0.001)\n    (check-within (candidate (list 0 2 2)) 2 0.001)\n    (check-within (candidate (list 7 7 7 7 7 7 7 7)) 2 0.001)\n    (check-within (candidate (list 2 2 0 3)) 2 0.001)\n    (check-within (candidate (list 3 3 3 3 0 5)) 2 0.001)\n    (check-within (candidate (list 4 4 4 2 5 0)) 2 0.001)\n    (check-within (candidate (list 1 1 3 2)) 2 0.001)\n    (check-within (candidate (list 0 3 0 2 4)) 1 0.001)\n    (check-within (candidate (list 0 3 3 3 3 1 1)) 1 0.001)\n    (check-within (candidate (list 0 4 1 2 0 6 6)) 2 0.001)\n    (check-within (candidate (list 4 4 4 4 4 5 3 6 5 5)) 2 0.001)\n    (check-within (candidate (list 2 0 1 0)) 1 0.001)\n    (check-within (candidate (list 0 5 5 5 5 5 5)) 2 0.001)\n    (check-within (candidate (list 0 5 4 4 3 5)) 2 0.001)\n    (check-within (candidate (list 6 6 6 6 6 6 6 2 7)) 2 0.001)\n    (check-within (candidate (list 1 5 3 7 2 3 1 2 8)) 2 0.001)\n    (check-within (candidate (list 3 3 3 3 2)) 2 0.001)\n    (check-within (candidate (list 3 3 3 3 0 2)) 2 0.001)\n    (check-within (candidate (list 2 3 9 0 1 3 9 2 6 1)) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3105_minEdgeReversals", "language": "rkt", "prompt": "#lang racket\n;; There is a simple directed graph with n nodes labeled from 0 to n - 1. The graph would form a tree if its edges were bi-directional.\n;; You are given an integer n and a 2D integer array edges, where edges[i] = [ui, vi] represents a directed edge going from node ui to node vi.\n;; An edge reversal changes the direction of an edge, i.e., a directed edge going from node ui to node vi becomes a directed edge going from node vi to node ui.\n;; For every node i in the range [0, n - 1], your task is to independently calculate the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\n;; Return an integer array answer, where answer[i] is the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/26/image-20230826221104-3.png]\n;; Input: n = 4, edges = [[2,0],[2,1],[1,3]]\n;; Output: [1,1,0,2]\n;; Explanation: The image above shows the graph formed by the edges.\n;; For node 0: after reversing the edge [2,0], it is possible to reach any other node starting from node 0.\n;; So, answer[0] = 1.\n;; For node 1: after reversing the edge [2,1], it is possible to reach any other node starting from node 1.\n;; So, answer[1] = 1.\n;; For node 2: it is already possible to reach any other node starting from node 2.\n;; So, answer[2] = 0.\n;; For node 3: after reversing the edges [1,3] and [2,1], it is possible to reach any other node starting from node 3.\n;; So, answer[3] = 2.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/26/image-20230826225541-2.png]\n;; Input: n = 3, edges = [[1,2],[2,0]]\n;; Output: [2,0,1]\n;; Explanation: The image above shows the graph formed by the edges.\n;; For node 0: after reversing the edges [2,0] and [1,2], it is possible to reach any other node starting from node 0.\n;; So, answer[0] = 2.\n;; For node 1: it is already possible to reach any other node starting from node 1.\n;; So, answer[1] = 0.\n;; For node 2: after reversing the edge [1, 2], it is possible to reach any other node starting from node 2.\n;; So, answer[2] = 1.\n;; Constraints:\n;;  * 2 <= n <= 105\n;;  * edges.length == n - 1\n;;  * edges[i].length == 2\n;;  * 0 <= ui == edges[i][0] < n\n;;  * 0 <= vi == edges[i][1] < n\n;;  * ui != vi\n;;  * The input is generated such\u00a0that if the edges were bi-directional, the graph would be a tree.\n(define (minEdgeReversals n edges)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3105_minEdgeReversals.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minEdgeReversals))\n    (check-within (candidate 4 (list (list 2 0) (list 2 1) (list 1 3))) (list 1 1 0 2) 0.001)\n    (check-within (candidate 3 (list (list 1 2) (list 2 0))) (list 2 0 1) 0.001)\n    (check-within (candidate 2 (list (list 0 1))) (list 0 1) 0.001)\n    (check-within (candidate 3 (list (list 2 0) (list 2 1))) (list 1 1 0) 0.001)\n    (check-within (candidate 4 (list (list 0 1) (list 3 0) (list 2 3))) (list 2 3 0 1) 0.001)\n    (check-within (candidate 4 (list (list 0 2) (list 0 3) (list 3 1))) (list 0 2 1 1) 0.001)\n    (check-within (candidate 4 (list (list 0 3) (list 1 2) (list 2 3))) (list 2 1 2 3) 0.001)\n    (check-within (candidate 4 (list (list 0 3) (list 1 2) (list 3 1))) (list 0 2 3 1) 0.001)\n    (check-within (candidate 4 (list (list 0 3) (list 2 1) (list 3 1))) (list 1 3 2 2) 0.001)\n    (check-within (candidate 4 (list (list 1 0) (list 2 0) (list 3 2))) (list 3 2 2 1) 0.001)\n    (check-within (candidate 5 (list (list 0 1) (list 0 4) (list 2 3) (list 4 2))) (list 0 1 2 3 1) 0.001)\n    (check-within (candidate 5 (list (list 0 1) (list 2 0) (list 0 4) (list 3 4))) (list 2 3 1 2 3) 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 0 1) (list 3 1) (list 4 1))) (list 2 3 3 2 2) 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 0 1) (list 3 1) (list 4 3))) (list 2 3 3 2 1) 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 1 3) (list 1 4) (list 2 4))) (list 1 2 2 3 3) 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 1 3) (list 2 3) (list 4 2))) (list 2 3 3 4 2) 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 2 1) (list 2 3) (list 4 3))) (list 1 3 2 3 2) 0.001)\n    (check-within (candidate 5 (list (list 0 3) (list 0 4) (list 1 2) (list 4 1))) (list 0 2 3 1 1) 0.001)\n    (check-within (candidate 5 (list (list 1 0) (list 3 0) (list 0 4) (list 2 3))) (list 3 2 1 2 4) 0.001)\n    (check-within (candidate 5 (list (list 3 0) (list 0 4) (list 1 3) (list 2 3))) (list 3 1 1 2 4) 0.001)\n    (check-within (candidate 6 (list (list 0 1) (list 0 5) (list 1 2) (list 3 2) (list 2 4))) (list 1 2 3 2 4 2) 0.001)\n    (check-within (candidate 6 (list (list 0 1) (list 2 1) (list 1 5) (list 2 3) (list 4 3))) (list 2 3 2 3 2 4) 0.001)\n    (check-within (candidate 6 (list (list 0 2) (list 0 3) (list 0 1) (list 0 5) (list 1 4))) (list 0 1 1 1 2 1) 0.001)\n    (check-within (candidate 6 (list (list 0 2) (list 1 3) (list 1 2) (list 2 4) (list 2 5))) (list 1 1 2 2 3 3) 0.001)\n    (check-within (candidate 6 (list (list 0 4) (list 1 2) (list 3 1) (list 5 1) (list 4 5))) (list 1 4 5 3 2 3) 0.001)\n    (check-within (candidate 6 (list (list 1 0) (list 0 4) (list 2 4) (list 2 3) (list 3 5))) (list 2 1 2 3 3 4) 0.001)\n    (check-within (candidate 6 (list (list 1 0) (list 3 1) (list 1 4) (list 2 5) (list 4 5))) (list 3 2 3 1 3 4) 0.001)\n    (check-within (candidate 7 (list (list 0 5) (list 2 0) (list 1 3) (list 6 2) (list 4 3) (list 3 5))) (list 5 4 4 5 4 6 3) 0.001)\n    (check-within (candidate 7 (list (list 0 6) (list 2 1) (list 6 1) (list 2 5) (list 5 3) (list 6 4))) (list 1 3 2 4 3 3 2) 0.001)\n    (check-within (candidate 7 (list (list 5 0) (list 2 0) (list 6 1) (list 2 4) (list 2 3) (list 3 6))) (list 2 4 1 2 2 1 3) 0.001)\n    (check-within (candidate 8 (list (list 0 4) (list 0 3) (list 7 0) (list 1 4) (list 2 5) (list 2 3) (list 6 5))) (list 4 4 4 5 5 5 4 3) 0.001)\n    (check-within (candidate 8 (list (list 0 5) (list 1 0) (list 1 6) (list 1 2) (list 2 3) (list 2 7) (list 4 7))) (list 2 1 2 3 2 3 2 3) 0.001)\n    (check-within (candidate 8 (list (list 1 0) (list 7 1) (list 2 6) (list 5 2) (list 3 6) (list 5 4) (list 5 7))) (list 4 3 2 2 2 1 3 2) 0.001)\n    (check-within (candidate 8 (list (list 2 0) (list 5 0) (list 3 1) (list 1 4) (list 6 2) (list 4 5) (list 7 5))) (list 7 4 6 3 5 6 5 5) 0.001)\n    (check-within (candidate 8 (list (list 4 0) (list 0 1) (list 1 3) (list 3 2) (list 6 2) (list 2 7) (list 5 7))) (list 3 4 6 5 2 6 5 7) 0.001)\n    (check-within (candidate 8 (list (list 4 0) (list 7 1) (list 2 3) (list 7 2) (list 5 3) (list 4 6) (list 7 6))) (list 3 3 3 4 2 3 3 2) 0.001)\n    (check-within (candidate 9 (list (list 0 5) (list 0 2) (list 0 7) (list 0 4) (list 7 1) (list 3 2) (list 6 3) (list 8 4))) (list 3 5 4 3 4 4 2 4 3) 0.001)\n    (check-within (candidate 9 (list (list 0 5) (list 0 6) (list 0 2) (list 5 1) (list 7 2) (list 4 2) (list 3 6) (list 8 4))) (list 4 6 5 4 4 5 5 4 3) 0.001)\n    (check-within (candidate 9 (list (list 0 5) (list 7 0) (list 1 6) (list 1 3) (list 2 8) (list 3 4) (list 3 7) (list 7 8))) (list 4 1 3 2 3 5 2 3 4) 0.001)\n    (check-within (candidate 9 (list (list 2 0) (list 1 6) (list 1 5) (list 2 3) (list 2 5) (list 4 5) (list 5 7) (list 8 7))) (list 4 3 3 4 3 4 4 5 4) 0.001)\n    (check-within (candidate 9 (list (list 7 0) (list 0 6) (list 1 2) (list 2 6) (list 3 6) (list 4 5) (list 5 8) (list 8 6))) (list 7 6 7 7 5 6 8 6 7) 0.001)\n    (check-within (candidate 10 (list (list 0 1) (list 0 2) (list 2 4) (list 6 2) (list 3 9) (list 5 4) (list 4 8) (list 5 7) (list 9 6))) (list 4 5 5 2 6 5 4 6 7 3) 0.001)\n    (check-within (candidate 10 (list (list 0 3) (list 0 5) (list 0 1) (list 8 1) (list 6 1) (list 2 3) (list 4 6) (list 9 4) (list 5 7))) (list 5 6 5 6 4 6 5 7 5 3) 0.001)\n    (check-within (candidate 10 (list (list 0 5) (list 1 3) (list 1 9) (list 2 7) (list 4 2) (list 6 3) (list 3 4) (list 5 4) (list 7 8))) (list 3 3 6 4 5 4 3 7 8 4) 0.001)\n    (check-within (candidate 10 (list (list 1 0) (list 0 5) (list 6 0) (list 2 3) (list 4 2) (list 2 6) (list 8 2) (list 2 9) (list 8 7))) (list 5 4 3 4 2 6 4 3 2 4) 0.001)\n    (check-within (candidate 10 (list (list 6 0) (list 7 0) (list 4 1) (list 1 9) (list 2 7) (list 9 2) (list 3 7) (list 5 7) (list 8 9))) (list 9 5 7 7 4 7 8 8 5 6) 0.001)\n    (check-within (candidate 10 (list (list 7 0) (list 1 2) (list 1 9) (list 2 3) (list 2 8) (list 5 3) (list 4 6) (list 6 7) (list 7 9))) (list 5 4 5 6 2 5 3 4 6 5) 0.001)\n    (check-within (candidate 10 (list (list 7 0) (list 1 5) (list 2 6) (list 8 2) (list 7 3) (list 4 5) (list 5 6) (list 9 7) (list 8 9))) (list 6 3 4 6 3 4 5 5 3 4) 0.001)\n    (check-within (candidate 11 (list (list 0 1) (list 1 2) (list 8 1) (list 2 4) (list 3 9) (list 3 7) (list 6 4) (list 5 7) (list 5 6) (list 10 8))) (list 5 6 7 6 8 6 7 7 5 7 4) 0.001)\n    (check-within (candidate 11 (list (list 0 3) (list 0 2) (list 1 4) (list 1 5) (list 2 9) (list 3 5) (list 7 6) (list 7 9) (list 7 8) (list 8 10))) (list 2 3 3 3 4 4 4 3 4 4 5) 0.001)\n    (check-within (candidate 11 (list (list 0 3) (list 0 7) (list 0 9) (list 0 10) (list 1 4) (list 4 2) (list 2 6) (list 6 3) (list 5 6) (list 7 8))) (list 5 2 4 6 3 4 5 6 7 6 6) 0.001)\n    (check-within (candidate 11 (list (list 2 0) (list 0 9) (list 1 5) (list 2 8) (list 3 5) (list 3 8) (list 9 4) (list 9 6) (list 6 10) (list 7 10))) (list 4 3 3 3 6 4 6 6 4 5 7) 0.001)\n    (check-within (candidate 11 (list (list 6 0) (list 0 1) (list 1 4) (list 2 8) (list 9 3) (list 4 10) (list 5 8) (list 5 6) (list 6 9) (list 10 7))) (list 3 4 1 4 5 1 2 7 2 3 6) 0.001)\n    (check-within (candidate 11 (list (list 7 0) (list 1 0) (list 1 6) (list 5 1) (list 4 2) (list 8 2) (list 9 2) (list 7 3) (list 5 9) (list 10 5))) (list 6 5 6 6 5 4 6 5 5 5 3) 0.001)\n    (check-within (candidate 11 (list (list 8 0) (list 6 1) (list 7 1) (list 1 10) (list 3 2) (list 4 3) (list 3 8) (list 5 8) (list 8 9) (list 9 10))) (list 7 7 6 5 4 5 6 6 6 7 8) 0.001)\n    (check-within (candidate 11 (list (list 10 0) (list 1 2) (list 1 10) (list 2 8) (list 3 9) (list 3 5) (list 4 6) (list 7 4) (list 4 8) (list 5 8))) (list 6 4 5 4 5 5 6 4 6 5 5) 0.001)\n    (check-within (candidate 12 (list (list 0 10) (list 1 3) (list 1 10) (list 2 7) (list 2 11) (list 3 4) (list 5 9) (list 5 11) (list 6 9) (list 9 8) (list 9 10))) (list 5 5 4 6 7 4 4 5 6 5 6 5) 0.001)\n    (check-within (candidate 12 (list (list 3 0) (list 10 0) (list 6 0) (list 1 9) (list 3 2) (list 4 6) (list 4 7) (list 5 11) (list 11 7) (list 8 10) (list 9 11))) (list 9 5 9 8 7 6 8 8 7 6 8 7) 0.001)\n    (check-within (candidate 12 (list (list 4 0) (list 11 0) (list 1 9) (list 1 3) (list 6 2) (list 2 7) (list 2 3) (list 3 10) (list 4 10) (list 5 6) (list 10 8))) (list 7 5 5 6 6 3 4 6 8 6 7 6) 0.001)\n    (check-within (candidate 12 (list (list 10 0) (list 0 3) (list 1 6) (list 1 8) (list 1 5) (list 2 3) (list 2 4) (list 3 5) (list 4 7) (list 4 11) (list 10 9))) (list 3 4 3 4 4 5 5 5 5 3 2 5) 0.001)\n    (check-within (candidate 13 (list (list 0 5) (list 1 10) (list 2 4) (list 2 7) (list 10 2) (list 3 5) (list 5 12) (list 11 6) (list 6 12) (list 8 10) (list 8 11) (list 10 9))) (list 5 4 6 5 7 6 6 7 4 6 5 5 7) 0.001)\n    (check-within (candidate 13 (list (list 0 11) (list 1 4) (list 1 8) (list 1 3) (list 3 2) (list 10 3) (list 12 3) (list 12 5) (list 6 11) (list 10 7) (list 9 10) (list 11 12))) (list 4 6 8 7 7 7 4 7 7 5 6 5 6) 0.001)\n    (check-within (candidate 13 (list (list 5 0) (list 0 2) (list 0 9) (list 10 1) (list 6 1) (list 7 2) (list 2 6) (list 3 7) (list 8 4) (list 4 11) (list 4 12) (list 9 12))) (list 6 9 7 5 7 5 8 6 6 7 8 8 8) 0.001)\n    (check-within (candidate 13 (list (list 7 0) (list 3 1) (list 2 4) (list 2 8) (list 10 2) (list 3 10) (list 9 5) (list 5 7) (list 6 11) (list 6 12) (list 12 7) (list 10 12))) (list 7 4 5 3 6 5 4 6 6 4 4 5 5) 0.001)\n    (check-within (candidate 14 (list (list 0 1) (list 0 7) (list 2 6) (list 2 8) (list 11 3) (list 4 12) (list 4 11) (list 5 10) (list 7 11) (list 13 7) (list 8 10) (list 10 9) (list 9 12))) (list 7 8 5 10 8 6 6 8 6 8 7 9 9 7) 0.001)\n    (check-within (candidate 14 (list (list 0 1) (list 1 2) (list 2 8) (list 9 2) (list 6 2) (list 13 2) (list 3 4) (list 5 4) (list 7 5) (list 6 10) (list 12 6) (list 11 7) (list 11 10))) (list 6 7 8 9 10 9 7 8 9 7 8 7 6 7) 0.001)\n    (check-within (candidate 14 (list (list 0 2) (list 0 3) (list 0 13) (list 1 3) (list 2 4) (list 8 2) (list 11 3) (list 12 3) (list 4 6) (list 5 7) (list 7 9) (list 7 11) (list 10 12))) (list 7 7 8 8 9 5 10 6 7 7 6 7 7 8) 0.001)\n    (check-within (candidate 14 (list (list 0 4) (list 0 8) (list 1 3) (list 1 13) (list 2 9) (list 4 11) (list 4 12) (list 5 11) (list 8 6) (list 13 6) (list 7 9) (list 7 8) (list 10 8))) (list 6 6 6 7 7 7 8 6 7 7 6 8 8 7) 0.001)\n    (check-within (candidate 14 (list (list 0 6) (list 5 0) (list 2 0) (list 12 1) (list 13 2) (list 12 3) (list 4 7) (list 5 7) (list 7 12) (list 8 13) (list 9 11) (list 9 10) (list 10 13))) (list 7 9 6 9 6 6 8 7 4 3 4 4 8 5) 0.001)\n    (check-within (candidate 14 (list (list 0 9) (list 0 11) (list 0 5) (list 1 6) (list 1 11) (list 7 2) (list 3 5) (list 3 12) (list 3 13) (list 11 4) (list 6 10) (list 9 7) (list 11 8))) (list 2 2 5 2 4 3 3 4 4 3 4 3 3 3) 0.001)\n    (check-within (candidate 14 (list (list 0 11) (list 1 2) (list 1 10) (list 1 6) (list 3 6) (list 4 11) (list 10 4) (list 5 12) (list 13 6) (list 8 7) (list 8 9) (list 8 12) (list 8 13))) (list 7 5 6 5 7 4 6 5 4 5 6 8 5 5) 0.001)\n    (check-within (candidate 14 (list (list 1 0) (list 1 8) (list 7 2) (list 2 11) (list 2 13) (list 3 9) (list 8 3) (list 3 11) (list 4 12) (list 4 8) (list 5 11) (list 6 10) (list 10 12))) (list 7 6 8 8 6 8 5 7 7 9 6 9 7 9) 0.001)\n    (check-within (candidate 14 (list (list 1 0) (list 11 0) (list 6 0) (list 7 2) (list 2 8) (list 10 3) (list 4 10) (list 5 12) (list 12 6) (list 13 6) (list 7 10) (list 9 8) (list 8 12))) (list 11 10 7 8 6 8 10 6 8 7 7 10 9 9) 0.001)\n    (check-within (candidate 14 (list (list 3 0) (list 5 0) (list 0 7) (list 1 8) (list 1 4) (list 12 2) (list 4 3) (list 10 3) (list 12 5) (list 13 6) (list 7 13) (list 9 10) (list 10 11))) (list 7 4 6 6 5 6 10 8 5 4 5 6 5 9) 0.001)\n    (check-within (candidate 15 (list (list 0 5) (list 1 9) (list 4 1) (list 1 5) (list 14 1) (list 2 5) (list 4 3) (list 4 6) (list 5 11) (list 5 7) (list 10 6) (list 7 8) (list 13 7) (list 14 12))) (list 6 6 6 6 5 7 6 8 9 7 5 8 6 7 5) 0.001)\n    (check-within (candidate 15 (list (list 0 6) (list 13 0) (list 1 2) (list 10 1) (list 3 12) (list 4 11) (list 5 12) (list 10 7) (list 9 7) (list 7 13) (list 11 8) (list 8 9) (list 12 11) (list 13 14))) (list 10 8 9 3 4 3 11 8 6 7 7 5 4 9 10) 0.001)\n    (check-within (candidate 15 (list (list 0 7) (list 12 1) (list 5 2) (list 4 2) (list 3 8) (list 3 14) (list 12 4) (list 4 7) (list 5 6) (list 10 5) (list 11 5) (list 6 9) (list 7 14) (list 13 12))) (list 7 7 8 8 7 7 8 8 9 9 6 6 6 5 9) 0.001)\n    (check-within (candidate 15 (list (list 1 0) (list 10 1) (list 2 8) (list 2 3) (list 5 3) (list 4 8) (list 9 5) (list 6 12) (list 7 12) (list 8 7) (list 9 11) (list 11 10) (list 10 13) (list 10 14))) (list 7 6 4 5 4 4 6 6 5 3 5 4 7 6 6) 0.001)\n    (check-within (candidate 15 (list (list 2 0) (list 0 7) (list 0 5) (list 1 6) (list 1 7) (list 3 4) (list 8 4) (list 10 4) (list 5 12) (list 5 10) (list 11 7) (list 9 13) (list 10 14) (list 13 14))) (list 7 7 6 9 10 8 8 8 9 8 9 7 9 9 10) 0.001)\n    (check-within (candidate 15 (list (list 8 0) (list 1 0) (list 1 13) (list 1 14) (list 9 2) (list 3 13) (list 4 11) (list 4 14) (list 5 8) (list 12 6) (list 9 6) (list 7 8) (list 14 9) (list 10 13))) (list 8 7 10 7 7 6 10 6 7 9 7 8 9 8 8) 0.001)\n    (check-within (candidate 15 (list (list 12 0) (list 0 8) (list 1 3) (list 2 1) (list 2 7) (list 12 2) (list 9 3) (list 4 11) (list 11 5) (list 5 7) (list 6 13) (list 6 9) (list 8 14) (list 10 12))) (list 7 8 7 9 5 7 7 8 8 8 5 6 6 8 9) 0.001)\n    (check-within (candidate 15 (list (list 12 0) (list 1 12) (list 1 7) (list 2 12) (list 3 7) (list 3 14) (list 4 6) (list 5 6) (list 5 7) (list 6 8) (list 6 10) (list 11 6) (list 7 13) (list 9 14))) (list 8 6 6 6 6 6 7 7 8 6 8 6 7 8 7) 0.001)\n    (check-within (candidate 16 (list (list 0 1) (list 5 0) (list 0 2) (list 0 4) (list 2 12) (list 10 3) (list 3 15) (list 4 7) (list 8 6) (list 6 9) (list 7 14) (list 7 13) (list 11 9) (list 13 9) (list 10 13))) (list 5 6 6 8 6 4 8 7 7 9 7 8 7 8 8 9) 0.001)\n    (check-within (candidate 16 (list (list 2 0) (list 0 4) (list 4 1) (list 1 11) (list 5 2) (list 8 3) (list 4 3) (list 4 13) (list 14 4) (list 7 5) (list 5 12) (list 6 9) (list 12 9) (list 10 14) (list 11 15))) (list 7 9 6 9 8 5 6 4 8 7 6 10 6 9 7 11) 0.001)\n    (check-within (candidate 16 (list (list 8 0) (list 1 6) (list 10 1) (list 8 2) (list 3 15) (list 14 4) (list 12 5) (list 13 5) (list 8 6) (list 6 9) (list 6 13) (list 11 7) (list 7 13) (list 15 10) (list 11 14))) (list 8 7 8 4 9 10 8 8 7 9 6 7 9 9 8 5) 0.001)\n    (check-within (candidate 17 (list (list 0 4) (list 0 9) (list 13 1) (list 5 1) (list 6 2) (list 13 2) (list 3 8) (list 3 15) (list 3 9) (list 4 5) (list 5 10) (list 11 6) (list 7 16) (list 12 9) (list 16 9) (list 12 14))) (list 7 10 10 7 8 9 9 6 8 8 10 8 7 9 8 8 7) 0.001)\n    (check-within (candidate 17 (list (list 0 7) (list 15 1) (list 2 3) (list 2 7) (list 3 8) (list 15 3) (list 5 4) (list 4 16) (list 6 14) (list 16 7) (list 16 9) (list 10 14) (list 10 16) (list 16 11) (list 12 14) (list 15 13))) (list 8 9 8 9 7 6 7 9 10 9 7 9 7 9 8 8 8) 0.001)\n    (check-within (candidate 17 (list (list 0 10) (list 12 0) (list 0 14) (list 0 7) (list 0 16) (list 1 8) (list 1 7) (list 2 8) (list 3 5) (list 4 15) (list 5 9) (list 11 5) (list 14 6) (list 11 7) (list 15 8) (list 13 16))) (list 8 8 8 8 7 9 10 9 9 10 9 8 7 8 9 8 9) 0.001)\n    (check-within (candidate 17 (list (list 0 12) (list 1 2) (list 1 13) (list 1 14) (list 4 3) (list 3 15) (list 5 4) (list 10 6) (list 14 6) (list 6 15) (list 7 11) (list 8 11) (list 13 9) (list 10 11) (list 15 12) (list 16 15))) (list 11 8 9 10 9 8 10 9 9 10 9 10 12 9 9 11 10) 0.001)\n    (check-within (candidate 17 (list (list 0 13) (list 15 0) (list 1 5) (list 1 6) (list 11 1) (list 1 13) (list 8 2) (list 3 16) (list 4 16) (list 7 14) (list 11 8) (list 9 10) (list 9 16) (list 14 12) (list 14 15) (list 15 16))) (list 8 8 9 7 7 9 9 5 8 7 8 7 7 9 6 7 8) 0.001)\n    (check-within (candidate 17 (list (list 8 0) (list 0 10) (list 6 1) (list 1 15) (list 15 2) (list 3 2) (list 12 3) (list 9 4) (list 5 7) (list 13 7) (list 9 10) (list 10 11) (list 10 14) (list 13 12) (list 16 12) (list 14 15))) (list 9 11 13 12 10 10 10 11 8 9 10 11 11 10 11 12 10) 0.001)\n    (check-within (candidate 17 (list (list 10 0) (list 0 5) (list 1 8) (list 1 16) (list 7 2) (list 2 8) (list 3 5) (list 8 3) (list 4 11) (list 13 4) (list 16 6) (list 16 9) (list 14 12) (list 14 13) (list 14 15) (list 15 16))) (list 8 6 6 8 7 9 8 5 7 8 7 8 6 6 5 6 7) 0.001)\n    (check-within (candidate 18 (list (list 0 3) (list 16 1) (list 1 10) (list 2 13) (list 2 8) (list 14 3) (list 4 12) (list 5 10) (list 13 6) (list 7 11) (list 10 7) (list 9 7) (list 14 8) (list 9 8) (list 9 17) (list 12 14) (list 13 15))) (list 9 8 9 10 7 8 11 10 10 9 9 11 8 10 9 11 7 10) 0.001)\n    (check-within (candidate 18 (list (list 0 10) (list 0 17) (list 1 3) (list 1 2) (list 2 9) (list 2 17) (list 16 3) (list 4 7) (list 4 13) (list 4 6) (list 5 12) (list 5 17) (list 6 17) (list 8 15) (list 11 8) (list 16 11) (list 13 14))) (list 6 5 6 6 5 6 6 6 7 7 7 6 7 6 7 8 5 7) 0.001)\n    (check-within (candidate 18 (list (list 11 0) (list 5 1) (list 1 10) (list 1 3) (list 1 17) (list 14 2) (list 2 13) (list 3 13) (list 4 7) (list 4 12) (list 4 17) (list 6 17) (list 7 8) (list 15 9) (list 16 11) (list 11 14) (list 14 15))) (list 7 7 8 8 7 6 7 8 9 9 8 6 8 9 7 8 5 8) 0.001)\n    (check-within (candidate 19 (list (list 0 3) (list 0 5) (list 4 0) (list 12 1) (list 1 5) (list 2 17) (list 2 4) (list 3 13) (list 4 8) (list 5 7) (list 18 6) (list 18 8) (list 14 9) (list 9 15) (list 16 9) (list 10 12) (list 11 17) (list 12 16))) (list 8 8 6 9 7 9 8 10 8 9 6 6 7 10 8 10 8 7 7) 0.001)\n    (check-within (candidate 19 (list (list 0 5) (list 0 9) (list 14 1) (list 2 11) (list 3 12) (list 3 8) (list 10 3) (list 4 13) (list 4 12) (list 6 17) (list 10 7) (list 7 14) (list 8 11) (list 16 8) (list 9 14) (list 9 17) (list 15 17) (list 15 18))) (list 7 10 9 8 8 8 8 8 9 8 7 10 9 9 9 8 8 9 9) 0.001)\n    (check-within (candidate 19 (list (list 0 12) (list 13 1) (list 12 1) (list 14 2) (list 2 11) (list 3 9) (list 11 3) (list 15 4) (list 4 11) (list 5 12) (list 17 6) (list 8 7) (list 8 10) (list 16 8) (list 9 12) (list 11 18) (list 16 18) (list 17 18))) (list 11 13 8 10 8 11 10 11 10 11 11 9 12 12 7 7 9 9 10) 0.001)\n    (check-within (candidate 19 (list (list 0 18) (list 8 1) (list 5 1) (list 9 2) (list 6 2) (list 3 11) (list 17 3) (list 4 12) (list 4 6) (list 18 4) (list 14 5) (list 5 16) (list 6 7) (list 16 7) (list 17 7) (list 15 8) (list 10 14) (list 14 13))) (list 8 11 12 12 10 10 11 12 10 11 8 13 11 10 9 9 11 11 9) 0.001)\n    (check-within (candidate 19 (list (list 1 0) (list 0 13) (list 15 0) (list 1 9) (list 5 2) (list 2 13) (list 3 12) (list 3 16) (list 4 12) (list 5 7) (list 8 6) (list 12 8) (list 16 10) (list 13 10) (list 17 11) (list 13 11) (list 14 13) (list 15 18))) (list 9 8 9 9 9 8 12 9 11 9 11 11 10 10 9 8 10 10 9) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3106_lengthOfLongestSubsequence", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of integers nums, and an integer target.\n;; Return the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\n;; A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n;; Example 1:\n;; Input: nums = [1,2,3,4,5], target = 9\n;; Output: 3\n;; Explanation: There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.\n;; Example 2:\n;; Input: nums = [4,1,3,2,1,5], target = 7\n;; Output: 4\n;; Explanation: There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.\n;; Example 3:\n;; Input: nums = [1,1,5,4,5], target = 3\n;; Output: -1\n;; Explanation: It can be shown that nums has no subsequence that sums up to 3.\n;; Constraints:\n;;  * 1 <= nums.length <= 1000\n;;  * 1 <= nums[i] <= 1000\n;;  * 1 <= target <= 1000\n(define (lengthOfLongestSubsequence nums target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3106_lengthOfLongestSubsequence.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lengthOfLongestSubsequence))\n    (check-within (candidate (list 1 2 3 4 5) 9) 3 0.001)\n    (check-within (candidate (list 4 1 3 2 1 5) 7) 4 0.001)\n    (check-within (candidate (list 1 1 5 4 5) 3) -1 0.001)\n    (check-within (candidate (list 1000) 12) -1 0.001)\n    (check-within (candidate (list 1000) 1000) 1 0.001)\n    (check-within (candidate (list 1 2) 10) -1 0.001)\n    (check-within (candidate (list 1 1000) 5) -1 0.001)\n    (check-within (candidate (list 2 3) 3) 1 0.001)\n    (check-within (candidate (list 2 3) 5) 2 0.001)\n    (check-within (candidate (list 2 3 5) 5) 2 0.001)\n    (check-within (candidate (list 1 3 3 7) 1000) -1 0.001)\n    (check-within (candidate (list 1 3 3 7) 2) -1 0.001)\n    (check-within (candidate (list 1 3 3 8) 7) 3 0.001)\n    (check-within (candidate (list 1 1 2 1) 2) 2 0.001)\n    (check-within (candidate (list 1 1 1 1) 5) -1 0.001)\n    (check-within (candidate (list 1 1 1 2) 3) 3 0.001)\n    (check-within (candidate (list 9 12 8 4 11 13 15 7 5) 84) 9 0.001)\n    (check-within (candidate (list 11 5 9 11 12 13 12 5 1 8) 87) 10 0.001)\n    (check-within (candidate (list 9 11 11 15 4 14 3 2 13 7) 89) 10 0.001)\n    (check-within (candidate (list 11 13 6 13 10) 53) 5 0.001)\n    (check-within (candidate (list 10 3 5 11 6 12) 47) 6 0.001)\n    (check-within (candidate (list 13 3 6 6 6 15 4) 53) 7 0.001)\n    (check-within (candidate (list 1 6 15 6 14 13 14) 69) 7 0.001)\n    (check-within (candidate (list 10 7 8 14 15) 54) 5 0.001)\n    (check-within (candidate (list 14 15 8 10 8 7) 62) 6 0.001)\n    (check-within (candidate (list 7 9 14 14 9 14 5 12 10) 94) 9 0.001)\n    (check-within (candidate (list 1 10 6 14 5 13 3 7 10 10) 79) 10 0.001)\n    (check-within (candidate (list 5 2 8 6 7 12 13 4 1) 58) 9 0.001)\n    (check-within (candidate (list 12 8 2 4 1) 27) 5 0.001)\n    (check-within (candidate (list 10 14 11 13 2 11) 61) 6 0.001)\n    (check-within (candidate (list 10 2 13 5 7 15) 52) 6 0.001)\n    (check-within (candidate (list 3 1 10 1 10 1 2 9 5 13) 55) 10 0.001)\n    (check-within (candidate (list 5 13 2 13 9 4 5 7) 58) 8 0.001)\n    (check-within (candidate (list 1 15 5 12 13 10 14 8) 78) 8 0.001)\n    (check-within (candidate (list 7 4 14 10 13) 48) 5 0.001)\n    (check-within (candidate (list 6 14 14 6 2 9 1 4 10) 66) 9 0.001)\n    (check-within (candidate (list 14 15 7 5 7 10 6 14 10 11) 99) 10 0.001)\n    (check-within (candidate (list 15 13 8 8 6) 50) 5 0.001)\n    (check-within (candidate (list 2 6 8 9 13 3) 41) 6 0.001)\n    (check-within (candidate (list 13 15 9 3 8 1 9 2 15 5) 80) 10 0.001)\n    (check-within (candidate (list 5 13 9 11 6 1) 45) 6 0.001)\n    (check-within (candidate (list 7 10 15 7 14 2) 55) 6 0.001)\n    (check-within (candidate (list 12 14 13 13 13) 65) 5 0.001)\n    (check-within (candidate (list 12 8 7 9 3 10 3 8 2) 62) 9 0.001)\n    (check-within (candidate (list 11 1 14 13 14 4 14 11) 82) 8 0.001)\n    (check-within (candidate (list 5 9 11 2 5 2 7 11 5 3) 60) 10 0.001)\n    (check-within (candidate (list 5 15 3 13 14 15 10) 75) 7 0.001)\n    (check-within (candidate (list 10 8 2 2 9) 31) 5 0.001)\n    (check-within (candidate (list 7 15 4 3 9 15 12 1 12) 78) 9 0.001)\n    (check-within (candidate (list 3 1 12 15 5 10) 46) 6 0.001)\n    (check-within (candidate (list 5 3 12 7 5 2 12 10 12 5) 73) 10 0.001)\n    (check-within (candidate (list 6 10 3 1 7 11 9 8 13 12) 80) 10 0.001)\n    (check-within (candidate (list 11 3 4 11 9) 38) 5 0.001)\n    (check-within (candidate (list 15 12 12 13 6 6 4 1) 69) 8 0.001)\n    (check-within (candidate (list 9 2 10 7 10 11 14 11 8) 82) 9 0.001)\n    (check-within (candidate (list 4 4 3 9 6 8 4 7 7) 52) 9 0.001)\n    (check-within (candidate (list 10 14 4 15 9 5) 57) 6 0.001)\n    (check-within (candidate (list 4 13 2 3 13 11 8 6) 60) 8 0.001)\n    (check-within (candidate (list 1 7 8 14 15 9 8 10 13 7) 92) 10 0.001)\n    (check-within (candidate (list 7 7 6 14 7 4) 45) 6 0.001)\n    (check-within (candidate (list 9 10 9 7 14 3 6 4 6) 68) 9 0.001)\n    (check-within (candidate (list 15 13 14 5 7 13 11 14) 92) 8 0.001)\n    (check-within (candidate (list 1 1 10 12 5 6 15 6 8) 64) 9 0.001)\n    (check-within (candidate (list 14 13 13 11 14 13 8) 86) 7 0.001)\n    (check-within (candidate (list 3 14 4 2 10 3 7) 43) 7 0.001)\n    (check-within (candidate (list 6 1 3 11 9 2 10 6 12) 60) 9 0.001)\n    (check-within (candidate (list 6 2 5 4 12) 29) 5 0.001)\n    (check-within (candidate (list 7 11 15 1 9 9 11) 63) 7 0.001)\n    (check-within (candidate (list 7 12 10 15 6 15 14 2) 81) 8 0.001)\n    (check-within (candidate (list 12 3 10 12 13 3 4 7 15) 79) 9 0.001)\n    (check-within (candidate (list 14 6 11 2 10 1 12 9 2) 67) 9 0.001)\n    (check-within (candidate (list 5 8 12 6 15 13 11) 70) 7 0.001)\n    (check-within (candidate (list 11 6 1 6 2 6 15) 47) 7 0.001)\n    (check-within (candidate (list 12 7 15 10 5 4 7 12 12) 84) 9 0.001)\n    (check-within (candidate (list 11 4 4 9 10 7 12) 57) 7 0.001)\n    (check-within (candidate (list 4 12 15 6 15 1 4 4 2) 63) 9 0.001)\n    (check-within (candidate (list 3 13 4 15 1) 36) 5 0.001)\n    (check-within (candidate (list 14 3 7 14 7 7 1 6) 59) 8 0.001)\n    (check-within (candidate (list 15 13 1 14 6 8) 57) 6 0.001)\n    (check-within (candidate (list 14 2 3 10 15) 44) 5 0.001)\n    (check-within (candidate (list 5 5 3 7 12 10 11) 53) 7 0.001)\n    (check-within (candidate (list 3 7 3 5 3 14 8) 43) 7 0.001)\n    (check-within (candidate (list 5 7 9 14 9 14 4 1 4) 67) 9 0.001)\n    (check-within (candidate (list 12 7 8 6 3 9 7 3 4 4) 63) 10 0.001)\n    (check-within (candidate (list 9 12 1 4 9 6 15 9 7) 72) 9 0.001)\n    (check-within (candidate (list 9 13 12 10 4 9 9 4 4 13) 87) 10 0.001)\n    (check-within (candidate (list 13 5 6 8 2 13 1 5 6) 59) 9 0.001)\n    (check-within (candidate (list 7 9 8 9 9 3 5) 50) 7 0.001)\n    (check-within (candidate (list 15 1 14 8 2 1 10 15 15) 81) 9 0.001)\n    (check-within (candidate (list 13 14 1 9 12 2) 51) 6 0.001)\n    (check-within (candidate (list 13 12 12 13 8 11 3 14 13) 99) 9 0.001)\n    (check-within (candidate (list 2 2 1 12 10 7 11 5 5) 55) 9 0.001)\n    (check-within (candidate (list 13 10 3 4 10 3) 43) 6 0.001)\n    (check-within (candidate (list 8 9 1 5 8 7 6 8) 52) 8 0.001)\n    (check-within (candidate (list 10 1 4 10 9 13 14) 61) 7 0.001)\n    (check-within (candidate (list 3 14 11 4 7 9 7 6 8 11) 80) 10 0.001)\n    (check-within (candidate (list 4 11 6 6 14 12 2 9 1) 65) 9 0.001)\n    (check-within (candidate (list 9 2 15 12 15 6 4 12) 75) 8 0.001)\n    (check-within (candidate (list 4 3 5 3 2) 17) 5 0.001)\n    (check-within (candidate (list 4 3 13 6 9) 35) 5 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3107_maxSpending", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1.\n;; On each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can:\n;;  * Pick any shop i.\n;;  * Buy the rightmost available item j for the price of values[i][j] * d. That is, find the greatest index j such that item j was never bought before, and buy it for the price of values[i][j] * d.\n;; Note that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop.\n;; Return the maximum amount of money that can be spent on buying all m * n products.\n;; Example 1:\n;; Input: values = [[8,5,2],[6,4,1],[9,7,3]]\n;; Output: 285\n;; Explanation: On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\n;; On the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\n;; On the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\n;; On the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\n;; On the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\n;; On the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\n;; On the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\n;; On the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\n;; On the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\n;; Hence, our total spending is equal to 285.\n;; It can be shown that 285 is the maximum amount of money that can be spent buying all m * n products.\n;; Example 2:\n;; Input: values = [[10,8,6,4,2],[9,7,5,3,2]]\n;; Output: 386\n;; Explanation: On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\n;; On the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\n;; On the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\n;; On the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\n;; On the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\n;; On the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\n;; On the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\n;; On the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\n;; On the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\n;; On the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\n;; Hence, our total spending is equal to 386.\n;; It can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.\n;; Constraints:\n;;  * 1 <= m == values.length <= 10\n;;  * 1 <= n == values[i].length <= 104\n;;  * 1 <= values[i][j] <= 106\n;;  * values[i] are sorted in non-increasing order.\n(define (maxSpending values)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3107_maxSpending.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxSpending))\n    (check-within (candidate (list (list 8 5 2) (list 6 4 1) (list 9 7 3))) 285 0.001)\n    (check-within (candidate (list (list 10 8 6 4 2) (list 9 7 5 3 2))) 386 0.001)\n    (check-within (candidate (list (list 1000000))) 1000000 0.001)\n    (check-within (candidate (list (list 1))) 1 0.001)\n    (check-within (candidate (list (list 1) (list 2))) 5 0.001)\n    (check-within (candidate (list (list 2) (list 1))) 5 0.001)\n    (check-within (candidate (list (list 1) (list 1))) 3 0.001)\n    (check-within (candidate (list (list 5 2))) 12 0.001)\n    (check-within (candidate (list (list 5 5))) 15 0.001)\n    (check-within (candidate (list (list 7 5))) 19 0.001)\n    (check-within (candidate (list (list 3 2 1))) 14 0.001)\n    (check-within (candidate (list (list 2 2 1))) 11 0.001)\n    (check-within (candidate (list (list 3 3 2))) 17 0.001)\n    (check-within (candidate (list (list 3) (list 2) (list 1))) 14 0.001)\n    (check-within (candidate (list (list 2) (list 10) (list 1))) 35 0.001)\n    (check-within (candidate (list (list 1000000 1000000 1000000))) 6000000 0.001)\n    (check-within (candidate (list (list 1000000 1000000 1000000 1000000))) 10000000 0.001)\n    (check-within (candidate (list (list 1000000) (list 1000000) (list 1000000) (list 1000000))) 10000000 0.001)\n    (check-within (candidate (list (list 1000000 1000000) (list 1000000 1000000))) 10000000 0.001)\n    (check-within (candidate (list (list 2 1) (list 4 3))) 30 0.001)\n    (check-within (candidate (list (list 3 1) (list 4 2))) 30 0.001)\n    (check-within (candidate (list (list 4 1) (list 3 2))) 30 0.001)\n    (check-within (candidate (list (list 15 13 13 12 12 12 12 11 11 11 11 9 9 8 7 5 5 5 1))) 2162 0.001)\n    (check-within (candidate (list (list 13 13 11 7 2 1) (list 13 10 10 6 3 3))) 776 0.001)\n    (check-within (candidate (list (list 12 6) (list 13 5) (list 13 3) (list 6 6) (list 15 6) (list 5 4) (list 6 1))) 971 0.001)\n    (check-within (candidate (list (list 15 15 14 14 14 10 10 9 9 8 8 8 7 7 7 4))) 1585 0.001)\n    (check-within (candidate (list (list 11 10) (list 10 1) (list 14 6) (list 13 5) (list 7 3) (list 10 10) (list 10 5))) 1061 0.001)\n    (check-within (candidate (list (list 15 13 12 7 6 4 1))) 298 0.001)\n    (check-within (candidate (list (list 8 2) (list 4 1) (list 10 4))) 133 0.001)\n    (check-within (candidate (list (list 10 4) (list 13 2) (list 7 5) (list 15 11))) 380 0.001)\n    (check-within (candidate (list (list 13 10 10 9 8 5 5 2 1 1))) 465 0.001)\n    (check-within (candidate (list (list 15 14 8 7 5 5 1))) 283 0.001)\n    (check-within (candidate (list (list 15 15 14 14 14 14 13 11 10 10 10 9 7 7 6 6 4 4 2 1))) 2449 0.001)\n    (check-within (candidate (list (list 15 14 11 10 10 6 2) (list 13 8 8 6 6 3 2))) 1084 0.001)\n    (check-within (candidate (list (list 15 15 14 13 13 12 11 9 9 9 8 6 5 5 4 3 2 1 1))) 2030 0.001)\n    (check-within (candidate (list (list 15 10 7) (list 14 2 2) (list 14 13 12) (list 13 13 10))) 975 0.001)\n    (check-within (candidate (list (list 10 9 3 3) (list 11 8 7 2) (list 14 14 13 1) (list 14 14 11 4) (list 13 11 9 5))) 2338 0.001)\n    (check-within (candidate (list (list 11 7 5 2) (list 15 5 5 3))) 307 0.001)\n    (check-within (candidate (list (list 15 10 10 9 8 7 4 2 2))) 425 0.001)\n    (check-within (candidate (list (list 15 13 12 12 10 5 4 3 1))) 484 0.001)\n    (check-within (candidate (list (list 12 12 12 11 10 10 7 7 6 5 5 3 2 1))) 979 0.001)\n    (check-within (candidate (list (list 15 13 13 13 12 12 11 11 10 9 9 9 8 6 6 4 4 3 2 1))) 2253 0.001)\n    (check-within (candidate (list (list 14 11) (list 11 8) (list 10 4) (list 4 3) (list 9 6) (list 8 4) (list 7 7) (list 10 4) (list 14 4))) 1621 0.001)\n    (check-within (candidate (list (list 14 13 13 11 11 8 8 7 6 4 3 2 1))) 912 0.001)\n    (check-within (candidate (list (list 15 14 14 10 10 9 9 7 7 7 7 7 6 6 6 4 4 3 3))) 1823 0.001)\n    (check-within (candidate (list (list 14 13 11 10 10 1 1) (list 15 12 8 6 6 5 5))) 1120 0.001)\n    (check-within (candidate (list (list 15 14 13 12 11 10 10 10 9 7 6 6 4 3 3 3 2 2 1))) 1860 0.001)\n    (check-within (candidate (list (list 12 6 5 4 2))) 109 0.001)\n    (check-within (candidate (list (list 15 15 14 13 12 12 12 11 10 10 9 9 9 8 7 6 3 2))) 2006 0.001)\n    (check-within (candidate (list (list 15 14 12 11 10 10 7 6 2 1))) 610 0.001)\n    (check-within (candidate (list (list 15 13 12 11 8 6 5))) 328 0.001)\n    (check-within (candidate (list (list 15 15 12 10 9 7 7 6 6 5 4 2 1))) 896 0.001)\n    (check-within (candidate (list (list 15 15 12 12 10 10 9 7 6 4 4 4 1))) 969 0.001)\n    (check-within (candidate (list (list 15 14 14 13 8 7 7 4 3 3 2 1))) 792 0.001)\n    (check-within (candidate (list (list 15 15 14 14 14 13 10 8 6 6 5 5 3 3 2 2 1))) 1634 0.001)\n    (check-within (candidate (list (list 14 12 11 10 10 8 7 7 5 5 3 3 3))) 855 0.001)\n    (check-within (candidate (list (list 14 14 9 9 4 4 1) (list 12 12 9 8 7 6 3))) 1060 0.001)\n    (check-within (candidate (list (list 15 15 15 13 12 12 10 9 9 9 9 7 6 4 4 4 1))) 1727 0.001)\n    (check-within (candidate (list (list 9 4) (list 13 4) (list 13 9) (list 6 5) (list 8 2) (list 13 1))) 732 0.001)\n    (check-within (candidate (list (list 14 9 9 9 8 7 5) (list 15 14 10 8 5 3 1))) 1094 0.001)\n    (check-within (candidate (list (list 15 15 14 13 10 3 1))) 354 0.001)\n    (check-within (candidate (list (list 13 12) (list 13 12) (list 11 8) (list 14 3))) 441 0.001)\n    (check-within (candidate (list (list 13 12 11 10 7 5 5 1))) 358 0.001)\n    (check-within (candidate (list (list 15 10 9 8 8 7 7 5 4 3 1))) 582 0.001)\n    (check-within (candidate (list (list 10 10 6 4 1) (list 14 13 13 11 9) (list 14 11 7 4 3))) 1302 0.001)\n    (check-within (candidate (list (list 15 14 12 12 11 11 10 9 9 8 8 6 6 4 2 2 1))) 1596 0.001)\n    (check-within (candidate (list (list 12 5 4 3 3 2 1 1) (list 13 11 9 9 6 4 3 1))) 1019 0.001)\n    (check-within (candidate (list (list 15 15 13 11 10 10 7 1 1))) 526 0.001)\n    (check-within (candidate (list (list 14 12 10 4 3 1) (list 12 12 8 7 6 2) (list 15 13 8 5 4 1))) 1719 0.001)\n    (check-within (candidate (list (list 13 8 8 8 5 4 3) (list 15 13 9 8 7 3 2))) 1006 0.001)\n    (check-within (candidate (list (list 13 13 12 12 9))) 186 0.001)\n    (check-within (candidate (list (list 10 3) (list 11 9) (list 10 5) (list 8 7) (list 6 1))) 472 0.001)\n    (check-within (candidate (list (list 15 15 12 12 11 10 9 8 2 2 1 1 1))) 941 0.001)\n    (check-within (candidate (list (list 14 14 13 13 11 11 10 10 10 9 8 8 7 7 6 6 5 4 3))) 2023 0.001)\n    (check-within (candidate (list (list 11 10 9 7 6 5 3 1) (list 14 14 10 9 7 4 4 3))) 1270 0.001)\n    (check-within (candidate (list (list 6 2) (list 10 2) (list 13 5) (list 8 7) (list 10 3) (list 13 2) (list 13 6))) 972 0.001)\n    (check-within (candidate (list (list 15 15 15 14 13 12 6 5 5 4))) 694 0.001)\n    (check-within (candidate (list (list 11 9) (list 8 1) (list 2 1) (list 15 13) (list 12 4) (list 14 5) (list 13 4))) 1113 0.001)\n    (check-within (candidate (list (list 15 14 14 13 12 11 10 10 5 4 2))) 800 0.001)\n    (check-within (candidate (list (list 13 12 12 6 5 5 4 2 2 2 1))) 523 0.001)\n    (check-within (candidate (list (list 13 8) (list 15 1) (list 9 1) (list 13 1))) 372 0.001)\n    (check-within (candidate (list (list 12 8 4 1) (list 14 8 8 3))) 335 0.001)\n    (check-within (candidate (list (list 15 14 14 13 13 13 12 12 9 9 8 7 6 5 5 5 4 3 1))) 2113 0.001)\n    (check-within (candidate (list (list 13 9 8 2 1) (list 9 4 3 2 1) (list 10 8 6 3 1))) 877 0.001)\n    (check-within (candidate (list (list 8 6) (list 13 1) (list 12 8) (list 8 7))) 342 0.001)\n    (check-within (candidate (list (list 9 7) (list 15 15) (list 9 8) (list 6 1) (list 11 4))) 585 0.001)\n    (check-within (candidate (list (list 14 9 9 8 6 4 2))) 257 0.001)\n    (check-within (candidate (list (list 15 13 11 11 10 9 5 5 4 4 4 4 3 2))) 968 0.001)\n    (check-within (candidate (list (list 13 7 7 4) (list 8 8 6 6))) 305 0.001)\n    (check-within (candidate (list (list 15 13 12 10 10 10 9 9 9 8 7 6 6 5 4 4 2 1 1))) 1805 0.001)\n    (check-within (candidate (list (list 13 13 1) (list 11 5 4) (list 14 5 1) (list 15 5 2) (list 10 1 1) (list 15 12 1))) 1714 0.001)\n    (check-within (candidate (list (list 15 15 14 14 11 10 10 8 8 8 3 1 1))) 1050 0.001)\n    (check-within (candidate (list (list 3 3) (list 15 10) (list 14 9))) 236 0.001)\n    (check-within (candidate (list (list 14 13 11 10 9 7 2))) 314 0.001)\n    (check-within (candidate (list (list 11 7) (list 5 3) (list 11 6) (list 6 1) (list 15 13))) 550 0.001)\n    (check-within (candidate (list (list 14 13 13 12 12 12 11 11 9 8 8 6 5 5 5 5 3 3 2))) 1962 0.001)\n    (check-within (candidate (list (list 14 14 13 13 13 12 12 11 10 9 9 8 8 7 3 2 2))) 1750 0.001)\n    (check-within (candidate (list (list 15 8) (list 12 2) (list 15 10) (list 9 3) (list 5 4) (list 14 2) (list 7 6))) 1091 0.001)\n    (check-within (candidate (list (list 15 9 7 3 3) (list 7 6 4 3 2) (list 15 9 8 4 4) (list 15 10 9 7 4))) 1952 0.001)\n    (check-within (candidate (list (list 12 12 10 8 8 8 8 6 2 2 1))) 585 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3112_countPaths", "language": "rkt", "prompt": "#lang racket\n;; There is an undirected tree with n nodes labeled from 1 to n. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\n;; Return the number of valid paths in the tree.\n;; A path (a, b) is valid if there exists exactly one prime number among the node labels in the path from a to b.\n;; Note that:\n;;  * The path (a, b) is a sequence of distinct nodes starting with node a and ending with node b such that every two adjacent nodes in the sequence share an edge in the tree.\n;;  * Path (a, b) and path (b, a) are considered the same and counted only once.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/27/example1.png]\n;; Input: n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\n;; Output: 4\n;; Explanation: The pairs with exactly one prime number on the path between them are:\n;; - (1, 2) since the path from 1 to 2 contains prime number 2.\n;; - (1, 3) since the path from 1 to 3 contains prime number 3.\n;; - (1, 4) since the path from 1 to 4 contains prime number 2.\n;; - (2, 4) since the path from 2 to 4 contains prime number 2.\n;; It can be shown that there are only 4 valid paths.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/27/example2.png]\n;; Input: n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\n;; Output: 6\n;; Explanation: The pairs with exactly one prime number on the path between them are:\n;; - (1, 2) since the path from 1 to 2 contains prime number 2.\n;; - (1, 3) since the path from 1 to 3 contains prime number 3.\n;; - (1, 4) since the path from 1 to 4 contains prime number 2.\n;; - (1, 6) since the path from 1 to 6 contains prime number 3.\n;; - (2, 4) since the path from 2 to 4 contains prime number 2.\n;; - (3, 6) since the path from 3 to 6 contains prime number 3.\n;; It can be shown that there are only 6 valid paths.\n;; Constraints:\n;;  * 1 <= n <= 105\n;;  * edges.length == n - 1\n;;  * edges[i].length == 2\n;;  * 1 <= ui, vi <= n\n;;  * The input is generated such that edges represent a valid tree.\n(define (countPaths n edges)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3112_countPaths.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countPaths))\n    (check-within (candidate 5 (list (list 1 2) (list 1 3) (list 2 4) (list 2 5))) 4 0.001)\n    (check-within (candidate 6 (list (list 1 2) (list 1 3) (list 2 4) (list 3 5) (list 3 6))) 6 0.001)\n    (check-within (candidate 1 (list )) 0 0.001)\n    (check-within (candidate 2 (list (list 2 1))) 1 0.001)\n    (check-within (candidate 4 (list (list 1 2) (list 4 1) (list 3 4))) 4 0.001)\n    (check-within (candidate 5 (list (list 1 3) (list 4 3) (list 2 3) (list 5 2))) 3 0.001)\n    (check-within (candidate 5 (list (list 1 5) (list 2 1) (list 4 5) (list 3 2))) 4 0.001)\n    (check-within (candidate 5 (list (list 2 3) (list 4 2) (list 1 3) (list 5 1))) 3 0.001)\n    (check-within (candidate 5 (list (list 4 1) (list 5 4) (list 2 1) (list 3 4))) 6 0.001)\n    (check-within (candidate 5 (list (list 3 5) (list 1 5) (list 4 3) (list 2 5))) 2 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 4 2) (list 3 2))) 3 0.001)\n    (check-within (candidate 5 (list (list 1 4) (list 2 4) (list 3 2) (list 5 4))) 4 0.001)\n    (check-within (candidate 5 (list (list 5 4) (list 3 4) (list 1 4) (list 2 4))) 6 0.001)\n    (check-within (candidate 4 (list (list 3 4) (list 1 3) (list 2 4))) 4 0.001)\n    (check-within (candidate 10 (list (list 10 9) (list 2 10) (list 1 10) (list 3 2) (list 6 10) (list 4 3) (list 8 6) (list 5 8) (list 7 6))) 16 0.001)\n    (check-within (candidate 8 (list (list 7 2) (list 6 2) (list 5 2) (list 1 2) (list 4 7) (list 8 1) (list 3 6))) 7 0.001)\n    (check-within (candidate 5 (list (list 3 2) (list 4 3) (list 5 4) (list 1 4))) 4 0.001)\n    (check-within (candidate 9 (list (list 7 4) (list 3 4) (list 5 4) (list 1 5) (list 6 4) (list 9 5) (list 8 7) (list 2 8))) 17 0.001)\n    (check-within (candidate 9 (list (list 1 8) (list 5 8) (list 4 8) (list 6 5) (list 3 1) (list 9 1) (list 7 4) (list 2 8))) 21 0.001)\n    (check-within (candidate 10 (list (list 2 9) (list 7 2) (list 10 9) (list 5 7) (list 4 5) (list 6 7) (list 8 2) (list 1 5) (list 3 10))) 11 0.001)\n    (check-within (candidate 8 (list (list 6 1) (list 8 1) (list 3 6) (list 4 1) (list 7 3) (list 2 8) (list 5 1))) 12 0.001)\n    (check-within (candidate 10 (list (list 9 1) (list 8 9) (list 5 9) (list 10 8) (list 7 5) (list 2 8) (list 3 8) (list 6 7) (list 4 1))) 16 0.001)\n    (check-within (candidate 5 (list (list 5 3) (list 4 5) (list 2 5) (list 1 4))) 2 0.001)\n    (check-within (candidate 7 (list (list 7 6) (list 2 6) (list 5 2) (list 3 5) (list 4 5) (list 1 6))) 5 0.001)\n    (check-within (candidate 8 (list (list 4 5) (list 8 4) (list 6 4) (list 2 5) (list 1 6) (list 3 1) (list 7 8))) 12 0.001)\n    (check-within (candidate 10 (list (list 9 6) (list 5 6) (list 10 6) (list 8 5) (list 4 8) (list 3 9) (list 1 3) (list 2 6) (list 7 1))) 22 0.001)\n    (check-within (candidate 5 (list (list 1 4) (list 2 4) (list 5 4) (list 3 4))) 6 0.001)\n    (check-within (candidate 10 (list (list 9 4) (list 7 9) (list 10 9) (list 6 7) (list 8 7) (list 2 7) (list 3 2) (list 1 9) (list 5 10))) 19 0.001)\n    (check-within (candidate 7 (list (list 4 7) (list 6 7) (list 1 7) (list 3 7) (list 2 6) (list 5 6))) 8 0.001)\n    (check-within (candidate 5 (list (list 1 4) (list 2 1) (list 5 2) (list 3 1))) 4 0.001)\n    (check-within (candidate 5 (list (list 4 5) (list 2 5) (list 1 4) (list 3 1))) 4 0.001)\n    (check-within (candidate 10 (list (list 4 3) (list 5 3) (list 1 4) (list 7 5) (list 6 3) (list 8 3) (list 9 1) (list 10 8) (list 2 10))) 19 0.001)\n    (check-within (candidate 5 (list (list 1 3) (list 4 1) (list 2 1) (list 5 1))) 6 0.001)\n    (check-within (candidate 7 (list (list 5 2) (list 3 5) (list 4 5) (list 1 2) (list 6 2) (list 7 2))) 4 0.001)\n    (check-within (candidate 5 (list (list 3 4) (list 1 4) (list 5 3) (list 2 5))) 2 0.001)\n    (check-within (candidate 8 (list (list 1 8) (list 2 1) (list 6 8) (list 3 6) (list 4 3) (list 5 8) (list 7 2))) 13 0.001)\n    (check-within (candidate 9 (list (list 2 1) (list 6 1) (list 8 2) (list 9 8) (list 4 9) (list 7 9) (list 3 1) (list 5 2))) 16 0.001)\n    (check-within (candidate 5 (list (list 4 3) (list 5 4) (list 1 5) (list 2 3))) 4 0.001)\n    (check-within (candidate 8 (list (list 2 4) (list 3 4) (list 6 4) (list 7 3) (list 8 7) (list 5 6) (list 1 5))) 10 0.001)\n    (check-within (candidate 6 (list (list 3 6) (list 1 3) (list 2 3) (list 5 2) (list 4 5))) 4 0.001)\n    (check-within (candidate 10 (list (list 7 5) (list 4 7) (list 10 5) (list 6 5) (list 8 6) (list 2 8) (list 9 4) (list 3 10) (list 1 9))) 11 0.001)\n    (check-within (candidate 8 (list (list 3 2) (list 8 3) (list 7 3) (list 6 2) (list 4 7) (list 5 6) (list 1 8))) 5 0.001)\n    (check-within (candidate 8 (list (list 2 6) (list 3 6) (list 5 2) (list 1 6) (list 7 2) (list 8 1) (list 4 1))) 8 0.001)\n    (check-within (candidate 9 (list (list 3 7) (list 6 7) (list 4 7) (list 1 6) (list 8 4) (list 9 1) (list 2 7) (list 5 2))) 11 0.001)\n    (check-within (candidate 6 (list (list 6 2) (list 5 6) (list 1 2) (list 3 2) (list 4 3))) 5 0.001)\n    (check-within (candidate 6 (list (list 6 2) (list 1 6) (list 3 1) (list 5 3) (list 4 3))) 7 0.001)\n    (check-within (candidate 8 (list (list 2 3) (list 8 3) (list 5 3) (list 6 3) (list 4 3) (list 7 8) (list 1 2))) 8 0.001)\n    (check-within (candidate 7 (list (list 4 6) (list 5 6) (list 7 6) (list 3 4) (list 2 6) (list 1 5))) 11 0.001)\n    (check-within (candidate 6 (list (list 4 2) (list 5 4) (list 1 5) (list 6 1) (list 3 1))) 8 0.001)\n    (check-within (candidate 6 (list (list 4 1) (list 6 1) (list 5 4) (list 3 5) (list 2 1))) 6 0.001)\n    (check-within (candidate 7 (list (list 6 7) (list 1 6) (list 4 6) (list 2 7) (list 3 2) (list 5 7))) 3 0.001)\n    (check-within (candidate 6 (list (list 4 3) (list 5 3) (list 6 5) (list 2 4) (list 1 5))) 5 0.001)\n    (check-within (candidate 10 (list (list 2 5) (list 3 5) (list 10 2) (list 8 3) (list 7 5) (list 4 3) (list 1 8) (list 9 5) (list 6 8))) 9 0.001)\n    (check-within (candidate 8 (list (list 2 8) (list 1 8) (list 5 2) (list 4 5) (list 6 5) (list 7 2) (list 3 5))) 5 0.001)\n    (check-within (candidate 8 (list (list 7 2) (list 6 7) (list 5 7) (list 8 6) (list 1 7) (list 3 5) (list 4 2))) 6 0.001)\n    (check-within (candidate 7 (list (list 5 7) (list 3 5) (list 2 7) (list 4 3) (list 6 3) (list 1 4))) 5 0.001)\n    (check-within (candidate 7 (list (list 2 3) (list 1 3) (list 7 3) (list 4 1) (list 6 3) (list 5 1))) 7 0.001)\n    (check-within (candidate 7 (list (list 4 2) (list 6 4) (list 1 6) (list 7 6) (list 5 2) (list 3 7))) 6 0.001)\n    (check-within (candidate 6 (list (list 3 4) (list 6 3) (list 1 4) (list 5 4) (list 2 6))) 8 0.001)\n    (check-within (candidate 10 (list (list 2 7) (list 1 2) (list 8 7) (list 4 2) (list 6 8) (list 10 7) (list 5 4) (list 9 8) (list 3 6))) 14 0.001)\n    (check-within (candidate 8 (list (list 6 2) (list 7 2) (list 5 6) (list 8 2) (list 3 6) (list 1 8) (list 4 2))) 11 0.001)\n    (check-within (candidate 10 (list (list 9 6) (list 1 9) (list 2 1) (list 8 1) (list 10 6) (list 7 6) (list 3 8) (list 4 3) (list 5 3))) 21 0.001)\n    (check-within (candidate 8 (list (list 4 6) (list 1 6) (list 7 6) (list 2 1) (list 8 7) (list 5 6) (list 3 5))) 13 0.001)\n    (check-within (candidate 7 (list (list 3 7) (list 6 7) (list 4 6) (list 1 3) (list 5 3) (list 2 3))) 3 0.001)\n    (check-within (candidate 10 (list (list 2 9) (list 3 9) (list 8 9) (list 10 3) (list 1 9) (list 4 8) (list 7 10) (list 6 1) (list 5 10))) 18 0.001)\n    (check-within (candidate 8 (list (list 5 6) (list 3 6) (list 7 5) (list 4 6) (list 8 6) (list 2 3) (list 1 3))) 10 0.001)\n    (check-within (candidate 9 (list (list 9 3) (list 4 3) (list 2 9) (list 7 3) (list 8 7) (list 1 7) (list 5 4) (list 6 2))) 10 0.001)\n    (check-within (candidate 6 (list (list 5 1) (list 2 1) (list 4 2) (list 6 5) (list 3 4))) 7 0.001)\n    (check-within (candidate 7 (list (list 3 6) (list 2 6) (list 5 6) (list 7 2) (list 1 6) (list 4 2))) 9 0.001)\n    (check-within (candidate 5 (list (list 1 5) (list 3 5) (list 4 3) (list 2 5))) 2 0.001)\n    (check-within (candidate 8 (list (list 2 8) (list 6 2) (list 1 2) (list 4 1) (list 7 2) (list 3 2) (list 5 7))) 9 0.001)\n    (check-within (candidate 9 (list (list 5 3) (list 1 3) (list 7 3) (list 4 5) (list 6 7) (list 8 7) (list 9 5) (list 2 5))) 7 0.001)\n    (check-within (candidate 10 (list (list 8 10) (list 3 10) (list 1 8) (list 7 8) (list 6 10) (list 2 3) (list 5 8) (list 9 5) (list 4 6))) 21 0.001)\n    (check-within (candidate 10 (list (list 4 8) (list 6 8) (list 9 4) (list 1 6) (list 5 8) (list 2 8) (list 10 9) (list 7 6) (list 3 5))) 18 0.001)\n    (check-within (candidate 9 (list (list 4 6) (list 9 4) (list 3 6) (list 7 6) (list 1 4) (list 5 9) (list 2 7) (list 8 4))) 15 0.001)\n    (check-within (candidate 7 (list (list 7 6) (list 2 6) (list 1 7) (list 3 2) (list 5 2) (list 4 5))) 5 0.001)\n    (check-within (candidate 9 (list (list 1 8) (list 5 8) (list 3 8) (list 2 1) (list 9 2) (list 7 1) (list 6 5) (list 4 9))) 17 0.001)\n    (check-within (candidate 7 (list (list 3 5) (list 4 3) (list 6 5) (list 2 4) (list 7 3) (list 1 4))) 5 0.001)\n    (check-within (candidate 10 (list (list 5 2) (list 8 5) (list 10 5) (list 3 8) (list 4 2) (list 1 4) (list 9 10) (list 7 5) (list 6 8))) 12 0.001)\n    (check-within (candidate 8 (list (list 7 4) (list 1 4) (list 5 7) (list 6 1) (list 8 5) (list 3 8) (list 2 6))) 8 0.001)\n    (check-within (candidate 10 (list (list 8 2) (list 7 8) (list 9 2) (list 4 2) (list 6 4) (list 3 9) (list 5 4) (list 1 9) (list 10 8))) 24 0.001)\n    (check-within (candidate 8 (list (list 3 8) (list 2 8) (list 1 8) (list 6 8) (list 4 3) (list 7 6) (list 5 2))) 13 0.001)\n    (check-within (candidate 9 (list (list 5 4) (list 2 4) (list 9 5) (list 3 2) (list 7 3) (list 1 4) (list 8 2) (list 6 4))) 14 0.001)\n    (check-within (candidate 10 (list (list 10 8) (list 5 10) (list 1 10) (list 3 10) (list 7 3) (list 2 10) (list 6 8) (list 9 6) (list 4 6))) 18 0.001)\n    (check-within (candidate 9 (list (list 6 7) (list 5 7) (list 8 7) (list 9 6) (list 2 5) (list 4 5) (list 1 8) (list 3 6))) 11 0.001)\n    (check-within (candidate 10 (list (list 1 6) (list 9 1) (list 5 9) (list 10 6) (list 4 9) (list 8 9) (list 7 8) (list 2 1) (list 3 1))) 24 0.001)\n    (check-within (candidate 8 (list (list 4 5) (list 3 4) (list 6 5) (list 1 4) (list 2 3) (list 8 4) (list 7 3))) 10 0.001)\n    (check-within (candidate 7 (list (list 7 4) (list 6 4) (list 2 6) (list 5 6) (list 3 2) (list 1 5))) 9 0.001)\n    (check-within (candidate 10 (list (list 3 2) (list 5 3) (list 1 2) (list 9 5) (list 7 5) (list 6 3) (list 4 3) (list 8 6) (list 10 1))) 8 0.001)\n    (check-within (candidate 8 (list (list 2 8) (list 5 2) (list 4 2) (list 7 4) (list 3 2) (list 1 3) (list 6 3))) 7 0.001)\n    (check-within (candidate 6 (list (list 6 3) (list 2 3) (list 4 2) (list 5 2) (list 1 6))) 3 0.001)\n    (check-within (candidate 9 (list (list 7 3) (list 5 3) (list 4 3) (list 9 7) (list 6 5) (list 8 3) (list 2 4) (list 1 5))) 8 0.001)\n    (check-within (candidate 5 (list (list 1 2) (list 5 1) (list 4 5) (list 3 4))) 5 0.001)\n    (check-within (candidate 9 (list (list 8 3) (list 6 8) (list 2 8) (list 4 3) (list 5 4) (list 7 5) (list 9 4) (list 1 5))) 15 0.001)\n    (check-within (candidate 5 (list (list 2 1) (list 4 2) (list 5 1) (list 3 2))) 4 0.001)\n    (check-within (candidate 6 (list (list 4 2) (list 6 2) (list 3 2) (list 1 6) (list 5 2))) 5 0.001)\n    (check-within (candidate 10 (list (list 10 5) (list 3 10) (list 4 3) (list 8 3) (list 7 4) (list 1 7) (list 6 5) (list 9 1) (list 2 5))) 14 0.001)\n    (check-within (candidate 9 (list (list 4 7) (list 6 4) (list 8 4) (list 2 8) (list 5 2) (list 9 7) (list 1 6) (list 3 7))) 13 0.001)\n    (check-within (candidate 10 (list (list 7 3) (list 1 3) (list 2 3) (list 10 2) (list 4 2) (list 8 1) (list 9 4) (list 5 3) (list 6 3))) 10 0.001)\n    (check-within (candidate 7 (list (list 4 7) (list 2 7) (list 3 4) (list 1 7) (list 6 4) (list 5 4))) 9 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3114_maximumSumOfHeights", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array maxHeights of n integers.\n;; You are tasked with building n towers in the coordinate line. The ith tower is built at coordinate i and has a height of heights[i].\n;; A configuration of towers is beautiful if the following conditions hold:\n;;  1. 1 <= heights[i] <= maxHeights[i]\n;;  2. heights is a mountain array.\n;; Array heights is a mountain if there exists an index i such that:\n;;  * For all 0 < j <= i, heights[j - 1] <= heights[j]\n;;  * For all i <= k < n - 1, heights[k + 1] <= heights[k]\n;; Return the maximum possible sum of heights of a beautiful configuration of towers.\n;; Example 1:\n;; Input: maxHeights = [5,3,4,1,1]\n;; Output: 13\n;; Explanation: One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n;; - 1 <= heights[i] <= maxHeights[i]\n;; - heights is a mountain of peak i = 0.\n;; It can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\n;; Example 2:\n;; Input: maxHeights = [6,5,3,9,2,7]\n;; Output: 22\n;; Explanation: One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n;; - 1 <= heights[i] <= maxHeights[i]\n;; - heights is a mountain of peak i = 3.\n;; It can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\n;; Example 3:\n;; Input: maxHeights = [3,2,5,5,2,3]\n;; Output: 18\n;; Explanation: One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n;; - 1 <= heights[i] <= maxHeights[i]\n;; - heights is a mountain of peak i = 2.\n;; Note that, for this configuration, i = 3 can also be considered a peak.\n;; It can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n;; Constraints:\n;;  * 1 <= n == maxHeights <= 103\n;;  * 1 <= maxHeights[i] <= 109\n(define (maximumSumOfHeights maxHeights)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3114_maximumSumOfHeights.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumSumOfHeights))\n    (check-within (candidate (list 5 3 4 1 1)) 13 0.001)\n    (check-within (candidate (list 6 5 3 9 2 7)) 22 0.001)\n    (check-within (candidate (list 3 2 5 5 2 3)) 18 0.001)\n    (check-within (candidate (list 1000000000)) 1000000000 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 933754743)) 933754743 0.001)\n    (check-within (candidate (list 1 1000000000)) 1000000001 0.001)\n    (check-within (candidate (list 1000000000 1000000000)) 2000000000 0.001)\n    (check-within (candidate (list 999999999 1000000000)) 1999999999 0.001)\n    (check-within (candidate (list 1000000000 999999999)) 1999999999 0.001)\n    (check-within (candidate (list 30 1)) 31 0.001)\n    (check-within (candidate (list 1 12 19)) 32 0.001)\n    (check-within (candidate (list 1000000000 1000000000 1000000000)) 3000000000 0.001)\n    (check-within (candidate (list 999999999 1000000000 999999999)) 2999999998 0.001)\n    (check-within (candidate (list 1000000000 999999999 999999998)) 2999999997 0.001)\n    (check-within (candidate (list 999999998 999999999 1000000000)) 2999999997 0.001)\n    (check-within (candidate (list 1 1 1)) 3 0.001)\n    (check-within (candidate (list 1 1 4 3 3 3 6)) 20 0.001)\n    (check-within (candidate (list 2 4 1 3 5)) 11 0.001)\n    (check-within (candidate (list 1 5 2 5 6 4 6 3 4 5)) 33 0.001)\n    (check-within (candidate (list 3 6 3 5 5 1 2 5 5 6)) 24 0.001)\n    (check-within (candidate (list 1 6 5 6 2 4 1 5)) 23 0.001)\n    (check-within (candidate (list 5 1 6 5 4 4 2)) 23 0.001)\n    (check-within (candidate (list 3 4 3 1 1 3)) 13 0.001)\n    (check-within (candidate (list 4 1 6 5 3 6)) 19 0.001)\n    (check-within (candidate (list 3 5 5 6 4 6 5 6)) 35 0.001)\n    (check-within (candidate (list 6 4 3 3)) 16 0.001)\n    (check-within (candidate (list 6 4 3 6 1 2 2 3)) 20 0.001)\n    (check-within (candidate (list 6 5 1 4 6 1 5)) 16 0.001)\n    (check-within (candidate (list 2 3 4 4 3 2 3 5 5 5)) 30 0.001)\n    (check-within (candidate (list 5 4 6 1 2)) 16 0.001)\n    (check-within (candidate (list 1 4 2)) 7 0.001)\n    (check-within (candidate (list 5 2 4 4)) 12 0.001)\n    (check-within (candidate (list 1 5 5 3 3)) 17 0.001)\n    (check-within (candidate (list 3 1 1 4 5 5 4 6)) 25 0.001)\n    (check-within (candidate (list 1 4 3 4 5 1)) 17 0.001)\n    (check-within (candidate (list 5 5 3 1 1 2 5 5)) 18 0.001)\n    (check-within (candidate (list 3 1 3 2 6 1 4 4 6)) 20 0.001)\n    (check-within (candidate (list 5 3 3)) 11 0.001)\n    (check-within (candidate (list 5 2 1 4 3 5)) 14 0.001)\n    (check-within (candidate (list 1 3 2 1)) 7 0.001)\n    (check-within (candidate (list 1 3 6)) 10 0.001)\n    (check-within (candidate (list 5 5 5 3 3 3 3)) 27 0.001)\n    (check-within (candidate (list 1 3 3 2 1 2)) 11 0.001)\n    (check-within (candidate (list 5 5 4 1 4 4 5 6 4)) 27 0.001)\n    (check-within (candidate (list 3 5 5 6 2)) 21 0.001)\n    (check-within (candidate (list 4 6 6 1)) 17 0.001)\n    (check-within (candidate (list 4 2 6 1 4 1 5 3 6)) 18 0.001)\n    (check-within (candidate (list 4 1 6 3 6 6)) 20 0.001)\n    (check-within (candidate (list 5 2 1 4 1 6 1 5 3 4)) 18 0.001)\n    (check-within (candidate (list 1 4 6 3 5 1)) 18 0.001)\n    (check-within (candidate (list 6 1 2 5)) 9 0.001)\n    (check-within (candidate (list 6 1 5 1 6 2 2)) 14 0.001)\n    (check-within (candidate (list 6 1 2 3 4 4)) 15 0.001)\n    (check-within (candidate (list 6 1 5)) 8 0.001)\n    (check-within (candidate (list 1 6 6 3 5 6 1 1)) 24 0.001)\n    (check-within (candidate (list 2 6 1 5 1 2 3)) 13 0.001)\n    (check-within (candidate (list 3 5 1 6 3 6)) 15 0.001)\n    (check-within (candidate (list 4 4 5 3)) 16 0.001)\n    (check-within (candidate (list 3 5 4 4 3 1 1 6)) 22 0.001)\n    (check-within (candidate (list 5 6 4 4 5 1 2 3 5 6)) 28 0.001)\n    (check-within (candidate (list 2 5 1 5 5)) 13 0.001)\n    (check-within (candidate (list 1 2 6 2 6 5 5)) 23 0.001)\n    (check-within (candidate (list 1 1 6 4 5)) 16 0.001)\n    (check-within (candidate (list 3 4 1 6 2)) 11 0.001)\n    (check-within (candidate (list 1 3 3 5 6 4 6 5 2 2)) 34 0.001)\n    (check-within (candidate (list 2 4 6 4 6 3 1 5 6)) 26 0.001)\n    (check-within (candidate (list 1 6 1 6 4)) 13 0.001)\n    (check-within (candidate (list 4 2 1)) 7 0.001)\n    (check-within (candidate (list 1 2 4 1)) 8 0.001)\n    (check-within (candidate (list 1 3 3 2 5 1 4 3 1 5)) 17 0.001)\n    (check-within (candidate (list 4 3 1 4)) 9 0.001)\n    (check-within (candidate (list 5 1 3 4 5)) 14 0.001)\n    (check-within (candidate (list 1 5 4 2)) 12 0.001)\n    (check-within (candidate (list 2 6 4 3 2 2 2 5 6 5)) 30 0.001)\n    (check-within (candidate (list 2 6 1 2 1 1 2 4)) 14 0.001)\n    (check-within (candidate (list 1 2 5 3 3 3 5)) 20 0.001)\n    (check-within (candidate (list 2 5 2 2 1)) 12 0.001)\n    (check-within (candidate (list 3 5 3 4)) 14 0.001)\n    (check-within (candidate (list 4 6 6 3 4 1 6)) 24 0.001)\n    (check-within (candidate (list 2 3 5 3 4 1 1 1 3 2)) 21 0.001)\n    (check-within (candidate (list 6 6 5 3 5 4 5)) 29 0.001)\n    (check-within (candidate (list 5 5 2 2 4 2 3 2 4 4)) 26 0.001)\n    (check-within (candidate (list 1 2 5)) 8 0.001)\n    (check-within (candidate (list 3 6 2 4 5 2 2 5 1)) 22 0.001)\n    (check-within (candidate (list 6 2 6 3 4 6 2)) 22 0.001)\n    (check-within (candidate (list 6 2 5)) 10 0.001)\n    (check-within (candidate (list 5 4 2 6)) 13 0.001)\n    (check-within (candidate (list 2 6 5 3)) 16 0.001)\n    (check-within (candidate (list 4 5 4 1 6 5 1 3)) 18 0.001)\n    (check-within (candidate (list 4 1 2 4 6 2 6 3)) 20 0.001)\n    (check-within (candidate (list 6 4 4 4 2)) 20 0.001)\n    (check-within (candidate (list 5 5 4 2)) 16 0.001)\n    (check-within (candidate (list 5 3 3 4 2 2 1 4)) 20 0.001)\n    (check-within (candidate (list 6 5 6 6 6)) 28 0.001)\n    (check-within (candidate (list 6 3 5 6 2 2 3)) 23 0.001)\n    (check-within (candidate (list 4 6 4 5)) 18 0.001)\n    (check-within (candidate (list 3 5 4 2 1 1 5 6 1)) 19 0.001)\n    (check-within (candidate (list 2 3 5 6 2 4)) 20 0.001)\n    (check-within (candidate (list 4 5 2 1 4 6 6 1 6 2)) 23 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3140_countVisitedNodes", "language": "rkt", "prompt": "#lang racket\n;; There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.\n;; You are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].\n;; Consider the following process on the graph:\n;;  * You start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.\n;; Return an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/08/31/graaphdrawio-1.png]\n;; Input: edges = [1,2,0,0]\n;; Output: [3,3,3,4]\n;; Explanation: We perform the process starting from each node in the following way:\n;; - Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.\n;; - Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.\n;; - Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.\n;; - Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/08/31/graaph2drawio.png]\n;; Input: edges = [1,2,3,4,0]\n;; Output: [5,5,5,5,5]\n;; Explanation: Starting from any node we can visit every node in the graph in the process.\n;; Constraints:\n;;  * n == edges.length\n;;  * 2 <= n <= 105\n;;  * 0 <= edges[i] <= n - 1\n;;  * edges[i] != i\n(define (countVisitedNodes edges)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3140_countVisitedNodes.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countVisitedNodes))\n    (check-within (candidate (list 1 2 0 0)) (list 3 3 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 4 0)) (list 5 5 5 5 5) 0.001)\n    (check-within (candidate (list 3 6 1 0 5 7 4 3)) (list 2 7 8 2 5 4 6 3) 0.001)\n    (check-within (candidate (list 7 0 7 0 5 3 3 0)) (list 2 3 3 3 5 4 4 2) 0.001)\n    (check-within (candidate (list 6 3 6 1 0 8 0 6 6)) (list 2 2 3 2 3 4 2 3 3) 0.001)\n    (check-within (candidate (list 8 17 14 8 14 12 16 11 4 14 19 6 8 8 2 10 2 1 1 18)) (list 5 2 2 5 3 6 4 6 4 3 5 5 5 5 2 6 3 2 3 4) 0.001)\n    (check-within (candidate (list 11 9 6 8 3 2 8 11 14 2 3 7 2 2 1)) (list 3 6 6 7 8 7 6 2 6 6 8 2 7 7 6) 0.001)\n    (check-within (candidate (list 9 4 4 8 5 2 3 6 5 5)) (list 5 4 3 5 3 3 6 7 4 4) 0.001)\n    (check-within (candidate (list 1 0 1 1)) (list 2 2 3 3) 0.001)\n    (check-within (candidate (list 4 0 3 2 3)) (list 4 5 2 2 3) 0.001)\n    (check-within (candidate (list 7 7 0 9 5 6 10 16 7 4 15 13 2 16 1 7 6)) (list 6 6 7 9 7 6 5 5 6 8 5 7 8 6 7 5 5) 0.001)\n    (check-within (candidate (list 2 6 3 1 5 3 5)) (list 6 4 5 4 5 4 4) 0.001)\n    (check-within (candidate (list 15 4 13 12 12 2 11 6 14 10 15 3 5 5 2 4)) (list 7 6 3 5 5 3 7 8 5 8 7 6 4 3 4 6) 0.001)\n    (check-within (candidate (list 1 5 0 5 2 7 1 2)) (list 5 5 5 6 6 5 6 5) 0.001)\n    (check-within (candidate (list 9 6 13 1 11 4 17 9 2 18 15 4 14 15 7 2 18 16 1)) (list 7 5 3 6 2 3 5 7 4 6 4 2 9 3 8 3 5 5 5) 0.001)\n    (check-within (candidate (list 18 18 4 6 1 8 14 4 16 11 13 6 10 10 6 18 14 11 4)) (list 4 3 4 3 3 5 2 4 4 4 2 3 3 2 2 4 3 4 3) 0.001)\n    (check-within (candidate (list 5 4 1 6 3 10 3 10 11 10 8 1)) (list 9 4 5 2 3 8 2 8 6 8 7 5) 0.001)\n    (check-within (candidate (list 8 6 3 1 0 6 8 1 4 7 8)) (list 3 5 7 6 3 5 4 6 3 7 4) 0.001)\n    (check-within (candidate (list 9 5 18 15 8 4 3 3 18 5 13 0 1 18 9 6 18 9 14 15)) (list 7 7 7 3 6 6 3 4 6 6 8 8 8 7 6 3 7 7 6 4) 0.001)\n    (check-within (candidate (list 5 2 1 0 6 9 10 12 12 2 16 2 9 17 0 4 9 6)) (list 5 2 2 6 7 4 6 5 5 3 5 3 4 8 6 8 4 7) 0.001)\n    (check-within (candidate (list 6 4 1 2 3 2 0)) (list 2 4 4 4 4 5 2) 0.001)\n    (check-within (candidate (list 1 13 4 12 15 11 1 8 15 10 1 3 0 3 2 2)) (list 5 5 3 5 3 7 6 5 4 7 6 6 5 5 4 3) 0.001)\n    (check-within (candidate (list 2 2 0)) (list 2 3 2) 0.001)\n    (check-within (candidate (list 11 8 8 11 5 8 9 11 6 8 0 12 9 12)) (list 6 4 4 6 5 4 3 6 3 3 7 5 4 5) 0.001)\n    (check-within (candidate (list 2 3 6 8 0 4 8 6 1)) (list 6 3 5 3 7 8 4 5 3) 0.001)\n    (check-within (candidate (list 2 7 17 14 3 14 11 12 9 0 15 18 1 18 0 19 11 4 1 0)) (list 6 3 6 6 6 7 6 3 8 7 9 5 3 5 6 8 6 6 4 7) 0.001)\n    (check-within (candidate (list 5 17 10 13 16 4 7 10 19 6 15 6 9 0 1 0 12 18 10 16)) (list 10 13 11 12 10 10 10 10 12 10 10 11 10 11 14 10 10 12 11 11) 0.001)\n    (check-within (candidate (list 1 2 6 6 1 4 4)) (list 5 4 4 5 4 5 4) 0.001)\n    (check-within (candidate (list 2 0 0 2)) (list 2 3 2 3) 0.001)\n    (check-within (candidate (list 12 10 5 0 12 8 0 4 3 1 9 4 6)) (list 3 3 7 4 4 6 3 5 5 3 3 5 3) 0.001)\n    (check-within (candidate (list 8 4 0 0 8 2 3 8 7)) (list 3 4 4 4 3 5 5 2 2) 0.001)\n    (check-within (candidate (list 6 7 1 10 2 10 3 5 10 4 2)) (list 8 5 5 6 6 5 7 5 6 7 5) 0.001)\n    (check-within (candidate (list 2 7 5 4 8 7 2 3 0)) (list 7 8 7 7 7 7 8 7 7) 0.001)\n    (check-within (candidate (list 2 3 1 1 0 4)) (list 4 2 3 2 5 6) 0.001)\n    (check-within (candidate (list 5 2 3 1 3 1)) (list 5 3 3 3 4 4) 0.001)\n    (check-within (candidate (list 7 6 12 0 1 9 13 6 9 6 0 0 3 9 12 13 0)) (list 5 4 8 6 5 4 3 4 4 3 6 6 7 3 8 4 6) 0.001)\n    (check-within (candidate (list 1 4 9 11 11 11 14 10 11 14 2 0 14 5 10)) (list 4 4 4 5 4 5 5 5 5 4 4 4 5 6 4) 0.001)\n    (check-within (candidate (list 4 3 3 1 3)) (list 4 2 3 2 3) 0.001)\n    (check-within (candidate (list 7 7 6 8 0 7 8 0 0 10 9)) (list 2 3 5 4 3 3 4 2 3 2 2) 0.001)\n    (check-within (candidate (list 16 5 11 9 7 17 16 8 14 5 5 1 0 8 0 16 14 15 19 4)) (list 3 7 9 8 6 6 4 5 4 7 7 8 4 5 3 4 3 5 8 7) 0.001)\n    (check-within (candidate (list 1 8 10 6 2 1 8 9 6 12 5 10 3)) (list 4 3 6 3 7 4 2 6 2 5 5 6 4) 0.001)\n    (check-within (candidate (list 4 0 1 5 0 2)) (list 2 3 4 6 2 5) 0.001)\n    (check-within (candidate (list 9 13 1 2 13 1 0 5 10 8 2 2 3 12)) (list 9 5 5 5 6 6 10 7 7 8 6 6 5 5) 0.001)\n    (check-within (candidate (list 12 13 16 11 17 11 2 15 12 14 4 9 3 4 17 3 4 9)) (list 7 6 6 5 4 5 7 7 7 3 5 4 6 5 3 6 5 3) 0.001)\n    (check-within (candidate (list 2 0 1)) (list 3 3 3) 0.001)\n    (check-within (candidate (list 7 10 15 18 7 1 7 16 11 8 2 13 13 15 16 0 18 5 16)) (list 4 8 6 3 4 9 4 3 8 9 7 7 7 6 3 5 2 10 2) 0.001)\n    (check-within (candidate (list 1 2 0)) (list 3 3 3) 0.001)\n    (check-within (candidate (list 10 13 4 11 11 6 9 2 7 4 5 7 0 11)) (list 9 6 4 5 4 7 6 4 5 5 8 4 10 5) 0.001)\n    (check-within (candidate (list 12 15 15 2 10 1 5 6 1 2 11 13 10 4 2 0 1)) (list 6 8 8 9 4 9 10 11 9 9 4 4 5 4 9 7 9) 0.001)\n    (check-within (candidate (list 1 0)) (list 2 2) 0.001)\n    (check-within (candidate (list 7 17 3 7 7 12 15 1 14 15 16 3 13 0 3 8 0 11 1)) (list 6 5 6 5 6 9 9 5 7 9 8 5 8 7 6 8 7 5 6) 0.001)\n    (check-within (candidate (list 9 4 6 2 8 6 7 4 9 8 0 2 7)) (list 3 4 6 7 3 6 5 4 2 2 4 7 5) 0.001)\n    (check-within (candidate (list 13 10 6 12 12 3 4 3 10 12 1 7 8 12 9)) (list 6 2 7 5 5 6 6 6 3 5 2 7 4 5 6) 0.001)\n    (check-within (candidate (list 10 3 4 4 5 7 2 9 7 0 5)) (list 5 8 7 7 6 5 8 5 6 5 5) 0.001)\n    (check-within (candidate (list 2 4 0 4 2)) (list 2 4 2 4 3) 0.001)\n    (check-within (candidate (list 2 2 1)) (list 3 2 2) 0.001)\n    (check-within (candidate (list 19 15 1 6 8 15 5 6 4 4 19 13 3 0 15 10 13 5 6 3)) (list 7 7 8 6 2 6 6 7 2 3 6 9 7 8 7 6 9 7 7 6) 0.001)\n    (check-within (candidate (list 11 9 5 0 5 3 9 8 1 10 4 4)) (list 5 8 6 5 5 5 8 10 9 7 6 5) 0.001)\n    (check-within (candidate (list 13 10 12 11 5 17 0 10 7 16 5 4 9 3 15 5 4 1)) (list 9 4 9 7 5 4 10 5 6 7 4 6 8 8 6 5 6 4) 0.001)\n    (check-within (candidate (list 7 0 9 0 7 6 2 0 7 7)) (list 2 3 4 3 3 6 5 2 3 3) 0.001)\n    (check-within (candidate (list 1 0 0)) (list 2 2 3) 0.001)\n    (check-within (candidate (list 5 9 10 17 12 3 15 5 0 3 15 5 5 15 17 5 13 15 1)) (list 5 6 6 4 6 4 5 5 6 5 5 5 5 5 5 4 6 4 7) 0.001)\n    (check-within (candidate (list 1 5 1 8 1 0 1 4 6)) (list 3 3 4 6 4 3 4 5 5) 0.001)\n    (check-within (candidate (list 5 3 3 4 1 4)) (list 5 3 4 3 3 4) 0.001)\n    (check-within (candidate (list 7 12 12 5 10 11 5 0 3 12 12 9 1 3 7)) (list 2 2 3 6 4 5 6 2 7 3 3 4 2 7 3) 0.001)\n    (check-within (candidate (list 3 3 3 1)) (list 3 2 3 2) 0.001)\n    (check-within (candidate (list 13 3 15 10 12 7 13 15 3 0 1 5 15 12 10 9)) (list 5 3 6 3 6 7 6 6 4 5 3 8 5 5 4 5) 0.001)\n    (check-within (candidate (list 8 9 0 9 0 0 9 0 7 6 5 0)) (list 3 3 4 3 4 4 2 3 3 2 5 4) 0.001)\n    (check-within (candidate (list 2 0 7 7 3 3 0 4 5 8)) (list 5 6 4 3 3 4 6 3 5 6) 0.001)\n    (check-within (candidate (list 13 8 7 13 10 6 11 13 13 6 8 6 0 10)) (list 4 4 5 4 4 3 2 4 3 3 3 2 5 3) 0.001)\n    (check-within (candidate (list 12 14 5 17 7 0 15 18 5 10 6 18 10 11 1 1 18 16 0)) (list 7 2 9 11 10 8 4 9 9 6 5 9 6 10 2 3 9 10 8) 0.001)\n    (check-within (candidate (list 8 6 17 7 12 10 13 14 10 10 2 15 11 5 4 13 12 12)) (list 10 10 8 12 9 8 9 11 9 9 8 8 8 8 10 8 9 8) 0.001)\n    (check-within (candidate (list 1 0 1 1 1)) (list 2 2 3 3 3) 0.001)\n    (check-within (candidate (list 17 16 15 5 11 4 4 10 14 1 17 1 4 3 12 17 14 10)) (list 3 6 4 8 6 7 7 3 7 7 2 6 6 9 6 3 6 2) 0.001)\n    (check-within (candidate (list 14 10 16 16 12 13 13 16 13 14 15 14 1 4 13 11 4 7)) (list 9 8 10 10 8 9 9 10 9 9 8 8 8 8 8 8 9 11) 0.001)\n    (check-within (candidate (list 2 3 0 1)) (list 2 2 2 2) 0.001)\n    (check-within (candidate (list 8 0 11 2 0 12 0 4 11 12 0 7 3)) (list 5 6 6 7 5 9 6 5 5 9 6 5 8) 0.001)\n    (check-within (candidate (list 3 0 1 0)) (list 2 3 4 2) 0.001)\n    (check-within (candidate (list 1 3 0 1 10 11 2 6 0 5 1 4)) (list 3 2 4 2 4 6 5 6 4 7 3 5) 0.001)\n    (check-within (candidate (list 1 16 10 6 15 10 7 9 2 15 5 6 13 1 0 16 13)) (list 4 3 3 8 5 2 7 6 4 5 2 8 4 3 5 4 3) 0.001)\n    (check-within (candidate (list 4 15 10 11 0 7 9 10 1 2 9 12 5 10 6 13)) (list 2 6 3 8 2 5 4 4 7 3 3 7 6 4 5 5) 0.001)\n    (check-within (candidate (list 4 9 8 9 1 4 7 11 5 6 4 6 4 4 2)) (list 7 5 9 5 6 7 3 3 8 4 7 3 7 7 10) 0.001)\n    (check-within (candidate (list 16 14 1 6 6 1 1 15 16 16 13 14 9 3 3 11 10)) (list 8 4 5 4 5 5 4 7 8 8 6 5 9 5 4 6 7) 0.001)\n    (check-within (candidate (list 6 11 15 7 5 8 11 5 14 2 6 0 8 5 13 5)) (list 3 4 6 6 5 4 3 5 4 7 4 3 5 4 4 5) 0.001)\n    (check-within (candidate (list 14 17 11 8 5 4 10 17 3 3 2 17 13 1 17 5 5 0)) (list 3 4 5 2 2 2 7 4 2 3 6 4 6 5 3 3 3 3) 0.001)\n    (check-within (candidate (list 1 6 8 6 2 4 2 5 9 3)) (list 7 6 5 5 6 7 5 8 5 5) 0.001)\n    (check-within (candidate (list 1 5 4 1 5 3 4 0)) (list 4 3 5 3 4 3 5 5) 0.001)\n    (check-within (candidate (list 17 4 3 7 3 1 15 15 13 18 4 14 1 10 13 1 0 15 16)) (list 7 5 6 5 5 6 6 5 8 10 6 9 6 7 8 5 8 6 9) 0.001)\n    (check-within (candidate (list 12 2 6 6 7 8 8 13 1 12 15 1 8 3 8 2 6)) (list 6 4 4 5 8 5 4 7 4 6 6 5 5 6 5 5 5) 0.001)\n    (check-within (candidate (list 3 0 0 2)) (list 3 4 3 3) 0.001)\n    (check-within (candidate (list 5 0 1 1 2 0)) (list 2 3 4 4 5 2) 0.001)\n    (check-within (candidate (list 16 2 13 6 7 10 1 1 7 14 7 13 9 16 4 8 15)) (list 8 7 7 9 8 9 8 7 7 10 8 8 11 7 9 7 7) 0.001)\n    (check-within (candidate (list 14 5 0 16 7 15 1 18 18 6 11 15 0 2 3 0 17 4 12)) (list 9 12 10 9 9 11 13 9 10 14 12 11 9 11 9 10 9 9 9) 0.001)\n    (check-within (candidate (list 7 8 1 9 7 10 1 4 2 0 9)) (list 3 3 3 5 2 6 4 2 3 4 5) 0.001)\n    (check-within (candidate (list 5 3 6 2 1 3 1 3)) (list 6 4 4 4 5 5 4 5) 0.001)\n    (check-within (candidate (list 8 14 5 13 6 9 8 11 9 4 11 14 5 12 10 10 12)) (list 5 4 6 8 4 5 4 4 4 4 3 3 6 7 3 4 7) 0.001)\n    (check-within (candidate (list 6 13 11 11 6 3 3 6 1 12 4 7 14 11 0 10)) (list 5 6 5 4 5 5 4 4 7 8 6 4 7 5 6 7) 0.001)\n    (check-within (candidate (list 12 8 6 1 5 0 1 1 11 0 12 2 0)) (list 2 5 5 6 4 3 5 6 5 3 3 5 2) 0.001)\n    (check-within (candidate (list 8 2 7 17 5 1 5 17 10 2 12 3 1 0 11 3 7 4)) (list 10 6 6 7 6 6 7 6 9 7 8 8 7 11 9 8 7 6) 0.001)\n    (check-within (candidate (list 4 2 4 2 3)) (list 4 4 3 3 3) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3141_minSizeSubarray", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums and an integer target.\n;; A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.\n;; Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.\n;; Example 1:\n;; Input: nums = [1,2,3], target = 5\n;; Output: 2\n;; Explanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\n;; The subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\n;; It can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.\n;; Example 2:\n;; Input: nums = [1,1,1,2,3], target = 4\n;; Output: 2\n;; Explanation: In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\n;; The subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\n;; It can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.\n;; Example 3:\n;; Input: nums = [2,4,6,8], target = 3\n;; Output: -1\n;; Explanation: In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\n;; It can be proven that there is no subarray with sum equal to target = 3.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 105\n;;  * 1 <= target <= 109\n(define (minSizeSubarray nums target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3141_minSizeSubarray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSizeSubarray))\n    (check-within (candidate (list 1 2 3) 5) 2 0.001)\n    (check-within (candidate (list 1 1 1 2 3) 4) 2 0.001)\n    (check-within (candidate (list 2 4 6 8) 3) -1 0.001)\n    (check-within (candidate (list 2 1 5 7 7 1 6 3) 39) 9 0.001)\n    (check-within (candidate (list 17 4 3 14 17 6 15) 85) -1 0.001)\n    (check-within (candidate (list 18 3 11 19 7 16 6 7 3 6 18 9 9 1 14 17 15 14 12 10) 7) 1 0.001)\n    (check-within (candidate (list 2 3 5 2 3 4 4 1 3 5 2 2 5 1 1 2 5) 19) 6 0.001)\n    (check-within (candidate (list 4 1 5 7 1 6 1 7 2 2 5 5 5 6 3) 20) 5 0.001)\n    (check-within (candidate (list 7 3 5) 36) -1 0.001)\n    (check-within (candidate (list 1 11 6 4 13) 22) 4 0.001)\n    (check-within (candidate (list 1 2 2 2 1 2 1 2 1 2 1) 83) 53 0.001)\n    (check-within (candidate (list 4 3 5 4 5 4 4 4 5 7 4 5 6 3 1 4 6 3 7) 15) 3 0.001)\n    (check-within (candidate (list 1 2 3 2 1 5 3 4 5) 53) 19 0.001)\n    (check-within (candidate (list 2 5 6 4) 95) 22 0.001)\n    (check-within (candidate (list 6 6 4 5 2 8 1 8 7 6 6 7 4 1 9 6 8 8) 55) 9 0.001)\n    (check-within (candidate (list 1 2 8 19 17 2 3 11 8 12 16 18 7) 36) 2 0.001)\n    (check-within (candidate (list 12 14 4 14 13 16 5) 36) -1 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) 37) 37 0.001)\n    (check-within (candidate (list 5 7 2 6 4 1 6 7 1 4 7 6 7 7 6 6 4 6 8) 90) 17 0.001)\n    (check-within (candidate (list 3 5 15 17 6 17 10 15 10 4 6) 25) 2 0.001)\n    (check-within (candidate (list 14 5) 23) -1 0.001)\n    (check-within (candidate (list 1 1 5 9) 68) -1 0.001)\n    (check-within (candidate (list 11 1 17 14 9 16 5 3 7 16 14 18 17 10) 82) 6 0.001)\n    (check-within (candidate (list 9 6 8 4 3 4 6 4 7 2 6 9 2 4 5 4) 71) 14 0.001)\n    (check-within (candidate (list 2 4 4 3 2 3 2 5 3 1 5 1 4 2 6) 23) 7 0.001)\n    (check-within (candidate (list 3 6) 66) 15 0.001)\n    (check-within (candidate (list 1 4 8 5 9 8 8 2 3 1 6 2 7 5 5 3 3 5 6) 57) 10 0.001)\n    (check-within (candidate (list 1 6 5 5 1 1 2 5 3 1 5 3 2 4 6 6) 56) 16 0.001)\n    (check-within (candidate (list 5 3 5 4 3 1 3 3 1 3 3 5 5 4 5 5 5 5) 8) 2 0.001)\n    (check-within (candidate (list 2 2 1 3 2 2 2 3 3 2 1 3 3 2 3 3) 93) 40 0.001)\n    (check-within (candidate (list 5 1 4 1 5 6) 71) 19 0.001)\n    (check-within (candidate (list 3 5 6 6 1 8 4 9 6 2 3 9 6 8 7 3 6 1 8 6) 60) 11 0.001)\n    (check-within (candidate (list 12 15 9 3 3 12 13 14 7 11 7 15 12 5 11) 18) 2 0.001)\n    (check-within (candidate (list 3 11 10 12 9 13 9) 19) -1 0.001)\n    (check-within (candidate (list 3 4 4) 35) -1 0.001)\n    (check-within (candidate (list 4 5 2 5 5 5 1) 87) 23 0.001)\n    (check-within (candidate (list 2 13 15 3 6 7 16 7 9 10 4 3 12 9 13 2 9 13 15) 4) 1 0.001)\n    (check-within (candidate (list 1 2 16 10 15 15 13 11 10 6 12 15 9) 30) 2 0.001)\n    (check-within (candidate (list 3 5) 85) 21 0.001)\n    (check-within (candidate (list 1 4 3 1 4 4 2 3) 6) 2 0.001)\n    (check-within (candidate (list 2 10 12 10 4 4 12 5 12 12 5) 33) 4 0.001)\n    (check-within (candidate (list 5 9 7 10 4 7 9 11 6 3 1 8 6 1 11 1 1) 72) 11 0.001)\n    (check-within (candidate (list 19 18 6) 56) -1 0.001)\n    (check-within (candidate (list 3 5 7 6 5 3 7 7 1 5 3 1 5 6 3 1 6 1 3) 20) 4 0.001)\n    (check-within (candidate (list 5 5 4 1 2 2 2 3 2 4 2 5) 56) 16 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1) 22) 22 0.001)\n    (check-within (candidate (list 1 2) 72) 48 0.001)\n    (check-within (candidate (list 4 3 6 6 2 6 1 6 7 5 7 6 1 5 7) 82) -1 0.001)\n    (check-within (candidate (list 4 1 5 2 3 1 2 4 1 5 3 3 5 2 6 6 5 2 1) 63) 20 0.001)\n    (check-within (candidate (list 8 2 5 4 1 6 6 6 6 4 4 5 5 9 6 6 9 2) 4) 1 0.001)\n    (check-within (candidate (list 18 12 13 9 17 11) 82) -1 0.001)\n    (check-within (candidate (list 13 3 1 5 13 7 12 5) 35) 5 0.001)\n    (check-within (candidate (list 4 10 12 6 2 2 4 12 6 1 1 2 2 10 6 11 5 4 9) 49) 7 0.001)\n    (check-within (candidate (list 8) 68) -1 0.001)\n    (check-within (candidate (list 7 2 6 7 6 4 4 1 6 4 1 7 7 2 2 4 4 4) 29) 6 0.001)\n    (check-within (candidate (list 4 7 6 12 10 13 7 6 6 1 15 2 4 8 12) 43) 6 0.001)\n    (check-within (candidate (list 4 10) 10) 1 0.001)\n    (check-within (candidate (list 4 3 2 4 5 3 7 12 2 2 10) 43) 8 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1) 58) 58 0.001)\n    (check-within (candidate (list 1 1 1 1 1) 20) 20 0.001)\n    (check-within (candidate (list 4 3) 23) -1 0.001)\n    (check-within (candidate (list 3 2 1 3 2 1 3 1 1 1 2 1 2 1 2 3 3 1) 78) 41 0.001)\n    (check-within (candidate (list 3 2 4 2 4 2 5 4 5 3 4 4 2 4 4 1) 19) 5 0.001)\n    (check-within (candidate (list 17) 1) -1 0.001)\n    (check-within (candidate (list 10 12 1 11 9 5 4 5 1 10 8 12 5 4) 82) 10 0.001)\n    (check-within (candidate (list 6) 44) -1 0.001)\n    (check-within (candidate (list 4 6 2 6 3 5 2 5 5 4 3 1 5 4 5 5 4 5 5 6) 12) 3 0.001)\n    (check-within (candidate (list 14 4 13 12 18 8 4 15 4 14 17 4 2) 8) 1 0.001)\n    (check-within (candidate (list 4 4 6 5 3 4 1 4 2 6 3) 32) 9 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) 28) 28 0.001)\n    (check-within (candidate (list 5 10 1 3 14 7 13 6 5 7 10 3 10 5 8 5 7 5 6 7) 25) 4 0.001)\n    (check-within (candidate (list 12 3 4 10 5 8 12 7 12 7 5 8 4 8 11 11) 48) -1 0.001)\n    (check-within (candidate (list 3 11 5 5 3 10 12 12 12 3 10) 88) -1 0.001)\n    (check-within (candidate (list 8 2 10 5) 28) -1 0.001)\n    (check-within (candidate (list 3 5 1 4 5 2 5 3 1 2 1 1 1 3 3 3 5) 68) 23 0.001)\n    (check-within (candidate (list 1 4 1 4 4) 21) -1 0.001)\n    (check-within (candidate (list 15 8 8 19 8 12 15 3 15 8 10 9) 77) 7 0.001)\n    (check-within (candidate (list 4 4) 80) 20 0.001)\n    (check-within (candidate (list 4 9 3 7 5 4 5 1 3 5) 69) 14 0.001)\n    (check-within (candidate (list 2 8 2 8 1 5 8 9 3 4 6 6 6 1 7 9) 93) 17 0.001)\n    (check-within (candidate (list 7 11 14 12 3 16 11 9) 10) -1 0.001)\n    (check-within (candidate (list 2 1 2 1 3 2 1 1 2) 17) 10 0.001)\n    (check-within (candidate (list 5 20 18 2 8) 45) 4 0.001)\n    (check-within (candidate (list 2 1 2 1 2 1 1 1 2 2) 58) 38 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) 17) 17 0.001)\n    (check-within (candidate (list 18 6 8 17 3 10 14 12 4 13 12 10 5 18 11) 95) 9 0.001)\n    (check-within (candidate (list 19 12 14) 57) 4 0.001)\n    (check-within (candidate (list 3 13 14) 11) -1 0.001)\n    (check-within (candidate (list 17 6 8 7 4 6 6 3 8 1 8 10 18 13 2) 32) 3 0.001)\n    (check-within (candidate (list 3 12 4 9 5 2 2 9 9 6 9 11 9) 41) -1 0.001)\n    (check-within (candidate (list 3 14 2 9 5 14 15 4 3 4 17 11) 3) 1 0.001)\n    (check-within (candidate (list 2 5 3 6 3 6 1 1 5 1) 37) -1 0.001)\n    (check-within (candidate (list 13 6 4 7 3 6 4 10 13 10 5 4 2 1 7 11 3 3 12) 51) 7 0.001)\n    (check-within (candidate (list 1 10 9 16 3 10 2 5 1 10) 83) 11 0.001)\n    (check-within (candidate (list 2 10 13 3 4 19 14 20 11 15 4 3 17 8 2 3 1 13 8) 1) 1 0.001)\n    (check-within (candidate (list 4 5 5 3 5 4 2 11 5 9 4 6) 41) 7 0.001)\n    (check-within (candidate (list 2 8 9 6 11 17 3 6 9 7 2 8 9 11 19) 39) 3 0.001)\n    (check-within (candidate (list 8 13 9 5 8 6 17 16 14 7 10 15 16) 8) 1 0.001)\n    (check-within (candidate (list 10 20 16 1 11 18 13 6 13 6 9 14 16 12 13 7 19) 59) 5 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1 1 1 1) 6) 6 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3143_getWordsInLongestSubsequence", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer n, a 0-indexed string array words, and a 0-indexed binary array groups, both arrays having length n.\n;; You need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik - 1] having length k, groups[ij] != groups[ij + 1], for each j where 0 < j + 1 < k.\n;; Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.\n;; A subsequence of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n;; Note: strings in words may be unequal in length.\n;; Example 1:\n;; Input: n = 3, words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\n;; Output: [\"e\",\"b\"]\n;; Explanation: A subsequence that can be selected is [0,2] because groups[0] != groups[2].\n;; So, a valid answer is [words[0],words[2]] = [\"e\",\"b\"].\n;; Another subsequence that can be selected is [1,2] because groups[1] != groups[2].\n;; This results in [words[1],words[2]] = [\"a\",\"b\"].\n;; It is also a valid answer.\n;; It can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.\n;; Example 2:\n;; Input: n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\n;; Output: [\"a\",\"b\",\"c\"]\n;; Explanation: A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].\n;; So, a valid answer is [words[0],words[1],words[2]] = [\"a\",\"b\",\"c\"].\n;; Another subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].\n;; This results in [words[0],words[1],words[3]] = [\"a\",\"b\",\"d\"].\n;; It is also a valid answer.\n;; It can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\n;; Constraints:\n;;  * 1 <= n == words.length == groups.length <= 100\n;;  * 1 <= words[i].length <= 10\n;;  * 0 <= groups[i] < 2\n;;  * words consists of distinct strings.\n;;  * words[i] consists of lowercase English letters.\n(define (getWordsInLongestSubsequence n words groups)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3143_getWordsInLongestSubsequence.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate getWordsInLongestSubsequence))\n    (check-within (candidate 3 (list \"e\" \"a\" \"b\") (list 0 0 1)) (list \"e\" \"b\") 0.001)\n    (check-within (candidate 4 (list \"a\" \"b\" \"c\" \"d\") (list 1 0 1 1)) (list \"a\" \"b\" \"c\") 0.001)\n    (check-within (candidate 1 (list \"c\") (list 0)) (list \"c\") 0.001)\n    (check-within (candidate 1 (list \"d\") (list 1)) (list \"d\") 0.001)\n    (check-within (candidate 1 (list \"e\") (list 0)) (list \"e\") 0.001)\n    (check-within (candidate 1 (list \"fe\") (list 0)) (list \"fe\") 0.001)\n    (check-within (candidate 1 (list \"frl\") (list 1)) (list \"frl\") 0.001)\n    (check-within (candidate 1 (list \"ha\") (list 1)) (list \"ha\") 0.001)\n    (check-within (candidate 1 (list \"l\") (list 0)) (list \"l\") 0.001)\n    (check-within (candidate 1 (list \"n\") (list 1)) (list \"n\") 0.001)\n    (check-within (candidate 1 (list \"s\") (list 1)) (list \"s\") 0.001)\n    (check-within (candidate 2 (list \"d\" \"g\") (list 0 1)) (list \"d\" \"g\") 0.001)\n    (check-within (candidate 2 (list \"lr\" \"h\") (list 0 0)) (list \"lr\") 0.001)\n    (check-within (candidate 2 (list \"wx\" \"h\") (list 0 1)) (list \"wx\" \"h\") 0.001)\n    (check-within (candidate 2 (list \"yw\" \"n\") (list 0 1)) (list \"yw\" \"n\") 0.001)\n    (check-within (candidate 2 (list \"z\" \"n\") (list 0 0)) (list \"z\") 0.001)\n    (check-within (candidate 2 (list \"zr\" \"a\") (list 0 0)) (list \"zr\") 0.001)\n    (check-within (candidate 3 (list \"h\" \"vv\" \"kp\") (list 0 1 0)) (list \"h\" \"vv\" \"kp\") 0.001)\n    (check-within (candidate 3 (list \"m\" \"v\" \"y\") (list 0 1 0)) (list \"m\" \"v\" \"y\") 0.001)\n    (check-within (candidate 3 (list \"o\" \"cfy\" \"en\") (list 1 0 0)) (list \"o\" \"cfy\") 0.001)\n    (check-within (candidate 3 (list \"tu\" \"rv\" \"bn\") (list 0 0 0)) (list \"tu\") 0.001)\n    (check-within (candidate 4 (list \"c\" \"f\" \"y\" \"i\") (list 1 0 1 1)) (list \"c\" \"f\" \"y\") 0.001)\n    (check-within (candidate 4 (list \"c\" \"w\" \"h\" \"s\") (list 0 0 0 1)) (list \"c\" \"s\") 0.001)\n    (check-within (candidate 4 (list \"d\" \"a\" \"v\" \"b\") (list 1 0 0 1)) (list \"d\" \"a\" \"b\") 0.001)\n    (check-within (candidate 4 (list \"hh\" \"svj\" \"a\" \"nr\") (list 1 1 1 1)) (list \"hh\") 0.001)\n    (check-within (candidate 4 (list \"im\" \"j\" \"xq\" \"cjs\") (list 1 0 0 1)) (list \"im\" \"j\" \"cjs\") 0.001)\n    (check-within (candidate 4 (list \"m\" \"dkg\" \"r\" \"h\") (list 1 1 1 0)) (list \"m\" \"h\") 0.001)\n    (check-within (candidate 4 (list \"ow\" \"qay\" \"r\" \"j\") (list 1 1 1 1)) (list \"ow\") 0.001)\n    (check-within (candidate 4 (list \"r\" \"k\" \"pb\" \"x\") (list 0 0 1 0)) (list \"r\" \"pb\" \"x\") 0.001)\n    (check-within (candidate 4 (list \"sq\" \"do\" \"bcj\" \"nm\") (list 0 1 1 0)) (list \"sq\" \"do\" \"nm\") 0.001)\n    (check-within (candidate 4 (list \"sz\" \"mq\" \"j\" \"u\") (list 0 0 1 0)) (list \"sz\" \"j\" \"u\") 0.001)\n    (check-within (candidate 4 (list \"x\" \"nf\" \"p\" \"asn\") (list 1 1 1 1)) (list \"x\") 0.001)\n    (check-within (candidate 4 (list \"z\" \"tkt\" \"x\" \"swy\") (list 1 0 1 1)) (list \"z\" \"tkt\" \"x\") 0.001)\n    (check-within (candidate 5 (list \"ht\" \"lw\" \"ax\" \"vi\" \"fo\") (list 0 0 1 0 0)) (list \"ht\" \"ax\" \"vi\") 0.001)\n    (check-within (candidate 5 (list \"mc\" \"kh\" \"x\" \"q\" \"z\") (list 0 0 1 1 0)) (list \"mc\" \"x\" \"z\") 0.001)\n    (check-within (candidate 5 (list \"n\" \"fg\" \"fy\" \"tv\" \"gv\") (list 1 1 1 1 1)) (list \"n\") 0.001)\n    (check-within (candidate 5 (list \"n\" \"l\" \"e\" \"d\" \"m\") (list 1 1 0 1 1)) (list \"n\" \"e\" \"d\") 0.001)\n    (check-within (candidate 5 (list \"n\" \"m\" \"g\" \"b\" \"d\") (list 0 0 1 0 0)) (list \"n\" \"g\" \"b\") 0.001)\n    (check-within (candidate 5 (list \"nz\" \"zwt\" \"hig\" \"s\" \"jze\") (list 1 1 1 0 1)) (list \"nz\" \"s\" \"jze\") 0.001)\n    (check-within (candidate 5 (list \"o\" \"i\" \"b\" \"k\" \"kz\") (list 0 0 1 1 1)) (list \"o\" \"b\") 0.001)\n    (check-within (candidate 5 (list \"r\" \"o\" \"k\" \"d\" \"f\") (list 0 0 0 1 1)) (list \"r\" \"d\") 0.001)\n    (check-within (candidate 5 (list \"sfh\" \"exd\" \"j\" \"w\" \"gc\") (list 1 0 1 1 1)) (list \"sfh\" \"exd\" \"j\") 0.001)\n    (check-within (candidate 5 (list \"v\" \"f\" \"k\" \"l\" \"p\") (list 0 0 1 0 0)) (list \"v\" \"k\" \"l\") 0.001)\n    (check-within (candidate 5 (list \"vbd\" \"ua\" \"muo\" \"mu\" \"qi\") (list 0 0 0 1 0)) (list \"vbd\" \"mu\" \"qi\") 0.001)\n    (check-within (candidate 5 (list \"we\" \"ch\" \"tl\" \"yx\" \"utx\") (list 1 0 0 1 1)) (list \"we\" \"ch\" \"yx\") 0.001)\n    (check-within (candidate 5 (list \"x\" \"vlk\" \"tds\" \"dfn\" \"kr\") (list 0 0 1 1 0)) (list \"x\" \"tds\" \"kr\") 0.001)\n    (check-within (candidate 5 (list \"y\" \"j\" \"u\" \"r\" \"f\") (list 0 0 1 1 0)) (list \"y\" \"u\" \"f\") 0.001)\n    (check-within (candidate 5 (list \"y\" \"r\" \"z\" \"x\" \"q\") (list 0 1 0 1 1)) (list \"y\" \"r\" \"z\" \"x\") 0.001)\n    (check-within (candidate 5 (list \"yc\" \"fgq\" \"gg\" \"og\" \"tca\") (list 0 1 1 1 0)) (list \"yc\" \"fgq\" \"tca\") 0.001)\n    (check-within (candidate 5 (list \"z\" \"d\" \"p\" \"c\" \"m\") (list 0 0 0 0 0)) (list \"z\") 0.001)\n    (check-within (candidate 6 (list \"c\" \"i\" \"to\" \"kv\" \"op\" \"u\") (list 0 0 1 0 0 0)) (list \"c\" \"to\" \"kv\") 0.001)\n    (check-within (candidate 6 (list \"d\" \"h\" \"e\" \"k\" \"j\" \"r\") (list 0 1 1 0 1 0)) (list \"d\" \"h\" \"k\" \"j\" \"r\") 0.001)\n    (check-within (candidate 6 (list \"l\" \"f\" \"v\" \"b\" \"w\" \"k\") (list 1 0 1 1 0 0)) (list \"l\" \"f\" \"v\" \"w\") 0.001)\n    (check-within (candidate 6 (list \"lj\" \"vf\" \"pa\" \"w\" \"z\" \"q\") (list 0 0 1 0 0 0)) (list \"lj\" \"pa\" \"w\") 0.001)\n    (check-within (candidate 7 (list \"cd\" \"oki\" \"ho\" \"oi\" \"m\" \"yvy\" \"i\") (list 1 1 0 1 1 1 1)) (list \"cd\" \"ho\" \"oi\") 0.001)\n    (check-within (candidate 7 (list \"exb\" \"c\" \"oq\" \"lq\" \"xh\" \"zmo\" \"aug\") (list 1 1 0 1 1 0 0)) (list \"exb\" \"oq\" \"lq\" \"zmo\") 0.001)\n    (check-within (candidate 7 (list \"f\" \"r\" \"k\" \"h\" \"m\" \"v\" \"p\") (list 1 0 0 0 1 0 0)) (list \"f\" \"r\" \"m\" \"v\") 0.001)\n    (check-within (candidate 7 (list \"fd\" \"fc\" \"jm\" \"z\" \"lg\" \"kl\" \"ux\") (list 0 1 0 1 0 1 0)) (list \"fd\" \"fc\" \"jm\" \"z\" \"lg\" \"kl\" \"ux\") 0.001)\n    (check-within (candidate 7 (list \"ft\" \"iw\" \"m\" \"v\" \"gx\" \"d\" \"pm\") (list 1 1 1 0 1 1 1)) (list \"ft\" \"v\" \"gx\") 0.001)\n    (check-within (candidate 7 (list \"lma\" \"i\" \"rt\" \"xar\" \"bfx\" \"np\" \"x\") (list 1 1 1 1 1 0 1)) (list \"lma\" \"np\" \"x\") 0.001)\n    (check-within (candidate 7 (list \"nsv\" \"r\" \"o\" \"qo\" \"pb\" \"xqv\" \"clb\") (list 1 1 0 0 0 0 0)) (list \"nsv\" \"o\") 0.001)\n    (check-within (candidate 7 (list \"p\" \"qdb\" \"zcd\" \"l\" \"tv\" \"ln\" \"ogb\") (list 1 1 0 1 0 0 1)) (list \"p\" \"zcd\" \"l\" \"tv\" \"ogb\") 0.001)\n    (check-within (candidate 7 (list \"z\" \"cee\" \"j\" \"jqu\" \"w\" \"ljr\" \"k\") (list 1 0 1 1 0 0 1)) (list \"z\" \"cee\" \"j\" \"w\" \"k\") 0.001)\n    (check-within (candidate 8 (list \"h\" \"p\" \"q\" \"t\" \"j\" \"a\" \"c\" \"n\") (list 0 1 1 1 0 0 1 1)) (list \"h\" \"p\" \"j\" \"c\") 0.001)\n    (check-within (candidate 8 (list \"r\" \"v\" \"c\" \"t\" \"d\" \"a\" \"x\" \"o\") (list 1 1 0 1 1 0 0 1)) (list \"r\" \"c\" \"t\" \"a\" \"o\") 0.001)\n    (check-within (candidate 8 (list \"u\" \"l\" \"a\" \"y\" \"j\" \"s\" \"h\" \"q\") (list 0 0 0 0 0 1 0 0)) (list \"u\" \"s\" \"h\") 0.001)\n    (check-within (candidate 8 (list \"x\" \"mr\" \"yyf\" \"l\" \"z\" \"q\" \"zvj\" \"zqt\") (list 0 1 1 1 0 1 1 0)) (list \"x\" \"mr\" \"z\" \"q\" \"zqt\") 0.001)\n    (check-within (candidate 8 (list \"y\" \"x\" \"i\" \"xtm\" \"ze\" \"n\" \"cma\" \"dgk\") (list 0 1 0 0 1 1 0 0)) (list \"y\" \"x\" \"i\" \"ze\" \"cma\") 0.001)\n    (check-within (candidate 8 (list \"yun\" \"x\" \"zpp\" \"bpr\" \"ii\" \"ezg\" \"dn\" \"k\") (list 0 1 1 1 1 0 1 0)) (list \"yun\" \"x\" \"ezg\" \"dn\" \"k\") 0.001)\n    (check-within (candidate 9 (list \"ckr\" \"iz\" \"top\" \"of\" \"sb\" \"wv\" \"hb\" \"da\" \"wd\") (list 1 1 0 1 1 0 0 0 1)) (list \"ckr\" \"top\" \"of\" \"wv\" \"wd\") 0.001)\n    (check-within (candidate 9 (list \"g\" \"h\" \"u\" \"n\" \"w\" \"o\" \"f\" \"p\" \"m\") (list 1 0 0 1 1 0 0 1 0)) (list \"g\" \"h\" \"n\" \"o\" \"p\" \"m\") 0.001)\n    (check-within (candidate 9 (list \"ilw\" \"t\" \"dyy\" \"irz\" \"oxy\" \"k\" \"rfj\" \"hi\" \"zxe\") (list 1 1 1 0 1 1 0 1 1)) (list \"ilw\" \"irz\" \"oxy\" \"rfj\" \"hi\") 0.001)\n    (check-within (candidate 9 (list \"l\" \"iuz\" \"d\" \"tfw\" \"mu\" \"a\" \"rp\" \"mrb\" \"wnl\") (list 1 1 1 1 1 0 1 1 0)) (list \"l\" \"a\" \"rp\" \"wnl\") 0.001)\n    (check-within (candidate 9 (list \"mc\" \"b\" \"yr\" \"cj\" \"zk\" \"wi\" \"esm\" \"yu\" \"cw\") (list 0 0 1 1 0 0 1 1 0)) (list \"mc\" \"yr\" \"zk\" \"esm\" \"cw\") 0.001)\n    (check-within (candidate 9 (list \"nw\" \"hx\" \"ygc\" \"vjo\" \"jmv\" \"p\" \"juv\" \"b\" \"y\") (list 0 1 0 0 1 0 0 1 0)) (list \"nw\" \"hx\" \"ygc\" \"jmv\" \"p\" \"b\" \"y\") 0.001)\n    (check-within (candidate 9 (list \"osq\" \"qiw\" \"h\" \"tc\" \"xg\" \"tvt\" \"fqp\" \"zq\" \"b\") (list 0 0 1 0 1 1 0 1 1)) (list \"osq\" \"h\" \"tc\" \"xg\" \"fqp\" \"zq\") 0.001)\n    (check-within (candidate 9 (list \"vr\" \"lw\" \"e\" \"g\" \"dz\" \"kf\" \"qe\" \"h\" \"p\") (list 1 0 0 1 1 0 0 0 0)) (list \"vr\" \"lw\" \"g\" \"kf\") 0.001)\n    (check-within (candidate 10 (list \"gy\" \"nd\" \"l\" \"hr\" \"i\" \"qf\" \"zz\" \"nq\" \"e\" \"oa\") (list 0 1 0 0 1 0 1 1 1 0)) (list \"gy\" \"nd\" \"l\" \"i\" \"qf\" \"zz\" \"oa\") 0.001)\n    (check-within (candidate 10 (list \"j\" \"r\" \"h\" \"t\" \"z\" \"b\" \"a\" \"s\" \"v\" \"q\") (list 1 0 1 1 1 1 0 0 0 1)) (list \"j\" \"r\" \"h\" \"a\" \"q\") 0.001)\n    (check-within (candidate 10 (list \"k\" \"f\" \"u\" \"h\" \"x\" \"w\" \"c\" \"e\" \"l\" \"p\") (list 0 1 1 1 1 1 1 1 1 0)) (list \"k\" \"f\" \"p\") 0.001)\n    (check-within (candidate 10 (list \"lj\" \"huy\" \"lg\" \"h\" \"o\" \"b\" \"ava\" \"ay\" \"r\" \"us\") (list 1 1 1 1 0 0 1 1 1 1)) (list \"lj\" \"o\" \"ava\") 0.001)\n    (check-within (candidate 10 (list \"m\" \"d\" \"xv\" \"dp\" \"nq\" \"xi\" \"e\" \"g\" \"n\" \"qw\") (list 1 0 1 1 1 1 0 1 0 1)) (list \"m\" \"d\" \"xv\" \"e\" \"g\" \"n\" \"qw\") 0.001)\n    (check-within (candidate 10 (list \"n\" \"c\" \"y\" \"h\" \"w\" \"m\" \"g\" \"t\" \"x\" \"v\") (list 1 1 1 0 0 1 0 0 0 1)) (list \"n\" \"h\" \"m\" \"g\" \"v\") 0.001)\n    (check-within (candidate 10 (list \"o\" \"w\" \"l\" \"g\" \"m\" \"x\" \"f\" \"q\" \"c\" \"v\") (list 1 1 1 0 1 1 1 0 0 1)) (list \"o\" \"g\" \"m\" \"q\" \"v\") 0.001)\n    (check-within (candidate 10 (list \"p\" \"mw\" \"m\" \"xld\" \"j\" \"jv\" \"n\" \"so\" \"pkd\" \"rwt\") (list 0 0 1 0 1 1 0 0 1 1)) (list \"p\" \"m\" \"xld\" \"j\" \"n\" \"pkd\") 0.001)\n    (check-within (candidate 10 (list \"vyv\" \"msl\" \"d\" \"bu\" \"ubl\" \"bgk\" \"sz\" \"njv\" \"pf\" \"s\") (list 1 0 1 1 0 0 1 0 1 0)) (list \"vyv\" \"msl\" \"d\" \"ubl\" \"sz\" \"njv\" \"pf\" \"s\") 0.001)\n    (check-within (candidate 10 (list \"y\" \"mz\" \"lt\" \"ur\" \"o\" \"m\" \"djh\" \"tb\" \"w\" \"j\") (list 0 0 1 0 1 1 0 1 0 0)) (list \"y\" \"lt\" \"ur\" \"o\" \"djh\" \"tb\" \"w\") 0.001)\n    (check-within (candidate 10 (list \"y\" \"s\" \"i\" \"v\" \"a\" \"w\" \"l\" \"q\" \"k\" \"t\") (list 0 1 1 1 0 1 1 1 0 0)) (list \"y\" \"s\" \"a\" \"w\" \"k\") 0.001)\n    (check-within (candidate 11 (list \"a\" \"tea\" \"ldt\" \"ybm\" \"zkw\" \"r\" \"d\" \"dms\" \"le\" \"u\" \"ze\") (list 1 1 0 0 0 1 1 1 1 0 1)) (list \"a\" \"ldt\" \"r\" \"u\" \"ze\") 0.001)\n    (check-within (candidate 11 (list \"c\" \"o\" \"e\" \"r\" \"x\" \"w\" \"b\" \"d\" \"h\" \"y\" \"z\") (list 1 0 1 0 1 0 1 1 1 0 1)) (list \"c\" \"o\" \"e\" \"r\" \"x\" \"w\" \"b\" \"y\" \"z\") 0.001)\n    (check-within (candidate 11 (list \"chu\" \"a\" \"qdx\" \"fgd\" \"qe\" \"bqc\" \"x\" \"kbx\" \"sv\" \"ly\" \"br\") (list 1 0 0 0 0 0 1 0 1 1 0)) (list \"chu\" \"a\" \"x\" \"kbx\" \"sv\" \"br\") 0.001)\n    (check-within (candidate 11 (list \"ec\" \"jdf\" \"b\" \"wa\" \"kjd\" \"bb\" \"ty\" \"yi\" \"ybw\" \"ilj\" \"cv\") (list 0 1 0 1 1 1 1 1 1 0 1)) (list \"ec\" \"jdf\" \"b\" \"wa\" \"ilj\" \"cv\") 0.001)\n    (check-within (candidate 11 (list \"ew\" \"isn\" \"fl\" \"mg\" \"pdg\" \"d\" \"p\" \"hh\" \"e\" \"y\" \"whm\") (list 0 0 1 1 0 0 0 0 0 1 1)) (list \"ew\" \"fl\" \"pdg\" \"y\") 0.001)\n    (check-within (candidate 11 (list \"h\" \"o\" \"d\" \"y\" \"r\" \"c\" \"p\" \"b\" \"g\" \"j\" \"k\") (list 1 1 0 1 1 0 1 1 0 0 0)) (list \"h\" \"d\" \"y\" \"c\" \"p\" \"g\") 0.001)\n    (check-within (candidate 11 (list \"ipr\" \"l\" \"zy\" \"j\" \"h\" \"hdt\" \"m\" \"d\" \"pd\" \"nv\" \"wy\") (list 1 1 1 1 0 1 0 1 1 1 1)) (list \"ipr\" \"h\" \"hdt\" \"m\" \"d\") 0.001)\n    (check-within (candidate 11 (list \"j\" \"g\" \"go\" \"a\" \"f\" \"bg\" \"o\" \"l\" \"ze\" \"kq\" \"w\") (list 0 0 1 0 1 0 0 0 1 0 1)) (list \"j\" \"go\" \"a\" \"f\" \"bg\" \"ze\" \"kq\" \"w\") 0.001)\n    (check-within (candidate 11 (list \"j\" \"r\" \"a\" \"g\" \"x\" \"b\" \"y\" \"v\" \"k\" \"i\" \"c\") (list 0 1 0 0 0 0 1 1 0 0 0)) (list \"j\" \"r\" \"a\" \"y\" \"k\") 0.001)\n    (check-within (candidate 11 (list \"kgo\" \"han\" \"nlu\" \"tv\" \"us\" \"pk\" \"xw\" \"cxc\" \"eml\" \"v\" \"msz\") (list 1 0 0 1 0 0 1 0 1 1 0)) (list \"kgo\" \"han\" \"tv\" \"us\" \"xw\" \"cxc\" \"eml\" \"msz\") 0.001)\n    (check-within (candidate 11 (list \"kh\" \"op\" \"ij\" \"te\" \"hk\" \"pmt\" \"v\" \"ne\" \"en\" \"b\" \"zuj\") (list 0 0 1 1 1 0 1 1 0 1 1)) (list \"kh\" \"ij\" \"pmt\" \"v\" \"en\" \"b\") 0.001)\n    (check-within (candidate 11 (list \"ms\" \"t\" \"oz\" \"x\" \"pw\" \"ik\" \"d\" \"gj\" \"z\" \"ps\" \"i\") (list 1 1 0 1 0 0 1 1 0 0 1)) (list \"ms\" \"oz\" \"x\" \"pw\" \"d\" \"z\" \"i\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3151_minProcessingTime", "language": "rkt", "prompt": "#lang racket\n;; You have n processors each having 4 cores and n * 4 tasks that need to be executed such that each core should perform only one task.\n;; Given a 0-indexed integer array processorTime representing the time at which each processor becomes available for the first time and a 0-indexed integer array tasks representing the time it takes to execute each task, return the minimum time when all of the tasks have been executed by the processors.\n;; Note: Each core executes the task independently of the others.\n;; Example 1:\n;; Input: processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]\n;; Output: 16\n;; Explanation:\n;; It's optimal to assign the tasks at indexes 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indexes 0, 1, 2, 3 to the second processor which becomes available at time = 10.\n;; Time taken by the first processor to finish execution of all tasks = max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16.\n;; Time taken by the second processor to finish execution of all tasks = max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13.\n;; Hence, it can be shown that the minimum time taken to execute all the tasks is 16.\n;; Example 2:\n;; Input: processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]\n;; Output: 23\n;; Explanation:\n;; It's optimal to assign the tasks at indexes 1, 4, 5, 6 to the first processor which becomes available at time = 10, and the tasks at indexes 0, 2, 3, 7 to the second processor which becomes available at time = 20.\n;; Time taken by the first processor to finish execution of all tasks = max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18.\n;; Time taken by the second processor to finish execution of all tasks = max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.\n;; Hence, it can be shown that the minimum time taken to execute all the tasks is 23.\n;; Constraints:\n;;  * 1 <= n == processorTime.length <= 25000\n;;  * 1 <= tasks.length <= 105\n;;  * 0 <= processorTime[i] <= 109\n;;  * 1 <= tasks[i] <= 109\n;;  * tasks.length == 4 * n\n(define (minProcessingTime processorTime tasks)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3151_minProcessingTime.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minProcessingTime))\n    (check-within (candidate (list 8 10) (list 2 2 3 1 8 7 4 5)) 16 0.001)\n    (check-within (candidate (list 10 20) (list 2 3 1 2 5 8 4 3)) 23 0.001)\n    (check-within (candidate (list 121 99) (list 287 315 293 260 333 362 69 233)) 461 0.001)\n    (check-within (candidate (list 33 320) (list 132 68 232 166 30 300 112 138)) 452 0.001)\n    (check-within (candidate (list 50 82) (list 288 138 205 295 367 100 258 308)) 417 0.001)\n    (check-within (candidate (list 291) (list 125 169 269 32)) 560 0.001)\n    (check-within (candidate (list 55 350 166 210 389) (list 276 253 157 237 92 396 331 19 82 301 136 396 251 92 280 70 253 47 81 84)) 470 0.001)\n    (check-within (candidate (list 143 228 349 231 392) (list 102 365 363 211 38 96 98 79 365 289 252 201 259 346 21 68 128 56 167 183)) 517 0.001)\n    (check-within (candidate (list 168 32 299 303 96) (list 382 183 337 73 115 350 6 18 93 238 102 302 96 381 327 385 387 288 138 83)) 456 0.001)\n    (check-within (candidate (list 324 117 374 219 303) (list 374 202 328 11 353 208 383 287 107 236 226 387 21 183 352 164 207 182 15 65)) 571 0.001)\n    (check-within (candidate (list 376) (list 21 247 274 38)) 650 0.001)\n    (check-within (candidate (list 93 3 281 218) (list 182 16 241 312 81 339 207 330 306 166 82 290 7 317 396 389)) 459 0.001)\n    (check-within (candidate (list 374 250 197 170) (list 247 56 330 361 240 261 67 65 138 181 308 26 59 150 137 244)) 531 0.001)\n    (check-within (candidate (list 115 271 137) (list 34 72 328 312 159 32 283 6 234 280 46 349)) 464 0.001)\n    (check-within (candidate (list 47 217 349 233 283) (list 195 188 181 259 145 96 298 322 213 154 278 292 315 191 177 228 291 204 310 266)) 526 0.001)\n    (check-within (candidate (list 177 6 326 318 294) (list 136 215 260 259 35 248 340 377 144 248 83 150 63 48 269 197 317 135 36 344)) 542 0.001)\n    (check-within (candidate (list 266 372) (list 260 325 159 316 296 366 335 146)) 668 0.001)\n    (check-within (candidate (list 63 339) (list 79 316 98 354 220 267 333 11)) 559 0.001)\n    (check-within (candidate (list 149 60 172 5 212) (list 230 374 276 281 55 96 52 83 56 399 69 333 145 6 50 101 216 327 120 209)) 404 0.001)\n    (check-within (candidate (list 220 375 285 267 150) (list 53 317 367 258 337 280 232 322 153 169 121 211 171 345 76 370 265 107 45 320)) 542 0.001)\n    (check-within (candidate (list 373 367 267) (list 214 221 78 330 340 309 330 338 396 337 285 207)) 697 0.001)\n    (check-within (candidate (list 92 20) (list 11 354 399 11 20 9 217 372)) 419 0.001)\n    (check-within (candidate (list 51) (list 349 186 191 183)) 400 0.001)\n    (check-within (candidate (list 362 220 10 219) (list 160 369 385 145 122 124 147 231 162 37 293 160 68 232 232 130)) 486 0.001)\n    (check-within (candidate (list 210 348 3 57 174) (list 328 296 222 161 190 381 283 137 353 227 284 134 170 13 275 113 148 198 33 260)) 482 0.001)\n    (check-within (candidate (list 153) (list 342 166 234 175)) 495 0.001)\n    (check-within (candidate (list 23 204 114 380 3) (list 40 105 311 221 247 34 399 190 23 289 16 129 68 12 32 364 364 111 361 49)) 412 0.001)\n    (check-within (candidate (list 167 110 221 19 211) (list 140 351 307 4 262 228 161 200 108 206 280 266 240 258 396 194 333 328 121 179)) 425 0.001)\n    (check-within (candidate (list 179 127 280 242) (list 244 243 92 188 134 84 22 258 100 77 237 83 41 396 218 87)) 523 0.001)\n    (check-within (candidate (list 45 249 396 163) (list 131 365 52 366 229 340 242 371 20 181 103 97 141 106 46 119)) 493 0.001)\n    (check-within (candidate (list 205) (list 117 63 174 87)) 379 0.001)\n    (check-within (candidate (list 128 101 302 53) (list 265 96 358 287 148 117 331 47 173 347 62 145 73 47 206 29)) 411 0.001)\n    (check-within (candidate (list 228) (list 321 378 268 351)) 606 0.001)\n    (check-within (candidate (list 136 22 229 187) (list 246 326 188 341 375 207 334 1 189 301 62 39 44 239 346 376)) 470 0.001)\n    (check-within (candidate (list 47 238 274) (list 251 312 87 111 142 62 112 325 305 164 85 338)) 489 0.001)\n    (check-within (candidate (list 386 121 249) (list 5 376 53 187 287 369 400 178 293 121 164 336)) 550 0.001)\n    (check-within (candidate (list 82 152) (list 82 46 149 255 225 93 227 131)) 337 0.001)\n    (check-within (candidate (list 394 6) (list 231 236 288 35 247 204 141 41)) 598 0.001)\n    (check-within (candidate (list 389 54) (list 353 358 211 133 225 358 19 310)) 614 0.001)\n    (check-within (candidate (list 106 291 291 301) (list 192 120 93 5 293 147 299 81 334 137 259 48 296 117 379 182)) 584 0.001)\n    (check-within (candidate (list 320 139) (list 210 255 304 181 216 255 375 360)) 575 0.001)\n    (check-within (candidate (list 306 207 295) (list 335 188 355 209 201 113 122 206 46 355 350 38)) 562 0.001)\n    (check-within (candidate (list 175 111) (list 225 110 163 100 353 77 12 124)) 464 0.001)\n    (check-within (candidate (list 233 201) (list 1 389 291 333 42 399 399 300)) 600 0.001)\n    (check-within (candidate (list 302 5 102 195) (list 311 144 7 277 253 96 136 251 81 195 171 140 73 2 84 42)) 375 0.001)\n    (check-within (candidate (list 151 185 3 137) (list 294 230 221 216 299 24 79 194 375 387 77 388 366 51 117 126)) 436 0.001)\n    (check-within (candidate (list 39 141 145 199) (list 99 257 161 121 56 80 235 168 171 228 290 180 118 307 66 151)) 369 0.001)\n    (check-within (candidate (list 40 67) (list 259 217 337 295 126 335 369 123)) 409 0.001)\n    (check-within (candidate (list 310 56 207 396) (list 260 255 30 243 66 11 285 31 358 219 218 90 176 346 134 74)) 486 0.001)\n    (check-within (candidate (list 174 48) (list 106 323 4 247 70 281 348 12)) 396 0.001)\n    (check-within (candidate (list 16 52 13) (list 281 261 55 165 317 150 68 26 52 227 176 399)) 412 0.001)\n    (check-within (candidate (list 8 315 115 123) (list 134 371 160 138 289 330 48 349 376 88 46 235 298 321 343 365)) 458 0.001)\n    (check-within (candidate (list 221 24 372 6 50) (list 274 79 78 37 57 39 102 272 242 283 95 155 105 363 174 1 333 400 375 376)) 429 0.001)\n    (check-within (candidate (list 289 98 7 303 219) (list 363 140 173 92 52 348 350 316 281 327 40 259 39 235 263 244 42 354 11 232)) 478 0.001)\n    (check-within (candidate (list 348 268) (list 104 397 333 188 373 325 57 202)) 665 0.001)\n    (check-within (candidate (list 18 377 305 188 311) (list 207 365 369 66 263 47 257 317 221 292 386 308 357 105 99 314 133 106 311 90)) 597 0.001)\n    (check-within (candidate (list 44 254) (list 277 361 398 276 84 105 350 134)) 530 0.001)\n    (check-within (candidate (list 270 257 58) (list 212 151 50 78 91 110 399 360 108 192 142 115)) 457 0.001)\n    (check-within (candidate (list 108 301) (list 150 143 119 160 340 139 72 349)) 457 0.001)\n    (check-within (candidate (list 231 207 162 49) (list 318 289 351 103 19 77 65 116 94 234 139 246 80 184 286 397)) 448 0.001)\n    (check-within (candidate (list 252) (list 384 281 207 33)) 636 0.001)\n    (check-within (candidate (list 199 8 129 204) (list 308 133 366 272 373 343 357 159 378 149 185 248 190 1 142 199)) 472 0.001)\n    (check-within (candidate (list 135 65 19 225) (list 183 135 138 142 282 141 349 236 57 333 258 353 152 396 152 191)) 415 0.001)\n    (check-within (candidate (list 199 371 283 70) (list 244 7 226 230 331 232 332 288 151 360 26 87 49 188 269 375)) 513 0.001)\n    (check-within (candidate (list 184 378) (list 105 239 221 343 276 359 86 84)) 599 0.001)\n    (check-within (candidate (list 297 229 142 8 47) (list 373 256 210 92 304 134 20 246 116 139 376 139 10 210 192 43 282 278 322 167)) 389 0.001)\n    (check-within (candidate (list 224 358 58 352) (list 177 274 306 295 142 353 44 111 325 328 394 168 300 15 252 389)) 626 0.001)\n    (check-within (candidate (list 318 321 264 259) (list 316 284 127 227 269 332 317 364 220 130 330 155 45 205 369 42)) 628 0.001)\n    (check-within (candidate (list 295 214 130) (list 316 395 280 122 27 224 40 210 99 366 55 183)) 525 0.001)\n    (check-within (candidate (list 81 38 313 121) (list 158 304 127 214 34 298 95 188 56 391 317 99 304 101 266 302)) 429 0.001)\n    (check-within (candidate (list 8 400 28 348 193) (list 72 391 149 264 370 183 365 102 201 348 341 176 338 186 97 156 47 125 61 202)) 504 0.001)\n    (check-within (candidate (list 0) (list 8 369 353 14)) 369 0.001)\n    (check-within (candidate (list 55 364 28 246) (list 396 357 37 400 239 327 5 387 70 389 323 213 322 111 179 19)) 485 0.001)\n    (check-within (candidate (list 288 219 356 146 282) (list 390 46 24 391 222 241 281 33 400 312 290 11 147 282 204 214 22 178 77 156)) 546 0.001)\n    (check-within (candidate (list 60 309 40 219 294) (list 267 94 238 338 279 48 164 371 302 110 247 392 83 107 389 46 92 273 131 136)) 466 0.001)\n    (check-within (candidate (list 357) (list 211 344 270 324)) 701 0.001)\n    (check-within (candidate (list 220 355 190 393) (list 158 27 113 335 382 172 285 373 104 177 247 321 197 22 347 136)) 572 0.001)\n    (check-within (candidate (list 67 105 290 26 343) (list 50 118 302 74 198 56 292 46 337 27 394 69 109 287 274 283 346 132 77 352)) 420 0.001)\n    (check-within (candidate (list 77 143 142 23) (list 336 190 105 87 102 254 295 243 400 254 96 303 350 191 331 70)) 423 0.001)\n    (check-within (candidate (list 319 58 155 360) (list 311 257 35 330 235 159 293 204 298 240 233 250 309 242 262 324)) 593 0.001)\n    (check-within (candidate (list 28 225 347) (list 176 57 60 81 161 66 13 294 145 239 295 210)) 413 0.001)\n    (check-within (candidate (list 291 337) (list 210 378 169 400 182 290 386 360)) 691 0.001)\n    (check-within (candidate (list 141 310) (list 396 56 241 289 21 254 196 165)) 537 0.001)\n    (check-within (candidate (list 204 390 104) (list 355 4 287 161 230 242 218 12 321 28 341 326)) 551 0.001)\n    (check-within (candidate (list 299 258) (list 20 44 341 172 118 185 369 249)) 627 0.001)\n    (check-within (candidate (list 107 141 178 211 62) (list 215 318 196 251 71 144 10 208 113 17 13 263 367 42 85 267 212 54 36 54)) 429 0.001)\n    (check-within (candidate (list 101 383 326 62) (list 304 256 281 240 180 387 318 368 331 267 14 91 93 147 156 394)) 582 0.001)\n    (check-within (candidate (list 221 62 187 104 266) (list 284 378 9 288 173 327 329 202 3 383 105 213 175 201 196 305 162 161 127 347)) 445 0.001)\n    (check-within (candidate (list 328 162 249 357 35) (list 77 275 231 298 273 257 88 339 261 147 229 392 156 63 90 97 219 353 66 91)) 480 0.001)\n    (check-within (candidate (list 7) (list 132 278 270 176)) 285 0.001)\n    (check-within (candidate (list 326) (list 269 211 137 244)) 595 0.001)\n    (check-within (candidate (list 310 44) (list 109 250 222 275 268 332 146 328)) 560 0.001)\n    (check-within (candidate (list 184 254 121 90 389) (list 124 365 400 167 109 207 369 37 174 287 41 114 388 158 125 283 119 254 210 399)) 503 0.001)\n    (check-within (candidate (list 94 171 66) (list 261 134 26 281 29 253 84 333 90 157 382 263)) 448 0.001)\n    (check-within (candidate (list 5 99 318 252 151) (list 264 235 250 347 376 57 73 7 178 45 220 148 159 379 89 73 159 172 228 39)) 400 0.001)\n    (check-within (candidate (list 303 52 2 118 305) (list 398 173 5 301 169 389 126 212 384 359 222 340 267 173 264 238 141 44 144 148)) 476 0.001)\n    (check-within (candidate (list 177) (list 164 277 289 197)) 466 0.001)\n    (check-within (candidate (list 297 259 318 30 213) (list 162 97 265 153 216 233 286 346 389 208 55 345 308 197 266 292 369 320 1 235)) 533 0.001)\n    (check-within (candidate (list 290) (list 333 282 72 362)) 652 0.001)\n    (check-within (candidate (list 372 189 344) (list 191 26 247 99 395 270 192 340 60 78 260 395)) 604 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3153_maxSum", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and a positive integer k.\n;; You can do the following operation on the array any number of times:\n;;  * Choose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation.\n;; You have to choose k elements from the final array and calculate the sum of their squares.\n;; Return the maximum sum of squares you can achieve.\n;; Since the answer can be very large, return it modulo 109 + 7.\n;; Example 1:\n;; Input: nums = [2,6,5,8], k = 2\n;; Output: 261\n;; Explanation: We can do the following operations on the array:\n;; - Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n;; - Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\n;; We can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.\n;; It can be shown that this is the maximum value we can get.\n;; Example 2:\n;; Input: nums = [4,5,4,7], k = 3\n;; Output: 90\n;; Explanation: We do not need to apply any operations.\n;; We can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.\n;; It can be shown that this is the maximum value we can get.\n;; Constraints:\n;;  * 1 <= k <= nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n(define (maxSum nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3153_maxSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxSum))\n    (check-within (candidate (list 2 6 5 8) 2) 261 0.001)\n    (check-within (candidate (list 4 5 4 7) 3) 90 0.001)\n    (check-within (candidate (list 32 85 61) 1) 15625 0.001)\n    (check-within (candidate (list 123) 1) 15129 0.001)\n    (check-within (candidate (list 96 66 60 58 32 17 63 21 30 44 15 8 98 93) 2) 32258 0.001)\n    (check-within (candidate (list 30 8 63 69 52 94 41 28 94 86 28 13 68 38 53 11 21 33) 2) 32258 0.001)\n    (check-within (candidate (list 2 38 15 2 73 100 47 14 25 58 40 64 23 9 53 38 91 75 9 2) 3) 48387 0.001)\n    (check-within (candidate (list 25 52 75 65) 4) 24051 0.001)\n    (check-within (candidate (list 96 36 72 61 13 25 5 33 9 51 9 78 40) 13) 53776 0.001)\n    (check-within (candidate (list 38 21 15 84 65 35 57 82 94 26 27 89 73 22 25 6 97 17) 4) 64516 0.001)\n    (check-within (candidate (list 18 72 52 56 7 21 55 68 98 31 35 49 100 49 64 20) 4) 62548 0.001)\n    (check-within (candidate (list 2 73 75) 3) 11250 0.001)\n    (check-within (candidate (list 73 37 41 84) 2) 27506 0.001)\n    (check-within (candidate (list 62 83 11 3 53) 3) 20459 0.001)\n    (check-within (candidate (list 53 59 71 38 5 15 98 86 9 8 35 54 65 77 3 68 11 5 41 18) 9) 95273 0.001)\n    (check-within (candidate (list 53 67 91 79 21 27 63 34 60 94 51) 4) 64516 0.001)\n    (check-within (candidate (list 41 15 6 31 40 97 11 45 81 91 91 62) 3) 48387 0.001)\n    (check-within (candidate (list 10 9) 2) 185 0.001)\n    (check-within (candidate (list 9 6 8 32 92 12 47 45 62 96 5 66 82 90 34 39 49 86 16) 13) 102770 0.001)\n    (check-within (candidate (list 1 19 29 30 68 13 80 16 71 32 8 76 41 24 16 2 30) 14) 53470 0.001)\n    (check-within (candidate (list 22 64 30 71 28 69 86 12 26 39 69 92) 2) 25154 0.001)\n    (check-within (candidate (list 91 26 29 38 97 40 1 18 15 3 43 37 9 55 4 46) 2) 32258 0.001)\n    (check-within (candidate (list 27 73) 1) 8281 0.001)\n    (check-within (candidate (list 12 33 29 75 94 48 25 21) 8) 34565 0.001)\n    (check-within (candidate (list 39 91 84 10 65 28 94 28 62 77 78 50 93 65 21 16 5 35 81) 14) 110106 0.001)\n    (check-within (candidate (list 14 45 76 33 35 53 67 19 6 31 33) 10) 40008 0.001)\n    (check-within (candidate (list 59 88 2 47 75) 2) 31258 0.001)\n    (check-within (candidate (list 96 77 77 33 5 86 90 21 84 73 86 45 88 35 93 14 63 25) 17) 121571 0.001)\n    (check-within (candidate (list 35 5 21 65 34 90 60 8 34 35 28 78 77) 1) 16129 0.001)\n    (check-within (candidate (list 14 10 19) 2) 1061 0.001)\n    (check-within (candidate (list 100 4 88 29 13 78 89 11 62 63 66 46 99 87 41 29 36 71 57) 18) 129739 0.001)\n    (check-within (candidate (list 86 52 100 68 30 40 49 28 61 30 3 80) 11) 69063 0.001)\n    (check-within (candidate (list 29 30 61 12 98 95) 2) 32258 0.001)\n    (check-within (candidate (list 23 13 35 41 29 57 84 67 70 96 55 85 15 72 23 52 1 11 62 1) 1) 16129 0.001)\n    (check-within (candidate (list 34 60 85 22 83) 2) 30290 0.001)\n    (check-within (candidate (list 65 26 44 70 79 65 46 18) 8) 44587 0.001)\n    (check-within (candidate (list 99 50 13 62 12 60 6 29) 6) 28071 0.001)\n    (check-within (candidate (list 73 66 75 44) 3) 23130 0.001)\n    (check-within (candidate (list 43 85 7 66 16 96) 1) 16129 0.001)\n    (check-within (candidate (list 45 5 3 84 81 54 21 37 99 60) 2) 32258 0.001)\n    (check-within (candidate (list 97 6 44 57 63 5) 1) 16129 0.001)\n    (check-within (candidate (list 65 43 82 46 34 42 65 67 8 67 3 83 87 71 98 31 15 22) 5) 80645 0.001)\n    (check-within (candidate (list 79 33 75 32 64 68 30 46 60 50 6 54 18 34 43 11 84 78 54 4) 1) 16129 0.001)\n    (check-within (candidate (list 17 9 3 23 33 99 94 15 93 17 39 55 13 26 22 44 13) 3) 48387 0.001)\n    (check-within (candidate (list 83 29 2 67 79 88 71 98 70) 4) 39220 0.001)\n    (check-within (candidate (list 60 81 60 88 37 38 10 42 84 70) 10) 67626 0.001)\n    (check-within (candidate (list 33 51 100 33 46) 3) 18739 0.001)\n    (check-within (candidate (list 29 4 67 44 74 62 41 86 91 11 26 58 59 48 46 41 26 68 4 81) 4) 64516 0.001)\n    (check-within (candidate (list 86 54 20 57 87 63 2 24 73 87 7 16 50 1 58) 7) 69543 0.001)\n    (check-within (candidate (list 91 2 16 77 2) 1) 9025 0.001)\n    (check-within (candidate (list 19 94) 2) 9349 0.001)\n    (check-within (candidate (list 14 67 79 58) 2) 22370 0.001)\n    (check-within (candidate (list 44 17 10 19 3 97 45 65 98 7 73 30 76 5 52 33 62) 4) 64516 0.001)\n    (check-within (candidate (list 8 80 93) 1) 8649 0.001)\n    (check-within (candidate (list 51 79 26 30 41 74 6 11 10 66 61 25 41 32 83 52 71 70) 18) 98085 0.001)\n    (check-within (candidate (list 15 58 38 69 71 43) 1) 16129 0.001)\n    (check-within (candidate (list 13 57 34 69 80 98 63 22 29 38 70 94 79 95 13 76 39 22) 5) 80645 0.001)\n    (check-within (candidate (list 98 88 17 85 57 97 42 15 25 71 31 72 76 89 28 47 73 85) 9) 114889 0.001)\n    (check-within (candidate (list 95 28 26 65 87 4 14 25 47 97 67 48 29 14 96 76 77 25) 9) 100409 0.001)\n    (check-within (candidate (list 37 16 76 9 88 44 71 61 95 32 63 10 29 33) 11) 72360 0.001)\n    (check-within (candidate (list 54 96 73 18 15 35 79 96 2 12 50 75 7 93 66 35 40 16) 18) 104436 0.001)\n    (check-within (candidate (list 66 84 85 7 45 34 61 91 83 13 87 89 51 52 65) 6) 88214 0.001)\n    (check-within (candidate (list 76 22 86 88 58 10 61 21 42) 2) 32258 0.001)\n    (check-within (candidate (list 16 52 8 99 68 73) 2) 31754 0.001)\n    (check-within (candidate (list 46 91 73 38 36 79 24 78 24 42) 8) 60911 0.001)\n    (check-within (candidate (list 5 100 85 52 5 28 79 30 9 67 87 50 17 29 99 57) 14) 91019 0.001)\n    (check-within (candidate (list 52 57 77 95 79 28 9 94 70 8 89 75 27 53 41 88 68 8 10 59) 5) 80645 0.001)\n    (check-within (candidate (list 66 64 52 90 73 84 2) 6) 39881 0.001)\n    (check-within (candidate (list 97 100) 1) 10201 0.001)\n    (check-within (candidate (list 27 85 57 44 16 55 77 77 24 62 72) 10) 66334 0.001)\n    (check-within (candidate (list 15 6 18 22 72 63 38 72 4 84 9 19 70 76 72 98 35 51 11 9) 20) 96344 0.001)\n    (check-within (candidate (list 10 67 54 100 6 93 91 4 59) 3) 48387 0.001)\n    (check-within (candidate (list 90 48 91 62 39 94 75 8 21 72 9 55 16 30 27 73 81 39 97) 8) 114080 0.001)\n    (check-within (candidate (list 43 58 51 40 39 92 36 57) 4) 27548 0.001)\n    (check-within (candidate (list 85 51 49 13 7 66 21 59 100 14 5 66) 8) 63152 0.001)\n    (check-within (candidate (list 54 52 36 17 34 100 81 82 16 46 26 73 77 55 43 53) 14) 91703 0.001)\n    (check-within (candidate (list 97 1 30 41 82 77 99 56 21 68 14 39 15 26 72) 1) 16129 0.001)\n    (check-within (candidate (list 17 10 28 78 68 68 29 44) 5) 33906 0.001)\n    (check-within (candidate (list 59 30 26 58 87 1 6 98 29 50 57 64 64) 10) 69321 0.001)\n    (check-within (candidate (list 77 23 43 94 74 41 26 39 83 57 85 49 83 34 63 37 42 55 20 18) 3) 48387 0.001)\n    (check-within (candidate (list 54 19 69 95 26 59 68 90 77 62 67 54 42 25 50 23 30 53 29 78) 12) 117170 0.001)\n    (check-within (candidate (list 54 17 16 30 35 63 34 38 26 41 33) 9) 22133 0.001)\n    (check-within (candidate (list 17 24 8 57 68 54 64 53) 6) 35987 0.001)\n    (check-within (candidate (list 11 90 27 72 22 24 54 64 68 94 1 20 45 5 63) 10) 69082 0.001)\n    (check-within (candidate (list 92 84 89 72 80 1 8) 3) 25042 0.001)\n    (check-within (candidate (list 29 14 37 61 7 10 53 95 47 81 1 59 18 25 3 53 43 64 33) 5) 56325 0.001)\n    (check-within (candidate (list 44 94 83 38 63 16 45 90 74 20) 1) 16129 0.001)\n    (check-within (candidate (list 13 65) 2) 5930 0.001)\n    (check-within (candidate (list 16 9 2 66) 2) 8285 0.001)\n    (check-within (candidate (list 30 68 85 13 49 96 59 61 39) 7) 54942 0.001)\n    (check-within (candidate (list 29 47 38 4) 2) 6178 0.001)\n    (check-within (candidate (list 49 30) 2) 4225 0.001)\n    (check-within (candidate (list 64 71 33 46 77 45 33 55 84 30 1 40 2 92 54 88) 8) 98815 0.001)\n    (check-within (candidate (list 55 72 75) 1) 16129 0.001)\n    (check-within (candidate (list 3 34 63 27 49 28 86) 3) 24067 0.001)\n    (check-within (candidate (list 99 29 94 21 54 43 20 79 27 40 90 76 55 27 40 46 76 70 34) 13) 118264 0.001)\n    (check-within (candidate (list 64 11 2 12 11 82 10 42 63 98 99 13) 1) 16129 0.001)\n    (check-within (candidate (list 23 25 45 88 88 93 91 25 34 83 9 85 18) 8) 67760 0.001)\n    (check-within (candidate (list 84 95 7 53 19 46 41 48 48 38) 7) 44981 0.001)\n    (check-within (candidate (list 92 88 27 34) 4) 24805 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3154_maximumTripletValue", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums.\n;; Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.\n;; The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].\n;; Example 1:\n;; Input: nums = [12,6,1,2,7]\n;; Output: 77\n;; Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\n;; It can be shown that there are no ordered triplets of indices with a value greater than 77.\n;; Example 2:\n;; Input: nums = [1,10,3,4,19]\n;; Output: 133\n;; Explanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\n;; It can be shown that there are no ordered triplets of indices with a value greater than 133.\n;; Example 3:\n;; Input: nums = [1,2,3]\n;; Output: 0\n;; Explanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.\n;; Constraints:\n;;  * 3 <= nums.length <= 100\n;;  * 1 <= nums[i] <= 106\n(define (maximumTripletValue nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3154_maximumTripletValue.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumTripletValue))\n    (check-within (candidate (list 12 6 1 2 7)) 77 0.001)\n    (check-within (candidate (list 1 10 3 4 19)) 133 0.001)\n    (check-within (candidate (list 1 2 3)) 0 0.001)\n    (check-within (candidate (list 2 3 1)) 0 0.001)\n    (check-within (candidate (list 5 7 8 4)) 0 0.001)\n    (check-within (candidate (list 1000000 1 1000000)) 999999000000 0.001)\n    (check-within (candidate (list 18 15 8 13 10 9 17 10 2 16 17)) 272 0.001)\n    (check-within (candidate (list 8 6 3 13 2 12 19 5 19 6 10 11 9)) 266 0.001)\n    (check-within (candidate (list 6 11 12 12 7 9 2 11 12 4 19 14 16 8 16)) 190 0.001)\n    (check-within (candidate (list 15 14 17 13 18 17 10 19 2 20 12 9)) 340 0.001)\n    (check-within (candidate (list 6 14 20 19 19 10 3 15 12 13 8 1 2 15 3)) 285 0.001)\n    (check-within (candidate (list 2 7 19 4 8 20)) 300 0.001)\n    (check-within (candidate (list 10 13 6 2)) 14 0.001)\n    (check-within (candidate (list 1 19 1 3 18 10 16 9 3 17 8 9)) 324 0.001)\n    (check-within (candidate (list 16 2 10 20 16 2 13 8 19)) 342 0.001)\n    (check-within (candidate (list 19 11 12 4 17 1 7 20 13 10 14 20 11 19 3)) 360 0.001)\n    (check-within (candidate (list 16 15 12 5 4 12 15 17 5 18 6 16 1 17 4)) 289 0.001)\n    (check-within (candidate (list 8 10 17 11 2 8 13)) 195 0.001)\n    (check-within (candidate (list 13 4 3 19 16 14 17 6 20 6 16 4)) 260 0.001)\n    (check-within (candidate (list 1 8 9 18 4 10 3 13 9)) 195 0.001)\n    (check-within (candidate (list 10 10 5 19 2)) 95 0.001)\n    (check-within (candidate (list 15 3 3 18 19 13 7 5 18 1 8 5)) 252 0.001)\n    (check-within (candidate (list 10 20 10)) 0 0.001)\n    (check-within (candidate (list 14 9 4 20 9)) 200 0.001)\n    (check-within (candidate (list 12 20 5 2 13 17 16 1 5 8 18 15 12)) 342 0.001)\n    (check-within (candidate (list 7 1 17 17 4 20 14 20)) 260 0.001)\n    (check-within (candidate (list 16 19 8 8 5 18 12 16 8 14 14 7 19)) 266 0.001)\n    (check-within (candidate (list 17 9 13 7 3 5)) 104 0.001)\n    (check-within (candidate (list 15 12 2 14 15 18 15 20 14 5 14 14 11 13 7)) 260 0.001)\n    (check-within (candidate (list 17 20 17 13 5 12 8 12 14 10 14 20)) 300 0.001)\n    (check-within (candidate (list 1 19 10)) 0 0.001)\n    (check-within (candidate (list 11 16 10 15 10 5 7 3)) 90 0.001)\n    (check-within (candidate (list 5 14 19 12 2 5 18 3 20 12 1 11)) 340 0.001)\n    (check-within (candidate (list 10 8 12 14)) 28 0.001)\n    (check-within (candidate (list 2 17 18 16 14 20 11 3 18 5 20 6 7)) 340 0.001)\n    (check-within (candidate (list 19 12 3 19 2 18 3 12 9)) 306 0.001)\n    (check-within (candidate (list 12 9 11 2 11 3 11 17 13 19)) 190 0.001)\n    (check-within (candidate (list 8 13 9 8 7 18 20)) 120 0.001)\n    (check-within (candidate (list 20 8 12 1 7 8 3 3 6)) 152 0.001)\n    (check-within (candidate (list 8 2 16 6 14 14 13 2 11 5 2 12 15 3 3)) 210 0.001)\n    (check-within (candidate (list 19 9 9 9 5)) 90 0.001)\n    (check-within (candidate (list 19 10 5 13 6 9 5 15 19)) 266 0.001)\n    (check-within (candidate (list 14 18 17 8 2 8 14)) 224 0.001)\n    (check-within (candidate (list 11 5 17 13 5 8 8 19 17 1)) 228 0.001)\n    (check-within (candidate (list 18 12 18 14 17 19)) 114 0.001)\n    (check-within (candidate (list 18 17 8 8 18 9)) 180 0.001)\n    (check-within (candidate (list 15 3 2 10 11 10 13 18)) 234 0.001)\n    (check-within (candidate (list 17 17 5 10 19 1 16 3 1 19)) 342 0.001)\n    (check-within (candidate (list 1 18 4 20 16)) 280 0.001)\n    (check-within (candidate (list 6 20 4 4 2 19 14 10 9 7 20 5 8)) 360 0.001)\n    (check-within (candidate (list 5 14 15 18 2 9 15 13 11 16 12 20)) 320 0.001)\n    (check-within (candidate (list 7 19 17)) 0 0.001)\n    (check-within (candidate (list 5 7 14 18 13 11 15 20 8 11 12 4 17 2 16)) 288 0.001)\n    (check-within (candidate (list 4 12 7 2 8 6 9 5 4 1 8)) 90 0.001)\n    (check-within (candidate (list 11 17 2 18 5)) 270 0.001)\n    (check-within (candidate (list 19 13 2 2 19)) 323 0.001)\n    (check-within (candidate (list 14 11 7 6 2 20 16 14 4 12 1 9 16 7 10)) 304 0.001)\n    (check-within (candidate (list 8 15 6 16 16 9 6 14 4)) 144 0.001)\n    (check-within (candidate (list 16 19 1 7 18 6 18 5 19 18 19)) 342 0.001)\n    (check-within (candidate (list 16 14 11 2 17 9 10)) 238 0.001)\n    (check-within (candidate (list 3 4 18 2 20 1 1 16 15 8 7 14 19 6)) 361 0.001)\n    (check-within (candidate (list 12 20 14 18 11 16 16 9 12 5 14 17)) 255 0.001)\n    (check-within (candidate (list 12 19 2 9 6)) 153 0.001)\n    (check-within (candidate (list 17 19 14 7 10 18)) 216 0.001)\n    (check-within (candidate (list 3 4 19 10 16 13 6 20)) 260 0.001)\n    (check-within (candidate (list 11 6 8 9)) 45 0.001)\n    (check-within (candidate (list 7 12 9 19 10 18 16 2 1 3 7 9 7 7)) 162 0.001)\n    (check-within (candidate (list 20 9 20 7 3 7 19)) 323 0.001)\n    (check-within (candidate (list 10 11 3 3 3 2 9 8)) 81 0.001)\n    (check-within (candidate (list 4 20 15 1 17 2 2 4 10 15 2 8 16 6)) 323 0.001)\n    (check-within (candidate (list 15 10 1 18 18 16 7 13 9 11)) 252 0.001)\n    (check-within (candidate (list 10 6 17 11 15 15 18)) 108 0.001)\n    (check-within (candidate (list 3 6 18)) 0 0.001)\n    (check-within (candidate (list 4 7 20)) 0 0.001)\n    (check-within (candidate (list 16 12 5)) 20 0.001)\n    (check-within (candidate (list 4 17 15 12 2 16 16 13 6 20 14 17 18 16)) 300 0.001)\n    (check-within (candidate (list 1 7 18 3 1 11 7 17)) 289 0.001)\n    (check-within (candidate (list 18 16 10 2)) 20 0.001)\n    (check-within (candidate (list 3 10 18 10 7 8)) 88 0.001)\n    (check-within (candidate (list 8 6 20 20 4 12 14 7 13 16 12 15 12)) 256 0.001)\n    (check-within (candidate (list 5 19 11 18 19 14 8 11 4 10)) 152 0.001)\n    (check-within (candidate (list 17 1 16)) 256 0.001)\n    (check-within (candidate (list 20 8 17 14 15 2 7 9 1 10 10 4 19 2 1)) 361 0.001)\n    (check-within (candidate (list 9 16 16)) 0 0.001)\n    (check-within (candidate (list 2 16 2 19 5 20 2 20 6 6)) 360 0.001)\n    (check-within (candidate (list 18 3 6 17 4 20 14 6 13 9 5 11)) 300 0.001)\n    (check-within (candidate (list 12 2 19 15 4 3 18 6 11 9 9 6 15)) 288 0.001)\n    (check-within (candidate (list 10 15 10 13 7 18 18 3 13 15 20 4 6 15)) 300 0.001)\n    (check-within (candidate (list 10 15 4 19 6 17 7 10 4 12 14 16 9 14)) 240 0.001)\n    (check-within (candidate (list 17 6 3 8 13)) 182 0.001)\n    (check-within (candidate (list 6 18 8 8 16 14 7 18)) 198 0.001)\n    (check-within (candidate (list 7 7 2 19 16 11 3 15 3 15 16 17)) 272 0.001)\n    (check-within (candidate (list 9 3 3 12 9 12 5 7 6 2 9 9 14 9 5)) 140 0.001)\n    (check-within (candidate (list 19 14 15 1 20 10 20 4 10 20 15 15 2 7)) 360 0.001)\n    (check-within (candidate (list 17 4 10 16 8 20 4 9 11 15 2 7)) 260 0.001)\n    (check-within (candidate (list 3 8 17 10 10 20 20 8 14 20 1 10 1)) 240 0.001)\n    (check-within (candidate (list 3 4 11 18 10 19 9 11 14 11 18 15 17 19 3)) 190 0.001)\n    (check-within (candidate (list 18 10 5 16 13 1 19 10 17 14 14 20)) 340 0.001)\n    (check-within (candidate (list 18 3 16 14 15 9 13 2 3)) 240 0.001)\n    (check-within (candidate (list 2 6 19 10 19 14 18 8 3 2)) 171 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3163_sumCounts", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums.\n;; The distinct count of a subarray of nums is defined as:\n;;  * Let nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j].\n;; Return the sum of the squares of distinct counts of all subarrays of nums.\n;; A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [1,2,1]\n;; Output: 15\n;; Explanation: Six possible subarrays are:\n;; [1]: 1 distinct value\n;; [2]: 1 distinct value\n;; [1]: 1 distinct value\n;; [1,2]: 2 distinct values\n;; [2,1]: 2 distinct values\n;; [1,2,1]: 2 distinct values\n;; The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n;; Example 2:\n;; Input: nums = [1,1]\n;; Output: 3\n;; Explanation: Three possible subarrays are:\n;; [1]: 1 distinct value\n;; [1]: 1 distinct value\n;; [1,1]: 1 distinct value\n;; The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n;; Constraints:\n;;  * 1 <= nums.length <= 100\n;;  * 1 <= nums[i] <= 100\n(define (sumCounts nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3163_sumCounts.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumCounts))\n    (check-within (candidate (list 1 2 1)) 15 0.001)\n    (check-within (candidate (list 1 1)) 3 0.001)\n    (check-within (candidate (list 2 2 5 5)) 22 0.001)\n    (check-within (candidate (list 5 2 4 2 1 3 2 4 3 1)) 578 0.001)\n    (check-within (candidate (list 2 3 2 1 2 5 3 4 5 2)) 629 0.001)\n    (check-within (candidate (list 5 1 5 2 3 5 1 5 1)) 385 0.001)\n    (check-within (candidate (list 4 5 4 3 4 2)) 120 0.001)\n    (check-within (candidate (list 2)) 1 0.001)\n    (check-within (candidate (list 3 4 2 5 2 4 1 2 2 5)) 535 0.001)\n    (check-within (candidate (list 4 4 2 4 1)) 57 0.001)\n    (check-within (candidate (list 2 2 5)) 12 0.001)\n    (check-within (candidate (list 4 5 1 2 2 1 3 3)) 266 0.001)\n    (check-within (candidate (list 3 1 5 5 2 3 2 2 1)) 334 0.001)\n    (check-within (candidate (list 2 5 2 5 3 2 5 2)) 205 0.001)\n    (check-within (candidate (list 5 4 1 4 5 2 4)) 203 0.001)\n    (check-within (candidate (list 1 3 3 4 3 1 2 1)) 253 0.001)\n    (check-within (candidate (list 4)) 1 0.001)\n    (check-within (candidate (list 1 4 2 1 5 4 3 1 4)) 507 0.001)\n    (check-within (candidate (list 2 4 5 3 2 5 1 5 4 4)) 626 0.001)\n    (check-within (candidate (list 3 4 1 4 5 2 2)) 220 0.001)\n    (check-within (candidate (list 3 5 1 1 3)) 62 0.001)\n    (check-within (candidate (list 4 3 2 5 3)) 89 0.001)\n    (check-within (candidate (list 2 5)) 6 0.001)\n    (check-within (candidate (list 1 5 1 4 5)) 70 0.001)\n    (check-within (candidate (list 5 1)) 6 0.001)\n    (check-within (candidate (list 4 5 4 3 3 5 3)) 138 0.001)\n    (check-within (candidate (list 5 4 3)) 20 0.001)\n    (check-within (candidate (list 5 5 3 3 4 5 4 5 5)) 234 0.001)\n    (check-within (candidate (list 3 1 5 5 3 4 5 5 1 4)) 456 0.001)\n    (check-within (candidate (list 4 2 3 1 1)) 81 0.001)\n    (check-within (candidate (list 4 5 3 1 2 5 5 3 5)) 434 0.001)\n    (check-within (candidate (list 3 2 1 2 5 2 4 5 1 5)) 531 0.001)\n    (check-within (candidate (list 1 3 1 4 4)) 62 0.001)\n    (check-within (candidate (list 5 1 2 1 2 1 2 3 1)) 257 0.001)\n    (check-within (candidate (list 2 4)) 6 0.001)\n    (check-within (candidate (list 4 5 4 5)) 28 0.001)\n    (check-within (candidate (list 3 1 5 5 5 4 3 3 2)) 334 0.001)\n    (check-within (candidate (list 3 2 5 2 1 5 3)) 203 0.001)\n    (check-within (candidate (list 4 4 2 5 5 4 2 2 1)) 294 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 1 1 3 3 3 4 4)) 96 0.001)\n    (check-within (candidate (list 3 2 2 3 4)) 57 0.001)\n    (check-within (candidate (list 1 5 3 2 4 4)) 161 0.001)\n    (check-within (candidate (list 5 4 1 1 3)) 69 0.001)\n    (check-within (candidate (list 4 3 3 5 3 4 5 3 3 1)) 376 0.001)\n    (check-within (candidate (list 2 3 4 1 5 1 3 3 4)) 432 0.001)\n    (check-within (candidate (list 5 1 4 2 1 1)) 129 0.001)\n    (check-within (candidate (list 5 4 4 1)) 30 0.001)\n    (check-within (candidate (list 1 5 1 3 2 1)) 139 0.001)\n    (check-within (candidate (list 5 3)) 6 0.001)\n    (check-within (candidate (list 4 1 4 3)) 38 0.001)\n    (check-within (candidate (list 1 5 4 3 4 2 4 5 5 4)) 513 0.001)\n    (check-within (candidate (list 4 2 3 4 3 2 5 4 4)) 378 0.001)\n    (check-within (candidate (list 2 3 3 2 1 5 2 2)) 262 0.001)\n    (check-within (candidate (list 2 1 4 2 4 1 4 3)) 243 0.001)\n    (check-within (candidate (list 1 4 4 1 3)) 57 0.001)\n    (check-within (candidate (list 2 3 2 1)) 38 0.001)\n    (check-within (candidate (list 1 4 2 1)) 43 0.001)\n    (check-within (candidate (list 2 4 3 2 5 1)) 169 0.001)\n    (check-within (candidate (list 2 5 3 2 1 3 1 3 2)) 348 0.001)\n    (check-within (candidate (list 4 1)) 6 0.001)\n    (check-within (candidate (list 4 3 1 4 3 4 3 4 1)) 263 0.001)\n    (check-within (candidate (list 5 1 1 1 4 3)) 89 0.001)\n    (check-within (candidate (list 4 5)) 6 0.001)\n    (check-within (candidate (list 5 2 2 3 1 2 5 3)) 289 0.001)\n    (check-within (candidate (list 3 2 4)) 20 0.001)\n    (check-within (candidate (list 5 3 5 2 3 2)) 106 0.001)\n    (check-within (candidate (list 3 2 1)) 20 0.001)\n    (check-within (candidate (list 4 4 2 4 3)) 57 0.001)\n    (check-within (candidate (list 1 4 4)) 12 0.001)\n    (check-within (candidate (list 1 4 4 3 1 2 1 4 3)) 387 0.001)\n    (check-within (candidate (list 1 5 4 2 5 5 5 3)) 249 0.001)\n    (check-within (candidate (list 2 1 5 3)) 50 0.001)\n    (check-within (candidate (list 2 3 5 1 5 2 3 2 3 4)) 533 0.001)\n    (check-within (candidate (list 5 3 4 4 3 5 4 5)) 202 0.001)\n    (check-within (candidate (list 4 4 2 2 4 1)) 80 0.001)\n    (check-within (candidate (list 2 3)) 6 0.001)\n    (check-within (candidate (list 4 2 3 2)) 38 0.001)\n    (check-within (candidate (list 1 2 2)) 12 0.001)\n    (check-within (candidate (list 4 1 5 1 5 4 5 1)) 205 0.001)\n    (check-within (candidate (list 4 5 3 1)) 50 0.001)\n    (check-within (candidate (list 4 2 3 4 2 4 3 3 2)) 275 0.001)\n    (check-within (candidate (list 4 3)) 6 0.001)\n    (check-within (candidate (list 1 3 5 4 4 4)) 113 0.001)\n    (check-within (candidate (list 1 2 4 2 1 2 2 4 1 3)) 391 0.001)\n    (check-within (candidate (list 4 2 5 3 2)) 89 0.001)\n    (check-within (candidate (list 3 4 5 3 2 5)) 144 0.001)\n    (check-within (candidate (list 5 4 5)) 15 0.001)\n    (check-within (candidate (list 2 4 5 1)) 50 0.001)\n    (check-within (candidate (list 5 4 1 4 2 1 5)) 203 0.001)\n    (check-within (candidate (list 2 3 3 2 2 3 1)) 110 0.001)\n    (check-within (candidate (list 1 4 2 5)) 50 0.001)\n    (check-within (candidate (list 3)) 1 0.001)\n    (check-within (candidate (list 5)) 1 0.001)\n    (check-within (candidate (list 1 3 5 3 2 1 1 4 3)) 441 0.001)\n    (check-within (candidate (list 1 5 2 2 3 3 3)) 140 0.001)\n    (check-within (candidate (list 1 2 1 4 5 5 4 1 1 1)) 407 0.001)\n    (check-within (candidate (list 2 2 1 1 1 2 5 4 5)) 296 0.001)\n    (check-within (candidate (list 3 2 3)) 15 0.001)\n    (check-within (candidate (list 2 1 5 4 3 3 2 1 5 5)) 652 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3164_lastVisitedIntegers", "language": "rkt", "prompt": "#lang racket\n;; Given a 0-indexed array of strings words where words[i] is either a positive integer represented as a string or the string \"prev\".\n;; Start iterating from the beginning of the array; for every \"prev\" string seen in words, find the last visited integer in words which is defined as follows:\n;;  * Let k be the number of consecutive \"prev\" strings seen so far (containing the current string). Let nums be the 0-indexed array of integers seen so far and nums_reverse be the reverse of nums, then the integer at (k - 1)th index of nums_reverse will be the last visited integer for this \"prev\".\n;;  * If k is greater than the total visited integers, then the last visited integer will be -1.\n;; Return an integer array containing the last visited integers.\n;; Example 1:\n;; Input: words = [\"1\",\"2\",\"prev\",\"prev\",\"prev\"]\n;; Output: [2,1,-1]\n;; Explanation:\n;; For \"prev\" at index = 2, last visited integer will be 2 as here the number of consecutive \"prev\" strings is 1, and in the array reverse_nums, 2 will be the first element.\n;; For \"prev\" at index = 3, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\n;; For \"prev\" at index = 4, last visited integer will be -1 as there are a total of three consecutive \"prev\" strings including this \"prev\" which are visited, but the total number of integers visited is two.\n;; Example 2:\n;; Input: words = [\"1\",\"prev\",\"2\",\"prev\",\"prev\"]\n;; Output: [1,2,1]\n;; Explanation:\n;; For \"prev\" at index = 1, last visited integer will be 1.\n;; For \"prev\" at index = 3, last visited integer will be 2.\n;; For \"prev\" at index = 4, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\n;; Constraints:\n;;  * 1 <= words.length <= 100\n;;  * words[i] == \"prev\" or 1 <= int(words[i]) <= 100\n(define (lastVisitedIntegers words)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3164_lastVisitedIntegers.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lastVisitedIntegers))\n    (check-within (candidate (list \"1\" \"2\" \"prev\" \"prev\" \"prev\")) (list 2 1 -1) 0.001)\n    (check-within (candidate (list \"1\" \"prev\" \"2\" \"prev\" \"prev\")) (list 1 2 1) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"27\")) (list -1 -1 -1) 0.001)\n    (check-within (candidate (list \"17\" \"42\")) (list ) 0.001)\n    (check-within (candidate (list \"prev\")) (list -1) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"52\" \"prev\")) (list -1 -1 -1 52) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"68\" \"prev\" \"prev\" \"53\" \"40\" \"23\" \"prev\")) (list -1 -1 68 -1 23) 0.001)\n    (check-within (candidate (list \"99\" \"23\" \"prev\")) (list 23) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"58\" \"99\" \"prev\" \"10\" \"prev\")) (list -1 -1 -1 99 10) 0.001)\n    (check-within (candidate (list \"prev\" \"51\" \"prev\" \"prev\")) (list -1 51 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"46\" \"9\" \"prev\")) (list -1 9) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"prev\" \"prev\" \"26\")) (list -1 -1 -1 -1 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"21\" \"prev\" \"76\" \"82\" \"prev\" \"96\" \"prev\" \"57\" \"prev\")) (list -1 21 82 96 57) 0.001)\n    (check-within (candidate (list \"52\" \"4\" \"prev\" \"prev\" \"prev\" \"69\")) (list 4 52 -1) 0.001)\n    (check-within (candidate (list \"24\" \"prev\")) (list 24) 0.001)\n    (check-within (candidate (list \"46\" \"prev\" \"78\" \"prev\" \"83\" \"21\" \"prev\" \"94\" \"50\")) (list 46 78 21) 0.001)\n    (check-within (candidate (list \"14\" \"66\" \"prev\" \"prev\" \"46\" \"prev\")) (list 66 14 46) 0.001)\n    (check-within (candidate (list \"35\" \"90\")) (list ) 0.001)\n    (check-within (candidate (list \"prev\" \"9\" \"prev\" \"8\" \"prev\")) (list -1 9 8) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"88\" \"71\" \"47\" \"65\" \"24\" \"39\")) (list -1 -1) 0.001)\n    (check-within (candidate (list \"45\" \"73\" \"78\" \"2\" \"54\" \"prev\" \"85\" \"62\" \"prev\")) (list 54 62) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"80\" \"9\" \"prev\")) (list -1 -1 9) 0.001)\n    (check-within (candidate (list \"79\" \"19\" \"prev\" \"prev\" \"prev\" \"67\" \"prev\" \"16\" \"2\")) (list 19 79 -1 67) 0.001)\n    (check-within (candidate (list \"94\" \"prev\" \"prev\" \"prev\" \"prev\" \"prev\" \"prev\")) (list 94 -1 -1 -1 -1 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"82\" \"prev\")) (list -1 -1 -1 82) 0.001)\n    (check-within (candidate (list \"94\" \"14\" \"81\" \"43\" \"prev\" \"43\" \"prev\")) (list 43 43) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"94\" \"56\" \"prev\" \"32\" \"prev\" \"prev\" \"prev\")) (list -1 -1 56 32 56 94) 0.001)\n    (check-within (candidate (list \"93\")) (list ) 0.001)\n    (check-within (candidate (list \"46\" \"91\" \"3\" \"40\" \"31\" \"prev\")) (list 31) 0.001)\n    (check-within (candidate (list \"41\" \"prev\" \"17\" \"58\" \"78\")) (list 41) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"82\" \"41\" \"96\" \"89\" \"71\")) (list -1 -1) 0.001)\n    (check-within (candidate (list \"4\" \"prev\" \"50\" \"prev\" \"prev\")) (list 4 50 4) 0.001)\n    (check-within (candidate (list \"59\" \"76\" \"prev\" \"29\" \"prev\")) (list 76 29) 0.001)\n    (check-within (candidate (list \"prev\" \"62\")) (list -1) 0.001)\n    (check-within (candidate (list \"6\" \"prev\")) (list 6) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"prev\" \"prev\")) (list -1 -1 -1 -1 -1) 0.001)\n    (check-within (candidate (list \"28\" \"5\" \"35\" \"prev\" \"41\" \"27\" \"70\" \"65\" \"84\")) (list 35) 0.001)\n    (check-within (candidate (list \"94\" \"45\" \"prev\" \"61\")) (list 45) 0.001)\n    (check-within (candidate (list \"prev\" \"34\" \"prev\" \"prev\" \"prev\" \"prev\" \"21\" \"prev\")) (list -1 34 -1 -1 -1 21) 0.001)\n    (check-within (candidate (list \"prev\" \"12\" \"100\" \"33\" \"prev\" \"85\" \"93\")) (list -1 33) 0.001)\n    (check-within (candidate (list \"26\")) (list ) 0.001)\n    (check-within (candidate (list \"27\" \"prev\" \"prev\" \"prev\")) (list 27 -1 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"22\" \"33\" \"prev\" \"prev\" \"prev\")) (list -1 -1 33 22 -1) 0.001)\n    (check-within (candidate (list \"30\" \"prev\" \"87\" \"prev\" \"19\" \"prev\" \"8\" \"prev\" \"81\")) (list 30 87 19 8) 0.001)\n    (check-within (candidate (list \"35\" \"prev\" \"47\" \"82\" \"86\" \"84\" \"prev\" \"76\" \"prev\")) (list 35 84 76) 0.001)\n    (check-within (candidate (list \"prev\" \"87\")) (list -1) 0.001)\n    (check-within (candidate (list \"prev\" \"69\" \"78\" \"prev\" \"prev\" \"16\")) (list -1 78 69) 0.001)\n    (check-within (candidate (list \"22\" \"97\" \"prev\" \"2\")) (list 97) 0.001)\n    (check-within (candidate (list \"72\" \"74\")) (list ) 0.001)\n    (check-within (candidate (list \"84\" \"prev\" \"prev\" \"21\")) (list 84 -1) 0.001)\n    (check-within (candidate (list \"64\" \"24\")) (list ) 0.001)\n    (check-within (candidate (list \"17\" \"prev\" \"59\" \"prev\" \"51\" \"11\" \"prev\" \"prev\")) (list 17 59 11 51) 0.001)\n    (check-within (candidate (list \"57\" \"prev\" \"27\" \"30\" \"prev\" \"prev\" \"75\")) (list 57 30 27) 0.001)\n    (check-within (candidate (list \"65\" \"prev\" \"prev\")) (list 65 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"53\" \"76\" \"54\" \"94\" \"77\")) (list -1) 0.001)\n    (check-within (candidate (list \"89\" \"51\" \"prev\" \"prev\" \"12\" \"prev\" \"prev\")) (list 51 89 12 51) 0.001)\n    (check-within (candidate (list \"prev\" \"28\" \"25\" \"prev\" \"prev\" \"prev\")) (list -1 25 28 -1) 0.001)\n    (check-within (candidate (list \"51\" \"prev\" \"prev\" \"76\")) (list 51 -1) 0.001)\n    (check-within (candidate (list \"2\" \"24\" \"63\" \"prev\" \"43\" \"19\" \"prev\")) (list 63 19) 0.001)\n    (check-within (candidate (list \"prev\" \"38\" \"1\")) (list -1) 0.001)\n    (check-within (candidate (list \"56\" \"75\" \"prev\" \"prev\" \"94\")) (list 75 56) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\")) (list -1 -1 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"37\" \"25\" \"31\" \"prev\" \"prev\" \"42\")) (list -1 31 25) 0.001)\n    (check-within (candidate (list \"73\" \"30\" \"prev\" \"20\" \"prev\" \"prev\")) (list 30 20 30) 0.001)\n    (check-within (candidate (list \"85\" \"prev\" \"prev\" \"78\" \"prev\" \"100\" \"8\" \"17\" \"prev\")) (list 85 -1 78 17) 0.001)\n    (check-within (candidate (list \"prev\" \"55\" \"prev\" \"87\" \"19\" \"prev\" \"13\" \"prev\" \"prev\")) (list -1 55 19 13 19) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"5\" \"prev\" \"prev\" \"prev\" \"80\" \"17\")) (list -1 -1 5 -1 -1) 0.001)\n    (check-within (candidate (list \"100\" \"3\" \"prev\" \"prev\" \"93\" \"35\" \"prev\" \"prev\")) (list 3 100 35 93) 0.001)\n    (check-within (candidate (list \"75\" \"7\")) (list ) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"prev\" \"prev\" \"prev\" \"71\" \"prev\" \"27\")) (list -1 -1 -1 -1 -1 -1 71) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"91\" \"44\" \"prev\")) (list -1 -1 -1 44) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\")) (list -1 -1) 0.001)\n    (check-within (candidate (list \"11\" \"prev\" \"87\" \"prev\" \"prev\" \"94\" \"prev\" \"68\")) (list 11 87 11 94) 0.001)\n    (check-within (candidate (list \"78\")) (list ) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"73\" \"prev\" \"prev\" \"27\" \"prev\")) (list -1 -1 73 -1 27) 0.001)\n    (check-within (candidate (list \"prev\" \"70\" \"prev\" \"prev\")) (list -1 70 -1) 0.001)\n    (check-within (candidate (list \"68\" \"prev\" \"38\" \"prev\" \"prev\")) (list 68 38 68) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"36\")) (list -1 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"36\" \"prev\")) (list -1 -1 36) 0.001)\n    (check-within (candidate (list \"18\" \"58\" \"41\" \"prev\" \"prev\")) (list 41 58) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"35\")) (list -1 -1) 0.001)\n    (check-within (candidate (list \"prev\" \"72\" \"prev\" \"96\" \"9\" \"50\" \"prev\" \"52\")) (list -1 72 50) 0.001)\n    (check-within (candidate (list \"92\" \"95\" \"47\" \"48\" \"prev\" \"50\" \"34\" \"prev\" \"prev\" \"46\")) (list 48 34 50) 0.001)\n    (check-within (candidate (list \"36\" \"88\" \"15\" \"99\" \"48\")) (list ) 0.001)\n    (check-within (candidate (list \"93\" \"prev\" \"2\" \"58\" \"83\" \"90\" \"prev\")) (list 93 90) 0.001)\n    (check-within (candidate (list \"prev\" \"68\" \"prev\")) (list -1 68) 0.001)\n    (check-within (candidate (list \"prev\" \"56\" \"prev\" \"prev\" \"36\" \"prev\")) (list -1 56 -1 36) 0.001)\n    (check-within (candidate (list \"53\" \"prev\")) (list 53) 0.001)\n    (check-within (candidate (list \"5\" \"29\" \"94\" \"3\" \"48\" \"prev\" \"59\" \"90\" \"prev\" \"69\")) (list 48 90) 0.001)\n    (check-within (candidate (list \"89\" \"prev\" \"prev\" \"75\" \"prev\" \"98\" \"80\" \"prev\" \"68\" \"33\")) (list 89 -1 75 80) 0.001)\n    (check-within (candidate (list \"prev\" \"93\" \"prev\" \"74\" \"33\")) (list -1 93) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"10\" \"25\" \"prev\" \"54\" \"prev\" \"prev\" \"prev\" \"76\")) (list -1 -1 25 54 25 10) 0.001)\n    (check-within (candidate (list \"9\" \"prev\" \"14\" \"prev\")) (list 9 14) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"18\" \"66\" \"92\" \"prev\" \"87\" \"85\" \"25\")) (list -1 -1 -1 92) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"prev\" \"16\" \"prev\")) (list -1 -1 -1 16) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"99\" \"prev\" \"82\" \"prev\" \"prev\")) (list -1 -1 99 82 99) 0.001)\n    (check-within (candidate (list \"prev\" \"5\" \"90\" \"71\" \"prev\" \"prev\" \"61\")) (list -1 71 90) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"71\" \"54\" \"prev\" \"20\" \"65\" \"prev\" \"prev\")) (list -1 -1 54 65 20) 0.001)\n    (check-within (candidate (list \"prev\" \"85\" \"prev\" \"93\" \"prev\" \"98\" \"prev\")) (list -1 85 93 98) 0.001)\n    (check-within (candidate (list \"prev\" \"prev\" \"34\" \"prev\")) (list -1 -1 34) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3165_findIndices", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference.\n;; Your task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:\n;;  * abs(i - j) >= indexDifference, and\n;;  * abs(nums[i] - nums[j]) >= valueDifference\n;; Return an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them.\n;; Note: i and j may be equal.\n;; Example 1:\n;; Input: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\n;; Output: [0,3]\n;; Explanation: In this example, i = 0 and j = 3 can be selected.\n;; abs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\n;; Hence, a valid answer is [0,3].\n;; [3,0] is also a valid answer.\n;; Example 2:\n;; Input: nums = [2,1], indexDifference = 0, valueDifference = 0\n;; Output: [0,0]\n;; Explanation: In this example, i = 0 and j = 0 can be selected.\n;; abs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\n;; Hence, a valid answer is [0,0].\n;; Other valid answers are [0,1], [1,0], and [1,1].\n;; Example 3:\n;; Input: nums = [1,2,3], indexDifference = 2, valueDifference = 4\n;; Output: [-1,-1]\n;; Explanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\n;; Hence, [-1,-1] is returned.\n;; Constraints:\n;;  * 1 <= n == nums.length <= 100\n;;  * 0 <= nums[i] <= 50\n;;  * 0 <= indexDifference <= 100\n;;  * 0 <= valueDifference <= 50\n(define (findIndices nums indexDifference valueDifference)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3165_findIndices.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findIndices))\n    (check-within (candidate (list 5 1 4 1) 2 4) (list 0 3) 0.001)\n    (check-within (candidate (list 2 1) 0 0) (list 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) 2 4) (list -1 -1) 0.001)\n    (check-within (candidate (list 0) 0 0) (list 0 0) 0.001)\n    (check-within (candidate (list 3) 0 0) (list 0 0) 0.001)\n    (check-within (candidate (list 3) 1 1) (list -1 -1) 0.001)\n    (check-within (candidate (list 4) 1 0) (list -1 -1) 0.001)\n    (check-within (candidate (list 5) 1 3) (list -1 -1) 0.001)\n    (check-within (candidate (list 7) 1 7) (list -1 -1) 0.001)\n    (check-within (candidate (list 8) 0 2) (list -1 -1) 0.001)\n    (check-within (candidate (list 8) 1 7) (list -1 -1) 0.001)\n    (check-within (candidate (list 10) 0 9) (list -1 -1) 0.001)\n    (check-within (candidate (list 11) 1 0) (list -1 -1) 0.001)\n    (check-within (candidate (list 18) 1 4) (list -1 -1) 0.001)\n    (check-within (candidate (list 38) 1 34) (list -1 -1) 0.001)\n    (check-within (candidate (list 40) 1 2) (list -1 -1) 0.001)\n    (check-within (candidate (list 5 10) 1 2) (list 0 1) 0.001)\n    (check-within (candidate (list 5 48) 0 29) (list 0 1) 0.001)\n    (check-within (candidate (list 6 3) 1 2) (list 0 1) 0.001)\n    (check-within (candidate (list 7 6) 1 0) (list 0 1) 0.001)\n    (check-within (candidate (list 8 8) 1 1) (list -1 -1) 0.001)\n    (check-within (candidate (list 17 31) 1 9) (list 0 1) 0.001)\n    (check-within (candidate (list 21 22) 1 21) (list -1 -1) 0.001)\n    (check-within (candidate (list 48 40) 2 31) (list -1 -1) 0.001)\n    (check-within (candidate (list 2 8 0) 2 7) (list -1 -1) 0.001)\n    (check-within (candidate (list 2 29 0) 0 12) (list 0 1) 0.001)\n    (check-within (candidate (list 3 0 7) 2 4) (list 0 2) 0.001)\n    (check-within (candidate (list 4 22 43) 0 34) (list 0 2) 0.001)\n    (check-within (candidate (list 5 0 3) 1 4) (list 0 1) 0.001)\n    (check-within (candidate (list 5 9 2) 0 1) (list 0 1) 0.001)\n    (check-within (candidate (list 6 2 7) 2 5) (list -1 -1) 0.001)\n    (check-within (candidate (list 6 5 1) 2 6) (list -1 -1) 0.001)\n    (check-within (candidate (list 6 8 0) 1 3) (list 0 2) 0.001)\n    (check-within (candidate (list 7 36 21) 1 20) (list 0 1) 0.001)\n    (check-within (candidate (list 9 4 7) 0 9) (list -1 -1) 0.001)\n    (check-within (candidate (list 9 50 31) 1 8) (list 0 1) 0.001)\n    (check-within (candidate (list 31 23 36) 1 11) (list 1 2) 0.001)\n    (check-within (candidate (list 40 21 1) 2 0) (list 0 2) 0.001)\n    (check-within (candidate (list 0 5 10 5) 3 0) (list 0 3) 0.001)\n    (check-within (candidate (list 1 28 24 35) 3 2) (list 0 3) 0.001)\n    (check-within (candidate (list 2 7 10 4) 0 5) (list 0 1) 0.001)\n    (check-within (candidate (list 3 1 0 3) 2 0) (list 0 2) 0.001)\n    (check-within (candidate (list 7 5 6 2) 2 2) (list 0 3) 0.001)\n    (check-within (candidate (list 9 3 6 4) 1 5) (list 0 1) 0.001)\n    (check-within (candidate (list 34 46 11 45) 1 3) (list 0 1) 0.001)\n    (check-within (candidate (list 36 37 40 9) 2 8) (list 0 3) 0.001)\n    (check-within (candidate (list 37 25 48 13) 0 0) (list 0 0) 0.001)\n    (check-within (candidate (list 45 6 29 21) 3 36) (list -1 -1) 0.001)\n    (check-within (candidate (list 1 5 7 9 2) 3 8) (list 0 3) 0.001)\n    (check-within (candidate (list 7 2 1 8 3) 0 7) (list 2 3) 0.001)\n    (check-within (candidate (list 8 9 8 0 4) 1 6) (list 0 3) 0.001)\n    (check-within (candidate (list 9 1 10 0 10) 0 3) (list 0 1) 0.001)\n    (check-within (candidate (list 9 9 4 5 5) 2 9) (list -1 -1) 0.001)\n    (check-within (candidate (list 10 1 10 12 1) 1 3) (list 0 1) 0.001)\n    (check-within (candidate (list 17 46 31 28 28) 0 46) (list -1 -1) 0.001)\n    (check-within (candidate (list 17 49 1 47 12) 2 17) (list 0 3) 0.001)\n    (check-within (candidate (list 32 49 3 40 44) 1 37) (list 1 2) 0.001)\n    (check-within (candidate (list 46 43 16 16 34) 3 13) (list 0 3) 0.001)\n    (check-within (candidate (list 49 36 18 4 33) 3 20) (list 0 3) 0.001)\n    (check-within (candidate (list 0 7 10 6 6 5) 1 5) (list 0 1) 0.001)\n    (check-within (candidate (list 2 0 3 4 0 5) 3 5) (list 1 5) 0.001)\n    (check-within (candidate (list 3 8 9 7 2 3) 3 6) (list 1 4) 0.001)\n    (check-within (candidate (list 3 27 38 47 38 4) 0 10) (list 0 1) 0.001)\n    (check-within (candidate (list 4 13 48 50 1 26) 4 34) (list -1 -1) 0.001)\n    (check-within (candidate (list 6 1 2 6 4 6) 2 2) (list 0 2) 0.001)\n    (check-within (candidate (list 7 1 0 9 5 9) 2 5) (list 0 2) 0.001)\n    (check-within (candidate (list 7 3 7 5 7 9) 1 2) (list 0 1) 0.001)\n    (check-within (candidate (list 12 37 7 16 5 34) 3 27) (list 1 4) 0.001)\n    (check-within (candidate (list 17 46 48 25 22 4) 2 30) (list 0 2) 0.001)\n    (check-within (candidate (list 18 18 7 10 9 50) 2 32) (list 0 5) 0.001)\n    (check-within (candidate (list 18 42 37 13 49 42) 3 46) (list -1 -1) 0.001)\n    (check-within (candidate (list 23 31 14 42 0 49) 4 44) (list -1 -1) 0.001)\n    (check-within (candidate (list 50 46 15 16 48 7) 1 7) (list 0 2) 0.001)\n    (check-within (candidate (list 5 6 8 5 6 3 1) 0 4) (list 0 6) 0.001)\n    (check-within (candidate (list 5 50 13 3 44 7 29) 1 45) (list 0 1) 0.001)\n    (check-within (candidate (list 8 7 18 47 27 25 41) 0 45) (list -1 -1) 0.001)\n    (check-within (candidate (list 9 1 0 6 7 5 8) 1 1) (list 0 1) 0.001)\n    (check-within (candidate (list 11 3 36 17 13 0 26) 2 33) (list 2 5) 0.001)\n    (check-within (candidate (list 13 0 16 32 47 27 25) 1 35) (list 1 4) 0.001)\n    (check-within (candidate (list 13 16 30 33 50 50 38) 3 30) (list 0 4) 0.001)\n    (check-within (candidate (list 21 44 22 1 21 9 17) 1 41) (list 1 3) 0.001)\n    (check-within (candidate (list 35 31 36 28 49 4 46) 4 27) (list 0 5) 0.001)\n    (check-within (candidate (list 39 18 49 25 40 41 26) 1 43) (list -1 -1) 0.001)\n    (check-within (candidate (list 40 46 11 36 25 46 47) 0 37) (list -1 -1) 0.001)\n    (check-within (candidate (list 46 7 6 3 43 7 48) 0 48) (list -1 -1) 0.001)\n    (check-within (candidate (list 0 1 6 8 8 3 9 10) 2 6) (list 0 2) 0.001)\n    (check-within (candidate (list 1 0 6 4 8 7 2 5) 3 7) (list 0 4) 0.001)\n    (check-within (candidate (list 3 8 3 8 0 5 5 7) 4 6) (list -1 -1) 0.001)\n    (check-within (candidate (list 5 10 4 4 8 6 0 4) 2 7) (list 1 6) 0.001)\n    (check-within (candidate (list 6 1 3 7 4 4 2 1) 0 5) (list 0 1) 0.001)\n    (check-within (candidate (list 9 36 31 2 46 1 27 37) 3 45) (list -1 -1) 0.001)\n    (check-within (candidate (list 10 4 0 1 4 7 2 0) 5 8) (list 0 6) 0.001)\n    (check-within (candidate (list 26 20 19 36 20 28 33 39) 0 0) (list 0 0) 0.001)\n    (check-within (candidate (list 29 3 30 34 25 40 10 37) 5 22) (list 1 7) 0.001)\n    (check-within (candidate (list 39 26 46 9 5 34 0 20) 0 24) (list 0 3) 0.001)\n    (check-within (candidate (list 46 12 38 21 12 9 18 29) 3 35) (list 0 5) 0.001)\n    (check-within (candidate (list 1 7 7 2 4 10 1 5 9) 4 4) (list 0 5) 0.001)\n    (check-within (candidate (list 2 4 1 5 2 0 3 5 7) 5 2) (list 0 5) 0.001)\n    (check-within (candidate (list 2 5 6 5 9 7 2 3 6) 4 2) (list 0 4) 0.001)\n    (check-within (candidate (list 2 6 9 4 9 4 10 9 2) 0 4) (list 0 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3166_minGroupsForValidAssignment", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums of length n.\n;; We want to group the indices so for each index i in the range [0, n - 1], it is assigned to exactly one group.\n;; A group assignment is valid if the following conditions hold:\n;;  * For every group g, all indices i assigned to group g have the same value in nums.\n;;  * For any two groups g1 and g2, the difference between the number of indices assigned to g1 and g2 should not exceed 1.\n;; Return an integer denoting the minimum number of groups needed to create a valid group assignment.\n;; Example 1:\n;; Input: nums = [3,2,3,2,3]\n;; Output: 2\n;; Explanation: One way the indices can be assigned to 2 groups is as follows, where the values in square brackets are indices:\n;; group 1 -> [0,2,4]\n;; group 2 -> [1,3]\n;; All indices are assigned to one group.\n;; In group 1, nums[0] == nums[2] == nums[4], so all indices have the same value.\n;; In group 2, nums[1] == nums[3], so all indices have the same value.\n;; The number of indices assigned to group 1 is 3, and the number of indices assigned to group 2 is 2.\n;; Their difference doesn't exceed 1.\n;; It is not possible to use fewer than 2 groups because, in order to use just 1 group, all indices assigned to that group must have the same value.\n;; Hence, the answer is 2.\n;; Example 2:\n;; Input: nums = [10,10,10,3,1,1]\n;; Output: 4\n;; Explanation: One way the indices can be assigned to 4 groups is as follows, where the values in square brackets are indices:\n;; group 1 -> [0]\n;; group 2 -> [1,2]\n;; group 3 -> [3]\n;; group 4 -> [4,5]\n;; The group assignment above satisfies both conditions.\n;; It can be shown that it is not possible to create a valid assignment using fewer than 4 groups.\n;; Hence, the answer is 4.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * 1 <= nums[i] <= 109\n(define (minGroupsForValidAssignment nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3166_minGroupsForValidAssignment.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minGroupsForValidAssignment))\n    (check-within (candidate (list 3 2 3 2 3)) 2 0.001)\n    (check-within (candidate (list 10 10 10 3 1 1)) 4 0.001)\n    (check-within (candidate (list 1 1)) 1 0.001)\n    (check-within (candidate (list 1 2)) 2 0.001)\n    (check-within (candidate (list 1 3)) 2 0.001)\n    (check-within (candidate (list 2 1)) 2 0.001)\n    (check-within (candidate (list 2 2)) 1 0.001)\n    (check-within (candidate (list 3 1)) 2 0.001)\n    (check-within (candidate (list 3 2)) 2 0.001)\n    (check-within (candidate (list 3 3)) 1 0.001)\n    (check-within (candidate (list 3 4)) 2 0.001)\n    (check-within (candidate (list 10 4)) 2 0.001)\n    (check-within (candidate (list 10 10)) 1 0.001)\n    (check-within (candidate (list 14 15)) 2 0.001)\n    (check-within (candidate (list 1 1 1)) 1 0.001)\n    (check-within (candidate (list 1 2 1)) 2 0.001)\n    (check-within (candidate (list 1 7 10)) 3 0.001)\n    (check-within (candidate (list 2 1 1)) 2 0.001)\n    (check-within (candidate (list 2 1 2)) 2 0.001)\n    (check-within (candidate (list 2 2 1)) 2 0.001)\n    (check-within (candidate (list 2 2 3)) 2 0.001)\n    (check-within (candidate (list 2 3 2)) 2 0.001)\n    (check-within (candidate (list 2 3 3)) 2 0.001)\n    (check-within (candidate (list 2 8 5)) 3 0.001)\n    (check-within (candidate (list 3 1 1)) 2 0.001)\n    (check-within (candidate (list 3 1 3)) 2 0.001)\n    (check-within (candidate (list 3 2 3)) 2 0.001)\n    (check-within (candidate (list 3 3 1)) 2 0.001)\n    (check-within (candidate (list 3 10 3)) 2 0.001)\n    (check-within (candidate (list 4 2 3)) 3 0.001)\n    (check-within (candidate (list 5 4 8)) 3 0.001)\n    (check-within (candidate (list 5 6 8)) 3 0.001)\n    (check-within (candidate (list 5 9 4)) 3 0.001)\n    (check-within (candidate (list 6 4 9)) 3 0.001)\n    (check-within (candidate (list 9 2 2)) 2 0.001)\n    (check-within (candidate (list 10 5 5)) 2 0.001)\n    (check-within (candidate (list 14 7 2)) 3 0.001)\n    (check-within (candidate (list 1 1 1 3)) 3 0.001)\n    (check-within (candidate (list 1 2 1 1)) 3 0.001)\n    (check-within (candidate (list 1 2 1 2)) 2 0.001)\n    (check-within (candidate (list 1 2 3 1)) 3 0.001)\n    (check-within (candidate (list 1 2 3 2)) 3 0.001)\n    (check-within (candidate (list 1 3 2 3)) 3 0.001)\n    (check-within (candidate (list 1 3 3 1)) 2 0.001)\n    (check-within (candidate (list 2 2 1 1)) 2 0.001)\n    (check-within (candidate (list 2 2 3 3)) 2 0.001)\n    (check-within (candidate (list 2 3 1 2)) 3 0.001)\n    (check-within (candidate (list 2 3 2 2)) 3 0.001)\n    (check-within (candidate (list 2 5 10 4)) 4 0.001)\n    (check-within (candidate (list 3 2 2 2)) 3 0.001)\n    (check-within (candidate (list 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 5 1 5 1)) 2 0.001)\n    (check-within (candidate (list 13 11 4 13)) 3 0.001)\n    (check-within (candidate (list 1 1 1 1 1)) 1 0.001)\n    (check-within (candidate (list 1 2 2 3 1)) 3 0.001)\n    (check-within (candidate (list 1 2 2 3 2)) 4 0.001)\n    (check-within (candidate (list 2 1 1 3 1)) 4 0.001)\n    (check-within (candidate (list 2 1 3 3 3)) 4 0.001)\n    (check-within (candidate (list 2 3 1 2 2)) 4 0.001)\n    (check-within (candidate (list 2 3 2 2 2)) 3 0.001)\n    (check-within (candidate (list 2 3 3 1 3)) 4 0.001)\n    (check-within (candidate (list 3 1 1 3 3)) 2 0.001)\n    (check-within (candidate (list 3 1 3 2 2)) 3 0.001)\n    (check-within (candidate (list 3 1 3 2 3)) 4 0.001)\n    (check-within (candidate (list 3 2 2 3 1)) 3 0.001)\n    (check-within (candidate (list 3 3 1 1 1)) 2 0.001)\n    (check-within (candidate (list 4 1 7 8 3)) 5 0.001)\n    (check-within (candidate (list 7 5 9 4 2)) 5 0.001)\n    (check-within (candidate (list 10 2 2 1 10)) 3 0.001)\n    (check-within (candidate (list 1 1 1 3 1 2)) 4 0.001)\n    (check-within (candidate (list 1 1 3 1 1 3)) 3 0.001)\n    (check-within (candidate (list 1 2 1 3 3 2)) 3 0.001)\n    (check-within (candidate (list 1 3 1 2 2 3)) 3 0.001)\n    (check-within (candidate (list 1 5 12 11 5 9)) 5 0.001)\n    (check-within (candidate (list 1 6 5 8 7 1)) 5 0.001)\n    (check-within (candidate (list 2 1 1 1 3 2)) 4 0.001)\n    (check-within (candidate (list 2 1 2 1 1 1)) 3 0.001)\n    (check-within (candidate (list 2 1 3 2 1 2)) 4 0.001)\n    (check-within (candidate (list 2 2 1 1 1 1)) 3 0.001)\n    (check-within (candidate (list 2 2 1 2 3 3)) 4 0.001)\n    (check-within (candidate (list 2 3 3 1 2 1)) 3 0.001)\n    (check-within (candidate (list 2 3 3 1 2 3)) 4 0.001)\n    (check-within (candidate (list 2 5 9 3 1 4)) 6 0.001)\n    (check-within (candidate (list 3 2 2 3 3 2)) 2 0.001)\n    (check-within (candidate (list 3 3 1 2 2 3)) 4 0.001)\n    (check-within (candidate (list 6 7 4 8 8 10)) 5 0.001)\n    (check-within (candidate (list 8 5 8 1 4 5)) 4 0.001)\n    (check-within (candidate (list 8 7 4 5 3 1)) 6 0.001)\n    (check-within (candidate (list 10 8 3 3 2 3)) 5 0.001)\n    (check-within (candidate (list 1 2 1 2 1 1 3)) 4 0.001)\n    (check-within (candidate (list 1 2 2 1 1 1 2)) 2 0.001)\n    (check-within (candidate (list 1 2 3 3 3 3 3)) 5 0.001)\n    (check-within (candidate (list 1 3 1 7 4 5 8)) 6 0.001)\n    (check-within (candidate (list 2 1 1 3 3 1 2)) 3 0.001)\n    (check-within (candidate (list 2 1 3 3 3 1 3)) 4 0.001)\n    (check-within (candidate (list 2 2 2 1 2 3 1)) 4 0.001)\n    (check-within (candidate (list 2 2 2 2 2 1 2)) 4 0.001)\n    (check-within (candidate (list 2 3 1 3 1 3 2)) 3 0.001)\n    (check-within (candidate (list 2 3 1 3 2 1 3)) 3 0.001)\n    (check-within (candidate (list 3 1 3 2 3 3 2)) 4 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3171_minSum", "language": "rkt", "prompt": "#lang racket\n;; You are given two arrays nums1 and nums2 consisting of positive integers.\n;; You have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.\n;; Return the minimum equal sum you can obtain, or -1 if it is impossible.\n;; Example 1:\n;; Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0]\n;; Output: 12\n;; Explanation: We can replace 0's in the following way:\n;; - Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n;; - Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\n;; Both arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.\n;; Example 2:\n;; Input: nums1 = [2,0,2,0], nums2 = [1,4]\n;; Output: -1\n;; Explanation: It is impossible to make the sum of both arrays equal.\n;; Constraints:\n;;  * 1 <= nums1.length, nums2.length <= 105\n;;  * 0 <= nums1[i], nums2[i] <= 106\n(define (minSum nums1 nums2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3171_minSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSum))\n    (check-within (candidate (list 3 2 0 1 0) (list 6 5 0)) 12 0.001)\n    (check-within (candidate (list 2 0 2 0) (list 1 4)) -1 0.001)\n    (check-within (candidate (list 0 7 28 17 18) (list 1 2 6 26 1 0 27 3 0 30)) 98 0.001)\n    (check-within (candidate (list 8 13 15 18 0 18 0 0 5 20 12 27 3 14 22 0) (list 29 1 6 0 10 24 27 17 14 13 2 19 2 11)) 179 0.001)\n    (check-within (candidate (list 9 5) (list 15 12 5 21 4 26 27 9 6 29 0 18 16 0 0 0 20)) -1 0.001)\n    (check-within (candidate (list 0 29 5 22 5 9 30 11 20 0 18 16 26 11 3 0 24 24 14 24) (list 30 12 16 3 24 6 13 0 16)) 294 0.001)\n    (check-within (candidate (list 9 13 0 0 12 10 0 8 0 0 5 13 0) (list 8 14 11 2 27 0 0)) 76 0.001)\n    (check-within (candidate (list 3 0 20 9 20 0 20 25 26 9 0 12 6 11 0 6) (list 0 3 8 13 27 0 0 0 29 27 0 11 23 0 19 19 0)) 186 0.001)\n    (check-within (candidate (list 25 28 13 0 14 23 14 0 3 3 12) (list 24 30 0 15 20 19 18 0 23 23 0 16 26 0 29 19 16 25)) 307 0.001)\n    (check-within (candidate (list 0 29 30 18 5 24 16 5 17 0 18 16 26 0 15 19 14 20 3 26) (list 0 8 14 11 13 6 8 0 13)) 304 0.001)\n    (check-within (candidate (list 0 17 20 17 5 0 14 19 7 8 16 18 6) (list 21 1 27 19 2 2 24 21 16 1 13 27 8 5 3 11 13 7 29 7)) 257 0.001)\n    (check-within (candidate (list 26 1 25 10 14 14 4 0 10 0 23) (list 23 8 30 18 8 15 6 9 0 2 0 0 19 8 19 4 10)) 182 0.001)\n    (check-within (candidate (list 15 10 7 16) (list 8 16 2 6 4 12 6 16 24 0)) -1 0.001)\n    (check-within (candidate (list 0 0 0 17 0 6 2 22 12 0 25 18 1 12 19 0 0) (list 0 0 0 30 4 3 13 25 9 25 3 0 1 12 2 10 4 7 30 16)) 198 0.001)\n    (check-within (candidate (list 23 17) (list 7 3 22 0 12)) -1 0.001)\n    (check-within (candidate (list 15 0 8 30 6 3 24 6 0 11 13 30 6 25 23 3) (list 12 20 0 6 0 0 14 0 0 8 5 19 16 0 0 15)) 205 0.001)\n    (check-within (candidate (list 3 25 1 13) (list 19 13 10 27 10 20 27 0 3 12 16 26 0 27)) -1 0.001)\n    (check-within (candidate (list 0 0) (list 29 28)) 57 0.001)\n    (check-within (candidate (list 17 4 11 8 0 17 0 0 12 27 20 28 0 30 21 18 12) (list 0 2 30 0 5 17 0 0 0 15 11 2 25 18 18)) 229 0.001)\n    (check-within (candidate (list 0 17 0 7 29 10 22 27 13 8 19) (list 26 23 8 14 0 17 20 4 26 15 0 9 14 0 12 10 23 16)) 240 0.001)\n    (check-within (candidate (list 0 25 8 0 22 0) (list 6 12 22 3 0 28 19 0 20 21 2 3)) 138 0.001)\n    (check-within (candidate (list 2 17 23 16 2 0 6 12 10) (list 19 11 7 16 0)) 89 0.001)\n    (check-within (candidate (list 4 7 14 15 18 7 0 6 8) (list 27 2 13 18 20 23 9 0 0 25 5 0 17 0 0 14)) 178 0.001)\n    (check-within (candidate (list 16 0 7 19 0 0 7 26 12 0 4 0 7 0 22 12 0 26) (list 7 25 0 25 18 0 6 14 0)) 165 0.001)\n    (check-within (candidate (list 7 0 3 6 5 24 0 0 0 30 20 13 0 5 19 4 25 17) (list 11 19 28 25 27 6 0 18 0 19 18 16 0 16 9 0 2 23 23 10)) 274 0.001)\n    (check-within (candidate (list 23 19 24 0 8 19 30 0 14) (list 25 17 18 6 30)) -1 0.001)\n    (check-within (candidate (list 0 15 8 0 4 0 21 20 0 0 18) (list 16 0)) 91 0.001)\n    (check-within (candidate (list 0 0 24 21 16 4 22 21) (list 18 7 28 0 0 11 2 0)) 110 0.001)\n    (check-within (candidate (list 4 11 17 30 11 21 21 10 2 10 7 29 21 1 0 9 15 5) (list 0 0 1 7 8 0 27 20)) 225 0.001)\n    (check-within (candidate (list 12 16 1) (list 1 0 19 24 21 0 0 24 24 18 26 19 13 14 30 9 0 4 20)) -1 0.001)\n    (check-within (candidate (list 0 0 8 0) (list 23 0 15 29 25)) 93 0.001)\n    (check-within (candidate (list 28 25 14 10) (list 0 6 16 2 0 13 0 0 4 2 16 6 18 0 8 14 10)) -1 0.001)\n    (check-within (candidate (list 0 0 8 30 1 0 22 0 0 1 0) (list 22 6 0 13 0 23 14 27 20 4 0 11 11 25 9 22 11 17 17)) 255 0.001)\n    (check-within (candidate (list 0 0 27) (list 18 0 0 7 26 11 28 20 1 19)) 132 0.001)\n    (check-within (candidate (list 30 6 0 8 14 0 15 0 11 13 0 8 28 8 8 0 28 0 25) (list 21 8 0 10 28 2 6 3 0 20 1 2 24 12 29)) 208 0.001)\n    (check-within (candidate (list 18 27 20 10 28 12 29 5 24 0 27 9 22 0 14 0 5 11) (list 24 0 14 26 1 9 24 0 12 30 13 21)) 264 0.001)\n    (check-within (candidate (list 0 5) (list 17 12 5 6 0 13 19 7)) 80 0.001)\n    (check-within (candidate (list 30 2 20 30) (list 8 14 0 2 0 18 9 24 0 0 28 0 1 14 27)) -1 0.001)\n    (check-within (candidate (list 0 17 0 1 19 0 0 7 23 0 0 0 5 0) (list 7 1 28 8 1 0 0 5 5 18 17 23)) 115 0.001)\n    (check-within (candidate (list 17 4 26 28 0 0 1 0 24 5 4 6 10 8 8 16 27) (list 0 18 12 0 0 22 15)) 187 0.001)\n    (check-within (candidate (list 17 1 13 12 3 13) (list 2 25)) -1 0.001)\n    (check-within (candidate (list 19 19 21 6 0 0 28 3) (list 5 0 16)) 98 0.001)\n    (check-within (candidate (list 27 17 9 23 21 18 8 27 19 3 0 0 0 0 19) (list 4 7 27 21 27 0 28 0 28 19 20 14 0 12 24 3)) 237 0.001)\n    (check-within (candidate (list 25 25 0 5 15 13 26 5 25 23 19 20 1 15) (list 23 6)) -1 0.001)\n    (check-within (candidate (list 9 0 15 10 18 30 7 0 1 27 24 2 8 0) (list 0 0 1 13 0 9 21 3 0 20)) 154 0.001)\n    (check-within (candidate (list 23 7 0 4 21 20 18 3 17 18 4 0 0 13 29 17) (list 0 0 18 9 0 11 21 0)) 197 0.001)\n    (check-within (candidate (list 7 0 5 7 19 12 0 11 7 24 22) (list 8 3 0 23 19 24 2 10 4 20 0 14)) 129 0.001)\n    (check-within (candidate (list 15 23 12 0 0 1 29 24 0 5 21 9 7 6 27 11 0 19 20) (list 14 25 7 18)) -1 0.001)\n    (check-within (candidate (list 26 14 0) (list 0 16 0 8 14 7 0 2 0 0 10 10 7 14 0 18 11)) 123 0.001)\n    (check-within (candidate (list 16 15 27 20 29) (list 27 19 0 11 2 19 28 16 0 16 24 11 0 4 2 24 8)) -1 0.001)\n    (check-within (candidate (list 26 0 28 0 28 24 15 30 9 17 0 1 21 26 21 8 0 28 0 11) (list 0 20 9 12 10 16 2 21 12 0 26 11 0 21 0 0 0 29 23 22)) 298 0.001)\n    (check-within (candidate (list 0 0 9 22 3 14 13 26 21) (list 21 9 21 28 17 6 15 11 5 14 17 22 0 24)) 211 0.001)\n    (check-within (candidate (list 0 0 18 27 7 20 9 10 29) (list 29 26 19 0 0 0 0 8 24)) 122 0.001)\n    (check-within (candidate (list 5 0 0 0 27 22 0 0 1 9) (list 20 22 5 0 0 24 22 27 15)) 137 0.001)\n    (check-within (candidate (list 2 3 0 0 0 1 18 14 25 1 0 0 3 1 13 29 0 11 0 0) (list 0 12 5 14 2 0 0 14 1 10 5 17 17 8 0 0 9)) 129 0.001)\n    (check-within (candidate (list 22 0 16 16 27 21 13 9 15 28 0 7 21 8 28 27 26 4) (list 0 16 23 0 26 4 0 13 19 0 0 0 14 18 5 14 20 0 27)) 290 0.001)\n    (check-within (candidate (list 26 0 26 18 25 20 20 3 0 14 13 5 13 0 20) (list 16 17 0 12 2 26 14 0 27 17 14 10 0 0 28 29 8 25 3 7)) 259 0.001)\n    (check-within (candidate (list 0 25 27 23) (list 28 0 12 0 24 4 14 5 16 30 26 15 6 9 28 0)) 220 0.001)\n    (check-within (candidate (list 3 23 15 19 0 7 24 27 25 0 0 16 28 15) (list 26 3 21 0 26 0 9 12 0 0 21 28 23 0 0 4 16 9 7)) 211 0.001)\n    (check-within (candidate (list 0 2 0 11 22 0 26 0 1 0 6 0 24 2 24 19 15 12) (list 9 14 0 25 24 29 17 16 24 26 1 28 27 4 11 5 14)) 275 0.001)\n    (check-within (candidate (list 1 1 1) (list 18)) -1 0.001)\n    (check-within (candidate (list 29 15 0 0 0 0 1 0 9 0 0) (list 16 0 30 28 23 0 0 0 0 24 14 27 0 0)) 169 0.001)\n    (check-within (candidate (list 27 10 0 13 25) (list 24 10 18 27 3 0 23 6 6)) 118 0.001)\n    (check-within (candidate (list 5 0 10 0 4 0 13 0 27 20 12 10 15 29) (list 13 25 4 0 11 0 30 0 29 17 7 28 23)) 190 0.001)\n    (check-within (candidate (list 29 6 30 0 25 8 12 0 25 7 2 15 12 1 5 0 0 12) (list 12 14 13 0 0 24 25 22 0 5 8 28 23 6 20 3)) 206 0.001)\n    (check-within (candidate (list 9 11 20 0 0 0 21 25 0 0 0 3 11 5 18) (list 0 27 27 21 28 25 3 0 25 0 21 0 3 0 30 20 17)) 252 0.001)\n    (check-within (candidate (list 0 0 10 4) (list 9 0 22 9 22 3 16 3 9 19 0 29 3 1 0 1 8 12)) 169 0.001)\n    (check-within (candidate (list 20 10 0 16 18 0 16 21 22 4 0 15 0 8) (list 0 1 2 0 20)) 154 0.001)\n    (check-within (candidate (list 23 24 0) (list 0 0 26 27 12 18 0)) 86 0.001)\n    (check-within (candidate (list 0 17 27 12 0 22) (list 20 0)) 80 0.001)\n    (check-within (candidate (list 1 29) (list 20 0 8 11 13 17 0 18 0 2 5 3 27 11 7 17)) -1 0.001)\n    (check-within (candidate (list 19 29 0 0 1 0 0 0 0 24 18 0 24 0 11 14 16 18) (list 2 0 26 8 17)) 182 0.001)\n    (check-within (candidate (list 2 0 0 19 6 29) (list 25 4 0 11 0 13 28 0 28 7 4 2 16 0 22)) 164 0.001)\n    (check-within (candidate (list 0 0) (list 26 5 7 0 1 3 0 7 0 0 5 25 26 20 0 3 20 23 18)) 194 0.001)\n    (check-within (candidate (list 21 2 0 0 12 2 0 4 6 29 15 0) (list 12 20 3 10 16 25 17 8 27 0 0 23 2 0 2 4 10 27)) 209 0.001)\n    (check-within (candidate (list 25 29 10 12 25 26 19 6 19 10 18) (list 0 0 22 2 17 0 7 23 22 18 20 0 13 22 0 0 0 13 6 8)) -1 0.001)\n    (check-within (candidate (list 0 0 16 23 28 20 0 22 4 1 0 0 19 0 0 3 2 28) (list 20 28)) -1 0.001)\n    (check-within (candidate (list 16 14 0 11 9 7 18 2 24 0 0 11 0 0 23) (list 0 0 0 7 0 24 24 6 0 0 12 18 1 0 0)) 140 0.001)\n    (check-within (candidate (list 4 15 7 10 8 11 2 0 0 22 11 0 4 14 0 16 29 0 0 27) (list 13 23 8 16)) -1 0.001)\n    (check-within (candidate (list 7) (list 6 26 25 0 14 19 0 29 16 29 5 26 29 6 0 25 12 0 19 19)) -1 0.001)\n    (check-within (candidate (list 0 10 5 16 13 20 20 0 15 4 0 4 3 0 0 15 0 24 0) (list 16 14 27 0 20 0 23 0 5 10 28 21 9 28 21 8 28 0 27 0)) 290 0.001)\n    (check-within (candidate (list 12 14 25 12 3) (list 3 26 0 21 22)) -1 0.001)\n    (check-within (candidate (list 0 1 6 20 13 9 28 30 0 14 6 0 25 25 24 16 2 21) (list 5 3 0)) 243 0.001)\n    (check-within (candidate (list 0 12 18 0 2 12 29 0 20 29 26 14) (list 1 0 29 14 24)) 165 0.001)\n    (check-within (candidate (list 0 21 18 13 9 0 10) (list 0 22 27 1 0 0 23 23)) 99 0.001)\n    (check-within (candidate (list 28 16 0 0 0 0 0 26 3 0 3 7 5 0 19 27 1 7) (list 28 9 0 16 14)) 149 0.001)\n    (check-within (candidate (list 9 17 6 0 24 18 14 10 14 10 0 0 12 0 3 28 25 5 0 30) (list 13 11 30 30 17 27 0 24 15 0 0)) 230 0.001)\n    (check-within (candidate (list 26 2 0 0 13 14 18 17 0) (list 27 30 26 14 10 24 17 2 10 25 27)) 212 0.001)\n    (check-within (candidate (list 9 0 26) (list 0 16)) 36 0.001)\n    (check-within (candidate (list 4 17 6 0 1 8 19 30 21 11 26 0 0 19 0 12) (list 29 17 7 4 29 5 0 25 11 6 0 0 13 22)) 178 0.001)\n    (check-within (candidate (list 1) (list 10 29 23 4 0 6 23 23 0 8 29 16 7 20 15 23)) -1 0.001)\n    (check-within (candidate (list 0 20 12 15 0 1 5 4 16 13 8 8 0 28 2 9 0 12) (list 13 21 9 0 11 26 0 16 0 29 7 0 0 7 4 0 28 0 2)) 180 0.001)\n    (check-within (candidate (list 0 20 0 0 8 29 17 25 4 0 0 0 0 7 13 14) (list 6 21 24 14 20 19 0 0 7 21 0 11 0 0 0 0 17 16 0 6)) 190 0.001)\n    (check-within (candidate (list 28 25 9 0 10 19 23 21 25 8 24 25 18 5) (list 0 3 0)) 241 0.001)\n    (check-within (candidate (list 23 7 15 16 25 9 30 14 8 0 0 2 25 1 7 0 16 0 19) (list 3 1 24 0 25 0 7 24 0 0 17 27 0)) 221 0.001)\n    (check-within (candidate (list 0 14 10 29 0 5 13 0 0 1 18 0 0 0 11 3 28 0) (list 30 2 24 0 0 0 14 12 23 3 17 12 14 13 0 28 29 0 21)) 247 0.001)\n    (check-within (candidate (list 5 29) (list 23 24)) -1 0.001)\n    (check-within (candidate (list 23 2 12 27 0 5 14 0 1 6 30 0 0 2 6 0 11 0) (list 1 26 27 5 0 14 28 24 2 2 15 25 7 13 9)) 199 0.001)\n    (check-within (candidate (list 0 10 29 11 11 22 0 0 12 10) (list 14 0 1 3 13 29 21)) 108 0.001)\n    (check-within (candidate (list 0 9 22 25 28) (list 0 0 0 14 19 6 0 7 19 15 0 30 19 18 11 1 0 15 10 18)) 208 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3172_differenceOfSums", "language": "rkt", "prompt": "#lang racket\n;; You are given positive integers n and m.\n;; Define two integers, num1 and num2, as follows:\n;;  * num1: The sum of all integers in the range [1, n] that are not divisible by m.\n;;  * num2: The sum of all integers in the range [1, n] that are divisible by m.\n;; Return the integer num1 - num2.\n;; Example 1:\n;; Input: n = 10, m = 3\n;; Output: 19\n;; Explanation: In the given example:\n;; - Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n;; - Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\n;; We return 37 - 18 = 19 as the answer.\n;; Example 2:\n;; Input: n = 5, m = 6\n;; Output: 15\n;; Explanation: In the given example:\n;; - Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n;; - Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\n;; We return 15 - 0 = 15 as the answer.\n;; Example 3:\n;; Input: n = 5, m = 1\n;; Output: -15\n;; Explanation: In the given example:\n;; - Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n;; - Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\n;; We return 0 - 15 = -15 as the answer.\n;; Constraints:\n;;  * 1 <= n, m <= 1000\n(define (differenceOfSums n m)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3172_differenceOfSums.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate differenceOfSums))\n    (check-within (candidate 10 3) 19 0.001)\n    (check-within (candidate 5 6) 15 0.001)\n    (check-within (candidate 5 1) -15 0.001)\n    (check-within (candidate 15 9) 102 0.001)\n    (check-within (candidate 8 10) 36 0.001)\n    (check-within (candidate 23 36) 276 0.001)\n    (check-within (candidate 1 32) 1 0.001)\n    (check-within (candidate 36 7) 456 0.001)\n    (check-within (candidate 3 8) 6 0.001)\n    (check-within (candidate 4 2) -2 0.001)\n    (check-within (candidate 9 7) 31 0.001)\n    (check-within (candidate 20 9) 156 0.001)\n    (check-within (candidate 3 19) 6 0.001)\n    (check-within (candidate 6 16) 21 0.001)\n    (check-within (candidate 6 1) -21 0.001)\n    (check-within (candidate 5 25) 15 0.001)\n    (check-within (candidate 9 3) 9 0.001)\n    (check-within (candidate 8 23) 36 0.001)\n    (check-within (candidate 17 1) -153 0.001)\n    (check-within (candidate 18 9) 117 0.001)\n    (check-within (candidate 22 30) 253 0.001)\n    (check-within (candidate 1 42) 1 0.001)\n    (check-within (candidate 33 19) 523 0.001)\n    (check-within (candidate 7 19) 28 0.001)\n    (check-within (candidate 12 24) 78 0.001)\n    (check-within (candidate 26 25) 301 0.001)\n    (check-within (candidate 9 16) 45 0.001)\n    (check-within (candidate 1 8) 1 0.001)\n    (check-within (candidate 29 42) 435 0.001)\n    (check-within (candidate 2 11) 3 0.001)\n    (check-within (candidate 36 10) 546 0.001)\n    (check-within (candidate 45 4) 507 0.001)\n    (check-within (candidate 3 7) 6 0.001)\n    (check-within (candidate 6 12) 21 0.001)\n    (check-within (candidate 3 4) 6 0.001)\n    (check-within (candidate 8 28) 36 0.001)\n    (check-within (candidate 18 23) 171 0.001)\n    (check-within (candidate 11 6) 54 0.001)\n    (check-within (candidate 35 10) 510 0.001)\n    (check-within (candidate 29 18) 399 0.001)\n    (check-within (candidate 1 1) -1 0.001)\n    (check-within (candidate 12 8) 62 0.001)\n    (check-within (candidate 7 12) 28 0.001)\n    (check-within (candidate 17 3) 63 0.001)\n    (check-within (candidate 16 15) 106 0.001)\n    (check-within (candidate 18 3) 45 0.001)\n    (check-within (candidate 4 12) 10 0.001)\n    (check-within (candidate 3 21) 6 0.001)\n    (check-within (candidate 15 4) 72 0.001)\n    (check-within (candidate 9 39) 45 0.001)\n    (check-within (candidate 19 18) 154 0.001)\n    (check-within (candidate 2 4) 3 0.001)\n    (check-within (candidate 41 1) -861 0.001)\n    (check-within (candidate 3 1) -6 0.001)\n    (check-within (candidate 16 13) 110 0.001)\n    (check-within (candidate 32 10) 408 0.001)\n    (check-within (candidate 41 34) 793 0.001)\n    (check-within (candidate 33 40) 561 0.001)\n    (check-within (candidate 36 8) 506 0.001)\n    (check-within (candidate 8 34) 36 0.001)\n    (check-within (candidate 40 12) 676 0.001)\n    (check-within (candidate 28 9) 298 0.001)\n    (check-within (candidate 20 6) 138 0.001)\n    (check-within (candidate 13 6) 55 0.001)\n    (check-within (candidate 2 37) 3 0.001)\n    (check-within (candidate 14 17) 105 0.001)\n    (check-within (candidate 35 4) 342 0.001)\n    (check-within (candidate 2 14) 3 0.001)\n    (check-within (candidate 5 2) 3 0.001)\n    (check-within (candidate 7 7) 14 0.001)\n    (check-within (candidate 12 26) 78 0.001)\n    (check-within (candidate 14 1) -105 0.001)\n    (check-within (candidate 2 1) -3 0.001)\n    (check-within (candidate 20 3) 84 0.001)\n    (check-within (candidate 8 27) 36 0.001)\n    (check-within (candidate 1 12) 1 0.001)\n    (check-within (candidate 13 19) 91 0.001)\n    (check-within (candidate 7 1) -28 0.001)\n    (check-within (candidate 31 4) 272 0.001)\n    (check-within (candidate 11 25) 66 0.001)\n    (check-within (candidate 5 19) 15 0.001)\n    (check-within (candidate 33 12) 489 0.001)\n    (check-within (candidate 4 26) 10 0.001)\n    (check-within (candidate 1 24) 1 0.001)\n    (check-within (candidate 13 20) 91 0.001)\n    (check-within (candidate 6 8) 21 0.001)\n    (check-within (candidate 8 26) 36 0.001)\n    (check-within (candidate 4 1) -10 0.001)\n    (check-within (candidate 1 6) 1 0.001)\n    (check-within (candidate 2 25) 3 0.001)\n    (check-within (candidate 4 4) 2 0.001)\n    (check-within (candidate 8 2) -4 0.001)\n    (check-within (candidate 15 21) 120 0.001)\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate 12 2) -6 0.001)\n    (check-within (candidate 40 14) 736 0.001)\n    (check-within (candidate 14 19) 105 0.001)\n    (check-within (candidate 18 1) -171 0.001)\n    (check-within (candidate 1 28) 1 0.001)\n    (check-within (candidate 31 18) 460 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3176_minimumSum", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums of integers.\n;; A triplet of indices (i, j, k) is a mountain if:\n;;  * i < j < k\n;;  * nums[i] < nums[j] and nums[k] < nums[j]\n;; Return the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.\n;; Example 1:\n;; Input: nums = [8,6,1,5,3]\n;; Output: 9\n;; Explanation: Triplet (2, 3, 4) is a mountain triplet of sum 9 since:\n;; - 2 < 3 < 4\n;; - nums[2] < nums[3] and nums[4] < nums[3]\n;; And the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9.\n;; Example 2:\n;; Input: nums = [5,4,8,7,10,2]\n;; Output: 13\n;; Explanation: Triplet (1, 3, 5) is a mountain triplet of sum 13 since:\n;; - 1 < 3 < 5\n;; - nums[1] < nums[3] and nums[5] < nums[3]\n;; And the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13.\n;; Example 3:\n;; Input: nums = [6,5,4,3,4,5]\n;; Output: -1\n;; Explanation: It can be shown that there are no mountain triplets in nums.\n;; Constraints:\n;;  * 3 <= nums.length <= 50\n;;  * 1 <= nums[i] <= 50\n(define (minimumSum nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3176_minimumSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumSum))\n    (check-within (candidate (list 8 6 1 5 3)) 9 0.001)\n    (check-within (candidate (list 5 4 8 7 10 2)) 13 0.001)\n    (check-within (candidate (list 6 5 4 3 4 5)) -1 0.001)\n    (check-within (candidate (list 50 50 50)) -1 0.001)\n    (check-within (candidate (list 49 50 48)) 147 0.001)\n    (check-within (candidate (list 48 50 49)) 147 0.001)\n    (check-within (candidate (list 1 1 1)) -1 0.001)\n    (check-within (candidate (list 1 1 2)) -1 0.001)\n    (check-within (candidate (list 1 1 3)) -1 0.001)\n    (check-within (candidate (list 1 2 1)) 4 0.001)\n    (check-within (candidate (list 1 2 2)) -1 0.001)\n    (check-within (candidate (list 1 2 3)) -1 0.001)\n    (check-within (candidate (list 1 3 1)) 5 0.001)\n    (check-within (candidate (list 1 3 2)) 6 0.001)\n    (check-within (candidate (list 1 3 3)) -1 0.001)\n    (check-within (candidate (list 2 1 1)) -1 0.001)\n    (check-within (candidate (list 2 1 2)) -1 0.001)\n    (check-within (candidate (list 2 1 3)) -1 0.001)\n    (check-within (candidate (list 2 2 1)) -1 0.001)\n    (check-within (candidate (list 2 2 2)) -1 0.001)\n    (check-within (candidate (list 2 2 3)) -1 0.001)\n    (check-within (candidate (list 2 3 1)) 6 0.001)\n    (check-within (candidate (list 2 3 2)) 7 0.001)\n    (check-within (candidate (list 2 3 3)) -1 0.001)\n    (check-within (candidate (list 3 1 1)) -1 0.001)\n    (check-within (candidate (list 3 1 2)) -1 0.001)\n    (check-within (candidate (list 3 1 3)) -1 0.001)\n    (check-within (candidate (list 3 2 1)) -1 0.001)\n    (check-within (candidate (list 3 2 2)) -1 0.001)\n    (check-within (candidate (list 3 2 3)) -1 0.001)\n    (check-within (candidate (list 3 3 1)) -1 0.001)\n    (check-within (candidate (list 3 3 2)) -1 0.001)\n    (check-within (candidate (list 3 3 3)) -1 0.001)\n    (check-within (candidate (list 1 1 1 1)) -1 0.001)\n    (check-within (candidate (list 1 1 1 2)) -1 0.001)\n    (check-within (candidate (list 1 1 1 3)) -1 0.001)\n    (check-within (candidate (list 1 1 1 4)) -1 0.001)\n    (check-within (candidate (list 1 1 2 1)) 4 0.001)\n    (check-within (candidate (list 1 1 2 2)) -1 0.001)\n    (check-within (candidate (list 1 1 2 3)) -1 0.001)\n    (check-within (candidate (list 1 1 2 4)) -1 0.001)\n    (check-within (candidate (list 1 1 3 1)) 5 0.001)\n    (check-within (candidate (list 1 1 3 2)) 6 0.001)\n    (check-within (candidate (list 1 1 3 3)) -1 0.001)\n    (check-within (candidate (list 1 1 3 4)) -1 0.001)\n    (check-within (candidate (list 1 1 4 1)) 6 0.001)\n    (check-within (candidate (list 1 1 4 2)) 7 0.001)\n    (check-within (candidate (list 1 1 4 3)) 8 0.001)\n    (check-within (candidate (list 1 1 4 4)) -1 0.001)\n    (check-within (candidate (list 1 2 1 1)) 4 0.001)\n    (check-within (candidate (list 1 2 1 2)) 4 0.001)\n    (check-within (candidate (list 1 2 1 3)) 4 0.001)\n    (check-within (candidate (list 1 2 1 4)) 4 0.001)\n    (check-within (candidate (list 1 2 2 1)) 4 0.001)\n    (check-within (candidate (list 1 2 2 2)) -1 0.001)\n    (check-within (candidate (list 1 2 2 3)) -1 0.001)\n    (check-within (candidate (list 1 2 2 4)) -1 0.001)\n    (check-within (candidate (list 1 2 3 1)) 4 0.001)\n    (check-within (candidate (list 1 2 3 2)) 6 0.001)\n    (check-within (candidate (list 1 2 3 3)) -1 0.001)\n    (check-within (candidate (list 1 2 3 4)) -1 0.001)\n    (check-within (candidate (list 1 2 4 1)) 4 0.001)\n    (check-within (candidate (list 1 2 4 2)) 7 0.001)\n    (check-within (candidate (list 1 2 4 3)) 8 0.001)\n    (check-within (candidate (list 1 2 4 4)) -1 0.001)\n    (check-within (candidate (list 1 3 1 1)) 5 0.001)\n    (check-within (candidate (list 1 3 1 2)) 5 0.001)\n    (check-within (candidate (list 1 3 1 3)) 5 0.001)\n    (check-within (candidate (list 1 3 1 4)) 5 0.001)\n    (check-within (candidate (list 1 3 2 1)) 4 0.001)\n    (check-within (candidate (list 1 3 2 2)) 6 0.001)\n    (check-within (candidate (list 1 3 2 3)) 6 0.001)\n    (check-within (candidate (list 1 3 2 4)) 6 0.001)\n    (check-within (candidate (list 1 3 3 1)) 5 0.001)\n    (check-within (candidate (list 1 3 3 2)) 6 0.001)\n    (check-within (candidate (list 1 3 3 3)) -1 0.001)\n    (check-within (candidate (list 1 3 3 4)) -1 0.001)\n    (check-within (candidate (list 1 3 4 1)) 5 0.001)\n    (check-within (candidate (list 1 3 4 2)) 6 0.001)\n    (check-within (candidate (list 1 3 4 3)) 8 0.001)\n    (check-within (candidate (list 1 3 4 4)) -1 0.001)\n    (check-within (candidate (list 1 4 1 1)) 6 0.001)\n    (check-within (candidate (list 1 4 1 2)) 6 0.001)\n    (check-within (candidate (list 1 4 1 3)) 6 0.001)\n    (check-within (candidate (list 1 4 1 4)) 6 0.001)\n    (check-within (candidate (list 1 4 2 1)) 4 0.001)\n    (check-within (candidate (list 1 4 2 2)) 7 0.001)\n    (check-within (candidate (list 1 4 2 3)) 7 0.001)\n    (check-within (candidate (list 1 4 2 4)) 7 0.001)\n    (check-within (candidate (list 1 4 3 1)) 5 0.001)\n    (check-within (candidate (list 1 4 3 2)) 6 0.001)\n    (check-within (candidate (list 1 4 3 3)) 8 0.001)\n    (check-within (candidate (list 1 4 3 4)) 8 0.001)\n    (check-within (candidate (list 1 4 4 1)) 6 0.001)\n    (check-within (candidate (list 1 4 4 2)) 7 0.001)\n    (check-within (candidate (list 1 4 4 3)) 8 0.001)\n    (check-within (candidate (list 1 4 4 4)) -1 0.001)\n    (check-within (candidate (list 2 1 1 1)) -1 0.001)\n    (check-within (candidate (list 2 1 1 2)) -1 0.001)\n    (check-within (candidate (list 2 1 1 3)) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3178_minIncrementOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums having length n, and an integer k.\n;; You can perform the following increment operation any number of times (including zero):\n;;  * Choose an index i in the range [0, n - 1], and increase nums[i] by 1.\n;; An array is considered beautiful if, for any subarray with a size of 3 or more, its maximum element is greater than or equal to k.\n;; Return an integer denoting the minimum number of increment operations needed to make nums beautiful.\n;; A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [2,3,0,0,2], k = 4\n;; Output: 3\n;; Explanation: We can perform the following increment operations to make nums beautiful:\n;; Choose index i = 1 and increase nums[1] by 1 -> [2,4,0,0,2].\n;; Choose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,3].\n;; Choose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,4].\n;; The subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].\n;; In all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.\n;; It can be shown that nums cannot be made beautiful with fewer than 3 increment operations.\n;; Hence, the answer is 3.\n;; Example 2:\n;; Input: nums = [0,1,3,3], k = 5\n;; Output: 2\n;; Explanation: We can perform the following increment operations to make nums beautiful:\n;; Choose index i = 2 and increase nums[2] by 1 -> [0,1,4,3].\n;; Choose index i = 2 and increase nums[2] by 1 -> [0,1,5,3].\n;; The subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].\n;; In all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.\n;; It can be shown that nums cannot be made beautiful with fewer than 2 increment operations.\n;; Hence, the answer is 2.\n;; Example 3:\n;; Input: nums = [1,1,2], k = 1\n;; Output: 0\n;; Explanation: The only subarray with a size of 3 or more in this example is [1,1,2].\n;; The maximum element, 2, is already greater than k = 1, so we don't need any increment operation.\n;; Hence, the answer is 0.\n;; Constraints:\n;;  * 3 <= n == nums.length <= 105\n;;  * 0 <= nums[i] <= 109\n;;  * 0 <= k <= 109\n(define (minIncrementOperations nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3178_minIncrementOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minIncrementOperations))\n    (check-within (candidate (list 2 3 0 0 2) 4) 3 0.001)\n    (check-within (candidate (list 0 1 3 3) 5) 2 0.001)\n    (check-within (candidate (list 1 1 2) 1) 0 0.001)\n    (check-within (candidate (list 0 5 5) 8) 3 0.001)\n    (check-within (candidate (list 0 18 28) 93) 65 0.001)\n    (check-within (candidate (list 0 24 14) 7) 0 0.001)\n    (check-within (candidate (list 2 3 4) 3) 0 0.001)\n    (check-within (candidate (list 3 5 9) 6) 0 0.001)\n    (check-within (candidate (list 4 3 0) 2) 0 0.001)\n    (check-within (candidate (list 5 6 5) 9) 3 0.001)\n    (check-within (candidate (list 6 9 6) 3) 0 0.001)\n    (check-within (candidate (list 7 9 0) 6) 0 0.001)\n    (check-within (candidate (list 7 47 16) 39) 0 0.001)\n    (check-within (candidate (list 9 6 1) 6) 0 0.001)\n    (check-within (candidate (list 41 44 37) 55) 11 0.001)\n    (check-within (candidate (list 48 3 13) 1) 0 0.001)\n    (check-within (candidate (list 1 2 6 9) 8) 2 0.001)\n    (check-within (candidate (list 1 3 1 6) 6) 3 0.001)\n    (check-within (candidate (list 2 35 41 20) 4) 0 0.001)\n    (check-within (candidate (list 3 9 9 7) 6) 0 0.001)\n    (check-within (candidate (list 7 7 2 7) 9) 2 0.001)\n    (check-within (candidate (list 10 2 0 2) 6) 4 0.001)\n    (check-within (candidate (list 20 2 22 30) 67) 45 0.001)\n    (check-within (candidate (list 22 49 0 20) 52) 3 0.001)\n    (check-within (candidate (list 25 2 1 41) 9) 0 0.001)\n    (check-within (candidate (list 31 86 1 2) 354) 268 0.001)\n    (check-within (candidate (list 43 31 14 4) 73) 42 0.001)\n    (check-within (candidate (list 44 24 28 47) 16) 0 0.001)\n    (check-within (candidate (list 1 9 5 2 0) 2) 0 0.001)\n    (check-within (candidate (list 3 7 9 6 0) 7) 0 0.001)\n    (check-within (candidate (list 5 9 0 10 3) 3) 0 0.001)\n    (check-within (candidate (list 6 2 8 10 6) 9) 1 0.001)\n    (check-within (candidate (list 6 14 17 4 7) 22) 5 0.001)\n    (check-within (candidate (list 10 9 5 2 4) 1) 0 0.001)\n    (check-within (candidate (list 20 38 29 34 6) 95) 66 0.001)\n    (check-within (candidate (list 21 45 33 14 22) 58) 25 0.001)\n    (check-within (candidate (list 32 14 31 43 29) 46) 15 0.001)\n    (check-within (candidate (list 39 21 10 46 40) 81) 71 0.001)\n    (check-within (candidate (list 42 7 32 19 4) 66) 34 0.001)\n    (check-within (candidate (list 74 91 93 96 12) 964) 871 0.001)\n    (check-within (candidate (list 84 17 58 61 72) 432) 374 0.001)\n    (check-within (candidate (list 4 0 10 2 10 6) 8) 0 0.001)\n    (check-within (candidate (list 4 0 22 41 29 28) 30) 8 0.001)\n    (check-within (candidate (list 4 1 8 0 3 9) 2) 0 0.001)\n    (check-within (candidate (list 4 7 6 9 2 6) 1) 0 0.001)\n    (check-within (candidate (list 5 1 3 9 8 8) 4) 0 0.001)\n    (check-within (candidate (list 6 5 8 6 0 9) 9) 1 0.001)\n    (check-within (candidate (list 7 4 10 2 0 8) 7) 0 0.001)\n    (check-within (candidate (list 8 10 7 1 9 6) 1) 0 0.001)\n    (check-within (candidate (list 9 5 0 10 9 0) 8) 0 0.001)\n    (check-within (candidate (list 13 34 0 13 9 19) 82) 117 0.001)\n    (check-within (candidate (list 16 50 23 35 38 13) 34) 0 0.001)\n    (check-within (candidate (list 20 1 40 48 32 24) 38) 0 0.001)\n    (check-within (candidate (list 28 5 10 26 38 6) 17) 0 0.001)\n    (check-within (candidate (list 30 42 46 45 23 31) 13) 0 0.001)\n    (check-within (candidate (list 3 8 0 6 46 24 31) 30) 22 0.001)\n    (check-within (candidate (list 4 7 2 10 4 10 5) 10) 3 0.001)\n    (check-within (candidate (list 8 10 1 5 8 9 7) 4) 0 0.001)\n    (check-within (candidate (list 10 7 2 5 9 6 3) 2) 0 0.001)\n    (check-within (candidate (list 10 24 21 42 6 10 43) 55) 56 0.001)\n    (check-within (candidate (list 18 48 1 19 43 25 49) 21) 0 0.001)\n    (check-within (candidate (list 37 82 95 82 77 87 93) 239) 296 0.001)\n    (check-within (candidate (list 40 17 28 38 41 32 9) 97) 125 0.001)\n    (check-within (candidate (list 41 22 4 41 4 47 36) 25) 0 0.001)\n    (check-within (candidate (list 42 19 52 36 8 5 9) 656) 1252 0.001)\n    (check-within (candidate (list 45 58 6 16 70 69 87) 26) 0 0.001)\n    (check-within (candidate (list 48 24 41 16 4 20 38) 97) 133 0.001)\n    (check-within (candidate (list 50 3 17 36 16 10 2) 19) 3 0.001)\n    (check-within (candidate (list 57 41 90 16 41 25 2) 934) 1737 0.001)\n    (check-within (candidate (list 74 33 13 74 75 95 11) 426) 744 0.001)\n    (check-within (candidate (list 83 54 75 22 32 59 30) 298) 462 0.001)\n    (check-within (candidate (list 1 9 3 6 3 1 10 4) 2) 0 0.001)\n    (check-within (candidate (list 1 29 18 3 38 4 7 47) 67) 87 0.001)\n    (check-within (candidate (list 2 1 1 7 2 3 5 6) 9) 13 0.001)\n    (check-within (candidate (list 2 3 6 3 0 0 7 4) 8) 8 0.001)\n    (check-within (candidate (list 2 9 6 9 1 9 4 0) 6) 0 0.001)\n    (check-within (candidate (list 5 1 6 9 5 4 9 2) 10) 6 0.001)\n    (check-within (candidate (list 5 10 8 7 6 7 1 10) 3) 0 0.001)\n    (check-within (candidate (list 6 7 9 5 0 2 7 7) 1) 0 0.001)\n    (check-within (candidate (list 7 2 2 6 7 5 0 2) 3) 0 0.001)\n    (check-within (candidate (list 7 12 36 8 27 48 39 35) 36) 0 0.001)\n    (check-within (candidate (list 15 47 34 46 42 26 23 11) 15) 0 0.001)\n    (check-within (candidate (list 19 40 43 32 15 7 43 5) 85) 120 0.001)\n    (check-within (candidate (list 22 45 6 7 7 23 6 3) 43) 56 0.001)\n    (check-within (candidate (list 25 1 70 71 54 96 46 77) 549) 932 0.001)\n    (check-within (candidate (list 33 41 14 18 43 20 49 23) 25) 0 0.001)\n    (check-within (candidate (list 39 26 16 36 19 5 6 28) 98) 175 0.001)\n    (check-within (candidate (list 44 44 31 36 1 8 39 46) 45) 16 0.001)\n    (check-within (candidate (list 2 17 43 26 33 12 37 28 34) 3) 0 0.001)\n    (check-within (candidate (list 3 1 6 1 0 5 4 5 7) 10) 12 0.001)\n    (check-within (candidate (list 3 10 4 2 9 8 2 1 4) 7) 3 0.001)\n    (check-within (candidate (list 7 5 4 7 6 5 10 8 8) 8) 2 0.001)\n    (check-within (candidate (list 7 40 36 45 42 23 10 33 17) 25) 0 0.001)\n    (check-within (candidate (list 10 4 7 4 8 7 8 4 6) 3) 0 0.001)\n    (check-within (candidate (list 12 32 12 13 18 38 21 15 13) 95) 214 0.001)\n    (check-within (candidate (list 17 50 14 27 10 37 24 35 23) 45) 36 0.001)\n    (check-within (candidate (list 20 17 29 44 18 20 17 26 2) 1) 0 0.001)\n    (check-within (candidate (list 28 4 38 38 37 13 47 48 49) 61) 60 0.001)\n    (check-within (candidate (list 29 0 34 5 5 24 43 23 27) 98) 193 0.001)\n    (check-within (candidate (list 41 53 77 44 79 66 2 46 64) 204) 405 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3179_maximumPoints", "language": "rkt", "prompt": "#lang racket\n;; There exists an undirected tree rooted at node 0 with n nodes labeled from 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed array coins of size n where coins[i] indicates the number of coins in the vertex i, and an integer k.\n;; Starting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.\n;; Coins at nodei can be collected in one of the following ways:\n;;  * Collect all the coins, but you will get coins[i] - k points. If coins[i] - k is negative then you will lose abs(coins[i] - k) points.\n;;  * Collect all the coins, but you will get floor(coins[i] / 2) points. If this way is used, then for all the nodej present in the subtree of nodei, coins[j] will get reduced to floor(coins[j] / 2).\n;; Return the maximum points you can get after collecting the coins from all the tree nodes.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/09/18/ex1-copy.png]\n;; Input: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5\n;; Output: 11\n;; Explanation:\n;; Collect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.\n;; Collect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.\n;; Collect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.\n;; Collect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.\n;; It can be shown that the maximum points we can get after collecting coins from all the nodes is 11.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/09/18/ex2.png]\n;; Input: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0\n;; Output: 16\n;; Explanation:\n;; Coins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.\n;; Constraints:\n;;  * n == coins.length\n;;  * 2 <= n <= 105\n;;  * 0 <= coins[i] <= 104\n;;  * edges.length == n - 1\n;;  * 0 <= edges[i][0], edges[i][1] < n\n;;  * 0 <= k <= 104\n(define (maximumPoints edges coins k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3179_maximumPoints.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumPoints))\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 2 3)) (list 10 10 3 3) 5) 11 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2)) (list 8 4 4) 0) 16 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 0 3) (list 4 2)) (list 7 5 0 9 3) 4) 10 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 1 3)) (list 9 3 8 9) 0) 29 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 3 2) (list 0 4)) (list 5 6 8 7 4) 7) 8 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 1)) (list 8 2 7 1) 2) 11 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 0 3)) (list 6 1 2 3) 2) 5 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3) (list 2 4) (list 5 4) (list 6 0) (list 4 7) (list 8 5)) (list 2 3 10 0 0 2 7 3 9) 2) 20 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 1 3) (list 3 4) (list 0 5) (list 6 3) (list 5 7) (list 3 8) (list 9 7)) (list 0 5 10 5 6 5 0 2 0 0) 7) 4 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 0) (list 3 4) (list 5 0) (list 6 4) (list 7 1) (list 6 8) (list 9 5)) (list 9 0 9 6 7 6 5 7 1 10) 7) 14 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 2) (list 4 0) (list 5 2) (list 3 6) (list 7 2) (list 8 4) (list 9 2)) (list 9 4 0 8 0 7 8 1 10 9) 1) 46 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 1) (list 2 4) (list 5 4) (list 6 3) (list 6 7)) (list 9 9 5 5 7 9 6 9) 8) 10 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 2 3) (list 4 0) (list 5 2) (list 6 1)) (list 1 1 8 6 9 4 1) 10) 3 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 0 3)) (list 10 2 9 3) 6) 8 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 1 3) (list 3 4) (list 5 3) (list 4 6) (list 7 0) (list 1 8) (list 9 1)) (list 2 10 4 0 1 3 6 10 3 6) 8) 7 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 3 2) (list 4 3) (list 2 5) (list 1 6) (list 7 2)) (list 2 8 3 1 9 4 8 6) 6) 6 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 3 0)) (list 0 0 0 6) 0) 6 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2)) (list 7 6 0) 6) 4 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 1 3) (list 2 4) (list 5 4)) (list 4 2 7 7 4 9) 6) 5 0.001)\n    (check-within (candidate (list (list 0 1)) (list 10 9) 6) 8 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 1) (list 2 4) (list 5 0) (list 6 1)) (list 6 1 8 10 0 4 10) 5) 13 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 0 3) (list 0 4) (list 5 1) (list 6 4) (list 3 7) (list 5 8)) (list 9 0 4 2 0 0 3 1 8) 5) 8 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 2) (list 4 0)) (list 7 5 6 3 6) 8) 5 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 2) (list 4 2) (list 5 3) (list 6 1) (list 4 7) (list 7 8) (list 2 9)) (list 4 2 0 8 3 2 7 2 1 6) 2) 18 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 1 3) (list 4 0) (list 3 5) (list 6 3) (list 7 6) (list 8 0)) (list 3 3 4 3 1 3 1 6 3) 1) 18 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 2 3) (list 4 1) (list 4 5) (list 2 6)) (list 3 10 1 5 10 1 4) 2) 21 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0)) (list 7 10 8) 10) 7 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 1) (list 4 2) (list 5 3) (list 6 0) (list 7 4)) (list 1 1 7 10 5 1 7 8) 7) 2 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 3 2)) (list 5 2 10 5) 3) 12 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 3 2) (list 2 4) (list 4 5) (list 6 2) (list 5 7) (list 8 2)) (list 4 2 1 4 7 7 2 7 4) 2) 22 0.001)\n    (check-within (candidate (list (list 1 0)) (list 8 1) 7) 4 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 3 0) (list 3 4) (list 3 5) (list 6 0) (list 7 5)) (list 3 9 9 9 5 3 2 0) 9) 8 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 2) (list 4 1) (list 2 5)) (list 2 10 4 6 7 9) 5) 11 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 2) (list 3 4) (list 5 4) (list 2 6) (list 7 3)) (list 3 3 6 1 10 1 2 5) 3) 11 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 0 3) (list 1 4) (list 3 5) (list 0 6) (list 7 4) (list 1 8)) (list 9 7 9 0 3 6 9 4 0) 8) 13 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 0) (list 2 4) (list 1 5) (list 6 1) (list 7 3) (list 5 8)) (list 4 9 7 6 6 9 0 2 6) 2) 34 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2)) (list 4 4 6) 3) 5 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 3 1) (list 2 4) (list 4 5) (list 6 2) (list 4 7) (list 4 8) (list 9 1)) (list 8 6 10 9 3 10 3 7 9 1) 6) 21 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 0 3) (list 0 4) (list 5 3) (list 6 1) (list 7 5) (list 8 2) (list 9 3)) (list 1 3 10 0 7 2 8 10 0 5) 0) 46 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0)) (list 9 4 2) 0) 15 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1)) (list 0 9 3) 3) 4 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 2) (list 4 1) (list 3 5)) (list 10 10 8 6 0 0) 1) 30 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 3 0) (list 3 4) (list 5 1) (list 6 1) (list 7 2) (list 8 3) (list 0 9)) (list 6 4 5 2 1 10 10 9 8 10) 1) 55 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 2) (list 0 4) (list 1 5) (list 6 5) (list 7 1) (list 5 8) (list 1 9)) (list 8 0 9 5 9 6 2 8 1 8) 9) 10 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 2 3) (list 1 4) (list 3 5) (list 6 4) (list 7 6)) (list 8 2 3 10 4 5 8 8) 1) 40 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 0 3) (list 4 1) (list 5 2) (list 6 1) (list 7 1)) (list 3 9 4 4 3 4 10 4) 2) 25 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 3 0) (list 4 1) (list 5 1) (list 1 6) (list 1 7)) (list 7 4 7 2 5 8 0 7) 8) 8 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 1) (list 4 2) (list 5 4) (list 6 5) (list 7 5)) (list 4 5 7 5 0 4 6 7) 4) 8 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 1 3)) (list 8 4 10 7) 1) 25 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 2 3) (list 3 4) (list 4 5) (list 6 3) (list 3 7) (list 7 8) (list 9 8)) (list 0 2 1 5 8 2 5 3 7 6) 10) 0 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 3 0) (list 4 3) (list 1 5) (list 6 2) (list 7 3) (list 4 8) (list 4 9)) (list 6 5 1 8 8 10 5 7 7 1) 5) 19 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 2 3) (list 4 2) (list 5 0) (list 3 6) (list 7 5) (list 3 8) (list 9 8)) (list 9 6 4 10 4 1 6 1 5 9) 6) 17 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 1) (list 0 4) (list 3 5)) (list 1 9 3 4 9 3) 6) 5 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2)) (list 9 3 9) 3) 13 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 3 1) (list 2 4) (list 5 2) (list 6 5) (list 7 3) (list 8 5) (list 9 5)) (list 4 1 3 1 6 1 0 0 0 6) 1) 15 0.001)\n    (check-within (candidate (list (list 0 1)) (list 1 7) 10) 1 0.001)\n    (check-within (candidate (list (list 0 1)) (list 10 6) 10) 6 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 2 3) (list 0 4)) (list 6 7 8 1 9) 9) 7 0.001)\n    (check-within (candidate (list (list 0 1)) (list 6 6) 0) 12 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3) (list 1 4) (list 5 4) (list 2 6)) (list 9 3 7 2 3 1 2) 8) 6 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 3 1) (list 3 4) (list 2 5)) (list 4 0 3 10 5 8) 3) 12 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 2) (list 4 1) (list 4 5) (list 5 6)) (list 3 9 2 6 1 9 1) 10) 3 0.001)\n    (check-within (candidate (list (list 1 0)) (list 8 8) 8) 6 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 1 3) (list 0 4) (list 5 2)) (list 2 3 7 9 7 7) 2) 23 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 3 1) (list 4 0) (list 3 5) (list 2 6)) (list 6 9 7 7 7 9 7) 8) 11 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 0) (list 0 4) (list 5 2) (list 0 6)) (list 9 4 7 9 6 2 9) 10) 13 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 2) (list 4 2) (list 0 5) (list 6 4) (list 7 3)) (list 5 5 6 3 0 8 5 7) 7) 5 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 2 3) (list 4 0) (list 5 2) (list 2 6) (list 7 3)) (list 8 3 4 5 6 1 6 9) 6) 11 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 0 3) (list 4 0) (list 5 0) (list 6 1) (list 7 3) (list 8 1)) (list 1 6 3 10 1 9 7 8 7) 5) 17 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 3 1) (list 3 4) (list 2 5) (list 6 4) (list 5 7) (list 5 8) (list 6 9)) (list 3 6 5 6 6 9 5 5 3 10) 10) 4 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 3 2) (list 4 1) (list 4 5) (list 6 3) (list 7 2) (list 8 2) (list 3 9)) (list 2 2 0 0 4 8 8 5 0 10) 8) 1 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 3 0) (list 4 3) (list 4 5) (list 6 5) (list 7 5)) (list 8 5 7 3 2 3 5 3) 6) 8 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0)) (list 4 3 8) 3) 7 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 1) (list 4 2) (list 5 0) (list 4 6) (list 7 3) (list 8 2)) (list 8 9 0 3 9 7 4 8 7) 7) 12 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1)) (list 1 6 4) 4) 1 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1) (list 3 1)) (list 8 9 1 0) 3) 11 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 0 3) (list 4 3) (list 5 4) (list 4 6)) (list 4 1 4 4 0 5 5) 8) 3 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 2) (list 3 4) (list 4 5) (list 6 5) (list 7 3)) (list 10 9 6 8 9 9 0 7) 0) 58 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 1) (list 2 4) (list 3 5) (list 4 6) (list 5 7) (list 1 8) (list 2 9)) (list 9 5 7 6 2 5 0 7 5 7) 8) 8 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 1)) (list 4 10 2 2) 10) 4 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 1 3) (list 2 4) (list 3 5) (list 1 6) (list 7 4) (list 8 1) (list 0 9)) (list 6 7 1 2 3 7 3 4 8 4) 1) 35 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 1)) (list 4 8 10) 6) 5 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 2 3) (list 2 4) (list 5 3) (list 3 6) (list 7 2) (list 8 5)) (list 7 8 4 3 4 8 10 8 1) 7) 12 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 3 0) (list 4 2) (list 0 5)) (list 9 9 3 3 4 4) 4) 15 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 1 3) (list 2 4) (list 5 0)) (list 7 5 0 10 0 0) 8) 5 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 1) (list 2 3) (list 4 2) (list 0 5) (list 6 2) (list 4 7) (list 8 5) (list 0 9)) (list 5 2 8 8 6 0 3 2 2 5) 3) 18 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 3 0) (list 4 3) (list 1 5) (list 6 1) (list 7 4) (list 2 8)) (list 5 5 2 1 3 8 6 4 3) 1) 28 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2)) (list 8 2 5) 0) 15 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 3 2)) (list 10 9 2 0) 7) 7 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 2 3) (list 0 4) (list 2 5) (list 6 4) (list 7 1) (list 8 3)) (list 10 4 4 8 9 5 5 8 1) 0) 54 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 1 3) (list 2 4) (list 1 5) (list 6 2) (list 3 7) (list 8 4) (list 9 3)) (list 5 1 1 3 5 0 0 1 1 9) 5) 2 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 1) (list 1 4) (list 5 3)) (list 1 7 1 3 3 7) 7) 1 0.001)\n    (check-within (candidate (list (list 0 1) (list 1 2) (list 3 2) (list 4 3) (list 5 2) (list 0 6) (list 3 7) (list 5 8)) (list 9 1 3 2 1 3 4 2 6) 1) 22 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2)) (list 5 1 5) 10) 3 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 3 1) (list 1 4) (list 4 5)) (list 5 7 8 9 3 10) 7) 9 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 0 5) (list 5 6) (list 6 7) (list 8 5)) (list 8 3 0 3 4 1 4 0 7) 2) 16 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 3 0) (list 4 3) (list 2 5) (list 3 6)) (list 3 6 7 1 2 8 0) 9) 4 0.001)\n    (check-within (candidate (list (list 1 0)) (list 4 0) 9) 2 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 3 1) (list 4 1) (list 5 2) (list 6 1) (list 4 7) (list 5 8)) (list 9 7 8 9 6 8 9 1 6) 1) 54 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 2) (list 1 3) (list 0 4) (list 5 4) (list 6 0) (list 3 7)) (list 7 10 8 4 6 0 6 2) 4) 21 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3181_leftmostBuildingQueries", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.\n;; If a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].\n;; You are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.\n;; Return an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.\n;; Example 1:\n;; Input: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\n;; Output: [2,5,-1,5,2]\n;; Explanation: In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \n;; In the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \n;; In the third query, Alice cannot meet Bob since Alice cannot move to any other building.\n;; In the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\n;; In the fifth query, Alice and Bob are already in the same building.  \n;; For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\n;; For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n;; Example 2:\n;; Input: heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\n;; Output: [7,6,-1,4,6]\n;; Explanation: In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\n;; In the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\n;; In the third query, Alice cannot meet Bob since Bob cannot move to any other building.\n;; In the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\n;; In the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\n;; For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\n;; For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n;; Constraints:\n;; 1 <= heights.length <= 5 * 104\n;; 1 <= heights[i] <= 109\n;; 1 <= queries.length <= 5 * 104\n;; queries[i] = [ai, bi]\n;; 0 <= ai, bi <= heights.length - 1\n(define (leftmostBuildingQueries heights queries)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3181_leftmostBuildingQueries.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate leftmostBuildingQueries))\n    (check-within (candidate (list 6 4 8 5 2 7) (list (list 0 1) (list 0 3) (list 2 4) (list 3 4) (list 2 2))) (list 2 5 -1 5 2) 0.001)\n    (check-within (candidate (list 5 3 8 2 6 1 4 6) (list (list 0 7) (list 3 5) (list 5 2) (list 3 0) (list 1 6))) (list 7 6 -1 4 6) 0.001)\n    (check-within (candidate (list 1) (list (list 0 0))) (list 0) 0.001)\n    (check-within (candidate (list 1000000000) (list (list 0 0))) (list 0) 0.001)\n    (check-within (candidate (list 1 2) (list (list 0 0) (list 0 1) (list 1 0) (list 1 1))) (list 0 1 1 1) 0.001)\n    (check-within (candidate (list 2 1) (list (list 0 0) (list 0 1) (list 1 0) (list 1 1))) (list 0 -1 -1 1) 0.001)\n    (check-within (candidate (list 1 2 3) (list (list 0 0) (list 0 1) (list 0 2) (list 1 0) (list 1 1) (list 1 2) (list 2 0) (list 2 1) (list 2 2))) (list 0 1 2 1 1 2 2 2 2) 0.001)\n    (check-within (candidate (list 1 3 2) (list (list 0 0) (list 0 1) (list 0 2) (list 1 0) (list 1 1) (list 1 2) (list 2 0) (list 2 1) (list 2 2))) (list 0 1 2 1 1 -1 2 -1 2) 0.001)\n    (check-within (candidate (list 2 1 3) (list (list 0 0) (list 0 1) (list 0 2) (list 1 0) (list 1 1) (list 1 2) (list 2 0) (list 2 1) (list 2 2))) (list 0 2 2 2 1 2 2 2 2) 0.001)\n    (check-within (candidate (list 2 3 1) (list (list 0 0) (list 0 1) (list 0 2) (list 1 0) (list 1 1) (list 1 2) (list 2 0) (list 2 1) (list 2 2))) (list 0 1 -1 1 1 -1 -1 -1 2) 0.001)\n    (check-within (candidate (list 3 1 2) (list (list 0 0) (list 0 1) (list 0 2) (list 1 0) (list 1 1) (list 1 2) (list 2 0) (list 2 1) (list 2 2))) (list 0 -1 -1 -1 1 2 -1 2 2) 0.001)\n    (check-within (candidate (list 3 2 1) (list (list 0 0) (list 0 1) (list 0 2) (list 1 0) (list 1 1) (list 1 2) (list 2 0) (list 2 1) (list 2 2))) (list 0 -1 -1 -1 1 -1 -1 -1 2) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 3 1 1 2 3 2 2 2 3 3 3 3 3) 0.001)\n    (check-within (candidate (list 1 2 4 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 3 1 1 2 3 2 2 2 -1 3 3 -1 3) 0.001)\n    (check-within (candidate (list 1 3 2 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 3 1 1 3 3 2 3 2 3 3 3 3 3) 0.001)\n    (check-within (candidate (list 1 3 4 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 3 1 1 2 -1 2 2 2 -1 3 -1 -1 3) 0.001)\n    (check-within (candidate (list 1 4 2 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 3 1 1 -1 -1 2 -1 2 3 3 -1 3 3) 0.001)\n    (check-within (candidate (list 1 4 3 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 3 1 1 -1 -1 2 -1 2 -1 3 -1 -1 3) 0.001)\n    (check-within (candidate (list 2 1 3 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 2 2 3 2 1 2 3 2 2 2 3 3 3 3 3) 0.001)\n    (check-within (candidate (list 2 1 4 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 2 2 3 2 1 2 3 2 2 2 -1 3 3 -1 3) 0.001)\n    (check-within (candidate (list 2 3 1 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 3 3 1 1 3 3 3 3 2 3 3 3 3 3) 0.001)\n    (check-within (candidate (list 2 3 4 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 -1 1 1 2 -1 2 2 2 -1 -1 -1 -1 3) 0.001)\n    (check-within (candidate (list 2 4 1 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 3 3 1 1 -1 -1 3 -1 2 3 3 -1 3 3) 0.001)\n    (check-within (candidate (list 2 4 3 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 2 -1 1 1 -1 -1 2 -1 2 -1 -1 -1 -1 3) 0.001)\n    (check-within (candidate (list 3 1 2 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 3 3 3 3 1 2 3 3 2 2 3 3 3 3 3) 0.001)\n    (check-within (candidate (list 3 1 4 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 2 2 -1 2 1 2 3 2 2 2 -1 -1 3 -1 3) 0.001)\n    (check-within (candidate (list 3 2 1 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 3 3 3 3 1 3 3 3 3 2 3 3 3 3 3) 0.001)\n    (check-within (candidate (list 3 2 4 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 2 2 -1 2 1 2 -1 2 2 2 -1 -1 -1 -1 3) 0.001)\n    (check-within (candidate (list 3 4 1 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 -1 -1 1 1 -1 -1 -1 -1 2 3 -1 -1 3 3) 0.001)\n    (check-within (candidate (list 3 4 2 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 1 -1 -1 1 1 -1 -1 -1 -1 2 -1 -1 -1 -1 3) 0.001)\n    (check-within (candidate (list 4 1 2 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 -1 -1 -1 -1 1 2 3 -1 2 2 3 -1 3 3 3) 0.001)\n    (check-within (candidate (list 4 1 3 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 -1 -1 -1 -1 1 2 3 -1 2 2 -1 -1 3 -1 3) 0.001)\n    (check-within (candidate (list 4 2 1 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 -1 -1 -1 -1 1 3 3 -1 3 2 3 -1 3 3 3) 0.001)\n    (check-within (candidate (list 4 2 3 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 -1 -1 -1 -1 1 2 -1 -1 2 2 -1 -1 -1 -1 3) 0.001)\n    (check-within (candidate (list 4 3 1 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 -1 -1 -1 -1 1 -1 -1 -1 -1 2 3 -1 -1 3 3) 0.001)\n    (check-within (candidate (list 4 3 2 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 3 0) (list 3 1) (list 3 2) (list 3 3))) (list 0 -1 -1 -1 -1 1 -1 -1 -1 -1 2 -1 -1 -1 -1 3) 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 4 2 2 2 3 4 3 3 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 1 2 3 5 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 4 2 2 2 3 4 3 3 3 3 -1 4 4 4 -1 4) 0.001)\n    (check-within (candidate (list 1 2 4 3 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 4 2 2 2 4 4 3 3 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 1 2 4 5 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 4 2 2 2 3 -1 3 3 3 3 -1 4 4 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 2 5 3 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 4 2 2 2 -1 -1 3 3 -1 3 4 4 4 -1 4 4) 0.001)\n    (check-within (candidate (list 1 2 5 4 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 4 2 2 2 -1 -1 3 3 -1 3 -1 4 4 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 3 2 4 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 3 3 4 2 3 2 3 4 3 3 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 1 3 2 5 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 3 3 4 2 3 2 3 4 3 3 3 3 -1 4 4 4 -1 4) 0.001)\n    (check-within (candidate (list 1 3 4 2 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 4 4 2 2 2 4 4 3 4 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 1 3 4 5 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 -1 2 2 2 3 -1 3 3 3 3 -1 4 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 3 5 2 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 4 4 2 2 2 -1 -1 3 4 -1 3 4 4 4 -1 4 4) 0.001)\n    (check-within (candidate (list 1 3 5 4 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 3 -1 2 2 2 -1 -1 3 3 -1 3 -1 4 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 4 2 3 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 4 4 4 2 4 2 3 4 3 4 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 1 4 2 5 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 3 3 -1 2 3 2 3 4 3 3 3 3 -1 4 -1 4 -1 4) 0.001)\n    (check-within (candidate (list 1 4 3 2 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 4 4 4 2 4 2 4 4 3 4 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 1 4 3 5 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 3 3 -1 2 3 2 3 -1 3 3 3 3 -1 4 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 4 5 2 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 -1 -1 2 2 2 -1 -1 3 -1 -1 3 4 4 -1 -1 4 4) 0.001)\n    (check-within (candidate (list 1 4 5 3 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 2 -1 -1 2 2 2 -1 -1 3 -1 -1 3 -1 4 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 5 2 3 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 -1 -1 -1 2 -1 2 3 4 3 -1 3 3 4 4 -1 4 4 4) 0.001)\n    (check-within (candidate (list 1 5 2 4 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 -1 -1 -1 2 -1 2 3 4 3 -1 3 3 -1 4 -1 4 -1 4) 0.001)\n    (check-within (candidate (list 1 5 3 2 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 -1 -1 -1 2 -1 2 4 4 3 -1 4 3 4 4 -1 4 4 4) 0.001)\n    (check-within (candidate (list 1 5 3 4 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 -1 -1 -1 2 -1 2 3 -1 3 -1 3 3 -1 4 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 1 5 4 2 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 -1 -1 -1 2 -1 2 -1 -1 3 -1 -1 3 4 4 -1 -1 4 4) 0.001)\n    (check-within (candidate (list 1 5 4 3 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 4 1 1 -1 -1 -1 2 -1 2 -1 -1 3 -1 -1 3 -1 4 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 1 3 4 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 4 2 1 2 3 4 2 2 2 3 4 3 3 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 2 1 3 5 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 4 2 1 2 3 4 2 2 2 3 4 3 3 3 3 -1 4 4 4 -1 4) 0.001)\n    (check-within (candidate (list 2 1 4 3 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 4 2 1 2 3 4 2 2 2 4 4 3 3 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 2 1 4 5 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 4 2 1 2 3 4 2 2 2 3 -1 3 3 3 3 -1 4 4 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 1 5 3 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 4 2 1 2 3 4 2 2 2 -1 -1 3 3 -1 3 4 4 4 -1 4 4) 0.001)\n    (check-within (candidate (list 2 1 5 4 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 4 2 1 2 3 4 2 2 2 -1 -1 3 3 -1 3 -1 4 4 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 3 1 4 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 4 1 1 3 3 4 3 3 2 3 4 3 3 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 2 3 1 5 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 4 1 1 3 3 4 3 3 2 3 4 3 3 3 3 -1 4 4 4 -1 4) 0.001)\n    (check-within (candidate (list 2 3 4 1 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 4 4 1 1 2 4 4 2 2 2 4 4 4 4 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 2 3 4 5 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 -1 1 1 2 3 -1 2 2 2 3 -1 3 3 3 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 3 5 1 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 4 4 1 1 2 4 4 2 2 2 -1 -1 4 4 -1 3 4 4 4 -1 4 4) 0.001)\n    (check-within (candidate (list 2 3 5 4 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 -1 1 1 2 3 -1 2 2 2 -1 -1 3 3 -1 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 4 1 3 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 4 1 1 4 4 4 3 4 2 3 4 3 4 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 2 4 1 5 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 4 1 1 3 3 -1 3 3 2 3 4 3 3 3 3 -1 4 -1 4 -1 4) 0.001)\n    (check-within (candidate (list 2 4 3 1 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 4 4 1 1 4 4 4 2 4 2 4 4 4 4 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 2 4 3 5 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 -1 1 1 3 3 -1 2 3 2 3 -1 3 3 3 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 4 5 1 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 4 4 1 1 2 -1 -1 2 2 2 -1 -1 4 -1 -1 3 4 4 -1 -1 4 4) 0.001)\n    (check-within (candidate (list 2 4 5 3 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 -1 1 1 2 -1 -1 2 2 2 -1 -1 3 -1 -1 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 5 1 3 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 4 1 1 -1 -1 -1 3 -1 2 3 4 3 -1 3 3 4 4 -1 4 4 4) 0.001)\n    (check-within (candidate (list 2 5 1 4 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 4 1 1 -1 -1 -1 3 -1 2 3 4 3 -1 3 3 -1 4 -1 4 -1 4) 0.001)\n    (check-within (candidate (list 2 5 3 1 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 4 4 1 1 -1 -1 -1 2 -1 2 4 4 4 -1 4 3 4 4 -1 4 4 4) 0.001)\n    (check-within (candidate (list 2 5 3 4 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 -1 1 1 -1 -1 -1 2 -1 2 3 -1 3 -1 3 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 2 5 4 1 3) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 4 4 1 1 -1 -1 -1 2 -1 2 -1 -1 4 -1 -1 3 4 4 -1 -1 4 4) 0.001)\n    (check-within (candidate (list 2 5 4 3 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 2 3 -1 1 1 -1 -1 -1 2 -1 2 -1 -1 3 -1 -1 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 3 1 2 4 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 3 3 3 4 3 1 2 3 4 3 2 2 3 4 3 3 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 1 2 5 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 3 3 3 4 3 1 2 3 4 3 2 2 3 4 3 3 3 3 -1 4 4 4 -1 4) 0.001)\n    (check-within (candidate (list 3 1 4 2 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 4 4 2 1 2 3 4 2 2 2 4 4 4 3 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 1 4 5 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 -1 2 1 2 3 4 2 2 2 3 -1 3 3 3 3 -1 -1 4 -1 -1 4) 0.001)\n    (check-within (candidate (list 3 1 5 2 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 4 4 2 1 2 3 4 2 2 2 -1 -1 4 3 -1 3 4 4 4 -1 4 4) 0.001)\n    (check-within (candidate (list 3 1 5 4 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 -1 2 1 2 3 4 2 2 2 -1 -1 3 3 -1 3 -1 -1 4 -1 -1 4) 0.001)\n    (check-within (candidate (list 3 2 1 4 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 3 3 3 4 3 1 3 3 4 3 3 2 3 4 3 3 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 1 5 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 3 3 3 4 3 1 3 3 4 3 3 2 3 4 3 3 3 3 -1 4 4 4 -1 4) 0.001)\n    (check-within (candidate (list 3 2 4 1 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 4 4 2 1 2 4 4 2 2 2 4 4 4 4 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 4 5 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 -1 2 1 2 3 -1 2 2 2 3 -1 3 3 3 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 3 2 5 1 4) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 4 4 2 1 2 4 4 2 2 2 -1 -1 4 4 -1 3 4 4 4 -1 4 4) 0.001)\n    (check-within (candidate (list 3 2 5 4 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 2 2 3 -1 2 1 2 3 -1 2 2 2 -1 -1 3 3 -1 3 -1 -1 -1 -1 -1 4) 0.001)\n    (check-within (candidate (list 3 4 1 2 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 4 4 4 1 1 4 4 4 4 4 2 3 4 4 4 3 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 4 1 5 2) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 -1 1 1 3 3 -1 3 3 2 3 4 3 3 3 3 -1 -1 -1 4 -1 4) 0.001)\n    (check-within (candidate (list 3 4 2 1 5) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 4 4 4 1 1 4 4 4 4 4 2 4 4 4 4 4 3 4 4 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 4 2 5 1) (list (list 0 0) (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 1 0) (list 1 1) (list 1 2) (list 1 3) (list 1 4) (list 2 0) (list 2 1) (list 2 2) (list 2 3) (list 2 4) (list 3 0) (list 3 1) (list 3 2) (list 3 3) (list 3 4) (list 4 0) (list 4 1) (list 4 2) (list 4 3) (list 4 4))) (list 0 1 3 3 -1 1 1 3 3 -1 3 3 2 3 -1 3 3 3 3 -1 -1 -1 -1 -1 4) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3183_findKOr", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums, and an integer k.\n;; The K-or of nums is a non-negative integer that satisfies the following:\n;;  * The ith bit is set in the K-or if and only if there are at least k elements of nums in which bit i is set.\n;; Return the K-or of nums.\n;; Note that a bit i is set in x if (2i AND x) == 2i, where AND is the bitwise AND operator.\n;; Example 1:\n;; Input: nums = [7,12,9,8,9,15], k = 4\n;; Output: 9\n;; Explanation: Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].\n;; Bit 1 is set at nums[0], and nums[5].\n;; Bit 2 is set at nums[0], nums[1], and nums[5].\n;; Bit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].\n;; Only bits 0 and 3 are set in at least k elements of the array, and bits i >= 4 are not set in any of the array's elements. Hence, the answer is 2^0 + 2^3 = 9.\n;; Example 2:\n;; Input: nums = [2,12,1,11,4,5], k = 6\n;; Output: 0\n;; Explanation: Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.\n;; Example 3:\n;; Input: nums = [10,8,5,9,11,6,8], k = 1\n;; Output: 15\n;; Explanation: Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.\n;; Constraints:\n;;  * 1 <= nums.length <= 50\n;;  * 0 <= nums[i] < 231\n;;  * 1 <= k <= nums.length\n(define (findKOr nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3183_findKOr.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findKOr))\n    (check-within (candidate (list 7 12 9 8 9 15) 4) 9 0.001)\n    (check-within (candidate (list 2 12 1 11 4 5) 6) 0 0.001)\n    (check-within (candidate (list 10 8 5 9 11 6 8) 1) 15 0.001)\n    (check-within (candidate (list 14 7 12 9 8 9 1 15) 4) 13 0.001)\n    (check-within (candidate (list 2 12 1 11 4 5) 3) 5 0.001)\n    (check-within (candidate (list 10 8 5 10 11 11 6 8) 1) 15 0.001)\n    (check-within (candidate (list 0) 1) 0 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n    (check-within (candidate (list 2) 1) 2 0.001)\n    (check-within (candidate (list 3) 1) 3 0.001)\n    (check-within (candidate (list 4) 1) 4 0.001)\n    (check-within (candidate (list 5) 1) 5 0.001)\n    (check-within (candidate (list 6) 1) 6 0.001)\n    (check-within (candidate (list 7) 1) 7 0.001)\n    (check-within (candidate (list 8) 1) 8 0.001)\n    (check-within (candidate (list 9) 1) 9 0.001)\n    (check-within (candidate (list 10) 1) 10 0.001)\n    (check-within (candidate (list 11) 1) 11 0.001)\n    (check-within (candidate (list 12) 1) 12 0.001)\n    (check-within (candidate (list 13) 1) 13 0.001)\n    (check-within (candidate (list 14) 1) 14 0.001)\n    (check-within (candidate (list 15) 1) 15 0.001)\n    (check-within (candidate (list 16) 1) 16 0.001)\n    (check-within (candidate (list 17) 1) 17 0.001)\n    (check-within (candidate (list 18) 1) 18 0.001)\n    (check-within (candidate (list 19) 1) 19 0.001)\n    (check-within (candidate (list 20) 1) 20 0.001)\n    (check-within (candidate (list 21) 1) 21 0.001)\n    (check-within (candidate (list 22) 1) 22 0.001)\n    (check-within (candidate (list 23) 1) 23 0.001)\n    (check-within (candidate (list 24) 1) 24 0.001)\n    (check-within (candidate (list 25) 1) 25 0.001)\n    (check-within (candidate (list 26) 1) 26 0.001)\n    (check-within (candidate (list 27) 1) 27 0.001)\n    (check-within (candidate (list 28) 1) 28 0.001)\n    (check-within (candidate (list 29) 1) 29 0.001)\n    (check-within (candidate (list 30) 1) 30 0.001)\n    (check-within (candidate (list 31) 1) 31 0.001)\n    (check-within (candidate (list 22 7 27 30 15 30 28) 4) 30 0.001)\n    (check-within (candidate (list 24 18 3 23 16 11 27 18 5 29) 6) 19 0.001)\n    (check-within (candidate (list 14 1 2 28 4 15 3 12) 2) 15 0.001)\n    (check-within (candidate (list 7 18 25 11 2) 5) 0 0.001)\n    (check-within (candidate (list 0 4) 2) 0 0.001)\n    (check-within (candidate (list 17 5 14 16 24 30 3 19 31) 1) 31 0.001)\n    (check-within (candidate (list 14 20 23 7 1 12 24 19) 7) 0 0.001)\n    (check-within (candidate (list 5 31 29 22 8 6 23) 4) 23 0.001)\n    (check-within (candidate (list 9 10 30 0 7 19 14 19 20 3) 4) 31 0.001)\n    (check-within (candidate (list 25 6 5 30 27 11 10 30) 2) 31 0.001)\n    (check-within (candidate (list 0 15 16 6 19 5 24 17) 3) 23 0.001)\n    (check-within (candidate (list 19 8 2 28 4 5) 5) 0 0.001)\n    (check-within (candidate (list 13 9 1 15 9 2 19 19) 3) 11 0.001)\n    (check-within (candidate (list 16 6 16 22 8 2 25 30) 1) 31 0.001)\n    (check-within (candidate (list 14 28 23 22) 2) 30 0.001)\n    (check-within (candidate (list 6 26) 2) 2 0.001)\n    (check-within (candidate (list 14 9 22 30 15) 4) 14 0.001)\n    (check-within (candidate (list 12 13 16 25 12 4 8 29) 6) 8 0.001)\n    (check-within (candidate (list 27 29) 2) 25 0.001)\n    (check-within (candidate (list 9 27 27 20 24 13 25 8) 6) 8 0.001)\n    (check-within (candidate (list 22 26 18 26 1) 1) 31 0.001)\n    (check-within (candidate (list 20 20 31 19 29 19) 2) 31 0.001)\n    (check-within (candidate (list 5 8 27 23 3) 2) 31 0.001)\n    (check-within (candidate (list 4 23 0 20 4 19 14 22 26 2) 9) 0 0.001)\n    (check-within (candidate (list 31 26 21 4 9 11 13 24 23 5) 10) 0 0.001)\n    (check-within (candidate (list 4 22) 2) 4 0.001)\n    (check-within (candidate (list 22 17 20 3 21 5 20 25 16) 4) 21 0.001)\n    (check-within (candidate (list 16 15 13 26 15 23 0 12) 4) 15 0.001)\n    (check-within (candidate (list 4 11 14) 1) 15 0.001)\n    (check-within (candidate (list 10 26 27 25 3 21 9 3 22) 8) 0 0.001)\n    (check-within (candidate (list 4 11 16) 2) 0 0.001)\n    (check-within (candidate (list 9 27 19 9 24 11) 3) 27 0.001)\n    (check-within (candidate (list 29 19 27 14) 1) 31 0.001)\n    (check-within (candidate (list 27 31 21 8 25) 2) 31 0.001)\n    (check-within (candidate (list 14 1 13 22 27) 5) 0 0.001)\n    (check-within (candidate (list 14 15 17 23 29) 1) 31 0.001)\n    (check-within (candidate (list 19 21) 2) 17 0.001)\n    (check-within (candidate (list 29 9 18 0 30 5 1 9) 1) 31 0.001)\n    (check-within (candidate (list 6 31 11 7 6 2 26 19 17 13) 10) 0 0.001)\n    (check-within (candidate (list 15 8 27 28) 1) 31 0.001)\n    (check-within (candidate (list 28 24 20 31 23 1) 2) 31 0.001)\n    (check-within (candidate (list 8 13 27 24 20 28 15 21 23 6) 9) 0 0.001)\n    (check-within (candidate (list 31 6) 2) 6 0.001)\n    (check-within (candidate (list 3 14 11 17 9) 1) 31 0.001)\n    (check-within (candidate (list 14 11) 2) 10 0.001)\n    (check-within (candidate (list 2 9 11 25 3 2 26 21 13 11) 1) 31 0.001)\n    (check-within (candidate (list 26 7 23 0 16 31 12 18 24) 4) 30 0.001)\n    (check-within (candidate (list 11 30 30 17 10 27 6 31 0) 4) 31 0.001)\n    (check-within (candidate (list 11 9 18 30 27 20 2 17 18 4) 2) 31 0.001)\n    (check-within (candidate (list 2 1 0 30 29 14 13 26 10 22) 10) 0 0.001)\n    (check-within (candidate (list 21 30 30 17 23 8 26 9) 6) 16 0.001)\n    (check-within (candidate (list 16 10) 1) 26 0.001)\n    (check-within (candidate (list 26 12 19 22 5 6 19 30 24 11) 10) 0 0.001)\n    (check-within (candidate (list 20 10 14) 2) 14 0.001)\n    (check-within (candidate (list 23 17 18 30 3) 1) 31 0.001)\n    (check-within (candidate (list 13 16 12) 1) 29 0.001)\n    (check-within (candidate (list 17 12 5 13 23 19) 3) 21 0.001)\n    (check-within (candidate (list 5 4 3) 2) 5 0.001)\n    (check-within (candidate (list 6 28 1 3 2) 1) 31 0.001)\n    (check-within (candidate (list 28 3 15 30 10 29) 4) 14 0.001)\n    (check-within (candidate (list 0 31 13 24 16 21) 3) 29 0.001)\n    (check-within (candidate (list 11 20 28 29 3 4) 2) 31 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3184_maxBalancedSubsequenceSum", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums.\n;; A subsequence of nums having length k and consisting of indices i0\u00a0<\u00a0i1 <\u00a0... < ik-1 is balanced if the following holds:\n;;  * nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1].\n;; A subsequence of nums having length 1 is considered balanced.\n;; Return an integer denoting the maximum possible sum of elements in a balanced subsequence of nums.\n;; A subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n;; Example 1:\n;; Input: nums = [3,3,5,6]\n;; Output: 14\n;; Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.\n;; nums[2] - nums[0] >= 2 - 0.\n;; nums[3] - nums[2] >= 3 - 2.\n;; Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\n;; The subsequence consisting of indices 1, 2, and 3 is also valid.\n;; It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.\n;; Example 2:\n;; Input: nums = [5,-1,-3,8]\n;; Output: 13\n;; Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.\n;; nums[3] - nums[0] >= 3 - 0.\n;; Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\n;; It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.\n;; Example 3:\n;; Input: nums = [-2,-1]\n;; Output: -1\n;; Explanation: In this example, the subsequence [-1] can be selected.\n;; It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\n;; Constraints:\n;;  * 1 <= nums.length <= 105\n;;  * -109 <= nums[i] <= 109\n(define (maxBalancedSubsequenceSum nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3184_maxBalancedSubsequenceSum.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxBalancedSubsequenceSum))\n    (check-within (candidate (list 3 3 5 6)) 14 0.001)\n    (check-within (candidate (list 5 -1 -3 8)) 13 0.001)\n    (check-within (candidate (list -2 -1)) -1 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -47)) -47 0.001)\n    (check-within (candidate (list -8)) -8 0.001)\n    (check-within (candidate (list -7)) -7 0.001)\n    (check-within (candidate (list -6)) -6 0.001)\n    (check-within (candidate (list -5)) -5 0.001)\n    (check-within (candidate (list -3)) -3 0.001)\n    (check-within (candidate (list -2)) -2 0.001)\n    (check-within (candidate (list -1)) -1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 3)) 3 0.001)\n    (check-within (candidate (list 4)) 4 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 8)) 8 0.001)\n    (check-within (candidate (list 9)) 9 0.001)\n    (check-within (candidate (list 45)) 45 0.001)\n    (check-within (candidate (list -9 -5)) -5 0.001)\n    (check-within (candidate (list -6 8)) 8 0.001)\n    (check-within (candidate (list -5 -1)) -1 0.001)\n    (check-within (candidate (list -5 0)) 0 0.001)\n    (check-within (candidate (list -3 -1)) -1 0.001)\n    (check-within (candidate (list -2 3)) 3 0.001)\n    (check-within (candidate (list -1 -5)) -1 0.001)\n    (check-within (candidate (list -1 0)) 0 0.001)\n    (check-within (candidate (list -1 3)) 3 0.001)\n    (check-within (candidate (list 0 -3)) 0 0.001)\n    (check-within (candidate (list 0 5)) 5 0.001)\n    (check-within (candidate (list 2 7)) 9 0.001)\n    (check-within (candidate (list 5 -1)) 5 0.001)\n    (check-within (candidate (list 6 -8)) 6 0.001)\n    (check-within (candidate (list 7 -2)) 7 0.001)\n    (check-within (candidate (list 7 2)) 7 0.001)\n    (check-within (candidate (list 8 -9)) 8 0.001)\n    (check-within (candidate (list 9 -9)) 9 0.001)\n    (check-within (candidate (list -43 23 -49)) 23 0.001)\n    (check-within (candidate (list -9 -6 -5)) -5 0.001)\n    (check-within (candidate (list -9 -2 4)) 4 0.001)\n    (check-within (candidate (list -9 5 -6)) 5 0.001)\n    (check-within (candidate (list -8 9 -9)) 9 0.001)\n    (check-within (candidate (list -5 -1 -9)) -1 0.001)\n    (check-within (candidate (list -4 -9 3)) 3 0.001)\n    (check-within (candidate (list -4 -2 -7)) -2 0.001)\n    (check-within (candidate (list -3 -4 -2)) -2 0.001)\n    (check-within (candidate (list -2 -1 -2)) -1 0.001)\n    (check-within (candidate (list -1 -6 1)) 1 0.001)\n    (check-within (candidate (list 0 -6 -4)) 0 0.001)\n    (check-within (candidate (list 0 -5 4)) 4 0.001)\n    (check-within (candidate (list 1 -4 4)) 5 0.001)\n    (check-within (candidate (list 4 1 -8)) 4 0.001)\n    (check-within (candidate (list 5 -6 -8)) 5 0.001)\n    (check-within (candidate (list 5 -4 -5)) 5 0.001)\n    (check-within (candidate (list 6 -3 9)) 15 0.001)\n    (check-within (candidate (list 6 0 2)) 6 0.001)\n    (check-within (candidate (list 7 -6 0)) 7 0.001)\n    (check-within (candidate (list 8 -7 2)) 8 0.001)\n    (check-within (candidate (list 14 -21 -18)) 14 0.001)\n    (check-within (candidate (list -9 7 -8 1)) 7 0.001)\n    (check-within (candidate (list -8 2 -5 -7)) 2 0.001)\n    (check-within (candidate (list -7 1 -2 -8)) 1 0.001)\n    (check-within (candidate (list -6 -8 7 -3)) 7 0.001)\n    (check-within (candidate (list -5 -1 0 6)) 6 0.001)\n    (check-within (candidate (list -4 8 9 2)) 17 0.001)\n    (check-within (candidate (list -4 9 7 -4)) 9 0.001)\n    (check-within (candidate (list -2 -6 0 -5)) 0 0.001)\n    (check-within (candidate (list -2 -3 9 3)) 9 0.001)\n    (check-within (candidate (list 0 -6 -3 5)) 5 0.001)\n    (check-within (candidate (list 0 1 0 -2)) 1 0.001)\n    (check-within (candidate (list 1 -7 -8 6)) 7 0.001)\n    (check-within (candidate (list 3 -7 9 -3)) 12 0.001)\n    (check-within (candidate (list 3 -7 9 2)) 12 0.001)\n    (check-within (candidate (list 4 -8 -1 8)) 12 0.001)\n    (check-within (candidate (list 5 4 1 0)) 5 0.001)\n    (check-within (candidate (list 7 7 -9 -4)) 7 0.001)\n    (check-within (candidate (list 8 0 4 -2)) 8 0.001)\n    (check-within (candidate (list 9 7 -2 1)) 9 0.001)\n    (check-within (candidate (list 34 34 32 33)) 65 0.001)\n    (check-within (candidate (list -9 -6 -8 -2 4)) 4 0.001)\n    (check-within (candidate (list -9 -5 2 2 7)) 9 0.001)\n    (check-within (candidate (list -9 -2 -6 0 6)) 6 0.001)\n    (check-within (candidate (list -7 0 -8 -9 -3)) 0 0.001)\n    (check-within (candidate (list -7 0 9 -4 9)) 9 0.001)\n    (check-within (candidate (list -6 -2 -8 -4 -8)) -2 0.001)\n    (check-within (candidate (list -6 2 -3 0 -5)) 2 0.001)\n    (check-within (candidate (list -6 3 -6 -3 -2)) 3 0.001)\n    (check-within (candidate (list -5 -9 1 3 -5)) 4 0.001)\n    (check-within (candidate (list -5 1 5 -5 -1)) 6 0.001)\n    (check-within (candidate (list -3 7 0 4 6)) 10 0.001)\n    (check-within (candidate (list -2 -2 9 -2 -8)) 9 0.001)\n    (check-within (candidate (list 0 -6 -9 -8 -3)) 0 0.001)\n    (check-within (candidate (list 0 -2 -7 -1 -8)) 0 0.001)\n    (check-within (candidate (list 0 -1 -4 -6 -9)) 0 0.001)\n    (check-within (candidate (list 1 -3 -8 9 -9)) 10 0.001)\n    (check-within (candidate (list 2 -6 -2 0 -3)) 2 0.001)\n    (check-within (candidate (list 2 9 -4 4 2)) 11 0.001)\n    (check-within (candidate (list 4 -1 5 -1 -7)) 5 0.001)\n    (check-within (candidate (list 4 6 -8 -8 -5)) 10 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3188_findChampion", "language": "rkt", "prompt": "#lang racket\n;; There are n teams numbered from 0 to n - 1 in a tournament.\n;; Given a 0-indexed 2D boolean matrix grid of size n * n. For all i, j that 0 <= i, j <= n - 1 and i != j team i is stronger than team j if grid[i][j] == 1, otherwise, team j is stronger than team i.\n;; Team a will be the champion of the tournament if there is no team b that is stronger than team a.\n;; Return the team that will be the champion of the tournament.\n;; Example 1:\n;; Input: grid = [[0,1],[0,0]]\n;; Output: 0\n;; Explanation: There are two teams in this tournament.\n;; grid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion.\n;; Example 2:\n;; Input: grid = [[0,0,1],[1,0,1],[0,0,0]]\n;; Output: 1\n;; Explanation: There are three teams in this tournament.\n;; grid[1][0] == 1 means that team 1 is stronger than team 0.\n;; grid[1][2] == 1 means that team 1 is stronger than team 2.\n;; So team 1 will be the champion.\n;; Constraints:\n;;  * n == grid.length\n;;  * n == grid[i].length\n;;  * 2 <= n <= 100\n;;  * grid[i][j] is either 0 or 1.\n;;  * For all i grid[i][i] is 0.\n;;  * For all i, j that i != j, grid[i][j] != grid[j][i].\n;;  * The input is generated such that if team a is stronger than team b and team b is stronger than team c, then team a is stronger than team c.\n(define (findChampion grid)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3188_findChampion.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findChampion))\n    (check-within (candidate (list (list 0 1) (list 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 0 1) (list 1 0 1) (list 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0) (list 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 1 0 0) (list 1 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 1 0 1) (list 1 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 1 0) (list 0 0 0) (list 1 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 1) (list 0 0 0) (list 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1) (list 0 0 1) (list 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 0 0 0) (list 1 0 0 0) (list 1 1 0 0) (list 1 1 1 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0 0) (list 1 0 0 0) (list 1 1 0 1) (list 1 1 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0) (list 1 0 0 1) (list 1 1 0 1) (list 1 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0) (list 1 0 1 0) (list 1 0 0 0) (list 1 1 1 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0 0) (list 1 0 1 1) (list 1 0 0 0) (list 1 0 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 0) (list 1 0 1 1) (list 1 0 0 1) (list 1 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 1) (list 1 0 0 1) (list 1 1 0 1) (list 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 1) (list 1 0 1 1) (list 1 0 0 1) (list 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 0) (list 1 0 1 0) (list 0 0 0 0) (list 1 1 1 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 1 0) (list 1 0 1 1) (list 0 0 0 0) (list 1 0 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 1 0 1 1) (list 0 0 0 0) (list 0 0 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 1 0 1 1) (list 0 0 0 1) (list 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 1 0 0) (list 0 0 0 0) (list 1 1 0 0) (list 1 1 1 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 0 0) (list 0 0 0 0) (list 1 1 0 1) (list 1 1 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 1) (list 0 0 0 0) (list 1 1 0 1) (list 0 1 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 1) (list 0 0 0 1) (list 1 1 0 1) (list 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 1 0) (list 0 0 0 0) (list 0 1 0 0) (list 1 1 1 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 0) (list 0 0 1 0) (list 0 0 0 0) (list 1 1 1 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 1) (list 0 0 0 0) (list 0 1 0 0) (list 0 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1) (list 0 0 0 0) (list 0 1 0 1) (list 0 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1) (list 0 0 0 1) (list 0 1 0 1) (list 0 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1) (list 0 0 1 0) (list 0 0 0 0) (list 0 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1) (list 0 0 1 1) (list 0 0 0 0) (list 0 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1) (list 0 0 1 1) (list 0 0 0 1) (list 0 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 0 0) (list 1 1 0 0 0) (list 1 1 1 0 1) (list 1 1 1 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 0 0) (list 1 1 0 1 0) (list 1 1 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 0 0) (list 1 1 0 1 1) (list 1 1 0 0 0) (list 1 1 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 0 0) (list 1 1 0 1 1) (list 1 1 0 0 1) (list 1 1 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 0 1) (list 1 1 0 0 1) (list 1 1 1 0 1) (list 1 0 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 0 1) (list 1 1 0 1 1) (list 1 1 0 0 1) (list 1 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 1 0) (list 1 1 0 1 0) (list 1 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 1 0) (list 1 1 0 1 1) (list 1 0 0 0 0) (list 1 1 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 0 1 1) (list 1 1 0 1 1) (list 1 0 0 0 1) (list 1 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 1 0 1) (list 1 0 0 0 0) (list 1 1 1 0 1) (list 1 0 1 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 1 1 0) (list 1 0 0 0 0) (list 1 0 1 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 1 1 0) (list 1 0 0 1 0) (list 1 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 1 1 1) (list 1 0 0 0 0) (list 1 0 1 0 1) (list 1 0 1 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 1 1 1) (list 1 0 0 0 1) (list 1 0 1 0 1) (list 1 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 0 0) (list 1 0 1 1 1) (list 1 0 0 1 1) (list 1 0 0 0 1) (list 1 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 0 1) (list 1 0 0 0 1) (list 1 1 0 0 1) (list 1 1 1 0 1) (list 0 0 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 0 0 1) (list 1 0 0 0 1) (list 1 1 0 1 1) (list 1 1 0 0 1) (list 0 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 1) (list 1 0 0 1 1) (list 1 1 0 1 1) (list 1 0 0 0 1) (list 0 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 0 1) (list 1 0 1 1 1) (list 1 0 0 0 1) (list 1 0 1 0 1) (list 0 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 1 0) (list 1 0 0 1 0) (list 1 1 0 1 0) (list 0 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 0 1 0) (list 1 0 0 1 0) (list 1 1 0 1 1) (list 0 0 0 0 0) (list 1 1 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 1 0) (list 1 0 0 1 1) (list 1 1 0 1 1) (list 0 0 0 0 0) (list 1 0 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 1 0) (list 1 0 1 1 0) (list 1 0 0 1 0) (list 0 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 0 1 0) (list 1 0 1 1 1) (list 1 0 0 1 0) (list 0 0 0 0 0) (list 1 0 1 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 1 0) (list 1 0 1 1 1) (list 1 0 0 1 1) (list 0 0 0 0 0) (list 1 0 0 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 1 1) (list 1 0 0 1 1) (list 1 1 0 1 1) (list 0 0 0 0 0) (list 0 0 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 1 1) (list 1 0 0 1 1) (list 1 1 0 1 1) (list 0 0 0 0 1) (list 0 0 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 0 0 1 1) (list 1 0 1 1 1) (list 1 0 0 1 1) (list 0 0 0 0 0) (list 0 0 0 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 0 1 1) (list 1 0 1 1 1) (list 1 0 0 1 1) (list 0 0 0 0 1) (list 0 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 0 0) (list 1 0 1 0 0) (list 0 0 0 0 0) (list 1 1 1 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 1 0 0) (list 1 0 1 1 0) (list 0 0 0 0 0) (list 1 0 1 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 1 0 0) (list 1 0 1 1 1) (list 0 0 0 0 0) (list 1 0 1 0 1) (list 1 0 1 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 0 1) (list 1 0 1 0 1) (list 0 0 0 0 1) (list 1 1 1 0 1) (list 0 0 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 0 1 1 0) (list 1 0 1 1 0) (list 0 0 0 1 0) (list 0 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 0 1 1 0) (list 1 0 1 1 1) (list 0 0 0 0 0) (list 0 0 1 0 0) (list 1 0 1 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 1 1) (list 1 0 1 1 1) (list 0 0 0 1 0) (list 0 0 0 0 0) (list 0 0 1 1 0))) 1 0.001)\n    (check-within (candidate (list (list 0 0 1 1 1) (list 1 0 1 1 1) (list 0 0 0 1 1) (list 0 0 0 0 1) (list 0 0 0 0 0))) 1 0.001)\n    (check-within (candidate (list (list 0 1 0 0 0) (list 0 0 0 0 0) (list 1 1 0 0 0) (list 1 1 1 0 1) (list 1 1 1 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 0 0 0) (list 0 0 0 0 0) (list 1 1 0 1 1) (list 1 1 0 0 0) (list 1 1 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 0 1) (list 0 0 0 0 0) (list 1 1 0 0 1) (list 1 1 1 0 1) (list 0 1 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 0 0 1) (list 0 0 0 0 0) (list 1 1 0 1 1) (list 1 1 0 0 1) (list 0 1 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 1 0) (list 0 0 0 0 0) (list 1 1 0 1 0) (list 0 1 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 0 1 0) (list 0 0 0 0 0) (list 1 1 0 1 1) (list 0 1 0 0 0) (list 1 1 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 1 0) (list 0 0 0 1 0) (list 1 1 0 1 0) (list 0 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 0 1 0) (list 0 0 0 1 0) (list 1 1 0 1 1) (list 0 0 0 0 0) (list 1 1 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 1 1) (list 0 0 0 0 0) (list 1 1 0 1 1) (list 0 1 0 0 1) (list 0 1 0 0 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 0 1 1) (list 0 0 0 1 1) (list 1 1 0 1 1) (list 0 0 0 0 0) (list 0 0 0 1 0))) 2 0.001)\n    (check-within (candidate (list (list 0 1 1 0 0) (list 0 0 0 0 0) (list 0 1 0 0 0) (list 1 1 1 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 1 0 0) (list 0 0 1 0 0) (list 0 0 0 0 0) (list 1 1 1 0 1) (list 1 1 1 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 0 1) (list 0 0 0 0 0) (list 0 1 0 0 1) (list 1 1 1 0 1) (list 0 1 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 0 1) (list 0 0 0 0 1) (list 0 1 0 0 1) (list 1 1 1 0 1) (list 0 0 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 0 1) (list 0 0 1 0 0) (list 0 0 0 0 0) (list 1 1 1 0 1) (list 0 1 1 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 0 1) (list 0 0 1 0 1) (list 0 0 0 0 0) (list 1 1 1 0 1) (list 0 0 1 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 0 1) (list 0 0 1 0 1) (list 0 0 0 0 1) (list 1 1 1 0 1) (list 0 0 0 0 0))) 3 0.001)\n    (check-within (candidate (list (list 0 1 1 1 0) (list 0 0 0 1 0) (list 0 1 0 1 0) (list 0 0 0 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 1 1 0) (list 0 0 1 0 0) (list 0 0 0 0 0) (list 0 1 1 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 1 1 0) (list 0 0 1 1 0) (list 0 0 0 0 0) (list 0 0 1 0 0) (list 1 1 1 1 0))) 4 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 0) (list 0 1 0 0 0) (list 0 1 1 0 0) (list 0 1 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 0) (list 0 1 0 0 0) (list 0 1 1 0 1) (list 0 1 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 0) (list 0 1 0 0 1) (list 0 1 1 0 1) (list 0 1 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 0) (list 0 1 0 1 0) (list 0 1 0 0 0) (list 0 1 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 0) (list 0 1 0 1 1) (list 0 1 0 0 0) (list 0 1 0 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 0) (list 0 1 0 1 1) (list 0 1 0 0 1) (list 0 1 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 0 0 1) (list 0 1 0 0 1) (list 0 1 1 0 1) (list 0 0 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 1 0 0) (list 0 0 0 0 0) (list 0 1 1 0 0) (list 0 1 1 1 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 1 0 0) (list 0 0 0 0 0) (list 0 1 1 0 1) (list 0 1 1 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 1 0 1) (list 0 0 0 0 1) (list 0 1 1 0 1) (list 0 0 0 0 0))) 0 0.001)\n    (check-within (candidate (list (list 0 1 1 1 1) (list 0 0 1 1 0) (list 0 0 0 0 0) (list 0 0 1 0 0) (list 0 1 1 1 0))) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3189_findChampion", "language": "rkt", "prompt": "#lang racket\n;; There are n teams numbered from 0 to n - 1 in a tournament; each team is also a node in a DAG.\n;; You are given the integer n and a 0-indexed 2D integer array edges of length m representing the DAG, where edges[i] = [ui, vi] indicates that there is a directed edge from team ui to team vi in the graph.\n;; A directed edge from a to b in the graph means that team a is stronger than team b and team b is weaker than team a.\n;; Team a will be the champion of the tournament if there is no team b that is stronger than team a.\n;; Return the team that will be the champion of the tournament if there is a unique champion, otherwise, return -1.\n;; Notes\n;;  * A cycle is a series of nodes a1, a2, ..., an, an+1 such that node a1 is the same node as node an+1, the nodes a1, a2, ..., an are distinct, and there is a directed edge from the node ai to node ai+1 for every i in the range [1, n].\n;;  * A DAG is a directed graph that does not have any cycle.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/10/19/graph-3.png]\n;; Input: n = 3, edges = [[0,1],[1,2]]\n;; Output: 0\n;; Explanation: Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/10/19/graph-4.png]\n;; Input: n = 4, edges = [[0,2],[1,3],[1,2]]\n;; Output: -1\n;; Explanation: Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1.\n;; Constraints:\n;;  * 1 <= n <= 100\n;;  * m == edges.length\n;;  * 0 <= m <= n * (n - 1) / 2\n;;  * edges[i].length == 2\n;;  * 0 <= edge[i][j] <= n - 1\n;;  * edges[i][0] != edges[i][1]\n;;  * The input is generated such that if team a is stronger than team b, team b is not stronger than team a.\n;;  * The input is generated such that if team a is stronger than team b and team b is stronger than team c, then team a is stronger than team c.\n(define (findChampion n edges)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3189_findChampion.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findChampion))\n    (check-within (candidate 3 (list (list 0 1) (list 1 2))) 0 0.001)\n    (check-within (candidate 4 (list (list 0 2) (list 1 3) (list 1 2))) -1 0.001)\n    (check-within (candidate 1 (list )) 0 0.001)\n    (check-within (candidate 2 (list )) -1 0.001)\n    (check-within (candidate 2 (list (list 0 1))) 0 0.001)\n    (check-within (candidate 2 (list (list 1 0))) 1 0.001)\n    (check-within (candidate 3 (list )) -1 0.001)\n    (check-within (candidate 3 (list (list 0 1))) -1 0.001)\n    (check-within (candidate 3 (list (list 0 2))) -1 0.001)\n    (check-within (candidate 3 (list (list 1 2))) -1 0.001)\n    (check-within (candidate 3 (list (list 2 0))) -1 0.001)\n    (check-within (candidate 3 (list (list 0 1) (list 2 1))) -1 0.001)\n    (check-within (candidate 3 (list (list 0 2) (list 0 1))) 0 0.001)\n    (check-within (candidate 3 (list (list 0 2) (list 1 0))) 1 0.001)\n    (check-within (candidate 3 (list (list 2 0) (list 1 0))) -1 0.001)\n    (check-within (candidate 3 (list (list 2 0) (list 2 1))) 2 0.001)\n    (check-within (candidate 3 (list (list 2 1) (list 2 0))) 2 0.001)\n    (check-within (candidate 3 (list (list 0 1) (list 1 2) (list 0 2))) 0 0.001)\n    (check-within (candidate 3 (list (list 0 1) (list 2 1) (list 0 2))) 0 0.001)\n    (check-within (candidate 3 (list (list 0 2) (list 0 1) (list 1 2))) 0 0.001)\n    (check-within (candidate 3 (list (list 0 2) (list 0 1) (list 2 1))) 0 0.001)\n    (check-within (candidate 3 (list (list 0 2) (list 1 2) (list 1 0))) 1 0.001)\n    (check-within (candidate 3 (list (list 1 0) (list 0 2) (list 1 2))) 1 0.001)\n    (check-within (candidate 3 (list (list 2 1) (list 1 0) (list 2 0))) 2 0.001)\n    (check-within (candidate 4 (list )) -1 0.001)\n    (check-within (candidate 4 (list (list 0 2))) -1 0.001)\n    (check-within (candidate 4 (list (list 1 0))) -1 0.001)\n    (check-within (candidate 4 (list (list 1 3))) -1 0.001)\n    (check-within (candidate 4 (list (list 3 2))) -1 0.001)\n    (check-within (candidate 4 (list (list 0 1) (list 2 3))) -1 0.001)\n    (check-within (candidate 4 (list (list 0 3) (list 2 3))) -1 0.001)\n    (check-within (candidate 4 (list (list 1 3) (list 2 1))) -1 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 1 3))) -1 0.001)\n    (check-within (candidate 4 (list (list 3 0) (list 3 1))) -1 0.001)\n    (check-within (candidate 4 (list (list 0 1) (list 2 0) (list 2 1))) -1 0.001)\n    (check-within (candidate 4 (list (list 0 2) (list 3 2) (list 1 2))) -1 0.001)\n    (check-within (candidate 4 (list (list 1 0) (list 2 3) (list 1 2))) 1 0.001)\n    (check-within (candidate 4 (list (list 1 2) (list 0 3) (list 1 3))) -1 0.001)\n    (check-within (candidate 4 (list (list 1 2) (list 1 0) (list 1 3))) 1 0.001)\n    (check-within (candidate 4 (list (list 1 3) (list 1 2) (list 0 3))) -1 0.001)\n    (check-within (candidate 4 (list (list 1 3) (list 3 0) (list 2 0))) -1 0.001)\n    (check-within (candidate 4 (list (list 3 1) (list 2 0) (list 1 2))) 3 0.001)\n    (check-within (candidate 4 (list (list 3 1) (list 2 1) (list 0 2))) -1 0.001)\n    (check-within (candidate 4 (list (list 0 2) (list 0 3) (list 1 2) (list 1 0))) 1 0.001)\n    (check-within (candidate 4 (list (list 2 0) (list 2 3) (list 3 1) (list 2 1))) 2 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 1 0) (list 3 0) (list 2 0))) -1 0.001)\n    (check-within (candidate 4 (list (list 3 0) (list 3 1) (list 2 1) (list 0 1))) -1 0.001)\n    (check-within (candidate 4 (list (list 3 0) (list 1 0) (list 1 2) (list 3 2) (list 2 0))) -1 0.001)\n    (check-within (candidate 4 (list (list 3 0) (list 2 0) (list 1 0) (list 2 3) (list 1 2))) 1 0.001)\n    (check-within (candidate 4 (list (list 3 2) (list 0 1) (list 3 0) (list 3 1) (list 2 0))) 3 0.001)\n    (check-within (candidate 4 (list (list 0 3) (list 2 3) (list 2 1) (list 1 0) (list 2 0) (list 1 3))) 2 0.001)\n    (check-within (candidate 4 (list (list 1 2) (list 2 3) (list 0 2) (list 0 1) (list 0 3) (list 1 3))) 0 0.001)\n    (check-within (candidate 4 (list (list 2 1) (list 3 1) (list 3 0) (list 3 2) (list 2 0) (list 0 1))) 3 0.001)\n    (check-within (candidate 4 (list (list 2 3) (list 2 1) (list 0 1) (list 0 3) (list 3 1) (list 0 2))) 0 0.001)\n    (check-within (candidate 5 (list )) -1 0.001)\n    (check-within (candidate 5 (list (list 0 2))) -1 0.001)\n    (check-within (candidate 5 (list (list 2 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 4 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 1 4) (list 2 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 2 0) (list 4 3))) -1 0.001)\n    (check-within (candidate 5 (list (list 3 2) (list 0 2))) -1 0.001)\n    (check-within (candidate 5 (list (list 3 4) (list 2 1))) -1 0.001)\n    (check-within (candidate 5 (list (list 0 4) (list 1 4) (list 0 1))) -1 0.001)\n    (check-within (candidate 5 (list (list 1 3) (list 4 2) (list 1 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 2 3) (list 4 1) (list 3 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 0 4) (list 2 0) (list 1 3) (list 2 4))) -1 0.001)\n    (check-within (candidate 5 (list (list 0 1) (list 2 1) (list 4 1) (list 4 2) (list 4 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 2 1) (list 3 2) (list 4 1) (list 0 4))) -1 0.001)\n    (check-within (candidate 5 (list (list 2 3) (list 0 4) (list 1 4) (list 1 0) (list 4 3))) -1 0.001)\n    (check-within (candidate 5 (list (list 3 1) (list 0 2) (list 4 2) (list 0 1) (list 1 2))) -1 0.001)\n    (check-within (candidate 5 (list (list 3 2) (list 3 4) (list 3 0) (list 3 1) (list 0 2))) 3 0.001)\n    (check-within (candidate 5 (list (list 4 0) (list 3 0) (list 2 4) (list 3 4) (list 4 1))) -1 0.001)\n    (check-within (candidate 5 (list (list 4 3) (list 1 0) (list 1 2) (list 3 2) (list 4 1))) 4 0.001)\n    (check-within (candidate 5 (list (list 2 1) (list 0 3) (list 0 1) (list 0 4) (list 0 2) (list 4 1))) 0 0.001)\n    (check-within (candidate 5 (list (list 2 1) (list 4 1) (list 3 0) (list 2 0) (list 3 4) (list 3 2))) 3 0.001)\n    (check-within (candidate 5 (list (list 0 1) (list 0 4) (list 2 0) (list 3 4) (list 3 1) (list 2 1) (list 3 0))) -1 0.001)\n    (check-within (candidate 5 (list (list 1 4) (list 3 1) (list 0 1) (list 3 0) (list 0 2) (list 2 4) (list 3 4))) 3 0.001)\n    (check-within (candidate 5 (list (list 3 2) (list 1 2) (list 2 0) (list 2 4) (list 1 4) (list 3 1) (list 3 4))) 3 0.001)\n    (check-within (candidate 5 (list (list 0 4) (list 0 3) (list 4 3) (list 4 2) (list 1 2) (list 4 1) (list 0 1) (list 3 2))) 0 0.001)\n    (check-within (candidate 5 (list (list 4 3) (list 4 2) (list 4 1) (list 2 3) (list 4 0) (list 3 1) (list 2 0) (list 0 3))) 4 0.001)\n    (check-within (candidate 5 (list (list 1 2) (list 1 4) (list 2 3) (list 0 2) (list 1 0) (list 1 3) (list 0 3) (list 4 3) (list 0 4))) 1 0.001)\n    (check-within (candidate 5 (list (list 1 3) (list 3 0) (list 3 4) (list 2 0) (list 3 2) (list 0 4) (list 2 4) (list 1 0) (list 1 2))) 1 0.001)\n    (check-within (candidate 5 (list (list 3 0) (list 4 0) (list 3 2) (list 0 1) (list 0 2) (list 4 3) (list 1 2) (list 4 2) (list 3 1))) 4 0.001)\n    (check-within (candidate 5 (list (list 4 0) (list 2 3) (list 4 3) (list 4 2) (list 2 0) (list 4 1) (list 1 3) (list 1 0) (list 3 0))) 4 0.001)\n    (check-within (candidate 5 (list (list 0 2) (list 1 3) (list 4 1) (list 4 2) (list 2 1) (list 0 3) (list 0 1) (list 2 3) (list 0 4) (list 4 3))) 0 0.001)\n    (check-within (candidate 5 (list (list 2 0) (list 4 0) (list 3 4) (list 4 2) (list 1 2) (list 1 0) (list 3 1) (list 3 0) (list 1 4) (list 3 2))) 3 0.001)\n    (check-within (candidate 6 (list )) -1 0.001)\n    (check-within (candidate 6 (list (list 2 1))) -1 0.001)\n    (check-within (candidate 6 (list (list 2 3))) -1 0.001)\n    (check-within (candidate 6 (list (list 3 5))) -1 0.001)\n    (check-within (candidate 6 (list (list 5 4))) -1 0.001)\n    (check-within (candidate 6 (list (list 1 2) (list 4 3))) -1 0.001)\n    (check-within (candidate 6 (list (list 0 4) (list 4 5) (list 3 1))) -1 0.001)\n    (check-within (candidate 6 (list (list 0 4) (list 5 2) (list 5 4) (list 3 0) (list 1 0))) -1 0.001)\n    (check-within (candidate 6 (list (list 1 0) (list 1 4) (list 0 2) (list 3 5) (list 3 4))) -1 0.001)\n    (check-within (candidate 6 (list (list 5 0) (list 2 4) (list 0 4) (list 3 2) (list 2 0))) -1 0.001)\n    (check-within (candidate 6 (list (list 1 2) (list 3 2) (list 3 5) (list 4 0) (list 1 5) (list 0 5))) -1 0.001)\n    (check-within (candidate 6 (list (list 3 2) (list 1 2) (list 3 0) (list 5 0) (list 5 1) (list 5 3))) -1 0.001)\n    (check-within (candidate 6 (list (list 4 2) (list 0 4) (list 1 3) (list 3 4) (list 1 2) (list 1 0))) -1 0.001)\n    (check-within (candidate 6 (list (list 0 5) (list 2 0) (list 1 5) (list 3 2) (list 2 1) (list 2 4) (list 4 5))) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3190_minOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given two 0-indexed integer arrays, nums1 and nums2, both having length n.\n;; You are allowed to perform a series of operations (possibly none).\n;; In an operation, you select an index i in the range [0, n - 1] and swap the values of nums1[i] and nums2[i].\n;; Your task is to find the minimum number of operations required to satisfy the following conditions:\n;; nums1[n - 1] is equal to the maximum value among all elements of nums1, i.e., nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1]).\n;; nums2[n - 1] is equal to the maximum value among all elements of nums2, i.e., nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1]).\n;; Return an integer denoting the minimum number of operations needed to meet both conditions, or -1 if it is impossible to satisfy both conditions.\n;; Example 1:\n;; Input: nums1 = [1,2,7], nums2 = [4,5,3]\n;; Output: 1\n;; Explanation: In this example, an operation can be performed using index i = 2.\n;; When nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\n;; Both conditions are now satisfied.\n;; It can be shown that the minimum number of operations needed to be performed is 1.\n;; So, the answer is 1.\n;; Example 2:\n;; Input: nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\n;; Output: 2\n;; Explanation: In this example, the following operations can be performed:\n;; First operation using index i = 4.\n;; When nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\n;; Another operation using index i = 3.\n;; When nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\n;; Both conditions are now satisfied.\n;; It can be shown that the minimum number of operations needed to be performed is 2.\n;; So, the answer is 2.   \n;; Example 3:\n;; Input: nums1 = [1,5,4], nums2 = [2,5,3]\n;; Output: -1\n;; Explanation: In this example, it is not possible to satisfy both conditions. \n;; So, the answer is -1.\n;; Constraints:\n;; 1 <= n == nums1.length == nums2.length <= 1000\n;; 1 <= nums1[i] <= 109\n;; 1 <= nums2[i] <= 109\n(define (minOperations nums1 nums2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3190_minOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minOperations))\n    (check-within (candidate (list 1 2 7) (list 4 5 3)) 1 0.001)\n    (check-within (candidate (list 2 3 4 5 9) (list 8 8 4 4 4)) 2 0.001)\n    (check-within (candidate (list 1 5 4) (list 2 5 3)) -1 0.001)\n    (check-within (candidate (list 1) (list 1)) 0 0.001)\n    (check-within (candidate (list 1 2) (list 2 1)) 1 0.001)\n    (check-within (candidate (list 1 1 10) (list 1 5 1)) 1 0.001)\n    (check-within (candidate (list 1 4 16) (list 16 16 16)) 0 0.001)\n    (check-within (candidate (list 1 5 15) (list 1 1 1)) 0 0.001)\n    (check-within (candidate (list 2 5 7) (list 2 2 2)) 0 0.001)\n    (check-within (candidate (list 8 9 10) (list 10 9 9)) 1 0.001)\n    (check-within (candidate (list 9 14 14) (list 14 11 14)) 0 0.001)\n    (check-within (candidate (list 16 16 16) (list 6 7 16)) 0 0.001)\n    (check-within (candidate (list 19 7 19) (list 5 19 19)) 0 0.001)\n    (check-within (candidate (list 1 1 8 9) (list 1 7 1 1)) 1 0.001)\n    (check-within (candidate (list 1 5 9 9) (list 9 9 8 9)) 0 0.001)\n    (check-within (candidate (list 1 7 7 7) (list 7 3 3 7)) 0 0.001)\n    (check-within (candidate (list 10 18 12 12) (list 19 6 5 12)) -1 0.001)\n    (check-within (candidate (list 12 9 11 12) (list 3 9 9 9)) 0 0.001)\n    (check-within (candidate (list 15 54 22 54) (list 54 19 54 54)) 0 0.001)\n    (check-within (candidate (list 20 20 20 20) (list 5 8 19 20)) 0 0.001)\n    (check-within (candidate (list 1 3 4 6 7) (list 1 1 1 1 1)) 0 0.001)\n    (check-within (candidate (list 1 11 17 1 18) (list 1 1 1 18 1)) 1 0.001)\n    (check-within (candidate (list 3 3 3 14 14) (list 3 3 4 3 3)) 1 0.001)\n    (check-within (candidate (list 4 4 8 4 17) (list 4 8 4 14 4)) 2 0.001)\n    (check-within (candidate (list 4 12 11 11 12) (list 12 6 12 12 12)) 0 0.001)\n    (check-within (candidate (list 6 21 87 63 87) (list 87 87 23 63 63)) 2 0.001)\n    (check-within (candidate (list 10 6 6 6 10) (list 6 6 10 10 6)) 2 0.001)\n    (check-within (candidate (list 16 12 15 15 16) (list 8 16 16 15 15)) 2 0.001)\n    (check-within (candidate (list 17 3 6 6 17) (list 3 17 6 14 6)) 2 0.001)\n    (check-within (candidate (list 19 13 18 18 19) (list 5 13 13 13 13)) 0 0.001)\n    (check-within (candidate (list 20 20 53 20 68) (list 20 28 20 61 20)) 2 0.001)\n    (check-within (candidate (list 6 6 2 4 4 6) (list 1 1 6 4 4 4)) 1 0.001)\n    (check-within (candidate (list 8 6 6 6 7 8) (list 5 8 8 8 7 7)) 2 0.001)\n    (check-within (candidate (list 15 1 15 6 12 15) (list 1 15 2 15 15 15)) 0 0.001)\n    (check-within (candidate (list 17 13 19 9 6 14) (list 17 14 15 1 19 19)) -1 0.001)\n    (check-within (candidate (list 20 8 10 12 17 20) (list 7 20 20 20 20 20)) 0 0.001)\n    (check-within (candidate (list 20 18 15 11 17 20) (list 7 15 13 7 20 12)) -1 0.001)\n    (check-within (candidate (list 20 20 20 20 19 20) (list 3 6 7 15 20 20)) 0 0.001)\n    (check-within (candidate (list 28 43 79 32 40 3) (list 95 25 74 16 82 56)) -1 0.001)\n    (check-within (candidate (list 29 81 58 99 41 36) (list 15 34 47 57 31 95)) -1 0.001)\n    (check-within (candidate (list 1 1 4 1 7 1 15) (list 1 1 1 4 1 9 1)) 2 0.001)\n    (check-within (candidate (list 1 4 4 4 7 4 9) (list 9 9 4 6 4 9 4)) 2 0.001)\n    (check-within (candidate (list 2 88 17 88 68 68 88) (list 88 16 88 68 68 68 68)) 2 0.001)\n    (check-within (candidate (list 3 3 5 3 3 3 18) (list 3 4 3 11 13 14 3)) 2 0.001)\n    (check-within (candidate (list 3 41 98 71 71 71 98) (list 98 98 49 71 85 94 71)) 2 0.001)\n    (check-within (candidate (list 5 5 27 53 5 59 65) (list 5 16 5 5 58 5 5)) 2 0.001)\n    (check-within (candidate (list 5 6 11 11 13 11 14) (list 14 14 11 11 11 14 11)) 2 0.001)\n    (check-within (candidate (list 6 5 1 10 8 4 5) (list 3 8 8 3 6 1 4)) -1 0.001)\n    (check-within (candidate (list 14 3 4 4 4 4 14) (list 2 14 4 4 5 12 4)) 2 0.001)\n    (check-within (candidate (list 14 28 68 68 65 67 68) (list 68 68 49 64 68 67 67)) 3 0.001)\n    (check-within (candidate (list 19 19 8 9 10 13 19) (list 1 5 19 19 19 13 13)) 3 0.001)\n    (check-within (candidate (list 20 6 20 20 20 20 20) (list 3 20 7 9 13 14 20)) 0 0.001)\n    (check-within (candidate (list 85 85 62 85 78 84 85) (list 5 37 85 76 85 85 85)) 0 0.001)\n    (check-within (candidate (list 1 2 2 2 2 2 2 10) (list 10 2 2 2 7 8 9 2)) 1 0.001)\n    (check-within (candidate (list 1 9 3 3 4 9 9 9) (list 9 2 9 9 9 6 8 9)) 0 0.001)\n    (check-within (candidate (list 3 3 4 3 3 3 3 8) (list 3 3 3 5 7 7 8 3)) 2 0.001)\n    (check-within (candidate (list 4 8 11 19 16 16 19 19) (list 19 19 19 13 16 16 16 16)) 3 0.001)\n    (check-within (candidate (list 8 20 4 9 9 4 4 20) (list 9 14 10 1 1 20 16 15)) 2 0.001)\n    (check-within (candidate (list 9 9 1 2 2 6 8 9) (list 1 1 9 2 2 2 2 2)) 1 0.001)\n    (check-within (candidate (list 10 4 10 9 10 10 10 10) (list 4 10 9 9 9 9 9 9)) 1 0.001)\n    (check-within (candidate (list 13 95 19 56 59 95 95 95) (list 95 14 95 95 95 83 88 95)) 0 0.001)\n    (check-within (candidate (list 19 7 19 8 9 15 9 19) (list 7 19 7 19 9 9 18 9)) 3 0.001)\n    (check-within (candidate (list 19 19 3 3 15 16 3 19) (list 2 2 3 7 3 3 17 3)) 2 0.001)\n    (check-within (candidate (list 1 8 8 5 8 8 8 7 8) (list 8 2 4 8 5 6 6 8 8)) 0 0.001)\n    (check-within (candidate (list 1 10 10 5 10 8 10 10 10) (list 10 2 4 10 7 8 8 8 8)) 2 0.001)\n    (check-within (candidate (list 2 7 7 7 7 7 7 17 18) (list 18 7 10 11 13 15 17 7 7)) 2 0.001)\n    (check-within (candidate (list 3 13 22 24 13 13 13 81 91) (list 91 13 13 13 45 59 71 13 13)) 4 0.001)\n    (check-within (candidate (list 4 4 9 4 16 4 17 4 18) (list 4 8 4 14 4 16 4 18 4)) 4 0.001)\n    (check-within (candidate (list 6 9 65 13 65 65 28 28 65) (list 65 65 13 65 24 27 28 34 28)) 4 0.001)\n    (check-within (candidate (list 8 3 5 6 6 3 3 3 8) (list 1 3 3 3 3 7 7 8 3)) 3 0.001)\n    (check-within (candidate (list 10 1 10 10 10 9 9 9 10) (list 1 10 5 6 8 9 9 10 9)) 2 0.001)\n    (check-within (candidate (list 15 15 3 5 15 15 9 13 15) (list 1 2 15 15 6 8 9 9 9)) 2 0.001)\n    (check-within (candidate (list 16 3 3 7 3 11 3 3 16) (list 2 3 6 3 10 3 15 16 3)) 4 0.001)\n    (check-within (candidate (list 16 3 16 7 16 16 10 10 16) (list 2 16 4 16 9 10 10 13 10)) 3 0.001)\n    (check-within (candidate (list 80 80 18 39 39 62 39 39 80) (list 2 10 80 39 42 39 66 66 39)) 4 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 7 1 9) (list 9 1 3 3 3 5 5 1 9 1)) 2 0.001)\n    (check-within (candidate (list 1 2 2 2 2 5 8 2 2 9) (list 9 2 2 2 4 2 2 9 9 2)) 3 0.001)\n    (check-within (candidate (list 1 2 18 18 10 18 18 17 18 18) (list 18 18 5 5 18 13 14 18 18 18)) 0 0.001)\n    (check-within (candidate (list 1 3 1 1 1 1 16 16 1 19) (list 1 1 7 7 9 12 1 1 18 1)) 4 0.001)\n    (check-within (candidate (list 1 9 3 9 4 5 7 8 8 9) (list 9 1 9 3 9 9 7 7 7 7)) 4 0.001)\n    (check-within (candidate (list 2 2 2 2 10 11 2 2 2 20) (list 2 3 9 9 2 2 12 14 19 2)) 3 0.001)\n    (check-within (candidate (list 3 15 6 7 7 10 7 7 15 15) (list 15 6 15 7 9 7 12 13 7 7)) 4 0.001)\n    (check-within (candidate (list 5 20 20 8 8 12 20 19 20 20) (list 20 6 7 20 20 20 15 20 20 20)) 0 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8 6 8) (list 1 2 3 4 4 5 5 5 8 8)) 0 0.001)\n    (check-within (candidate (list 9 3 3 3 3 6 7 7 3 9) (list 3 3 4 5 5 3 3 3 7 3)) 4 0.001)\n    (check-within (candidate (list 9 8 6 2 1 10 9 7 9 4) (list 6 2 8 2 5 3 6 5 6 10)) -1 0.001)\n    (check-within (candidate (list 10 2 2 2 3 2 2 2 2 10) (list 1 10 2 2 2 6 6 8 10 2)) 3 0.001)\n    (check-within (candidate (list 12 19 10 4 17 12 18 6 7 7) (list 20 5 15 7 10 8 2 16 14 1)) -1 0.001)\n    (check-within (candidate (list 17 31 31 34 31 42 31 65 31 89) (list 89 31 32 31 37 31 45 31 84 31)) 4 0.001)\n    (check-within (candidate (list 19 7 7 19 9 19 19 19 17 19) (list 6 19 19 8 19 10 10 16 19 19)) 0 0.001)\n    (check-within (candidate (list 20 20 7 20 8 11 11 11 11 20) (list 5 6 20 7 20 11 15 18 20 11)) 4 0.001)\n    (check-within (candidate (list 90 7 90 13 90 33 33 83 33 90) (list 6 90 13 90 22 33 62 33 86 33)) 4 0.001)\n    (check-within (candidate (list 1 1 1 1 1 10 1 15 16 17 20) (list 1 2 2 9 10 1 14 1 1 1 1)) 5 0.001)\n    (check-within (candidate (list 1 1 1 1 3 1 1 6 1 1 8) (list 1 1 1 3 1 3 5 1 6 7 1)) 3 0.001)\n    (check-within (candidate (list 1 2 2 6 2 2 2 2 2 2 10) (list 10 2 4 2 6 6 7 8 9 9 2)) 2 0.001)\n    (check-within (candidate (list 1 2 3 20 8 8 19 19 19 20 20) (list 20 20 20 5 20 20 20 19 19 19 19)) 3 0.001)\n    (check-within (candidate (list 1 2 4 9 5 9 9 6 7 6 9) (list 9 9 9 4 9 5 5 6 6 7 6)) 5 0.001)\n    (check-within (candidate (list 1 7 7 7 7 7 13 16 7 19 19) (list 19 7 10 11 11 12 7 7 16 7 7)) 4 0.001)\n    (check-within (candidate (list 1 10 4 10 10 10 6 10 7 9 10) (list 10 3 10 5 5 6 10 7 10 9 9)) 4 0.001)\n    (check-within (candidate (list 1 20 20 7 20 20 13 17 17 19 20) (list 20 2 4 20 7 7 20 20 17 17 17)) 4 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3191_maximumScoreAfterOperations", "language": "rkt", "prompt": "#lang racket\n;; There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given\u00a0a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n;; You are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node.\n;; You start with a score of 0. In one operation, you can:\n;;  * Pick any node i.\n;;  * Add values[i] to your score.\n;;  * Set values[i] to 0.\n;; A tree is healthy if the sum of values on the path from the root to any leaf node is different than zero.\n;; Return the maximum score you can obtain after performing these operations on the tree any number of times so that it remains healthy.\n;; Example 1:\n;; [https://assets.leetcode.com/uploads/2023/10/11/graph-13-1.png]\n;; Input: edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]\n;; Output: 11\n;; Explanation: We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\n;; It can be shown that 11 is the maximum score obtainable after any number of operations on the tree.\n;; Example 2:\n;; [https://assets.leetcode.com/uploads/2023/10/11/graph-14-2.png]\n;; Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]\n;; Output: 40\n;; Explanation: We can choose nodes 0, 2, 3, and 4.\n;; - The sum of values on the path from 0 to 4 is equal to 10.\n;; - The sum of values on the path from 0 to 3 is equal to 10.\n;; - The sum of values on the path from 0 to 5 is equal to 3.\n;; - The sum of values on the path from 0 to 6 is equal to 5.\n;; Therefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\n;; It can be shown that 40 is the maximum score obtainable after any number of operations on the tree.\n;; Constraints:\n;;  * 2 <= n <= 2 * 104\n;;  * edges.length == n - 1\n;;  * edges[i].length == 2\n;;  * 0 <= ai, bi < n\n;;  * values.length == n\n;;  * 1 <= values[i] <= 109\n;;  * The input is generated such that edges represents a valid tree.\n(define (maximumScoreAfterOperations edges values)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3191_maximumScoreAfterOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumScoreAfterOperations))\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3) (list 2 4) (list 4 5)) (list 5 2 5 2 1 1)) 11 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 1 3) (list 1 4) (list 2 5) (list 2 6)) (list 20 10 9 7 4 3 5)) 40 0.001)\n    (check-within (candidate (list (list 0 1)) (list 1 2)) 2 0.001)\n    (check-within (candidate (list (list 0 1)) (list 2 1)) 2 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2)) (list 1000000000 1000000000 1000000000)) 2000000000 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3)) (list 1000000000 1000000000 1000000000 1000000000)) 3000000000 0.001)\n    (check-within (candidate (list (list 7 0) (list 3 1) (list 6 2) (list 4 3) (list 4 5) (list 4 6) (list 4 7)) (list 2 16 23 17 22 21 8 6)) 113 0.001)\n    (check-within (candidate (list (list 3 1) (list 0 2) (list 0 3)) (list 21 12 19 5)) 36 0.001)\n    (check-within (candidate (list (list 2 0) (list 4 1) (list 5 3) (list 4 6) (list 2 4) (list 5 2) (list 5 7)) (list 12 12 7 9 2 11 12 25)) 83 0.001)\n    (check-within (candidate (list (list 1 0) (list 9 1) (list 6 2) (list 7 4) (list 3 5) (list 7 3) (list 9 6) (list 7 8) (list 7 9)) (list 14 17 13 18 17 10 23 19 22 2)) 153 0.001)\n    (check-within (candidate (list (list 5 0) (list 4 3) (list 2 5) (list 6 2) (list 4 6) (list 1 4) (list 1 7)) (list 15 12 13 23 8 1 2 23)) 96 0.001)\n    (check-within (candidate (list (list 0 2) (list 1 3) (list 0 5) (list 1 0) (list 4 1) (list 4 6)) (list 22 25 4 21 8 20 4)) 82 0.001)\n    (check-within (candidate (list (list 4 1) (list 6 3) (list 2 4) (list 0 2) (list 9 5) (list 0 6) (list 9 7) (list 0 8) (list 0 9)) (list 3 18 10 16 9 3 25 17 8 9)) 115 0.001)\n    (check-within (candidate (list (list 6 1) (list 3 4) (list 0 3) (list 2 0) (list 5 2) (list 5 6)) (list 25 20 16 2 13 8 19)) 93 0.001)\n    (check-within (candidate (list (list 9 2) (list 5 4) (list 5 6) (list 1 5) (list 8 1) (list 0 7) (list 3 0) (list 9 3) (list 8 9)) (list 21 13 10 14 20 11 19 22 3 16)) 128 0.001)\n    (check-within (candidate (list (list 2 4) (list 1 5) (list 0 1) (list 2 0) (list 3 2) (list 3 6)) (list 17 5 24 18 6 16 1)) 75 0.001)\n    (check-within (candidate (list (list 1 2) (list 4 1) (list 3 6) (list 4 3) (list 5 4) (list 0 5) (list 0 7)) (list 8 13 19 13 4 3 24 25)) 101 0.001)\n    (check-within (candidate (list (list 9 0) (list 7 1) (list 6 3) (list 8 4) (list 2 5) (list 9 6) (list 2 8) (list 7 2) (list 7 9)) (list 4 13 21 1 25 8 21 22 9 18)) 138 0.001)\n    (check-within (candidate (list (list 1 0) (list 4 3) (list 1 5) (list 6 1) (list 4 6) (list 2 7) (list 4 2) (list 4 8)) (list 10 5 25 19 2 20 15 3 3)) 97 0.001)\n    (check-within (candidate (list (list 6 1) (list 3 4) (list 2 5) (list 0 6) (list 3 0) (list 2 3) (list 2 7)) (list 2 23 10 20 22 10 6 24)) 115 0.001)\n    (check-within (candidate (list (list 2 1) (list 0 2) (list 5 0) (list 4 3) (list 5 4) (list 5 6)) (list 9 21 12 20 5 2 13)) 73 0.001)\n    (check-within (candidate (list (list 8 1) (list 7 4) (list 0 5) (list 2 0) (list 3 2) (list 8 3) (list 7 6) (list 7 8)) (list 23 24 25 12 12 7 1 17 17)) 119 0.001)\n    (check-within (candidate (list (list 3 0) (list 3 1) (list 2 3)) (list 19 8 8 5)) 35 0.001)\n    (check-within (candidate (list (list 5 0) (list 7 1) (list 3 2) (list 6 4) (list 6 5) (list 3 6) (list 3 7)) (list 19 7 17 9 13 7 25 3)) 93 0.001)\n    (check-within (candidate (list (list 3 1) (list 2 3) (list 0 2) (list 0 4)) (list 14 15 18 15 20)) 68 0.001)\n    (check-within (candidate (list (list 6 0) (list 2 1) (list 6 2) (list 6 4) (list 5 7) (list 6 5) (list 3 6) (list 9 3) (list 8 9)) (list 17 20 17 13 5 12 8 12 14 25)) 135 0.001)\n    (check-within (candidate (list (list 4 1) (list 6 2) (list 9 3) (list 0 6) (list 0 7) (list 9 0) (list 4 8) (list 5 4) (list 5 9)) (list 11 16 10 25 21 25 15 10 5 7)) 134 0.001)\n    (check-within (candidate (list (list 1 0) (list 3 1) (list 2 3)) (list 25 19 12 2)) 56 0.001)\n    (check-within (candidate (list (list 4 1) (list 0 2) (list 4 0) (list 3 4)) (list 12 24 1 11 3)) 47 0.001)\n    (check-within (candidate (list (list 1 0) (list 5 1) (list 2 4) (list 3 2) (list 3 5)) (list 21 2 17 18 22 16)) 94 0.001)\n    (check-within (candidate (list (list 5 1) (list 4 3) (list 2 4) (list 6 2) (list 0 5) (list 0 6)) (list 18 24 5 20 23 6 7)) 92 0.001)\n    (check-within (candidate (list (list 4 1) (list 6 3) (list 2 4) (list 5 2) (list 0 5) (list 0 6)) (list 19 2 23 18 3 12 9)) 75 0.001)\n    (check-within (candidate (list (list 5 0) (list 2 1) (list 6 3) (list 5 4) (list 2 5) (list 2 6)) (list 22 11 2 11 3 11 17)) 72 0.001)\n    (check-within (candidate (list (list 6 0) (list 4 1) (list 3 2) (list 6 5) (list 4 6) (list 3 4) (list 3 7) (list 3 8)) (list 18 20 14 23 20 8 24 12 1)) 122 0.001)\n    (check-within (candidate (list (list 1 2) (list 0 1) (list 0 3) (list 0 4)) (list 6 8 2 16 6)) 32 0.001)\n    (check-within (candidate (list (list 6 1) (list 3 4) (list 3 5) (list 0 3) (list 2 0) (list 2 6)) (list 5 25 2 12 15 3 3)) 60 0.001)\n    (check-within (candidate (list (list 4 0) (list 2 1) (list 2 3) (list 2 4)) (list 9 5 14 24 19)) 62 0.001)\n    (check-within (candidate (list (list 4 0) (list 2 1) (list 6 3) (list 2 5) (list 4 6) (list 2 4) (list 7 2) (list 7 8)) (list 19 10 14 18 17 8 2 8 24)) 104 0.001)\n    (check-within (candidate (list (list 6 0) (list 7 1) (list 5 3) (list 2 4) (list 8 5) (list 6 7) (list 2 6) (list 2 8)) (list 8 8 19 17 24 1 7 18 12)) 107 0.001)\n    (check-within (candidate (list (list 6 0) (list 3 1) (list 3 2) (list 3 6) (list 4 3) (list 5 4) (list 5 7)) (list 15 3 25 2 10 11 10 13)) 87 0.001)\n    (check-within (candidate (list (list 7 3) (list 2 5) (list 4 2) (list 0 4) (list 7 0) (list 1 6) (list 1 7)) (list 1 19 5 1 18 24 4 20)) 91 0.001)\n    (check-within (candidate (list (list 7 3) (list 2 4) (list 9 2) (list 1 5) (list 1 7) (list 0 1) (list 9 0) (list 6 8) (list 6 9)) (list 21 10 9 25 7 20 5 8 20 5)) 115 0.001)\n    (check-within (candidate (list (list 3 1) (list 4 5) (list 0 4) (list 2 0) (list 3 2) (list 3 6)) (list 13 11 16 12 20 1 7)) 67 0.001)\n    (check-within (candidate (list (list 2 0) (list 3 1) (list 6 2) (list 6 3) (list 5 4) (list 7 5) (list 6 7)) (list 21 20 8 21 11 12 23 4)) 112 0.001)\n    (check-within (candidate (list (list 0 2) (list 7 4) (list 1 6) (list 5 1) (list 3 5) (list 0 3) (list 0 7)) (list 8 6 9 5 4 1 8 6)) 39 0.001)\n    (check-within (candidate (list (list 5 1) (list 8 3) (list 0 4) (list 8 0) (list 2 5) (list 2 7) (list 9 2) (list 6 8) (list 6 9)) (list 2 22 2 19 25 14 11 24 7 6)) 130 0.001)\n    (check-within (candidate (list (list 3 0) (list 3 1) (list 2 3)) (list 24 24 4 12)) 52 0.001)\n    (check-within (candidate (list (list 2 0) (list 3 1) (list 2 3)) (list 7 10 13 8)) 31 0.001)\n    (check-within (candidate (list (list 1 0) (list 3 1) (list 6 4) (list 3 5) (list 2 3) (list 2 6)) (list 6 14 4 17 16 19 24)) 94 0.001)\n    (check-within (candidate (list (list 0 1) (list 3 0) (list 8 3) (list 2 4) (list 8 5) (list 2 6) (list 8 2) (list 7 8)) (list 22 19 10 16 14 11 2 17 9)) 98 0.001)\n    (check-within (candidate (list (list 5 1) (list 5 2) (list 0 3) (list 0 4) (list 0 5)) (list 21 18 2 20 1 1)) 42 0.001)\n    (check-within (candidate (list (list 6 0) (list 3 2) (list 1 3) (list 6 4) (list 1 5) (list 1 6)) (list 14 19 22 6 19 12 20)) 98 0.001)\n    (check-within (candidate (list (list 6 0) (list 4 1) (list 2 3) (list 5 2) (list 6 4) (list 5 6)) (list 16 16 9 12 5 14 17)) 75 0.001)\n    (check-within (candidate (list (list 2 1) (list 4 2) (list 0 3) (list 0 4)) (list 9 6 7 17 19)) 49 0.001)\n    (check-within (candidate (list (list 1 3) (list 2 1) (list 4 5) (list 2 4) (list 0 2) (list 0 6)) (list 4 19 10 25 16 13 6)) 89 0.001)\n    (check-within (candidate (list (list 1 0) (list 5 1) (list 2 5) (list 3 2) (list 4 6) (list 3 4) (list 3 7)) (list 12 9 19 10 24 22 18 16)) 121 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3)) (list 25 23 7 9)) 39 0.001)\n    (check-within (candidate (list (list 3 0) (list 3 2) (list 4 5) (list 9 6) (list 4 7) (list 9 4) (list 3 8) (list 1 3) (list 1 9)) (list 23 22 7 22 19 12 10 11 24 3)) 131 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3)) (list 9 8 24 21)) 53 0.001)\n    (check-within (candidate (list (list 3 1) (list 0 2) (list 0 3)) (list 17 2 2 4)) 21 0.001)\n    (check-within (candidate (list (list 5 2) (list 3 4) (list 0 3) (list 1 0) (list 1 5)) (list 16 6 15 15 10 1)) 52 0.001)\n    (check-within (candidate (list (list 8 0) (list 8 1) (list 7 2) (list 3 7) (list 6 3) (list 4 6) (list 5 4) (list 5 8)) (list 10 25 10 6 21 17 11 15 15)) 120 0.001)\n    (check-within (candidate (list (list 0 4) (list 1 5) (list 2 6) (list 0 2) (list 1 0) (list 3 1) (list 3 7)) (list 20 1 16 12 5 23 21 4)) 82 0.001)\n    (check-within (candidate (list (list 7 1) (list 5 2) (list 0 3) (list 7 0) (list 7 4) (list 6 5) (list 6 7)) (list 6 20 14 17 18 16 11 1)) 97 0.001)\n    (check-within (candidate (list (list 3 2) (list 8 4) (list 1 6) (list 0 1) (list 5 0) (list 3 5) (list 8 3) (list 7 8)) (list 3 18 16 22 10 2 7 3 10)) 88 0.001)\n    (check-within (candidate (list (list 4 0) (list 3 4) (list 3 5) (list 3 6) (list 2 3) (list 1 2) (list 1 7)) (list 12 14 7 25 13 16 12 15)) 102 0.001)\n    (check-within (candidate (list (list 3 0) (list 5 2) (list 1 3) (list 4 1) (list 4 5)) (list 11 18 19 14 8 11)) 73 0.001)\n    (check-within (candidate (list (list 1 2) (list 4 1) (list 0 4) (list 8 5) (list 0 6) (list 7 0) (list 3 7) (list 3 8)) (list 17 22 14 15 2 21 7 9 1)) 98 0.001)\n    (check-within (candidate (list (list 2 1) (list 0 2) (list 4 3) (list 0 4) (list 0 5)) (list 1 2 24 25 9 24)) 84 0.001)\n    (check-within (candidate (list (list 3 1) (list 3 2) (list 0 4) (list 3 5) (list 0 3) (list 0 6)) (list 21 19 5 20 2 25 20)) 91 0.001)\n    (check-within (candidate (list (list 1 0) (list 4 1) (list 4 2) (list 3 4)) (list 3 6 17 4 20)) 47 0.001)\n    (check-within (candidate (list (list 6 1) (list 2 3) (list 6 7) (list 4 6) (list 2 4) (list 5 2) (list 5 8) (list 0 5) (list 0 9)) (list 23 19 15 4 3 18 25 22 6 11)) 123 0.001)\n    (check-within (candidate (list (list 2 0) (list 1 2) (list 5 1) (list 3 4) (list 3 5)) (list 23 24 10 15 10 22)) 94 0.001)\n    (check-within (candidate (list (list 1 0) (list 6 1) (list 6 2) (list 4 3) (list 5 4) (list 5 6)) (list 18 21 3 13 25 15 20)) 99 0.001)\n    (check-within (candidate (list (list 1 0) (list 3 1) (list 2 3)) (list 23 10 24 15)) 62 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 2) (list 1 3)) (list 10 4 12 14)) 36 0.001)\n    (check-within (candidate (list (list 2 0) (list 3 2) (list 1 3) (list 4 5) (list 1 4) (list 1 6)) (list 3 8 13 11 6 18 8)) 64 0.001)\n    (check-within (candidate (list (list 3 0) (list 3 2) (list 1 3) (list 1 4)) (list 18 19 7 7 2)) 46 0.001)\n    (check-within (candidate (list (list 7 0) (list 5 2) (list 1 3) (list 7 4) (list 1 5) (list 7 1) (list 6 7)) (list 24 24 16 17 25 9 3 23)) 118 0.001)\n    (check-within (candidate (list (list 2 0) (list 2 1) (list 2 3)) (list 25 12 5 7)) 44 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 2 3) (list 2 4)) (list 24 14 9 5 24)) 53 0.001)\n    (check-within (candidate (list (list 6 2) (list 7 3) (list 0 5) (list 4 0) (list 1 6) (list 4 1) (list 4 7)) (list 20 15 15 2 22 7 19 24)) 104 0.001)\n    (check-within (candidate (list (list 1 0) (list 4 2) (list 7 5) (list 3 6) (list 1 3) (list 4 1) (list 4 7)) (list 11 21 15 23 2 7 21 3)) 92 0.001)\n    (check-within (candidate (list (list 4 0) (list 2 1) (list 2 3) (list 2 4)) (list 22 20 20 8 14)) 70 0.001)\n    (check-within (candidate (list (list 0 2) (list 4 3) (list 0 4) (list 1 0) (list 1 6) (list 5 1) (list 5 7)) (list 18 10 19 9 11 14 11 18)) 92 0.001)\n    (check-within (candidate (list (list 6 1) (list 4 2) (list 4 3) (list 0 5) (list 4 0) (list 4 6)) (list 18 10 5 23 16 13 1)) 68 0.001)\n    (check-within (candidate (list (list 4 0) (list 6 2) (list 6 3) (list 6 4) (list 1 5) (list 7 1) (list 6 7)) (list 14 15 22 9 13 2 25 3)) 90 0.001)\n    (check-within (candidate (list (list 6 2) (list 0 3) (list 5 0) (list 1 5) (list 4 1) (list 4 6)) (list 22 10 19 14 18 24 8)) 93 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3)) (list 6 22 9 5)) 36 0.001)\n    (check-within (candidate (list (list 2 1) (list 0 2) (list 6 0) (list 6 4) (list 3 5) (list 3 6) (list 3 7)) (list 9 16 13 9 19 1 16 19)) 93 0.001)\n    (check-within (candidate (list (list 3 5) (list 7 3) (list 0 6) (list 4 0) (list 1 4) (list 2 1) (list 2 7)) (list 16 9 8 14 6 18 23 25)) 103 0.001)\n    (check-within (candidate (list (list 7 1) (list 4 5) (list 3 6) (list 4 3) (list 2 4) (list 0 2) (list 0 7)) (list 7 22 12 22 5 3 6 7)) 77 0.001)\n    (check-within (candidate (list (list 5 0) (list 4 1) (list 5 2) (list 3 5) (list 4 3) (list 7 4) (list 6 7)) (list 19 16 8 13 15 13 3 5)) 79 0.001)\n    (check-within (candidate (list (list 7 1) (list 6 2) (list 3 5) (list 8 3) (list 0 6) (list 4 0) (list 7 4) (list 7 8)) (list 23 11 22 6 19 6 19 8 25)) 116 0.001)\n    (check-within (candidate (list (list 4 0) (list 4 2) (list 1 3) (list 4 1) (list 4 5)) (list 23 22 13 1 11 25)) 84 0.001)\n    (check-within (candidate (list (list 4 0) (list 4 1) (list 2 3) (list 2 4)) (list 3 17 5 24 14)) 60 0.001)\n    (check-within (candidate (list (list 4 0) (list 2 4) (list 1 2) (list 3 1) (list 3 5)) (list 6 12 21 6 8 8)) 55 0.001)\n    (check-within (candidate (list (list 4 2) (list 5 4) (list 0 5) (list 0 6) (list 3 0) (list 1 3) (list 7 8) (list 1 7) (list 1 9)) (list 25 16 16 14 22 19 2 22 13 11)) 135 0.001)\n    (check-within (candidate (list (list 4 0) (list 1 3) (list 4 1) (list 7 5) (list 2 6) (list 4 2) (list 4 7)) (list 23 16 24 25 3 21 3 25)) 137 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 0) (list 2 3)) (list 22 17 9 9)) 35 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3192_maximumXorProduct", "language": "rkt", "prompt": "#lang racket\n;; Given three integers a, b, and n, return the maximum value of (a XOR x) * (b XOR x) where 0 <= x < 2n.\n;; Since the answer may be too large, return it modulo 109 + 7.\n;; Note that XOR is the bitwise XOR operation.\n;; Example 1:\n;; Input: a = 12, b = 5, n = 4\n;; Output: 98\n;; Explanation: For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \n;; It can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n;; Example 2:\n;; Input: a = 6, b = 7 , n = 5\n;; Output: 930\n;; Explanation: For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\n;; It can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n;; Example 3:\n;; Input: a = 1, b = 6, n = 3\n;; Output: 12\n;; Explanation: For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\n;; It can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n;; Constraints:\n;; 0 <= a, b < 250\n;; 0 <= n <= 50\n(define (maximumXorProduct a b n)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3192_maximumXorProduct.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumXorProduct))\n    (check-within (candidate 12 5 4) 98 0.001)\n    (check-within (candidate 6 7 5) 930 0.001)\n    (check-within (candidate 1 6 3) 12 0.001)\n    (check-within (candidate 0 0 1) 1 0.001)\n    (check-within (candidate 0 1 6) 3906 0.001)\n    (check-within (candidate 0 2 7) 15875 0.001)\n    (check-within (candidate 0 3 1) 2 0.001)\n    (check-within (candidate 0 4 0) 0 0.001)\n    (check-within (candidate 0 5 6) 3658 0.001)\n    (check-within (candidate 0 6 1) 7 0.001)\n    (check-within (candidate 0 7 2) 12 0.001)\n    (check-within (candidate 0 8 5) 713 0.001)\n    (check-within (candidate 0 9 2) 30 0.001)\n    (check-within (candidate 0 10 7) 14875 0.001)\n    (check-within (candidate 0 11 4) 84 0.001)\n    (check-within (candidate 0 12 2) 45 0.001)\n    (check-within (candidate 0 13 2) 42 0.001)\n    (check-within (candidate 0 14 0) 0 0.001)\n    (check-within (candidate 0 15 6) 3080 0.001)\n    (check-within (candidate 1 0 3) 42 0.001)\n    (check-within (candidate 1 1 4) 225 0.001)\n    (check-within (candidate 1 2 6) 3782 0.001)\n    (check-within (candidate 1 3 2) 3 0.001)\n    (check-within (candidate 1 4 5) 810 0.001)\n    (check-within (candidate 1 5 4) 165 0.001)\n    (check-within (candidate 1 6 4) 132 0.001)\n    (check-within (candidate 1 7 2) 15 0.001)\n    (check-within (candidate 1 8 0) 8 0.001)\n    (check-within (candidate 1 9 2) 33 0.001)\n    (check-within (candidate 1 10 7) 14756 0.001)\n    (check-within (candidate 1 11 7) 14875 0.001)\n    (check-within (candidate 1 12 7) 14518 0.001)\n    (check-within (candidate 1 13 0) 13 0.001)\n    (check-within (candidate 1 14 5) 552 0.001)\n    (check-within (candidate 1 15 4) 63 0.001)\n    (check-within (candidate 2 0 0) 0 0.001)\n    (check-within (candidate 2 1 0) 2 0.001)\n    (check-within (candidate 2 2 0) 4 0.001)\n    (check-within (candidate 2 3 5) 930 0.001)\n    (check-within (candidate 2 4 4) 143 0.001)\n    (check-within (candidate 2 5 5) 756 0.001)\n    (check-within (candidate 2 6 4) 165 0.001)\n    (check-within (candidate 2 7 3) 18 0.001)\n    (check-within (candidate 2 8 1) 27 0.001)\n    (check-within (candidate 2 9 2) 24 0.001)\n    (check-within (candidate 2 10 5) 713 0.001)\n    (check-within (candidate 2 11 0) 22 0.001)\n    (check-within (candidate 2 12 2) 39 0.001)\n    (check-within (candidate 2 13 1) 36 0.001)\n    (check-within (candidate 2 14 0) 28 0.001)\n    (check-within (candidate 2 15 2) 42 0.001)\n    (check-within (candidate 3 0 6) 3782 0.001)\n    (check-within (candidate 3 1 6) 3843 0.001)\n    (check-within (candidate 3 2 2) 6 0.001)\n    (check-within (candidate 3 3 7) 16129 0.001)\n    (check-within (candidate 3 4 5) 756 0.001)\n    (check-within (candidate 3 5 4) 143 0.001)\n    (check-within (candidate 3 6 2) 18 0.001)\n    (check-within (candidate 3 7 2) 21 0.001)\n    (check-within (candidate 3 8 6) 3300 0.001)\n    (check-within (candidate 3 9 1) 27 0.001)\n    (check-within (candidate 3 10 5) 690 0.001)\n    (check-within (candidate 3 11 1) 33 0.001)\n    (check-within (candidate 3 12 1) 36 0.001)\n    (check-within (candidate 3 13 2) 39 0.001)\n    (check-within (candidate 3 14 0) 42 0.001)\n    (check-within (candidate 3 15 6) 3245 0.001)\n    (check-within (candidate 4 0 4) 165 0.001)\n    (check-within (candidate 4 1 2) 18 0.001)\n    (check-within (candidate 4 2 2) 15 0.001)\n    (check-within (candidate 4 3 0) 12 0.001)\n    (check-within (candidate 4 4 3) 49 0.001)\n    (check-within (candidate 4 5 3) 42 0.001)\n    (check-within (candidate 4 6 2) 35 0.001)\n    (check-within (candidate 4 7 3) 30 0.001)\n    (check-within (candidate 4 8 4) 77 0.001)\n    (check-within (candidate 4 9 7) 14518 0.001)\n    (check-within (candidate 4 10 0) 40 0.001)\n    (check-within (candidate 4 11 5) 552 0.001)\n    (check-within (candidate 4 12 6) 3465 0.001)\n    (check-within (candidate 4 13 7) 14994 0.001)\n    (check-within (candidate 4 14 5) 667 0.001)\n    (check-within (candidate 4 15 6) 3300 0.001)\n    (check-within (candidate 5 0 1) 4 0.001)\n    (check-within (candidate 5 1 3) 21 0.001)\n    (check-within (candidate 5 2 2) 12 0.001)\n    (check-within (candidate 5 3 7) 15375 0.001)\n    (check-within (candidate 5 4 7) 16002 0.001)\n    (check-within (candidate 5 5 0) 25 0.001)\n    (check-within (candidate 5 6 1) 30 0.001)\n    (check-within (candidate 5 7 0) 35 0.001)\n    (check-within (candidate 5 8 2) 70 0.001)\n    (check-within (candidate 5 9 4) 77 0.001)\n    (check-within (candidate 5 10 5) 552 0.001)\n    (check-within (candidate 5 11 7) 14399 0.001)\n    (check-within (candidate 5 12 1) 60 0.001)\n    (check-within (candidate 5 13 5) 713 0.001)\n    (check-within (candidate 5 14 4) 84 0.001)\n    (check-within (candidate 5 15 0) 75 0.001)\n    (check-within (candidate 6 0 4) 143 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3193_maximumStrongPairXor", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition:\n;; |x - y| <= min(x, y)\n;; You need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array.\n;; Return the maximum XOR value out of all possible strong pairs in the array nums.\n;; Note that you can pick the same integer twice to form a pair.\n;; Example 1:\n;; Input: nums = [1,2,3,4,5]\n;; Output: 7\n;; Explanation: There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\n;; The maximum XOR possible from these pairs is 3 XOR 4 = 7.\n;; Example 2:\n;; Input: nums = [10,100]\n;; Output: 0\n;; Explanation: There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\n;; The maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n;; Example 3:\n;; Input: nums = [5,6,25,30]\n;; Output: 7\n;; Explanation: There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\n;; The maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.\n;; Constraints:\n;; 1 <= nums.length <= 50\n;; 1 <= nums[i] <= 100\n(define (maximumStrongPairXor nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3193_maximumStrongPairXor.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumStrongPairXor))\n    (check-within (candidate (list 1 2 3 4 5)) 7 0.001)\n    (check-within (candidate (list 10 100)) 0 0.001)\n    (check-within (candidate (list 5 6 25 30)) 7 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 100)) 0 0.001)\n    (check-within (candidate (list 1 1 2 3 5)) 6 0.001)\n    (check-within (candidate (list 1 1 3 8 7)) 15 0.001)\n    (check-within (candidate (list 1 1 4 4 3)) 7 0.001)\n    (check-within (candidate (list 1 1 6 6 9)) 15 0.001)\n    (check-within (candidate (list 1 1 10 3 9)) 3 0.001)\n    (check-within (candidate (list 1 2 1 5 3)) 6 0.001)\n    (check-within (candidate (list 1 2 2 1 2)) 3 0.001)\n    (check-within (candidate (list 1 2 3 8 1)) 3 0.001)\n    (check-within (candidate (list 1 2 5 5 10)) 15 0.001)\n    (check-within (candidate (list 1 2 8 3 2)) 3 0.001)\n    (check-within (candidate (list 1 2 9 2 8)) 3 0.001)\n    (check-within (candidate (list 1 3 3 2 1)) 3 0.001)\n    (check-within (candidate (list 1 3 8 5 3)) 13 0.001)\n    (check-within (candidate (list 1 3 9 6 5)) 15 0.001)\n    (check-within (candidate (list 1 4 1 2 5)) 6 0.001)\n    (check-within (candidate (list 1 4 3 9 7)) 14 0.001)\n    (check-within (candidate (list 1 4 4 3 4)) 7 0.001)\n    (check-within (candidate (list 1 4 5 2 1)) 6 0.001)\n    (check-within (candidate (list 1 4 8 6 6)) 14 0.001)\n    (check-within (candidate (list 1 5 1 9 1)) 12 0.001)\n    (check-within (candidate (list 1 5 4 1 7)) 3 0.001)\n    (check-within (candidate (list 1 5 5 2 7)) 3 0.001)\n    (check-within (candidate (list 1 5 9 1 2)) 12 0.001)\n    (check-within (candidate (list 1 5 9 10 4)) 15 0.001)\n    (check-within (candidate (list 1 6 2 7 9)) 15 0.001)\n    (check-within (candidate (list 1 6 3 3 10)) 12 0.001)\n    (check-within (candidate (list 1 6 4 5 3)) 7 0.001)\n    (check-within (candidate (list 1 6 4 6 1)) 2 0.001)\n    (check-within (candidate (list 1 6 5 5 8)) 14 0.001)\n    (check-within (candidate (list 1 6 6 1 9)) 15 0.001)\n    (check-within (candidate (list 1 6 8 5 3)) 14 0.001)\n    (check-within (candidate (list 1 6 8 10 3)) 14 0.001)\n    (check-within (candidate (list 1 6 9 8 2)) 15 0.001)\n    (check-within (candidate (list 1 6 10 1 2)) 12 0.001)\n    (check-within (candidate (list 1 7 1 4 3)) 7 0.001)\n    (check-within (candidate (list 1 7 2 1 10)) 13 0.001)\n    (check-within (candidate (list 1 7 2 10 10)) 13 0.001)\n    (check-within (candidate (list 1 7 6 1 4)) 3 0.001)\n    (check-within (candidate (list 1 7 8 6 8)) 15 0.001)\n    (check-within (candidate (list 1 8 1 1 8)) 0 0.001)\n    (check-within (candidate (list 1 8 4 2 1)) 12 0.001)\n    (check-within (candidate (list 1 8 4 5 6)) 14 0.001)\n    (check-within (candidate (list 1 8 5 10 4)) 15 0.001)\n    (check-within (candidate (list 1 8 8 8 3)) 0 0.001)\n    (check-within (candidate (list 1 8 10 2 6)) 14 0.001)\n    (check-within (candidate (list 1 9 4 4 2)) 6 0.001)\n    (check-within (candidate (list 1 9 6 5 7)) 15 0.001)\n    (check-within (candidate (list 1 9 6 8 1)) 15 0.001)\n    (check-within (candidate (list 1 9 8 2 8)) 3 0.001)\n    (check-within (candidate (list 1 9 8 9 6)) 15 0.001)\n    (check-within (candidate (list 1 9 9 7 6)) 15 0.001)\n    (check-within (candidate (list 1 10 1 1 1)) 0 0.001)\n    (check-within (candidate (list 1 10 5 10 6)) 15 0.001)\n    (check-within (candidate (list 1 10 8 7 2)) 15 0.001)\n    (check-within (candidate (list 1 10 9 9 2)) 3 0.001)\n    (check-within (candidate (list 2 1 1 5 5)) 3 0.001)\n    (check-within (candidate (list 2 1 1 7 4)) 6 0.001)\n    (check-within (candidate (list 2 1 8 3 2)) 3 0.001)\n    (check-within (candidate (list 2 1 9 2 1)) 3 0.001)\n    (check-within (candidate (list 2 2 4 1 4)) 6 0.001)\n    (check-within (candidate (list 2 2 5 5 1)) 3 0.001)\n    (check-within (candidate (list 2 2 5 10 6)) 15 0.001)\n    (check-within (candidate (list 2 2 8 2 10)) 2 0.001)\n    (check-within (candidate (list 2 2 10 5 9)) 15 0.001)\n    (check-within (candidate (list 2 3 3 5 3)) 6 0.001)\n    (check-within (candidate (list 2 3 8 8 10)) 2 0.001)\n    (check-within (candidate (list 2 4 5 3 2)) 7 0.001)\n    (check-within (candidate (list 2 4 6 8 8)) 14 0.001)\n    (check-within (candidate (list 2 4 6 9 8)) 15 0.001)\n    (check-within (candidate (list 2 4 8 7 5)) 15 0.001)\n    (check-within (candidate (list 2 4 10 4 2)) 6 0.001)\n    (check-within (candidate (list 2 4 10 6 2)) 12 0.001)\n    (check-within (candidate (list 2 4 10 7 8)) 15 0.001)\n    (check-within (candidate (list 2 4 10 9 3)) 7 0.001)\n    (check-within (candidate (list 2 5 2 5 5)) 0 0.001)\n    (check-within (candidate (list 2 5 3 10 10)) 15 0.001)\n    (check-within (candidate (list 2 5 7 2 7)) 2 0.001)\n    (check-within (candidate (list 2 5 9 8 9)) 13 0.001)\n    (check-within (candidate (list 2 5 10 8 4)) 15 0.001)\n    (check-within (candidate (list 2 6 1 6 4)) 6 0.001)\n    (check-within (candidate (list 2 6 1 8 7)) 15 0.001)\n    (check-within (candidate (list 2 6 7 4 2)) 6 0.001)\n    (check-within (candidate (list 2 6 8 6 10)) 14 0.001)\n    (check-within (candidate (list 2 6 10 5 4)) 15 0.001)\n    (check-within (candidate (list 2 7 1 8 9)) 15 0.001)\n    (check-within (candidate (list 2 7 2 8 10)) 15 0.001)\n    (check-within (candidate (list 2 7 3 3 7)) 1 0.001)\n    (check-within (candidate (list 2 7 4 8 1)) 15 0.001)\n    (check-within (candidate (list 2 7 9 2 6)) 15 0.001)\n    (check-within (candidate (list 2 7 10 7 1)) 13 0.001)\n    (check-within (candidate (list 2 8 1 9 5)) 13 0.001)\n    (check-within (candidate (list 2 8 7 10 3)) 15 0.001)\n    (check-within (candidate (list 2 9 1 7 7)) 14 0.001)\n    (check-within (candidate (list 2 9 2 8 2)) 1 0.001)\n    (check-within (candidate (list 2 9 5 10 10)) 15 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3194_findWordsContaining", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of strings words and a character x.\n;; Return an array of indices representing the words that contain the character x.\n;; Note that the returned array may be in any order.\n;; Example 1:\n;; Input: words = [\"leet\",\"code\"], x = \"e\"\n;; Output: [0,1]\n;; Explanation: \"e\" occurs in both words: \"leet\", and \"code\". Hence, we return indices 0 and 1.\n;; Example 2:\n;; Input: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\"\n;; Output: [0,2]\n;; Explanation: \"a\" occurs in \"abc\", and \"aaaa\". Hence, we return indices 0 and 2.\n;; Example 3:\n;; Input: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\"\n;; Output: []\n;; Explanation: \"z\" does not occur in any of the words. Hence, we return an empty array.\n;; Constraints:\n;; 1 <= words.length <= 50\n;; 1 <= words[i].length <= 50\n;; x is a lowercase English letter.\n;; words[i] consists only of lowercase English letters.\n(define (findWordsContaining words x)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3194_findWordsContaining.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findWordsContaining))\n    (check-within (candidate (list \"leet\" \"code\") e) (list 0 1) 0.001)\n    (check-within (candidate (list \"abc\" \"bcd\" \"aaaa\" \"cbc\") a) (list 0 2) 0.001)\n    (check-within (candidate (list \"abc\" \"bcd\" \"aaaa\" \"cbc\") z) (list ) 0.001)\n    (check-within (candidate (list \"sgtkshnss\" \"m\" \"ryvbkyvuz\" \"ezittyjwgb\" \"wudlwg\") x) (list ) 0.001)\n    (check-within (candidate (list \"lkwnhpbj\" \"tlohm\" \"juazsb\" \"f\" \"rq\") v) (list ) 0.001)\n    (check-within (candidate (list \"aaa\" \"imvtfjmxr\" \"wbzfoovjnf\" \"hqwrwmi\") c) (list ) 0.001)\n    (check-within (candidate (list \"utyeachht\" \"bgpkcs\" \"skeecqvvvw\" \"nccrd\") i) (list ) 0.001)\n    (check-within (candidate (list \"alcpxexztg\" \"r\") h) (list ) 0.001)\n    (check-within (candidate (list \"ekcpg\" \"pdknua\" \"fot\" \"janppw\" \"ofomkfvx\") g) (list 0) 0.001)\n    (check-within (candidate (list \"dq\" \"rlvopu\") d) (list 0) 0.001)\n    (check-within (candidate (list \"wzppkd\" \"jxvk\" \"zaztizmwuv\" \"hvcdtobr\") b) (list 3) 0.001)\n    (check-within (candidate (list \"y\" \"hs\" \"qznrkpi\") v) (list ) 0.001)\n    (check-within (candidate (list \"pze\" \"yojczsb\" \"mjvyr\" \"i\" \"xsygks\") q) (list ) 0.001)\n    (check-within (candidate (list \"qsgtjagcu\" \"m\") e) (list ) 0.001)\n    (check-within (candidate (list \"kidtwmw\" \"ogh\" \"trdedlh\" \"wwbtlindg\" \"naoylytpof\" \"ujcbzwzkm\" \"doamcoxdv\") o) (list 1 4 6) 0.001)\n    (check-within (candidate (list \"tsmeupctki\") t) (list 0) 0.001)\n    (check-within (candidate (list \"dqxlbljmpf\" \"uvdzfoiqg\" \"jsnbnx\" \"fbedae\" \"nodewb\" \"o\" \"ivepktj\") g) (list 1) 0.001)\n    (check-within (candidate (list \"fjlmmecm\" \"sautsoorhl\" \"n\" \"hsyco\" \"amlukrpjpv\" \"rmhdnj\" \"g\") e) (list 0) 0.001)\n    (check-within (candidate (list \"khjchmeciv\" \"vgx\" \"xghr\" \"bbufgegu\" \"qyfxu\") r) (list 2) 0.001)\n    (check-within (candidate (list \"jhtcugtcpl\" \"bvhlgmmla\" \"ntfkwzite\" \"imbtzafaj\" \"sdl\" \"t\") m) (list 1 3) 0.001)\n    (check-within (candidate (list \"kxoziqoafc\" \"vifcxifq\") q) (list 0 1) 0.001)\n    (check-within (candidate (list \"ckfkjjsonl\" \"scaaug\" \"rmvqzyiwc\" \"a\" \"smymw\") p) (list ) 0.001)\n    (check-within (candidate (list \"t\" \"exo\" \"npr\" \"skd\" \"bxpmbu\") e) (list 1) 0.001)\n    (check-within (candidate (list \"eulsl\" \"fwooyct\" \"ypytexil\") c) (list 1) 0.001)\n    (check-within (candidate (list \"nhd\" \"zheyegi\" \"ogz\" \"fpybmcc\" \"ntbbwtde\") g) (list 1 2) 0.001)\n    (check-within (candidate (list \"gwzvusl\" \"upcpvbfyxy\" \"hg\" \"yu\" \"wsfqgzhh\" \"zgphqacsyo\") o) (list 5) 0.001)\n    (check-within (candidate (list \"uiovpph\" \"xxj\" \"uwzxzvkobk\") r) (list ) 0.001)\n    (check-within (candidate (list \"abtrpwo\" \"sgaegnavk\" \"pfmv\") z) (list ) 0.001)\n    (check-within (candidate (list \"m\" \"fxtphsdmgy\" \"otq\" \"vwuhhnebr\" \"yen\") y) (list 1 4) 0.001)\n    (check-within (candidate (list \"irlzx\" \"lbrknhl\" \"roupfj\" \"fskaieszo\" \"nz\" \"ijfyejq\") e) (list 3 5) 0.001)\n    (check-within (candidate (list \"raavc\" \"tx\") l) (list ) 0.001)\n    (check-within (candidate (list \"bkpuvcrexw\" \"hxtbcdprhr\" \"ovt\" \"xgurm\" \"pjcz\" \"sbhwpjmyz\") g) (list 3) 0.001)\n    (check-within (candidate (list \"f\" \"xlmy\" \"akbiqa\" \"fobo\") s) (list ) 0.001)\n    (check-within (candidate (list \"mhan\") a) (list 0) 0.001)\n    (check-within (candidate (list \"uisx\") o) (list ) 0.001)\n    (check-within (candidate (list \"znqdolksyn\" \"keewspe\" \"ffod\" \"lah\" \"gadhym\" \"awnyymd\" \"fvkl\") v) (list 6) 0.001)\n    (check-within (candidate (list \"ftujx\" \"dnbwrurk\" \"t\" \"x\" \"zjzhdl\" \"jc\") t) (list 0 2) 0.001)\n    (check-within (candidate (list \"zrwf\" \"thp\" \"qecwlnq\" \"w\" \"teetdaxx\") t) (list 1 4) 0.001)\n    (check-within (candidate (list \"xyzgb\" \"qflfrfqgaf\") l) (list 1) 0.001)\n    (check-within (candidate (list \"shnjr\" \"qfvop\") y) (list ) 0.001)\n    (check-within (candidate (list \"fmwclqh\" \"xbphhgreze\" \"yi\" \"gmtzrfdab\" \"uicqa\" \"n\") i) (list 2 4) 0.001)\n    (check-within (candidate (list \"jgkv\" \"njhwihtv\" \"v\") z) (list ) 0.001)\n    (check-within (candidate (list \"tqkwoofh\" \"bcgngl\" \"frjpqgrr\" \"drvb\") x) (list ) 0.001)\n    (check-within (candidate (list \"npkvocbw\" \"tn\" \"dp\" \"c\" \"g\" \"fsxvzcnty\" \"ywnf\") k) (list 0) 0.001)\n    (check-within (candidate (list \"leompil\" \"vta\" \"fzrsps\" \"yp\" \"bykmgwgk\") o) (list 0) 0.001)\n    (check-within (candidate (list \"umq\" \"c\" \"ctuh\" \"eadzeuui\" \"tabum\" \"isuct\") p) (list ) 0.001)\n    (check-within (candidate (list \"rnmpdkmrnb\" \"icxxsvss\" \"h\" \"gd\") s) (list 1) 0.001)\n    (check-within (candidate (list \"ft\" \"hsjf\" \"e\" \"xi\") w) (list ) 0.001)\n    (check-within (candidate (list \"ozf\" \"xkehlkgp\" \"vliewlbv\" \"okgaahah\") b) (list 2) 0.001)\n    (check-within (candidate (list \"gbktzr\" \"kbamubluz\" \"dwoi\" \"crhldx\" \"idjronpded\" \"rqaz\") c) (list 3) 0.001)\n    (check-within (candidate (list \"gvbzqcb\" \"rwtbra\" \"iuijl\" \"qbmpbi\") c) (list 0) 0.001)\n    (check-within (candidate (list \"lsh\" \"szhxhcdc\" \"quem\" \"zupiydjeqp\" \"czxyvysrrb\" \"aqnlqtnfiv\") p) (list 3) 0.001)\n    (check-within (candidate (list \"leuah\" \"liaoczeuch\" \"ol\" \"ify\" \"layh\" \"ifzudwuybw\" \"x\") p) (list ) 0.001)\n    (check-within (candidate (list \"ksdpwwho\" \"ktunsikyu\") a) (list ) 0.001)\n    (check-within (candidate (list \"vpypaumzlp\" \"kqrb\" \"pgw\") l) (list 0) 0.001)\n    (check-within (candidate (list \"jkrpnx\" \"c\" \"kqi\" \"xrsaviyusg\" \"waoxq\" \"fld\" \"otxfgcp\") l) (list 5) 0.001)\n    (check-within (candidate (list \"tetw\" \"zl\" \"wd\" \"hnkxoxlnz\" \"dexgufawjd\" \"oolpr\" \"yyfwizbsl\") p) (list 5) 0.001)\n    (check-within (candidate (list \"hihprd\" \"kitgiflc\" \"nr\" \"idduuahfkm\") x) (list ) 0.001)\n    (check-within (candidate (list \"flfxeca\" \"g\") e) (list 0) 0.001)\n    (check-within (candidate (list \"st\" \"betf\" \"ipacxza\" \"jpnw\") r) (list ) 0.001)\n    (check-within (candidate (list \"cvuxnzaib\" \"c\" \"tiytr\" \"yiav\" \"hp\" \"yg\") d) (list ) 0.001)\n    (check-within (candidate (list \"yz\" \"k\" \"midujexvn\" \"kwcgbht\") y) (list 0) 0.001)\n    (check-within (candidate (list \"qcxobdaxv\") q) (list 0) 0.001)\n    (check-within (candidate (list \"b\" \"shrexcf\" \"ve\" \"eqpbnuy\" \"qdhahodo\" \"aerdf\" \"bdjlaakagk\") p) (list 3) 0.001)\n    (check-within (candidate (list \"ympv\") q) (list ) 0.001)\n    (check-within (candidate (list \"thfy\" \"lnfzoyafiy\" \"qmc\" \"boijcl\" \"pvbzmsa\" \"yjarwylcyc\") e) (list ) 0.001)\n    (check-within (candidate (list \"hqptwi\") o) (list ) 0.001)\n    (check-within (candidate (list \"bv\" \"xgrhtjnxh\" \"fdtljkxa\" \"po\" \"hejof\") k) (list 2) 0.001)\n    (check-within (candidate (list \"mfdrclyx\" \"pith\") e) (list ) 0.001)\n    (check-within (candidate (list \"bxeblhrl\" \"o\" \"uvv\") b) (list 0) 0.001)\n    (check-within (candidate (list \"giygz\") u) (list ) 0.001)\n    (check-within (candidate (list \"ffqw\" \"nykncbxrqi\" \"pgzy\" \"of\" \"oye\" \"f\") g) (list 2) 0.001)\n    (check-within (candidate (list \"jjnh\" \"nrbh\" \"z\") l) (list ) 0.001)\n    (check-within (candidate (list \"gdzkdtvrm\" \"ps\" \"kp\" \"sbdlkac\" \"s\" \"bt\") n) (list ) 0.001)\n    (check-within (candidate (list \"hpsk\" \"stjltzz\" \"gvbjwzktgg\" \"hmeovbxvv\" \"gqaxqoshbh\" \"mqnwyabqq\" \"sq\") f) (list ) 0.001)\n    (check-within (candidate (list \"gwmg\" \"qdjeaxgc\" \"rlajltxpd\" \"d\") g) (list 0 1) 0.001)\n    (check-within (candidate (list \"dupx\" \"r\" \"j\" \"wq\" \"macfcfoz\") r) (list 1) 0.001)\n    (check-within (candidate (list \"rmypzoyto\" \"wvhtrbuz\" \"dgt\" \"tmhqswmkx\" \"trpjwzitp\" \"tbetdxic\") t) (list 0 1 2 3 4 5) 0.001)\n    (check-within (candidate (list \"vpkjymgdb\" \"s\" \"gv\" \"geie\") g) (list 0 2 3) 0.001)\n    (check-within (candidate (list \"epnmbry\" \"hhfhprvqba\") l) (list ) 0.001)\n    (check-within (candidate (list \"zst\" \"mjzbdxsks\" \"dza\" \"neqj\" \"oqeilr\") d) (list 1 2) 0.001)\n    (check-within (candidate (list \"ffruqk\" \"sse\" \"cyj\" \"tntq\" \"mibbhhpce\") c) (list 2 4) 0.001)\n    (check-within (candidate (list \"vumzrbe\" \"qudq\" \"qfrt\") u) (list 0 1) 0.001)\n    (check-within (candidate (list \"wcrrprvu\" \"fizkw\" \"vzcjxhjy\" \"e\") r) (list 0) 0.001)\n    (check-within (candidate (list \"gjk\" \"vri\") n) (list ) 0.001)\n    (check-within (candidate (list \"fds\" \"vbmg\" \"p\" \"iesyvc\" \"wgmyxhoo\" \"yfllvzr\") f) (list 0 5) 0.001)\n    (check-within (candidate (list \"mifbjo\" \"kpjlwfbas\" \"skhueysodn\" \"zeewicisy\") g) (list ) 0.001)\n    (check-within (candidate (list \"pvkmoccv\" \"j\") y) (list ) 0.001)\n    (check-within (candidate (list \"s\" \"uhcfwsssbe\" \"iwofeukmx\" \"yfta\" \"ovrdcb\" \"psnje\") s) (list 0 1 5) 0.001)\n    (check-within (candidate (list \"klpzrjw\" \"qmrhbpa\") v) (list ) 0.001)\n    (check-within (candidate (list \"fzegksjmw\" \"masiwhjue\" \"gngsht\" \"xwvmp\" \"aahn\" \"dwxr\") c) (list ) 0.001)\n    (check-within (candidate (list \"mveahpesx\" \"tsqds\" \"g\" \"mux\" \"bivffitjx\" \"zfsqdje\") f) (list 4 5) 0.001)\n    (check-within (candidate (list \"c\") a) (list ) 0.001)\n    (check-within (candidate (list \"jzmhnhqkq\") a) (list ) 0.001)\n    (check-within (candidate (list \"cfdgbc\" \"ltpvko\" \"batjenrlq\" \"edwefhw\") t) (list 1 2) 0.001)\n    (check-within (candidate (list \"smlcojfydr\" \"slb\") r) (list 0) 0.001)\n    (check-within (candidate (list \"lnjimir\") x) (list ) 0.001)\n    (check-within (candidate (list \"do\") e) (list ) 0.001)\n    (check-within (candidate (list \"xyyvbxsb\" \"dc\" \"mmqpb\" \"mmbwv\" \"wdreyof\" \"kpk\" \"reeb\") l) (list ) 0.001)\n    (check-within (candidate (list \"ytvyknnmzv\" \"jsoe\" \"wctzk\") i) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3196_maxFrequencyScore", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and an integer k.\n;; You can perform the following operation on the array at most k times:\n;; Choose any index i from the array and increase or decrease nums[i] by 1.\n;; The score of the final array is the frequency of the most frequent element in the array.\n;; Return the maximum score you can achieve.\n;; The frequency of an element is the number of occurences of that element in the array.\n;; Example 1:\n;; Input: nums = [1,2,6,4], k = 3\n;; Output: 3\n;; Explanation: We can do the following operations on the array:\n;; - Choose i = 0, and increase the value of nums[0] by 1. The resulting array is [2,2,6,4].\n;; - Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,3].\n;; - Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,2].\n;; The element 2 is the most frequent in the final array so our score is 3.\n;; It can be shown that we cannot achieve a better score.\n;; Example 2:\n;; Input: nums = [1,4,4,2,4], k = 0\n;; Output: 3\n;; Explanation: We cannot apply any operations so our score will be the frequency of the most frequent element in the original array, which is 3.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 109\n;; 0 <= k <= 1014\n(define (maxFrequencyScore nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3196_maxFrequencyScore.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxFrequencyScore))\n    (check-within (candidate (list 1 2 6 4) 3) 3 0.001)\n    (check-within (candidate (list 1 4 4 2 4) 0) 3 0.001)\n    (check-within (candidate (list 3 20 13 2 3 15 24 19 8 13 19 20 21) 45) 10 0.001)\n    (check-within (candidate (list 13 22 29 21 13 17 5 2 27 6 10 4 23 29 27) 117) 14 0.001)\n    (check-within (candidate (list 27 8 30 3 13 28 7 14 21 19 24 28 29 1 14 22 6) 23) 8 0.001)\n    (check-within (candidate (list 10 11 3) 1) 2 0.001)\n    (check-within (candidate (list 10 19 26 18 27 18) 9) 4 0.001)\n    (check-within (candidate (list 17 24 10 23 22 15 25 2 13 24 22 25 25 21) 52) 13 0.001)\n    (check-within (candidate (list 28 6 22 10) 12) 2 0.001)\n    (check-within (candidate (list 17 17 25 14 29 28 20 14 16 22 4 28 2 5 3 11 6 20 17) 76) 14 0.001)\n    (check-within (candidate (list 23 10 18 21 16 23 14) 2) 3 0.001)\n    (check-within (candidate (list 5 13 7) 8) 3 0.001)\n    (check-within (candidate (list 6 29 3 19 10 6 20 26 1 30 11 25 29 12 29 14 15 16 5) 64) 12 0.001)\n    (check-within (candidate (list 10 26 21 18 30 25 1) 8) 3 0.001)\n    (check-within (candidate (list 29 10 26 1 2 2 17 7 5 16 24 27 7 7 26 26 24) 3) 5 0.001)\n    (check-within (candidate (list 11 16 6 12 3 8 5 29 9 15 7 9 14 6 11 14 12 23 22 14) 79) 19 0.001)\n    (check-within (candidate (list 5 17 15 14 27 11 22 6 4) 26) 6 0.001)\n    (check-within (candidate (list 13 22 17) 4) 2 0.001)\n    (check-within (candidate (list 24 6 14 6 30 9 6 11 21 10 12 27 1) 90) 13 0.001)\n    (check-within (candidate (list 19 5 2 23 16 22 3 2 5 20 17 3 22 1) 15) 7 0.001)\n    (check-within (candidate (list 15 20) 5) 2 0.001)\n    (check-within (candidate (list 9 2 5 14 19 5 10 10 2 25 1 1 1 14 9 13 5 6 10 1) 80) 18 0.001)\n    (check-within (candidate (list 2 29 24 19 5) 24) 3 0.001)\n    (check-within (candidate (list 4 10 5) 6) 3 0.001)\n    (check-within (candidate (list 5 2 22 7 18 26 15 4 24 26 24) 19) 6 0.001)\n    (check-within (candidate (list 23 21 10) 13) 3 0.001)\n    (check-within (candidate (list 5 23 7 2 1 5 12 2 20 24 5 4) 71) 11 0.001)\n    (check-within (candidate (list 22 13 30) 17) 3 0.001)\n    (check-within (candidate (list 7 23 29 8 9 3 4 16 24 6 18 20 19 14 5) 55) 11 0.001)\n    (check-within (candidate (list 3 11 24 27 10) 24) 4 0.001)\n    (check-within (candidate (list 12 11 21 6 13 27 11 2 27 26 24 13) 0) 2 0.001)\n    (check-within (candidate (list 4 10 26 16 21 26 11 26 30 24 18 30 23 26 24) 50) 12 0.001)\n    (check-within (candidate (list 4 2 18 14 9 29) 4) 2 0.001)\n    (check-within (candidate (list 9 27 19 18) 9) 3 0.001)\n    (check-within (candidate (list 11 17 29 9 22 7 13 14 12 24 9) 47) 10 0.001)\n    (check-within (candidate (list 20 10 15 16) 10) 3 0.001)\n    (check-within (candidate (list 16 2 6 20 2 18 16 8 15 19 22 29 24 2 26 19) 40) 11 0.001)\n    (check-within (candidate (list 17 13 19 28 6 8 5 25 2 3 9 4 21 6 13 10 5 3) 113) 18 0.001)\n    (check-within (candidate (list 16 5 10 15) 5) 2 0.001)\n    (check-within (candidate (list 23 2 23 27 21) 2) 3 0.001)\n    (check-within (candidate (list 15 26 3 14 3 18 16 19 11 9 2 18 14 8 20 9) 75) 15 0.001)\n    (check-within (candidate (list 13 23 4 5 2) 3) 3 0.001)\n    (check-within (candidate (list 3 1 9 12) 8) 3 0.001)\n    (check-within (candidate (list 4 27 21 16 11 5 5 1 5 10) 18) 7 0.001)\n    (check-within (candidate (list 14 4 23 27 8 25 7 12 12 21 21 11 20 23 30 11 12 29 22) 77) 15 0.001)\n    (check-within (candidate (list 10 30 25) 20) 3 0.001)\n    (check-within (candidate (list 4 8 22 25 27 26 18 14 18) 56) 9 0.001)\n    (check-within (candidate (list 2 19 27 25 23 17 8 16 28 10 6 24 6) 28) 7 0.001)\n    (check-within (candidate (list 27 25 27 10 23 14 24 17 12 22 14 11 19 16 7 15) 21) 9 0.001)\n    (check-within (candidate (list 23 11) 12) 2 0.001)\n    (check-within (candidate (list 20 28 15 11 22 26 29 2 16 9) 61) 9 0.001)\n    (check-within (candidate (list 21 11 1 17 20 19 24 10 1 4 10 30 11 29 20 12 18 5 4 27) 110) 17 0.001)\n    (check-within (candidate (list 22 29 7 1 26 22 27 1 16 25 25) 26) 8 0.001)\n    (check-within (candidate (list 26 6 24) 20) 3 0.001)\n    (check-within (candidate (list 29 24 9 4 2 9 28 1 25 25 13 22 27 26 15 18) 2) 4 0.001)\n    (check-within (candidate (list 9 19 1 24 15 19 22 13 10 8 4 10 26 23 11 8) 89) 15 0.001)\n    (check-within (candidate (list 18 6 20 22 25 21 19 19 15 5 7 29 28 7 17 4) 104) 16 0.001)\n    (check-within (candidate (list 9 11 28 24 30 6 1 30 22 16 20 19 21 17) 62) 11 0.001)\n    (check-within (candidate (list 15 13 29 28) 15) 3 0.001)\n    (check-within (candidate (list 28 26 8) 18) 2 0.001)\n    (check-within (candidate (list 6 12 24 4 25 23 5 13 7 5) 12) 6 0.001)\n    (check-within (candidate (list 8 23 15 15 3 19 6 20 12 18 7 8 18 19 11 20 4 18) 54) 14 0.001)\n    (check-within (candidate (list 30 2 4 7 19 3 3 14 24 4 26 17 1 12 4 11) 36) 11 0.001)\n    (check-within (candidate (list 12 15 21 17 7 20 16 30 8 6 28 28 23 6 12 14 19 26 27 5) 87) 16 0.001)\n    (check-within (candidate (list 15 1 27 4 5 20 5 26 28) 38) 6 0.001)\n    (check-within (candidate (list 27 14 30 6 14 29 5 8) 51) 7 0.001)\n    (check-within (candidate (list 18 22) 4) 2 0.001)\n    (check-within (candidate (list 17 28 16 24 29) 5) 3 0.001)\n    (check-within (candidate (list 2 22 27 12 30 9 27 3 26 23 25 30 20 19 9 1 23 14 18 26) 30) 11 0.001)\n    (check-within (candidate (list 26 16 9 7 10 16 26 22 24 1 30 8 15 5 28 16 13 12) 84) 15 0.001)\n    (check-within (candidate (list 26 8 27 27 22 28 8 26 24 15 6 13 20 12) 55) 11 0.001)\n    (check-within (candidate (list 19 19 20 14 19 20 5 4 14 26 12 17 14 29 3 9) 94) 16 0.001)\n    (check-within (candidate (list 9 19 14 17 14 20 27 9 22 29 15 20 6 25 8 17 18 24 23) 44) 13 0.001)\n    (check-within (candidate (list 2 10) 8) 2 0.001)\n    (check-within (candidate (list 20 2 27 27 19 20 8 21 15 20 14 18 25) 17) 8 0.001)\n    (check-within (candidate (list 6 27 6 30 2 1 7 24 18 4 2 18 17) 56) 10 0.001)\n    (check-within (candidate (list 23 18 30 24 5 21) 33) 6 0.001)\n    (check-within (candidate (list 12 16 24 18 12 20 26 15 11 23 4 25) 35) 9 0.001)\n    (check-within (candidate (list 9 9 11 18) 11) 4 0.001)\n    (check-within (candidate (list 19 21 7 15 21 10 5 27 2 27 14) 63) 9 0.001)\n    (check-within (candidate (list 25 17 13 6 3 19 21 12 29 1 16 14 24 27 25 13 1 5 17) 136) 19 0.001)\n    (check-within (candidate (list 4 4 8 9 14 7 27 8 2 29 1 28 23 13) 109) 14 0.001)\n    (check-within (candidate (list 14 2 18 30 28 17 25 10 7 10 19 3 26 22 12 17 8 4) 24) 8 0.001)\n    (check-within (candidate (list 27 17 12 19 25 1 9 4 9 20 2 5) 70) 10 0.001)\n    (check-within (candidate (list 18 25 12 20 19 26 2 15 3 6 29 29 2 24 4 9) 106) 14 0.001)\n    (check-within (candidate (list 17 18 14 1 28 15 14 13 9 16 28 9 21 23 2 11) 65) 14 0.001)\n    (check-within (candidate (list 17 15 29 30 12 13 10) 37) 6 0.001)\n    (check-within (candidate (list 15 4 11 1 18 29 9 23 14 25 15 12 15 6 30 28) 60) 12 0.001)\n    (check-within (candidate (list 20 6 8 15 12 8 26 7 27 8 5 25 17 12 7 1 23 24 8) 62) 14 0.001)\n    (check-within (candidate (list 22 21 30 16 23 24 2 2 24) 39) 7 0.001)\n    (check-within (candidate (list 8 9 6 30 28 2 1 3 14 8 21 26 13 29 23 3 14 9 6 25) 91) 16 0.001)\n    (check-within (candidate (list 7 10 16 23 17 22 28 7 4 21 25 21 19 30 13 19 15 21 23) 53) 15 0.001)\n    (check-within (candidate (list 25 17 1 24 3 6 8 29 19 4 16 12 9 28 1 21 13 29) 151) 18 0.001)\n    (check-within (candidate (list 1 6 14 9) 8) 3 0.001)\n    (check-within (candidate (list 5 7 17 2 23 6 3 13 2 11 10 8 18 16 3 11 26) 30) 10 0.001)\n    (check-within (candidate (list 27 27 16 18 24 7 26 30 21 25 28 28 29 27 28 6) 0) 3 0.001)\n    (check-within (candidate (list 29 16 9 21 2 16 4 17 22 11 20 23 5 22 7 27 20) 85) 15 0.001)\n    (check-within (candidate (list 25 5 24 2 30 15 17 27 15 15 27) 69) 10 0.001)\n    (check-within (candidate (list 6 29 24 14 9 14 1 1 28 20 19 21 13 25 17 24 30 14) 107) 16 0.001)\n    (check-within (candidate (list 17 20 2 11 5 7 28) 36) 6 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3199_distributeCandies", "language": "rkt", "prompt": "#lang racket\n;; You are given two positive integers n and limit.\n;; Return the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.\n;; Example 1:\n;; Input: n = 5, limit = 2\n;; Output: 3\n;; Explanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\n;; Example 2:\n;; Input: n = 3, limit = 3\n;; Output: 10\n;; Explanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\n;; Constraints:\n;;  * 1 <= n <= 50\n;;  * 1 <= limit <= 50\n(define (distributeCandies n limit)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3199_distributeCandies.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate distributeCandies))\n    (check-within (candidate 5 2) 3 0.001)\n    (check-within (candidate 3 3) 10 0.001)\n    (check-within (candidate 1 1) 3 0.001)\n    (check-within (candidate 1 2) 3 0.001)\n    (check-within (candidate 1 3) 3 0.001)\n    (check-within (candidate 1 4) 3 0.001)\n    (check-within (candidate 1 5) 3 0.001)\n    (check-within (candidate 1 6) 3 0.001)\n    (check-within (candidate 1 7) 3 0.001)\n    (check-within (candidate 1 8) 3 0.001)\n    (check-within (candidate 1 9) 3 0.001)\n    (check-within (candidate 1 10) 3 0.001)\n    (check-within (candidate 1 11) 3 0.001)\n    (check-within (candidate 1 12) 3 0.001)\n    (check-within (candidate 1 13) 3 0.001)\n    (check-within (candidate 1 14) 3 0.001)\n    (check-within (candidate 1 15) 3 0.001)\n    (check-within (candidate 1 16) 3 0.001)\n    (check-within (candidate 1 17) 3 0.001)\n    (check-within (candidate 1 18) 3 0.001)\n    (check-within (candidate 1 19) 3 0.001)\n    (check-within (candidate 1 20) 3 0.001)\n    (check-within (candidate 1 21) 3 0.001)\n    (check-within (candidate 1 22) 3 0.001)\n    (check-within (candidate 1 23) 3 0.001)\n    (check-within (candidate 1 24) 3 0.001)\n    (check-within (candidate 1 25) 3 0.001)\n    (check-within (candidate 2 1) 3 0.001)\n    (check-within (candidate 2 2) 6 0.001)\n    (check-within (candidate 2 3) 6 0.001)\n    (check-within (candidate 2 4) 6 0.001)\n    (check-within (candidate 2 5) 6 0.001)\n    (check-within (candidate 2 6) 6 0.001)\n    (check-within (candidate 2 7) 6 0.001)\n    (check-within (candidate 2 8) 6 0.001)\n    (check-within (candidate 2 9) 6 0.001)\n    (check-within (candidate 2 10) 6 0.001)\n    (check-within (candidate 2 11) 6 0.001)\n    (check-within (candidate 2 12) 6 0.001)\n    (check-within (candidate 2 13) 6 0.001)\n    (check-within (candidate 2 14) 6 0.001)\n    (check-within (candidate 2 15) 6 0.001)\n    (check-within (candidate 2 16) 6 0.001)\n    (check-within (candidate 2 17) 6 0.001)\n    (check-within (candidate 2 18) 6 0.001)\n    (check-within (candidate 2 19) 6 0.001)\n    (check-within (candidate 2 20) 6 0.001)\n    (check-within (candidate 2 21) 6 0.001)\n    (check-within (candidate 2 22) 6 0.001)\n    (check-within (candidate 2 23) 6 0.001)\n    (check-within (candidate 2 24) 6 0.001)\n    (check-within (candidate 2 25) 6 0.001)\n    (check-within (candidate 3 1) 1 0.001)\n    (check-within (candidate 3 2) 7 0.001)\n    (check-within (candidate 3 4) 10 0.001)\n    (check-within (candidate 3 5) 10 0.001)\n    (check-within (candidate 3 6) 10 0.001)\n    (check-within (candidate 3 7) 10 0.001)\n    (check-within (candidate 3 8) 10 0.001)\n    (check-within (candidate 3 9) 10 0.001)\n    (check-within (candidate 3 10) 10 0.001)\n    (check-within (candidate 3 11) 10 0.001)\n    (check-within (candidate 3 12) 10 0.001)\n    (check-within (candidate 3 13) 10 0.001)\n    (check-within (candidate 3 14) 10 0.001)\n    (check-within (candidate 3 15) 10 0.001)\n    (check-within (candidate 3 16) 10 0.001)\n    (check-within (candidate 3 17) 10 0.001)\n    (check-within (candidate 3 18) 10 0.001)\n    (check-within (candidate 3 19) 10 0.001)\n    (check-within (candidate 3 20) 10 0.001)\n    (check-within (candidate 3 21) 10 0.001)\n    (check-within (candidate 3 22) 10 0.001)\n    (check-within (candidate 3 23) 10 0.001)\n    (check-within (candidate 3 24) 10 0.001)\n    (check-within (candidate 3 25) 10 0.001)\n    (check-within (candidate 4 1) 0 0.001)\n    (check-within (candidate 4 2) 6 0.001)\n    (check-within (candidate 4 3) 12 0.001)\n    (check-within (candidate 4 4) 15 0.001)\n    (check-within (candidate 4 5) 15 0.001)\n    (check-within (candidate 4 6) 15 0.001)\n    (check-within (candidate 4 7) 15 0.001)\n    (check-within (candidate 4 8) 15 0.001)\n    (check-within (candidate 4 9) 15 0.001)\n    (check-within (candidate 4 10) 15 0.001)\n    (check-within (candidate 4 11) 15 0.001)\n    (check-within (candidate 4 12) 15 0.001)\n    (check-within (candidate 4 13) 15 0.001)\n    (check-within (candidate 4 14) 15 0.001)\n    (check-within (candidate 4 15) 15 0.001)\n    (check-within (candidate 4 16) 15 0.001)\n    (check-within (candidate 4 17) 15 0.001)\n    (check-within (candidate 4 18) 15 0.001)\n    (check-within (candidate 4 19) 15 0.001)\n    (check-within (candidate 4 20) 15 0.001)\n    (check-within (candidate 4 21) 15 0.001)\n    (check-within (candidate 4 22) 15 0.001)\n    (check-within (candidate 4 23) 15 0.001)\n    (check-within (candidate 4 24) 15 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3200_stringCount", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer n.\n;; A string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains \"leet\" as a substring.\n;; For example:\n;;  * The string \"lteer\" is good because we can rearrange it to form \"leetr\" .\n;;  * \"letl\" is not good because we cannot rearrange it to contain \"leet\" as a substring.\n;; Return the total number of good strings of length n.\n;; Since the answer may be large, return it modulo 109 + 7.\n;; A substring is a contiguous sequence of characters within a string.\n;; Example 1:\n;; Input: n = 4\n;; Output: 12\n;; Explanation: The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\".\n;; Example 2:\n;; Input: n = 10\n;; Output: 83943898\n;; Explanation: The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.\n;; Constraints:\n;;  * 1 <= n <= 105\n(define (stringCount n)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3200_stringCount.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate stringCount))\n    (check-within (candidate 4) 12 0.001)\n    (check-within (candidate 10) 83943898 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 2) 0 0.001)\n    (check-within (candidate 3) 0 0.001)\n    (check-within (candidate 5) 1460 0.001)\n    (check-within (candidate 6) 106620 0.001)\n    (check-within (candidate 7) 6058192 0.001)\n    (check-within (candidate 8) 295164156 0.001)\n    (check-within (candidate 9) 947613240 0.001)\n    (check-within (candidate 11) 795234177 0.001)\n    (check-within (candidate 12) 55396773 0.001)\n    (check-within (candidate 13) 968092561 0.001)\n    (check-within (candidate 14) 715599898 0.001)\n    (check-within (candidate 15) 430509685 0.001)\n    (check-within (candidate 16) 462719236 0.001)\n    (check-within (candidate 17) 155543310 0.001)\n    (check-within (candidate 18) 159683962 0.001)\n    (check-within (candidate 19) 808507313 0.001)\n    (check-within (candidate 20) 291395991 0.001)\n    (check-within (candidate 21) 461951930 0.001)\n    (check-within (candidate 22) 871561520 0.001)\n    (check-within (candidate 23) 993268925 0.001)\n    (check-within (candidate 24) 871982505 0.001)\n    (check-within (candidate 25) 935610434 0.001)\n    (check-within (candidate 26) 867518559 0.001)\n    (check-within (candidate 27) 3067523 0.001)\n    (check-within (candidate 28) 716801469 0.001)\n    (check-within (candidate 29) 452206104 0.001)\n    (check-within (candidate 30) 52805056 0.001)\n    (check-within (candidate 31) 61992724 0.001)\n    (check-within (candidate 32) 76928250 0.001)\n    (check-within (candidate 33) 257967635 0.001)\n    (check-within (candidate 34) 549347744 0.001)\n    (check-within (candidate 35) 290653839 0.001)\n    (check-within (candidate 36) 123906995 0.001)\n    (check-within (candidate 37) 41253530 0.001)\n    (check-within (candidate 38) 828924891 0.001)\n    (check-within (candidate 39) 60893212 0.001)\n    (check-within (candidate 40) 618599272 0.001)\n    (check-within (candidate 41) 840600409 0.001)\n    (check-within (candidate 42) 995406621 0.001)\n    (check-within (candidate 43) 991833054 0.001)\n    (check-within (candidate 44) 403185520 0.001)\n    (check-within (candidate 45) 904195428 0.001)\n    (check-within (candidate 46) 643609894 0.001)\n    (check-within (candidate 47) 177947842 0.001)\n    (check-within (candidate 48) 826753905 0.001)\n    (check-within (candidate 49) 855443295 0.001)\n    (check-within (candidate 50) 232825199 0.001)\n    (check-within (candidate 51) 227116084 0.001)\n    (check-within (candidate 52) 417264566 0.001)\n    (check-within (candidate 53) 468973861 0.001)\n    (check-within (candidate 54) 999145386 0.001)\n    (check-within (candidate 55) 721276317 0.001)\n    (check-within (candidate 56) 385673910 0.001)\n    (check-within (candidate 57) 7891114 0.001)\n    (check-within (candidate 58) 85081065 0.001)\n    (check-within (candidate 59) 194677227 0.001)\n    (check-within (candidate 60) 759126147 0.001)\n    (check-within (candidate 61) 273111337 0.001)\n    (check-within (candidate 62) 166598301 0.001)\n    (check-within (candidate 63) 955460796 0.001)\n    (check-within (candidate 64) 685704195 0.001)\n    (check-within (candidate 65) 821093882 0.001)\n    (check-within (candidate 66) 172674695 0.001)\n    (check-within (candidate 67) 464621746 0.001)\n    (check-within (candidate 68) 432202634 0.001)\n    (check-within (candidate 69) 465445347 0.001)\n    (check-within (candidate 70) 654273613 0.001)\n    (check-within (candidate 71) 366864502 0.001)\n    (check-within (candidate 72) 124689502 0.001)\n    (check-within (candidate 73) 419691288 0.001)\n    (check-within (candidate 74) 987033948 0.001)\n    (check-within (candidate 75) 842828500 0.001)\n    (check-within (candidate 76) 409614634 0.001)\n    (check-within (candidate 77) 73844796 0.001)\n    (check-within (candidate 78) 584672527 0.001)\n    (check-within (candidate 79) 113476429 0.001)\n    (check-within (candidate 80) 974106352 0.001)\n    (check-within (candidate 81) 646239862 0.001)\n    (check-within (candidate 82) 420253116 0.001)\n    (check-within (candidate 83) 817573615 0.001)\n    (check-within (candidate 84) 471199144 0.001)\n    (check-within (candidate 85) 567239979 0.001)\n    (check-within (candidate 86) 221534816 0.001)\n    (check-within (candidate 87) 707218848 0.001)\n    (check-within (candidate 88) 687360104 0.001)\n    (check-within (candidate 89) 551986596 0.001)\n    (check-within (candidate 90) 122933939 0.001)\n    (check-within (candidate 91) 427294641 0.001)\n    (check-within (candidate 92) 14022454 0.001)\n    (check-within (candidate 93) 568729284 0.001)\n    (check-within (candidate 94) 653568519 0.001)\n    (check-within (candidate 95) 15509440 0.001)\n    (check-within (candidate 96) 991824044 0.001)\n    (check-within (candidate 97) 690441338 0.001)\n    (check-within (candidate 98) 600462833 0.001)\n    (check-within (candidate 99) 880019356 0.001)\n    (check-within (candidate 100) 86731066 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3202_findHighAccessEmployees", "language": "rkt", "prompt": "#lang racket\n;; You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.\n;; The access time is represented as four digits using a 24-hour time format, for example, \"0800\" or \"2250\".\n;; An employee is said to be high-access if he has accessed the system three or more times within a one-hour period.\n;; Times with exactly one hour of difference are not considered part of the same one-hour period. For example, \"0815\" and \"0915\" are not part of the same one-hour period.\n;; Access times at the start and end of the day are not counted within the same one-hour period. For example, \"0005\" and \"2350\" are not part of the same one-hour period.\n;; Return a list that contains the names of high-access employees with any order you want.\n;; Example 1:\n;; Input: access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]\n;; Output: [\"a\"]\n;; Explanation: \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\n;; But \"b\" does not have more than two access times at all.\n;; So the answer is [\"a\"].\n;; Example 2:\n;; Input: access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]\n;; Output: [\"c\",\"d\"]\n;; Explanation: \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n;; \"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\n;; However, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"].\n;; Example 3:\n;; Input: access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]\n;; Output: [\"ab\",\"cd\"]\n;; Explanation: \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n;; \"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\n;; So the answer is [\"ab\",\"cd\"].\n;; Constraints:\n;; 1 <= access_times.length <= 100\n;; access_times[i].length == 2\n;; 1 <= access_times[i][0].length <= 10\n;; access_times[i][0] consists only of English small letters.\n;; access_times[i][1].length == 4\n;; access_times[i][1] is in 24-hour time format.\n;; access_times[i][1] consists only of '0' to '9'.\n(define (findHighAccessEmployees access_times)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3202_findHighAccessEmployees.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findHighAccessEmployees))\n    (check-within (candidate (list (list \"a\" \"0549\") (list \"b\" \"0457\") (list \"a\" \"0532\") (list \"a\" \"0621\") (list \"b\" \"0540\"))) (list \"a\") 0.001)\n    (check-within (candidate (list (list \"d\" \"0002\") (list \"c\" \"0808\") (list \"c\" \"0829\") (list \"e\" \"0215\") (list \"d\" \"1508\") (list \"d\" \"1444\") (list \"d\" \"1410\") (list \"c\" \"0809\"))) (list \"c\" \"d\") 0.001)\n    (check-within (candidate (list (list \"cd\" \"1025\") (list \"ab\" \"1025\") (list \"cd\" \"1046\") (list \"cd\" \"1055\") (list \"ab\" \"1124\") (list \"ab\" \"1120\"))) (list \"ab\" \"cd\") 0.001)\n    (check-within (candidate (list (list \"baipstt\" \"1456\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"bouo\" \"1126\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"cavfbqg\" \"2304\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"cenjcq\" \"1007\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"cqotrwqcaq\" \"0131\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"downbuk\" \"1951\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"dqsoiyz\" \"2204\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"duzeyrov\" \"0243\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"erfg\" \"1223\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"fwhefd\" \"2026\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"gbefbne\" \"0911\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"gp\" \"1540\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"ht\" \"1319\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"inahnsjdqz\" \"1750\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"jwxvijxo\" \"0851\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"kibwwvjuez\" \"0716\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"lvry\" \"0706\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mbsyxxfzjf\" \"0114\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mlehvzqb\" \"1620\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mmgat\" \"0516\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mxatapbs\" \"2240\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mzxbgtfc\" \"1531\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"nnhh\" \"1445\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"o\" \"1414\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"qaxqifxxww\" \"1557\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"rjy\" \"0200\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"sgpgh\" \"0539\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"sxx\" \"0325\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"tkvgcf\" \"1645\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"ttk\" \"0304\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"un\" \"0833\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"vlifcdn\" \"0731\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"w\" \"2224\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"wkmehwsg\" \"2023\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"y\" \"1005\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"ynnale\" \"1331\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"yt\" \"0900\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"zbgzk\" \"0527\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"a\" \"0039\") (list \"a\" \"0042\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"ajhzcltqse\" \"0605\") (list \"ajhzcltqse\" \"0558\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"cbaqsymoi\" \"0001\") (list \"cbaqsymoi\" \"0004\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"df\" \"1958\") (list \"df\" \"2002\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"dhmnhvou\" \"0529\") (list \"dhmnhvou\" \"0531\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"epghzrog\" \"0333\") (list \"epghzrog\" \"0333\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"gda\" \"1529\") (list \"gda\" \"1534\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"gjhtgm\" \"2207\") (list \"gjhtgm\" \"2156\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"gsd\" \"2030\") (list \"gsd\" \"2046\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"gsstuktwm\" \"1403\") (list \"gsstuktwm\" \"1357\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"h\" \"2159\") (list \"h\" \"2203\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"hxrdffk\" \"1736\") (list \"hxrdffk\" \"1724\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"iaxsnenx\" \"2037\") (list \"iaxsnenx\" \"2050\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"ikwjvflxq\" \"0055\") (list \"ikwjvflxq\" \"0056\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"jkgjmku\" \"0743\") (list \"jkgjmku\" \"0754\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"jkw\" \"0241\") (list \"jkw\" \"0235\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"jykugiprxf\" \"1633\") (list \"jykugiprxf\" \"1641\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"kdxw\" \"1338\") (list \"kdxw\" \"1336\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"kenltmrg\" \"0932\") (list \"kenltmrg\" \"0941\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"kptjrr\" \"1356\") (list \"kptjrr\" \"1349\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mcd\" \"1333\") (list \"mcd\" \"1325\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"mhkizga\" \"1552\") (list \"mhkizga\" \"1551\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"monxm\" \"1748\") (list \"monxm\" \"1742\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"msjydtinfy\" \"1301\") (list \"msjydtinfy\" \"1245\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"myhdmu\" \"1407\") (list \"myhdmu\" \"1419\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"nyoezc\" \"1050\") (list \"nyoezc\" \"1041\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"oksvrskxch\" \"0053\") (list \"oksvrskxch\" \"0111\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"pxc\" \"1915\") (list \"pxc\" \"1910\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"qedxyj\" \"0609\") (list \"qedxyj\" \"0614\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"qmslkyxnph\" \"0946\") (list \"qmslkyxnph\" \"0958\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"r\" \"0206\") (list \"r\" \"0202\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"r\" \"2041\") (list \"r\" \"2052\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"rf\" \"2205\") (list \"rf\" \"2203\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"rswegeuhqd\" \"0235\") (list \"rswegeuhqd\" \"0238\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"skfgl\" \"0718\") (list \"skfgl\" \"0712\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"smnnl\" \"2329\") (list \"smnnl\" \"2340\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"tpbbxpx\" \"0409\") (list \"tpbbxpx\" \"0408\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"uiqxqp\" \"0515\") (list \"uiqxqp\" \"0516\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"uyuz\" \"1530\") (list \"uyuz\" \"1543\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"vfeunkee\" \"1500\") (list \"vfeunkee\" \"1508\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"wbyd\" \"1848\") (list \"wbyd\" \"1839\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"x\" \"0522\") (list \"x\" \"0506\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"xhrhdy\" \"1455\") (list \"xhrhdy\" \"1454\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"xmsypay\" \"1605\") (list \"xmsypay\" \"1612\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"xy\" \"0015\") (list \"xy\" \"0021\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"ydtnnpzw\" \"0516\") (list \"ydtnnpzw\" \"0520\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"zh\" \"2348\") (list \"zh\" \"2334\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"zinywjn\" \"0017\") (list \"zinywjn\" \"0019\"))) (list ) 0.001)\n    (check-within (candidate (list (list \"aczdfmsd\" \"0317\") (list \"aczdfmsd\" \"0314\") (list \"aczdfmsd\" \"0320\"))) (list \"aczdfmsd\") 0.001)\n    (check-within (candidate (list (list \"bsluadumi\" \"1518\") (list \"bsluadumi\" \"1516\") (list \"bsluadumi\" \"1510\"))) (list \"bsluadumi\") 0.001)\n    (check-within (candidate (list (list \"ckrdpxq\" \"1122\") (list \"ckrdpxq\" \"1125\") (list \"ckrdpxq\" \"1121\"))) (list \"ckrdpxq\") 0.001)\n    (check-within (candidate (list (list \"fe\" \"1320\") (list \"fe\" \"1326\") (list \"fe\" \"1331\"))) (list \"fe\") 0.001)\n    (check-within (candidate (list (list \"ff\" \"1508\") (list \"ff\" \"1508\") (list \"ff\" \"1516\"))) (list \"ff\") 0.001)\n    (check-within (candidate (list (list \"fnlmbcedu\" \"0052\") (list \"fnlmbcedu\" \"0103\") (list \"fnlmbcedu\" \"0055\"))) (list \"fnlmbcedu\") 0.001)\n    (check-within (candidate (list (list \"hffgwjjve\" \"0159\") (list \"hffgwjjve\" \"0152\") (list \"hffgwjjve\" \"0159\"))) (list \"hffgwjjve\") 0.001)\n    (check-within (candidate (list (list \"ivlvfgwsx\" \"0122\") (list \"ivlvfgwsx\" \"0135\") (list \"ivlvfgwsx\" \"0139\"))) (list \"ivlvfgwsx\") 0.001)\n    (check-within (candidate (list (list \"jlfnksqlt\" \"0304\") (list \"jlfnksqlt\" \"0252\") (list \"jlfnksqlt\" \"0304\"))) (list \"jlfnksqlt\") 0.001)\n    (check-within (candidate (list (list \"jy\" \"0647\") (list \"jy\" \"0652\") (list \"jy\" \"0704\"))) (list \"jy\") 0.001)\n    (check-within (candidate (list (list \"kchzzdso\" \"2329\") (list \"kchzzdso\" \"2326\") (list \"kchzzdso\" \"2329\"))) (list \"kchzzdso\") 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3203_canMakePalindromeQueries", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed string s having an even length n.\n;; You are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di].\n;; For each query i, you are allowed to perform the following operations:\n;; Rearrange the characters within the substring s[ai:bi], where 0 <= ai <= bi < n / 2.\n;; Rearrange the characters within the substring s[ci:di], where n / 2 <= ci <= di < n.\n;; For each query, your task is to determine whether it is possible to make s a palindrome by performing the operations.\n;; Each query is answered independently of the others.\n;; Return a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise.\n;; A substring is a contiguous sequence of characters within a string.\n;; s[x:y] represents the substring consisting of characters from the index x to index y in s, both inclusive.\n;; Example 1:\n;; Input: s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]\n;; Output: [true,true]\n;; Explanation: In this example, there are two queries:\n;; In the first query:\n;; - a0 = 1, b0 = 1, c0 = 3, d0 = 5.\n;; - So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.\n;; - To make s a palindrome, s[3:5] can be rearranged to become => abccba.\n;; - Now, s is a palindrome. So, answer[0] = true.\n;; In the second query:\n;; - a1 = 0, b1 = 2, c1 = 5, d1 = 5.\n;; - So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.\n;; - To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.\n;; - Now, s is a palindrome. So, answer[1] = true.\n;; Example 2:\n;; Input: s = \"abbcdecbba\", queries = [[0,2,7,9]]\n;; Output: [false]\n;; Explanation: In this example, there is only one query.\n;; a0 = 0, b0 = 2, c0 = 7, d0 = 9.\n;; So, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.\n;; It is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\n;; So, answer[0] = false.\n;; Example 3:\n;; Input: s = \"acbcab\", queries = [[1,2,4,5]]\n;; Output: [true]\n;; Explanation: In this example, there is only one query.\n;; a0 = 1, b0 = 2, c0 = 4, d0 = 5.\n;; So, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.\n;; To make s a palindrome s[1:2] can be rearranged to become abccab.\n;; Then, s[4:5] can be rearranged to become abccba.\n;; Now, s is a palindrome. So, answer[0] = true.\n;; Constraints:\n;; 2 <= n == s.length <= 105\n;; 1 <= queries.length <= 105\n;; queries[i].length == 4\n;; ai == queries[i][0], bi == queries[i][1]\n;; ci == queries[i][2], di == queries[i][3]\n;; 0 <= ai <= bi < n / 2\n;; n / 2 <= ci <= di < n \n;; n is even.\n;; s consists of only lowercase English letters.\n(define (canMakePalindromeQueries s queries)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3203_canMakePalindromeQueries.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate canMakePalindromeQueries))\n    (check-within (candidate abcabc (list (list 1 1 3 5) (list 0 2 5 5))) (list #t #t) 0.001)\n    (check-within (candidate abbcdecbba (list (list 0 2 7 9))) (list #f) 0.001)\n    (check-within (candidate acbcab (list (list 1 2 4 5))) (list #t) 0.001)\n    (check-within (candidate bcdbdc (list (list 1 2 3 3))) (list #f) 0.001)\n    (check-within (candidate bb (list (list 0 0 1 1))) (list #t) 0.001)\n    (check-within (candidate eoquueqo (list (list 3 3 6 6))) (list #f) 0.001)\n    (check-within (candidate dd (list (list 0 0 1 1))) (list #t) 0.001)\n    (check-within (candidate ceddceddcc (list (list 0 1 6 8))) (list #f) 0.001)\n    (check-within (candidate bdbd (list (list 0 0 2 3))) (list #t) 0.001)\n    (check-within (candidate eeee (list (list 0 1 2 3))) (list #t) 0.001)\n    (check-within (candidate deebdeeddb (list (list 1 2 5 7))) (list #f) 0.001)\n    (check-within (candidate xwaswsxwaw (list (list 1 3 5 6))) (list #f) 0.001)\n    (check-within (candidate askloakosala (list (list 2 4 7 10))) (list #f) 0.001)\n    (check-within (candidate bbccbb (list (list 0 1 4 5))) (list #t) 0.001)\n    (check-within (candidate djaypzjpyzad (list (list 0 3 7 8))) (list #f) 0.001)\n    (check-within (candidate ajvnbnznjnzbva (list (list 5 6 10 11))) (list #f) 0.001)\n    (check-within (candidate vbeptwzvtwpzbe (list (list 3 6 10 11))) (list #f) 0.001)\n    (check-within (candidate cababc (list (list 1 2 3 4))) (list #t) 0.001)\n    (check-within (candidate cbbbbc (list (list 1 1 5 5))) (list #t) 0.001)\n    (check-within (candidate qupzexxhqxpzhxeu (list (list 2 4 8 12))) (list #f) 0.001)\n    (check-within (candidate cdbdbc (list (list 1 2 3 3))) (list #t) 0.001)\n    (check-within (candidate odaxusaweuasuoeudxwa (list (list 0 5 10 14))) (list #f) 0.001)\n    (check-within (candidate ujfscqolkwjucoswlkfq (list (list 1 9 17 18))) (list #f) 0.001)\n    (check-within (candidate ceacea (list (list 0 2 3 5))) (list #t) 0.001)\n    (check-within (candidate bnjzcgmnecxxbmnjngxzecxc (list (list 8 9 19 22))) (list #f) 0.001)\n    (check-within (candidate daeaed (list (list 0 2 3 3))) (list #t) 0.001)\n    (check-within (candidate ddaadd (list (list 0 2 3 4))) (list #t) 0.001)\n    (check-within (candidate ddedde (list (list 0 2 4 5))) (list #t) 0.001)\n    (check-within (candidate pmzwetzhzursuhmeswpzrztz (list (list 4 6 16 17))) (list #f) 0.001)\n    (check-within (candidate qcryjkdzmqyoojzrckymdqyq (list (list 2 8 21 22))) (list #f) 0.001)\n    (check-within (candidate qdltkndnclarncadtqnlldkr (list (list 3 4 15 16))) (list #f) 0.001)\n    (check-within (candidate ecbbce (list (list 0 1 3 5))) (list #t) 0.001)\n    (check-within (candidate eczecz (list (list 0 0 3 5))) (list #t) 0.001)\n    (check-within (candidate etuouqokbalafokfbuqaaoetlu (list (list 3 11 21 23))) (list #f) 0.001)\n    (check-within (candidate mpepem (list (list 0 2 3 4))) (list #t) 0.001)\n    (check-within (candidate nbpechkpmudbsenphdmsbbupck (list (list 6 7 18 19))) (list #f) 0.001)\n    (check-within (candidate bccacacb (list (list 3 3 4 7))) (list #t) 0.001)\n    (check-within (candidate stgjtzqwgkuadjgqugkwdtzast (list (list 5 10 13 23))) (list #f) 0.001)\n    (check-within (candidate qiyikbayvhkcgxyaqckgxkhivbyi (list (list 5 12 17 24))) (list #f) 0.001)\n    (check-within (candidate ceedceed (list (list 0 1 4 7))) (list #t) 0.001)\n    (check-within (candidate rcguwczbjhjhgqrggqcbwjzhjuch (list (list 5 7 16 20))) (list #f) 0.001)\n    (check-within (candidate ckwbnmqmtzbixrrkixbtbqzmnwmc (list (list 1 9 15 24))) (list #t) 0.001)\n    (check-within (candidate riirxzxuqpspoiixpirsoxrzpiuq (list (list 1 6 14 21))) (list #f) 0.001)\n    (check-within (candidate geettndnusqufidtqdfgtsieenundu (list (list 6 8 19 23))) (list #f) 0.001)\n    (check-within (candidate bb (list (list 0 0 1 1) (list 0 0 1 1))) (list #t #t) 0.001)\n    (check-within (candidate cc (list (list 0 0 1 1) (list 0 0 1 1))) (list #t #t) 0.001)\n    (check-within (candidate dd (list (list 0 0 1 1) (list 0 0 1 1))) (list #t #t) 0.001)\n    (check-within (candidate ee (list (list 0 0 1 1) (list 0 0 1 1))) (list #t #t) 0.001)\n    (check-within (candidate aeae (list (list 1 1 2 3) (list 1 1 3 3))) (list #t #f) 0.001)\n    (check-within (candidate eaae (list (list 0 1 3 3) (list 0 0 2 3))) (list #t #t) 0.001)\n    (check-within (candidate eded (list (list 0 1 2 3) (list 1 1 2 3))) (list #t #t) 0.001)\n    (check-within (candidate lrlr (list (list 0 1 2 3) (list 0 0 2 2))) (list #t #f) 0.001)\n    (check-within (candidate dbaabd (list (list 0 1 5 5) (list 1 2 4 5))) (list #t #t) 0.001)\n    (check-within (candidate dcbcbd (list (list 0 1 4 4) (list 0 2 3 4))) (list #f #t) 0.001)\n    (check-within (candidate hykkyh (list (list 0 0 3 4) (list 1 2 3 4))) (list #t #t) 0.001)\n    (check-within (candidate lvrvrl (list (list 2 2 4 5) (list 0 2 3 4))) (list #f #t) 0.001)\n    (check-within (candidate adceaecd (list (list 3 3 5 5) (list 0 1 4 6))) (list #f #t) 0.001)\n    (check-within (candidate baadadba (list (list 1 2 4 5) (list 0 2 4 5))) (list #f #t) 0.001)\n    (check-within (candidate bceaabec (list (list 1 3 4 7) (list 0 2 6 6))) (list #t #t) 0.001)\n    (check-within (candidate ifchcifh (list (list 1 2 5 6) (list 1 1 4 6))) (list #f #f) 0.001)\n    (check-within (candidate adeeeeeaed (list (list 2 4 7 9) (list 3 4 8 8))) (list #t #f) 0.001)\n    (check-within (candidate aedbdbddea (list (list 4 4 7 8) (list 2 2 8 9))) (list #f #f) 0.001)\n    (check-within (candidate caeaaaaaec (list (list 0 2 5 8) (list 0 0 5 9))) (list #t #t) 0.001)\n    (check-within (candidate dbaccccdba (list (list 4 4 6 7) (list 2 3 8 9))) (list #f #f) 0.001)\n    (check-within (candidate deabadabea (list (list 0 3 7 9) (list 0 2 5 7))) (list #f #t) 0.001)\n    (check-within (candidate eddeededee (list (list 0 3 6 9) (list 0 0 6 9))) (list #f #f) 0.001)\n    (check-within (candidate eedbbedebb (list (list 2 2 6 7) (list 2 2 5 6))) (list #f #f) 0.001)\n    (check-within (candidate gvtkakgvat (list (list 1 2 7 7) (list 2 3 7 9))) (list #f #f) 0.001)\n    (check-within (candidate bzvvicviczbv (list (list 1 2 7 8) (list 1 4 7 8))) (list #f #f) 0.001)\n    (check-within (candidate ljccjajcljac (list (list 2 4 6 10) (list 3 5 7 9))) (list #f #f) 0.001)\n    (check-within (candidate rxvzvezvrvxe (list (list 1 4 8 10) (list 3 3 10 11))) (list #f #f) 0.001)\n    (check-within (candidate amgpelwpmlaewg (list (list 3 4 7 9) (list 0 6 7 10))) (list #f #t) 0.001)\n    (check-within (candidate leubdglmbglleudm (list (list 1 3 9 14) (list 2 6 13 14))) (list #f #f) 0.001)\n    (check-within (candidate ooxuznriuzrooixn (list (list 1 3 10 12) (list 1 4 9 13))) (list #f #f) 0.001)\n    (check-within (candidate nlaonaphinpnalohai (list (list 2 5 13 13) (list 2 7 9 14))) (list #f #f) 0.001)\n    (check-within (candidate rujokutobuttlysjusrtltuobkoytu (list (list 5 6 18 23) (list 10 13 15 26))) (list #f #f) 0.001)\n    (check-within (candidate bb (list (list 0 0 1 1) (list 0 0 1 1) (list 0 0 1 1))) (list #t #t #t) 0.001)\n    (check-within (candidate cc (list (list 0 0 1 1) (list 0 0 1 1) (list 0 0 1 1))) (list #t #t #t) 0.001)\n    (check-within (candidate dbdb (list (list 0 0 2 2) (list 1 1 3 3) (list 0 1 2 3))) (list #f #f #t) 0.001)\n    (check-within (candidate ebbe (list (list 0 1 3 3) (list 1 1 2 2) (list 0 0 2 3))) (list #t #t #t) 0.001)\n    (check-within (candidate acacaa (list (list 0 1 5 5) (list 1 1 4 4) (list 1 2 3 4))) (list #f #f #t) 0.001)\n    (check-within (candidate bbaabb (list (list 0 1 4 5) (list 0 2 3 5) (list 2 2 5 5))) (list #t #t #t) 0.001)\n    (check-within (candidate bbebbe (list (list 0 1 3 5) (list 2 2 4 5) (list 0 1 5 5))) (list #t #f #f) 0.001)\n    (check-within (candidate ddaadd (list (list 1 1 4 4) (list 0 0 4 4) (list 0 2 3 5))) (list #t #t #t) 0.001)\n    (check-within (candidate nlhhln (list (list 2 2 4 5) (list 1 2 5 5) (list 2 2 3 3))) (list #t #t #t) 0.001)\n    (check-within (candidate zbebez (list (list 0 2 5 5) (list 1 1 3 5) (list 0 2 4 5))) (list #t #t #t) 0.001)\n    (check-within (candidate cbcbbcbc (list (list 0 2 7 7) (list 1 2 4 7) (list 0 2 4 5))) (list #t #t #t) 0.001)\n    (check-within (candidate deceecde (list (list 3 3 6 7) (list 1 2 4 5) (list 2 3 7 7))) (list #t #f #f) 0.001)\n    (check-within (candidate fydyfyyd (list (list 0 2 4 6) (list 1 3 4 7) (list 2 3 6 7))) (list #t #t #f) 0.001)\n    (check-within (candidate dccabcdbca (list (list 1 3 5 8) (list 2 4 7 7) (list 0 2 6 9))) (list #f #f #f) 0.001)\n    (check-within (candidate eacbdeacbd (list (list 4 4 8 9) (list 3 4 7 9) (list 0 0 6 8))) (list #f #f #f) 0.001)\n    (check-within (candidate eddaaedada (list (list 0 1 7 8) (list 0 1 7 8) (list 0 3 7 9))) (list #f #f #f) 0.001)\n    (check-within (candidate vvsbgsvgbv (list (list 0 1 6 9) (list 2 3 8 9) (list 0 0 6 7))) (list #f #f #f) 0.001)\n    (check-within (candidate sukesivksseuiv (list (list 2 3 11 13) (list 5 5 7 13) (list 2 5 8 13))) (list #f #t #f) 0.001)\n    (check-within (candidate pbcjpsfxwtbcfjwpsptx (list (list 0 4 13 13) (list 5 5 15 18) (list 2 3 13 18))) (list #f #f #f) 0.001)\n    (check-within (candidate natvhtruvwyutyvvnarhwt (list (list 5 7 14 21) (list 0 8 11 19) (list 2 8 11 14))) (list #f #f #f) 0.001)\n    (check-within (candidate yjsjywxbriejyxieysrwbj (list (list 4 5 15 19) (list 1 9 12 17) (list 3 6 12 18))) (list #f #f #f) 0.001)\n    (check-within (candidate ellaghdbmazdallhmegabddz (list (list 4 6 13 19) (list 4 11 17 17) (list 7 10 13 16))) (list #f #f #f) 0.001)\n    (check-within (candidate wcfnhuaulqxbuuxafcwhnbql (list (list 5 11 13 18) (list 7 8 18 21) (list 3 6 21 23))) (list #f #f #f) 0.001)\n    (check-within (candidate qyioinjmvpgpropimvqiygrnjp (list (list 1 4 15 25) (list 1 8 19 22) (list 4 9 18 23))) (list #f #f #f) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3206_findIntersectionValues", "language": "rkt", "prompt": "#lang racket\n;; You are given two 0-indexed integer arrays nums1 and nums2 of sizes n and m, respectively.\n;; Consider calculating the following values:\n;; The number of indices i such that 0 <= i < n and nums1[i] occurs at least once in nums2.\n;; The number of indices i such that 0 <= i < m and nums2[i] occurs at least once in nums1.\n;; Return an integer array answer of size 2 containing the two values in the above order.\n;; Example 1:\n;; Input: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\n;; Output: [3,4]\n;; Explanation: We calculate the values as follows:\n;; - The elements at indices 1, 2, and 3 in nums1 occur at least once in nums2. So the first value is 3.\n;; - The elements at indices 0, 1, 3, and 4 in nums2 occur at least once in nums1. So the second value is 4.\n;; Example 2:\n;; Input: nums1 = [3,4,2,3], nums2 = [1,5]\n;; Output: [0,0]\n;; Explanation: There are no common elements between the two arrays, so the two values will be 0.\n;; Constraints:\n;; n == nums1.length\n;; m == nums2.length\n;; 1 <= n, m <= 100\n;; 1 <= nums1[i], nums2[i] <= 100\n(define (findIntersectionValues nums1 nums2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3206_findIntersectionValues.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findIntersectionValues))\n    (check-within (candidate (list 4 3 2 3 1) (list 2 2 5 2 3 6)) (list 3 4) 0.001)\n    (check-within (candidate (list 3 4 2 3) (list 1 5)) (list 0 0) 0.001)\n    (check-within (candidate (list 24 28 7 27 7 27 9 24 9 10) (list 12 29 9 7 5)) (list 4 2) 0.001)\n    (check-within (candidate (list 10 30 16 18) (list 23 30 30 6 10 26 9 27 6 16 18 10 27 2 20 7 16)) (list 4 7) 0.001)\n    (check-within (candidate (list 7 23 27 20 21 29 7 27 27 18 7 6 20 10) (list 27 27 28 24 20 4 6 17 9 29 20 14 20)) (list 7 7) 0.001)\n    (check-within (candidate (list 15 30 6 6) (list 15 4 16 10 7 23 24 3 4 6 14 8 18 1 29 27 2 17)) (list 3 2) 0.001)\n    (check-within (candidate (list 24 7 8 6 22 28 22 28 7 19) (list 3 7 28 7 3 3)) (list 4 3) 0.001)\n    (check-within (candidate (list 23 4 26 17 23 13) (list 24 17 20 16 1 13 17 28 17)) (list 2 4) 0.001)\n    (check-within (candidate (list 5 8 18 27 16 29 27 12 1 29 16 27 22 19 14 12 11 25) (list 24 8 16)) (list 3 2) 0.001)\n    (check-within (candidate (list 29 17 30 17 15 30 11 2 24 28 28 30 30 27 30 2 30 9 1 7) (list 12 12 11 21 2 28 5 24 12 17 24 29 22 19 11 17 1 23)) (list 10 10) 0.001)\n    (check-within (candidate (list 4 27 12 16 16 21 26 7 19 21 24 26 12 24 22 12 16) (list 1 25 8 27 23 27 27 24)) (list 3 4) 0.001)\n    (check-within (candidate (list 27 19 20 16 24 27 27 24) (list 30 21 21 6 17 16)) (list 1 1) 0.001)\n    (check-within (candidate (list 3 19 21 5 24 26 22 22 5) (list 23 26 20 14 30 9 10 24 19 22 19 6 3 20 22 22 5 24 24)) (list 8 11) 0.001)\n    (check-within (candidate (list 13 13 29 12) (list 29 29 13 7 30 22)) (list 3 3) 0.001)\n    (check-within (candidate (list 30 4 16 14 14 14 20 15 20 30 6 10 14) (list 30 16 20 2 18 10 5 6 30 20 22 18 14 23 15)) (list 12 9) 0.001)\n    (check-within (candidate (list 22 1 22 4 11 22 4 20 11 29 11 11 4 26 20 12 20 8 26 17) (list 4 17 7 15)) (list 4 2) 0.001)\n    (check-within (candidate (list 30 15 16 15 11 16 26 15 21) (list 22 25 27 2 26 20 18 15 26 20 16)) (list 6 4) 0.001)\n    (check-within (candidate (list 5 6) (list 13 12 8 5 19 13 27)) (list 1 1) 0.001)\n    (check-within (candidate (list 27 28 15 20 5 13 28 29 24 29 20 15 5 20 20 25 9 20 24 20) (list 16 20 13 24 11)) (list 9 3) 0.001)\n    (check-within (candidate (list 25 7 18) (list 28 1 14 22 24 8 25 17)) (list 1 1) 0.001)\n    (check-within (candidate (list 10 15) (list 4 10 15 28)) (list 2 2) 0.001)\n    (check-within (candidate (list 11 11 25) (list 11 28 25 13 23 11)) (list 3 3) 0.001)\n    (check-within (candidate (list 10 30 27 8 8 5 11 12 17 13 14 27 17 19 13 20 27) (list 10 14 25 2 17 29 10 9 5 30 15 27)) (list 9 7) 0.001)\n    (check-within (candidate (list 19 22 22 22 22 29 22 28 29) (list 7 28 29 22 16 22 22 4 17 11 22 22 22 25 25)) (list 8 8) 0.001)\n    (check-within (candidate (list 18 1 23 1 1) (list 16 9 1 4 15 11)) (list 3 1) 0.001)\n    (check-within (candidate (list 30 11 15 1 15 6 5 26 15 15) (list 1 20 19 30 17 10 6 15)) (list 7 4) 0.001)\n    (check-within (candidate (list 17 6 30 30 15 30 22 2 18 22 21 21 17 19 25 30 18 30 1) (list 2 16 25 5 25 1 14 11)) (list 3 4) 0.001)\n    (check-within (candidate (list 3 21 21 23 14) (list 1 28 1 3 27 15 28 29 22 14 8 24)) (list 2 2) 0.001)\n    (check-within (candidate (list 8 20 29 23 29 2 2 2 20) (list 2 24 20 28 11 8 6 25)) (list 6 3) 0.001)\n    (check-within (candidate (list 22 27 4 27 30 22 25 8 8 30 1 16 1) (list 9 21 8 12)) (list 2 1) 0.001)\n    (check-within (candidate (list 19 11 13 1 26 25 19 24 3 10 1 11 1 15 20 20 26 13 13) (list 13 23)) (list 3 1) 0.001)\n    (check-within (candidate (list 21 16 11 21) (list 21 11 21 2 2 8 16 29 16 16 18 14 18 16 29 10 2)) (list 4 7) 0.001)\n    (check-within (candidate (list 15 7 23 12 23 16 18 1 16 28 28 19 7 30 19) (list 9 1 10 15 23 8 8 24 30)) (list 5 4) 0.001)\n    (check-within (candidate (list 2 2 22 24 20 22 1 27 27 10 8 26 22 22 22 10 13 29) (list 8 11 1 11)) (list 2 2) 0.001)\n    (check-within (candidate (list 25 29 15 15 21 14 10 23 10 18 11 30 28 16 29) (list 1 16 10 2 25 1 15)) (list 6 4) 0.001)\n    (check-within (candidate (list 18 18 11 27 18 20 20) (list 16 28 25 28 20 15 8 21 4 6 19 20 20 20 29)) (list 2 4) 0.001)\n    (check-within (candidate (list 1 25 15 20 25 11 4 1 1 21 17 1 19) (list 19 19 9 23 1 5 28 28 17 28 3 9 8)) (list 6 4) 0.001)\n    (check-within (candidate (list 7 30 7 7 30 2 7 7) (list 19 7 1 7 17 17 20 7 21 30 8 21 10 30 14)) (list 7 5) 0.001)\n    (check-within (candidate (list 7 18 13 27 13 9 22 30) (list 27 29 21 30 16 13 29 5 9 16 29 27)) (list 5 5) 0.001)\n    (check-within (candidate (list 19 19 25 24 24 3 19 24 3) (list 16 19 19 17 19 24 5 19)) (list 6 5) 0.001)\n    (check-within (candidate (list 19 11 3 11 22 12 23 12 29 19 25 15 23 23) (list 4 29 19 23 23 10 2 10 10 15 19 20 19 12 2 19 15 29)) (list 9 11) 0.001)\n    (check-within (candidate (list 25 21) (list 20 12 5 13 21 25 9 30 21 7 21 12 20 7)) (list 2 4) 0.001)\n    (check-within (candidate (list 16 17 16 20 29 16 30 24) (list 1 30 24)) (list 2 2) 0.001)\n    (check-within (candidate (list 10 6 7 24 17 24 3 24) (list 24 27 26 8 7 3 19 24 6 7 30 6)) (list 6 7) 0.001)\n    (check-within (candidate (list 3 26 7 6 23 22 26 8 11 23 17 26 7 2) (list 13 11 10 8 4 23)) (list 4 3) 0.001)\n    (check-within (candidate (list 29 10 9 26 30 21 11 26 30) (list 2 9 12 9 30 9 30 21 8 3 17 15 25 26 9 15)) (list 6 8) 0.001)\n    (check-within (candidate (list 14 29 15 12 20 27 24 29 4 29 12 6 12 4 7) (list 2 19 6 29 10 20 26 11 11 19 4 12 30 22 13 4 24)) (list 11 7) 0.001)\n    (check-within (candidate (list 11 5 3 4 15 30 25 25 30 6 3 28 25 6 30 17 15) (list 4 25 17 2 24 28 25 15 4 25 8 6 15)) (list 10 10) 0.001)\n    (check-within (candidate (list 5 23 17 6 5 15 29 2 7 27 5) (list 28 14 1 1 27 26 23 20 6 17 11)) (list 4 4) 0.001)\n    (check-within (candidate (list 26 20 12 2 11 23 8 28 28 2 28 20 2 13 13 28 22) (list 8 7 12 15 20)) (list 4 3) 0.001)\n    (check-within (candidate (list 15 6 14 24 6 22 6 24 6 6 6 16 24 3 7 6) (list 11 6 18 20 12 14 17 3 11 6 2 3 17 19 3)) (list 9 6) 0.001)\n    (check-within (candidate (list 21 10 13 2 3 29 2 29 12 21 16 7 21 26) (list 26 16 18 29 16 15 2 16 23 24 26 21 26 13 4 29 13 17 10)) (list 11 13) 0.001)\n    (check-within (candidate (list 5 18 7 30 16 1 24 5 1 15 28 24 25) (list 20 29 16 14)) (list 1 1) 0.001)\n    (check-within (candidate (list 1 11 11 28 28 10 15 28 6) (list 27 21 28 18 7 7 20 26 4 28 11 22 16 30 11 9 9)) (list 5 4) 0.001)\n    (check-within (candidate (list 27 3) (list 29 29 27 1 26 21 27 1 8 3 7 24 19)) (list 2 3) 0.001)\n    (check-within (candidate (list 19 20 25 16 22 23 25 16 23 16 23 14) (list 16 5)) (list 3 1) 0.001)\n    (check-within (candidate (list 9 9 5 28 22 15 11 28 5 3 15 6 16 13 29 30) (list 18 12 3 5 24 15)) (list 5 3) 0.001)\n    (check-within (candidate (list 21 19 11 24 7 5 10) (list 19 19 14 3 4 14 27 18 14 10)) (list 2 3) 0.001)\n    (check-within (candidate (list 6 18 18 20 5 18 1 15 18 26 28 26) (list 13 12 2 24 20 28 27 20 11)) (list 2 3) 0.001)\n    (check-within (candidate (list 18 14 14 15 10 14 7 1 28 15) (list 11 18 15 18 27 12)) (list 3 3) 0.001)\n    (check-within (candidate (list 29 18 29 18 27 11 11 8 4 18 11 14 5 21 21 29 11) (list 25 29 15 17 27 20 9 23 11 13 26 8 11 6)) (list 9 5) 0.001)\n    (check-within (candidate (list 14 5 8 21 24 5 21 19 29) (list 15 10 9 13 24 4 9 10 3 6 5 20 24 26 14 27 14 10 22)) (list 4 5) 0.001)\n    (check-within (candidate (list 2 11 11 9 25 11 27 16 28 10 18 3 22 15 16 11) (list 11 3 21 9 3 13 23 9 28 25 8 28 29 2 23 12 13 14 14)) (list 9 9) 0.001)\n    (check-within (candidate (list 12 11 23 17 23 3 17) (list 18 20 8 29 28 27 14 28 13 25 24 2 11 23)) (list 3 2) 0.001)\n    (check-within (candidate (list 8 18 7 7 7 24 16 8 23 23 16 16 3 16 22 18 8) (list 29 3 14 22 17 22 25 25 1 23 6 23 7 12 16)) (list 11 7) 0.001)\n    (check-within (candidate (list 25 9 11 13 21 3 7 24 29 14 2 7 18 30 18) (list 2 3 28 3 25 25 21 10 4 19 23 11 27)) (list 5 7) 0.001)\n    (check-within (candidate (list 5 8 12 18 5 8) (list 12 19 30 16 13)) (list 1 1) 0.001)\n    (check-within (candidate (list 14 22 29 29 3 22 4 29 28 27) (list 14 29)) (list 4 2) 0.001)\n    (check-within (candidate (list 28 28 11 5 18 5 18 17 21 4 9 4) (list 19 6 12 17 13)) (list 1 1) 0.001)\n    (check-within (candidate (list 24 29 19 25 7 26 7 25 7 25 2) (list 9 4 2 20 29 1 27)) (list 2 2) 0.001)\n    (check-within (candidate (list 19 14 14 21 14 11 21 18 11 14 18 28 4) (list 25 30 1)) (list 0 0) 0.001)\n    (check-within (candidate (list 9 17 21 21 18 9 9 16 9 3 17 9 3) (list 9 10 20 7 3 13 13 22 15)) (list 7 2) 0.001)\n    (check-within (candidate (list 21 14 14 14 5 11 8 7 9 3 7 3) (list 2 24 28 8 15 5 3 6 14 3 19 25 5)) (list 7 6) 0.001)\n    (check-within (candidate (list 3 17 13 18 18 12 5 12 27 6 3 13 7 3 12 27 6) (list 17 28 13 26 12 27 20 12 27 7 10 24)) (list 9 7) 0.001)\n    (check-within (candidate (list 18 9 30 9 3 13 25 5 30 25 13 19 25 3 28 29 9 9 9 12) (list 17 20 28 30 27 1 22)) (list 3 2) 0.001)\n    (check-within (candidate (list 18 19 13 20 26 26 13 13 26 25 22 20 17) (list 3 21 12 12 18 20 26 17 30 6 22 13)) (list 11 6) 0.001)\n    (check-within (candidate (list 19 10 2 18 15 24 4 11 12 24 10 10 9 12 6 10 17 22 11 12) (list 10 16 7 2 27 22 19 17 11 15 27 24)) (list 13 8) 0.001)\n    (check-within (candidate (list 8 8) (list 8 24 8 8 19 27 7 21 8 8)) (list 2 5) 0.001)\n    (check-within (candidate (list 22 23 22) (list 22 21 3 22 17 27)) (list 2 2) 0.001)\n    (check-within (candidate (list 20 10) (list 10 20 12)) (list 2 2) 0.001)\n    (check-within (candidate (list 15 28 15 17 3 6) (list 3 15 17 30 18 22 4)) (list 4 3) 0.001)\n    (check-within (candidate (list 30 15) (list 15 25 23 26 14 30 8 19 15 8 10 14 26 15 28 30)) (list 2 5) 0.001)\n    (check-within (candidate (list 16 11 16 24 7 9 9 24) (list 19 2 9 18 25 11 1 16 24 18 20 9 24 7 9 29 16 22 15)) (list 8 9) 0.001)\n    (check-within (candidate (list 13 25 8 8 1 14 8 4 8 8 25 8 22) (list 17 8 13 8 8 20 26 20 8 22 17 14 8 16 26 2 23 18 18 4)) (list 10 9) 0.001)\n    (check-within (candidate (list 9 9 9 29 11 9 18 23 9 9 26 9 23 9 9 2 28 7) (list 17 6 2 11 10 23 11 30 11 24 1 11 13 9 23 25)) (list 13 8) 0.001)\n    (check-within (candidate (list 27 16 16 15) (list 3 16 7 16 23 16 3 26 27 30 4 28 26 24 7)) (list 3 4) 0.001)\n    (check-within (candidate (list 19 1 26 15 15) (list 6 25)) (list 0 0) 0.001)\n    (check-within (candidate (list 13 29 29 12 25 22 2 25 11 3 22 13 23 19 24 24 8 30) (list 20 25 12 5 2 28 14 27 24 3 21 15 25 2 12 28 19 7 5)) (list 8 9) 0.001)\n    (check-within (candidate (list 14 14 26 25 28 26) (list 4 23 9 3 1 2 27 8 22 6 24)) (list 0 0) 0.001)\n    (check-within (candidate (list 14 29 2 26 14 10 1 23 28 5 17 1 21 5 28 14 6 4 18) (list 1 20 7 15 18 26 5 10 8 6 27)) (list 8 6) 0.001)\n    (check-within (candidate (list 29 3 15 7 2 20 30 15 7 29 2 21) (list 15 23 22 19 21 5 7 29 23 2 17 27 21 15 6 7)) (list 9 8) 0.001)\n    (check-within (candidate (list 7 23 23 15 23 10 30 23 30 10 30 17 30 10 3 7 10) (list 21 21)) (list 0 0) 0.001)\n    (check-within (candidate (list 8 13 1 13 13 12 27 21 4 4 17) (list 12 13 1 27 4 9 12 8 25 29 4 8 4 29 21 28 1 8 6 6)) (list 10 13) 0.001)\n    (check-within (candidate (list 6 15 7 1 7 14 21 3 30 23 22 29) (list 30 1 7 29 3 4)) (list 6 5) 0.001)\n    (check-within (candidate (list 15 10 22 22 6 8 15 8 10) (list 10 4 8 15 29 6 9 22 3 3 23 3 13 8 5 8 3)) (list 9 7) 0.001)\n    (check-within (candidate (list 14 4 1 27 22 14 7 22 15 3 22 8) (list 30 4 4 27 6 4 16 11 23 14 4 7 21 22 9 14 4 27 17 27)) (list 8 12) 0.001)\n    (check-within (candidate (list 23 15 15 15) (list 23 17 12 15 21)) (list 4 2) 0.001)\n    (check-within (candidate (list 28 29 15 19 1 23 25 9 29 25 19 11 9 19) (list 9 4 11 23 13 8 24 9 23)) (list 4 5) 0.001)\n    (check-within (candidate (list 19 24 7 2 3 10 27 10 4 4 9 29 10 7) (list 23 4 7 4 27 13 2 9 23)) (list 7 6) 0.001)\n    (check-within (candidate (list 24 22 17 24 22 16 1 5) (list 1 27 7 22 27 13 4 5 12 8 22 18 5)) (list 4 5) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3207_findMinimumOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given three strings s1, s2, and s3. You have to perform the following operation on these three strings as many times as you want.\n;; In one operation you can choose one of these three strings such that its length is at least 2 and delete the rightmost character of it.\n;; Return the minimum number of operations you need to perform to make the three strings equal if there is a way to make them equal, otherwise, return -1.\n;; Example 1:\n;; Input: s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"\n;; Output: 2\n;; Explanation: Performing operations on s1 and s2 once will lead to three equal strings.\n;; It can be shown that there is no way to make them equal with less than two operations.\n;; Example 2:\n;; Input: s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"\n;; Output: -1\n;; Explanation: Because the leftmost letters of s1 and s2 are not equal, they could not be equal after any number of operations. So the answer is -1.\n;; Constraints:\n;; 1 <= s1.length, s2.length, s3.length <= 100\n;; s1, s2 and s3 consist only of lowercase English letters.\n(define (findMinimumOperations s1 s2 s3)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3207_findMinimumOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findMinimumOperations))\n    (check-within (candidate abc abb ab) 2 0.001)\n    (check-within (candidate dac bac cac) -1 0.001)\n    (check-within (candidate a a a) 0 0.001)\n    (check-within (candidate kui m v) -1 0.001)\n    (check-within (candidate a aabc a) 3 0.001)\n    (check-within (candidate cc cccb c) 4 0.001)\n    (check-within (candidate luso lu lu) 2 0.001)\n    (check-within (candidate xx phe xie) -1 0.001)\n    (check-within (candidate gzd bcju db) -1 0.001)\n    (check-within (candidate cbba cbaa c) 6 0.001)\n    (check-within (candidate k kfb krcnf) 6 0.001)\n    (check-within (candidate oby obz obf) 3 0.001)\n    (check-within (candidate b aba aaccaa) -1 0.001)\n    (check-within (candidate a accabb aaa) 7 0.001)\n    (check-within (candidate b bccaaba ba) 7 0.001)\n    (check-within (candidate b bacccab cc) -1 0.001)\n    (check-within (candidate ca cccabb cb) 7 0.001)\n    (check-within (candidate ccb ccba ccb) 1 0.001)\n    (check-within (candidate mbooi pdq br) -1 0.001)\n    (check-within (candidate xxfzj faho c) -1 0.001)\n    (check-within (candidate acbc acba acb) 2 0.001)\n    (check-within (candidate aduyyk v lpyt) -1 0.001)\n    (check-within (candidate xd sl azoeaje) -1 0.001)\n    (check-within (candidate bbbaa bacab b) 8 0.001)\n    (check-within (candidate cibn ioom bxa) -1 0.001)\n    (check-within (candidate bcb bbac cbbc) -1 0.001)\n    (check-within (candidate aabbb cc cccb) -1 0.001)\n    (check-within (candidate i xqsfy diqae) -1 0.001)\n    (check-within (candidate iq iimanmy id) 8 0.001)\n    (check-within (candidate pitggt pi pih) 5 0.001)\n    (check-within (candidate ten ten tenob) 2 0.001)\n    (check-within (candidate vejy fbqfo gl) -1 0.001)\n    (check-within (candidate aca abcc accba) 9 0.001)\n    (check-within (candidate br br brvhgtou) 6 0.001)\n    (check-within (candidate c bcc aacbcaca) -1 0.001)\n    (check-within (candidate cab caac cacbb) 6 0.001)\n    (check-within (candidate ccab cbbcbb ca) 9 0.001)\n    (check-within (candidate inuc iwpdfj ib) 9 0.001)\n    (check-within (candidate jrrpyyc jr jrt) 6 0.001)\n    (check-within (candidate l gebqrgnz jkr) -1 0.001)\n    (check-within (candidate naynn ax bhdcz) -1 0.001)\n    (check-within (candidate rexmx ujmbg gg) -1 0.001)\n    (check-within (candidate aacbcb a acaaac) 10 0.001)\n    (check-within (candidate acbb acbacc acb) 4 0.001)\n    (check-within (candidate baacbab bcc bca) 10 0.001)\n    (check-within (candidate bcacbba bca bca) 4 0.001)\n    (check-within (candidate bcaca bcaba bca) 4 0.001)\n    (check-within (candidate ba bcbcab bbcbb) 10 0.001)\n    (check-within (candidate cabc cab cabbac) 4 0.001)\n    (check-within (candidate bbbbcaac a cbcc) -1 0.001)\n    (check-within (candidate gjbtodtym gxp g) 10 0.001)\n    (check-within (candidate hfkq hfrbvno hf) 7 0.001)\n    (check-within (candidate hym hl hshxmbbj) 10 0.001)\n    (check-within (candidate mkdflu mmbn mge) 10 0.001)\n    (check-within (candidate nvlobl mekbzd s) -1 0.001)\n    (check-within (candidate rpa rpaxpoh rpa) 4 0.001)\n    (check-within (candidate ac aacccccbc acc) 11 0.001)\n    (check-within (candidate abb abaac abcaca) 8 0.001)\n    (check-within (candidate caa caccaccacb c) 11 0.001)\n    (check-within (candidate baccaab cababc a) -1 0.001)\n    (check-within (candidate cacbb ca cacbcac) 8 0.001)\n    (check-within (candidate cbba cabcabab ca) 11 0.001)\n    (check-within (candidate cb cbcbb cbaaabb) 8 0.001)\n    (check-within (candidate ccabaa ccabc cca) 5 0.001)\n    (check-within (candidate ccb ccac cccaaca) 8 0.001)\n    (check-within (candidate ccccbb cccc cccc) 2 0.001)\n    (check-within (candidate cxxq cxx cxxdeqh) 5 0.001)\n    (check-within (candidate d dffjiulzya dke) 11 0.001)\n    (check-within (candidate dogv dofjkhx dog) 8 0.001)\n    (check-within (candidate dwefrocz dzz dwn) 11 0.001)\n    (check-within (candidate etr ejb etpubpvr) 11 0.001)\n    (check-within (candidate f morycy vledqoo) -1 0.001)\n    (check-within (candidate ful fular fulvkv) 5 0.001)\n    (check-within (candidate kzwat ku koftvbd) 11 0.001)\n    (check-within (candidate qey qevtkbss qeb) 8 0.001)\n    (check-within (candidate saqy hvufcpko xm) -1 0.001)\n    (check-within (candidate tllwgcdi t tvham) 11 0.001)\n    (check-within (candidate vmwdmadn vmw vmw) 5 0.001)\n    (check-within (candidate xobwwhu xobb xob) 5 0.001)\n    (check-within (candidate yptajimiz yp ypr) 8 0.001)\n    (check-within (candidate z zcrouxlukb zbb) 11 0.001)\n    (check-within (candidate aaabc aaaa aaaabc) 6 0.001)\n    (check-within (candidate aaa aab aabaacaab) 9 0.001)\n    (check-within (candidate aac aac aacabbbca) 6 0.001)\n    (check-within (candidate abaab abaabb abaa) 3 0.001)\n    (check-within (candidate abcomon gkuneup q) -1 0.001)\n    (check-within (candidate acc accacb acbabc) 9 0.001)\n    (check-within (candidate cca caaab babbacc) -1 0.001)\n    (check-within (candidate bccbc bc bcccbcac) 9 0.001)\n    (check-within (candidate bpp bin bfkbyhubw) 12 0.001)\n    (check-within (candidate bbsyg blbp brghkr) 12 0.001)\n    (check-within (candidate bxpvamp bxpv bxpv) 3 0.001)\n    (check-within (candidate ccbabca cbcbaca c) 12 0.001)\n    (check-within (candidate accb bbc cbbaccba) -1 0.001)\n    (check-within (candidate cbccc cbc cbcccba) 6 0.001)\n    (check-within (candidate cac ccacc cabacba) 12 0.001)\n    (check-within (candidate ccb ccbcb ccbccab) 6 0.001)\n    (check-within (candidate caacabcbc ccb ccc) 12 0.001)\n    (check-within (candidate cccabaacc ccc ccc) 6 0.001)\n    (check-within (candidate ajjdre gsrq eurcj) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3209_minimumCoins", "language": "rkt", "prompt": "#lang racket\n;; You are at a fruit market with different types of exotic fruits on display.\n;; You are given a 1-indexed array prices, where prices[i] denotes the number of coins needed to purchase the ith fruit.\n;; The fruit market has the following offer:\n;; If you purchase the ith fruit at prices[i] coins, you can get the next i fruits for free.\n;; Note that even if you can take fruit j for free, you can still purchase it for prices[j] coins to receive a new offer.\n;; Return the minimum number of coins needed to acquire all the fruits.\n;; Example 1:\n;; Input: prices = [3,1,2]\n;; Output: 4\n;; Explanation: You can acquire the fruits as follows:\n;; - Purchase the 1st fruit with 3 coins, you are allowed to take the 2nd fruit for free.\n;; - Purchase the 2nd fruit with 1 coin, you are allowed to take the 3rd fruit for free.\n;; - Take the 3rd fruit for free.\n;; Note that even though you were allowed to take the 2nd fruit for free, you purchased it because it is more optimal.\n;; It can be proven that 4 is the minimum number of coins needed to acquire all the fruits.\n;; Example 2:\n;; Input: prices = [1,10,1,1]\n;; Output: 2\n;; Explanation: You can acquire the fruits as follows:\n;; - Purchase the 1st fruit with 1 coin, you are allowed to take the 2nd fruit for free.\n;; - Take the 2nd fruit for free.\n;; - Purchase the 3rd fruit for 1 coin, you are allowed to take the 4th fruit for free.\n;; - Take the 4th fruit for free.\n;; It can be proven that 2 is the minimum number of coins needed to acquire all the fruits.\n;; Constraints:\n;; 1 <= prices.length <= 1000\n;; 1 <= prices[i] <= 105\n(define (minimumCoins prices)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3209_minimumCoins.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumCoins))\n    (check-within (candidate (list 3 1 2)) 4 0.001)\n    (check-within (candidate (list 1 10 1 1)) 2 0.001)\n    (check-within (candidate (list 26 18 6 12 49 7 45 45)) 39 0.001)\n    (check-within (candidate (list 27 17 29 45 3 39 42 26)) 47 0.001)\n    (check-within (candidate (list 14 37 37 38 24 15 12)) 63 0.001)\n    (check-within (candidate (list 1 37 19 38 11 42 18 33 6 37 15 48 23 12 41 18 27 32)) 37 0.001)\n    (check-within (candidate (list 38 23 27 32 47 45 48 24 39 26 37 42 24 45 27 26 15 16 26 6)) 132 0.001)\n    (check-within (candidate (list 45 44 5 9 22 14 29 14 21 13 45 10 2 16 14 30 26 1 49)) 66 0.001)\n    (check-within (candidate (list 37 42 6 50 50 38 30 38 1 13 25 39 18 1 35 32 12)) 74 0.001)\n    (check-within (candidate (list 17 32 11 25 22)) 28 0.001)\n    (check-within (candidate (list 18 10 1 11 6 30 19 24 1 18 37 29 28 27 38)) 26 0.001)\n    (check-within (candidate (list 3 10 25 47 49 10 49)) 38 0.001)\n    (check-within (candidate (list 46 7 15)) 53 0.001)\n    (check-within (candidate (list 16 45 25 5 18 19 25 13 33)) 59 0.001)\n    (check-within (candidate (list 21 16 7 10 30)) 28 0.001)\n    (check-within (candidate (list 21 22 29 37 23 15 39 9 19 10 6 9 33 28 43)) 71 0.001)\n    (check-within (candidate (list 37 16 42 47 16 31 39 8 26 50 33)) 77 0.001)\n    (check-within (candidate (list 32 4)) 32 0.001)\n    (check-within (candidate (list 31 9 2 36 4 45 28 28 12 22 44 17 10 48 15 22 7 14 41)) 56 0.001)\n    (check-within (candidate (list 1 31 9 36 44 2 23)) 12 0.001)\n    (check-within (candidate (list 3 7 2 36 33 7 21 40 19)) 12 0.001)\n    (check-within (candidate (list 9 4 7 29 22 50)) 16 0.001)\n    (check-within (candidate (list 28 2 40 15)) 30 0.001)\n    (check-within (candidate (list 16 17 47 20 18 37)) 51 0.001)\n    (check-within (candidate (list 42 6 44 47 11 6 30 38 41 43 46 35 28 4 47 1 7 35)) 93 0.001)\n    (check-within (candidate (list 10 10 5 8 5 13 34 31 36)) 20 0.001)\n    (check-within (candidate (list 12 20 14 46 22 1 42 50 47 47 38 37 13)) 40 0.001)\n    (check-within (candidate (list 1 38 28 46 18 22 12 7 44 44 40 36 41 5 33 5 30 33 31)) 46 0.001)\n    (check-within (candidate (list 6 45 2 29 44 14 44)) 22 0.001)\n    (check-within (candidate (list 34 13 50 42 24 47 41 8 26 34 3 48 39 24 39 26 46)) 74 0.001)\n    (check-within (candidate (list 47 9 33 6 33 40 28 37 49 39 45 14 13 40 17 14 39 12 15 6)) 103 0.001)\n    (check-within (candidate (list 32)) 32 0.001)\n    (check-within (candidate (list 35 46 50 35 11 14 44 17 45 23 34 33 8 27 19 7 10 12 14)) 107 0.001)\n    (check-within (candidate (list 50 45 14 24 18 15 9 14)) 73 0.001)\n    (check-within (candidate (list 38 19 18 15 20 43 18 9 44 26 29)) 74 0.001)\n    (check-within (candidate (list 26 21 7 40 37 44 13 3 10 9 15 12 30 18 31 10 23)) 55 0.001)\n    (check-within (candidate (list 36 50)) 36 0.001)\n    (check-within (candidate (list 1 32 48 36 26 5 30 25 2 17 26 39 17 46 34 47 43 45 20 48)) 71 0.001)\n    (check-within (candidate (list 19 24 31 24)) 43 0.001)\n    (check-within (candidate (list 1 18 25 29 17 9 3 29 23 17 18)) 29 0.001)\n    (check-within (candidate (list 18 36 18 44 30 8 42 33 45 19 50 19 24 48)) 63 0.001)\n    (check-within (candidate (list 26 25 47 36 9 31 1 29 29 42 29 42 36 19 45 4 11 7)) 80 0.001)\n    (check-within (candidate (list 24 34 47 12 24 48 14 30 28 43 35 45 11 11 35 38)) 95 0.001)\n    (check-within (candidate (list 29 18 2 6 47 32 27 12 38 17)) 49 0.001)\n    (check-within (candidate (list 3 31 15 18 47 18 2 27 24 6 36 35 41 21 30)) 26 0.001)\n    (check-within (candidate (list 29 45 8 45 23 35)) 37 0.001)\n    (check-within (candidate (list 39 37)) 39 0.001)\n    (check-within (candidate (list 18 45 6 14 41 41)) 24 0.001)\n    (check-within (candidate (list 50 21 38 2 32 49 32 40 41 34 33 40 36 16 29 34 42 40 46)) 121 0.001)\n    (check-within (candidate (list 28 17 42 20 6 26 47 6 23)) 51 0.001)\n    (check-within (candidate (list 37 27 17 40 50 35 16 4 28 5 27 13 46 7 23 27)) 74 0.001)\n    (check-within (candidate (list 11 5 40 16 20 38)) 32 0.001)\n    (check-within (candidate (list 16 27 5 38 12 24 7 49 40 13 38 13 34 38 37 2 4 44)) 41 0.001)\n    (check-within (candidate (list 25 9 49 19 33)) 53 0.001)\n    (check-within (candidate (list 47 23 46 13 26 44 43 22 43 24 13 20 6 16 8 26)) 105 0.001)\n    (check-within (candidate (list 8 1 1)) 9 0.001)\n    (check-within (candidate (list 47 45 2 25 7 46)) 49 0.001)\n    (check-within (candidate (list 4 31 50 45 5 50)) 40 0.001)\n    (check-within (candidate (list 30 41 1 49 9 49 41 27 41 14 23 3 46 40 37 28 45 19 36 49)) 54 0.001)\n    (check-within (candidate (list 6 3 49 28 31 36 5 50 39)) 40 0.001)\n    (check-within (candidate (list 37 2 19 36 26 27 3 23 10 20 33 8 39 6 28)) 65 0.001)\n    (check-within (candidate (list 37 34 12 30 43 35 6 21 47 38 14 31 49 11 14)) 66 0.001)\n    (check-within (candidate (list 49 6 12 35 17 17 2)) 63 0.001)\n    (check-within (candidate (list 45 27 43 34 41 30 28 45 24 50 20 4 15 42)) 116 0.001)\n    (check-within (candidate (list 48 22 36)) 70 0.001)\n    (check-within (candidate (list 47 13 23 31 41 25)) 70 0.001)\n    (check-within (candidate (list 3 44 17 37 9 14 37)) 29 0.001)\n    (check-within (candidate (list 4 43 7 15 38)) 11 0.001)\n    (check-within (candidate (list 10 25 7 37 6 43 4 50 9 14 36 35 36 44 17 10 44 46 50)) 35 0.001)\n    (check-within (candidate (list 45 28 10 18 18 3 42 24 14 11 13 32 37 31 50 32)) 69 0.001)\n    (check-within (candidate (list 12 38 44 24 42 9 32 40 8 20 46 39 33)) 73 0.001)\n    (check-within (candidate (list 5 42 30 20 37 26 38 30 30 32 39 31 33 41 23 4 29)) 85 0.001)\n    (check-within (candidate (list 44 22)) 44 0.001)\n    (check-within (candidate (list 8 8 11 21 9)) 19 0.001)\n    (check-within (candidate (list 2 37 19 30 37 27 10 37)) 31 0.001)\n    (check-within (candidate (list 43 27 48 22)) 70 0.001)\n    (check-within (candidate (list 50 23 37 49 45 14 18 39 50 7 31)) 101 0.001)\n    (check-within (candidate (list 37 3 32 25 21 22 26 49 14 45 1 36)) 62 0.001)\n    (check-within (candidate (list 21 29 31 28 2 41 4 43 41 16 38 33 3 6 43 22 15)) 59 0.001)\n    (check-within (candidate (list 24 47 32 41 35 14 18 23 27 8 27)) 70 0.001)\n    (check-within (candidate (list 40 25 32)) 65 0.001)\n    (check-within (candidate (list 9 18 2 26 15 3 2 33 46 6 11 34 27 7 5 7 26 13 48)) 18 0.001)\n    (check-within (candidate (list 41 8 38 32 36 30 23 49 40 46 42 34 2 12 12 19 20 50 40)) 104 0.001)\n    (check-within (candidate (list 28 8 24 14 34 36 48)) 50 0.001)\n    (check-within (candidate (list 2 36 22 41 42 26 1 48 14 27 22 26)) 25 0.001)\n    (check-within (candidate (list 25 39 21 21 16)) 46 0.001)\n    (check-within (candidate (list 44 41 36 42 21 32 45 5)) 101 0.001)\n    (check-within (candidate (list 10)) 10 0.001)\n    (check-within (candidate (list 35 29)) 35 0.001)\n    (check-within (candidate (list 38 35 33 11 43 33)) 71 0.001)\n    (check-within (candidate (list 19 29 49 20 8 12 13 28 45 9 12 3 1 17 35)) 65 0.001)\n    (check-within (candidate (list 34 22 1 41 34 27 18)) 53 0.001)\n    (check-within (candidate (list 31 9 39 6 14 32 28 35 34 42 19 41 35 24 32 16 12 49 16)) 73 0.001)\n    (check-within (candidate (list 46 50 21 14 26 47)) 67 0.001)\n    (check-within (candidate (list 5 22 36 6 15 49 20 16 36 15 32 27 50 19 12 22 9 33)) 57 0.001)\n    (check-within (candidate (list 17 4 36 4 32 11 42 12 20)) 36 0.001)\n    (check-within (candidate (list 48 33 39 1 13 40)) 82 0.001)\n    (check-within (candidate (list 32 19 33 30 32 44 47 8 10 1 23 6 28 19 20 48 12 10 20 22)) 84 0.001)\n    (check-within (candidate (list 29 5 46 34 38 7 1 15)) 68 0.001)\n    (check-within (candidate (list 39 50 22 1 38 22 49 16 27 48 45 28 43 34)) 78 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3210_beautifulSubstrings", "language": "rkt", "prompt": "#lang racket\n;; You are given a string s and a positive integer k.\n;; Let vowels and consonants be the number of vowels and consonants in a string.\n;; A string is beautiful if:\n;; vowels == consonants.\n;; (vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k.\n;; Return the number of non-empty beautiful substrings in the given string s.\n;; A substring is a contiguous sequence of characters in a string.\n;; Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\n;; Consonant letters in English are every letter except vowels.\n;; Example 1:\n;; Input: s = \"baeyh\", k = 2\n;; Output: 2\n;; Explanation: There are 2 beautiful substrings in the given string.\n;; - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\n;; You can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n;; - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). \n;; You can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n;; It can be shown that there are only 2 beautiful substrings in the given string.\n;; Example 2:\n;; Input: s = \"abba\", k = 1\n;; Output: 3\n;; Explanation: There are 3 beautiful substrings in the given string.\n;; - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). \n;; - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n;; - Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\n;; It can be shown that there are only 3 beautiful substrings in the given string.\n;; Example 3:\n;; Input: s = \"bcdf\", k = 1\n;; Output: 0\n;; Explanation: There are no beautiful substrings in the given string.\n;; Constraints:\n;; 1 <= s.length <= 1000\n;; 1 <= k <= 1000\n;; s consists of only English lowercase letters.\n(define (beautifulSubstrings s k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3210_beautifulSubstrings.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate beautifulSubstrings))\n    (check-within (candidate baeyh 2) 2 0.001)\n    (check-within (candidate abba 1) 3 0.001)\n    (check-within (candidate bcdf 1) 0 0.001)\n    (check-within (candidate ihroyeeb 5) 0 0.001)\n    (check-within (candidate uzuxpzou 3) 1 0.001)\n    (check-within (candidate ouuoeqd 2) 1 0.001)\n    (check-within (candidate eeebjoxxujuaeoqibd 8) 4 0.001)\n    (check-within (candidate ilougekqlovegioemdvu 4) 21 0.001)\n    (check-within (candidate tqaewreikaztwpfwnef 8) 3 0.001)\n    (check-within (candidate oykiuhsafgfjumnzb 7) 0 0.001)\n    (check-within (candidate ifvsa 3) 0 0.001)\n    (check-within (candidate svzauyuevujektj 5) 3 0.001)\n    (check-within (candidate urahjig 2) 2 0.001)\n    (check-within (candidate ime 2) 0 0.001)\n    (check-within (candidate oacghieut 5) 0 0.001)\n    (check-within (candidate aoluu 3) 0 0.001)\n    (check-within (candidate ioaoiciiuoziout 1) 5 0.001)\n    (check-within (candidate ouafupsuhid 6) 0 0.001)\n    (check-within (candidate ox 2) 0 0.001)\n    (check-within (candidate tlaiwoauazutusiaaui 10) 0 0.001)\n    (check-within (candidate caepeym 2) 2 0.001)\n    (check-within (candidate apyxvceue 4) 1 0.001)\n    (check-within (candidate imkqbb 4) 0 0.001)\n    (check-within (candidate caaz 2) 1 0.001)\n    (check-within (candidate pyicoy 1) 6 0.001)\n    (check-within (candidate uopmyrsntjhiroikup 8) 2 0.001)\n    (check-within (candidate aujfxqxcj 5) 0 0.001)\n    (check-within (candidate eeizejuoxeumz 4) 6 0.001)\n    (check-within (candidate uuouuaifnboeiulttio 4) 10 0.001)\n    (check-within (candidate woozzxd 3) 0 0.001)\n    (check-within (candidate pulorolqcvhafexui 9) 3 0.001)\n    (check-within (candidate hmuaewojioizoguvoaje 3) 4 0.001)\n    (check-within (candidate b 1) 0 0.001)\n    (check-within (candidate aiejouohnqnketinvat 3) 6 0.001)\n    (check-within (candidate mjiogpri 2) 3 0.001)\n    (check-within (candidate movbyaeouil 3) 2 0.001)\n    (check-within (candidate puureouausxmitvav 6) 2 0.001)\n    (check-within (candidate op 1) 1 0.001)\n    (check-within (candidate iuhoezpooxcohtlapolo 1) 39 0.001)\n    (check-within (candidate cioi 2) 0 0.001)\n    (check-within (candidate pueutaoyaxk 6) 0 0.001)\n    (check-within (candidate iiuresacruaaan 3) 3 0.001)\n    (check-within (candidate agntyaazvpejidwaph 8) 1 0.001)\n    (check-within (candidate wiybolyniexiibou 6) 2 0.001)\n    (check-within (candidate coiyakadxi 2) 8 0.001)\n    (check-within (candidate oraajoeruiakixj 3) 1 0.001)\n    (check-within (candidate jeayap 1) 7 0.001)\n    (check-within (candidate iu 1) 0 0.001)\n    (check-within (candidate awozoy 2) 3 0.001)\n    (check-within (candidate fheabmlsyeeeuoeogyz 9) 5 0.001)\n    (check-within (candidate eaizneuxi 1) 10 0.001)\n    (check-within (candidate uurqufaucsuoqljh 4) 14 0.001)\n    (check-within (candidate jrtept 4) 0 0.001)\n    (check-within (candidate olgioxooiejooosaed 5) 0 0.001)\n    (check-within (candidate uizoy 2) 1 0.001)\n    (check-within (candidate lswabfiujjhexzos 4) 5 0.001)\n    (check-within (candidate iuu 1) 0 0.001)\n    (check-within (candidate qeaxut 1) 7 0.001)\n    (check-within (candidate aojiau 2) 0 0.001)\n    (check-within (candidate oaiaaaargkonlcsoaygf 5) 2 0.001)\n    (check-within (candidate zoowrawkm 4) 3 0.001)\n    (check-within (candidate uqiwuoevkfhkkua 4) 6 0.001)\n    (check-within (candidate kavuaaeodvaxicm 6) 0 0.001)\n    (check-within (candidate qpxeceq 1) 6 0.001)\n    (check-within (candidate iaabaofuodcbek 5) 3 0.001)\n    (check-within (candidate eel 1) 1 0.001)\n    (check-within (candidate ikeuhe 1) 5 0.001)\n    (check-within (candidate lueikvo 2) 2 0.001)\n    (check-within (candidate oauau 2) 0 0.001)\n    (check-within (candidate qzoieeotieeakqraeao 4) 4 0.001)\n    (check-within (candidate ehaascocsdmgekni 9) 3 0.001)\n    (check-within (candidate euqeklniykiji 5) 0 0.001)\n    (check-within (candidate vaeiiioidiioxhduu 7) 0 0.001)\n    (check-within (candidate aa 1) 0 0.001)\n    (check-within (candidate chaua 3) 0 0.001)\n    (check-within (candidate edfrglfr 3) 0 0.001)\n    (check-within (candidate dqbe 1) 1 0.001)\n    (check-within (candidate ghooirorxge 4) 6 0.001)\n    (check-within (candidate fodartekaonq 4) 9 0.001)\n    (check-within (candidate feeanzkjpfehzeuni 6) 0 0.001)\n    (check-within (candidate ignoouesduu 2) 6 0.001)\n    (check-within (candidate yif 2) 0 0.001)\n    (check-within (candidate gondfjaeeuhbuuasgip 10) 0 0.001)\n    (check-within (candidate djooomsffoonelyeode 3) 14 0.001)\n    (check-within (candidate pgaimei 4) 2 0.001)\n    (check-within (candidate naipqentonee 4) 8 0.001)\n    (check-within (candidate bouov 2) 0 0.001)\n    (check-within (candidate lcuhoypz 5) 0 0.001)\n    (check-within (candidate g 1) 0 0.001)\n    (check-within (candidate qc 2) 0 0.001)\n    (check-within (candidate mhznea 2) 1 0.001)\n    (check-within (candidate uxvjixdujgyfauo 8) 1 0.001)\n    (check-within (candidate iyjkuox 3) 1 0.001)\n    (check-within (candidate xbjfoayfpafatnuyord 3) 3 0.001)\n    (check-within (candidate nvoede 3) 1 0.001)\n    (check-within (candidate usnuaxpaktrweatruu 5) 0 0.001)\n    (check-within (candidate euojmsora 1) 10 0.001)\n    (check-within (candidate iapgoi 3) 0 0.001)\n    (check-within (candidate uafuimcpxyeoixgbyeio 5) 3 0.001)\n    (check-within (candidate weuaatpu 5) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3211_findMaximumLength", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums.\n;; You can perform any number of operations, where each operation involves selecting a subarray of the array and replacing it with the sum of its elements. For example, if the given array is [1,3,5,6] and you select subarray [3,5] the array will convert to [1,8,6].\n;; Return the maximum length of a non-decreasing array that can be made after applying operations.\n;; A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [5,2,2]\n;; Output: 1\n;; Explanation: This array with length 3 is not non-decreasing.\n;; We have two ways to make the array length two.\n;; First, choosing subarray [2,2] converts the array to [5,4].\n;; Second, choosing subarray [5,2] converts the array to [7,2].\n;; In these two ways the array is not non-decreasing.\n;; And if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \n;; So the answer is 1.\n;; Example 2:\n;; Input: nums = [1,2,3,4]\n;; Output: 4\n;; Explanation: The array is non-decreasing. So the answer is 4.\n;; Example 3:\n;; Input: nums = [4,3,2,6]\n;; Output: 3\n;; Explanation: Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\n;; Because the given array is not non-decreasing, the maximum possible answer is 3.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 105\n(define (findMaximumLength nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3211_findMaximumLength.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findMaximumLength))\n    (check-within (candidate (list 5 2 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 4)) 4 0.001)\n    (check-within (candidate (list 4 3 2 6)) 3 0.001)\n    (check-within (candidate (list 32)) 1 0.001)\n    (check-within (candidate (list 38)) 1 0.001)\n    (check-within (candidate (list 60)) 1 0.001)\n    (check-within (candidate (list 79)) 1 0.001)\n    (check-within (candidate (list 85)) 1 0.001)\n    (check-within (candidate (list 170)) 1 0.001)\n    (check-within (candidate (list 198)) 1 0.001)\n    (check-within (candidate (list 220)) 1 0.001)\n    (check-within (candidate (list 318)) 1 0.001)\n    (check-within (candidate (list 350)) 1 0.001)\n    (check-within (candidate (list 381)) 1 0.001)\n    (check-within (candidate (list 413)) 1 0.001)\n    (check-within (candidate (list 426)) 1 0.001)\n    (check-within (candidate (list 429)) 1 0.001)\n    (check-within (candidate (list 431)) 1 0.001)\n    (check-within (candidate (list 445)) 1 0.001)\n    (check-within (candidate (list 488)) 1 0.001)\n    (check-within (candidate (list 492)) 1 0.001)\n    (check-within (candidate (list 497)) 1 0.001)\n    (check-within (candidate (list 515)) 1 0.001)\n    (check-within (candidate (list 582)) 1 0.001)\n    (check-within (candidate (list 589)) 1 0.001)\n    (check-within (candidate (list 620)) 1 0.001)\n    (check-within (candidate (list 632)) 1 0.001)\n    (check-within (candidate (list 703)) 1 0.001)\n    (check-within (candidate (list 748)) 1 0.001)\n    (check-within (candidate (list 776)) 1 0.001)\n    (check-within (candidate (list 977)) 1 0.001)\n    (check-within (candidate (list 986)) 1 0.001)\n    (check-within (candidate (list 990)) 1 0.001)\n    (check-within (candidate (list 29 859)) 2 0.001)\n    (check-within (candidate (list 48 612)) 2 0.001)\n    (check-within (candidate (list 76 837)) 2 0.001)\n    (check-within (candidate (list 103 341)) 2 0.001)\n    (check-within (candidate (list 171 323)) 2 0.001)\n    (check-within (candidate (list 248 719)) 2 0.001)\n    (check-within (candidate (list 253 61)) 1 0.001)\n    (check-within (candidate (list 274 467)) 2 0.001)\n    (check-within (candidate (list 351 665)) 2 0.001)\n    (check-within (candidate (list 372 382)) 2 0.001)\n    (check-within (candidate (list 404 409)) 2 0.001)\n    (check-within (candidate (list 455 40)) 1 0.001)\n    (check-within (candidate (list 472 843)) 2 0.001)\n    (check-within (candidate (list 504 838)) 2 0.001)\n    (check-within (candidate (list 549 747)) 2 0.001)\n    (check-within (candidate (list 570 810)) 2 0.001)\n    (check-within (candidate (list 621 809)) 2 0.001)\n    (check-within (candidate (list 643 802)) 2 0.001)\n    (check-within (candidate (list 689 192)) 1 0.001)\n    (check-within (candidate (list 709 481)) 1 0.001)\n    (check-within (candidate (list 742 67)) 1 0.001)\n    (check-within (candidate (list 745 725)) 1 0.001)\n    (check-within (candidate (list 773 877)) 2 0.001)\n    (check-within (candidate (list 776 962)) 2 0.001)\n    (check-within (candidate (list 791 434)) 1 0.001)\n    (check-within (candidate (list 824 783)) 1 0.001)\n    (check-within (candidate (list 840 388)) 1 0.001)\n    (check-within (candidate (list 876 264)) 1 0.001)\n    (check-within (candidate (list 940 694)) 1 0.001)\n    (check-within (candidate (list 959 372)) 1 0.001)\n    (check-within (candidate (list 981 998)) 2 0.001)\n    (check-within (candidate (list 41 340 784)) 3 0.001)\n    (check-within (candidate (list 103 652 579)) 2 0.001)\n    (check-within (candidate (list 116 635 966)) 3 0.001)\n    (check-within (candidate (list 137 32 745)) 2 0.001)\n    (check-within (candidate (list 247 173 316)) 2 0.001)\n    (check-within (candidate (list 276 315 947)) 3 0.001)\n    (check-within (candidate (list 278 754 912)) 3 0.001)\n    (check-within (candidate (list 314 882 708)) 2 0.001)\n    (check-within (candidate (list 371 101 367)) 2 0.001)\n    (check-within (candidate (list 402 305 990)) 2 0.001)\n    (check-within (candidate (list 403 553 697)) 3 0.001)\n    (check-within (candidate (list 431 780 315)) 2 0.001)\n    (check-within (candidate (list 479 322 44)) 1 0.001)\n    (check-within (candidate (list 512 234 679)) 2 0.001)\n    (check-within (candidate (list 513 847 778)) 2 0.001)\n    (check-within (candidate (list 525 177 936)) 2 0.001)\n    (check-within (candidate (list 588 42 18)) 1 0.001)\n    (check-within (candidate (list 646 174 827)) 2 0.001)\n    (check-within (candidate (list 680 242 726)) 2 0.001)\n    (check-within (candidate (list 769 131 241)) 1 0.001)\n    (check-within (candidate (list 780 591 213)) 2 0.001)\n    (check-within (candidate (list 783 23 848)) 2 0.001)\n    (check-within (candidate (list 787 201 30)) 1 0.001)\n    (check-within (candidate (list 791 470 87)) 1 0.001)\n    (check-within (candidate (list 797 181 492)) 1 0.001)\n    (check-within (candidate (list 868 4 455)) 1 0.001)\n    (check-within (candidate (list 881 306 316)) 1 0.001)\n    (check-within (candidate (list 886 116 68)) 1 0.001)\n    (check-within (candidate (list 893 531 805)) 2 0.001)\n    (check-within (candidate (list 926 641 145)) 1 0.001)\n    (check-within (candidate (list 964 624 279)) 1 0.001)\n    (check-within (candidate (list 987 694 396)) 2 0.001)\n    (check-within (candidate (list 38 986 134 156)) 2 0.001)\n    (check-within (candidate (list 43 236 417 521)) 4 0.001)\n    (check-within (candidate (list 58 890 892 52)) 3 0.001)\n    (check-within (candidate (list 81 738 403 654)) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3212_numberOfGoodPartitions", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array nums consisting of positive integers.\n;; A partition of an array into one or more contiguous subarrays is called good if no two subarrays contain the same number.\n;; Return the total number of good partitions of nums.\n;; Since the answer may be large, return it modulo 109 + 7.\n;; Example 1:\n;; Input: nums = [1,2,3,4]\n;; Output: 8\n;; Explanation: The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4]).\n;; Example 2:\n;; Input: nums = [1,1,1,1]\n;; Output: 1\n;; Explanation: The only possible good partition is: ([1,1,1,1]).\n;; Example 3:\n;; Input: nums = [1,2,1,3]\n;; Output: 2\n;; Explanation: The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3]).\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 109\n(define (numberOfGoodPartitions nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3212_numberOfGoodPartitions.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfGoodPartitions))\n    (check-within (candidate (list 1 2 3 4)) 8 0.001)\n    (check-within (candidate (list 1 1 1 1)) 1 0.001)\n    (check-within (candidate (list 1 2 1 3)) 2 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 100000)) 1 0.001)\n    (check-within (candidate (list 1000000000)) 1 0.001)\n    (check-within (candidate (list 1 1 1 3 2)) 4 0.001)\n    (check-within (candidate (list 1 1 1 9 7)) 4 0.001)\n    (check-within (candidate (list 1 1 5 9 2)) 8 0.001)\n    (check-within (candidate (list 1 4 1 7 5)) 4 0.001)\n    (check-within (candidate (list 1 5 1 5 6)) 2 0.001)\n    (check-within (candidate (list 1 5 1 10 8)) 4 0.001)\n    (check-within (candidate (list 1 6 8 1 5)) 2 0.001)\n    (check-within (candidate (list 1 6 9 4 10)) 16 0.001)\n    (check-within (candidate (list 1 7 1 6 8)) 4 0.001)\n    (check-within (candidate (list 1 9 1 1 7)) 2 0.001)\n    (check-within (candidate (list 2 1 6 7 5)) 16 0.001)\n    (check-within (candidate (list 2 3 2 6 9)) 4 0.001)\n    (check-within (candidate (list 2 3 2 8 8)) 2 0.001)\n    (check-within (candidate (list 2 3 9 2 6)) 2 0.001)\n    (check-within (candidate (list 2 4 2 7 4)) 1 0.001)\n    (check-within (candidate (list 2 4 7 1 2)) 1 0.001)\n    (check-within (candidate (list 2 5 1 2 2)) 1 0.001)\n    (check-within (candidate (list 2 5 1 4 9)) 16 0.001)\n    (check-within (candidate (list 2 5 6 4 2)) 1 0.001)\n    (check-within (candidate (list 2 6 1 9 5)) 16 0.001)\n    (check-within (candidate (list 2 7 8 9 3)) 16 0.001)\n    (check-within (candidate (list 2 9 1 2 4)) 2 0.001)\n    (check-within (candidate (list 2 10 4 2 3)) 2 0.001)\n    (check-within (candidate (list 3 3 3 9 9)) 2 0.001)\n    (check-within (candidate (list 3 3 8 1 6)) 8 0.001)\n    (check-within (candidate (list 3 3 10 4 2)) 8 0.001)\n    (check-within (candidate (list 3 4 5 1 7)) 16 0.001)\n    (check-within (candidate (list 3 7 6 4 9)) 16 0.001)\n    (check-within (candidate (list 3 8 10 7 6)) 16 0.001)\n    (check-within (candidate (list 3 10 10 10 4)) 4 0.001)\n    (check-within (candidate (list 4 1 2 3 10)) 16 0.001)\n    (check-within (candidate (list 4 1 7 9 4)) 1 0.001)\n    (check-within (candidate (list 4 8 4 8 6)) 2 0.001)\n    (check-within (candidate (list 5 1 1 9 3)) 8 0.001)\n    (check-within (candidate (list 5 2 8 10 4)) 16 0.001)\n    (check-within (candidate (list 5 3 6 6 6)) 4 0.001)\n    (check-within (candidate (list 5 3 8 8 2)) 8 0.001)\n    (check-within (candidate (list 5 4 5 9 9)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 4)) 2 0.001)\n    (check-within (candidate (list 5 5 7 3 1)) 8 0.001)\n    (check-within (candidate (list 5 5 8 4 1)) 8 0.001)\n    (check-within (candidate (list 5 9 1 9 2)) 4 0.001)\n    (check-within (candidate (list 5 10 1 1 6)) 8 0.001)\n    (check-within (candidate (list 6 1 7 9 10)) 16 0.001)\n    (check-within (candidate (list 6 3 5 1 10)) 16 0.001)\n    (check-within (candidate (list 6 3 9 9 3)) 2 0.001)\n    (check-within (candidate (list 6 6 5 5 8)) 4 0.001)\n    (check-within (candidate (list 6 7 3 3 8)) 8 0.001)\n    (check-within (candidate (list 6 8 6 5 7)) 4 0.001)\n    (check-within (candidate (list 6 9 10 5 8)) 16 0.001)\n    (check-within (candidate (list 6 10 2 6 10)) 1 0.001)\n    (check-within (candidate (list 6 10 5 4 3)) 16 0.001)\n    (check-within (candidate (list 7 1 2 3 5)) 16 0.001)\n    (check-within (candidate (list 7 1 9 2 1)) 2 0.001)\n    (check-within (candidate (list 7 2 1 2 6)) 4 0.001)\n    (check-within (candidate (list 7 5 1 10 10)) 8 0.001)\n    (check-within (candidate (list 7 5 7 4 6)) 4 0.001)\n    (check-within (candidate (list 7 5 8 4 6)) 16 0.001)\n    (check-within (candidate (list 7 9 4 8 7)) 1 0.001)\n    (check-within (candidate (list 7 9 8 8 4)) 8 0.001)\n    (check-within (candidate (list 8 2 2 5 6)) 8 0.001)\n    (check-within (candidate (list 8 3 2 1 9)) 16 0.001)\n    (check-within (candidate (list 8 3 4 9 7)) 16 0.001)\n    (check-within (candidate (list 8 3 6 5 1)) 16 0.001)\n    (check-within (candidate (list 8 3 8 3 4)) 2 0.001)\n    (check-within (candidate (list 8 3 8 3 10)) 2 0.001)\n    (check-within (candidate (list 8 4 4 5 8)) 1 0.001)\n    (check-within (candidate (list 8 4 8 10 9)) 4 0.001)\n    (check-within (candidate (list 8 5 5 3 9)) 8 0.001)\n    (check-within (candidate (list 8 7 4 2 1)) 16 0.001)\n    (check-within (candidate (list 8 7 6 10 1)) 16 0.001)\n    (check-within (candidate (list 8 9 7 3 6)) 16 0.001)\n    (check-within (candidate (list 8 10 5 9 9)) 8 0.001)\n    (check-within (candidate (list 9 1 2 2 3)) 8 0.001)\n    (check-within (candidate (list 9 1 4 3 7)) 16 0.001)\n    (check-within (candidate (list 9 1 7 8 9)) 1 0.001)\n    (check-within (candidate (list 9 2 7 5 10)) 16 0.001)\n    (check-within (candidate (list 9 3 6 5 5)) 8 0.001)\n    (check-within (candidate (list 9 4 7 1 1)) 8 0.001)\n    (check-within (candidate (list 9 5 5 8 3)) 8 0.001)\n    (check-within (candidate (list 9 7 2 7 10)) 4 0.001)\n    (check-within (candidate (list 9 7 8 3 2)) 16 0.001)\n    (check-within (candidate (list 9 8 2 5 5)) 8 0.001)\n    (check-within (candidate (list 9 8 2 10 7)) 16 0.001)\n    (check-within (candidate (list 9 8 3 7 6)) 16 0.001)\n    (check-within (candidate (list 9 8 6 6 8)) 2 0.001)\n    (check-within (candidate (list 9 8 8 2 1)) 8 0.001)\n    (check-within (candidate (list 9 8 9 5 7)) 4 0.001)\n    (check-within (candidate (list 10 1 3 2 3)) 4 0.001)\n    (check-within (candidate (list 10 1 10 3 5)) 4 0.001)\n    (check-within (candidate (list 10 2 1 4 1)) 4 0.001)\n    (check-within (candidate (list 10 3 1 3 4)) 4 0.001)\n    (check-within (candidate (list 10 5 6 2 8)) 16 0.001)\n    (check-within (candidate (list 10 6 5 10 2)) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3213_countSubarrays", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer array nums and a positive integer k.\n;; Return the number of subarrays where the maximum element of nums appears at least k times in that subarray.\n;; A subarray is a contiguous sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [1,3,2,3,3], k = 2\n;; Output: 6\n;; Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].\n;; Example 2:\n;; Input: nums = [1,4,2,1], k = 3\n;; Output: 0\n;; Explanation: No subarray contains the element 4 at least 3 times.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 106\n;; 1 <= k <= 105\n(define (countSubarrays nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3213_countSubarrays.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countSubarrays))\n    (check-within (candidate (list 1 3 2 3 3) 2) 6 0.001)\n    (check-within (candidate (list 1 4 2 1) 3) 0 0.001)\n    (check-within (candidate (list 61 23 38 23 56 40 82 56 82 82 82 70 8 69 8 7 19 14 58 42 82 10 82 78 15 82) 2) 224 0.001)\n    (check-within (candidate (list 37 20 38 66 34 38 9 41 1 14 25 63 8 12 66 66 60 12 35 27 16 38 12 66 38 36 59 54 66 54 66 48 59 66 34 11 50 66 42 51 53 66 31 24 66 44 66 1 66 66 29 54) 5) 594 0.001)\n    (check-within (candidate (list 28 5 58 91 24 91 53 9 48 85 16 70 91 91 47 91 61 4 54 61 49) 1) 187 0.001)\n    (check-within (candidate (list 43 105 105 88 19 82 95 32 80 37 49 105 25 105 46 54 45 84 105 88 26 20 49 54 31 105 8 103 37 32 105 105 97 27 105 89 105 47 25 87 29 105 105 105 24 105 105 48 19 91 96 71) 7) 454 0.001)\n    (check-within (candidate (list 107 101 180 137 191 148 83 15 188 22 100 124 69 94 191 181 171 64 136 96 91 191 107 191 191 191 107 191 191 11 140 33 4 110 83 5 86 33 42 186 191 6 42 61 94 129 191 119 191 134 43 182 191 187 63 116 172 118 50 141 124 191 125 145 191 34 191 191) 9) 548 0.001)\n    (check-within (candidate (list 41 121 92 15 24 59 45 110 97 132 75 72 31 38 103 37 132 91 132 132 105 24) 3) 61 0.001)\n    (check-within (candidate (list 21 11 13 15 16 21 8 9 6 21) 2) 10 0.001)\n    (check-within (candidate (list 31 18 36 166 166 166 135 166 166 12 102) 3) 31 0.001)\n    (check-within (candidate (list 2 2 2 2 1 3 3 2 2 1 1 3 1 1 2 3 2 1 1 2 1 1 2 1 2 1 2 1 3 1 3 3) 5) 31 0.001)\n    (check-within (candidate (list 3 2 4 4 3 4 3 1 1 1 1 3 2 1 2 1 3 4 4 1 2 4 1 1 2 3 3 3 4 4 4 1 3 1 4 1 4 4 4 2 2 3 4 3 3 2 2 2 1 2 4 2 2 4 4 1 3 2 3 2 4 4 4 2 3 4 2 4 1 4 1 4 1 4 4 3 4 2 4 3 3 2 3 3 2 3 4 2 1 1 1 2 3) 23) 473 0.001)\n    (check-within (candidate (list 1 1 1 2 3 2 1 2 3 3 3 3 2 3 2 1 1 2 2 1 3 2 3 1 2 1 3 1 1 3 1 2 1 1 1 1 1 1 3) 8) 148 0.001)\n    (check-within (candidate (list 54 161 161 161 161 31 74 51 87 19 161 116 108 149 6 19 155 101 161 161 154 161 78 132 62 156 112 51 161 42 92 151 142 17 110 85) 4) 279 0.001)\n    (check-within (candidate (list 97 102 144 55 144 128 16 93 144 9 144 15 144 144 32 68 144 60 94 56 103 5 41 27 48 144 12 86 129 144 144 99 93 96 144 73 106 76 107 144 53 21 144 144 98 32 85 97 71 127 144 9 144 144 133 125 144 135 52 144 144 46 134 23 23 144 79) 1) 2163 0.001)\n    (check-within (candidate (list 17 17 15 9 14 11 15 1 6 2 1 17 3 17 11 12 9 11 2 4 15 17 3 17 8 6 7 12 3 16 2 9 14 17 17 17 3 7 8 9 8 17 17 17 4 2 12 17 7 17 17 16 17 17 8 12 11 3 10 4 10 17 14 7 5 17 12 10 17 13 5 17 8 14 9 17 17 17 7 16 10 13 17 15 1 14 6 8 11 3) 15) 1055 0.001)\n    (check-within (candidate (list 17 12 16 17 7 1 12 6 17 5 17 13 16 16 17 14 17 6 17 17 17 17 16 17 14 8 14 1 12 13 17 17 14 8 14 5 16 17 17) 5) 404 0.001)\n    (check-within (candidate (list 98 59 98 32 45 15 98 98 98 65 98 10 98 89 87 51 42 58 76 23 85 98 98 35 18 65 39 88 56 62 10 32 8 16 32 98 6 39 14 24 98 95 68 98 77 47 98 23 69 98 49 98 7 11 92 98 27 25 85 98 45 30 50 62 46 1 79 58 69 15 59 57 85 19 98 95 98 67 52 98 59 8 98 98 98 73 86 20 98 96 21 98 79 97 52 22 98 86) 12) 1168 0.001)\n    (check-within (candidate (list 6 50 118 27 133 133 3 121 133 72 117 133 91 57 107 93 66 122 133 6 133 122 81 20 133 133 121 133 46 25 133 133 133 17 8 49 133 116 40 133 67 9 133 133 133 133 109 41 127 13 39 133 133 133 122 58 8 125 33 62) 12) 538 0.001)\n    (check-within (candidate (list 94 34 112 106 112 13 12 112 112 21 48 71 112 104 112 29 99 58 23 11 49 112 20 86) 4) 105 0.001)\n    (check-within (candidate (list 21 27 9 85 1 7 28 11 44 39 85 52 51 30 67 83 75 10 57 59 53 85 75 33 35 85 76 85 65 85 85 85 35 4 60 85 85 72 57 42 34 85 53 85 85 36 85 56 13 16 69 55 81 24 85 27 54 66 10 85 30 58 71 43 85 66 42 27 85 70) 13) 508 0.001)\n    (check-within (candidate (list 8 14 7 1 11 10 1 13 7 14 14 6 13) 2) 32 0.001)\n    (check-within (candidate (list 165 135 165 46 126 165 73 165 165 155 150 165 40 38 165 145 137 106 10) 7) 5 0.001)\n    (check-within (candidate (list 9 3 12 6 24 23 24) 2) 5 0.001)\n    (check-within (candidate (list 42 85 78 92 46 63 21 14 22 37 96 50 74) 1) 33 0.001)\n    (check-within (candidate (list 73 54 15 4 23 70 53 65 73 73 2 72 36 71 73 69 35 18 62 73 62 73 73 50 30 73 20 71 60 9 12 57 48 73 40 20 8 73 73 73 34 59 31 49 73 5 51 36 47 38 36 58 34 42 23 28 52 73) 1) 1537 0.001)\n    (check-within (candidate (list 52 88 92 92 44 4 92 37 27 59 3 3 76 51 21 89 92 31 26 10 47 69 30 68 60 92 80 19 65 38 92 4 54 88 92 75 56 71 11 92 44 43 56 92 16 66 22 70) 2) 796 0.001)\n    (check-within (candidate (list 29 9 43 5 8 52 24 52 52 41 33 52 27 52 8 6 35 52 27 52 7 2 9 52 52 42 52 52) 7) 76 0.001)\n    (check-within (candidate (list 165 165 58 153 45 124 165 143 38 165 165 165 165 73 8 138 165 139 165 165 59 40 120 165 123 92 98 136 161) 1) 394 0.001)\n    (check-within (candidate (list 28 64 64 63 21 64 55 64 10 30 12 5 64 56 63 64 64 31 31 64 19 54 53 64 58 44 64 28 64 64 63 10 64 64 57 29 44 32 50 55 49 21 64 64 34 26 28 64 15 31 28 64 45 64 19 54 9 41 25 33 7 60 1 7 34 14 4 64 64 64 55 49 3 41 28 42 40 52 25 46 25 15) 18) 229 0.001)\n    (check-within (candidate (list 97 23 53 33 141 150 128 153 71 39 153 35 125 143) 2) 32 0.001)\n    (check-within (candidate (list 144 144 87 144 18 53 129 61 34 123 141 68 37 23 94 28 64 58 16 36 27 112 144 80 77 144 97 142 8 101 14 74 37 115 115 144 99 37 144 48 28 110 13 78 144 144 83 7 112 144 144 144 78 61 87 144 144 61 144 44 123 74 144 142) 4) 1083 0.001)\n    (check-within (candidate (list 63 129 134 61 134 134 134 43 74 4 111) 2) 38 0.001)\n    (check-within (candidate (list 46 105 44 36 106 35 91 8 52 106 95 86 75 7 19 30 25 27 18 72 106 106 33 106 6 63 67 45 15 106 106 6 42 106 27 14 18 106 4 106 95 64 23 93 106 37 106 106 16 81 91 79 106 97 106 66 31 59 58) 1) 1637 0.001)\n    (check-within (candidate (list 78 120 110 53 53 120 116 39 64 120 120 120 120 120 97 28 92 120 101 5 46 92) 1) 224 0.001)\n    (check-within (candidate (list 111 111 72 111 111 56 21 95 111 101 38 77 111 111 76 58 70 72 32 72 19 111 111 63 39 111) 9) 5 0.001)\n    (check-within (candidate (list 33 82 82 82 71 39 17 82 38 75 82 2 82 82 9 82 57 12 78 65 29 20 82 82 50 11 39 74 65 69 81 71 25 82 46 43 49 80) 6) 219 0.001)\n    (check-within (candidate (list 83 72 17 147 147 57 147 22 120 107 59 133 123 91 147 147 72 147 31 147 147 147 96 147 18 25 13 8 18 59 46 91 15 147 25 30 6 147 113 27 84 95 38 147 147 147 106 53 127 132 55 147 22 147 124 102 17 69 131 147 4 95 59 38 147 147 41 99 142 147 136 142 57 26 16 3 142) 8) 1336 0.001)\n    (check-within (candidate (list 52 95 173 26 173 16 4 144 173 77 22 103 162 120 77 173 173 89 173 104 62 151 173 124 173 117 113 164 3 70 15 144 161 118 139 16 157 173 154 151 37 69 60 173 173 168 148 97 173 125 161 128 85 64 70 102 100 168 56 57 157 112 119 135 42 72 135 173 173 124 143 121 75 37 162 161 102 50 173 173 107) 4) 1940 0.001)\n    (check-within (candidate (list 4 18 6 22 19 15 20 12 22 22 19 6 10 7 20 4 22 21 7 17 3 16 13 17 22 14 8 2 3 22 18 18 22 22 7 22 13 10 20 4 14 17 9 19 1 12 3 11 19 15 6 4 10) 6) 347 0.001)\n    (check-within (candidate (list 55 103 123 68 16 72 104 63 40 15 180 162 82 180 131 46 180 2 120 107 100 97 180 180 17 134 180 124 40 125 15 132 4 112 180 180 28 66 180 122 99 46 15 180 180 111 30 169 132 180 10 180 180 180 107 74 95 28 180 66 180 128 61 180 118 180 28 103 37 180 88 152) 8) 1181 0.001)\n    (check-within (candidate (list 20 6 49 60 16 54 13 2 35 6 27 62 67 56 27 6 33 51 67 42 9 59 67 14 59 7 67 34 51 5 67 48 53 20 35 67 65 34 67 67 62 7 27 18 40 10 67 67 9 8 60 12 2 67 64 67 60 28 60 26 37 2 67 33 49 23 2 36 67 6 67 7 67 44 18) 8) 1034 0.001)\n    (check-within (candidate (list 191 2 46 65 191 166 191 156 157 181 167 123 26 191 191 104 33 126 51 191 191 191 6 152 74 84 126 191 191 162 188 38 30 191 191 125 30 56 12 151 45 163 91 168 15 125 60 4 108 27 67 97 125 147 167 152 191 159 142 105) 7) 647 0.001)\n    (check-within (candidate (list 2 4 11 30 23 1 8 18 4 6 30 30 30 10 30 17 24 13 17 30 25 30 30 12 15 29 24 28 21 30 25 11 1 30 9 30 21 3 10 6 30 5 5 24 21 30 17 29 21 30 3 30 8 18 17) 7) 584 0.001)\n    (check-within (candidate (list 141 106 141 141 94 98 33 141 2 115 11 141 9 131 104 2 141 75 141 141 24 141 28 68 141 134 141 110 15 21 141 65 108 141 35 95 94 141 117 25) 10) 94 0.001)\n    (check-within (candidate (list 139 94 77 139 139 139 139 92 61 105 25 139 93 139 113 128 139 81 70 139 25 139 37 118 15 5 139 115 133 1) 3) 292 0.001)\n    (check-within (candidate (list 107 160 86 160 69 160 160 73 120 129 130 104 112 136 7 100 21 160 160 94 3 96 160 65 74 87 110 160 145 116 38 72 127 152 71 24 35 79 160 120 160 80 50 160 129 50 82 160 140 160 3 17 129 18 108 34 132 69 4 160 124 108 30 125 160 102 51 138 160 120 159 160 49 68 160 19 87 160 6 160 76 160 110) 16) 124 0.001)\n    (check-within (candidate (list 89 9 89 82 89 11 31 45 61 56 27 15 33 6 5 89 28 73 8 48 11 89 5 89 4 65 18 20 17 38 4 36 59 34 5 81 10 6 44 19 20 86 58 60 27 89 34 29 36 88 89 10 73) 7) 14 0.001)\n    (check-within (candidate (list 45 40 44 51 51 33 33 38 46 38 51 40 9 29 51 40 51 36 39 36 51 24 39 51 31 50 12 50 1 51 32 51 49 12 44 19 4 26 7 51 14 4 33 36 19 18 14 20 16 11 51 51 7 18 7 10 8 8 48 51 43 41 51) 10) 199 0.001)\n    (check-within (candidate (list 102 4 3 22 78 96 21 126 103 52 99 94 57 126 49 20 75 126 93 1 4 126 122 123 21 111 23 110 126 81 112 92 121 30 41 126 20 10 126 54 15 27 126 126 9 126 126 1 106 34 119 108 126 126 34 57 27 126 110 126 65 125 126 59 117 126 67 114 115 38 79 123 118 126 33 52 1 119 11 105 21 51 75 126 84) 9) 1500 0.001)\n    (check-within (candidate (list 71 122 36 39 48 158 83 20 131 41 126 1 33 19 138 133 80 106 92 2 68 158 158 111 158 50 158 81 158 138 108 36 149) 4) 171 0.001)\n    (check-within (candidate (list 39 136 153 85 134 19 34 22 5 124 116 91 122 160 112 160 22 111 160 160 113 34 40 16 160 117 61 160 31 34 145 160) 6) 72 0.001)\n    (check-within (candidate (list 14 14 1 8 2 11 14 14 5 1 8 1 6 3 14 14 14 2 9 10 14 2 3 14 2 5 5 11 10 11 14 5 3 10 5 3 1 3 14 5 13 9 2 9 3 5 14 14 2 3 10 4 14 14 10 14 2 10 9 2 7 9 11 14 9 5 1 5 13 6 10 1 7 4 13 13 9 10 2 10 3 8 14 3 14 13 1 14 8 12 1 6 12 14 14) 14) 438 0.001)\n    (check-within (candidate (list 1 7 4 10 12 10 10 1 12 1 6 6 9 7 10 6 12 10 7 9 6 10 12 8 11 9 8 3 8 3 12 12 12 3 2 2 3 1 10 2 12 12 12 9 10 1 8 10 12 4 8 8 6 2 11 7 3 3 12 12 2 7 8 11 4 3 12 5 8 12 10 2 9 6 5 10 8) 7) 1236 0.001)\n    (check-within (candidate (list 1 7 11 13 10 13 8 6 4 11 13 6 1 6 8 10 5 13 4 2 3 7 12 5 1 1 11 13 8 9 1 8) 2) 262 0.001)\n    (check-within (candidate (list 73 24 67 11 66 73 73 40 4 47 25 26 48 40 27 69 73 28 23 9 16 8 63 65 73 57 73 21 43 73 19) 1) 408 0.001)\n    (check-within (candidate (list 7 47 50 16 35 24 61 44 53 49) 1) 28 0.001)\n    (check-within (candidate (list 14 89 43 1 12 64 23 89 55 23 56 69 62 89 89 86 89 89 89 76 84 57 18 54 29 50 67 69 65 3 22 26 8 77 51 74 74 40 89 89 18 74 89 26 16 27 1 66 72 22 78 20 15 14 63 77 73 23 65 89 79 32 18 89 59 16 24 39 87 78 29 84 89 49 80 69 89 44 89 89 58 6 55 38 89 53 89 3 81 28 65 39 30 14 16 89 22 4 23 84) 7) 2045 0.001)\n    (check-within (candidate (list 16 11 12 16 5 17 11 13 12 17 16 2 3 13 1 4 10 2 17 17 8 7 4 17 11 17 8 2 15 17 4 16 9 8 17 2 17 16 17 4 6 8 12 17 16 13 4 11 9 11 16 10 17 17 10 13 17 13 1 13 3 7 4 2 15 6 11 12 17 17 7 15 9 16 7 2 17 7 17 16 5 8) 8) 1317 0.001)\n    (check-within (candidate (list 52 46 47 52 52 4 2 21 2 26 47 26 52 7 12 35 52 33 47 3 31 37 36 52 38 19 12 40 52 7 40 16 51 41 52 23 20 52 18 52 21 2 52 49 5 48 23 52 52) 8) 132 0.001)\n    (check-within (candidate (list 99 155 73 80 32 69 113 37 126 155 95 155 155 48 155 43 37 68 131 68 150 155 153 155 45 59 155 155 155 77 155 155 100 4 127 155 107 151 101 104 155 155 71 147 153 37 155 18 155 100 155 153 155 155 138 4 114 153 111 83 74 144 18 64 94 155 50 45 51 122 146 50 43) 8) 1346 0.001)\n    (check-within (candidate (list 64 156 156 119 156 35 108 82 86 18 107 156 68 83 130 86 80 8 129 95 23 7 71 131 19 156 17 21 43 156 25 156 124 51 91 156 77 88 156 156 62 105 135 142 156 156 78 156 113 156 47 156 156 22 71 49 156 57 71 156 36 84 139 156 17 49 156 121 46 7 155 156 156 156 93 150 102 81 90 52 52 91 2 63 156 49 118 77 156 156 156 79) 19) 590 0.001)\n    (check-within (candidate (list 24 9 28 46 14 41) 1) 12 0.001)\n    (check-within (candidate (list 169 19) 1) 2 0.001)\n    (check-within (candidate (list 95 109 79 198 195 198 198 97 34 43 165 198 198 195 98 198 198 170 39 78 21 198 140 187 29 107 198 132 198 174 109 187 173 198 58 38 62 179 198 68 114 198 10 198 81 198 40 10 71 82 196 128 50 153 146 101 195) 12) 182 0.001)\n    (check-within (candidate (list 9 15 39 33 43 47 15 29 14 12 48 37 9 37 15 48 48 3 1 48 37 39 43 29 43 15 35 2 33 48 28 37 48 45 9 36 3 48 29 14 48 11 24 30 38 18 24 12 47 31 22 10 29 46 14 48 15 29 43 48 37 48 46 14 32 33 15 42 9 12 48 20 35 44 48 4) 10) 274 0.001)\n    (check-within (candidate (list 37 12 14 46 29 98 149 149 149 67 97 56 81 71 11 149 32 149 119 149 44 149 43 149 149 32 75 54 24 148 41) 2) 379 0.001)\n    (check-within (candidate (list 59 101 127 118 19 55 18 127 127 26 127 103 4 127 26 43 26 125 80 127 127 112 2 107 127 127 110 122 77 127 11 86 127 127 91 27 85 86 71 36 41 127 86 37 11) 6) 418 0.001)\n    (check-within (candidate (list 82 82 42 51 82 64 13 16 36 49 22 52 82 10 72 9 6 42 80 74 37 80 73 10 82 31 78 22 14 11 82 60 76 67 82 2 61 52 79 72 77 12 23 33 44 11 82 4 14 65 19 66 56 11 75 82 42 82 56 77 82 81 51 48 19 70 33 51 9 78 62 31 41 46 13 82 82 77 55 24 49 82 82 8 3 44 34) 9) 427 0.001)\n    (check-within (candidate (list 30 83 42 83 83 60 61 60 62 83 74 32 83 83 46 82 25 81 31 83 48 15 49 43 41 83 29 36 45 53 83 74 55 63 1 19 74 2 15 83 61 82 46 48 83 83 8 45 83 80 30 33 83 83 83 22 65 79 57 15 24 25 83 83 60 60 83 44 9 29 60 69 2 83 35 7 40 74 55 83 7 21 11 59 5 80) 17) 200 0.001)\n    (check-within (candidate (list 11 25 22 14 14 29 6 28 12 14 2 15 29 2 6 27 22 29 26 29 11 1 7 27 24 29 7 29 6) 1) 371 0.001)\n    (check-within (candidate (list 173 97 53 181 161 119 152 97 69 181 123 84 83 9 169 135 86 27 119 181 64 147 7 181 154 43 83 181 14 181 45 77 181 83 181 53 181 117 181 27 181 174 181 47) 6) 302 0.001)\n    (check-within (candidate (list 124 52 111 24 191 117 128 153 69 190 51 1 112 52 28 191 188 191 1 124 128 111 191 94 34 167 191 191 9 191 164 60 113 69 151 130 15 86 150 191 175 36 113 23 119 68 191 87 90 159 178 50 104 191 187 48 97 100 136 155 140 132 1 180 182 191 130 110 191 191 191 191 191 177 73 118 191 27 129 124 43 140 191 132 191 41 44 191 169 49 191 191 191 191 113 4) 7) 2434 0.001)\n    (check-within (candidate (list 86 89 92 23 92 72 41 92 92 92 47 30 46 76 20 80 92 60 20 9 92 92 92 36 4 38 92 74 15 20 92 2 73 58 68 2 29 13 92 91 92 44 46 8 57 10 47 92 6 90 92 92 76 92 86 26 22 67 92 92 17 92 18 23 22 40 7) 9) 738 0.001)\n    (check-within (candidate (list 75 65 37 83 80 17 69 83 83 76 64 58 13 83 18 66 25 55 25 60 83 83 83 50 70 39 82 83 47 39 74 83 75 83 34 8 81 46 52 72 45 65 46 2 9 4 23 47 83 83 59 32 54 43 53 56 83) 9) 256 0.001)\n    (check-within (candidate (list 23 70 2 70 49 65 6 69 5 26 29 70 70 15 17 22 70 63 51 25 18 68 31 3 43 60 70 6 61 23 46 21 66 67 63 3 7 70 66 47 15 65 52 70 70 38 8 18 29 33 50 9 70 9) 1) 1305 0.001)\n    (check-within (candidate (list 23 12 6 3 4 7 23 23 6 23 23 9 23 2 14 11 21 23 8 9 19 10 17 23 11 3 13 23 18 3 6 7 6 19 17 14 17 7 23 21 10 22 6 23 23 3 1 20 14 7 19 20 23 19 23 15 4 23 2 6 20 23 8 6 17 14 23 6 10 23 17 6 11 8 3 6 23 16 19 16 2 19 2 23 1 16 20 4 20 12 1) 11) 942 0.001)\n    (check-within (candidate (list 199 146 138 199 97 169 199 198 199 199 11 62 68 122 193 199 22 41 199 181 199 157 199 44 199 199 199 142 132 112 199 199 155 199 97 101 26 52 199 45 164 112 188 97 180 103 199 3 130 64 131 199 194 135 36 199 80 67 41 67 158 183 188 12 126) 13) 420 0.001)\n    (check-within (candidate (list 25 32 40 47 35 9 39 58 67 42 77 57 77 77 34 28 13 77 15 33 77 10 64 67 35 21 61 60 74 57 77 71 28 77 48 67 17 48 77 77 77 60 26 30 77 49 77 3 77 33 75 77 20 77 77) 9) 325 0.001)\n    (check-within (candidate (list 50 108 19 118 46 45 126 118 89 126 46 63 30 126 120 10 126 126 108 95 126 94) 3) 107 0.001)\n    (check-within (candidate (list 28 94 94 5 1 74 33 3 88 76 78 30) 1) 32 0.001)\n    (check-within (candidate (list 44 4 4 31 33 51 51 40 51 2 27 48 51 6 51 27 45 1 25 2 20 43 51 12 11 44 40 28 29 51 51 45 30 24 51 51 30 51 13 18 29 51 15 11 39) 11) 52 0.001)\n    (check-within (candidate (list 6 30 19 32 24 8 28 2 18 32 5 31 3 31 28 30 30 22 32 22 31 1 9 2 7 32 14 24 24 6 23 6 25 32 32 22 10 11 4 2 32 18 15 1 22 20 6 26 11 13 26 22 32 30 18) 4) 570 0.001)\n    (check-within (candidate (list 17 41 71 95 56 88 25 95 73 95 91 95 8 43 2 52 95 88 5 49 20 48 95 84 95 44 27 95 87 32 45 95 95 95 51 56 6 5 65 21 52 56 84 95 75 33 95 62 47 95) 13) 20 0.001)\n    (check-within (candidate (list 5 12 6 13 11 13 9 13 10 13 13 12 7 11 2 11 4 7 6 6 13 9 1 12 13 11 7 11 11 13 2 13 7 4 9 5 13 8 4 1 2 5 13 7 7 12 2 2 8 11 12 1 8 5 3 6 4 2 9 10 6 6 13 12 13 6 13 13 13 13 13 3 4 4 10 1 2 12 12 13 13 6 13 4 13 1 12 11 9 12 2 5) 3) 3240 0.001)\n    (check-within (candidate (list 13 16 2 27 10 2 44 44 44 28 44 44 23) 4) 23 0.001)\n    (check-within (candidate (list 69 46 80 10 80 48 76 15 67 1 80 80 34 4 14 15 2 38 62 31 17 56 58 17 38 29 67) 4) 48 0.001)\n    (check-within (candidate (list 39 38 136 136 97 122 54 102 112 125 135 57 136) 1) 52 0.001)\n    (check-within (candidate (list 39 67 17 52 89 63 52 8 14 90 76 2 90 65 90 80 90 33 61 76 90 32 43 55 62 24 29 90 35 36 90 8 40 1 72 54 64 90 58 88 77 89 35 79 90 81 90) 2) 822 0.001)\n    (check-within (candidate (list 16 22 10 22 4 16 16 15 3 22 22 15 7 7 21 17 16 1 10 13 16 17 2 18 2 5 11) 3) 70 0.001)\n    (check-within (candidate (list 120 58 118 34 32 110 94 10 119 133 70 154 151 107 124 148 154 154 24 154 6 83 20 6 3 72 154 28 148 107 154 73 126 154 41) 5) 135 0.001)\n    (check-within (candidate (list 15 2 1 21 20 33 16 19) 1) 18 0.001)\n    (check-within (candidate (list 45 25) 1) 2 0.001)\n    (check-within (candidate (list 179 127 54 149 90 119 179 127 115 82 159 128 6 55 33 43 2 172 105 159 83 179 30 179 175 125 179 179 105 179 74 77 179 153 145 124 70 179 129 31 62 172 179 29 130 179 82 64 98 179 91 179 89 166 60 159 54 179 179 137 54 158 64 177 56 165 97 142 90 170 179 127 111 179 145 179 8) 16) 61 0.001)\n    (check-within (candidate (list 25 41 11 41 26 30 41 34 31 41 40 23 14 41 10 34 8 15 41 10 14 41 37 20 37 35 37 8 21 30 11 7 33 3 25 1 3 38 27 26 27 20 29 41 30 7 23 15 41 41 41 25 18 41 19 41 34 35 33 41 4 41 15) 3) 1227 0.001)\n    (check-within (candidate (list 7 6 3 9 6 3 4 4 9 7 3 3 8 9 2 4 8 8 8 6 3 2 9 9 9 4 2 6 9 3) 1) 396 0.001)\n    (check-within (candidate (list 158 2 138 177 96 104 175 81 46 19 85 1 174 177 115 145 32 177 174 95 96 101 177 114 115 137 77 98 15 177 125 162 177 177 111 106 112 177 174 40 177 177 176 40 177 145 177 99 177 177 163 177 143 147 177 11 142 177 44 171 52 98 177 163 140 139 61 147 71 20 177 45 172) 5) 1642 0.001)\n    (check-within (candidate (list 3 1) 1) 2 0.001)\n    (check-within (candidate (list 99 166 166 5 166 44 83 73 40 64 166 135 166 24 166 41 70 93 166 166 166 49 157 3 135 137 1 133 18 166 15 82 4 166 13 55 95 166 166 151 102 166 166 34 32 31 48 166 166 13 166 166 94 28 166 166 119 103 157 12 103 19 126 13 117 71 85 166 166 81 132 105 128 166 166 125 73 161 166 139 6 32 5 31 137) 24) 49 0.001)\n    (check-within (candidate (list 121 135 135 135 57 18 7 22 135 57 96 72 23 68 32 39 135 135 135 135 51 25 100 49 72 135 99 38 126 110 52 63 48 135 135 132 111 114 135 135 24 125 135 135 120 93 55 40 135 44 135 22 135 48 35 12 116 79 80 22 135 135 111 135) 20) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3214_maximizeSquareHoleArea", "language": "rkt", "prompt": "#lang racket\n;; There is a grid with n + 2 horizontal bars and m + 2 vertical bars, and initially containing 1 x 1 unit cells.\n;; The bars are 1-indexed.\n;; You are given the two integers, n and m.\n;; You are also given two integer arrays: hBars and vBars.\n;; hBars contains distinct horizontal bars in the range [2, n + 1].\n;; vBars contains distinct vertical bars in the range [2, m + 1].\n;; You are allowed to remove bars that satisfy any of the following conditions:\n;; If it is a horizontal bar, it must correspond to a value in hBars.\n;; If it is a vertical bar, it must correspond to a value in vBars.\n;; Return an integer denoting the maximum area of a square-shaped hole in the grid after removing some bars (possibly none).\n;; Example 1:\n;; Input: n = 2, m = 1, hBars = [2,3], vBars = [2]\n;; Output: 4\n;; Explanation: The left image shows the initial grid formed by the bars.\n;; The horizontal bars are in the range [1,4], and the vertical bars are in the range [1,3].\n;; It is allowed to remove horizontal bars [2,3] and the vertical bar [2].\n;; One way to get the maximum square-shaped hole is by removing horizontal bar 2 and vertical bar 2.\n;; The resulting grid is shown on the right.\n;; The hole has an area of 4.\n;; It can be shown that it is not possible to get a square hole with an area more than 4.\n;; Hence, the answer is 4.\n;; Example 2:\n;; Input: n = 1, m = 1, hBars = [2], vBars = [2]\n;; Output: 4\n;; Explanation: The left image shows the initial grid formed by the bars.\n;; The horizontal bars are in the range [1,3], and the vertical bars are in the range [1,3].\n;; It is allowed to remove the horizontal bar [2] and the vertical bar [2].\n;; To get the maximum square-shaped hole, we remove horizontal bar 2 and vertical bar 2.\n;; The resulting grid is shown on the right.\n;; The hole has an area of 4.\n;; Hence, the answer is 4, and it is the maximum possible.\n;; Example 3:\n;; Input: n = 2, m = 3, hBars = [2,3], vBars = [2,3,4]\n;; Output: 9\n;; Explanation: The left image shows the initial grid formed by the bars.\n;; The horizontal bars are in the range [1,4], and the vertical bars are in the range [1,5].\n;; It is allowed to remove horizontal bars [2,3] and vertical bars [2,3,4].\n;; One way to get the maximum square-shaped hole is by removing horizontal bars 2 and 3, and vertical bars 3 and 4.\n;; The resulting grid is shown on the right.\n;; The hole has an area of 9.\n;; It can be shown that it is not possible to get a square hole with an area more than 9.\n;; Hence, the answer is 9.\n;; Constraints:\n;; 1 <= n <= 109\n;; 1 <= m <= 109\n;; 1 <= hBars.length <= 100\n;; 2 <= hBars[i] <= n + 1\n;; 1 <= vBars.length <= 100\n;; 2 <= vBars[i] <= m + 1\n;; All values in hBars are distinct.\n;; All values in vBars are distinct.\n(define (maximizeSquareHoleArea n m hBars vBars)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3214_maximizeSquareHoleArea.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximizeSquareHoleArea))\n    (check-within (candidate 2 1 (list 2 3) (list 2)) 4 0.001)\n    (check-within (candidate 1 1 (list 2) (list 2)) 4 0.001)\n    (check-within (candidate 2 3 (list 2 3) (list 2 3 4)) 9 0.001)\n    (check-within (candidate 1 5 (list 2) (list 2 3)) 4 0.001)\n    (check-within (candidate 2 4 (list 3 2) (list 4 2)) 4 0.001)\n    (check-within (candidate 1 4 (list 2) (list 2 3 5 4)) 4 0.001)\n    (check-within (candidate 1 4 (list 2) (list 4 3 2 5)) 4 0.001)\n    (check-within (candidate 3 2 (list 3 2 4) (list 3 2)) 9 0.001)\n    (check-within (candidate 3 2 (list 4 2 3) (list 3 2)) 9 0.001)\n    (check-within (candidate 14 4 (list 13) (list 3 4 5 2)) 4 0.001)\n    (check-within (candidate 19 7 (list 6 12 4) (list 6 3)) 4 0.001)\n    (check-within (candidate 2 4 (list 2 3) (list 4 2 3 5)) 9 0.001)\n    (check-within (candidate 4 2 (list 2 5 4 3) (list 3 2)) 9 0.001)\n    (check-within (candidate 5 1 (list 2 4 3 6 5) (list 2)) 4 0.001)\n    (check-within (candidate 1 6 (list 2) (list 3 2 7 4 6 5)) 4 0.001)\n    (check-within (candidate 1 13 (list 2) (list 4 14 2 12 11 3)) 4 0.001)\n    (check-within (candidate 2 5 (list 2 3) (list 6 2 5 4 3)) 9 0.001)\n    (check-within (candidate 5 2 (list 2 3 6 4 5) (list 2 3)) 9 0.001)\n    (check-within (candidate 6 1 (list 7 4 3 2 5 6) (list 2)) 4 0.001)\n    (check-within (candidate 4 4 (list 2 3 4 5) (list 5 4 3 2)) 25 0.001)\n    (check-within (candidate 4 4 (list 3 4 2 5) (list 2 5 3 4)) 25 0.001)\n    (check-within (candidate 6 2 (list 7 3 5 4 6 2) (list 3 2)) 9 0.001)\n    (check-within (candidate 7 11 (list 7 4 5 2 8 6 3) (list 4)) 4 0.001)\n    (check-within (candidate 1 8 (list 2) (list 9 7 8 2 5 6 4 3)) 4 0.001)\n    (check-within (candidate 1 9 (list 2) (list 5 2 10 4 3 6 8 7)) 4 0.001)\n    (check-within (candidate 2 7 (list 2 3) (list 2 5 6 8 7 3 4)) 9 0.001)\n    (check-within (candidate 2 7 (list 2 3) (list 2 8 6 7 5 3 4)) 9 0.001)\n    (check-within (candidate 4 5 (list 3 2 4 5) (list 4 3 6 5 2)) 25 0.001)\n    (check-within (candidate 4 5 (list 5 3 4 2) (list 5 3 6 4 2)) 25 0.001)\n    (check-within (candidate 4 40 (list 5 3 2 4) (list 36 41 6 34 33)) 9 0.001)\n    (check-within (candidate 8 1 (list 4 7 9 8 6 2 3 5) (list 2)) 4 0.001)\n    (check-within (candidate 11 6 (list 8 9 6) (list 5 3 6 4 2 7)) 9 0.001)\n    (check-within (candidate 22 50 (list 6 19 8 17 23) (list 51 3 32 44)) 4 0.001)\n    (check-within (candidate 27 2 (list 2 26 28 22 4 8 23) (list 3 2)) 9 0.001)\n    (check-within (candidate 1 9 (list 2) (list 3 6 10 4 8 5 9 7 2)) 4 0.001)\n    (check-within (candidate 1 9 (list 2) (list 3 7 5 9 10 2 4 8 6)) 4 0.001)\n    (check-within (candidate 3 7 (list 2 4 3) (list 5 4 2 3 7 6 8)) 16 0.001)\n    (check-within (candidate 3 7 (list 4 3 2) (list 2 7 3 6 5 4 8)) 16 0.001)\n    (check-within (candidate 3 7 (list 4 3 2) (list 3 7 5 2 6 4 8)) 16 0.001)\n    (check-within (candidate 3 7 (list 4 3 2) (list 8 2 5 3 6 4 7)) 16 0.001)\n    (check-within (candidate 3 13 (list 2 4 3) (list 4 6 7 12 10 13 2)) 9 0.001)\n    (check-within (candidate 4 6 (list 2 3 4 5) (list 7 2 4 6 3 5)) 25 0.001)\n    (check-within (candidate 5 5 (list 4 6 5 2 3) (list 2 4 5 6 3)) 36 0.001)\n    (check-within (candidate 7 3 (list 8 6 4 5 7 2 3) (list 4 3 2)) 16 0.001)\n    (check-within (candidate 8 2 (list 4 2 6 8 7 5 3 9) (list 3 2)) 9 0.001)\n    (check-within (candidate 9 1 (list 2 9 3 10 4 6 7 8 5) (list 2)) 4 0.001)\n    (check-within (candidate 9 1 (list 9 5 4 8 7 10 3 2 6) (list 2)) 4 0.001)\n    (check-within (candidate 12 5 (list 10 9 13 6 3) (list 3 4 2 5 6)) 9 0.001)\n    (check-within (candidate 29 2 (list 25 14 11 29 7 10 16 8) (list 2 3)) 9 0.001)\n    (check-within (candidate 1 10 (list 2) (list 3 4 6 8 5 7 9 10 11 2)) 4 0.001)\n    (check-within (candidate 1 10 (list 2) (list 10 6 5 7 4 3 11 8 9 2)) 4 0.001)\n    (check-within (candidate 2 9 (list 2 3) (list 6 7 9 3 10 2 5 4 8)) 9 0.001)\n    (check-within (candidate 2 9 (list 3 2) (list 4 8 2 6 7 3 5 9 10)) 9 0.001)\n    (check-within (candidate 4 7 (list 5 4 3 2) (list 8 7 5 2 4 3 6)) 25 0.001)\n    (check-within (candidate 5 6 (list 2 6 5 3 4) (list 4 2 5 3 7 6)) 36 0.001)\n    (check-within (candidate 5 6 (list 5 3 6 2 4) (list 5 7 2 4 3 6)) 36 0.001)\n    (check-within (candidate 5 6 (list 6 4 3 5 2) (list 2 4 5 7 6 3)) 36 0.001)\n    (check-within (candidate 5 11 (list 4 2 6 3 5) (list 8 11 10 12 6 2)) 16 0.001)\n    (check-within (candidate 6 5 (list 4 5 3 2 7 6) (list 6 3 5 4 2)) 36 0.001)\n    (check-within (candidate 6 5 (list 5 2 3 7 4 6) (list 6 2 4 3 5)) 36 0.001)\n    (check-within (candidate 6 5 (list 6 3 4 2 7 5) (list 2 5 4 3 6)) 36 0.001)\n    (check-within (candidate 6 5 (list 7 2 3 4 5 6) (list 6 5 4 2 3)) 36 0.001)\n    (check-within (candidate 8 3 (list 4 6 9 3 8 2 7 5) (list 2 4 3)) 16 0.001)\n    (check-within (candidate 8 3 (list 5 6 9 3 2 4 8 7) (list 2 4 3)) 16 0.001)\n    (check-within (candidate 8 3 (list 8 6 4 3 7 2 9 5) (list 4 2 3)) 16 0.001)\n    (check-within (candidate 8 3 (list 9 2 7 6 8 3 4 5) (list 4 2 3)) 16 0.001)\n    (check-within (candidate 9 2 (list 5 4 6 8 9 10 2 3 7) (list 3 2)) 9 0.001)\n    (check-within (candidate 9 2 (list 6 3 5 4 8 9 2 10 7) (list 3 2)) 9 0.001)\n    (check-within (candidate 10 1 (list 4 3 10 2 11 5 6 9 8 7) (list 2)) 4 0.001)\n    (check-within (candidate 1 11 (list 2) (list 7 12 6 3 4 9 5 10 11 2 8)) 4 0.001)\n    (check-within (candidate 2 10 (list 2 3) (list 11 10 2 8 7 5 6 9 3 4)) 9 0.001)\n    (check-within (candidate 4 8 (list 5 2 3 4) (list 8 7 5 9 4 2 3 6)) 25 0.001)\n    (check-within (candidate 5 7 (list 2 3 6 4 5) (list 6 8 4 5 3 7 2)) 36 0.001)\n    (check-within (candidate 6 10 (list 2 4 3 6 5 7) (list 11 3 9 6 10 4)) 16 0.001)\n    (check-within (candidate 10 2 (list 8 5 4 3 10 2 11 9 6 7) (list 3 2)) 9 0.001)\n    (check-within (candidate 11 1 (list 2 6 9 7 5 11 3 10 4 12 8) (list 2)) 4 0.001)\n    (check-within (candidate 44 2 (list 5 16 18 28 3 9 6 35 14 10) (list 3 2)) 9 0.001)\n    (check-within (candidate 1 12 (list 2) (list 12 9 3 13 7 2 6 11 10 8 4 5)) 4 0.001)\n    (check-within (candidate 2 11 (list 2 3) (list 3 7 2 5 12 9 10 4 8 11 6)) 9 0.001)\n    (check-within (candidate 2 11 (list 2 3) (list 12 10 6 7 2 3 5 11 4 8 9)) 9 0.001)\n    (check-within (candidate 5 8 (list 2 4 6 3 5) (list 8 7 9 4 2 5 6 3)) 36 0.001)\n    (check-within (candidate 6 7 (list 5 4 6 3 2 7) (list 4 7 6 5 2 8 3)) 49 0.001)\n    (check-within (candidate 6 7 (list 6 3 2 7 4 5) (list 6 7 5 2 3 4 8)) 49 0.001)\n    (check-within (candidate 8 5 (list 7 4 3 9 2 8 6 5) (list 5 2 6 3 4)) 36 0.001)\n    (check-within (candidate 9 4 (list 4 5 6 10 7 2 3 9 8) (list 5 3 2 4)) 25 0.001)\n    (check-within (candidate 9 4 (list 9 6 3 10 2 8 4 5 7) (list 4 3 2 5)) 25 0.001)\n    (check-within (candidate 10 3 (list 5 4 9 8 3 6 11 2 10 7) (list 4 3 2)) 16 0.001)\n    (check-within (candidate 10 6 (list 6 2 8 3 11 9 10 7 4 5) (list 6 2 5)) 9 0.001)\n    (check-within (candidate 11 2 (list 8 12 9 3 5 2 10 6 7 4 11) (list 3 2)) 9 0.001)\n    (check-within (candidate 28 31 (list 29 24 4) (list 22 24 2 14 26 4 29 13 15 25)) 4 0.001)\n    (check-within (candidate 1 13 (list 2) (list 9 5 2 6 8 11 7 10 3 13 14 4 12)) 4 0.001)\n    (check-within (candidate 2 12 (list 3 2) (list 13 2 7 4 12 9 10 3 6 5 8 11)) 9 0.001)\n    (check-within (candidate 2 12 (list 3 2) (list 13 4 7 8 3 2 11 12 5 9 6 10)) 9 0.001)\n    (check-within (candidate 5 9 (list 2 5 6 3 4) (list 2 7 3 9 4 10 8 6 5)) 36 0.001)\n    (check-within (candidate 6 9 (list 4 2 5 7 6 3) (list 4 2 6 8 10 3 7 5)) 49 0.001)\n    (check-within (candidate 8 6 (list 4 8 6 7 2 9 3 5) (list 4 7 6 3 2 5)) 49 0.001)\n    (check-within (candidate 9 5 (list 2 5 4 8 3 7 6 10 9) (list 6 3 5 2 4)) 36 0.001)\n    (check-within (candidate 9 5 (list 8 9 5 2 6 7 4 10 3) (list 6 2 3 4 5)) 36 0.001)\n    (check-within (candidate 10 4 (list 4 8 6 3 10 2 7 9 5 11) (list 5 4 3 2)) 25 0.001)\n    (check-within (candidate 11 3 (list 2 8 5 3 12 10 4 11 6 7 9) (list 3 4 2)) 16 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3215_areSimilar", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed m x n integer matrix mat and an integer k. You have to cyclically right shift odd indexed rows k times and cyclically left shift even indexed rows k times.\n;; Return true if the initial and final matrix are exactly the same and false otherwise.\n;; Example 1:\n;; Input: mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2\n;; Output: true\n;; Explanation:\n;; Initially, the matrix looks like the first figure. \n;; Second figure represents the state of the matrix after one right and left cyclic shifts to even and odd indexed rows.\n;; Third figure is the final state of the matrix after two cyclic shifts which is similar to the initial matrix.\n;; Therefore, return true.\n;; Example 2:\n;; Input: mat = [[2,2],[2,2]], k = 3\n;; Output: true\n;; Explanation: As all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same. Therefeore, we return true.\n;; Example 3:\n;; Input: mat = [[1,2]], k = 1\n;; Output: false\n;; Explanation: After one cyclic shift, mat = [[2,1]] which is not equal to the initial matrix. Therefore we return false.\n;; Constraints:\n;; 1 <= mat.length <= 25\n;; 1 <= mat[i].length <= 25\n;; 1 <= mat[i][j] <= 25\n;; 1 <= k <= 50\n(define (areSimilar mat k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3215_areSimilar.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate areSimilar))\n    (check-within (candidate (list (list 1 2)) 1) #f 0.001)\n    (check-within (candidate (list (list 1 2 1 2) (list 5 5 5 5) (list 6 3 6 3)) 2) #t 0.001)\n    (check-within (candidate (list (list 4 9 10 10) (list 9 3 8 4) (list 2 5 3 8) (list 6 1 10 4)) 5) #f 0.001)\n    (check-within (candidate (list (list 5 8 8 4 7 2 3 4 3 10) (list 8 7 9 1 3 4 2 6 6 9) (list 6 2 10 10 4 6 3 4 1 1)) 3) #f 0.001)\n    (check-within (candidate (list (list 4 7 9 1 10 5 2 6 1 7) (list 8 9 9 2 3 2 3 2 3 5) (list 1 2 4 7 4 7 9 7 9 9)) 5) #f 0.001)\n    (check-within (candidate (list (list 10 6 3 6) (list 4 8 1 2)) 6) #f 0.001)\n    (check-within (candidate (list (list 7 10 6 7 7 4 4 7 2 2) (list 3 6 4 8 4 6 4 3 1 4) (list 4 8 7 1 10 2 10 8 10 1) (list 4 7 10 5 1 9 8 3 5 8) (list 3 7 6 5 3 1 3 2 8 5) (list 6 1 5 10 8 7 7 10 1 3)) 7) #f 0.001)\n    (check-within (candidate (list (list 6 5 3) (list 4 6 2) (list 4 1 8) (list 3 9 1) (list 6 1 2) (list 1 9 9) (list 2 6 10)) 5) #f 0.001)\n    (check-within (candidate (list (list 2 4) (list 9 8)) 9) #f 0.001)\n    (check-within (candidate (list (list 2 2) (list 2 2)) 3) #t 0.001)\n    (check-within (candidate (list (list 9 1 10 6 10 7 3) (list 9 2 9 10 7 10 10)) 4) #f 0.001)\n    (check-within (candidate (list (list 7 7) (list 10 10) (list 4 4)) 2) #t 0.001)\n    (check-within (candidate (list (list 6 6 6 6 6 6 6 6 6 6) (list 9 9 9 9 9 9 9 9 9 9) (list 1 1 1 1 1 1 1 1 1 1) (list 10 10 10 10 10 10 10 10 10 10) (list 2 2 2 2 2 2 2 2 2 2) (list 6 6 6 6 6 6 6 6 6 6) (list 7 7 7 7 7 7 7 7 7 7) (list 9 9 9 9 9 9 9 9 9 9) (list 8 8 8 8 8 8 8 8 8 8)) 1) #t 0.001)\n    (check-within (candidate (list (list 6 9 1) (list 8 9 7) (list 2 8 7) (list 1 5 7) (list 10 5 9) (list 5 5 6) (list 8 6 1) (list 5 7 8)) 5) #f 0.001)\n    (check-within (candidate (list (list 3 10 3 10 3 10 3 10) (list 5 8 5 8 5 8 5 8) (list 3 9 3 9 3 9 3 9) (list 3 8 3 8 3 8 3 8) (list 2 3 2 3 2 3 2 3)) 2) #t 0.001)\n    (check-within (candidate (list (list 9 5 3 10) (list 4 7 10 7) (list 1 7 9 4) (list 8 8 1 6) (list 6 7 6 1) (list 3 1 1 8) (list 9 2 8 3) (list 1 9 7 6)) 4) #t 0.001)\n    (check-within (candidate (list (list 4 6) (list 10 1) (list 8 8) (list 10 9) (list 9 10)) 9) #f 0.001)\n    (check-within (candidate (list (list 1 9 6 7 1 4 7 6 7) (list 7 10 6 6 4 9 6 8 2) (list 3 9 8 10 9 9 3 9 5) (list 8 5 2 3 4 7 3 3 1) (list 1 5 9 9 6 1 9 7 5) (list 8 3 10 2 4 8 7 9 9) (list 5 9 6 8 4 3 4 6 4) (list 7 2 6 9 2 4 5 4 9) (list 4 8 7 5 3 6 3 9 5)) 1) #f 0.001)\n    (check-within (candidate (list (list 9 3 3 7 7 5 3 3) (list 10 9 9 3 6 8 7 5) (list 8 9 3 10 10 10 2 1) (list 9 7 8 2 3 4 8 4) (list 5 9 5 2 2 6 5 7) (list 1 5 9 7 8 1 1 1)) 10) #f 0.001)\n    (check-within (candidate (list (list 10 6 10 6 10 6 10 6)) 4) #t 0.001)\n    (check-within (candidate (list (list 2 4) (list 6 1) (list 1 2) (list 2 10) (list 6 5) (list 4 9)) 7) #f 0.001)\n    (check-within (candidate (list (list 8 8 8 8 8 8 8 8 8 8) (list 7 7 7 7 7 7 7 7 7 7) (list 6 6 6 6 6 6 6 6 6 6)) 2) #t 0.001)\n    (check-within (candidate (list (list 8 10 1 7 1 3 9 6 8) (list 9 10 4 8 8 9 3 10 10) (list 4 3 2 2 3 6 4 6 1) (list 9 4 1 4 5 2 5 1 8) (list 3 10 6 3 8 4 8 3 10)) 7) #f 0.001)\n    (check-within (candidate (list (list 8 9) (list 3 3) (list 5 6) (list 10 1) (list 2 5) (list 5 8) (list 5 4) (list 9 5)) 2) #t 0.001)\n    (check-within (candidate (list (list 9 1 8 9 2 9 1 8 9 2) (list 10 2 7 8 9 10 2 7 8 9) (list 7 6 6 9 5 7 6 6 9 5)) 5) #t 0.001)\n    (check-within (candidate (list (list 4 4 4 2 7 9 1 8 9 8) (list 3 3 6 3 8 8 7 7 4 5) (list 10 1 3 7 6 5 7 10 3 10)) 5) #f 0.001)\n    (check-within (candidate (list (list 9 10 10 6 6 8 10 7 10 9) (list 10 6 1 10 10 5 7 9 9 2) (list 8 5 8 3 5 2 2 9 7 10)) 20) #t 0.001)\n    (check-within (candidate (list (list 4 5 1 3 10) (list 10 5 9 10 2) (list 8 10 2 8 1) (list 5 8 9 3 4) (list 6 6 10 10 10) (list 6 1 7 9 4) (list 6 7 6 2 10)) 8) #f 0.001)\n    (check-within (candidate (list (list 2 7 1 10 5 3) (list 10 7 8 2 2 2) (list 9 6 1 4 10 6) (list 6 1 1 9 2 5) (list 6 4 7 3 6 4) (list 10 10 5 4 2 1) (list 7 3 3 7 1 5) (list 5 8 2 10 5 1) (list 3 1 5 1 5 7)) 2) #f 0.001)\n    (check-within (candidate (list (list 7 7 4) (list 8 9 9) (list 9 7 5) (list 6 3 6) (list 4 9 5) (list 1 10 3) (list 4 4 7) (list 4 7 6)) 1) #f 0.001)\n    (check-within (candidate (list (list 10 10) (list 10 10) (list 5 5) (list 3 3) (list 2 2)) 2) #t 0.001)\n    (check-within (candidate (list (list 6 4 7 6 3 9 4 2 10 5) (list 9 7 7 3 10 9 7 4 3 1)) 20) #t 0.001)\n    (check-within (candidate (list (list 7)) 1) #t 0.001)\n    (check-within (candidate (list (list 6 3 2)) 4) #f 0.001)\n    (check-within (candidate (list (list 6 8)) 4) #t 0.001)\n    (check-within (candidate (list (list 6 6 7 7 1) (list 10 3 3 2 2) (list 7 9 8 10 7) (list 10 8 2 7 1) (list 2 2 1 2 3) (list 6 2 8 10 10) (list 6 2 6 3 3) (list 2 2 2 4 7)) 4) #f 0.001)\n    (check-within (candidate (list (list 8 8 5 3 7 8) (list 8 9 1 7 3 10) (list 4 3 9 8 4 7) (list 2 2 5 8 2 2) (list 6 1 2 7 4 8) (list 10 9 6 3 1 4) (list 7 1 6 7 4 6)) 2) #f 0.001)\n    (check-within (candidate (list (list 7) (list 5) (list 5) (list 4) (list 4) (list 5) (list 8)) 6) #t 0.001)\n    (check-within (candidate (list (list 8 8 5 10 7 8 8 5 10 7) (list 1 2 6 10 7 1 2 6 10 7)) 5) #t 0.001)\n    (check-within (candidate (list (list 10 2 6 7 6 6 5) (list 6 3 3 4 6 5 7) (list 6 8 5 10 8 4 1)) 8) #f 0.001)\n    (check-within (candidate (list (list 4 10 9 7 9 9 2) (list 3 9 2 1 8 9 10) (list 7 10 9 7 2 3 8)) 1) #f 0.001)\n    (check-within (candidate (list (list 1 7 10 10 9 2 1) (list 6 4 5 2 3 3 10) (list 2 6 8 3 6 1 4)) 9) #f 0.001)\n    (check-within (candidate (list (list 2 9 2 2 6 10 4 8 3) (list 10 8 4 5 10 3 3 8 5) (list 2 6 4 5 4 8 5 5 4) (list 1 3 2 10 5 3 10 9 4) (list 2 4 2 4 7 7 1 4 9)) 2) #f 0.001)\n    (check-within (candidate (list (list 9 5 6 9 5 6) (list 1 9 4 1 9 4) (list 5 7 2 5 7 2) (list 9 1 5 9 1 5) (list 6 8 6 6 8 6) (list 10 1 7 10 1 7)) 6) #t 0.001)\n    (check-within (candidate (list (list 2 7 6) (list 10 6 5) (list 10 2 4) (list 10 7 9) (list 5 8 6) (list 10 6 3) (list 10 9 6) (list 5 2 8) (list 10 1 2)) 7) #f 0.001)\n    (check-within (candidate (list (list 5 4 5 10 5)) 9) #f 0.001)\n    (check-within (candidate (list (list 10 10 9) (list 5 6 7) (list 1 4 7) (list 5 1 1) (list 5 1 5) (list 5 10 3)) 2) #f 0.001)\n    (check-within (candidate (list (list 9 4 5) (list 8 5 4) (list 2 9 9)) 10) #f 0.001)\n    (check-within (candidate (list (list 4 2 2 7 9 1 1 2) (list 1 8 7 5 7 5 9 6) (list 2 9 4 10 1 8 5 4)) 3) #f 0.001)\n    (check-within (candidate (list (list 10) (list 7) (list 8) (list 2)) 1) #t 0.001)\n    (check-within (candidate (list (list 10) (list 1) (list 5) (list 3) (list 1) (list 1)) 4) #t 0.001)\n    (check-within (candidate (list (list 7 1 7 7 1 7 7 1 7) (list 5 10 1 5 10 1 5 10 1)) 3) #t 0.001)\n    (check-within (candidate (list (list 4 7 9 9 4 7 9 9) (list 8 9 7 4 8 9 7 4) (list 6 8 6 4 6 8 6 4) (list 9 8 8 8 9 8 8 8) (list 3 6 5 3 3 6 5 3) (list 1 9 4 3 1 9 4 3) (list 8 3 2 7 8 3 2 7) (list 3 8 2 8 3 8 2 8) (list 6 5 2 8 6 5 2 8)) 8) #t 0.001)\n    (check-within (candidate (list (list 4) (list 5) (list 4) (list 2) (list 4) (list 2) (list 7) (list 4)) 1) #t 0.001)\n    (check-within (candidate (list (list 3 8 5 4 10 2) (list 9 3 9 5 4 2)) 6) #t 0.001)\n    (check-within (candidate (list (list 8 9 10 6 5 7) (list 8 9 9 3 3 9) (list 4 5 4 4 4 10) (list 2 6 3 9 7 1) (list 10 10 4 4 6 10)) 9) #f 0.001)\n    (check-within (candidate (list (list 7 7 7 7 7) (list 1 1 1 1 1)) 1) #t 0.001)\n    (check-within (candidate (list (list 5 7 5 5 1 9 1 8 6 7) (list 8 1 9 10 10 5 4 9 1 8) (list 10 6 8 10 2 10 9 4 9 6) (list 4 7 10 2 7 4 2 10 3 5) (list 2 2 4 9 10 1 6 2 8 3) (list 1 3 5 9 9 8 10 8 9 10) (list 7 8 7 7 6 9 2 5 8 4) (list 6 9 4 2 4 10 10 8 10 7)) 8) #f 0.001)\n    (check-within (candidate (list (list 2 9 10) (list 7 3 3) (list 7 6 2)) 1) #f 0.001)\n    (check-within (candidate (list (list 2 5 8 9 6 8) (list 3 6 4 10 10 6) (list 9 6 10 9 6 5)) 1) #f 0.001)\n    (check-within (candidate (list (list 2 2) (list 4 5) (list 3 2) (list 4 6) (list 1 9) (list 5 3) (list 3 5) (list 2 4) (list 3 9)) 7) #f 0.001)\n    (check-within (candidate (list (list 1 8 6 8 6 7 1 6)) 16) #t 0.001)\n    (check-within (candidate (list (list 7 9 9 2 7) (list 8 5 8 6 7) (list 2 9 8 5 2) (list 9 9 2 6 8) (list 7 4 10 10 8)) 6) #f 0.001)\n    (check-within (candidate (list (list 8 8) (list 6 6) (list 2 2) (list 8 8) (list 9 9) (list 8 8) (list 10 10) (list 3 3) (list 4 4) (list 5 5)) 1) #t 0.001)\n    (check-within (candidate (list (list 3 3 3 3 3 3) (list 5 3 5 3 5 3) (list 2 5 2 5 2 5) (list 8 8 8 8 8 8) (list 3 8 3 8 3 8) (list 5 3 5 3 5 3) (list 1 8 1 8 1 8) (list 8 9 8 9 8 9) (list 2 8 2 8 2 8)) 4) #t 0.001)\n    (check-within (candidate (list (list 2 2 2 2 2) (list 7 7 7 7 7) (list 5 5 5 5 5) (list 8 8 8 8 8) (list 1 1 1 1 1) (list 10 10 10 10 10) (list 7 7 7 7 7)) 1) #t 0.001)\n    (check-within (candidate (list (list 3 1 10 5 10 3 1 10 5 10) (list 3 5 9 2 10 3 5 9 2 10) (list 4 6 3 5 7 4 6 3 5 7) (list 8 10 6 7 8 8 10 6 7 8)) 5) #t 0.001)\n    (check-within (candidate (list (list 10 7 1 7) (list 3 5 9 5) (list 2 8 3 10) (list 8 7 1 9) (list 3 8 6 3) (list 6 5 8 9) (list 8 7 5 1) (list 10 4 9 9) (list 4 6 1 9) (list 6 10 1 7)) 3) #f 0.001)\n    (check-within (candidate (list (list 1 10 3 9 6) (list 7 1 3 4 10)) 3) #f 0.001)\n    (check-within (candidate (list (list 7 7) (list 2 2) (list 5 5)) 1) #t 0.001)\n    (check-within (candidate (list (list 4 4 4 4 4 4 4) (list 2 2 2 2 2 2 2) (list 3 3 3 3 3 3 3) (list 8 8 8 8 8 8 8) (list 6 6 6 6 6 6 6)) 2) #t 0.001)\n    (check-within (candidate (list (list 10 3 5 3 10 3 5 3) (list 2 3 9 7 2 3 9 7) (list 10 4 4 8 10 4 4 8) (list 10 2 7 9 10 2 7 9) (list 8 1 8 3 8 1 8 3) (list 1 9 1 7 1 9 1 7)) 4) #t 0.001)\n    (check-within (candidate (list (list 6) (list 7) (list 1)) 2) #t 0.001)\n    (check-within (candidate (list (list 7 6 4 5)) 5) #f 0.001)\n    (check-within (candidate (list (list 5 5 5 5) (list 5 5 5 5) (list 10 10 10 10) (list 2 2 2 2) (list 3 3 3 3) (list 2 2 2 2) (list 8 8 8 8) (list 10 10 10 10) (list 9 9 9 9) (list 7 7 7 7)) 2) #t 0.001)\n    (check-within (candidate (list (list 5 1 1 9 4 1 7 6) (list 8 7 7 6 2 2 1 5) (list 10 2 5 3 10 7 7 5) (list 10 6 1 6 8 4 6 3) (list 10 10 9 8 2 10 8 7) (list 7 4 2 10 2 3 8 7) (list 4 7 5 9 10 4 3 2) (list 10 9 7 7 6 3 9 7) (list 1 4 8 4 6 5 5 1)) 1) #f 0.001)\n    (check-within (candidate (list (list 3)) 1) #t 0.001)\n    (check-within (candidate (list (list 1 1 1 1 1) (list 10 10 10 10 10) (list 10 10 10 10 10)) 2) #t 0.001)\n    (check-within (candidate (list (list 6) (list 3) (list 2) (list 10)) 2) #t 0.001)\n    (check-within (candidate (list (list 9 7 5 6) (list 5 2 1 8) (list 9 4 3 6) (list 5 7 4 1) (list 8 1 8 9) (list 4 3 6 5) (list 6 2 7 3) (list 1 3 6 4) (list 4 9 5 5)) 7) #f 0.001)\n    (check-within (candidate (list (list 10 7 2 10 5 2 7) (list 10 10 3 8 3 3 8) (list 4 3 10 10 10 4 10)) 4) #f 0.001)\n    (check-within (candidate (list (list 8 5) (list 8 10) (list 8 10) (list 1 1) (list 2 1)) 7) #f 0.001)\n    (check-within (candidate (list (list 9 9) (list 8 8) (list 2 2) (list 1 1) (list 8 8) (list 4 4) (list 9 9) (list 4 4) (list 6 6)) 2) #t 0.001)\n    (check-within (candidate (list (list 10 1 1) (list 7 10 6) (list 9 6 6) (list 9 8 10) (list 8 2 1) (list 6 8 3) (list 8 6 6)) 5) #f 0.001)\n    (check-within (candidate (list (list 2 10 5 6 5 5) (list 6 3 1 5 4 7) (list 5 6 3 2 4 10) (list 9 2 6 8 6 2) (list 3 6 8 4 9 1)) 8) #f 0.001)\n    (check-within (candidate (list (list 10 3 4 2 8 10 3 4 2 8) (list 9 9 3 4 5 9 9 3 4 5) (list 6 9 9 2 7 6 9 9 2 7) (list 5 2 3 3 4 5 2 3 3 4)) 5) #t 0.001)\n    (check-within (candidate (list (list 3 4 10 3 4 10) (list 5 5 4 5 5 4) (list 5 5 3 5 5 3) (list 7 8 7 7 8 7)) 3) #t 0.001)\n    (check-within (candidate (list (list 7 1 9 3 6) (list 5 6 5 5 6) (list 2 3 5 10 8) (list 5 10 2 5 4) (list 7 9 1 7 10) (list 8 2 3 4 2) (list 1 6 9 2 1)) 7) #f 0.001)\n    (check-within (candidate (list (list 3 3) (list 3 3) (list 4 4) (list 3 3) (list 8 8) (list 5 5)) 1) #t 0.001)\n    (check-within (candidate (list (list 2 10 2 6 3 6) (list 4 5 10 7 7 9) (list 1 7 4 1 9 4) (list 3 7 6 3 1 4) (list 4 10 4 6 3 5) (list 1 5 5 9 5 1) (list 10 2 5 4 7 10) (list 2 9 7 4 5 3) (list 5 5 1 2 8 3)) 2) #f 0.001)\n    (check-within (candidate (list (list 5) (list 5) (list 5)) 2) #t 0.001)\n    (check-within (candidate (list (list 9 5 5 6 7) (list 7 9 3 8 1) (list 8 8 8 9 5) (list 1 3 2 6 9) (list 3 6 4 8 7) (list 9 3 3 9 10) (list 8 5 1 2 8) (list 7 3 10 5 1) (list 8 4 5 5 1)) 5) #t 0.001)\n    (check-within (candidate (list (list 5 8 5 2 8 5 9) (list 7 8 2 2 8 2 2) (list 4 5 6 7 3 9 9) (list 5 7 4 8 2 9 2) (list 9 5 3 3 5 7 3) (list 3 8 9 6 3 10 7) (list 6 7 3 7 3 6 6)) 8) #f 0.001)\n    (check-within (candidate (list (list 8 8 8 8 8 8) (list 8 8 8 8 8 8) (list 2 2 2 2 2 2) (list 6 6 6 6 6 6) (list 9 9 9 9 9 9) (list 10 10 10 10 10 10) (list 10 10 10 10 10 10)) 2) #t 0.001)\n    (check-within (candidate (list (list 7 7 10 2) (list 3 5 7 6) (list 2 10 1 8) (list 8 3 1 10) (list 5 1 3 3) (list 6 3 4 9) (list 8 9 1 1)) 7) #f 0.001)\n    (check-within (candidate (list (list 5 2 7 2 6 10 7 5) (list 10 9 4 1 7 2 7 4) (list 2 6 7 3 2 10 4 5) (list 10 4 7 2 10 3 6 2)) 16) #t 0.001)\n    (check-within (candidate (list (list 9 10 10 1) (list 1 7 3 5) (list 9 6 4 7) (list 6 6 4 5) (list 2 4 2 7) (list 2 1 1 1) (list 7 2 1 8) (list 2 8 1 3) (list 7 4 6 1) (list 10 10 7 5)) 4) #t 0.001)\n    (check-within (candidate (list (list 7 3 10 2 3 1 10) (list 7 6 10 1 3 2 1) (list 9 1 5 7 1 8 3) (list 4 10 10 7 7 9 7) (list 7 9 1 5 3 8 4) (list 4 9 5 10 2 8 10) (list 2 5 10 3 6 2 9) (list 6 7 2 3 4 2 2)) 1) #f 0.001)\n    (check-within (candidate (list (list 8 8) (list 9 9) (list 2 2) (list 10 10) (list 10 10) (list 1 1) (list 5 5) (list 9 9) (list 7 7)) 2) #t 0.001)\n    (check-within (candidate (list (list 2 1 7 3 7 6 7 9 9 3) (list 3 9 10 4 4 6 8 10 5 6) (list 9 8 6 2 3 4 9 1 9 10) (list 7 10 8 8 3 9 9 5 8 9) (list 9 5 6 9 9 6 4 3 2 3) (list 3 10 6 2 7 6 10 6 2 6) (list 7 9 7 4 5 7 2 4 9 5) (list 4 7 9 6 7 4 6 4 10 4)) 6) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3217_numberOfSets", "language": "rkt", "prompt": "#lang racket\n;; There is a company with n branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.\n;; The company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (possibly none). However, they want to ensure that the remaining branches have a distance of at most maxDistance from each other.\n;; The distance between two branches is the minimum total traveled length needed to reach one branch from another.\n;; You are given integers n, maxDistance, and a 0-indexed 2D array roads, where roads[i] = [ui, vi, wi] represents the undirected road between branches ui and vi with length wi.\n;; Return the number of possible sets of closing branches, so that any branch has a distance of at most maxDistance from any other.\n;; Note that, after closing a branch, the company will no longer have access to any roads connected to it.\n;; Note that, multiple roads are allowed.\n;; Example 1:\n;; Input: n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]\n;; Output: 5\n;; Explanation: The possible sets of closing branches are:\n;; - The set [2], after closing, active branches are [0,1] and they are reachable to each other within distance 2.\n;; - The set [0,1], after closing, the active branch is [2].\n;; - The set [1,2], after closing, the active branch is [0].\n;; - The set [0,2], after closing, the active branch is [1].\n;; - The set [0,1,2], after closing, there are no active branches.\n;; It can be proven, that there are only 5 possible sets of closing branches.\n;; Example 2:\n;; Input: n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]\n;; Output: 7\n;; Explanation: The possible sets of closing branches are:\n;; - The set [], after closing, active branches are [0,1,2] and they are reachable to each other within distance 4.\n;; - The set [0], after closing, active branches are [1,2] and they are reachable to each other within distance 2.\n;; - The set [1], after closing, active branches are [0,2] and they are reachable to each other within distance 2.\n;; - The set [0,1], after closing, the active branch is [2].\n;; - The set [1,2], after closing, the active branch is [0].\n;; - The set [0,2], after closing, the active branch is [1].\n;; - The set [0,1,2], after closing, there are no active branches.\n;; It can be proven, that there are only 7 possible sets of closing branches.\n;; Example 3:\n;; Input: n = 1, maxDistance = 10, roads = []\n;; Output: 2\n;; Explanation: The possible sets of closing branches are:\n;; - The set [], after closing, the active branch is [0].\n;; - The set [0], after closing, there are no active branches.\n;; It can be proven, that there are only 2 possible sets of closing branches.\n;; Constraints:\n;; 1 <= n <= 10\n;; 1 <= maxDistance <= 105\n;; 0 <= roads.length <= 1000\n;; roads[i].length == 3\n;; 0 <= ui, vi <= n - 1\n;; ui != vi\n;; 1 <= wi <= 1000\n;; All branches are reachable from each other by traveling some roads.\n(define (numberOfSets n maxDistance roads)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3217_numberOfSets.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfSets))\n    (check-within (candidate 3 5 (list (list 0 1 2) (list 1 2 10) (list 0 2 10))) 5 0.001)\n    (check-within (candidate 3 5 (list (list 0 1 20) (list 0 1 10) (list 1 2 2) (list 0 2 2))) 7 0.001)\n    (check-within (candidate 1 10 (list )) 2 0.001)\n    (check-within (candidate 3 12 (list (list 1 0 11) (list 1 0 16) (list 0 2 13))) 5 0.001)\n    (check-within (candidate 3 3 (list (list 2 0 14) (list 1 0 15) (list 1 0 7))) 4 0.001)\n    (check-within (candidate 3 19 (list (list 1 0 7) (list 0 2 18))) 6 0.001)\n    (check-within (candidate 3 5 (list (list 2 0 4) (list 1 0 3) (list 1 0 2))) 6 0.001)\n    (check-within (candidate 4 3 (list (list 2 1 8) (list 1 0 3) (list 0 3 8))) 6 0.001)\n    (check-within (candidate 5 20 (list (list 3 2 20) (list 1 0 10) (list 0 2 19) (list 0 3 13) (list 0 4 19))) 12 0.001)\n    (check-within (candidate 2 30 (list (list 1 0 33))) 3 0.001)\n    (check-within (candidate 3 12 (list (list 2 1 4) (list 0 1 4) (list 0 2 6))) 8 0.001)\n    (check-within (candidate 3 3 (list (list 1 0 4) (list 0 2 5))) 4 0.001)\n    (check-within (candidate 3 27 (list (list 2 1 23) (list 0 1 14) (list 0 2 18))) 8 0.001)\n    (check-within (candidate 4 20 (list (list 2 0 16) (list 0 1 13) (list 0 3 11))) 8 0.001)\n    (check-within (candidate 3 22 (list (list 1 0 21) (list 2 1 28))) 5 0.001)\n    (check-within (candidate 2 2 (list (list 1 0 6))) 3 0.001)\n    (check-within (candidate 3 22 (list (list 1 0 16) (list 1 0 12) (list 0 2 14))) 6 0.001)\n    (check-within (candidate 2 8 (list (list 1 0 9))) 3 0.001)\n    (check-within (candidate 2 18 (list (list 1 0 3))) 4 0.001)\n    (check-within (candidate 4 27 (list (list 3 2 3) (list 0 1 27) (list 0 2 6) (list 0 3 17))) 10 0.001)\n    (check-within (candidate 5 14 (list (list 1 0 13) (list 2 0 19) (list 0 3 16) (list 0 4 18))) 7 0.001)\n    (check-within (candidate 5 8 (list (list 1 0 3) (list 3 1 10) (list 4 0 6) (list 2 0 9) (list 3 2 11) (list 4 0 12))) 8 0.001)\n    (check-within (candidate 2 4 (list (list 1 0 7))) 3 0.001)\n    (check-within (candidate 4 39 (list (list 2 0 44) (list 3 2 42) (list 2 1 45))) 5 0.001)\n    (check-within (candidate 5 2 (list (list 4 1 11) (list 3 1 5) (list 1 0 4) (list 0 2 7))) 6 0.001)\n    (check-within (candidate 3 9 (list (list 1 0 17) (list 0 2 22))) 4 0.001)\n    (check-within (candidate 2 1 (list (list 1 0 3))) 3 0.001)\n    (check-within (candidate 3 39 (list (list 1 0 28) (list 0 2 35))) 6 0.001)\n    (check-within (candidate 4 17 (list (list 2 1 28) (list 2 0 6) (list 1 0 28) (list 1 0 24) (list 1 0 18) (list 1 0 25) (list 0 3 10))) 8 0.001)\n    (check-within (candidate 5 16 (list (list 2 1 27) (list 3 0 22) (list 2 1 4) (list 1 0 11) (list 2 1 48) (list 1 0 40) (list 4 2 33) (list 4 3 44) (list 1 0 1))) 9 0.001)\n    (check-within (candidate 3 23 (list (list 2 1 20) (list 0 1 12) (list 0 2 10))) 8 0.001)\n    (check-within (candidate 5 3 (list (list 4 0 5) (list 1 0 2) (list 3 0 5) (list 3 0 4) (list 4 2 5) (list 4 2 1))) 8 0.001)\n    (check-within (candidate 3 5 (list (list 1 0 6) (list 2 0 7))) 4 0.001)\n    (check-within (candidate 3 21 (list (list 2 1 30) (list 0 1 36) (list 0 2 44))) 4 0.001)\n    (check-within (candidate 5 25 (list (list 1 0 17) (list 1 0 1) (list 2 1 24) (list 3 2 12) (list 1 0 7) (list 3 2 4) (list 2 1 15) (list 0 4 14))) 14 0.001)\n    (check-within (candidate 2 3 (list (list 1 0 6))) 3 0.001)\n    (check-within (candidate 3 4 (list (list 1 0 6) (list 2 1 6) (list 2 0 2))) 5 0.001)\n    (check-within (candidate 4 21 (list (list 3 2 18) (list 1 0 15) (list 2 1 15) (list 3 0 19) (list 3 2 19))) 9 0.001)\n    (check-within (candidate 4 1 (list (list 1 0 4) (list 1 0 2) (list 3 1 2) (list 2 1 1) (list 1 0 3) (list 2 0 3))) 6 0.001)\n    (check-within (candidate 3 33 (list (list 2 1 2) (list 1 0 40) (list 2 1 43))) 5 0.001)\n    (check-within (candidate 4 29 (list (list 2 1 20) (list 1 0 38) (list 2 1 15) (list 2 0 32) (list 0 3 18))) 7 0.001)\n    (check-within (candidate 3 1 (list (list 2 1 4) (list 2 0 2) (list 1 0 12))) 4 0.001)\n    (check-within (candidate 2 2 (list (list 1 0 3))) 3 0.001)\n    (check-within (candidate 3 13 (list (list 1 0 18) (list 2 0 1) (list 2 1 2))) 7 0.001)\n    (check-within (candidate 3 1 (list (list 1 0 23) (list 0 2 37))) 4 0.001)\n    (check-within (candidate 3 18 (list (list 2 0 39) (list 0 1 47))) 4 0.001)\n    (check-within (candidate 4 6 (list (list 3 0 6) (list 0 1 3) (list 0 2 9))) 7 0.001)\n    (check-within (candidate 3 35 (list (list 1 0 10) (list 1 0 15) (list 0 2 32))) 6 0.001)\n    (check-within (candidate 5 10 (list (list 4 0 38) (list 4 0 11) (list 2 0 24) (list 3 0 5) (list 2 1 18) (list 2 0 38) (list 1 0 7) (list 2 1 3) (list 2 1 2) (list 3 1 36))) 10 0.001)\n    (check-within (candidate 5 16 (list (list 2 0 32) (list 4 0 17) (list 2 0 22) (list 3 1 38) (list 3 0 13) (list 3 1 34) (list 3 1 36) (list 1 0 36) (list 3 1 18) (list 3 2 10))) 8 0.001)\n    (check-within (candidate 2 4 (list (list 1 0 18))) 3 0.001)\n    (check-within (candidate 5 13 (list (list 3 0 5) (list 2 1 3) (list 1 0 6) (list 3 2 19) (list 2 1 29) (list 2 1 30) (list 1 0 5) (list 2 0 29) (list 4 3 15) (list 2 1 23))) 12 0.001)\n    (check-within (candidate 3 23 (list (list 2 1 12) (list 1 0 8) (list 2 1 7))) 7 0.001)\n    (check-within (candidate 5 38 (list (list 2 0 8) (list 2 1 10) (list 0 3 25) (list 0 4 48))) 11 0.001)\n    (check-within (candidate 2 4 (list (list 1 0 2))) 4 0.001)\n    (check-within (candidate 4 12 (list (list 2 1 18) (list 0 1 25) (list 0 2 24) (list 0 3 16))) 5 0.001)\n    (check-within (candidate 4 1 (list (list 2 0 1) (list 3 2 2) (list 2 0 2) (list 2 0 1) (list 1 0 1) (list 1 0 1))) 7 0.001)\n    (check-within (candidate 3 1 (list (list 1 0 1) (list 0 2 1))) 6 0.001)\n    (check-within (candidate 2 3 (list (list 1 0 24))) 3 0.001)\n    (check-within (candidate 2 10 (list (list 1 0 13))) 3 0.001)\n    (check-within (candidate 3 1 (list (list 2 1 1) (list 0 1 1) (list 0 2 1))) 8 0.001)\n    (check-within (candidate 5 13 (list (list 1 0 17) (list 1 0 21) (list 3 0 9) (list 1 0 10) (list 2 0 11) (list 4 1 12) (list 2 1 11) (list 1 0 18))) 12 0.001)\n    (check-within (candidate 2 19 (list (list 1 0 28))) 3 0.001)\n    (check-within (candidate 3 8 (list (list 2 0 7) (list 2 0 28) (list 0 1 34))) 5 0.001)\n    (check-within (candidate 5 7 (list (list 1 0 32) (list 0 2 35) (list 0 3 20) (list 0 4 27))) 6 0.001)\n    (check-within (candidate 4 1 (list (list 1 0 4) (list 1 0 3) (list 3 0 4) (list 1 0 7) (list 0 2 11))) 5 0.001)\n    (check-within (candidate 2 34 (list (list 1 0 11))) 4 0.001)\n    (check-within (candidate 5 10 (list (list 2 1 32) (list 4 3 14) (list 3 2 3) (list 2 1 21) (list 3 1 37) (list 2 1 30) (list 0 1 18) (list 0 2 26) (list 0 3 19) (list 0 4 23))) 7 0.001)\n    (check-within (candidate 5 14 (list (list 2 0 19) (list 3 1 24) (list 4 3 10) (list 4 1 15) (list 0 1 21) (list 0 3 21) (list 0 4 12))) 8 0.001)\n    (check-within (candidate 4 30 (list (list 2 0 5) (list 0 1 27) (list 0 3 24))) 9 0.001)\n    (check-within (candidate 2 6 (list (list 1 0 23))) 3 0.001)\n    (check-within (candidate 5 6 (list (list 4 0 17) (list 2 1 7) (list 4 1 23) (list 1 0 1) (list 1 0 19) (list 0 3 20))) 7 0.001)\n    (check-within (candidate 3 5 (list (list 1 0 1) (list 1 0 3) (list 2 0 4))) 7 0.001)\n    (check-within (candidate 4 19 (list (list 3 2 21) (list 2 1 3) (list 0 1 15) (list 0 2 22) (list 0 3 8))) 9 0.001)\n    (check-within (candidate 2 5 (list (list 1 0 4))) 4 0.001)\n    (check-within (candidate 4 18 (list (list 2 1 7) (list 2 0 5) (list 0 3 10))) 10 0.001)\n    (check-within (candidate 5 35 (list (list 1 0 39) (list 1 0 3) (list 3 1 45) (list 2 0 21) (list 3 2 40) (list 3 0 27) (list 2 1 44) (list 4 2 6) (list 4 2 45) (list 3 0 22))) 14 0.001)\n    (check-within (candidate 4 2 (list (list 1 0 2) (list 1 0 3) (list 1 0 15) (list 1 0 7) (list 0 2 4) (list 0 3 6))) 6 0.001)\n    (check-within (candidate 4 5 (list (list 2 0 1) (list 1 0 3) (list 0 3 4))) 10 0.001)\n    (check-within (candidate 3 19 (list (list 1 0 9) (list 0 2 4))) 7 0.001)\n    (check-within (candidate 4 1 (list (list 3 0 4) (list 2 1 4) (list 1 0 4))) 5 0.001)\n    (check-within (candidate 2 29 (list (list 1 0 18))) 4 0.001)\n    (check-within (candidate 2 11 (list (list 1 0 28))) 3 0.001)\n    (check-within (candidate 2 12 (list (list 1 0 10))) 4 0.001)\n    (check-within (candidate 5 9 (list (list 3 2 23) (list 4 3 11) (list 1 0 16) (list 2 0 11) (list 2 0 16) (list 1 0 20) (list 4 0 16) (list 2 0 36) (list 3 0 7))) 7 0.001)\n    (check-within (candidate 5 17 (list (list 3 2 22) (list 3 2 3) (list 4 0 19) (list 3 0 21) (list 4 3 4) (list 1 0 24) (list 3 0 7) (list 3 2 12) (list 1 0 17))) 14 0.001)\n    (check-within (candidate 4 5 (list (list 2 0 26) (list 1 0 15) (list 3 2 17))) 5 0.001)\n    (check-within (candidate 4 4 (list (list 1 0 11) (list 0 2 3) (list 0 3 3))) 7 0.001)\n    (check-within (candidate 5 13 (list (list 3 1 16) (list 0 1 3) (list 0 2 19) (list 0 3 10) (list 0 4 2))) 13 0.001)\n    (check-within (candidate 4 5 (list (list 1 0 21) (list 1 0 13) (list 1 0 19) (list 2 1 15) (list 1 0 17) (list 1 0 3) (list 0 3 1))) 8 0.001)\n    (check-within (candidate 5 25 (list (list 1 0 18) (list 3 0 20) (list 2 0 17) (list 2 1 21) (list 0 4 3))) 16 0.001)\n    (check-within (candidate 5 15 (list (list 2 1 33) (list 1 0 18) (list 2 0 16) (list 3 1 37) (list 3 0 26) (list 0 4 18))) 6 0.001)\n    (check-within (candidate 4 1 (list (list 1 0 1) (list 1 0 1) (list 0 2 1) (list 0 3 1))) 8 0.001)\n    (check-within (candidate 4 10 (list (list 2 0 22) (list 2 1 6) (list 2 0 21) (list 2 1 27) (list 3 1 12))) 6 0.001)\n    (check-within (candidate 2 13 (list (list 1 0 21))) 3 0.001)\n    (check-within (candidate 4 31 (list (list 3 1 7) (list 2 1 10) (list 2 0 25) (list 2 0 27))) 9 0.001)\n    (check-within (candidate 3 17 (list (list 1 0 8) (list 1 0 8) (list 0 2 14))) 6 0.001)\n    (check-within (candidate 2 3 (list (list 1 0 3))) 4 0.001)\n    (check-within (candidate 5 5 (list (list 4 1 37) (list 4 1 7) (list 2 1 6) (list 3 2 8) (list 2 1 35) (list 1 0 28) (list 4 1 3) (list 2 1 2))) 9 0.001)\n    (check-within (candidate 4 1 (list (list 2 0 2) (list 2 0 1) (list 0 1 2) (list 0 3 2))) 6 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3218_placedCoins", "language": "rkt", "prompt": "#lang racket\n;; You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n;; You are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node.\n;; You need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as:\n;; If size of the subtree of node i is less than 3, place 1 coin.\n;; Otherwise, place an amount of coins equal to the maximum product of cost values assigned to 3 distinct nodes in the subtree of node i. If this product is negative, place 0 coins.\n;; Return an array coin of size n such that coin[i] is the number of coins placed at node i.\n;; Example 1:\n;; Input: edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]\n;; Output: [120,1,1,1,1,1]\n;; Explanation: For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them.\n;; Example 2:\n;; Input: edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]\n;; Output: [280,140,32,1,1,1,1,1,1]\n;; Explanation: The coins placed on each node are:\n;; - Place 8 * 7 * 5 = 280 coins on node 0.\n;; - Place 7 * 5 * 4 = 140 coins on node 1.\n;; - Place 8 * 2 * 2 = 32 coins on node 2.\n;; - All other nodes are leaves with subtree of size 1, place 1 coin on each of them.\n;; Example 3:\n;; Input: edges = [[0,1],[0,2]], cost = [1,2,-2]\n;; Output: [0,1,1]\n;; Explanation: Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0.\n;; Constraints:\n;; 2 <= n <= 2 * 104\n;; edges.length == n - 1\n;; edges[i].length == 2\n;; 0 <= ai, bi < n\n;; cost.length == n\n;; 1 <= |cost[i]| <= 104\n;; The input is generated such that edges represents a valid tree.\n(define (placedCoins edges cost)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3218_placedCoins.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate placedCoins))\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 0 5)) (list 1 2 3 4 5 6)) (list 120 1 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 1 3) (list 1 4) (list 1 5) (list 2 6) (list 2 7) (list 2 8)) (list 1 4 2 3 5 7 8 -4 2)) (list 280 140 32 1 1 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2)) (list 1 2 -2)) (list 0 1 1) 0.001)\n    (check-within (candidate (list (list 0 1)) (list 1 2)) (list 1 1) 0.001)\n    (check-within (candidate (list (list 0 1)) (list 2 1)) (list 1 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 0 3) (list 0 4) (list 0 5) (list 0 6) (list 0 7) (list 0 8) (list 0 9) (list 0 10) (list 0 11) (list 0 12) (list 0 13) (list 0 14) (list 0 15) (list 0 16) (list 0 17) (list 0 18) (list 0 19) (list 0 20) (list 0 21) (list 0 22) (list 0 23) (list 0 24) (list 0 25) (list 0 26) (list 0 27) (list 0 28) (list 0 29) (list 0 30) (list 0 31) (list 0 32) (list 0 33) (list 0 34) (list 0 35) (list 0 36) (list 0 37) (list 0 38) (list 0 39) (list 0 40) (list 0 41) (list 0 42) (list 0 43) (list 0 44) (list 0 45) (list 0 46) (list 0 47) (list 0 48) (list 0 49) (list 0 50) (list 0 51) (list 0 52) (list 0 53) (list 0 54) (list 0 55) (list 0 56) (list 0 57) (list 0 58) (list 0 59) (list 0 60) (list 0 61) (list 0 62) (list 0 63) (list 0 64) (list 0 65) (list 0 66) (list 0 67) (list 0 68) (list 0 69) (list 0 70) (list 0 71) (list 0 72) (list 0 73) (list 0 74) (list 0 75) (list 0 76) (list 0 77) (list 0 78) (list 0 79) (list 0 80) (list 0 81) (list 0 82) (list 0 83) (list 0 84) (list 0 85) (list 0 86) (list 0 87) (list 0 88) (list 0 89) (list 0 90) (list 0 91) (list 0 92) (list 0 93) (list 0 94) (list 0 95) (list 0 96) (list 0 97) (list 0 98) (list 0 99)) (list -5959 602 -6457 7055 -1462 6347 7226 -8422 -6088 2997 -7909 6433 5217 3294 -3792 7463 8538 -3811 5009 151 5659 4458 -1702 -1877 2799 9861 -9668 -1765 2181 -8128 7046 9529 6202 -8026 6464 1345 121 1922 7274 -1227 -9914 3025 1046 -9368 -7368 6205 -6342 8091 -6732 -7620 3276 5136 6871 4823 -1885 -4005 -3974 -2725 -3845 -8508 7201 -9566 -7236 -3386 4021 6793 -8759 5066 5879 -5171 1011 1242 8536 -8405 -9646 -214 2251 -9934 -8820 6206 1006 1318 -9712 7230 5608 -4601 9185 346 3056 8913 -2454 -3445 -4295 4802 -8852 -6121 -4538 -5580 -9246 -6462)) (list 971167251036 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 2) (list 2 3)) (list 10000 -10000 10000 -10000)) (list 1000000000000 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 2) (list 0 6) (list 1 4) (list 3 5) (list 7 6) (list 3 6) (list 1 8) (list 3 1) (list 9 3)) (list 63 13 -6 20 56 -14 61 25 -99 54)) (list 215208 0 1 77616 1 1 184464 1 1 1) 0.001)\n    (check-within (candidate (list (list 7 0) (list 4 3) (list 4 8) (list 1 5) (list 6 2) (list 2 7) (list 7 9) (list 1 8) (list 1 9)) (list 37 -48 30 -67 -84 36 -96 24 29 38)) (list 306432 202608 1 1 1 1 1 306432 163212 213864) 0.001)\n    (check-within (candidate (list (list 0 2) (list 2 7) (list 3 4) (list 5 4) (list 5 8) (list 7 6) (list 7 1) (list 8 1) (list 1 9)) (list -18 15 -82 -85 63 -89 60 63 20 18)) (list 476595 476595 476595 1 1 476595 1 476595 476595 1) 0.001)\n    (check-within (candidate (list (list 2 0) (list 1 4) (list 3 8) (list 4 9) (list 6 8) (list 7 2) (list 2 8) (list 5 2) (list 5 9)) (list -9 46 17 34 43 92 41 -50 4 76)) (list 321632 1 321632 1 1 321632 1 1 5576 150328) 0.001)\n    (check-within (candidate (list (list 0 6) (list 3 2) (list 3 1) (list 6 1) (list 8 7) (list 7 1) (list 5 1) (list 5 4) (list 9 4)) (list 86 50 10 -54 -85 -65 54 -19 39 37)) (list 475150 276250 1 1 1 204425 298350 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 8) (list 8 1) (list 9 2) (list 4 6) (list 7 4) (list 3 7) (list 3 8) (list 5 8) (list 5 9)) (list -4 83 -97 40 86 -85 -6 -84 -16 -53)) (list 709070 1 1 43344 1 0 1 43344 709070 1) 0.001)\n    (check-within (candidate (list (list 4 2) (list 1 3) (list 4 5) (list 7 5) (list 5 0) (list 8 1) (list 0 1) (list 0 6) (list 9 6)) (list -72 -18 -27 38 13 -53 43 -95 -100 -77)) (list 408500 68400 1 1 1 65455 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 2) (list 5 2) (list 1 5) (list 7 4) (list 4 8) (list 1 8) (list 1 6) (list 6 3) (list 9 3)) (list 6 93 59 -14 1 -71 -87 95 16 -12)) (list 586815 141360 586815 1 1 586815 0 1 1520 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 5 4) (list 4 2) (list 7 2) (list 7 3) (list 8 6) (list 3 6) (list 3 1) (list 9 1)) (list 66 -54 74 18 -77 -57 49 -82 -71 80)) (list 505120 505120 324786 467236 1 1 1 467236 1 1) 0.001)\n    (check-within (candidate (list (list 3 8) (list 2 4) (list 5 6) (list 6 7) (list 0 8) (list 2 0) (list 2 6) (list 1 6) (list 9 1)) (list 92 -71 -10 -70 -56 -47 69 51 100 65)) (list 634800 1 274344 1 1 1 230253 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 3) (list 2 8) (list 5 6) (list 9 5) (list 7 9) (list 8 1) (list 1 4) (list 4 3) (list 9 3)) (list -71 66 86 99 50 -29 -30 27 16 -65)) (list 561924 90816 1 561924 283800 1 1 1 1 52650) 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 7) (list 6 3) (list 0 4) (list 6 5) (list 5 8) (list 0 7) (list 9 0) (list 9 8)) (list 40 8 43 31 -27 -21 -21 55 -36 75)) (list 177375 1 1 1 1 13671 1 1 23436 56700) 0.001)\n    (check-within (candidate (list (list 9 0) (list 9 3) (list 4 5) (list 1 6) (list 1 5) (list 8 5) (list 9 7) (list 8 2) (list 2 9)) (list 64 35 -1 -28 -50 38 -77 -13 -72 35)) (list 354816 1 210672 1 1 146300 1 1 210672 210672) 0.001)\n    (check-within (candidate (list (list 5 3) (list 4 2) (list 5 2) (list 6 5) (list 5 1) (list 0 1) (list 0 8) (list 9 7) (list 9 8)) (list -100 44 -76 55 8 -8 38 26 -41 -83)) (list 456500 91960 1 1 1 33440 1 1 88478 1) 0.001)\n    (check-within (candidate (list (list 0 8) (list 9 3) (list 4 5) (list 8 5) (list 2 6) (list 7 8) (list 2 8) (list 1 2) (list 9 1)) (list 36 33 52 -24 7 -82 63 85 21 -64)) (list 446080 50688 108108 1 1 1 1 1 446080 1) 0.001)\n    (check-within (candidate (list (list 9 2) (list 1 3) (list 8 4) (list 1 5) (list 1 9) (list 8 6) (list 7 9) (list 8 0) (list 0 9)) (list -67 -82 -2 32 -97 6 -85 14 8 1)) (list 263840 0 1 1 1 1 1 1 65960 5248) 0.001)\n    (check-within (candidate (list (list 7 0) (list 3 1) (list 7 3) (list 4 8) (list 8 5) (list 7 6) (list 2 6) (list 2 9) (list 8 9)) (list -48 -69 -25 -65 65 51 85 34 17 -28)) (list 381225 1 56355 1 1 1 281775 381225 56355 56355) 0.001)\n    (check-within (candidate (list (list 4 2) (list 7 2) (list 3 5) (list 6 3) (list 3 0) (list 7 0) (list 1 8) (list 1 0) (list 9 0)) (list -14 39 40 -76 -69 66 43 82 -66 -45)) (list 430008 1 1 0 1 1 1 0 1 1) 0.001)\n    (check-within (candidate (list (list 1 9) (list 3 7) (list 0 6) (list 7 0) (list 8 5) (list 2 5) (list 4 2) (list 4 0) (list 0 9)) (list 34 -87 -34 87 58 76 5 43 14 -45)) (list 383496 1 0 1 61712 1 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 7 1) (list 2 7) (list 4 3) (list 9 5) (list 6 7) (list 3 6) (list 8 3) (list 0 3) (list 0 9)) (list -9 67 10 -67 91 29 -4 -35 60 -84)) (list 512148 1 1 365820 1 1 9380 0 1 1) 0.001)\n    (check-within (candidate (list (list 2 3) (list 3 6) (list 3 7) (list 8 5) (list 1 5) (list 4 1) (list 4 0) (list 0 3) (list 9 3)) (list 88 -73 8 -82 64 -14 56 -82 -2 -89)) (list 642224 0 1 408688 65408 1 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 8 4) (list 7 3) (list 3 0) (list 0 6) (list 6 8) (list 8 2) (list 5 2) (list 1 5) (list 1 9)) (list -50 34 51 -69 -28 72 61 -76 -30 76)) (list 398544 1 279072 1 1 186048 333792 1 279072 1) 0.001)\n    (check-within (candidate (list (list 5 0) (list 1 6) (list 7 2) (list 4 9) (list 3 5) (list 3 7) (list 8 7) (list 6 7) (list 6 9)) (list -75 -39 -30 -69 84 -7 98 92 -42 -51)) (list 757344 1 1 757344 1 757344 194922 757344 1 1) 0.001)\n    (check-within (candidate (list (list 0 8) (list 2 5) (list 3 5) (list 1 6) (list 4 1) (list 8 4) (list 7 8) (list 8 5) (list 9 5)) (list 81 -76 -61 1 39 -3 -21 -33 42 -78)) (list 480168 1 1 1 62244 4758 1 1 248976 1) 0.001)\n    (check-within (candidate (list (list 7 1) (list 0 2) (list 0 3) (list 6 5) (list 6 0) (list 0 7) (list 7 4) (list 9 4) (list 8 9)) (list -37 -11 71 -57 -2 -78 87 55 -21 -66)) (list 447876 1 1 1 0 1 1 76230 1 1) 0.001)\n    (check-within (candidate (list (list 0 9) (list 8 2) (list 3 7) (list 6 4) (list 1 5) (list 8 1) (list 6 8) (list 6 7) (list 7 9)) (list 61 -53 -97 -86 -91 -32 -8 79 100 75)) (list 882700 1 1 1 1 1 882700 882700 514100 882700) 0.001)\n    (check-within (candidate (list (list 8 3) (list 4 6) (list 2 5) (list 2 1) (list 6 8) (list 8 0) (list 0 7) (list 1 7) (list 1 9)) (list -40 -4 60 -47 35 39 -8 -12 -29 -43)) (list 121260 10320 1 1 1 1 1 30960 47705 1) 0.001)\n    (check-within (candidate (list (list 3 0) (list 1 7) (list 6 3) (list 7 5) (list 4 5) (list 4 6) (list 6 9) (list 2 8) (list 9 2)) (list 36 84 5 32 -36 86 -35 58 36 -100)) (list 418992 1 1 418992 418992 418992 418992 1 1 0) 0.001)\n    (check-within (candidate (list (list 1 0) (list 3 0) (list 2 5) (list 3 5) (list 6 4) (list 4 9) (list 7 3) (list 8 3) (list 3 9)) (list 39 22 -9 -65 9 -53 83 -94 -34 12)) (list 507130 1 1 507130 1 1 1 1 1 8964) 0.001)\n    (check-within (candidate (list (list 2 0) (list 7 0) (list 4 3) (list 5 8) (list 7 9) (list 8 1) (list 3 1) (list 3 6) (list 9 6)) (list -68 1 -68 65 -45 -26 36 -3 -85 40)) (list 375700 2210 1 248625 1 1 248625 248625 1 248625) 0.001)\n    (check-within (candidate (list (list 4 0) (list 7 2) (list 2 6) (list 8 6) (list 5 6) (list 4 5) (list 4 3) (list 1 3) (list 1 9)) (list -45 26 -26 -34 -33 81 -33 55 -87 52)) (list 317115 1 1 0 239598 232551 157905 1 1 1) 0.001)\n    (check-within (candidate (list (list 2 1) (list 0 1) (list 6 3) (list 5 4) (list 6 5) (list 0 6) (list 9 0) (list 8 7) (list 9 7)) (list 94 76 -92 61 27 78 -94 39 -12 77)) (list 812912 1 1 1 1 1 128466 1 1 0) 0.001)\n    (check-within (candidate (list (list 8 0) (list 3 2) (list 6 2) (list 1 2) (list 1 5) (list 4 7) (list 9 4) (list 8 5) (list 9 5)) (list -6 -89 62 -82 -78 97 -71 58 -43 12)) (list 707906 452476 360964 1 1 707906 1 1 707906 0) 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 4 0) (list 4 3) (list 4 6) (list 6 5) (list 7 5) (list 7 8) (list 9 8)) (list -35 4 -1 -44 -27 -93 10 55 -14 93)) (list 380556 1 1 1 380556 121086 121086 0 1 1) 0.001)\n    (check-within (candidate (list (list 0 6) (list 1 5) (list 8 2) (list 8 3) (list 9 6) (list 4 7) (list 5 8) (list 5 4) (list 4 9)) (list 26 22 32 -27 54 44 -58 -88 79 -77)) (list 535304 1 1 1 187704 111232 535304 1 0 535304) 0.001)\n    (check-within (candidate (list (list 7 2) (list 3 1) (list 5 1) (list 8 5) (list 6 9) (list 7 0) (list 0 4) (list 4 8) (list 9 4)) (list -70 -80 17 23 19 -71 84 -52 -21 -44)) (list 477120 1 1 1 477120 130640 1 1 130640 1) 0.001)\n    (check-within (candidate (list (list 2 1) (list 3 6) (list 0 6) (list 7 2) (list 5 2) (list 5 4) (list 4 0) (list 0 8) (list 9 0)) (list -27 11 -5 22 -81 48 -28 -85 85 -44)) (list 585225 1 4675 1 330480 20400 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 8 1) (list 2 5) (list 4 3) (list 8 5) (list 5 6) (list 6 3) (list 0 3) (list 7 0) (list 9 7)) (list 79 -73 75 -96 61 87 -74 69 84 41)) (list 618048 1 1 618048 1 548100 548100 1 1 1) 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0) (list 3 0) (list 4 0) (list 0 7) (list 8 0) (list 8 6) (list 5 6) (list 5 9)) (list -97 -61 -67 60 -75 -85 -21 75 -89 59)) (list 647475 1 1 1 1 1 105315 1 446335 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 0 4) (list 9 3) (list 9 4) (list 5 2) (list 2 7) (list 6 8) (list 8 7) (list 8 9)) (list -88 -7 -16 -49 -53 46 -19 38 -2 -12)) (list 214544 1 1 1 119462 1 1 0 13984 42826) 0.001)\n    (check-within (candidate (list (list 2 0) (list 4 6) (list 4 5) (list 1 5) (list 3 1) (list 3 2) (list 2 7) (list 8 7) (list 7 9)) (list -71 -13 56 3 95 74 79 81 -50 -24)) (list 607905 555370 607905 555370 1 555370 1 97200 1 1) 0.001)\n    (check-within (candidate (list (list 3 2) (list 7 3) (list 4 8) (list 1 5) (list 6 7) (list 0 7) (list 8 1) (list 0 1) (list 9 0)) (list 25 -2 22 -40 -53 -17 -97 -49 29 36)) (list 185076 26129 1 1 1 1 1 104566 1 1) 0.001)\n    (check-within (candidate (list (list 1 8) (list 2 6) (list 7 2) (list 7 3) (list 8 3) (list 8 4) (list 5 4) (list 5 0) (list 9 0)) (list -54 -16 51 -79 73 -83 -54 5 45 14)) (list 478661 1 1 217566 311418 478661 1 0 217566 1) 0.001)\n    (check-within (candidate (list (list 3 1) (list 4 0) (list 1 5) (list 6 1) (list 6 0) (list 9 7) (list 0 8) (list 0 2) (list 2 9)) (list 23 -50 -5 -36 -49 49 39 -82 -8 81)) (list 332100 88200 33210 1 1 1 88200 1 1 1) 0.001)\n    (check-within (candidate (list (list 0 7) (list 8 1) (list 5 7) (list 8 2) (list 2 3) (list 3 7) (list 4 7) (list 4 6) (list 6 9)) (list -12 -83 -3 -43 12 48 -46 19 -92 69)) (list 526884 1 0 0 0 1 1 526884 1 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 5) (list 7 2) (list 7 6) (list 1 8) (list 1 3) (list 3 7) (list 4 7) (list 9 4)) (list 56 61 -17 -3 -100 -28 81 42 1 -86)) (list 696600 696600 1 696600 1 1 1 696600 1 1) 0.001)\n    (check-within (candidate (list (list 0 3) (list 8 1) (list 3 6) (list 5 3) (list 2 8) (list 4 2) (list 4 7) (list 7 5) (list 5 9)) (list -42 72 54 -46 57 95 94 21 -19 -92)) (list 642960 1 0 642960 221616 389880 1 221616 1 1) 0.001)\n    (check-within (candidate (list (list 2 0) (list 2 4) (list 6 5) (list 8 6) (list 3 7) (list 3 1) (list 1 8) (list 2 1) (list 2 9)) (list -58 -82 -70 33 20 -40 21 -93 18 -6)) (list 251658 251658 251658 1 1 1 1 1 0 1) 0.001)\n    (check-within (candidate (list (list 1 5) (list 3 0) (list 0 2) (list 2 4) (list 5 2) (list 7 2) (list 6 7) (list 8 7) (list 7 9)) (list -96 -98 41 59 -69 -51 -78 43 -40 -8)) (list 555072 1 328692 1 1 1 1 134160 1 1) 0.001)\n    (check-within (candidate (list (list 0 4) (list 1 4) (list 3 6) (list 5 7) (list 4 6) (list 7 2) (list 4 2) (list 4 9) (list 9 8)) (list -98 -100 -37 62 38 -54 56 56 1 -72)) (list 607600 1 111888 1 446400 1 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 8 0) (list 4 3) (list 6 3) (list 5 7) (list 6 8) (list 8 2) (list 1 2) (list 7 1) (list 9 7)) (list -70 -59 -87 -64 56 -15 -62 -48 -58 -85)) (list 414120 0 0 1 1 1 222208 0 414120 1) 0.001)\n    (check-within (candidate (list (list 3 0) (list 1 8) (list 6 2) (list 5 3) (list 4 5) (list 8 4) (list 7 8) (list 8 6) (list 6 9)) (list -56 -14 -44 -2 31 34 -61 53 -39 -21)) (list 181048 1 1 142252 142252 142252 0 1 142252 1) 0.001)\n    (check-within (candidate (list (list 2 1) (list 1 3) (list 5 8) (list 9 6) (list 8 1) (list 1 4) (list 4 0) (list 7 0) (list 7 9)) (list -18 -10 25 -60 -48 4 14 38 26 16)) (list 109440 15600 1 1 74880 1 1 8512 1 1) 0.001)\n    (check-within (candidate (list (list 0 2) (list 2 5) (list 3 4) (list 5 3) (list 6 8) (list 7 1) (list 5 1) (list 5 9) (list 8 9)) (list 46 96 34 76 19 29 -36 48 -71 -45)) (list 350208 1 350208 1 1 350208 1 1 1 0) 0.001)\n    (check-within (candidate (list (list 0 2) (list 7 2) (list 3 4) (list 4 7) (list 5 1) (list 6 1) (list 7 6) (list 9 6) (list 8 9)) (list 4 70 65 -34 -59 -70 -83 -21 66 -10)) (list 406700 1 406700 1 1 1 406700 406700 1 1) 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 3) (list 5 2) (list 9 2) (list 6 9) (list 9 7) (list 1 8) (list 4 1) (list 9 4)) (list 54 72 -52 45 -62 96 -54 28 -76 86)) (list 594432 594432 0 1 371520 1 1 1 1 371520) 0.001)\n    (check-within (candidate (list (list 1 0) (list 0 4) (list 3 5) (list 6 7) (list 6 3) (list 3 8) (list 8 0) (list 0 2) (list 9 2)) (list -98 -85 82 -30 64 -76 36 -54 84 85)) (list 708050 1 1 147744 1 1 1 1 344736 1) 0.001)\n    (check-within (candidate (list (list 0 8) (list 2 6) (list 4 7) (list 5 1) (list 1 9) (list 3 7) (list 3 8) (list 6 8) (list 9 6)) (list 60 -76 -76 38 -5 -33 -80 -36 28 63)) (list 383040 1 1 6840 1 1 383040 1 383040 158004) 0.001)\n    (check-within (candidate (list (list 5 3) (list 6 5) (list 7 6) (list 6 2) (list 2 1) (list 0 1) (list 0 9) (list 4 8) (list 4 9)) (list -56 -92 -10 -70 52 22 43 37 88 48)) (list 566720 276920 35002 1 1 1 35002 1 1 219648) 0.001)\n    (check-within (candidate (list (list 8 2) (list 9 4) (list 1 7) (list 3 1) (list 3 5) (list 5 8) (list 5 0) (list 0 6) (list 9 6)) (list -70 17 -31 41 -93 17 -19 21 -66 -29)) (list 266910 1 1 14637 1 83886 0 1 1 1) 0.001)\n    (check-within (candidate (list (list 8 1) (list 2 4) (list 7 3) (list 2 3) (list 2 6) (list 6 5) (list 0 5) (list 0 8) (list 9 8)) (list 88 86 55 -61 3 -70 12 44 -92 -72)) (list 582912 1 7260 1 1 234850 29040 1 569664 1) 0.001)\n    (check-within (candidate (list (list 0 7) (list 1 3) (list 1 6) (list 4 2) (list 6 2) (list 5 6) (list 5 9) (list 7 8) (list 9 8)) (list 15 78 -48 58 -27 28 60 -9 -64 -71)) (list 354432 1 1 1 1 271440 271440 354432 354432 271440) 0.001)\n    (check-within (candidate (list (list 4 0) (list 8 0) (list 5 6) (list 8 6) (list 6 1) (list 7 1) (list 3 7) (list 2 3) (list 9 2)) (list 14 10 10 -73 -43 19 92 62 16 -27)) (list 288788 122202 1 19710 1 1 181332 122202 181332 1) 0.001)\n    (check-within (candidate (list (list 8 0) (list 3 1) (list 1 2) (list 8 5) (list 6 7) (list 4 7) (list 9 4) (list 2 8) (list 2 9)) (list 97 35 -74 5 65 5 86 61 -55 53)) (list 542230 1 340990 1 340990 1 1 1 350020 340990) 0.001)\n    (check-within (candidate (list (list 0 1) (list 7 0) (list 8 2) (list 3 4) (list 4 7) (list 4 8) (list 4 6) (list 5 6) (list 9 5)) (list -74 40 73 -97 -62 9 -96 -98 -38 63)) (list 693938 1 1 1 679776 1 0 693938 1 1) 0.001)\n    (check-within (candidate (list (list 2 3) (list 0 3) (list 0 6) (list 6 5) (list 7 1) (list 1 5) (list 8 5) (list 4 5) (list 9 4)) (list 4 -30 59 61 78 -22 -24 85 -19 -89)) (list 404430 1 1 1 1 226950 226950 1 1 1) 0.001)\n    (check-within (candidate (list (list 1 2) (list 5 4) (list 5 6) (list 7 1) (list 3 1) (list 3 5) (list 5 8) (list 0 5) (list 0 9)) (list 11 -80 95 64 -76 56 61 22 13 -58)) (list 577600 0 1 133760 1 577600 1 1 1 1) 0.001)\n    (check-within (candidate (list (list 1 9) (list 2 7) (list 3 5) (list 4 3) (list 0 4) (list 0 6) (list 8 0) (list 7 0) (list 9 7)) (list -69 18 -39 -59 -48 -65 97 1 74 -63)) (list 435045 1 1 1 0 1 1 44226 1 1) 0.001)\n    (check-within (candidate (list (list 0 6) (list 1 4) (list 5 4) (list 6 8) (list 3 8) (list 5 3) (list 5 2) (list 7 2) (list 9 7)) (list -84 27 16 75 49 4 72 46 -17 48)) (list 264600 1 35328 176400 1 108192 264600 1 176400 1) 0.001)\n    (check-within (candidate (list (list 0 9) (list 1 7) (list 6 3) (list 8 7) (list 7 3) (list 5 3) (list 2 5) (list 2 4) (list 4 9)) (list 1 -53 88 -67 -55 -31 -89 -39 21 -96)) (list 751872 1 524744 125223 524744 125223 1 43407 1 751872) 0.001)\n    (check-within (candidate (list (list 3 6) (list 0 6) (list 8 0) (list 7 4) (list 4 1) (list 2 1) (list 2 9) (list 8 5) (list 9 5)) (list 78 -10 -51 -50 -55 -72 -7 31 -94 4)) (list 527904 17050 86955 1 1 122760 1 1 209808 86955) 0.001)\n    (check-within (candidate (list (list 2 5) (list 4 7) (list 4 5) (list 5 3) (list 3 6) (list 6 0) (list 1 0) (list 8 1) (list 9 8)) (list -19 93 -23 -86 54 -70 -70 9 69 13)) (list 559860 83421 1 325080 1 86940 325080 1 1 1) 0.001)\n    (check-within (candidate (list (list 2 7) (list 3 9) (list 7 5) (list 4 5) (list 4 1) (list 6 1) (list 6 0) (list 8 0) (list 0 9)) (list 45 -53 -16 -26 99 50 33 -57 -97 74)) (list 547371 299079 1 1 90288 45600 299079 1 1 1) 0.001)\n    (check-within (candidate (list (list 5 0) (list 9 1) (list 3 6) (list 2 4) (list 2 6) (list 6 9) (list 8 7) (list 7 5) (list 5 9)) (list -14 -4 -49 52 -45 77 -17 -79 21 -33)) (list 298067 1 1 1 1 298067 114660 1 1 114660) 0.001)\n    (check-within (candidate (list (list 6 3) (list 7 0) (list 2 0) (list 2 4) (list 9 4) (list 1 8) (list 1 6) (list 5 6) (list 9 5)) (list -58 -55 17 68 37 -32 91 -63 79 69)) (list 496041 1 496041 1 496041 488852 488852 1 1 496041) 0.001)\n    (check-within (candidate (list (list 1 8) (list 0 3) (list 2 4) (list 0 2) (list 8 5) (list 0 5) (list 7 0) (list 7 6) (list 9 6)) (list -8 -99 36 31 94 5 -35 54 33 19)) (list 325710 1 1 1 1 0 1 0 1 1) 0.001)\n    (check-within (candidate (list (list 1 0) (list 1 7) (list 3 4) (list 4 5) (list 5 6) (list 7 5) (list 5 2) (list 8 2) (list 2 9)) (list 70 -75 -13 30 -87 20 -67 76 20 -30)) (list 495900 495900 7800 1 1 174870 1 443004 1 1) 0.001)\n    (check-within (candidate (list (list 5 1) (list 2 1) (list 0 2) (list 6 0) (list 0 3) (list 3 7) (list 9 7) (list 4 8) (list 9 4)) (list -10 -31 -7 -77 64 -80 -53 37 1 10)) (list 394240 1 0 23680 1 1 1 23680 1 640) 0.001)\n    (check-within (candidate (list (list 2 0) (list 1 2) (list 2 8) (list 4 3) (list 4 7) (list 5 9) (list 6 9) (list 8 7) (list 7 9)) (list -80 77 -18 -72 11 66 82 80 32 61)) (list 505120 1 505120 1 1 1 1 432960 432960 330132) 0.001)\n    (check-within (candidate (list (list 0 3) (list 1 0) (list 1 8) (list 5 4) (list 9 6) (list 7 4) (list 9 4) (list 8 2) (list 9 2)) (list 70 -14 -91 98 -12 30 -24 79 -62 11)) (list 552916 445718 172536 1 0 1 1 1 445718 26070) 0.001)\n    (check-within (candidate (list (list 5 8) (list 2 6) (list 2 0) (list 0 3) (list 7 8) (list 8 4) (list 3 4) (list 1 3) (list 1 9)) (list 55 69 29 87 27 -35 -83 71 -82 -8)) (list 592122 1 1 426213 203770 1 1 1 203770 1) 0.001)\n    (check-within (candidate (list (list 1 9) (list 5 4) (list 5 3) (list 6 3) (list 6 2) (list 2 8) (list 0 7) (list 0 9) (list 8 9)) (list -25 28 47 -75 -78 -39 23 93 -20 61)) (list 544050 1 274950 0 1 1 134550 1 274950 356850) 0.001)\n    (check-within (candidate (list (list 5 0) (list 1 8) (list 6 4) (list 4 9) (list 7 3) (list 8 5) (list 3 5) (list 3 2) (list 9 2)) (list -11 -91 -54 53 58 16 -60 85 20 51)) (list 464100 1 187920 275400 1 464100 1 1 1 0) 0.001)\n    (check-within (candidate (list (list 1 3) (list 1 4) (list 2 4) (list 6 5) (list 7 5) (list 0 5) (list 9 0) (list 8 2) (list 9 2)) (list -74 26 99 58 42 -55 -1 -56 29 -35)) (list 410256 1 241164 1 63336 0 1 1 1 241164) 0.001)\n    (check-within (candidate (list (list 2 5) (list 5 3) (list 0 4) (list 5 9) (list 6 1) (list 7 1) (list 7 0) (list 0 9) (list 8 9)) (list 72 68 -18 95 87 -58 -55 20 40 2)) (list 595080 1 1 1 1 99180 1 0 1 99180) 0.001)\n    (check-within (candidate (list (list 1 6) (list 3 2) (list 9 3) (list 6 5) (list 5 9) (list 7 0) (list 4 8) (list 0 4) (list 0 9)) (list 85 19 -56 -71 41 -72 59 30 55 67)) (list 434520 1 1 1 1 0 1 1 1 342504) 0.001)\n    (check-within (candidate (list (list 2 1) (list 7 1) (list 0 3) (list 8 4) (list 0 5) (list 7 6) (list 0 6) (list 8 0) (list 9 8)) (list 13 4 84 36 29 -97 -59 -40 77 41)) (list 480732 1 1 1 1 1 198240 0 91553 1) 0.001)\n    (check-within (candidate (list (list 2 1) (list 4 5) (list 6 3) (list 1 3) (list 1 0) (list 7 0) (list 8 7) (list 5 8) (list 9 5)) (list 85 64 -67 -60 5 -14 31 -84 47 -36)) (list 478380 257280 1 1 1 2520 1 142128 23688 1) 0.001)\n    (check-within (candidate (list (list 6 1) (list 4 2) (list 7 4) (list 5 7) (list 0 8) (list 6 0) (list 3 6) (list 7 3) (list 7 9)) (list -51 -55 82 25 -53 13 -15 98 39 29)) (list 313404 1 1 233044 1 1 285670 233044 1 1) 0.001)\n    (check-within (candidate (list (list 0 2) (list 5 1) (list 6 2) (list 7 3) (list 5 4) (list 5 9) (list 6 9) (list 7 9) (list 8 9)) (list -96 -75 -58 26 -73 -25 -9 87 57 3)) (list 626400 1 476325 1 1 0 476325 1 1 476325) 0.001)\n    (check-within (candidate (list (list 0 4) (list 0 9) (list 5 1) (list 2 6) (list 3 7) (list 3 8) (list 1 8) (list 1 2) (list 2 9)) (list -58 20 21 77 -96 53 -77 -66 -32 42)) (list 569184 162624 391314 1 1 1 1 1 162624 391314) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 2) (list 6 3) (list 3 0) (list 7 5) (list 8 5) (list 1 8) (list 1 0) (list 0 9)) (list -59 -25 -25 -78 22 29 9 -12 -11 -5)) (list 133458 18125 1 1 1 8700 1 1 8700 1) 0.001)\n    (check-within (candidate (list (list 8 1) (list 3 2) (list 5 4) (list 6 3) (list 0 3) (list 8 5) (list 5 7) (list 7 0) (list 9 0)) (list 86 -87 -96 -74 51 75 -76 74 -2 -60)) (list 718272 1 1 0 1 13050 1 283050 1 1) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3219_lexicographicallySmallestArray", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of positive integers nums and a positive integer limit.\n;; In one operation, you can choose any two indices i and j and swap nums[i] and nums[j] if |nums[i] - nums[j]| <= limit.\n;; Return the lexicographically smallest array that can be obtained by performing the operation any number of times.\n;; An array a is lexicographically smaller than an array b if in the first position where a and b differ, array a has an element that is less than the corresponding element in b. For example, the array [2,10,3] is lexicographically smaller than the array [10,2,3] because they differ at index 0 and 2 < 10.\n;; Example 1:\n;; Input: nums = [1,5,3,9,8], limit = 2\n;; Output: [1,3,5,8,9]\n;; Explanation: Apply the operation 2 times:\n;; - Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]\n;; - Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]\n;; We cannot obtain a lexicographically smaller array by applying any more operations.\n;; Note that it may be possible to get the same result by doing different operations.\n;; Example 2:\n;; Input: nums = [1,7,6,18,2,1], limit = 3\n;; Output: [1,6,7,18,1,2]\n;; Explanation: Apply the operation 3 times:\n;; - Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]\n;; - Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]\n;; - Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]\n;; We cannot obtain a lexicographically smaller array by applying any more operations.\n;; Example 3:\n;; Input: nums = [1,7,28,19,10], limit = 3\n;; Output: [1,7,28,19,10]\n;; Explanation: [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 109\n;; 1 <= limit <= 109\n(define (lexicographicallySmallestArray nums limit)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3219_lexicographicallySmallestArray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lexicographicallySmallestArray))\n    (check-within (candidate (list 1 5 3 9 8) 2) (list 1 3 5 8 9) 0.001)\n    (check-within (candidate (list 1 7 6 18 2 1) 3) (list 1 6 7 18 1 2) 0.001)\n    (check-within (candidate (list 1 7 28 19 10) 3) (list 1 7 28 19 10) 0.001)\n    (check-within (candidate (list 1000000000) 1) (list 1000000000) 0.001)\n    (check-within (candidate (list 1 60 34 84 62 56 39 76 49 38) 4) (list 1 56 34 84 60 62 38 76 49 39) 0.001)\n    (check-within (candidate (list 1 81 10 79 36 2 87 12 20 77) 7) (list 1 77 10 79 36 2 81 12 20 87) 0.001)\n    (check-within (candidate (list 2 71 5 87 11 15 70 70 14 38) 14) (list 2 70 5 87 11 14 70 71 15 38) 0.001)\n    (check-within (candidate (list 4 3 23 84 34 88 44 44 18 15) 3) (list 3 4 23 84 34 88 44 44 15 18) 0.001)\n    (check-within (candidate (list 4 34 29 73 51 11 8 53 98 47) 10) (list 4 29 34 73 47 8 11 51 98 53) 0.001)\n    (check-within (candidate (list 4 52 38 59 71 27 31 83 88 10) 14) (list 4 27 31 38 52 59 71 83 88 10) 0.001)\n    (check-within (candidate (list 4 68 8 10 70 62 27 5 42 61) 11) (list 4 61 5 8 62 68 27 10 42 70) 0.001)\n    (check-within (candidate (list 5 9 35 60 73 91 61 57 87 76) 11) (list 5 9 35 57 73 76 60 61 87 91) 0.001)\n    (check-within (candidate (list 5 15 68 47 49 67 9 6 35 14) 4) (list 5 14 67 47 49 68 6 9 35 15) 0.001)\n    (check-within (candidate (list 5 16 43 15 66 21 58 74 55 66) 9) (list 5 15 43 16 55 21 58 66 66 74) 0.001)\n    (check-within (candidate (list 5 30 92 4 31 2 17 39 15 7) 3) (list 2 30 92 4 31 5 15 39 17 7) 0.001)\n    (check-within (candidate (list 5 38 68 80 64 79 50 5 8 95) 7) (list 5 38 64 79 68 80 50 5 8 95) 0.001)\n    (check-within (candidate (list 5 100 44 45 16 30 14 65 83 64) 15) (list 5 100 14 16 30 44 45 64 83 65) 0.001)\n    (check-within (candidate (list 6 57 100 67 4 63 47 59 21 66) 8) (list 4 57 100 59 6 63 47 66 21 67) 0.001)\n    (check-within (candidate (list 6 70 90 1 33 81 60 80 68 44) 7) (list 1 68 90 6 33 80 60 81 70 44) 0.001)\n    (check-within (candidate (list 6 74 74 74 30 70 91 74 76 41) 1) (list 6 74 74 74 30 70 91 74 76 41) 0.001)\n    (check-within (candidate (list 6 77 68 15 3 98 56 22 81 72) 2) (list 6 77 68 15 3 98 56 22 81 72) 0.001)\n    (check-within (candidate (list 7 17 79 29 29 83 21 12 5 1) 10) (list 1 5 79 7 12 83 17 21 29 29) 0.001)\n    (check-within (candidate (list 7 66 85 9 29 1 25 69 57 95) 13) (list 1 57 85 7 25 9 29 66 69 95) 0.001)\n    (check-within (candidate (list 7 73 1 97 13 55 74 29 76 19) 14) (list 1 73 7 97 13 55 74 19 76 29) 0.001)\n    (check-within (candidate (list 8 4 47 23 73 79 63 62 35 51) 11) (list 4 8 47 23 51 62 63 73 35 79) 0.001)\n    (check-within (candidate (list 8 17 20 100 59 98 64 78 64 53) 1) (list 8 17 20 100 59 98 64 78 64 53) 0.001)\n    (check-within (candidate (list 8 70 99 5 49 27 79 2 57 49) 14) (list 2 49 99 5 49 27 57 8 70 79) 0.001)\n    (check-within (candidate (list 9 67 94 37 5 90 43 13 27 21) 11) (list 5 67 90 9 13 94 21 27 37 43) 0.001)\n    (check-within (candidate (list 10 22 17 76 6 64 51 60 65 37) 9) (list 6 10 17 76 22 51 60 64 65 37) 0.001)\n    (check-within (candidate (list 10 34 63 88 76 30 70 80 52 13) 7) (list 10 30 63 88 70 34 76 80 52 13) 0.001)\n    (check-within (candidate (list 10 69 4 28 15 30 23 53 41 93) 9) (list 4 69 10 15 23 28 30 53 41 93) 0.001)\n    (check-within (candidate (list 12 86 98 73 64 77 30 76 46 69) 4) (list 12 86 98 69 64 73 30 76 46 77) 0.001)\n    (check-within (candidate (list 13 43 32 15 45 69 58 89 64 76) 12) (list 13 32 43 15 45 58 64 89 69 76) 0.001)\n    (check-within (candidate (list 13 70 11 74 73 21 4 45 95 38) 9) (list 4 70 11 73 74 13 21 38 95 45) 0.001)\n    (check-within (candidate (list 14 15 53 11 38 18 27 69 55 2) 13) (list 2 11 53 14 15 18 27 69 55 38) 0.001)\n    (check-within (candidate (list 14 28 61 49 10 25 80 83 42 100) 3) (list 14 25 61 49 10 28 80 83 42 100) 0.001)\n    (check-within (candidate (list 14 71 7 77 99 90 20 81 100 65) 7) (list 7 65 14 71 99 90 20 77 100 81) 0.001)\n    (check-within (candidate (list 14 95 75 100 33 98 88 2 74 26) 1) (list 14 95 74 100 33 98 88 2 75 26) 0.001)\n    (check-within (candidate (list 15 29 16 37 10 70 58 5 33 76) 8) (list 5 29 10 33 15 70 58 16 37 76) 0.001)\n    (check-within (candidate (list 15 33 1 74 47 6 60 95 78 72) 7) (list 15 33 1 72 47 6 60 95 74 78) 0.001)\n    (check-within (candidate (list 16 20 79 92 17 7 70 41 54 18) 6) (list 16 17 79 92 18 7 70 41 54 20) 0.001)\n    (check-within (candidate (list 16 43 19 36 99 15 70 89 45 71) 4) (list 15 43 16 36 99 19 70 89 45 71) 0.001)\n    (check-within (candidate (list 17 99 88 73 13 1 3 5 55 4) 15) (list 1 73 88 99 3 4 5 13 55 17) 0.001)\n    (check-within (candidate (list 18 97 57 1 23 36 77 80 47 91) 10) (list 18 91 47 1 23 36 77 80 57 97) 0.001)\n    (check-within (candidate (list 19 25 49 96 35 69 81 81 51 50) 12) (list 19 25 49 96 35 69 81 81 50 51) 0.001)\n    (check-within (candidate (list 19 37 12 11 70 99 88 36 64 9) 3) (list 19 36 9 11 70 99 88 37 64 12) 0.001)\n    (check-within (candidate (list 19 64 26 5 70 10 17 66 51 36) 13) (list 5 51 10 17 64 19 26 66 70 36) 0.001)\n    (check-within (candidate (list 21 14 21 34 4 88 39 62 30 20) 12) (list 4 14 20 21 21 88 30 62 34 39) 0.001)\n    (check-within (candidate (list 22 94 100 54 97 14 100 48 41 35) 6) (list 22 94 97 48 100 14 100 54 35 41) 0.001)\n    (check-within (candidate (list 23 50 8 48 62 26 92 5 96 9) 13) (list 23 48 5 50 62 26 92 8 96 9) 0.001)\n    (check-within (candidate (list 25 47 34 69 36 91 14 44 37 2) 1) (list 25 47 34 69 36 91 14 44 37 2) 0.001)\n    (check-within (candidate (list 25 58 36 16 42 57 17 96 10 2) 13) (list 2 57 10 16 17 58 25 96 36 42) 0.001)\n    (check-within (candidate (list 26 21 9 15 94 47 52 86 89 7) 9) (list 7 9 15 21 86 47 52 89 94 26) 0.001)\n    (check-within (candidate (list 27 26 24 2 95 90 41 14 20 35) 2) (list 24 26 27 2 95 90 41 14 20 35) 0.001)\n    (check-within (candidate (list 27 56 68 41 39 80 60 36 24 5) 13) (list 24 56 60 27 36 68 80 39 41 5) 0.001)\n    (check-within (candidate (list 27 71 52 71 68 2 49 37 34 97) 8) (list 27 68 49 71 71 2 52 34 37 97) 0.001)\n    (check-within (candidate (list 29 82 25 91 17 9 38 25 29 68) 7) (list 25 82 25 91 17 9 38 29 29 68) 0.001)\n    (check-within (candidate (list 30 48 76 86 21 1 55 49 90 9) 2) (list 30 48 76 86 21 1 55 49 90 9) 0.001)\n    (check-within (candidate (list 31 10 64 15 60 32 88 79 79 33) 2) (list 31 10 64 15 60 32 88 79 79 33) 0.001)\n    (check-within (candidate (list 32 70 43 51 40 73 56 39 75 45) 8) (list 32 70 39 40 43 73 45 51 75 56) 0.001)\n    (check-within (candidate (list 32 95 51 87 29 43 21 55 45 84) 2) (list 32 95 51 87 29 43 21 55 45 84) 0.001)\n    (check-within (candidate (list 33 25 25 65 82 71 56 82 13 46) 14) (list 13 25 25 33 46 56 65 71 82 82) 0.001)\n    (check-within (candidate (list 33 37 77 41 83 75 96 97 4 60) 15) (list 33 37 60 41 75 77 83 96 4 97) 0.001)\n    (check-within (candidate (list 35 81 18 79 47 53 20 2 98 22) 2) (list 35 79 18 81 47 53 20 2 98 22) 0.001)\n    (check-within (candidate (list 36 39 100 4 44 33 65 11 15 35) 10) (list 33 35 100 4 36 39 65 11 15 44) 0.001)\n    (check-within (candidate (list 38 56 60 98 21 15 70 37 24 61) 15) (list 15 56 60 98 21 24 61 37 38 70) 0.001)\n    (check-within (candidate (list 39 36 18 39 99 51 68 92 5 38) 4) (list 36 38 18 39 99 51 68 92 5 39) 0.001)\n    (check-within (candidate (list 39 89 81 37 67 37 98 89 49 47) 12) (list 37 81 89 37 67 39 89 98 47 49) 0.001)\n    (check-within (candidate (list 40 67 99 53 95 47 59 99 64 44) 7) (list 40 44 95 47 99 53 59 99 64 67) 0.001)\n    (check-within (candidate (list 40 97 72 48 55 91 83 82 91 63) 11) (list 40 48 55 63 72 82 83 91 91 97) 0.001)\n    (check-within (candidate (list 41 10 22 43 17 38 67 7 68 70) 7) (list 38 7 10 41 17 43 67 22 68 70) 0.001)\n    (check-within (candidate (list 41 25 83 44 39 37 67 33 58 5) 1) (list 41 25 83 44 39 37 67 33 58 5) 0.001)\n    (check-within (candidate (list 41 87 34 74 77 62 18 28 5 8) 1) (list 41 87 34 74 77 62 18 28 5 8) 0.001)\n    (check-within (candidate (list 45 1 66 44 45 74 75 96 31 47) 2) (list 44 1 66 45 45 74 75 96 31 47) 0.001)\n    (check-within (candidate (list 45 64 77 71 73 6 24 55 82 25) 3) (list 45 64 77 71 73 6 24 55 82 25) 0.001)\n    (check-within (candidate (list 46 72 1 33 1 51 78 96 44 20) 1) (list 46 72 1 33 1 51 78 96 44 20) 0.001)\n    (check-within (candidate (list 47 32 72 79 16 69 85 70 87 73) 2) (list 47 32 69 79 16 70 85 72 87 73) 0.001)\n    (check-within (candidate (list 47 94 72 49 50 62 17 22 85 86) 7) (list 47 94 72 49 50 62 17 22 85 86) 0.001)\n    (check-within (candidate (list 48 39 45 58 26 57 38 63 82 80) 2) (list 48 38 45 57 26 58 39 63 80 82) 0.001)\n    (check-within (candidate (list 48 51 51 39 54 56 57 6 1 40) 2) (list 48 51 51 39 54 56 57 6 1 40) 0.001)\n    (check-within (candidate (list 49 4 95 24 20 12 70 60 82 62) 11) (list 49 4 95 12 20 24 60 62 82 70) 0.001)\n    (check-within (candidate (list 49 7 92 79 43 88 31 89 36 97) 8) (list 31 7 88 79 36 89 43 92 49 97) 0.001)\n    (check-within (candidate (list 49 16 32 11 7 57 69 41 52 23) 15) (list 7 11 16 23 32 41 49 52 57 69) 0.001)\n    (check-within (candidate (list 49 26 82 77 52 76 90 23 64 42) 12) (list 42 23 49 52 64 76 77 26 82 90) 0.001)\n    (check-within (candidate (list 49 62 63 32 57 22 74 87 42 19) 13) (list 19 22 32 42 49 57 62 63 74 87) 0.001)\n    (check-within (candidate (list 49 93 5 15 56 2 65 74 82 42) 13) (list 42 49 2 5 56 15 65 74 82 93) 0.001)\n    (check-within (candidate (list 49 93 100 79 76 14 90 32 4 5) 10) (list 49 90 93 76 79 4 100 32 5 14) 0.001)\n    (check-within (candidate (list 49 96 75 44 74 78 82 40 43 68) 4) (list 49 96 74 40 75 78 82 43 44 68) 0.001)\n    (check-within (candidate (list 51 61 49 11 69 78 40 98 68 36) 10) (list 36 40 49 11 51 61 68 98 69 78) 0.001)\n    (check-within (candidate (list 51 99 52 80 83 69 18 49 71 13) 14) (list 49 99 51 69 71 80 13 52 83 18) 0.001)\n    (check-within (candidate (list 52 28 93 16 33 37 37 21 47 64) 12) (list 16 21 93 28 33 37 37 47 52 64) 0.001)\n    (check-within (candidate (list 53 7 99 22 3 50 62 70 56 40) 2) (list 53 7 99 22 3 50 62 70 56 40) 0.001)\n    (check-within (candidate (list 53 17 39 72 5 78 40 3 84 20) 5) (list 53 17 39 72 3 78 40 5 84 20) 0.001)\n    (check-within (candidate (list 53 71 55 38 26 89 20 98 55 21) 4) (list 53 71 55 38 26 89 20 98 55 21) 0.001)\n    (check-within (candidate (list 53 71 74 7 99 64 95 99 90 22) 9) (list 53 64 71 7 90 74 95 99 99 22) 0.001)\n    (check-within (candidate (list 55 19 82 86 12 64 44 76 88 31) 4) (list 55 19 82 86 12 64 44 76 88 31) 0.001)\n    (check-within (candidate (list 56 13 55 1 18 36 45 25 20 52) 14) (list 1 13 18 20 25 36 45 52 55 56) 0.001)\n    (check-within (candidate (list 56 28 50 100 56 99 80 71 6 5) 7) (list 50 28 56 99 56 100 80 71 5 6) 0.001)\n    (check-within (candidate (list 56 35 19 2 83 20 96 42 33 68) 3) (list 56 33 19 2 83 20 96 42 35 68) 0.001)\n    (check-within (candidate (list 56 69 94 21 65 46 64 91 75 25) 5) (list 56 64 91 21 65 46 69 94 75 25) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3220_countTestedDevices", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices.\n;; Your task is to test each device i in order from 0 to n - 1, by performing the following test operations:\n;; If batteryPercentages[i] is greater than 0:\n;; Increment the count of tested devices.\n;; Decrease the battery percentage of all devices with indices j in the range [i + 1, n - 1] by 1, ensuring their battery percentage never goes below 0, i.e, batteryPercentages[j] = max(0, batteryPercentages[j] - 1).\n;; Move to the next device.\n;; Otherwise, move to the next device without performing any test.\n;; Return an integer denoting the number of devices that will be tested after performing the test operations in order.\n;; Example 1:\n;; Input: batteryPercentages = [1,1,2,1,3]\n;; Output: 3\n;; Explanation: Performing the test operations in order starting from device 0:\n;; At device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].\n;; At device 1, batteryPercentages[1] == 0, so we move to the next device without testing.\n;; At device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].\n;; At device 3, batteryPercentages[3] == 0, so we move to the next device without testing.\n;; At device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.\n;; So, the answer is 3.\n;; Example 2:\n;; Input: batteryPercentages = [0,1,2]\n;; Output: 2\n;; Explanation: Performing the test operations in order starting from device 0:\n;; At device 0, batteryPercentages[0] == 0, so we move to the next device without testing.\n;; At device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].\n;; At device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.\n;; So, the answer is 2.\n;; Constraints:\n;; 1 <= n == batteryPercentages.length <= 100 \n;; 0 <= batteryPercentages[i] <= 100\n(define (countTestedDevices batteryPercentages)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3220_countTestedDevices.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countTestedDevices))\n    (check-within (candidate (list 1 1 2 1 3)) 3 0.001)\n    (check-within (candidate (list 0 1 2)) 2 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 0 0)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 0 2)) 1 0.001)\n    (check-within (candidate (list 1 0)) 1 0.001)\n    (check-within (candidate (list 1 2)) 2 0.001)\n    (check-within (candidate (list 2 1)) 1 0.001)\n    (check-within (candidate (list 2 2)) 2 0.001)\n    (check-within (candidate (list 0 0 1)) 1 0.001)\n    (check-within (candidate (list 0 0 2)) 1 0.001)\n    (check-within (candidate (list 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 2 0)) 2 0.001)\n    (check-within (candidate (list 1 3 1)) 2 0.001)\n    (check-within (candidate (list 2 0 1)) 1 0.001)\n    (check-within (candidate (list 2 2 0)) 2 0.001)\n    (check-within (candidate (list 2 2 2)) 2 0.001)\n    (check-within (candidate (list 3 0 3)) 2 0.001)\n    (check-within (candidate (list 3 3 1)) 2 0.001)\n    (check-within (candidate (list 3 3 3)) 3 0.001)\n    (check-within (candidate (list 0 2 1 4)) 2 0.001)\n    (check-within (candidate (list 1 4 4 1)) 3 0.001)\n    (check-within (candidate (list 3 1 2 0)) 2 0.001)\n    (check-within (candidate (list 3 2 1 1)) 2 0.001)\n    (check-within (candidate (list 3 2 1 3)) 3 0.001)\n    (check-within (candidate (list 4 1 4 4)) 3 0.001)\n    (check-within (candidate (list 4 2 0 1)) 2 0.001)\n    (check-within (candidate (list 4 2 1 3)) 3 0.001)\n    (check-within (candidate (list 4 4 4 2)) 3 0.001)\n    (check-within (candidate (list 0 3 1 3 5)) 3 0.001)\n    (check-within (candidate (list 0 4 2 5 3)) 3 0.001)\n    (check-within (candidate (list 0 5 4 2 0)) 2 0.001)\n    (check-within (candidate (list 2 2 3 0 2)) 3 0.001)\n    (check-within (candidate (list 2 3 5 0 1)) 3 0.001)\n    (check-within (candidate (list 2 4 5 2 0)) 3 0.001)\n    (check-within (candidate (list 4 3 3 5 4)) 4 0.001)\n    (check-within (candidate (list 5 4 1 0 3)) 3 0.001)\n    (check-within (candidate (list 5 5 5 2 0)) 3 0.001)\n    (check-within (candidate (list 0 2 4 3 0 2)) 3 0.001)\n    (check-within (candidate (list 0 4 5 3 3 2)) 3 0.001)\n    (check-within (candidate (list 1 3 1 5 4 5)) 5 0.001)\n    (check-within (candidate (list 1 6 0 3 3 6)) 4 0.001)\n    (check-within (candidate (list 3 1 3 5 2 0)) 3 0.001)\n    (check-within (candidate (list 3 2 6 2 6 0)) 4 0.001)\n    (check-within (candidate (list 4 1 5 3 5 2)) 4 0.001)\n    (check-within (candidate (list 4 3 3 2 4 3)) 4 0.001)\n    (check-within (candidate (list 4 5 2 3 6 2)) 4 0.001)\n    (check-within (candidate (list 5 1 1 2 1 4)) 3 0.001)\n    (check-within (candidate (list 5 1 6 6 3 6)) 4 0.001)\n    (check-within (candidate (list 6 1 5 1 4 5)) 4 0.001)\n    (check-within (candidate (list 6 2 2 3 4 6)) 5 0.001)\n    (check-within (candidate (list 6 2 3 0 2 0)) 3 0.001)\n    (check-within (candidate (list 1 0 6 3 6 3 1)) 4 0.001)\n    (check-within (candidate (list 2 1 7 3 0 3 3)) 3 0.001)\n    (check-within (candidate (list 2 3 7 0 6 4 4)) 4 0.001)\n    (check-within (candidate (list 2 5 2 4 2 1 3)) 3 0.001)\n    (check-within (candidate (list 2 5 2 7 6 5 5)) 5 0.001)\n    (check-within (candidate (list 4 2 6 4 7 6 7)) 7 0.001)\n    (check-within (candidate (list 4 2 6 6 3 3 7)) 5 0.001)\n    (check-within (candidate (list 4 4 3 0 2 6 6)) 5 0.001)\n    (check-within (candidate (list 5 2 2 3 4 6 6)) 6 0.001)\n    (check-within (candidate (list 5 4 6 0 7 2 2)) 4 0.001)\n    (check-within (candidate (list 6 6 7 0 1 7 2)) 4 0.001)\n    (check-within (candidate (list 0 5 1 4 5 0 4 8)) 5 0.001)\n    (check-within (candidate (list 1 0 7 0 7 4 5 7)) 6 0.001)\n    (check-within (candidate (list 2 5 3 4 4 8 6 5)) 6 0.001)\n    (check-within (candidate (list 2 6 3 4 5 6 2 6)) 6 0.001)\n    (check-within (candidate (list 4 5 2 1 3 7 3 5)) 5 0.001)\n    (check-within (candidate (list 6 5 4 8 6 8 3 6)) 6 0.001)\n    (check-within (candidate (list 7 4 0 8 5 5 2 0)) 5 0.001)\n    (check-within (candidate (list 7 5 3 2 3 5 8 6)) 6 0.001)\n    (check-within (candidate (list 8 0 4 3 2 6 6 1)) 5 0.001)\n    (check-within (candidate (list 8 3 0 1 0 8 6 8)) 5 0.001)\n    (check-within (candidate (list 8 6 7 1 0 1 3 7)) 4 0.001)\n    (check-within (candidate (list 0 6 8 8 0 1 2 3 4)) 4 0.001)\n    (check-within (candidate (list 2 7 9 7 2 9 0 3 9)) 6 0.001)\n    (check-within (candidate (list 8 1 9 8 5 3 4 4 1)) 4 0.001)\n    (check-within (candidate (list 8 4 0 1 1 6 5 3 5)) 5 0.001)\n    (check-within (candidate (list 8 4 1 5 8 5 8 7 9)) 8 0.001)\n    (check-within (candidate (list 8 4 9 8 9 0 0 4 9)) 6 0.001)\n    (check-within (candidate (list 8 9 4 4 1 9 8 9 1)) 7 0.001)\n    (check-within (candidate (list 2 5 8 9 1 5 10 9 6 3)) 7 0.001)\n    (check-within (candidate (list 2 6 5 4 1 5 3 3 3 9)) 6 0.001)\n    (check-within (candidate (list 7 7 7 3 6 6 4 3 5 10)) 6 0.001)\n    (check-within (candidate (list 9 3 10 1 8 2 4 3 3 0)) 4 0.001)\n    (check-within (candidate (list 10 10 2 0 2 7 6 7 10 4)) 6 0.001)\n    (check-within (candidate (list 0 8 7 9 4 10 4 3 7 11 7)) 7 0.001)\n    (check-within (candidate (list 1 2 3 5 6 11 3 2 11 0 8)) 8 0.001)\n    (check-within (candidate (list 5 10 4 10 10 6 8 1 8 10 3)) 9 0.001)\n    (check-within (candidate (list 7 10 2 7 11 8 11 4 1 4 5)) 6 0.001)\n    (check-within (candidate (list 7 11 0 4 1 10 5 3 2 0 2)) 5 0.001)\n    (check-within (candidate (list 8 8 1 8 6 2 5 2 8 5 6)) 6 0.001)\n    (check-within (candidate (list 8 9 10 10 1 5 4 6 7 2 4)) 7 0.001)\n    (check-within (candidate (list 9 9 2 3 2 2 9 6 11 1 10)) 7 0.001)\n    (check-within (candidate (list 10 0 6 2 6 6 11 1 8 10 5)) 7 0.001)\n    (check-within (candidate (list 1 4 7 2 12 8 1 11 5 10 2 3)) 7 0.001)\n    (check-within (candidate (list 2 5 4 4 9 6 10 0 11 8 2 10)) 9 0.001)\n    (check-within (candidate (list 4 11 9 8 9 11 11 5 11 6 12 11)) 10 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3221_findPeaks", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.\n;; Return an array that consists of indices of peaks in the given array in any order.\n;; Notes:\n;; A peak is defined as an element that is strictly greater than its neighboring elements.\n;; The first and last elements of the array are not a peak.\n;; Example 1:\n;; Input: mountain = [2,4,4]\n;; Output: []\n;; Explanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\n;; mountain[1] also can not be a peak because it is not strictly greater than mountain[2].\n;; So the answer is [].\n;; Example 2:\n;; Input: mountain = [1,4,3,8,5]\n;; Output: [1,3]\n;; Explanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\n;; mountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\n;; But mountain [1] and mountain[3] are strictly greater than their neighboring elements.\n;; So the answer is [1,3].\n;; Constraints:\n;; 3 <= mountain.length <= 100\n;; 1 <= mountain[i] <= 100\n(define (findPeaks mountain)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3221_findPeaks.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findPeaks))\n    (check-within (candidate (list 2 4 4)) (list ) 0.001)\n    (check-within (candidate (list 1 4 3 8 5)) (list 1 3) 0.001)\n    (check-within (candidate (list 1 1 1)) (list ) 0.001)\n    (check-within (candidate (list 1 1 3)) (list ) 0.001)\n    (check-within (candidate (list 1 1 5)) (list ) 0.001)\n    (check-within (candidate (list 1 2 5)) (list ) 0.001)\n    (check-within (candidate (list 1 4 1)) (list 1) 0.001)\n    (check-within (candidate (list 1 4 3)) (list 1) 0.001)\n    (check-within (candidate (list 1 5 5)) (list ) 0.001)\n    (check-within (candidate (list 1 6 4)) (list 1) 0.001)\n    (check-within (candidate (list 2 1 1)) (list ) 0.001)\n    (check-within (candidate (list 2 1 2)) (list ) 0.001)\n    (check-within (candidate (list 2 2 3)) (list ) 0.001)\n    (check-within (candidate (list 2 2 5)) (list ) 0.001)\n    (check-within (candidate (list 2 3 2)) (list 1) 0.001)\n    (check-within (candidate (list 2 3 6)) (list ) 0.001)\n    (check-within (candidate (list 2 4 3)) (list 1) 0.001)\n    (check-within (candidate (list 2 4 5)) (list ) 0.001)\n    (check-within (candidate (list 2 6 4)) (list 1) 0.001)\n    (check-within (candidate (list 3 3 3)) (list ) 0.001)\n    (check-within (candidate (list 3 3 5)) (list ) 0.001)\n    (check-within (candidate (list 3 4 6)) (list ) 0.001)\n    (check-within (candidate (list 3 5 1)) (list 1) 0.001)\n    (check-within (candidate (list 3 5 3)) (list 1) 0.001)\n    (check-within (candidate (list 3 5 4)) (list 1) 0.001)\n    (check-within (candidate (list 3 5 6)) (list ) 0.001)\n    (check-within (candidate (list 4 2 1)) (list ) 0.001)\n    (check-within (candidate (list 4 2 2)) (list ) 0.001)\n    (check-within (candidate (list 4 2 4)) (list ) 0.001)\n    (check-within (candidate (list 4 2 6)) (list ) 0.001)\n    (check-within (candidate (list 4 4 1)) (list ) 0.001)\n    (check-within (candidate (list 4 4 2)) (list ) 0.001)\n    (check-within (candidate (list 4 4 5)) (list ) 0.001)\n    (check-within (candidate (list 4 5 4)) (list 1) 0.001)\n    (check-within (candidate (list 4 6 1)) (list 1) 0.001)\n    (check-within (candidate (list 4 6 6)) (list ) 0.001)\n    (check-within (candidate (list 5 1 2)) (list ) 0.001)\n    (check-within (candidate (list 5 2 1)) (list ) 0.001)\n    (check-within (candidate (list 5 2 2)) (list ) 0.001)\n    (check-within (candidate (list 5 2 4)) (list ) 0.001)\n    (check-within (candidate (list 5 3 1)) (list ) 0.001)\n    (check-within (candidate (list 5 5 1)) (list ) 0.001)\n    (check-within (candidate (list 5 5 2)) (list ) 0.001)\n    (check-within (candidate (list 5 5 6)) (list ) 0.001)\n    (check-within (candidate (list 5 6 1)) (list 1) 0.001)\n    (check-within (candidate (list 5 6 4)) (list 1) 0.001)\n    (check-within (candidate (list 6 1 1)) (list ) 0.001)\n    (check-within (candidate (list 6 1 2)) (list ) 0.001)\n    (check-within (candidate (list 6 1 5)) (list ) 0.001)\n    (check-within (candidate (list 6 2 2)) (list ) 0.001)\n    (check-within (candidate (list 6 2 5)) (list ) 0.001)\n    (check-within (candidate (list 6 3 2)) (list ) 0.001)\n    (check-within (candidate (list 6 3 3)) (list ) 0.001)\n    (check-within (candidate (list 6 3 6)) (list ) 0.001)\n    (check-within (candidate (list 6 4 3)) (list ) 0.001)\n    (check-within (candidate (list 6 5 2)) (list ) 0.001)\n    (check-within (candidate (list 6 5 4)) (list ) 0.001)\n    (check-within (candidate (list 6 6 4)) (list ) 0.001)\n    (check-within (candidate (list 1 1 1 4)) (list ) 0.001)\n    (check-within (candidate (list 1 1 7 7)) (list ) 0.001)\n    (check-within (candidate (list 1 3 6 5)) (list 2) 0.001)\n    (check-within (candidate (list 1 4 7 8)) (list ) 0.001)\n    (check-within (candidate (list 1 6 6 6)) (list ) 0.001)\n    (check-within (candidate (list 1 8 1 8)) (list 1) 0.001)\n    (check-within (candidate (list 2 2 1 2)) (list ) 0.001)\n    (check-within (candidate (list 2 3 7 6)) (list 2) 0.001)\n    (check-within (candidate (list 2 5 4 5)) (list 1) 0.001)\n    (check-within (candidate (list 2 7 1 2)) (list 1) 0.001)\n    (check-within (candidate (list 2 7 2 6)) (list 1) 0.001)\n    (check-within (candidate (list 2 7 5 3)) (list 1) 0.001)\n    (check-within (candidate (list 2 7 7 6)) (list ) 0.001)\n    (check-within (candidate (list 3 1 2 5)) (list ) 0.001)\n    (check-within (candidate (list 3 3 4 2)) (list 2) 0.001)\n    (check-within (candidate (list 3 3 7 8)) (list ) 0.001)\n    (check-within (candidate (list 3 4 2 4)) (list 1) 0.001)\n    (check-within (candidate (list 3 4 5 4)) (list 2) 0.001)\n    (check-within (candidate (list 3 4 7 6)) (list 2) 0.001)\n    (check-within (candidate (list 3 5 5 3)) (list ) 0.001)\n    (check-within (candidate (list 3 6 4 7)) (list 1) 0.001)\n    (check-within (candidate (list 3 8 5 5)) (list 1) 0.001)\n    (check-within (candidate (list 4 2 4 3)) (list 2) 0.001)\n    (check-within (candidate (list 4 2 6 8)) (list ) 0.001)\n    (check-within (candidate (list 4 3 3 8)) (list ) 0.001)\n    (check-within (candidate (list 4 4 8 7)) (list 2) 0.001)\n    (check-within (candidate (list 4 5 1 1)) (list 1) 0.001)\n    (check-within (candidate (list 4 6 1 7)) (list 1) 0.001)\n    (check-within (candidate (list 4 6 2 1)) (list 1) 0.001)\n    (check-within (candidate (list 4 6 2 2)) (list 1) 0.001)\n    (check-within (candidate (list 5 1 7 6)) (list 2) 0.001)\n    (check-within (candidate (list 5 3 2 2)) (list ) 0.001)\n    (check-within (candidate (list 5 3 6 3)) (list 2) 0.001)\n    (check-within (candidate (list 5 3 8 3)) (list 2) 0.001)\n    (check-within (candidate (list 5 4 4 6)) (list ) 0.001)\n    (check-within (candidate (list 5 4 4 8)) (list ) 0.001)\n    (check-within (candidate (list 5 5 1 7)) (list ) 0.001)\n    (check-within (candidate (list 5 5 8 2)) (list 2) 0.001)\n    (check-within (candidate (list 5 6 7 4)) (list 2) 0.001)\n    (check-within (candidate (list 5 7 4 3)) (list 1) 0.001)\n    (check-within (candidate (list 5 8 7 8)) (list 1) 0.001)\n    (check-within (candidate (list 6 2 8 6)) (list 2) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3223_countCompleteSubstrings", "language": "rkt", "prompt": "#lang racket\n;; You are given a string word and an integer k.\n;; A substring s of word is complete if:\n;; Each character in s occurs exactly k times.\n;; The difference between two adjacent characters is at most 2. That is, for any two adjacent characters c1 and c2 in s, the absolute difference in their positions in the alphabet is at most 2.\n;; Return the number of complete substrings of word.\n;; A substring is a non-empty contiguous sequence of characters in a string.\n;; Example 1:\n;; Input: word = \"igigee\", k = 2\n;; Output: 3\n;; Explanation: The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: igigee, igigee, igigee.\n;; Example 2:\n;; Input: word = \"aaabbbccc\", k = 3\n;; Output: 6\n;; Explanation: The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc, aaabbbccc.\n;; Constraints:\n;; 1 <= word.length <= 105\n;; word consists only of lowercase English letters.\n;; 1 <= k <= word.length\n(define (countCompleteSubstrings word k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3223_countCompleteSubstrings.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countCompleteSubstrings))\n    (check-within (candidate igigee 2) 3 0.001)\n    (check-within (candidate aaabbbccc 3) 6 0.001)\n    (check-within (candidate a 1) 1 0.001)\n    (check-within (candidate b 1) 1 0.001)\n    (check-within (candidate c 1) 1 0.001)\n    (check-within (candidate aa 2) 1 0.001)\n    (check-within (candidate ab 2) 0 0.001)\n    (check-within (candidate ac 2) 0 0.001)\n    (check-within (candidate ba 1) 3 0.001)\n    (check-within (candidate bb 2) 1 0.001)\n    (check-within (candidate bc 1) 3 0.001)\n    (check-within (candidate ca 1) 3 0.001)\n    (check-within (candidate cb 1) 3 0.001)\n    (check-within (candidate cc 2) 1 0.001)\n    (check-within (candidate aaa 1) 3 0.001)\n    (check-within (candidate aab 3) 0 0.001)\n    (check-within (candidate aac 2) 1 0.001)\n    (check-within (candidate aba 3) 0 0.001)\n    (check-within (candidate abb 1) 4 0.001)\n    (check-within (candidate abc 3) 0 0.001)\n    (check-within (candidate aca 1) 5 0.001)\n    (check-within (candidate acb 2) 0 0.001)\n    (check-within (candidate acc 3) 0 0.001)\n    (check-within (candidate baa 2) 1 0.001)\n    (check-within (candidate bab 3) 0 0.001)\n    (check-within (candidate bac 2) 0 0.001)\n    (check-within (candidate bba 1) 4 0.001)\n    (check-within (candidate bbb 2) 2 0.001)\n    (check-within (candidate bbc 2) 1 0.001)\n    (check-within (candidate bca 2) 0 0.001)\n    (check-within (candidate bcb 1) 5 0.001)\n    (check-within (candidate bcc 2) 1 0.001)\n    (check-within (candidate caa 1) 4 0.001)\n    (check-within (candidate cab 2) 0 0.001)\n    (check-within (candidate cac 2) 0 0.001)\n    (check-within (candidate cba 1) 6 0.001)\n    (check-within (candidate cbb 3) 0 0.001)\n    (check-within (candidate cbc 2) 0 0.001)\n    (check-within (candidate cca 2) 1 0.001)\n    (check-within (candidate ccb 1) 4 0.001)\n    (check-within (candidate ccc 2) 2 0.001)\n    (check-within (candidate aaaa 4) 1 0.001)\n    (check-within (candidate aaab 4) 0 0.001)\n    (check-within (candidate aaac 4) 0 0.001)\n    (check-within (candidate aaba 3) 0 0.001)\n    (check-within (candidate aabb 1) 5 0.001)\n    (check-within (candidate aabc 3) 0 0.001)\n    (check-within (candidate aaca 3) 0 0.001)\n    (check-within (candidate aacb 2) 1 0.001)\n    (check-within (candidate aacc 4) 0 0.001)\n    (check-within (candidate abaa 3) 0 0.001)\n    (check-within (candidate abab 1) 7 0.001)\n    (check-within (candidate abac 4) 0 0.001)\n    (check-within (candidate abba 3) 0 0.001)\n    (check-within (candidate abbb 4) 0 0.001)\n    (check-within (candidate abbc 2) 1 0.001)\n    (check-within (candidate abca 1) 9 0.001)\n    (check-within (candidate abcb 1) 8 0.001)\n    (check-within (candidate abcc 4) 0 0.001)\n    (check-within (candidate acaa 1) 6 0.001)\n    (check-within (candidate acab 2) 0 0.001)\n    (check-within (candidate acac 1) 7 0.001)\n    (check-within (candidate acba 2) 0 0.001)\n    (check-within (candidate acbb 1) 7 0.001)\n    (check-within (candidate acbc 2) 0 0.001)\n    (check-within (candidate acca 1) 6 0.001)\n    (check-within (candidate accb 3) 0 0.001)\n    (check-within (candidate accc 4) 0 0.001)\n    (check-within (candidate baaa 2) 2 0.001)\n    (check-within (candidate baab 1) 6 0.001)\n    (check-within (candidate baac 1) 6 0.001)\n    (check-within (candidate baba 1) 7 0.001)\n    (check-within (candidate babb 1) 6 0.001)\n    (check-within (candidate babc 3) 0 0.001)\n    (check-within (candidate baca 4) 0 0.001)\n    (check-within (candidate bacb 3) 0 0.001)\n    (check-within (candidate bacc 1) 7 0.001)\n    (check-within (candidate bbaa 2) 3 0.001)\n    (check-within (candidate bbab 3) 0 0.001)\n    (check-within (candidate bbac 4) 0 0.001)\n    (check-within (candidate bbba 4) 0 0.001)\n    (check-within (candidate bbbb 1) 4 0.001)\n    (check-within (candidate bbbc 3) 1 0.001)\n    (check-within (candidate bbca 4) 0 0.001)\n    (check-within (candidate bbcb 1) 6 0.001)\n    (check-within (candidate bbcc 4) 0 0.001)\n    (check-within (candidate bcaa 2) 1 0.001)\n    (check-within (candidate bcab 3) 0 0.001)\n    (check-within (candidate bcac 3) 0 0.001)\n    (check-within (candidate bcba 1) 8 0.001)\n    (check-within (candidate bcbb 1) 6 0.001)\n    (check-within (candidate bcbc 2) 1 0.001)\n    (check-within (candidate bcca 4) 0 0.001)\n    (check-within (candidate bccb 3) 0 0.001)\n    (check-within (candidate bccc 4) 0 0.001)\n    (check-within (candidate caaa 3) 1 0.001)\n    (check-within (candidate caab 1) 6 0.001)\n    (check-within (candidate caac 4) 0 0.001)\n    (check-within (candidate caba 4) 0 0.001)\n    (check-within (candidate cabb 3) 0 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3224_numberOfSequence", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer n and a 0-indexed integer array sick which is sorted in increasing order.\n;; There are n children standing in a queue with positions 0 to n - 1 assigned to them. The array sick contains the positions of the children who are infected with an infectious disease. An infected child at position i can spread the disease to either of its immediate neighboring children at positions i - 1 and i + 1 if they exist and are currently not infected. At most one child who was previously not infected can get infected with the disease in one second.\n;; It can be shown that after a finite number of seconds, all the children in the queue will get infected with the disease. An infection sequence is the sequential order of positions in which all of the non-infected children get infected with the disease. Return the total number of possible infection sequences.\n;; Since the answer may be large, return it modulo 109 + 7.\n;; Note that an infection sequence does not contain positions of children who were already infected with the disease in the beginning.\n;; Example 1:\n;; Input: n = 5, sick = [0,4]\n;; Output: 4\n;; Explanation: Children at positions 1, 2, and 3 are not infected in the beginning. There are 4 possible infection sequences:\n;; - The children at positions 1 and 3 can get infected since their positions are adjacent to the infected children 0 and 4. The child at position 1 gets infected first.\n;; Now, the child at position 2 is adjacent to the child at position 1 who is infected and the child at position 3 is adjacent to the child at position 4 who is infected, hence either of them can get infected. The child at position 2 gets infected.\n;; Finally, the child at position 3 gets infected because it is adjacent to children at positions 2 and 4 who are infected. The infection sequence is [1,2,3].\n;; - The children at positions 1 and 3 can get infected because their positions are adjacent to the infected children 0 and 4. The child at position 1 gets infected first.\n;; Now, the child at position 2 is adjacent to the child at position 1 who is infected and the child at position 3 is adjacent to the child at position 4 who is infected, hence either of them can get infected. The child at position 3 gets infected.\n;; Finally, the child at position 2 gets infected because it is adjacent to children at positions 1 and 3 who are infected. The infection sequence is [1,3,2].\n;; - The infection sequence is [3,1,2]. The order of infection of disease in the children can be seen as: [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4].\n;; - The infection sequence is [3,2,1]. The order of infection of disease in the children can be seen as: [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4].\n;; Example 2:\n;; Input: n = 4, sick = [1]\n;; Output: 3\n;; Explanation: Children at positions 0, 2, and 3 are not infected in the beginning. There are 3 possible infection sequences:\n;; - The infection sequence is [0,2,3]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n;; - The infection sequence is [2,0,3]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n;; - The infection sequence is [2,3,0]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n;; Constraints:\n;; 2 <= n <= 105\n;; 1 <= sick.length <= n - 1\n;; 0 <= sick[i] <= n - 1\n;; sick is sorted in increasing order.\n(define (numberOfSequence n sick)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3224_numberOfSequence.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfSequence))\n    (check-within (candidate 5 (list 0 4)) 4 0.001)\n    (check-within (candidate 4 (list 1)) 3 0.001)\n    (check-within (candidate 2 (list 0)) 1 0.001)\n    (check-within (candidate 5 (list 0)) 1 0.001)\n    (check-within (candidate 100 (list 0)) 1 0.001)\n    (check-within (candidate 2 (list 1)) 1 0.001)\n    (check-within (candidate 5 (list 1)) 4 0.001)\n    (check-within (candidate 5 (list 2)) 6 0.001)\n    (check-within (candidate 5 (list 3)) 4 0.001)\n    (check-within (candidate 5 (list 4)) 1 0.001)\n    (check-within (candidate 5 (list 0 1)) 1 0.001)\n    (check-within (candidate 3 (list 0 2)) 1 0.001)\n    (check-within (candidate 5 (list 0 2)) 3 0.001)\n    (check-within (candidate 5 (list 0 3)) 6 0.001)\n    (check-within (candidate 5 (list 1 2)) 3 0.001)\n    (check-within (candidate 5 (list 1 3)) 6 0.001)\n    (check-within (candidate 5 (list 1 4)) 6 0.001)\n    (check-within (candidate 5 (list 2 3)) 3 0.001)\n    (check-within (candidate 5 (list 2 4)) 3 0.001)\n    (check-within (candidate 5 (list 3 4)) 1 0.001)\n    (check-within (candidate 5 (list 0 1 2)) 1 0.001)\n    (check-within (candidate 5 (list 0 1 3)) 2 0.001)\n    (check-within (candidate 5 (list 0 1 4)) 2 0.001)\n    (check-within (candidate 5 (list 0 2 3)) 2 0.001)\n    (check-within (candidate 5 (list 0 2 4)) 2 0.001)\n    (check-within (candidate 5 (list 0 3 4)) 2 0.001)\n    (check-within (candidate 5 (list 1 2 3)) 2 0.001)\n    (check-within (candidate 5 (list 1 2 4)) 2 0.001)\n    (check-within (candidate 5 (list 1 3 4)) 2 0.001)\n    (check-within (candidate 5 (list 2 3 4)) 1 0.001)\n    (check-within (candidate 5 (list 0 1 2 3)) 1 0.001)\n    (check-within (candidate 10 (list 0 1 2 3)) 1 0.001)\n    (check-within (candidate 5 (list 0 1 2 4)) 1 0.001)\n    (check-within (candidate 10 (list 0 1 2 4)) 6 0.001)\n    (check-within (candidate 10 (list 0 1 2 5)) 30 0.001)\n    (check-within (candidate 10 (list 0 1 2 8)) 96 0.001)\n    (check-within (candidate 10 (list 0 1 2 9)) 32 0.001)\n    (check-within (candidate 5 (list 0 1 3 4)) 1 0.001)\n    (check-within (candidate 10 (list 0 1 3 5)) 30 0.001)\n    (check-within (candidate 10 (list 0 1 3 6)) 120 0.001)\n    (check-within (candidate 10 (list 0 1 3 7)) 240 0.001)\n    (check-within (candidate 10 (list 0 1 3 8)) 240 0.001)\n    (check-within (candidate 10 (list 0 1 4 5)) 30 0.001)\n    (check-within (candidate 10 (list 0 1 4 6)) 120 0.001)\n    (check-within (candidate 10 (list 0 1 4 7)) 360 0.001)\n    (check-within (candidate 10 (list 0 1 4 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 1 4 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 1 5 6)) 80 0.001)\n    (check-within (candidate 10 (list 0 1 5 7)) 240 0.001)\n    (check-within (candidate 10 (list 0 1 5 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 1 5 9)) 320 0.001)\n    (check-within (candidate 10 (list 0 1 6 7)) 120 0.001)\n    (check-within (candidate 10 (list 0 1 6 8)) 240 0.001)\n    (check-within (candidate 10 (list 0 1 6 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 1 7 8)) 96 0.001)\n    (check-within (candidate 10 (list 0 1 7 9)) 96 0.001)\n    (check-within (candidate 10 (list 0 1 8 9)) 32 0.001)\n    (check-within (candidate 5 (list 0 2 3 4)) 1 0.001)\n    (check-within (candidate 10 (list 0 2 3 4)) 6 0.001)\n    (check-within (candidate 10 (list 0 2 3 5)) 30 0.001)\n    (check-within (candidate 10 (list 0 2 3 6)) 120 0.001)\n    (check-within (candidate 10 (list 0 2 3 7)) 240 0.001)\n    (check-within (candidate 10 (list 0 2 3 8)) 240 0.001)\n    (check-within (candidate 10 (list 0 2 3 9)) 96 0.001)\n    (check-within (candidate 10 (list 0 2 4 5)) 30 0.001)\n    (check-within (candidate 10 (list 0 2 4 6)) 120 0.001)\n    (check-within (candidate 10 (list 0 2 4 7)) 360 0.001)\n    (check-within (candidate 10 (list 0 2 4 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 2 4 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 2 5 6)) 120 0.001)\n    (check-within (candidate 10 (list 0 2 5 7)) 360 0.001)\n    (check-within (candidate 10 (list 0 2 5 8)) 720 0.001)\n    (check-within (candidate 10 (list 0 2 5 9)) 480 0.001)\n    (check-within (candidate 10 (list 0 2 6 7)) 240 0.001)\n    (check-within (candidate 10 (list 0 2 6 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 2 7 8)) 240 0.001)\n    (check-within (candidate 10 (list 0 2 7 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 2 8 9)) 96 0.001)\n    (check-within (candidate 10 (list 0 3 4 5)) 30 0.001)\n    (check-within (candidate 10 (list 0 3 4 7)) 360 0.001)\n    (check-within (candidate 10 (list 0 3 4 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 3 4 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 3 5 6)) 120 0.001)\n    (check-within (candidate 10 (list 0 3 5 7)) 360 0.001)\n    (check-within (candidate 10 (list 0 3 6 7)) 360 0.001)\n    (check-within (candidate 10 (list 0 3 6 8)) 720 0.001)\n    (check-within (candidate 10 (list 0 3 6 9)) 720 0.001)\n    (check-within (candidate 10 (list 0 3 7 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 3 7 9)) 480 0.001)\n    (check-within (candidate 10 (list 0 3 8 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 4 5 6)) 80 0.001)\n    (check-within (candidate 10 (list 0 4 5 7)) 240 0.001)\n    (check-within (candidate 10 (list 0 4 5 9)) 320 0.001)\n    (check-within (candidate 10 (list 0 4 6 7)) 240 0.001)\n    (check-within (candidate 10 (list 0 4 6 8)) 480 0.001)\n    (check-within (candidate 10 (list 0 4 8 9)) 320 0.001)\n    (check-within (candidate 10 (list 0 5 6 7)) 120 0.001)\n    (check-within (candidate 10 (list 0 5 6 9)) 240 0.001)\n    (check-within (candidate 10 (list 0 5 7 8)) 240 0.001)\n    (check-within (candidate 10 (list 0 5 7 9)) 240 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3225_maxSubarrayLength", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer array nums and an integer k.\n;; The frequency of an element x is the number of times it occurs in an array.\n;; An array is called good if the frequency of each element in this array is less than or equal to k.\n;; Return the length of the longest good subarray of nums.\n;; A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [1,2,3,1,2,3,1,2], k = 2\n;; Output: 6\n;; Explanation: The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\n;; It can be shown that there are no good subarrays with length more than 6.\n;; Example 2:\n;; Input: nums = [1,2,1,2,1,2,1,2], k = 1\n;; Output: 2\n;; Explanation: The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\n;; It can be shown that there are no good subarrays with length more than 2.\n;; Example 3:\n;; Input: nums = [5,5,5,5,5,5,5], k = 4\n;; Output: 4\n;; Explanation: The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\n;; It can be shown that there are no good subarrays with length more than 4.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 109\n;; 1 <= k <= nums.length\n(define (maxSubarrayLength nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3225_maxSubarrayLength.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxSubarrayLength))\n    (check-within (candidate (list 1 2 3 1 2 3 1 2) 2) 6 0.001)\n    (check-within (candidate (list 1 2 1 2 1 2 1 2) 1) 2 0.001)\n    (check-within (candidate (list 5 5 5 5 5 5 5) 4) 4 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n    (check-within (candidate (list 2) 1) 1 0.001)\n    (check-within (candidate (list 3) 1) 1 0.001)\n    (check-within (candidate (list 4) 1) 1 0.001)\n    (check-within (candidate (list 5) 1) 1 0.001)\n    (check-within (candidate (list 6) 1) 1 0.001)\n    (check-within (candidate (list 7) 1) 1 0.001)\n    (check-within (candidate (list 8) 1) 1 0.001)\n    (check-within (candidate (list 9) 1) 1 0.001)\n    (check-within (candidate (list 10) 1) 1 0.001)\n    (check-within (candidate (list 1 11) 2) 2 0.001)\n    (check-within (candidate (list 2 11) 1) 2 0.001)\n    (check-within (candidate (list 3 5) 2) 2 0.001)\n    (check-within (candidate (list 4 6) 2) 2 0.001)\n    (check-within (candidate (list 5 8) 2) 2 0.001)\n    (check-within (candidate (list 6 7) 1) 2 0.001)\n    (check-within (candidate (list 7 9) 2) 2 0.001)\n    (check-within (candidate (list 8 8) 1) 1 0.001)\n    (check-within (candidate (list 9 8) 1) 2 0.001)\n    (check-within (candidate (list 10 5) 1) 2 0.001)\n    (check-within (candidate (list 1 1 2) 2) 3 0.001)\n    (check-within (candidate (list 1 1 5) 2) 3 0.001)\n    (check-within (candidate (list 1 2 3) 1) 3 0.001)\n    (check-within (candidate (list 1 2 4) 1) 3 0.001)\n    (check-within (candidate (list 1 3 3) 2) 3 0.001)\n    (check-within (candidate (list 1 3 5) 1) 3 0.001)\n    (check-within (candidate (list 1 4 1) 1) 2 0.001)\n    (check-within (candidate (list 1 4 1) 2) 3 0.001)\n    (check-within (candidate (list 1 5 1) 2) 3 0.001)\n    (check-within (candidate (list 1 5 5) 2) 3 0.001)\n    (check-within (candidate (list 1 6 4) 1) 3 0.001)\n    (check-within (candidate (list 1 6 4) 2) 3 0.001)\n    (check-within (candidate (list 1 7 1) 1) 2 0.001)\n    (check-within (candidate (list 1 7 5) 2) 3 0.001)\n    (check-within (candidate (list 1 8 2) 1) 3 0.001)\n    (check-within (candidate (list 1 8 4) 1) 3 0.001)\n    (check-within (candidate (list 1 9 2) 1) 3 0.001)\n    (check-within (candidate (list 1 9 2) 2) 3 0.001)\n    (check-within (candidate (list 1 10 2) 1) 3 0.001)\n    (check-within (candidate (list 2 1 2) 2) 3 0.001)\n    (check-within (candidate (list 2 2 3) 1) 2 0.001)\n    (check-within (candidate (list 2 2 4) 2) 3 0.001)\n    (check-within (candidate (list 2 3 3) 2) 3 0.001)\n    (check-within (candidate (list 2 3 4) 2) 3 0.001)\n    (check-within (candidate (list 2 4 1) 2) 3 0.001)\n    (check-within (candidate (list 2 4 2) 2) 3 0.001)\n    (check-within (candidate (list 2 5 2) 1) 2 0.001)\n    (check-within (candidate (list 2 5 4) 1) 3 0.001)\n    (check-within (candidate (list 2 6 2) 1) 2 0.001)\n    (check-within (candidate (list 2 6 3) 2) 3 0.001)\n    (check-within (candidate (list 2 7 1) 1) 3 0.001)\n    (check-within (candidate (list 2 7 2) 2) 3 0.001)\n    (check-within (candidate (list 2 8 2) 2) 3 0.001)\n    (check-within (candidate (list 2 8 5) 2) 3 0.001)\n    (check-within (candidate (list 2 9 2) 1) 2 0.001)\n    (check-within (candidate (list 2 9 5) 1) 3 0.001)\n    (check-within (candidate (list 2 10 1) 2) 3 0.001)\n    (check-within (candidate (list 2 10 3) 2) 3 0.001)\n    (check-within (candidate (list 3 1 1) 1) 2 0.001)\n    (check-within (candidate (list 3 1 4) 1) 3 0.001)\n    (check-within (candidate (list 3 2 3) 1) 2 0.001)\n    (check-within (candidate (list 3 2 4) 1) 3 0.001)\n    (check-within (candidate (list 3 3 1) 2) 3 0.001)\n    (check-within (candidate (list 3 3 3) 2) 2 0.001)\n    (check-within (candidate (list 3 4 1) 2) 3 0.001)\n    (check-within (candidate (list 3 4 2) 2) 3 0.001)\n    (check-within (candidate (list 3 5 4) 2) 3 0.001)\n    (check-within (candidate (list 3 5 5) 1) 2 0.001)\n    (check-within (candidate (list 3 6 2) 2) 3 0.001)\n    (check-within (candidate (list 3 6 4) 2) 3 0.001)\n    (check-within (candidate (list 3 7 5) 1) 3 0.001)\n    (check-within (candidate (list 3 7 5) 2) 3 0.001)\n    (check-within (candidate (list 3 8 1) 2) 3 0.001)\n    (check-within (candidate (list 3 8 2) 1) 3 0.001)\n    (check-within (candidate (list 3 9 1) 1) 3 0.001)\n    (check-within (candidate (list 3 9 4) 2) 3 0.001)\n    (check-within (candidate (list 3 10 1) 1) 3 0.001)\n    (check-within (candidate (list 3 10 3) 2) 3 0.001)\n    (check-within (candidate (list 4 1 2) 1) 3 0.001)\n    (check-within (candidate (list 4 1 5) 2) 3 0.001)\n    (check-within (candidate (list 4 2 4) 2) 3 0.001)\n    (check-within (candidate (list 4 2 5) 2) 3 0.001)\n    (check-within (candidate (list 4 3 1) 1) 3 0.001)\n    (check-within (candidate (list 4 3 3) 1) 2 0.001)\n    (check-within (candidate (list 4 4 3) 2) 3 0.001)\n    (check-within (candidate (list 4 4 5) 2) 3 0.001)\n    (check-within (candidate (list 4 5 2) 2) 3 0.001)\n    (check-within (candidate (list 4 5 4) 2) 3 0.001)\n    (check-within (candidate (list 4 6 1) 2) 3 0.001)\n    (check-within (candidate (list 4 6 2) 1) 3 0.001)\n    (check-within (candidate (list 4 7 1) 1) 3 0.001)\n    (check-within (candidate (list 4 7 4) 2) 3 0.001)\n    (check-within (candidate (list 4 8 2) 2) 3 0.001)\n    (check-within (candidate (list 4 8 4) 2) 3 0.001)\n    (check-within (candidate (list 4 9 2) 1) 3 0.001)\n    (check-within (candidate (list 4 9 3) 2) 3 0.001)\n    (check-within (candidate (list 4 10 2) 1) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3226_numberGame", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums of even length and there is also an empty array arr. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\n;; Every round, first Alice will remove the minimum element from nums, and then Bob does the same.\n;; Now, first Bob will append the removed element in the array arr, and then Alice does the same.\n;; The game continues until nums becomes empty.\n;; Return the resulting array arr.\n;; Example 1:\n;; Input: nums = [5,4,2,3]\n;; Output: [3,2,5,4]\n;; Explanation: In round one, first Alice removes 2 and then Bob removes 3. Then in arr firstly Bob appends 3 and then Alice appends 2. So arr = [3,2].\n;; At the begining of round two, nums = [5,4]. Now, first Alice removes 4 and then Bob removes 5. Then both append in arr which becomes [3,2,5,4].\n;; Example 2:\n;; Input: nums = [2,5]\n;; Output: [5,2]\n;; Explanation: In round one, first Alice removes 2 and then Bob removes 5. Then in arr firstly Bob appends and then Alice appends. So arr = [5,2].\n;; Constraints:\n;; 1 <= nums.length <= 100\n;; 1 <= nums[i] <= 100\n;; nums.length % 2 == 0\n(define (numberGame nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3226_numberGame.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberGame))\n    (check-within (candidate (list 5 4 2 3)) (list 3 2 5 4) 0.001)\n    (check-within (candidate (list 2 5)) (list 5 2) 0.001)\n    (check-within (candidate (list 4 4 3 8)) (list 4 3 8 4) 0.001)\n    (check-within (candidate (list 2 5 3 8)) (list 3 2 8 5) 0.001)\n    (check-within (candidate (list 2 7 9 6 4 6)) (list 4 2 6 6 9 7) 0.001)\n    (check-within (candidate (list 18 26 37 46 13 33 39 1 37 16)) (list 13 1 18 16 33 26 37 37 46 39) 0.001)\n    (check-within (candidate (list 17 2 4 11 14 18)) (list 4 2 14 11 18 17) 0.001)\n    (check-within (candidate (list 20 30 12 3 11 17 32 12)) (list 11 3 12 12 20 17 32 30) 0.001)\n    (check-within (candidate (list 9 32 6 11 11 39 18 29 44 29)) (list 9 6 11 11 29 18 32 29 44 39) 0.001)\n    (check-within (candidate (list 7 2 3 4)) (list 3 2 7 4) 0.001)\n    (check-within (candidate (list 8 7 1 3)) (list 3 1 8 7) 0.001)\n    (check-within (candidate (list 2 6 6 6)) (list 6 2 6 6) 0.001)\n    (check-within (candidate (list 1 2)) (list 2 1) 0.001)\n    (check-within (candidate (list 4 1 1 3)) (list 1 1 4 3) 0.001)\n    (check-within (candidate (list 13 12 18 11 15 28 26 2)) (list 11 2 13 12 18 15 28 26) 0.001)\n    (check-within (candidate (list 14 30 29 3 23 21 26 23)) (list 14 3 23 21 26 23 30 29) 0.001)\n    (check-within (candidate (list 1 1)) (list 1 1) 0.001)\n    (check-within (candidate (list 2 1)) (list 2 1) 0.001)\n    (check-within (candidate (list 12 1 28 23 2 31 11 26)) (list 2 1 12 11 26 23 31 28) 0.001)\n    (check-within (candidate (list 21 11 37 1 40 50 49 45 28 47)) (list 11 1 28 21 40 37 47 45 50 49) 0.001)\n    (check-within (candidate (list 25 22 31 7 30 9 9 18)) (list 9 7 18 9 25 22 31 30) 0.001)\n    (check-within (candidate (list 2 4 10 9 16 9)) (list 4 2 9 9 16 10) 0.001)\n    (check-within (candidate (list 5 2 3 5)) (list 3 2 5 5) 0.001)\n    (check-within (candidate (list 6 44 37 6 28 44 30 36 25 24)) (list 6 6 25 24 30 28 37 36 44 44) 0.001)\n    (check-within (candidate (list 17 10 6 14 10 18)) (list 10 6 14 10 18 17) 0.001)\n    (check-within (candidate (list 40 24 23 29 37 26 39 34 39 23)) (list 23 23 26 24 34 29 39 37 40 39) 0.001)\n    (check-within (candidate (list 2 2)) (list 2 2) 0.001)\n    (check-within (candidate (list 33 5 31 43 48 18 31 11 19 8)) (list 8 5 18 11 31 19 33 31 48 43) 0.001)\n    (check-within (candidate (list 37 46 42 19 10 8 43 10 40 13)) (list 10 8 13 10 37 19 42 40 46 43) 0.001)\n    (check-within (candidate (list 2 19 8 22 1 27 29 7)) (list 2 1 8 7 22 19 29 27) 0.001)\n    (check-within (candidate (list 2 3 2 3)) (list 2 2 3 3) 0.001)\n    (check-within (candidate (list 1 4 7 14 8 14)) (list 4 1 8 7 14 14) 0.001)\n    (check-within (candidate (list 28 47 36 34 19 7 40 46 33 43)) (list 19 7 33 28 36 34 43 40 47 46) 0.001)\n    (check-within (candidate (list 29 41 20 22 16 27 22 44 10 47)) (list 16 10 22 20 27 22 41 29 47 44) 0.001)\n    (check-within (candidate (list 14 6 40 19 47 46 34 27 28 10)) (list 10 6 19 14 28 27 40 34 47 46) 0.001)\n    (check-within (candidate (list 42 43 50 43 36 26 16 12 3 2)) (list 3 2 16 12 36 26 43 42 50 43) 0.001)\n    (check-within (candidate (list 1 7 24 24 23 32 28 2)) (list 2 1 23 7 24 24 32 28) 0.001)\n    (check-within (candidate (list 20 19 16 16 19 29 21 5)) (list 16 5 19 16 20 19 29 21) 0.001)\n    (check-within (candidate (list 20 9 29 29 17 39 27 44 1 8)) (list 8 1 17 9 27 20 29 29 44 39) 0.001)\n    (check-within (candidate (list 14 11 12 18 9 15)) (list 11 9 14 12 18 15) 0.001)\n    (check-within (candidate (list 17 22 2 35 15 19 25 5 33 44)) (list 5 2 17 15 22 19 33 25 44 35) 0.001)\n    (check-within (candidate (list 22 3 26 15 1 5 14 28)) (list 3 1 14 5 22 15 28 26) 0.001)\n    (check-within (candidate (list 5 24 3 2 17 9 2 4)) (list 2 2 4 3 9 5 24 17) 0.001)\n    (check-within (candidate (list 2 6 4 7)) (list 4 2 7 6) 0.001)\n    (check-within (candidate (list 1 33 29 21 25 14 26 35 34 30)) (list 14 1 25 21 29 26 33 30 35 34) 0.001)\n    (check-within (candidate (list 50 25 42 41 16 23 47 31 23 16)) (list 16 16 23 23 31 25 42 41 50 47) 0.001)\n    (check-within (candidate (list 31 31 31 12 24 17 11 3 33 13)) (list 11 3 13 12 24 17 31 31 33 31) 0.001)\n    (check-within (candidate (list 8 3 2 7)) (list 3 2 8 7) 0.001)\n    (check-within (candidate (list 8 2 8 6)) (list 6 2 8 8) 0.001)\n    (check-within (candidate (list 4 15 16 2 12 7)) (list 4 2 12 7 16 15) 0.001)\n    (check-within (candidate (list 5 4 2 4)) (list 4 2 5 4) 0.001)\n    (check-within (candidate (list 17 13 7 12 19 15 6 22)) (list 7 6 13 12 17 15 22 19) 0.001)\n    (check-within (candidate (list 2 15 12 16 12 13)) (list 12 2 13 12 16 15) 0.001)\n    (check-within (candidate (list 3 15 18 16 6 7)) (list 6 3 15 7 18 16) 0.001)\n    (check-within (candidate (list 4 7 11 6 11 8)) (list 6 4 8 7 11 11) 0.001)\n    (check-within (candidate (list 1 7 24 23 16 21 9 11)) (list 7 1 11 9 21 16 24 23) 0.001)\n    (check-within (candidate (list 6 3 10 16 15 6)) (list 6 3 10 6 16 15) 0.001)\n    (check-within (candidate (list 17 9 1 29 30 5 31 26)) (list 5 1 17 9 29 26 31 30) 0.001)\n    (check-within (candidate (list 3 6 4 14 9 15)) (list 4 3 9 6 15 14) 0.001)\n    (check-within (candidate (list 37 38 24 15 12 1 37 19 38 11)) (list 11 1 15 12 24 19 37 37 38 38) 0.001)\n    (check-within (candidate (list 17 3 8 12 6 9)) (list 6 3 9 8 17 12) 0.001)\n    (check-within (candidate (list 32 23 27 32 24 26 24 27)) (list 24 23 26 24 27 27 32 32) 0.001)\n    (check-within (candidate (list 15 16 26 6 5 9 22 14)) (list 6 5 14 9 16 15 26 22) 0.001)\n    (check-within (candidate (list 14 21 13 10 2 16 14 30)) (list 10 2 14 13 16 14 30 21) 0.001)\n    (check-within (candidate (list 1 6 30 1 13 25 18 1)) (list 1 1 6 1 18 13 30 25) 0.001)\n    (check-within (candidate (list 32 12 17 32 11 25 22 18 10 1)) (list 10 1 12 11 18 17 25 22 32 32) 0.001)\n    (check-within (candidate (list 2 8 5 6)) (list 5 2 8 6) 0.001)\n    (check-within (candidate (list 27 3 10 25 10 7 15 16)) (list 7 3 10 10 16 15 27 25) 0.001)\n    (check-within (candidate (list 5 18 19 25 13 21 16 7)) (list 7 5 16 13 19 18 25 21) 0.001)\n    (check-within (candidate (list 8 6 6 8)) (list 6 6 8 8) 0.001)\n    (check-within (candidate (list 23 15 39 9 19 10 6 9 33 28)) (list 9 6 10 9 19 15 28 23 39 33) 0.001)\n    (check-within (candidate (list 16 42 47 16 31 39 8 26 50 33)) (list 16 8 26 16 33 31 42 39 50 47) 0.001)\n    (check-within (candidate (list 4 31 9 2 4 28 28 12)) (list 4 2 9 4 28 12 31 28) 0.001)\n    (check-within (candidate (list 9 5 8 11 4 7)) (list 5 4 8 7 11 9) 0.001)\n    (check-within (candidate (list 44 2 23 3 7 2 36 33 7 21)) (list 2 2 7 3 21 7 33 23 44 36) 0.001)\n    (check-within (candidate (list 19 9 4 7 29 22 50 28 2 40)) (list 4 2 9 7 22 19 29 28 50 40) 0.001)\n    (check-within (candidate (list 4 5 5 5)) (list 5 4 5 5) 0.001)\n    (check-within (candidate (list 42 6 44 47 11 6 30 38 41 43)) (list 6 6 30 11 41 38 43 42 47 44) 0.001)\n    (check-within (candidate (list 28 4 47 1 7 35 10 10 5 8)) (list 4 1 7 5 10 8 28 10 47 35) 0.001)\n    (check-within (candidate (list 12 20 14 46 22 1 42 50 47 47)) (list 12 1 20 14 42 22 47 46 50 47) 0.001)\n    (check-within (candidate (list 37 13 1 38 28 46 18 22 12 7)) (list 7 1 13 12 22 18 37 28 46 38) 0.001)\n    (check-within (candidate (list 36 41 5 33 5 30 33 31 6 45)) (list 5 5 30 6 33 31 36 33 45 41) 0.001)\n    (check-within (candidate (list 13 50 42 24 47 41 8 26 34 3)) (list 8 3 24 13 34 26 42 41 50 47) 0.001)\n    (check-within (candidate (list 24 39 26 46 47 9 33 6 33 40)) (list 9 6 26 24 33 33 40 39 47 46) 0.001)\n    (check-within (candidate (list 14 13 17 14 12 15 6 32)) (list 12 6 14 13 15 14 32 17) 0.001)\n    (check-within (candidate (list 46 50 35 11 14 44 17 45 23 34)) (list 14 11 23 17 35 34 45 44 50 46) 0.001)\n    (check-within (candidate (list 8 27 19 7 10 12 14 50 45 14)) (list 8 7 12 10 14 14 27 19 50 45) 0.001)\n    (check-within (candidate (list 9 8 5 7 10 9)) (list 7 5 9 8 10 9) 0.001)\n    (check-within (candidate (list 5 5 3 7)) (list 5 3 7 5) 0.001)\n    (check-within (candidate (list 26 21 7 13 3 10 9 15)) (list 7 3 10 9 15 13 26 21) 0.001)\n    (check-within (candidate (list 8 5 8 3)) (list 5 3 8 8) 0.001)\n    (check-within (candidate (list 18 1 16 18 13 3)) (list 3 1 16 13 18 18) 0.001)\n    (check-within (candidate (list 25 2 17 26 17 20 19 24)) (list 17 2 19 17 24 20 26 25) 0.001)\n    (check-within (candidate (list 24 1 18 25 29 17 9 3)) (list 3 1 17 9 24 18 29 25) 0.001)\n    (check-within (candidate (list 23 17 18 18 18 30 8 19)) (list 17 8 18 18 19 18 30 23) 0.001)\n    (check-within (candidate (list 12 13 13 18 5 16)) (list 12 5 13 13 18 16) 0.001)\n    (check-within (candidate (list 19 4 11 7 24 12 24 14)) (list 7 4 12 11 19 14 24 24) 0.001)\n    (check-within (candidate (list 28 11 11 29 18 2 6 32)) (list 6 2 11 11 28 18 32 29) 0.001)\n    (check-within (candidate (list 12 17 3 31 15 18 18 2)) (list 3 2 15 12 18 17 31 18) 0.001)\n    (check-within (candidate (list 24 6 21 30 29 8 23 18)) (list 8 6 21 18 24 23 30 29) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3227_findMissingAndRepeatedValues", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.\n;; Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.\n;; Example 1:\n;; Input: grid = [[1,3],[2,2]]\n;; Output: [2,4]\n;; Explanation: Number 2 is repeated and number 4 is missing so the answer is [2,4].\n;; Example 2:\n;; Input: grid = [[9,1,7],[8,9,2],[3,4,6]]\n;; Output: [9,5]\n;; Explanation: Number 9 is repeated and number 5 is missing so the answer is [9,5].\n;; Constraints:\n;; 2 <= n == grid.length == grid[i].length <= 50\n;; 1 <= grid[i][j] <= n * n\n;; For all x that 1 <= x <= n * n there is exactly one x that is not equal to any of the grid members.\n;; For all x that 1 <= x <= n * n there is exactly one x that is equal to exactly two of the grid members.\n;; For all x that 1 <= x <= n * n except two of them there is exatly one pair of i, j that 0 <= i, j <= n - 1 and grid[i][j] == x.\n(define (findMissingAndRepeatedValues grid)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3227_findMissingAndRepeatedValues.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findMissingAndRepeatedValues))\n    (check-within (candidate (list (list 1 3) (list 2 2))) (list 2 4) 0.001)\n    (check-within (candidate (list (list 9 1 7) (list 8 9 2) (list 3 4 6))) (list 9 5) 0.001)\n    (check-within (candidate (list (list 1 1) (list 3 2))) (list 1 4) 0.001)\n    (check-within (candidate (list (list 1 1) (list 3 4))) (list 1 2) 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 3))) (list 1 4) 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 4))) (list 1 3) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 3))) (list 3 4) 0.001)\n    (check-within (candidate (list (list 1 2) (list 4 1))) (list 1 3) 0.001)\n    (check-within (candidate (list (list 1 2) (list 4 2))) (list 2 3) 0.001)\n    (check-within (candidate (list (list 1 2) (list 4 4))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 1 4) (list 1 3))) (list 1 2) 0.001)\n    (check-within (candidate (list (list 1 4) (list 2 1))) (list 1 3) 0.001)\n    (check-within (candidate (list (list 1 4) (list 3 1))) (list 1 2) 0.001)\n    (check-within (candidate (list (list 1 4) (list 3 4))) (list 4 2) 0.001)\n    (check-within (candidate (list (list 1 4) (list 4 2))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 2 1) (list 4 2))) (list 2 3) 0.001)\n    (check-within (candidate (list (list 2 1) (list 4 4))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 2 2) (list 3 4))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 2 2) (list 4 1))) (list 2 3) 0.001)\n    (check-within (candidate (list (list 2 3) (list 2 1))) (list 2 4) 0.001)\n    (check-within (candidate (list (list 2 3) (list 4 3))) (list 3 1) 0.001)\n    (check-within (candidate (list (list 2 4) (list 3 2))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 2 4) (list 3 4))) (list 4 1) 0.001)\n    (check-within (candidate (list (list 2 4) (list 4 1))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 3 1) (list 3 2))) (list 3 4) 0.001)\n    (check-within (candidate (list (list 3 1) (list 3 4))) (list 3 2) 0.001)\n    (check-within (candidate (list (list 3 1) (list 4 4))) (list 4 2) 0.001)\n    (check-within (candidate (list (list 3 3) (list 1 4))) (list 3 2) 0.001)\n    (check-within (candidate (list (list 3 4) (list 2 2))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 3 4) (list 2 4))) (list 4 1) 0.001)\n    (check-within (candidate (list (list 3 4) (list 3 1))) (list 3 2) 0.001)\n    (check-within (candidate (list (list 3 4) (list 4 1))) (list 4 2) 0.001)\n    (check-within (candidate (list (list 4 1) (list 1 2))) (list 1 3) 0.001)\n    (check-within (candidate (list (list 4 1) (list 2 2))) (list 2 3) 0.001)\n    (check-within (candidate (list (list 4 1) (list 2 4))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 4 1) (list 3 1))) (list 1 2) 0.001)\n    (check-within (candidate (list (list 4 1) (list 3 3))) (list 3 2) 0.001)\n    (check-within (candidate (list (list 4 1) (list 4 2))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 4 2) (list 2 3))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 4 2) (list 4 1))) (list 4 3) 0.001)\n    (check-within (candidate (list (list 4 3) (list 1 1))) (list 1 2) 0.001)\n    (check-within (candidate (list (list 4 3) (list 2 2))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 4 3) (list 2 4))) (list 4 1) 0.001)\n    (check-within (candidate (list (list 4 3) (list 3 1))) (list 3 2) 0.001)\n    (check-within (candidate (list (list 4 4) (list 2 3))) (list 4 1) 0.001)\n    (check-within (candidate (list (list 1 3 4) (list 9 7 5) (list 8 2 3))) (list 3 6) 0.001)\n    (check-within (candidate (list (list 1 5 2) (list 8 4 3) (list 7 8 6))) (list 8 9) 0.001)\n    (check-within (candidate (list (list 1 5 8) (list 2 7 3) (list 6 1 4))) (list 1 9) 0.001)\n    (check-within (candidate (list (list 1 6 1) (list 4 3 7) (list 5 2 8))) (list 1 9) 0.001)\n    (check-within (candidate (list (list 1 6 4) (list 9 7 5) (list 7 8 2))) (list 7 3) 0.001)\n    (check-within (candidate (list (list 1 6 7) (list 3 6 8) (list 9 5 4))) (list 6 2) 0.001)\n    (check-within (candidate (list (list 1 7 4) (list 8 6 2) (list 8 3 5))) (list 8 9) 0.001)\n    (check-within (candidate (list (list 1 7 8) (list 4 5 6) (list 3 9 9))) (list 9 2) 0.001)\n    (check-within (candidate (list (list 1 8 4) (list 9 2 7) (list 6 3 8))) (list 8 5) 0.001)\n    (check-within (candidate (list (list 1 8 5) (list 4 3 2) (list 7 9 4))) (list 4 6) 0.001)\n    (check-within (candidate (list (list 1 9 3) (list 2 7 8) (list 2 4 5))) (list 2 6) 0.001)\n    (check-within (candidate (list (list 1 9 7) (list 8 4 2) (list 6 3 9))) (list 9 5) 0.001)\n    (check-within (candidate (list (list 2 1 3) (list 2 9 4) (list 6 8 5))) (list 2 7) 0.001)\n    (check-within (candidate (list (list 2 2 4) (list 7 5 3) (list 1 6 8))) (list 2 9) 0.001)\n    (check-within (candidate (list (list 2 3 9) (list 5 6 4) (list 2 8 7))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 2 4 6) (list 4 8 9) (list 7 3 5))) (list 4 1) 0.001)\n    (check-within (candidate (list (list 2 5 5) (list 4 8 7) (list 9 3 6))) (list 5 1) 0.001)\n    (check-within (candidate (list (list 2 6 4) (list 6 9 5) (list 3 7 8))) (list 6 1) 0.001)\n    (check-within (candidate (list (list 2 6 9) (list 1 7 9) (list 4 8 5))) (list 9 3) 0.001)\n    (check-within (candidate (list (list 2 7 1) (list 8 6 2) (list 9 3 4))) (list 2 5) 0.001)\n    (check-within (candidate (list (list 2 7 5) (list 7 6 4) (list 1 3 9))) (list 7 8) 0.001)\n    (check-within (candidate (list (list 2 7 9) (list 6 8 1) (list 4 1 5))) (list 1 3) 0.001)\n    (check-within (candidate (list (list 2 9 7) (list 8 5 1) (list 6 7 4))) (list 7 3) 0.001)\n    (check-within (candidate (list (list 3 4 5) (list 8 2 4) (list 6 1 7))) (list 4 9) 0.001)\n    (check-within (candidate (list (list 3 5 7) (list 8 6 9) (list 1 5 2))) (list 5 4) 0.001)\n    (check-within (candidate (list (list 3 6 1) (list 5 9 2) (list 1 7 8))) (list 1 4) 0.001)\n    (check-within (candidate (list (list 3 9 4) (list 3 6 1) (list 5 7 2))) (list 3 8) 0.001)\n    (check-within (candidate (list (list 4 2 6) (list 3 5 8) (list 3 1 9))) (list 3 7) 0.001)\n    (check-within (candidate (list (list 4 3 2) (list 6 9 9) (list 8 7 5))) (list 9 1) 0.001)\n    (check-within (candidate (list (list 4 6 5) (list 3 5 7) (list 2 8 9))) (list 5 1) 0.001)\n    (check-within (candidate (list (list 4 8 7) (list 4 6 9) (list 3 2 1))) (list 4 5) 0.001)\n    (check-within (candidate (list (list 4 9 6) (list 2 5 8) (list 3 7 7))) (list 7 1) 0.001)\n    (check-within (candidate (list (list 5 3 6) (list 1 4 2) (list 9 8 2))) (list 2 7) 0.001)\n    (check-within (candidate (list (list 5 6 9) (list 3 7 8) (list 2 2 4))) (list 2 1) 0.001)\n    (check-within (candidate (list (list 5 7 8) (list 1 3 2) (list 7 6 9))) (list 7 4) 0.001)\n    (check-within (candidate (list (list 6 1 3) (list 2 4 2) (list 8 9 7))) (list 2 5) 0.001)\n    (check-within (candidate (list (list 6 4 2) (list 3 7 8) (list 5 6 9))) (list 6 1) 0.001)\n    (check-within (candidate (list (list 6 4 5) (list 7 9 3) (list 1 2 9))) (list 9 8) 0.001)\n    (check-within (candidate (list (list 6 4 8) (list 8 1 2) (list 9 3 7))) (list 8 5) 0.001)\n    (check-within (candidate (list (list 6 9 3) (list 8 9 7) (list 5 4 2))) (list 9 1) 0.001)\n    (check-within (candidate (list (list 7 2 1) (list 6 5 3) (list 2 9 4))) (list 2 8) 0.001)\n    (check-within (candidate (list (list 7 2 4) (list 5 8 7) (list 9 3 1))) (list 7 6) 0.001)\n    (check-within (candidate (list (list 7 3 1) (list 8 9 2) (list 4 5 2))) (list 2 6) 0.001)\n    (check-within (candidate (list (list 7 4 2) (list 9 1 9) (list 8 3 5))) (list 9 6) 0.001)\n    (check-within (candidate (list (list 7 4 8) (list 1 1 3) (list 2 6 9))) (list 1 5) 0.001)\n    (check-within (candidate (list (list 7 5 3) (list 4 6 3) (list 9 2 8))) (list 3 1) 0.001)\n    (check-within (candidate (list (list 7 5 7) (list 3 1 6) (list 8 9 4))) (list 7 2) 0.001)\n    (check-within (candidate (list (list 8 2 6) (list 1 8 9) (list 4 5 3))) (list 8 7) 0.001)\n    (check-within (candidate (list (list 8 2 7) (list 3 5 1) (list 9 6 3))) (list 3 4) 0.001)\n    (check-within (candidate (list (list 8 6 3) (list 1 9 5) (list 5 4 7))) (list 5 2) 0.001)\n    (check-within (candidate (list (list 8 6 5) (list 3 9 1) (list 8 7 4))) (list 8 2) 0.001)\n    (check-within (candidate (list (list 8 9 6) (list 6 1 3) (list 2 7 5))) (list 6 4) 0.001)\n    (check-within (candidate (list (list 8 9 6) (list 7 4 2) (list 7 1 5))) (list 7 3) 0.001)\n    (check-within (candidate (list (list 9 2 3) (list 7 6 4) (list 5 8 8))) (list 8 1) 0.001)\n    (check-within (candidate (list (list 9 2 7) (list 3 8 7) (list 1 5 4))) (list 7 6) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3228_maximumSetSize", "language": "rkt", "prompt": "#lang racket\n;; You are given two 0-indexed integer arrays nums1 and nums2 of even length n.\n;; You must remove n / 2 elements from nums1 and n / 2 elements from nums2. After the removals, you insert the remaining elements of nums1 and nums2 into a set s.\n;; Return the maximum possible size of the set s.\n;; Example 1:\n;; Input: nums1 = [1,2,1,2], nums2 = [1,1,1,1]\n;; Output: 2\n;; Explanation: We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\n;; It can be shown that 2 is the maximum possible size of the set s after the removals.\n;; Example 2:\n;; Input: nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]\n;; Output: 5\n;; Explanation: We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\n;; It can be shown that 5 is the maximum possible size of the set s after the removals.\n;; Example 3:\n;; Input: nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]\n;; Output: 6\n;; Explanation: We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\n;; It can be shown that 6 is the maximum possible size of the set s after the removals.\n;; Constraints:\n;; n == nums1.length == nums2.length\n;; 1 <= n <= 2 * 104\n;; n is even.\n;; 1 <= nums1[i], nums2[i] <= 109\n(define (maximumSetSize nums1 nums2)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3228_maximumSetSize.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumSetSize))\n    (check-within (candidate (list 1 2 1 2) (list 1 1 1 1)) 2 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 2 3 2 3 2 3)) 5 0.001)\n    (check-within (candidate (list 1 1 2 2 3 3) (list 4 4 5 5 6 6)) 6 0.001)\n    (check-within (candidate (list 1 2 1 1) (list 1 2 3 4)) 4 0.001)\n    (check-within (candidate (list 1 1 1 1) (list 12 23 41 9)) 3 0.001)\n    (check-within (candidate (list 12 23 41 9) (list 1 1 1 1)) 3 0.001)\n    (check-within (candidate (list 9 8 4 7) (list 5 5 9 5)) 4 0.001)\n    (check-within (candidate (list 8 9) (list 4 3)) 2 0.001)\n    (check-within (candidate (list 7 1) (list 6 10)) 2 0.001)\n    (check-within (candidate (list 10 3) (list 5 6)) 2 0.001)\n    (check-within (candidate (list 3 6) (list 6 6)) 2 0.001)\n    (check-within (candidate (list 5 1) (list 6 6)) 2 0.001)\n    (check-within (candidate (list 10 7) (list 8 4)) 2 0.001)\n    (check-within (candidate (list 10 8 7 9) (list 7 9 9 5)) 4 0.001)\n    (check-within (candidate (list 1 10 6 5) (list 3 7 10 10)) 4 0.001)\n    (check-within (candidate (list 5 2 8 6) (list 7 4 1 1)) 4 0.001)\n    (check-within (candidate (list 2 4 1 4) (list 10 2 4 10)) 4 0.001)\n    (check-within (candidate (list 5 7) (list 3 1)) 2 0.001)\n    (check-within (candidate (list 1 10 1 2) (list 9 5 8 5)) 4 0.001)\n    (check-within (candidate (list 9 4) (list 5 7)) 2 0.001)\n    (check-within (candidate (list 1 5 10 8) (list 1 7 4 10)) 4 0.001)\n    (check-within (candidate (list 6 6 2 9) (list 1 4 10 7)) 4 0.001)\n    (check-within (candidate (list 7 10) (list 6 10)) 2 0.001)\n    (check-within (candidate (list 8 8) (list 6 3)) 2 0.001)\n    (check-within (candidate (list 6 8) (list 9 3)) 2 0.001)\n    (check-within (candidate (list 3 8 1 9) (list 2 5 4 5)) 4 0.001)\n    (check-within (candidate (list 6 1 4 7) (list 10 7 2 2)) 4 0.001)\n    (check-within (candidate (list 8 7 9 3) (list 10 3 8 2)) 4 0.001)\n    (check-within (candidate (list 1 4 5 9) (list 2 5 2 7)) 4 0.001)\n    (check-within (candidate (list 3 5) (list 5 3)) 2 0.001)\n    (check-within (candidate (list 1 10 8 2) (list 2 9 10 7)) 4 0.001)\n    (check-within (candidate (list 3 9) (list 1 4)) 2 0.001)\n    (check-within (candidate (list 1 5) (list 10 5)) 2 0.001)\n    (check-within (candidate (list 7 5) (list 2 10)) 2 0.001)\n    (check-within (candidate (list 6 10) (list 3 1)) 2 0.001)\n    (check-within (candidate (list 9 8 1 3) (list 4 9 8 6)) 4 0.001)\n    (check-within (candidate (list 4 1) (list 9 9)) 2 0.001)\n    (check-within (candidate (list 10 7) (list 10 8)) 2 0.001)\n    (check-within (candidate (list 4 4 3 9) (list 6 8 4 7)) 4 0.001)\n    (check-within (candidate (list 4 10 4 9) (list 5 7 4 2)) 4 0.001)\n    (check-within (candidate (list 8 6) (list 1 7)) 2 0.001)\n    (check-within (candidate (list 9 8 10 7) (list 3 7 7 6)) 4 0.001)\n    (check-within (candidate (list 4 10 9 10) (list 9 7 3 6)) 4 0.001)\n    (check-within (candidate (list 6 7) (list 5 7)) 2 0.001)\n    (check-within (candidate (list 1 1 10 5) (list 6 6 8 5)) 4 0.001)\n    (check-within (candidate (list 5 3 4 2) (list 10 3 7 10)) 4 0.001)\n    (check-within (candidate (list 1 3) (list 9 2)) 2 0.001)\n    (check-within (candidate (list 6 1 6 2) (list 5 4 6 7)) 4 0.001)\n    (check-within (candidate (list 9 9) (list 8 7)) 2 0.001)\n    (check-within (candidate (list 6 2 9 3) (list 10 3 4 7)) 4 0.001)\n    (check-within (candidate (list 6 2 10 1) (list 9 2 6 5)) 4 0.001)\n    (check-within (candidate (list 6 5 6 1) (list 6 2 6 9)) 4 0.001)\n    (check-within (candidate (list 10 5 4 7) (list 5 4 4 9)) 4 0.001)\n    (check-within (candidate (list 7 10 4 6) (list 1 4 4 2)) 4 0.001)\n    (check-within (candidate (list 3 4) (list 1 8)) 2 0.001)\n    (check-within (candidate (list 7 7) (list 7 1)) 2 0.001)\n    (check-within (candidate (list 1 1 2 2 1 1) (list 1 3 2 2 2 1)) 3 0.001)\n    (check-within (candidate (list 3 3 3 2 1 2 1 2) (list 1 2 3 2 2 3 3 1)) 3 0.001)\n    (check-within (candidate (list 1 3 3 2) (list 2 2 1 3)) 3 0.001)\n    (check-within (candidate (list 1 1 1 3 3 3 1 1) (list 3 2 3 2 3 3 3 3)) 3 0.001)\n    (check-within (candidate (list 3 3 1 1 3 2) (list 2 2 1 1 2 2)) 3 0.001)\n    (check-within (candidate (list 2 3 2 3 3 1) (list 2 3 1 2 1 1)) 3 0.001)\n    (check-within (candidate (list 1 1 3 3 1 3 3 3) (list 2 3 1 3 1 1 1 3)) 3 0.001)\n    (check-within (candidate (list 2 3 2 2 1 3 1 1) (list 3 1 2 2 3 1 2 2)) 3 0.001)\n    (check-within (candidate (list 2 2 2 3 1 1 3 3) (list 3 1 3 1 2 3 2 2)) 3 0.001)\n    (check-within (candidate (list 3 3 1 3 2 2 3 1) (list 3 1 2 3 1 3 2 1)) 3 0.001)\n    (check-within (candidate (list 1 1 1 2 1 1 1 1 1 2) (list 3 1 3 3 1 1 3 2 1 3)) 3 0.001)\n    (check-within (candidate (list 3 2 2 3) (list 1 1 1 3)) 3 0.001)\n    (check-within (candidate (list 2 3 3 1 2 1 2 2) (list 1 2 2 1 2 1 2 2)) 3 0.001)\n    (check-within (candidate (list 1 2 1 3 2 3) (list 3 3 1 1 3 3)) 3 0.001)\n    (check-within (candidate (list 1 3 1 3 3 3 3 2 2 2) (list 2 1 3 2 2 3 3 1 1 3)) 3 0.001)\n    (check-within (candidate (list 1 3 1 1 2 2 1 1) (list 2 3 3 1 3 2 3 2)) 3 0.001)\n    (check-within (candidate (list 2 3 2 2 2 2 1 2) (list 3 1 2 3 3 1 2 1)) 3 0.001)\n    (check-within (candidate (list 3 3 2 1 2 3) (list 2 1 1 3 2 2)) 3 0.001)\n    (check-within (candidate (list 1 3 1 2 1 1 2 3) (list 1 2 2 3 2 3 3 3)) 3 0.001)\n    (check-within (candidate (list 1 1 1 3 1 2 1 1) (list 2 3 3 2 3 3 1 1)) 3 0.001)\n    (check-within (candidate (list 3 1 3 3 2 2 2 3 1 1) (list 1 1 2 1 3 3 1 3 2 1)) 3 0.001)\n    (check-within (candidate (list 1 1 1 2 3 2 1 1) (list 2 1 2 2 2 1 3 3)) 3 0.001)\n    (check-within (candidate (list 2 1 3 2 2 2 2 2) (list 1 3 3 2 2 2 3 1)) 3 0.001)\n    (check-within (candidate (list 1 3 1 1) (list 1 3 1 2)) 3 0.001)\n    (check-within (candidate (list 1 3 3 1 3 2) (list 2 1 3 2 2 2)) 3 0.001)\n    (check-within (candidate (list 3 2 3 3 2 2) (list 1 3 1 3 1 1)) 3 0.001)\n    (check-within (candidate (list 1 3 1 3 2 3) (list 2 1 1 1 2 3)) 3 0.001)\n    (check-within (candidate (list 1 1 3 1 3 1) (list 3 3 1 2 2 1)) 3 0.001)\n    (check-within (candidate (list 2 2 2 2 2 3 1 3) (list 2 3 3 2 1 2 3 1)) 3 0.001)\n    (check-within (candidate (list 1 3 1 2 3 1) (list 3 3 2 2 1 3)) 3 0.001)\n    (check-within (candidate (list 2 1 2 2 1 3) (list 1 1 1 3 2 3)) 3 0.001)\n    (check-within (candidate (list 2 2 1 2 1 3 3 1) (list 3 1 3 1 1 3 3 1)) 3 0.001)\n    (check-within (candidate (list 3 1 3 3 2 3) (list 1 3 3 2 2 1)) 3 0.001)\n    (check-within (candidate (list 3 2 1 3 3 2) (list 1 1 3 3 1 2)) 3 0.001)\n    (check-within (candidate (list 2 1 3 2 3 3) (list 2 2 2 3 2 1)) 3 0.001)\n    (check-within (candidate (list 3 3 3 1 2 2 3 1) (list 3 1 2 3 2 3 2 1)) 3 0.001)\n    (check-within (candidate (list 3 1 3 1 2 1 2 2 2 2) (list 2 1 3 1 1 1 2 2 1 3)) 3 0.001)\n    (check-within (candidate (list 1 2 2 1 3 3) (list 1 1 1 3 2 2)) 3 0.001)\n    (check-within (candidate (list 2 1 2 3) (list 3 2 3 2)) 3 0.001)\n    (check-within (candidate (list 3 1 2 2) (list 2 1 1 1)) 3 0.001)\n    (check-within (candidate (list 2 2 3 2) (list 2 1 3 3)) 3 0.001)\n    (check-within (candidate (list 3 3 2 1 3 3 2 3) (list 3 1 2 3 2 2 1 3)) 3 0.001)\n    (check-within (candidate (list 3 3 3 1 2 2) (list 1 3 1 2 2 3)) 3 0.001)\n    (check-within (candidate (list 3 1 1 3 1 1 3 2) (list 3 2 3 3 3 1 2 3)) 3 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3230_removeAlmostEqualCharacters", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed string word.\n;; In one operation, you can pick any index i of word and change word[i] to any lowercase English letter.\n;; Return the minimum number of operations needed to remove all adjacent almost-equal characters from word.\n;; Two characters a and b are almost-equal if a == b or a and b are adjacent in the alphabet.\n;; Example 1:\n;; Input: word = \"aaaaa\"\n;; Output: 2\n;; Explanation: We can change word into \"acaca\" which does not have any adjacent almost-equal characters.\n;; It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\n;; Example 2:\n;; Input: word = \"abddez\"\n;; Output: 2\n;; Explanation: We can change word into \"ybdoez\" which does not have any adjacent almost-equal characters.\n;; It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\n;; Example 3:\n;; Input: word = \"zyxyxyz\"\n;; Output: 3\n;; Explanation: We can change word into \"zaxaxaz\" which does not have any adjacent almost-equal characters. \n;; It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3.\n;; Constraints:\n;; 1 <= word.length <= 100\n;; word consists only of lowercase English letters.\n(define (removeAlmostEqualCharacters word)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3230_removeAlmostEqualCharacters.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate removeAlmostEqualCharacters))\n    (check-within (candidate aaaaa) 2 0.001)\n    (check-within (candidate abddez) 2 0.001)\n    (check-within (candidate zyxyxyz) 3 0.001)\n    (check-within (candidate a) 0 0.001)\n    (check-within (candidate b) 0 0.001)\n    (check-within (candidate c) 0 0.001)\n    (check-within (candidate aa) 1 0.001)\n    (check-within (candidate ab) 1 0.001)\n    (check-within (candidate ac) 0 0.001)\n    (check-within (candidate ba) 1 0.001)\n    (check-within (candidate bb) 1 0.001)\n    (check-within (candidate bc) 1 0.001)\n    (check-within (candidate ca) 0 0.001)\n    (check-within (candidate cb) 1 0.001)\n    (check-within (candidate cc) 1 0.001)\n    (check-within (candidate aaa) 1 0.001)\n    (check-within (candidate aab) 1 0.001)\n    (check-within (candidate aac) 1 0.001)\n    (check-within (candidate aba) 1 0.001)\n    (check-within (candidate abb) 1 0.001)\n    (check-within (candidate abc) 1 0.001)\n    (check-within (candidate aca) 0 0.001)\n    (check-within (candidate acb) 1 0.001)\n    (check-within (candidate acc) 1 0.001)\n    (check-within (candidate baa) 1 0.001)\n    (check-within (candidate bab) 1 0.001)\n    (check-within (candidate bac) 1 0.001)\n    (check-within (candidate bba) 1 0.001)\n    (check-within (candidate bbb) 1 0.001)\n    (check-within (candidate bbc) 1 0.001)\n    (check-within (candidate bca) 1 0.001)\n    (check-within (candidate bcb) 1 0.001)\n    (check-within (candidate bcc) 1 0.001)\n    (check-within (candidate caa) 1 0.001)\n    (check-within (candidate cab) 1 0.001)\n    (check-within (candidate cac) 0 0.001)\n    (check-within (candidate cba) 1 0.001)\n    (check-within (candidate cbb) 1 0.001)\n    (check-within (candidate cbc) 1 0.001)\n    (check-within (candidate cca) 1 0.001)\n    (check-within (candidate ccb) 1 0.001)\n    (check-within (candidate ccc) 1 0.001)\n    (check-within (candidate aaaa) 2 0.001)\n    (check-within (candidate aaab) 2 0.001)\n    (check-within (candidate aaac) 1 0.001)\n    (check-within (candidate aaba) 2 0.001)\n    (check-within (candidate aabb) 2 0.001)\n    (check-within (candidate aabc) 2 0.001)\n    (check-within (candidate aaca) 1 0.001)\n    (check-within (candidate aacb) 2 0.001)\n    (check-within (candidate aacc) 2 0.001)\n    (check-within (candidate abaa) 2 0.001)\n    (check-within (candidate abab) 2 0.001)\n    (check-within (candidate abac) 1 0.001)\n    (check-within (candidate abba) 2 0.001)\n    (check-within (candidate abbb) 2 0.001)\n    (check-within (candidate abbc) 2 0.001)\n    (check-within (candidate abca) 1 0.001)\n    (check-within (candidate abcb) 2 0.001)\n    (check-within (candidate abcc) 2 0.001)\n    (check-within (candidate acaa) 1 0.001)\n    (check-within (candidate acab) 1 0.001)\n    (check-within (candidate acac) 0 0.001)\n    (check-within (candidate acba) 1 0.001)\n    (check-within (candidate acbb) 1 0.001)\n    (check-within (candidate acbc) 1 0.001)\n    (check-within (candidate acca) 1 0.001)\n    (check-within (candidate accb) 1 0.001)\n    (check-within (candidate accc) 1 0.001)\n    (check-within (candidate baaa) 2 0.001)\n    (check-within (candidate baab) 2 0.001)\n    (check-within (candidate baac) 1 0.001)\n    (check-within (candidate baba) 2 0.001)\n    (check-within (candidate babb) 2 0.001)\n    (check-within (candidate babc) 2 0.001)\n    (check-within (candidate baca) 1 0.001)\n    (check-within (candidate bacb) 2 0.001)\n    (check-within (candidate bacc) 2 0.001)\n    (check-within (candidate bbaa) 2 0.001)\n    (check-within (candidate bbab) 2 0.001)\n    (check-within (candidate bbac) 1 0.001)\n    (check-within (candidate bbba) 2 0.001)\n    (check-within (candidate bbbb) 2 0.001)\n    (check-within (candidate bbbc) 2 0.001)\n    (check-within (candidate bbca) 1 0.001)\n    (check-within (candidate bbcb) 2 0.001)\n    (check-within (candidate bbcc) 2 0.001)\n    (check-within (candidate bcaa) 2 0.001)\n    (check-within (candidate bcab) 2 0.001)\n    (check-within (candidate bcac) 1 0.001)\n    (check-within (candidate bcba) 2 0.001)\n    (check-within (candidate bcbb) 2 0.001)\n    (check-within (candidate bcbc) 2 0.001)\n    (check-within (candidate bcca) 1 0.001)\n    (check-within (candidate bccb) 2 0.001)\n    (check-within (candidate bccc) 2 0.001)\n    (check-within (candidate caaa) 1 0.001)\n    (check-within (candidate caab) 1 0.001)\n    (check-within (candidate caac) 1 0.001)\n    (check-within (candidate caba) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3231_minimumAddedCoins", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array coins, representing the values of the coins available, and an integer target.\n;; An integer x is obtainable if there exists a subsequence of coins that sums to x.\n;; Return the minimum number of coins of any value that need to be added to the array so that every integer in the range [1, target] is obtainable.\n;; A subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n;; Example 1:\n;; Input: coins = [1,4,10], target = 19\n;; Output: 2\n;; Explanation: We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10].\n;; It can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array. \n;; Example 2:\n;; Input: coins = [1,4,10,5,7,19], target = 19\n;; Output: 1\n;; Explanation: We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19].\n;; It can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array. \n;; Example 3:\n;; Input: coins = [1,1,1], target = 20\n;; Output: 3\n;; Explanation: We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16].\n;; It can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array.\n;; Constraints:\n;; 1 <= target <= 105\n;; 1 <= coins.length <= 105\n;; 1 <= coins[i] <= target\n(define (minimumAddedCoins coins target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3231_minimumAddedCoins.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumAddedCoins))\n    (check-within (candidate (list 1 4 10) 19) 2 0.001)\n    (check-within (candidate (list 1 4 10 5 7 19) 19) 1 0.001)\n    (check-within (candidate (list 1 1 1) 20) 3 0.001)\n    (check-within (candidate (list 1) 100000) 16 0.001)\n    (check-within (candidate (list 100000) 100000) 17 0.001)\n    (check-within (candidate (list 2) 5) 2 0.001)\n    (check-within (candidate (list 5 6 7) 10) 3 0.001)\n    (check-within (candidate (list 5 6 7) 15) 3 0.001)\n    (check-within (candidate (list 4 11 13 15 7 5 12 11 5 9) 34) 2 0.001)\n    (check-within (candidate (list 8 12 9) 27) 3 0.001)\n    (check-within (candidate (list 2 13 7 1 11) 35) 1 0.001)\n    (check-within (candidate (list 10 3 5 11 6) 27) 2 0.001)\n    (check-within (candidate (list 6 6 6 15 4) 31) 2 0.001)\n    (check-within (candidate (list 6 15 6) 22) 3 0.001)\n    (check-within (candidate (list 8 14 15 4 14 15 8 10 8) 42) 2 0.001)\n    (check-within (candidate (list 9 14 14 9 14 5 12 10 11) 17) 3 0.001)\n    (check-within (candidate (list 14 5 13 3 7 10 10 10) 32) 2 0.001)\n    (check-within (candidate (list 8 6 7 12) 26) 3 0.001)\n    (check-within (candidate (list 15 1 12) 43) 4 0.001)\n    (check-within (candidate (list 4 1 4 10) 16) 1 0.001)\n    (check-within (candidate (list 10 2 13 5 7 15) 26) 2 0.001)\n    (check-within (candidate (list 10 1 10) 10) 3 0.001)\n    (check-within (candidate (list 9 5 13 8) 30) 3 0.001)\n    (check-within (candidate (list 13 9 4 5) 37) 3 0.001)\n    (check-within (candidate (list 1 15 5 12 13 10 14 8 1 7) 29) 1 0.001)\n    (check-within (candidate (list 14 14 6 2 9 1 4 10) 38) 0 0.001)\n    (check-within (candidate (list 7 10 6 14 10 11 2) 45) 2 0.001)\n    (check-within (candidate (list 6 3 2 6 8 9 13 3 12 13) 47) 1 0.001)\n    (check-within (candidate (list 8 1 9 2 15) 34) 1 0.001)\n    (check-within (candidate (list 5 13 9 11 6 1) 27) 2 0.001)\n    (check-within (candidate (list 10 15 7 14 2 2 12 14 13) 45) 2 0.001)\n    (check-within (candidate (list 9 3 10 3 8 2 7 11 1) 26) 0 0.001)\n    (check-within (candidate (list 9 11 2 5 2 7 11) 28) 1 0.001)\n    (check-within (candidate (list 5 5 15 3 13) 17) 2 0.001)\n    (check-within (candidate (list 2 2 9 10 7 15 4 3 9 15) 16) 1 0.001)\n    (check-within (candidate (list 3 1 12 15 5 10) 34) 1 0.001)\n    (check-within (candidate (list 12 7 5 2 12) 50) 3 0.001)\n    (check-within (candidate (list 11 6 10 3 1 7 11) 44) 1 0.001)\n    (check-within (candidate (list 13 12 1 11 3 4 11 9 13 13) 41) 1 0.001)\n    (check-within (candidate (list 6 4 1 9 9 2 10 7) 48) 0 0.001)\n    (check-within (candidate (list 10 4 4 3 9 6 8 4 7 7) 22) 2 0.001)\n    (check-within (candidate (list 15 9 5 7 4 13) 19) 2 0.001)\n    (check-within (candidate (list 13 11 8 6 11) 16) 3 0.001)\n    (check-within (candidate (list 8 14 15 9 8 10 13 7 3) 42) 2 0.001)\n    (check-within (candidate (list 6 14 7 4 10 9 10 9 7) 22) 2 0.001)\n    (check-within (candidate (list 4 6 7 15 13 14 5 7) 16) 2 0.001)\n    (check-within (candidate (list 10 12 5) 32) 3 0.001)\n    (check-within (candidate (list 8 5 14 13 13 11 14 13) 43) 3 0.001)\n    (check-within (candidate (list 3 14 4 2 10 3 7) 50) 2 0.001)\n    (check-within (candidate (list 1 3 11 9 2 10 6 12) 12) 0 0.001)\n    (check-within (candidate (list 2 5 4 12 6 7 11 15) 17) 1 0.001)\n    (check-within (candidate (list 7 12 10 15 6 15 14 2 9 12) 24) 2 0.001)\n    (check-within (candidate (list 4 7 15 10 14) 38) 2 0.001)\n    (check-within (candidate (list 10 1 12 9) 16) 3 0.001)\n    (check-within (candidate (list 5 8 12 6 15 13 11 5) 35) 3 0.001)\n    (check-within (candidate (list 6 2 6) 39) 3 0.001)\n    (check-within (candidate (list 15 10 5 4 7 12 12 5 11) 30) 2 0.001)\n    (check-within (candidate (list 9 10 7 12 10 4) 35) 2 0.001)\n    (check-within (candidate (list 4 4 2) 8) 1 0.001)\n    (check-within (candidate (list 13 4 15 1 8) 25) 1 0.001)\n    (check-within (candidate (list 14 7 7 1 6 14 3 15 13) 18) 1 0.001)\n    (check-within (candidate (list 8 2 14 2 3 10 15 5) 31) 1 0.001)\n    (check-within (candidate (list 3 7 12 10 11 5 3) 36) 2 0.001)\n    (check-within (candidate (list 5 3 14 8 10) 33) 2 0.001)\n    (check-within (candidate (list 9 14 9 14 4 1 4 12 12) 41) 1 0.001)\n    (check-within (candidate (list 6 3 9 7 3 4 4 15 15 10) 47) 2 0.001)\n    (check-within (candidate (list 4 9 6) 43) 3 0.001)\n    (check-within (candidate (list 12 9 13 12 10 4 9 9 4) 28) 2 0.001)\n    (check-within (candidate (list 6 8 2 13 1 5 6) 31) 1 0.001)\n    (check-within (candidate (list 9 8 9 9 3 5 10 15 1) 45) 1 0.001)\n    (check-within (candidate (list 1 10 15 15) 24) 3 0.001)\n    (check-within (candidate (list 9 12 2) 43) 4 0.001)\n    (check-within (candidate (list 14 13 10 2 2) 16) 2 0.001)\n    (check-within (candidate (list 11 5 5 13 4 13 10 3 4) 21) 2 0.001)\n    (check-within (candidate (list 8 9 1 5 8 7 6 8 6) 47) 2 0.001)\n    (check-within (candidate (list 4 10 9) 18) 3 0.001)\n    (check-within (candidate (list 7 9 7 6 8 11) 50) 3 0.001)\n    (check-within (candidate (list 11 6 6 14 12 2) 46) 2 0.001)\n    (check-within (candidate (list 8 9 2) 31) 3 0.001)\n    (check-within (candidate (list 12 1 4 3 5 3) 18) 1 0.001)\n    (check-within (candidate (list 4 3 13) 34) 3 0.001)\n    (check-within (candidate (list 9 11 3) 22) 3 0.001)\n    (check-within (candidate (list 1 11 15 1 10 13 7 6 12) 28) 1 0.001)\n    (check-within (candidate (list 1 10 8 7 12) 19) 2 0.001)\n    (check-within (candidate (list 1 5 15 13 8 4 5 7) 29) 1 0.001)\n    (check-within (candidate (list 3 8 13 8 5 3 7 2 9 8) 50) 1 0.001)\n    (check-within (candidate (list 4 13 12) 47) 4 0.001)\n    (check-within (candidate (list 9 3 10 9 11) 48) 3 0.001)\n    (check-within (candidate (list 8 7 6 1 9 5 5) 13) 2 0.001)\n    (check-within (candidate (list 11 9 1 15) 16) 3 0.001)\n    (check-within (candidate (list 8 13 8) 27) 3 0.001)\n    (check-within (candidate (list 7 10 11 3 10 14) 36) 2 0.001)\n    (check-within (candidate (list 14 9 6 11 13 8 8 5 6) 22) 3 0.001)\n    (check-within (candidate (list 9 3 6 10 11 1 5 14 3) 27) 1 0.001)\n    (check-within (candidate (list 4 5 9 6 2 2 10 5 13) 43) 1 0.001)\n    (check-within (candidate (list 3 10 2 13 6 13 14 14 3) 28) 1 0.001)\n    (check-within (candidate (list 14 15 15 12 13 4 15) 38) 3 0.001)\n    (check-within (candidate (list 10 5 12 11 9 8 1) 12) 2 0.001)\n    (check-within (candidate (list 15 13 12 4) 31) 3 0.001)\n    (check-within (candidate (list 4 5 14 13 10 12) 31) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3233_maxPartitionsAfterOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed string s and an integer k.\n;; You are to perform the following partitioning operations until s is empty:\n;; Choose the longest prefix of s containing at most k distinct characters.\n;; Delete the prefix from s and increase the number of partitions by one. The remaining characters (if any) in s maintain their initial order.\n;; Before the operations, you are allowed to change at most one index in s to another lowercase English letter.\n;; Return an integer denoting the maximum number of resulting partitions after the operations by optimally choosing at most one index to change.\n;; Example 1:\n;; Input: s = \"accca\", k = 2\n;; Output: 3\n;; Explanation: In this example, to maximize the number of resulting partitions, s[2] can be changed to 'b'.\n;; s becomes \"acbca\".\n;; The operations can now be performed as follows until s becomes empty:\n;; - Choose the longest prefix containing at most 2 distinct characters, \"acbca\".\n;; - Delete the prefix, and s becomes \"bca\". The number of partitions is now 1.\n;; - Choose the longest prefix containing at most 2 distinct characters, \"bca\".\n;; - Delete the prefix, and s becomes \"a\". The number of partitions is now 2.\n;; - Choose the longest prefix containing at most 2 distinct characters, \"a\".\n;; - Delete the prefix, and s becomes empty. The number of partitions is now 3.\n;; Hence, the answer is 3.\n;; It can be shown that it is not possible to obtain more than 3 partitions.\n;; Example 2:\n;; Input: s = \"aabaab\", k = 3\n;; Output: 1\n;; Explanation: In this example, to maximize the number of resulting partitions we can leave s as it is.\n;; The operations can now be performed as follows until s becomes empty: \n;; - Choose the longest prefix containing at most 3 distinct characters, \"aabaab\".\n;; - Delete the prefix, and s becomes empty. The number of partitions becomes 1. \n;; Hence, the answer is 1. \n;; It can be shown that it is not possible to obtain more than 1 partition.\n;; Example 3:\n;; Input: s = \"xxyz\", k = 1\n;; Output: 4\n;; Explanation: In this example, to maximize the number of resulting partitions, s[1] can be changed to 'a'.\n;; s becomes \"xayz\".\n;; The operations can now be performed as follows until s becomes empty:\n;; - Choose the longest prefix containing at most 1 distinct character, \"xayz\".\n;; - Delete the prefix, and s becomes \"ayz\". The number of partitions is now 1.\n;; - Choose the longest prefix containing at most 1 distinct character, \"ayz\".\n;; - Delete the prefix, and s becomes \"yz\". The number of partitions is now 2.\n;; - Choose the longest prefix containing at most 1 distinct character, \"yz\".\n;; - Delete the prefix, and s becomes \"z\". The number of partitions is now 3.\n;; - Choose the longest prefix containing at most 1 distinct character, \"z\".\n;; - Delete the prefix, and s becomes empty. The number of partitions is now 4.\n;; Hence, the answer is 4.\n;; It can be shown that it is not possible to obtain more than 4 partitions.\n;; Constraints:\n;; 1 <= s.length <= 104\n;; s consists only of lowercase English letters.\n;; 1 <= k <= 26\n(define (maxPartitionsAfterOperations s k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3233_maxPartitionsAfterOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxPartitionsAfterOperations))\n    (check-within (candidate accca 2) 3 0.001)\n    (check-within (candidate aabaab 3) 1 0.001)\n    (check-within (candidate xxyz 1) 4 0.001)\n    (check-within (candidate c 3) 1 0.001)\n    (check-within (candidate c 5) 1 0.001)\n    (check-within (candidate h 17) 1 0.001)\n    (check-within (candidate p 13) 1 0.001)\n    (check-within (candidate ab 5) 1 0.001)\n    (check-within (candidate ba 1) 2 0.001)\n    (check-within (candidate ba 3) 1 0.001)\n    (check-within (candidate ca 1) 2 0.001)\n    (check-within (candidate fh 8) 1 0.001)\n    (check-within (candidate abb 1) 3 0.001)\n    (check-within (candidate aca 2) 2 0.001)\n    (check-within (candidate acb 2) 2 0.001)\n    (check-within (candidate acb 4) 1 0.001)\n    (check-within (candidate bab 3) 1 0.001)\n    (check-within (candidate cba 1) 3 0.001)\n    (check-within (candidate cbb 5) 1 0.001)\n    (check-within (candidate cca 5) 1 0.001)\n    (check-within (candidate fjz 11) 1 0.001)\n    (check-within (candidate jxg 23) 1 0.001)\n    (check-within (candidate xfj 5) 1 0.001)\n    (check-within (candidate abcc 4) 1 0.001)\n    (check-within (candidate acab 1) 4 0.001)\n    (check-within (candidate altj 5) 1 0.001)\n    (check-within (candidate baac 3) 2 0.001)\n    (check-within (candidate baca 2) 2 0.001)\n    (check-within (candidate bbkk 3) 1 0.001)\n    (check-within (candidate cbcc 4) 1 0.001)\n    (check-within (candidate toqm 14) 1 0.001)\n    (check-within (candidate yhbo 9) 1 0.001)\n    (check-within (candidate aaabc 1) 5 0.001)\n    (check-within (candidate accba 3) 2 0.001)\n    (check-within (candidate bcbab 1) 5 0.001)\n    (check-within (candidate bccaa 5) 1 0.001)\n    (check-within (candidate caaaa 3) 1 0.001)\n    (check-within (candidate cacaa 4) 1 0.001)\n    (check-within (candidate cacac 1) 5 0.001)\n    (check-within (candidate cbbab 5) 1 0.001)\n    (check-within (candidate ccacb 5) 1 0.001)\n    (check-within (candidate ccbba 5) 1 0.001)\n    (check-within (candidate yhqlp 4) 2 0.001)\n    (check-within (candidate aabaaa 5) 1 0.001)\n    (check-within (candidate acbabb 1) 6 0.001)\n    (check-within (candidate bbaaab 4) 1 0.001)\n    (check-within (candidate bbbcca 4) 1 0.001)\n    (check-within (candidate bbcaab 4) 1 0.001)\n    (check-within (candidate cacbaa 1) 6 0.001)\n    (check-within (candidate hnhdfs 5) 2 0.001)\n    (check-within (candidate nihnrq 1) 6 0.001)\n    (check-within (candidate odxttm 19) 1 0.001)\n    (check-within (candidate uxqozq 11) 1 0.001)\n    (check-within (candidate aabcaac 5) 1 0.001)\n    (check-within (candidate aabcacc 2) 3 0.001)\n    (check-within (candidate abbaaca 2) 3 0.001)\n    (check-within (candidate baacaac 3) 2 0.001)\n    (check-within (candidate baacbaa 5) 1 0.001)\n    (check-within (candidate baacccb 1) 6 0.001)\n    (check-within (candidate baccacb 3) 3 0.001)\n    (check-within (candidate baccccb 2) 3 0.001)\n    (check-within (candidate bcbbccb 2) 3 0.001)\n    (check-within (candidate cbbcaab 4) 1 0.001)\n    (check-within (candidate ccabbaa 2) 3 0.001)\n    (check-within (candidate cccabcc 3) 2 0.001)\n    (check-within (candidate tmdhzhy 26) 1 0.001)\n    (check-within (candidate abhujxlb 13) 1 0.001)\n    (check-within (candidate acabcbcb 5) 1 0.001)\n    (check-within (candidate acbcbcac 2) 4 0.001)\n    (check-within (candidate adklnsqm 13) 1 0.001)\n    (check-within (candidate bababaca 4) 1 0.001)\n    (check-within (candidate bcacbaaa 2) 4 0.001)\n    (check-within (candidate bcccbacc 5) 1 0.001)\n    (check-within (candidate aaaabcccb 1) 6 0.001)\n    (check-within (candidate acabcaacc 2) 4 0.001)\n    (check-within (candidate bcbbabcaa 4) 1 0.001)\n    (check-within (candidate bccaabcaa 2) 4 0.001)\n    (check-within (candidate cbcabbcca 4) 1 0.001)\n    (check-within (candidate ccbaabbba 2) 4 0.001)\n    (check-within (candidate aaaaabbcab 5) 1 0.001)\n    (check-within (candidate aababbbbca 4) 1 0.001)\n    (check-within (candidate aabbbbccab 1) 7 0.001)\n    (check-within (candidate abbcbbcbba 1) 8 0.001)\n    (check-within (candidate abcbbaccbb 5) 1 0.001)\n    (check-within (candidate acabacccac 5) 1 0.001)\n    (check-within (candidate acbbcacbab 5) 1 0.001)\n    (check-within (candidate bbaccabbac 4) 1 0.001)\n    (check-within (candidate bbbbcbcbbc 2) 3 0.001)\n    (check-within (candidate bsoefqekpl 6) 2 0.001)\n    (check-within (candidate caacccbcac 3) 2 0.001)\n    (check-within (candidate cccacccbcb 2) 3 0.001)\n    (check-within (candidate vwfyagymtp 20) 1 0.001)\n    (check-within (candidate abaaccbaaaa 2) 4 0.001)\n    (check-within (candidate abcccaccccc 2) 3 0.001)\n    (check-within (candidate cbbbccaacaa 3) 2 0.001)\n    (check-within (candidate ccaaabaaaaa 2) 3 0.001)\n    (check-within (candidate wcmgarcruky 10) 1 0.001)\n    (check-within (candidate yyogqjsswyn 17) 1 0.001)\n    (check-within (candidate aaaccccbbbca 1) 7 0.001)\n    (check-within (candidate baaccaabaccc 5) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3234_getGoodIndices", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed 2D array variables where variables[i] = [ai, bi, ci, mi], and an integer target.\n;; An index i is good if the following formula holds:\n;; 0 <= i < variables.length\n;; ((aibi % 10)ci) % mi == target\n;; Return an array consisting of good indices in any order.\n;; Example 1:\n;; Input: variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\n;; Output: [0,2]\n;; Explanation: For each index i in the variables array:\n;; 1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n;; 2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n;; 3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\n;; Therefore we return [0,2] as the answer.\n;; Example 2:\n;; Input: variables = [[39,3,1000,1000]], target = 17\n;; Output: []\n;; Explanation: For each index i in the variables array:\n;; 1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\n;; Therefore we return [] as the answer.\n;; Constraints:\n;; 1 <= variables.length <= 100\n;; variables[i] == [ai, bi, ci, mi]\n;; 1 <= ai, bi, ci, mi <= 103\n;; 0 <= target <= 103\n(define (getGoodIndices variables target)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3234_getGoodIndices.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate getGoodIndices))\n    (check-within (candidate (list (list 2 3 3 10) (list 3 3 3 1) (list 6 1 1 4)) 2) (list 0 2) 0.001)\n    (check-within (candidate (list (list 39 3 1000 1000)) 17) (list ) 0.001)\n    (check-within (candidate (list (list 3 2 4 2) (list 3 3 1 3) (list 2 2 2 4) (list 4 4 2 3) (list 2 4 1 3)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 9 2 8 5) (list 7 8 8 8) (list 8 9 6 1) (list 8 6 2 2) (list 3 6 3 1)) 9) (list ) 0.001)\n    (check-within (candidate (list (list 2 2 3 2) (list 1 3 3 2) (list 3 2 2 3) (list 3 1 2 3) (list 1 2 3 1) (list 2 2 2 2) (list 2 1 3 1) (list 3 2 2 2) (list 2 1 3 1) (list 3 3 1 3)) 0) (list 0 2 3 4 5 6 8) 0.001)\n    (check-within (candidate (list (list 1 3 2 3) (list 4 2 3 3) (list 4 1 4 4) (list 4 2 3 1) (list 4 2 1 1) (list 1 2 4 1) (list 1 1 4 2) (list 1 4 4 3) (list 1 2 2 3)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 5 4 1 3) (list 2 5 5 1) (list 5 3 4 1)) 5) (list ) 0.001)\n    (check-within (candidate (list (list 4 7 6 7) (list 7 6 6 4) (list 6 8 2 3) (list 8 3 5 8)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 0) (list 0 1 2 3 4 5 6) 0.001)\n    (check-within (candidate (list (list 3 5 1 2) (list 3 2 5 2) (list 4 4 3 2) (list 3 2 5 3) (list 1 5 1 4)) 1) (list 0 1 4) 0.001)\n    (check-within (candidate (list (list 1 2 1 1) (list 2 2 2 2) (list 1 1 1 2) (list 1 2 2 2)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 3 3 5 6) (list 8 2 9 2) (list 1 4 6 1) (list 6 4 7 7)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 3 5 4 3) (list 1 3 3 1) (list 3 3 5 5) (list 4 5 5 5) (list 5 1 4 3) (list 2 5 3 4)) 7) (list ) 0.001)\n    (check-within (candidate (list (list 9 7 2 7) (list 9 1 8 1) (list 9 3 5 6) (list 6 1 8 4) (list 9 6 2 3)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 10 6 8 7) (list 3 6 1 8)) 5) (list ) 0.001)\n    (check-within (candidate (list (list 4 6 5 2) (list 2 6 4 6) (list 4 6 3 6) (list 2 2 6 5) (list 6 5 5 2)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 5 6 5 1) (list 4 3 1 6) (list 5 4 4 2)) 4) (list 1) 0.001)\n    (check-within (candidate (list (list 5 1 2 4) (list 4 5 5 5) (list 5 9 7 4) (list 7 9 6 3) (list 1 8 6 1) (list 1 1 9 9) (list 3 7 6 5) (list 2 6 2 6)) 1) (list 0 2 3 5) 0.001)\n    (check-within (candidate (list (list 1 3 2 5) (list 5 4 1 2) (list 2 2 3 2) (list 4 2 5 4) (list 1 5 4 1) (list 2 2 5 2) (list 3 3 2 1) (list 2 5 4 3) (list 2 1 5 1)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 3 2 1 3) (list 1 2 1 1) (list 2 1 3 2) (list 2 3 1 3) (list 3 3 1 1) (list 2 3 2 1) (list 2 1 3 3) (list 1 2 2 2) (list 3 2 1 3)) 1) (list 7) 0.001)\n    (check-within (candidate (list (list 3 3 2 2) (list 3 3 2 2)) 0) (list ) 0.001)\n    (check-within (candidate (list (list 1 6 7 5) (list 6 3 1 5) (list 7 5 5 4) (list 6 2 2 4) (list 6 1 1 2) (list 2 6 5 4)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 7 8 9 3) (list 7 8 2 8) (list 2 4 4 8) (list 8 8 4 4)) 6) (list ) 0.001)\n    (check-within (candidate (list (list 6 7 6 6) (list 1 2 4 8) (list 6 4 2 4) (list 3 2 4 5)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 2 3 1 1) (list 3 2 1 1) (list 2 1 2 3)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 9 8 10 1) (list 7 1 3 9) (list 6 8 9 10) (list 4 8 8 9)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 4 3 2 2) (list 3 6 4 6) (list 1 4 1 4) (list 5 2 5 1) (list 8 3 6 3) (list 8 4 8 3)) 6) (list ) 0.001)\n    (check-within (candidate (list (list 3 4 4 2) (list 4 4 1 2) (list 1 1 3 2) (list 3 1 4 3) (list 2 2 3 4) (list 2 3 2 4) (list 3 1 4 4) (list 1 4 1 4) (list 3 2 1 4)) 0) (list 1 3 4 5) 0.001)\n    (check-within (candidate (list (list 2 1 1 1) (list 2 2 2 2) (list 1 2 1 2) (list 1 1 1 1) (list 1 1 1 1) (list 2 1 2 2) (list 1 1 2 1) (list 2 2 2 2)) 0) (list 0 1 3 4 5 6 7) 0.001)\n    (check-within (candidate (list (list 3 1 2 4) (list 3 3 4 2) (list 3 4 3 4) (list 3 3 4 2)) 1) (list 0 1 2 3) 0.001)\n    (check-within (candidate (list (list 4 10 5 8) (list 7 7 5 8) (list 4 8 6 2) (list 6 3 3 2)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 3 5 3 6) (list 3 1 6 3) (list 6 4 1 5) (list 3 2 3 5) (list 1 4 7 5) (list 6 6 6 2) (list 7 5 6 3) (list 1 2 7 1) (list 1 1 6 3)) 4) (list 3) 0.001)\n    (check-within (candidate (list (list 1 4 2 3) (list 4 3 1 4) (list 3 3 1 3) (list 1 4 1 3)) 0) (list 1) 0.001)\n    (check-within (candidate (list (list 1 4 2 2) (list 5 5 1 2) (list 3 4 2 3)) 6) (list ) 0.001)\n    (check-within (candidate (list (list 3 5 1 1) (list 4 8 6 8) (list 5 1 4 9) (list 4 3 1 2) (list 5 9 4 7) (list 8 7 7 1) (list 9 3 7 5)) 0) (list 0 1 3 5) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 2 2 2 1) (list 2 2 2 1) (list 2 2 2 2) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 5 5 6 5) (list 4 1 2 2) (list 6 2 5 3) (list 1 1 5 5) (list 3 5 6 5)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 1 4 1 3) (list 2 4 4 1) (list 1 1 3 1) (list 2 3 3 1)) 0) (list 1 2 3) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 4 2 1 7) (list 3 3 7 1) (list 5 5 8 2) (list 5 1 3 1)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 1 5 7 2) (list 2 10 7 10) (list 6 8 2 2) (list 9 4 1 2) (list 1 7 4 1)) 3) (list ) 0.001)\n    (check-within (candidate (list (list 5 5 3 5) (list 4 2 5 9) (list 4 6 6 1) (list 4 5 3 6)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 2 1) (list 1 1 3 2) (list 2 3 3 2) (list 1 2 3 2) (list 1 1 1 3) (list 2 2 1 2)) 3) (list ) 0.001)\n    (check-within (candidate (list (list 4 1 3 5) (list 4 7 1 6) (list 7 3 5 4) (list 2 4 2 7) (list 6 3 4 7)) 7) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 4 2 3 7) (list 2 9 6 2) (list 3 8 9 2) (list 1 7 7 3) (list 1 3 8 1) (list 2 4 5 1) (list 3 6 3 2) (list 4 4 6 8)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 8 3 7 1) (list 7 8 3 2) (list 4 1 5 3) (list 6 6 6 3) (list 2 4 7 5)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 6 6) (list 1 1 1 2) (list 3 6 6 1) (list 4 5 5 6) (list 3 1 6 6) (list 3 2 2 1) (list 6 1 1 2)) 6) (list ) 0.001)\n    (check-within (candidate (list (list 4 2 2 1) (list 6 3 2 1) (list 2 4 3 2) (list 1 1 6 6) (list 4 6 2 1) (list 5 4 2 1) (list 1 2 6 1) (list 6 2 4 4)) 6) (list ) 0.001)\n    (check-within (candidate (list (list 2 2 2 2) (list 1 2 2 3)) 3) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 0) (list 0 1) 0.001)\n    (check-within (candidate (list (list 2 5 8 2) (list 2 6 1 2) (list 7 4 8 9) (list 6 3 1 4) (list 7 1 6 7) (list 4 6 2 7) (list 8 2 2 7) (list 4 5 3 8) (list 1 2 6 4)) 2) (list 3 6) 0.001)\n    (check-within (candidate (list (list 4 2 4 1) (list 6 1 2 6) (list 4 3 3 2)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 6 4 3 5) (list 7 4 2 6) (list 1 4 2 1) (list 4 5 4 5) (list 7 2 2 7) (list 7 5 4 3) (list 2 7 1 3) (list 6 7 2 2) (list 4 7 4 1) (list 7 3 2 1)) 1) (list 0 1 3 5) 0.001)\n    (check-within (candidate (list (list 4 10 5 8) (list 8 8 9 8) (list 7 1 5 4) (list 8 9 2 2) (list 2 2 8 7) (list 6 8 10 3) (list 6 8 4 4) (list 5 4 10 5) (list 3 7 8 2)) 1) (list 8) 0.001)\n    (check-within (candidate (list (list 7 5 4 2) (list 2 1 3 6) (list 7 2 2 3) (list 1 4 7 3)) 3) (list ) 0.001)\n    (check-within (candidate (list (list 2 3 3 3) (list 3 2 1 3) (list 2 2 3 2) (list 3 1 2 2) (list 1 2 2 1) (list 2 3 3 3) (list 3 1 2 2)) 1) (list 3 6) 0.001)\n    (check-within (candidate (list (list 10 2 6 2) (list 8 10 5 7)) 0) (list 0) 0.001)\n    (check-within (candidate (list (list 6 8 3 6) (list 4 8 3 1) (list 6 8 6 5) (list 7 4 7 1) (list 5 2 1 5) (list 2 3 5 7) (list 3 2 6 3) (list 4 3 7 1)) 6) (list ) 0.001)\n    (check-within (candidate (list (list 5 5 5 1) (list 6 1 3 2) (list 3 1 2 6) (list 2 6 6 5) (list 6 1 3 6) (list 4 2 3 1) (list 2 5 3 5) (list 6 6 6 2)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 2) (list 2 1 1 1) (list 2 1 1 1) (list 1 1 1 1) (list 2 1 2 2) (list 2 2 2 2) (list 1 1 1 1) (list 1 2 2 2) (list 1 2 1 1)) 0) (list 1 2 3 4 5 6 8) 0.001)\n    (check-within (candidate (list (list 9 4 4 9) (list 9 4 2 6) (list 7 5 1 4) (list 9 2 2 3) (list 6 5 1 2) (list 2 7 2 9) (list 1 8 1 6) (list 5 4 9 7) (list 8 1 7 4)) 1) (list 0 1 3 5 6) 0.001)\n    (check-within (candidate (list (list 1 3 1 3) (list 2 1 3 2) (list 2 2 1 1) (list 1 2 1 3)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 3 5 5 1) (list 4 2 6 3) (list 3 5 6 6) (list 5 3 1 1) (list 5 1 3 4) (list 6 1 6 1)) 1) (list 4) 0.001)\n    (check-within (candidate (list (list 1 2 1 2) (list 1 2 1 2)) 0) (list ) 0.001)\n    (check-within (candidate (list (list 1 4 2 4) (list 5 5 3 5) (list 3 5 3 4) (list 2 4 5 5) (list 5 4 4 5) (list 2 2 2 3)) 5) (list ) 0.001)\n    (check-within (candidate (list (list 1 4 4 4) (list 5 2 4 4) (list 1 1 5 3) (list 3 4 1 2) (list 3 1 2 3) (list 4 3 3 3) (list 3 5 4 1) (list 2 1 4 5) (list 3 3 1 3)) 1) (list 0 1 2 3 5 7 8) 0.001)\n    (check-within (candidate (list (list 1 1 6 1) (list 3 8 4 7) (list 8 5 5 9) (list 4 9 1 3) (list 9 1 1 9)) 0) (list 0 4) 0.001)\n    (check-within (candidate (list (list 2 1 2 2) (list 2 2 2 1) (list 2 1 2 2) (list 1 2 1 1) (list 2 1 2 2) (list 2 2 2 2)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 5 7 4 2) (list 2 8 10 10) (list 4 4 7 2) (list 7 4 4 6)) 10) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 0) (list 0 1 2 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list (list 9 3 6 3) (list 9 7 2 5) (list 2 8 9 9) (list 4 7 7 4) (list 2 7 3 9) (list 8 5 5 3) (list 7 5 4 3) (list 9 9 2 9) (list 9 4 8 8)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 7 5 2 3) (list 1 7 2 3) (list 9 1 7 1)) 3) (list ) 0.001)\n    (check-within (candidate (list (list 2 5 7 3) (list 2 6 5 1) (list 4 3 6 5)) 3) (list ) 0.001)\n    (check-within (candidate (list (list 7 8 1 1) (list 1 5 4 1) (list 4 7 8 9) (list 7 9 2 4) (list 5 1 4 3) (list 3 9 4 1) (list 6 6 1 8) (list 4 8 5 1) (list 1 4 5 9)) 1) (list 3 4 8) 0.001)\n    (check-within (candidate (list (list 5 1 6 1) (list 3 6 5 2) (list 4 2 5 4) (list 2 3 5 2) (list 2 4 3 1) (list 3 2 3 6) (list 6 2 4 6) (list 6 3 3 2)) 0) (list 0 2 3 4 6 7) 0.001)\n    (check-within (candidate (list (list 3 2 5 3) (list 9 4 2 4) (list 2 4 7 7) (list 1 4 9 2) (list 5 1 5 5) (list 9 5 6 7) (list 9 1 4 7)) 5) (list ) 0.001)\n    (check-within (candidate (list (list 3 2 2 2) (list 3 1 3 2) (list 2 1 2 2) (list 3 2 3 3) (list 1 1 2 3) (list 1 1 3 1)) 0) (list 2 3 5) 0.001)\n    (check-within (candidate (list (list 1 5 2 1) (list 3 5 3 2) (list 1 2 4 1) (list 1 4 1 4) (list 4 4 1 3) (list 4 2 4 5) (list 2 2 4 1) (list 2 1 3 3)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 3 2 7 6) (list 10 6 5 10) (list 2 4 10 7) (list 9 5 8 6) (list 10 6 3 10) (list 9 6 5 2) (list 8 10 1 2) (list 7 1 8 8) (list 7 7 4 8) (list 8 3 8 1)) 4) (list ) 0.001)\n    (check-within (candidate (list (list 6 6 5 2) (list 3 5 4 3) (list 2 4 3 3) (list 6 3 4 4) (list 4 1 3 6) (list 1 6 3 5) (list 3 3 5 5)) 0) (list 0 1 2 3) 0.001)\n    (check-within (candidate (list (list 10 3 8 9) (list 9 1 5 5) (list 4 5 10 5) (list 9 8 3 5) (list 3 5 4 7) (list 1 10 2 3) (list 6 2 4 8) (list 6 4 3 2) (list 5 9 9 2)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 7 7 4 3) (list 2 10 10 4) (list 8 1 9 1) (list 9 7 7 9) (list 8 9 8 5) (list 9 8 4 2) (list 1 9 3 8) (list 6 8 3 1)) 8) (list ) 0.001)\n    (check-within (candidate (list (list 9 8 1 4) (list 5 2 7 4) (list 5 6 3 4) (list 9 5 9 8) (list 2 1 10 10) (list 10 9 9 2) (list 8 5 2 3) (list 10 10 3 8) (list 1 7 8 1) (list 1 4 3 5)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1) (list 1 1 1 1)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 2 3 4 4) (list 2 3 7 2) (list 4 2 6 3) (list 2 3 3 6) (list 5 1 2 7) (list 7 6 7 1)) 5) (list ) 0.001)\n    (check-within (candidate (list (list 3 3 8 8) (list 2 5 6 5) (list 8 1 2 3) (list 1 4 8 7) (list 8 5 5 7) (list 6 6 3 9) (list 5 6 7 1) (list 4 7 5 1) (list 1 5 1 5) (list 5 3 2 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 3 1 7 8) (list 4 3 7 8) (list 7 4 2 2)) 1) (list 2) 0.001)\n    (check-within (candidate (list (list 4 4 8 8) (list 4 7 8 7) (list 1 4 8 2) (list 5 5 6 4) (list 7 8 4 3) (list 8 6 2 1)) 1) (list 2 3 4) 0.001)\n    (check-within (candidate (list (list 2 5 2 5) (list 1 1 4 1) (list 3 2 4 3) (list 3 1 3 4)) 1) (list ) 0.001)\n    (check-within (candidate (list (list 2 2 1 2) (list 2 2 2 2) (list 2 2 1 2)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 7 6 4 6) (list 3 7 2 3) (list 7 7 1 7) (list 7 7 6 5) (list 6 1 1 4) (list 1 4 2 3) (list 1 2 4 2) (list 3 2 2 1) (list 7 6 2 5) (list 2 4 5 7)) 7) (list ) 0.001)\n    (check-within (candidate (list (list 1 1 2 1) (list 1 1 1 2) (list 1 1 2 1) (list 2 1 1 2) (list 1 1 2 1) (list 2 1 1 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 4 5 8 5) (list 4 2 9 9) (list 2 3 3 3) (list 8 6 3 1)) 2) (list 2) 0.001)\n    (check-within (candidate (list (list 4 1 4 2) (list 3 4 3 4) (list 5 5 1 5) (list 5 1 1 4) (list 4 2 1 5) (list 5 2 1 1) (list 1 4 1 4) (list 1 4 5 5) (list 5 1 4 5) (list 1 2 1 2)) 2) (list ) 0.001)\n    (check-within (candidate (list (list 3 1 3 3) (list 1 2 1 2) (list 3 1 1 3) (list 2 2 1 1) (list 3 3 2 2) (list 2 3 1 1)) 0) (list 0 2 3 5) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3235_minimumCost", "language": "rkt", "prompt": "#lang racket\n;; You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].\n;; You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.\n;; Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.\n;; Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].\n;; Example 1:\n;; Input: source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]\n;; Output: 28\n;; Explanation: To convert the string \"abcd\" to string \"acbe\":\n;; - Change value at index 1 from 'b' to 'c' at a cost of 5.\n;; - Change value at index 2 from 'c' to 'e' at a cost of 1.\n;; - Change value at index 2 from 'e' to 'b' at a cost of 2.\n;; - Change value at index 3 from 'd' to 'e' at a cost of 20.\n;; The total cost incurred is 5 + 1 + 2 + 20 = 28.\n;; It can be shown that this is the minimum possible cost.\n;; Example 2:\n;; Input: source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2]\n;; Output: 12\n;; Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.\n;; Example 3:\n;; Input: source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000]\n;; Output: -1\n;; Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.\n;; Constraints:\n;; 1 <= source.length == target.length <= 105\n;; source, target consist of lowercase English letters.\n;; 1 <= cost.length == original.length == changed.length <= 2000\n;; original[i], changed[i] are lowercase English letters.\n;; 1 <= cost[i] <= 106\n;; original[i] != changed[i]\n(define (minimumCost source target original changed cost)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3235_minimumCost.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumCost))\n    (check-within (candidate abcd acbe (list \"a\" \"b\" \"c\" \"c\" \"e\" \"d\") (list \"b\" \"c\" \"b\" \"e\" \"b\" \"e\") (list 2 5 5 1 2 20)) 28 0.001)\n    (check-within (candidate aaaa bbbb (list \"a\" \"c\") (list \"c\" \"b\") (list 1 2)) 12 0.001)\n    (check-within (candidate abcd abce (list \"a\") (list \"e\") (list 10000)) -1 0.001)\n    (check-within (candidate aaaabadaaa dbdadddbad (list \"c\" \"a\" \"c\" \"a\" \"a\" \"b\" \"b\" \"b\" \"d\" \"d\" \"c\") (list \"a\" \"c\" \"b\" \"d\" \"b\" \"c\" \"a\" \"d\" \"c\" \"b\" \"d\") (list 7 8 11 9 7 6 4 6 9 5 9)) 56 0.001)\n    (check-within (candidate aaadbdcdac cdbabaddba (list \"a\" \"c\" \"b\" \"d\" \"b\" \"a\" \"c\") (list \"c\" \"a\" \"d\" \"b\" \"c\" \"b\" \"d\") (list 7 2 1 3 6 1 7)) 39 0.001)\n    (check-within (candidate aababdaacb bcdcdcbdcb (list \"a\" \"d\" \"d\" \"a\" \"c\" \"b\" \"c\" \"a\" \"c\" \"d\" \"b\" \"b\") (list \"b\" \"c\" \"b\" \"d\" \"a\" \"a\" \"b\" \"c\" \"d\" \"a\" \"c\" \"d\") (list 11 4 3 2 7 11 7 6 9 2 1 7)) 42 0.001)\n    (check-within (candidate aababdbddc adcbbbcdba (list \"a\" \"d\" \"b\" \"a\" \"d\" \"c\" \"d\" \"b\") (list \"b\" \"a\" \"d\" \"c\" \"c\" \"a\" \"b\" \"a\") (list 10 6 8 3 6 10 8 6)) 72 0.001)\n    (check-within (candidate aabbcabbdb acddbabbdd (list \"c\" \"d\" \"c\" \"a\" \"d\" \"c\" \"a\" \"d\" \"b\" \"a\" \"b\") (list \"d\" \"b\" \"a\" \"c\" \"c\" \"b\" \"b\" \"a\" \"d\" \"d\" \"c\") (list 5 3 8 10 9 7 8 7 5 1 10)) 32 0.001)\n    (check-within (candidate aabbddccbc abbbaabaca (list \"a\" \"b\" \"c\" \"b\" \"a\" \"d\") (list \"d\" \"c\" \"b\" \"d\" \"b\" \"b\") (list 3 8 7 6 7 10)) -1 0.001)\n    (check-within (candidate aabdbaabaa bdaacabcab (list \"b\" \"d\" \"d\" \"a\" \"c\" \"c\" \"a\" \"d\" \"a\" \"b\") (list \"c\" \"c\" \"b\" \"d\" \"b\" \"d\" \"b\" \"a\" \"c\" \"a\") (list 9 1 7 9 2 1 3 8 8 2)) 43 0.001)\n    (check-within (candidate aacacaaccd dadaacaabd (list \"c\" \"c\" \"a\" \"a\" \"d\" \"b\" \"d\" \"d\") (list \"b\" \"d\" \"d\" \"b\" \"b\" \"c\" \"c\" \"a\") (list 7 8 9 11 4 6 9 10)) 77 0.001)\n    (check-within (candidate aacbabbacc adbdbcbdaa (list \"c\" \"b\" \"a\" \"b\" \"a\" \"c\" \"d\" \"c\" \"d\") (list \"b\" \"c\" \"b\" \"d\" \"d\" \"a\" \"b\" \"d\" \"c\") (list 2 6 7 4 7 4 3 5 6)) 41 0.001)\n    (check-within (candidate aacbbabdad ddadcababd (list \"d\" \"b\" \"c\" \"a\" \"b\" \"c\" \"d\" \"c\" \"b\" \"a\" \"a\") (list \"c\" \"d\" \"d\" \"b\" \"c\" \"b\" \"b\" \"a\" \"a\" \"c\" \"d\") (list 7 10 4 2 7 4 4 4 6 2 8)) 45 0.001)\n    (check-within (candidate aacbbbbcab cdacdcddac (list \"b\" \"d\" \"c\" \"c\" \"b\" \"a\") (list \"c\" \"c\" \"b\" \"a\" \"a\" \"d\") (list 4 7 9 11 3 4)) 67 0.001)\n    (check-within (candidate aacbcabcad bbcadddcdd (list \"b\" \"a\" \"d\" \"a\" \"b\" \"c\" \"a\" \"d\" \"d\" \"b\") (list \"d\" \"b\" \"b\" \"d\" \"c\" \"a\" \"c\" \"c\" \"a\" \"a\") (list 7 7 9 8 6 3 8 2 1 5)) 53 0.001)\n    (check-within (candidate aacbdbcdca bbbdbcaacd (list \"a\" \"c\" \"b\" \"d\" \"d\" \"a\" \"c\" \"d\") (list \"c\" \"b\" \"c\" \"c\" \"b\" \"d\" \"d\" \"a\") (list 9 5 4 1 2 4 7 1)) 47 0.001)\n    (check-within (candidate aadbbcdbbd badddbdbac (list \"c\" \"d\" \"c\" \"d\" \"b\" \"a\") (list \"b\" \"b\" \"a\" \"a\" \"a\" \"d\") (list 11 4 7 8 5 2)) -1 0.001)\n    (check-within (candidate aadbccbddd cacdbabadc (list \"d\" \"b\" \"c\" \"d\" \"a\" \"a\" \"c\" \"b\") (list \"c\" \"c\" \"b\" \"b\" \"b\" \"d\" \"a\" \"a\") (list 5 8 7 2 4 7 1 5)) 46 0.001)\n    (check-within (candidate aadbddcabd bdcdccbada (list \"d\" \"a\" \"a\" \"b\" \"d\" \"b\") (list \"b\" \"c\" \"d\" \"c\" \"a\" \"d\") (list 6 10 5 8 11 4)) -1 0.001)\n    (check-within (candidate aaddadccad cbaaadbcba (list \"c\" \"a\" \"a\" \"d\" \"c\" \"c\" \"b\" \"b\" \"a\" \"d\") (list \"a\" \"c\" \"d\" \"c\" \"d\" \"b\" \"d\" \"c\" \"b\" \"b\") (list 1 10 2 8 9 1 9 10 5 1)) 44 0.001)\n    (check-within (candidate aaddadcdba caaaccbbca (list \"b\" \"b\" \"c\" \"d\" \"b\" \"c\" \"a\" \"a\") (list \"a\" \"d\" \"d\" \"a\" \"c\" \"b\" \"c\" \"b\") (list 11 7 10 8 7 5 10 10)) 84 0.001)\n    (check-within (candidate abaacbbcaa bdbdbcbdcd (list \"d\" \"a\" \"d\" \"a\" \"b\" \"b\") (list \"a\" \"d\" \"b\" \"b\" \"a\" \"c\") (list 10 9 8 11 4 11)) -1 0.001)\n    (check-within (candidate abacaadcba cadbadcdbd (list \"b\" \"d\" \"c\" \"a\" \"b\" \"d\" \"b\") (list \"a\" \"b\" \"b\" \"b\" \"c\" \"a\" \"d\") (list 9 10 6 2 7 10 9)) 89 0.001)\n    (check-within (candidate abacbadadc aabbdaaccb (list \"d\" \"a\" \"b\" \"d\" \"a\" \"a\" \"c\" \"b\" \"c\" \"c\" \"d\" \"b\") (list \"c\" \"b\" \"a\" \"a\" \"d\" \"c\" \"b\" \"c\" \"d\" \"a\" \"b\" \"d\") (list 2 10 3 6 4 1 5 5 11 4 2 1)) 28 0.001)\n    (check-within (candidate abadbbabcd cdcbdddcbb (list \"d\" \"d\" \"b\" \"a\" \"c\" \"c\" \"c\" \"a\") (list \"c\" \"a\" \"a\" \"c\" \"b\" \"d\" \"a\" \"d\") (list 2 10 11 7 6 11 7 1)) 79 0.001)\n    (check-within (candidate abadcadacc cbabaddcba (list \"a\" \"d\" \"a\" \"b\" \"c\" \"a\" \"d\" \"b\" \"b\" \"d\" \"c\" \"c\") (list \"b\" \"b\" \"d\" \"d\" \"a\" \"c\" \"a\" \"c\" \"a\" \"c\" \"d\" \"b\") (list 7 6 11 11 8 10 4 11 2 3 11 7)) 60 0.001)\n    (check-within (candidate abadcdadac baddbccdac (list \"d\" \"c\" \"d\" \"c\" \"b\" \"a\") (list \"b\" \"b\" \"c\" \"a\" \"d\" \"d\") (list 8 5 9 1 10 2)) 57 0.001)\n    (check-within (candidate abbaadacba cdbbcadddd (list \"d\" \"a\" \"d\" \"c\" \"b\" \"b\" \"c\" \"d\" \"c\" \"a\" \"a\") (list \"a\" \"c\" \"c\" \"d\" \"a\" \"d\" \"a\" \"b\" \"b\" \"d\" \"b\") (list 8 3 5 8 3 9 3 4 11 4 9)) 50 0.001)\n    (check-within (candidate abbaddaacd ccbbaccacc (list \"d\" \"d\" \"a\" \"b\" \"c\" \"b\") (list \"a\" \"c\" \"c\" \"d\" \"b\" \"c\") (list 9 8 2 8 3 1)) 35 0.001)\n    (check-within (candidate abbbcabddb bbccdbbadc (list \"c\" \"d\" \"c\" \"a\" \"b\" \"d\" \"d\" \"a\" \"b\" \"b\") (list \"d\" \"a\" \"b\" \"c\" \"c\" \"b\" \"c\" \"d\" \"a\" \"d\") (list 3 6 9 4 9 6 9 6 10 7)) 60 0.001)\n    (check-within (candidate abbbcbabab abcacbaddd (list \"b\" \"c\" \"a\" \"c\" \"a\" \"d\" \"d\" \"c\") (list \"a\" \"b\" \"d\" \"a\" \"b\" \"b\" \"c\" \"d\") (list 11 5 8 1 7 7 1 2)) 77 0.001)\n    (check-within (candidate abbcaccabb ddddddcacc (list \"a\" \"b\" \"c\" \"b\" \"a\" \"c\" \"c\") (list \"c\" \"c\" \"d\" \"a\" \"d\" \"a\" \"b\") (list 2 6 10 11 9 7 3)) 82 0.001)\n    (check-within (candidate abbcaccdba accadababc (list \"d\" \"a\" \"a\" \"c\" \"b\" \"d\") (list \"c\" \"d\" \"b\" \"a\" \"a\" \"b\") (list 7 4 10 11 5 5)) 99 0.001)\n    (check-within (candidate abbdaccada acddaccddc (list \"b\" \"b\" \"c\" \"a\" \"d\" \"a\" \"d\") (list \"a\" \"c\" \"b\" \"b\" \"b\" \"c\" \"c\") (list 4 9 3 1 11 3 3)) -1 0.001)\n    (check-within (candidate abcabdaddb dcbadaaacc (list \"d\" \"b\" \"a\" \"a\" \"c\" \"c\") (list \"c\" \"c\" \"d\" \"b\" \"b\" \"a\") (list 3 3 9 3 7 6)) 61 0.001)\n    (check-within (candidate abcadcabaa bbbdddcaba (list \"b\" \"d\" \"c\" \"d\" \"a\" \"c\" \"b\" \"b\") (list \"c\" \"b\" \"a\" \"a\" \"c\" \"b\" \"d\" \"a\") (list 1 8 4 3 8 3 11 5)) 74 0.001)\n    (check-within (candidate abccabacaa aaabacbcbb (list \"c\" \"c\" \"d\" \"a\" \"d\" \"b\" \"c\" \"b\" \"d\" \"a\") (list \"b\" \"a\" \"a\" \"b\" \"b\" \"d\" \"d\" \"a\" \"c\" \"c\") (list 9 10 8 6 9 10 2 6 6 8)) 57 0.001)\n    (check-within (candidate abdaababbb dbdadabadc (list \"a\" \"c\" \"c\" \"b\" \"d\" \"a\" \"b\") (list \"c\" \"a\" \"b\" \"c\" \"b\" \"b\" \"d\") (list 3 4 6 1 8 11 6)) 56 0.001)\n    (check-within (candidate abdbaaacaa abbbccccad (list \"a\" \"a\" \"c\" \"b\" \"d\" \"d\" \"b\") (list \"d\" \"b\" \"b\" \"a\" \"a\" \"b\" \"c\") (list 3 10 7 2 5 7 3)) 49 0.001)\n    (check-within (candidate abdcbdbccc dbbcdcabba (list \"c\" \"c\" \"d\" \"b\" \"a\" \"c\" \"a\" \"d\" \"b\" \"d\" \"a\" \"b\") (list \"d\" \"a\" \"b\" \"d\" \"c\" \"b\" \"b\" \"a\" \"c\" \"c\" \"d\" \"a\") (list 9 5 9 6 5 5 5 10 7 7 3 6)) 46 0.001)\n    (check-within (candidate acabbbdbdb accbccbbab (list \"b\" \"d\" \"c\" \"d\" \"b\" \"c\") (list \"a\" \"a\" \"a\" \"c\" \"d\" \"d\") (list 7 7 10 9 7 1)) -1 0.001)\n    (check-within (candidate acadadccbb dcaaabbbdd (list \"a\" \"c\" \"c\" \"a\" \"d\" \"b\" \"b\" \"d\" \"b\" \"a\") (list \"d\" \"d\" \"b\" \"b\" \"c\" \"d\" \"a\" \"a\" \"c\" \"c\") (list 1 2 1 4 9 4 8 5 11 7)) 25 0.001)\n    (check-within (candidate acadbbcdcb bcacabdcdd (list \"a\" \"b\" \"d\" \"b\" \"b\" \"c\" \"a\") (list \"d\" \"c\" \"c\" \"a\" \"d\" \"b\" \"b\") (list 3 6 3 10 11 3 6)) 61 0.001)\n    (check-within (candidate acaddccaad daacadcdda (list \"c\" \"c\" \"a\" \"b\" \"b\" \"a\" \"b\" \"d\" \"c\" \"a\" \"d\") (list \"a\" \"b\" \"b\" \"d\" \"a\" \"d\" \"c\" \"b\" \"d\" \"c\" \"c\") (list 10 8 4 8 3 1 2 8 11 8 6)) 52 0.001)\n    (check-within (candidate acbbabcaac bdcbaadcab (list \"d\" \"c\" \"a\" \"c\" \"b\" \"a\" \"a\" \"b\" \"c\" \"d\") (list \"a\" \"a\" \"d\" \"d\" \"c\" \"c\" \"b\" \"a\" \"b\" \"c\") (list 9 11 8 6 11 11 1 1 9 9)) 45 0.001)\n    (check-within (candidate accabbadbc adbbccbcbd (list \"a\" \"c\" \"a\" \"d\" \"b\" \"a\" \"c\" \"c\" \"b\" \"b\") (list \"c\" \"d\" \"b\" \"c\" \"d\" \"d\" \"b\" \"a\" \"c\" \"a\") (list 7 10 9 3 2 5 1 8 11 2)) 36 0.001)\n    (check-within (candidate accabbdddd cacdccbcad (list \"c\" \"a\" \"d\" \"b\" \"d\" \"c\" \"a\" \"b\" \"b\" \"c\" \"d\") (list \"d\" \"b\" \"a\" \"d\" \"c\" \"a\" \"d\" \"a\" \"c\" \"b\" \"b\") (list 11 6 6 4 7 11 2 7 7 7 2)) 51 0.001)\n    (check-within (candidate accbaadbdb baccbaacbb (list \"b\" \"b\" \"a\" \"d\" \"d\" \"a\" \"c\") (list \"a\" \"d\" \"d\" \"b\" \"a\" \"c\" \"a\") (list 9 11 6 7 4 2 2)) 61 0.001)\n    (check-within (candidate accbddaaab baddbaabbd (list \"a\" \"b\" \"c\" \"d\" \"d\" \"b\" \"d\" \"b\") (list \"b\" \"a\" \"a\" \"b\" \"a\" \"c\" \"c\" \"d\") (list 6 3 4 6 1 6 10 6)) 57 0.001)\n    (check-within (candidate acccbcdccb bdadccdbad (list \"a\" \"b\" \"c\" \"c\" \"a\" \"d\" \"d\") (list \"b\" \"c\" \"a\" \"d\" \"c\" \"a\" \"c\") (list 8 1 1 9 3 10 4)) 48 0.001)\n    (check-within (candidate accccbccda daadbbcaac (list \"a\" \"c\" \"a\" \"a\" \"d\" \"d\") (list \"c\" \"d\" \"d\" \"b\" \"b\" \"c\") (list 3 6 6 10 9 8)) -1 0.001)\n    (check-within (candidate acdacbdadb aacccbbacd (list \"b\" \"b\" \"a\" \"a\" \"d\" \"c\") (list \"d\" \"a\" \"b\" \"d\" \"a\" \"a\") (list 6 1 9 6 8 11)) -1 0.001)\n    (check-within (candidate acdbcdadbd daaadaaadd (list \"c\" \"a\" \"b\" \"b\" \"b\" \"d\" \"a\") (list \"d\" \"c\" \"d\" \"c\" \"a\" \"b\" \"d\") (list 3 9 4 6 1 9 3)) 54 0.001)\n    (check-within (candidate acddadcbca ddaabaaaac (list \"b\" \"d\" \"c\" \"a\" \"b\" \"d\" \"c\" \"b\" \"d\" \"c\" \"a\") (list \"c\" \"a\" \"b\" \"c\" \"d\" \"c\" \"a\" \"a\" \"b\" \"d\" \"d\") (list 7 8 2 10 1 7 8 1 1 11 4)) 35 0.001)\n    (check-within (candidate adaadcaddd cdddbdccad (list \"c\" \"c\" \"c\" \"d\" \"b\" \"a\" \"d\") (list \"d\" \"a\" \"b\" \"b\" \"d\" \"b\" \"c\") (list 10 9 2 2 7 1 10)) 92 0.001)\n    (check-within (candidate adaaddacba aabbddbbdd (list \"c\" \"b\" \"a\" \"b\" \"c\" \"b\") (list \"b\" \"c\" \"b\" \"a\" \"d\" \"d\") (list 10 7 7 6 8 5)) -1 0.001)\n    (check-within (candidate adacdcdacd ccbabbbbdc (list \"a\" \"b\" \"c\" \"a\" \"d\" \"b\" \"a\" \"c\") (list \"c\" \"d\" \"d\" \"d\" \"a\" \"c\" \"b\" \"a\") (list 4 3 1 1 6 4 10 6)) 99 0.001)\n    (check-within (candidate adadbabcdd abbcdcbdba (list \"c\" \"d\" \"b\" \"a\" \"c\" \"b\" \"a\") (list \"d\" \"b\" \"d\" \"b\" \"b\" \"a\" \"c\") (list 11 10 6 1 5 3 8)) 80 0.001)\n    (check-within (candidate adadcabbda cabadddccc (list \"c\" \"a\" \"b\" \"b\" \"a\" \"d\" \"d\") (list \"b\" \"d\" \"d\" \"c\" \"b\" \"c\" \"b\") (list 7 2 8 4 4 4 7)) -1 0.001)\n    (check-within (candidate adbaabacdc bccbbadcdc (list \"c\" \"b\" \"b\" \"d\" \"c\" \"a\" \"b\") (list \"b\" \"a\" \"c\" \"a\" \"a\" \"d\" \"d\") (list 5 2 6 1 7 7 1)) -1 0.001)\n    (check-within (candidate adbadbaacb bccdbdccab (list \"d\" \"a\" \"c\" \"b\" \"c\" \"d\" \"a\" \"b\" \"c\" \"b\" \"a\" \"d\") (list \"a\" \"c\" \"b\" \"c\" \"a\" \"b\" \"b\" \"d\" \"d\" \"a\" \"d\" \"c\") (list 3 7 7 9 2 9 10 2 9 5 11 8)) 65 0.001)\n    (check-within (candidate adbcdaddda cbdccabcbc (list \"c\" \"a\" \"d\" \"d\" \"b\" \"b\" \"b\") (list \"a\" \"c\" \"c\" \"a\" \"d\" \"c\" \"a\") (list 8 5 5 10 10 3 9)) -1 0.001)\n    (check-within (candidate adcacaaabb daaadadcbb (list \"d\" \"b\" \"a\" \"a\" \"d\" \"c\" \"b\" \"b\" \"d\" \"c\" \"c\" \"a\") (list \"b\" \"c\" \"d\" \"c\" \"c\" \"a\" \"a\" \"d\" \"a\" \"b\" \"d\" \"b\") (list 2 3 2 4 5 9 11 3 10 1 9 2)) 31 0.001)\n    (check-within (candidate adcbbbdada cdaabadcdc (list \"a\" \"a\" \"b\" \"c\" \"d\" \"b\" \"d\") (list \"c\" \"d\" \"c\" \"d\" \"a\" \"a\" \"c\") (list 11 11 2 8 5 7 5)) 60 0.001)\n    (check-within (candidate adccbabbca dcdbbdabba (list \"a\" \"d\" \"d\" \"b\" \"c\" \"b\" \"a\") (list \"c\" \"b\" \"c\" \"c\" \"a\" \"d\" \"d\") (list 5 10 10 1 6 7 7)) 90 0.001)\n    (check-within (candidate adcdcbacab acddaddadc (list \"b\" \"d\" \"c\" \"d\" \"c\" \"d\" \"b\" \"c\" \"a\" \"a\" \"a\" \"b\") (list \"a\" \"b\" \"b\" \"c\" \"a\" \"a\" \"d\" \"d\" \"c\" \"b\" \"d\" \"c\") (list 2 11 11 9 1 3 6 9 6 4 8 5)) 47 0.001)\n    (check-within (candidate addbaccbbd cabdcdadcc (list \"b\" \"d\" \"d\" \"d\" \"c\" \"b\" \"a\" \"c\" \"c\") (list \"a\" \"c\" \"a\" \"b\" \"b\" \"d\" \"d\" \"a\" \"d\") (list 10 11 5 6 10 1 4 8 8)) 82 0.001)\n    (check-within (candidate addbacdaac abddcadbcb (list \"d\" \"a\" \"c\" \"b\" \"a\" \"c\" \"a\" \"d\" \"c\" \"d\" \"b\") (list \"c\" \"c\" \"b\" \"d\" \"d\" \"d\" \"b\" \"b\" \"a\" \"a\" \"c\") (list 9 2 9 4 11 6 10 3 7 2 5)) 37 0.001)\n    (check-within (candidate addbcccdcb cbbdbddacb (list \"d\" \"c\" \"a\" \"a\" \"b\" \"b\" \"c\") (list \"c\" \"d\" \"b\" \"d\" \"d\" \"c\" \"b\") (list 2 6 4 3 7 7 8)) -1 0.001)\n    (check-within (candidate addcadccaa dbbcaccabc (list \"a\" \"b\" \"d\" \"b\" \"d\" \"a\" \"c\" \"b\" \"a\" \"c\") (list \"c\" \"d\" \"a\" \"c\" \"b\" \"b\" \"d\" \"a\" \"d\" \"a\") (list 8 11 5 1 11 4 3 8 11 4)) 49 0.001)\n    (check-within (candidate addcdbdadb bcabdcccbd (list \"b\" \"b\" \"a\" \"c\" \"d\" \"a\" \"b\" \"c\" \"a\") (list \"a\" \"c\" \"c\" \"a\" \"a\" \"b\" \"d\" \"b\" \"d\") (list 2 4 8 8 3 5 2 7 2)) 59 0.001)\n    (check-within (candidate adddbbdbdb cdbadcaccc (list \"b\" \"c\" \"c\" \"b\" \"a\" \"c\" \"b\" \"a\" \"a\" \"d\" \"d\") (list \"d\" \"a\" \"b\" \"a\" \"b\" \"d\" \"c\" \"c\" \"d\" \"a\" \"c\") (list 1 1 1 8 6 9 3 6 5 3 10)) 40 0.001)\n    (check-within (candidate adddccacca cdcdcccdac (list \"d\" \"c\" \"a\" \"d\" \"b\" \"b\" \"b\" \"a\" \"d\" \"a\" \"c\" \"c\") (list \"c\" \"a\" \"c\" \"a\" \"d\" \"a\" \"c\" \"b\" \"b\" \"d\" \"d\" \"b\") (list 7 7 6 10 1 1 11 5 3 2 10 3)) 33 0.001)\n    (check-within (candidate baacbbcdaa abdbdbbabd (list \"c\" \"d\" \"c\" \"b\" \"a\" \"c\" \"b\" \"d\" \"b\") (list \"d\" \"c\" \"b\" \"a\" \"d\" \"a\" \"d\" \"a\" \"c\") (list 9 5 5 2 9 4 5 3 6)) 76 0.001)\n    (check-within (candidate baadcdabbc acbccadccd (list \"b\" \"b\" \"a\" \"a\" \"a\" \"d\" \"d\" \"d\" \"c\" \"c\" \"b\") (list \"c\" \"a\" \"c\" \"b\" \"d\" \"c\" \"a\" \"b\" \"b\" \"d\" \"d\") (list 8 6 5 10 11 1 1 6 3 1 4)) 37 0.001)\n    (check-within (candidate baadcdabda abdbcdaaca (list \"b\" \"b\" \"c\" \"d\" \"d\" \"a\" \"c\") (list \"d\" \"a\" \"a\" \"b\" \"c\" \"b\" \"d\") (list 11 8 7 3 10 4 1)) 48 0.001)\n    (check-within (candidate babababdba ccdaaabbac (list \"c\" \"d\" \"b\" \"a\" \"d\" \"a\" \"b\") (list \"b\" \"a\" \"d\" \"c\" \"c\" \"d\" \"c\") (list 8 5 6 2 8 6 8)) 55 0.001)\n    (check-within (candidate babbacabba adacccdcba (list \"c\" \"d\" \"d\" \"d\" \"c\" \"b\" \"b\" \"b\" \"a\") (list \"a\" \"b\" \"c\" \"a\" \"d\" \"a\" \"c\" \"d\" \"c\") (list 1 1 8 3 2 2 11 8 3)) 27 0.001)\n    (check-within (candidate babbadbabc ccdabbcbba (list \"a\" \"c\" \"d\" \"a\" \"b\" \"d\" \"b\" \"b\") (list \"b\" \"d\" \"c\" \"d\" \"a\" \"a\" \"c\" \"d\") (list 3 3 1 4 4 8 2 9)) 46 0.001)\n    (check-within (candidate bacbddaacb dcdaaadcda (list \"a\" \"d\" \"a\" \"a\" \"d\" \"c\" \"b\" \"c\" \"c\" \"b\") (list \"d\" \"c\" \"c\" \"b\" \"b\" \"b\" \"a\" \"a\" \"d\" \"c\") (list 8 5 1 10 8 6 2 1 6 8)) 46 0.001)\n    (check-within (candidate baccbbcdcb cabadbbacc (list \"c\" \"a\" \"c\" \"b\" \"c\" \"d\" \"a\" \"b\" \"d\" \"b\") (list \"a\" \"b\" \"b\" \"a\" \"d\" \"b\" \"c\" \"d\" \"c\" \"c\") (list 4 4 2 11 9 9 1 4 6 1)) 24 0.001)\n    (check-within (candidate bacdbbcdba cdcdddbbcd (list \"d\" \"a\" \"c\" \"b\" \"d\" \"a\" \"b\" \"c\" \"b\" \"c\" \"d\") (list \"c\" \"c\" \"a\" \"d\" \"b\" \"b\" \"a\" \"d\" \"c\" \"b\" \"a\") (list 3 8 4 6 5 8 6 2 1 6 2)) 39 0.001)\n    (check-within (candidate bacdbccabb caaccdbaac (list \"c\" \"d\" \"d\" \"a\" \"d\" \"c\") (list \"d\" \"b\" \"a\" \"b\" \"c\" \"a\") (list 8 4 4 4 3 6)) -1 0.001)\n    (check-within (candidate bacddacdba bcbbaacdda (list \"b\" \"c\" \"c\" \"d\" \"d\" \"b\" \"b\" \"d\" \"a\" \"a\" \"c\" \"a\") (list \"a\" \"b\" \"d\" \"b\" \"a\" \"c\" \"d\" \"c\" \"c\" \"d\" \"a\" \"b\") (list 5 6 7 4 4 8 8 6 8 3 6 11)) 30 0.001)\n    (check-within (candidate badaabbaba caadbcadcd (list \"b\" \"c\" \"a\" \"c\" \"d\" \"a\" \"b\" \"d\" \"d\" \"b\" \"c\") (list \"c\" \"a\" \"d\" \"b\" \"a\" \"c\" \"d\" \"c\" \"b\" \"a\" \"d\") (list 4 8 6 3 1 8 3 8 3 6 9)) 44 0.001)\n    (check-within (candidate badabbbbac dacaabbcaa (list \"d\" \"b\" \"a\" \"d\" \"c\" \"b\" \"d\" \"c\" \"a\" \"c\" \"a\") (list \"b\" \"c\" \"d\" \"c\" \"a\" \"d\" \"a\" \"d\" \"c\" \"b\" \"b\") (list 11 5 9 7 11 11 7 9 6 11 5)) 50 0.001)\n    (check-within (candidate badaccbdbd dbbdacaaab (list \"b\" \"d\" \"b\" \"c\" \"b\" \"d\" \"a\" \"d\" \"a\" \"a\" \"c\" \"c\") (list \"d\" \"a\" \"a\" \"a\" \"c\" \"b\" \"d\" \"c\" \"b\" \"c\" \"d\" \"b\") (list 3 9 3 11 11 6 2 11 11 2 11 1)) 39 0.001)\n    (check-within (candidate badadcccba bbdbababcc (list \"c\" \"c\" \"a\" \"d\" \"d\" \"d\") (list \"a\" \"d\" \"b\" \"a\" \"b\" \"c\") (list 1 3 2 2 4 4)) -1 0.001)\n    (check-within (candidate badbbbccdb bbbabbccbd (list \"a\" \"c\" \"a\" \"c\" \"d\" \"c\" \"d\" \"b\" \"d\" \"b\" \"a\") (list \"c\" \"b\" \"d\" \"d\" \"c\" \"a\" \"b\" \"d\" \"a\" \"c\" \"b\") (list 5 4 5 3 4 4 6 3 8 11 4)) 30 0.001)\n    (check-within (candidate badcbccabc bdcaacbcad (list \"d\" \"d\" \"c\" \"d\" \"a\" \"b\" \"c\" \"a\") (list \"a\" \"c\" \"d\" \"b\" \"b\" \"a\" \"b\" \"d\") (list 1 5 4 5 11 10 8 11)) 69 0.001)\n    (check-within (candidate badcbdddcd cdcbaddadc (list \"c\" \"b\" \"c\" \"d\" \"a\" \"b\" \"b\" \"d\" \"a\" \"c\" \"a\" \"d\") (list \"a\" \"c\" \"b\" \"a\" \"c\" \"d\" \"a\" \"b\" \"d\" \"d\" \"b\" \"c\") (list 3 2 8 9 11 5 11 11 9 2 8 1)) 32 0.001)\n    (check-within (candidate baddbcbdbd acdbcadabd (list \"a\" \"b\" \"b\" \"c\" \"a\" \"a\" \"b\" \"d\" \"c\" \"d\" \"d\") (list \"c\" \"a\" \"d\" \"d\" \"b\" \"d\" \"c\" \"c\" \"b\" \"b\" \"a\") (list 9 10 5 4 1 5 7 8 11 9 8)) 59 0.001)\n    (check-within (candidate baddbdacad cadaccbbab (list \"b\" \"a\" \"d\" \"a\" \"c\" \"b\" \"d\" \"c\" \"a\" \"d\") (list \"d\" \"b\" \"b\" \"d\" \"a\" \"c\" \"a\" \"b\" \"c\" \"c\") (list 3 5 6 7 2 4 4 2 3 9)) 32 0.001)\n    (check-within (candidate bbacdcdcda cbadabbdcb (list \"a\" \"d\" \"b\" \"c\" \"b\" \"c\" \"d\" \"a\" \"d\") (list \"b\" \"c\" \"d\" \"a\" \"a\" \"b\" \"b\" \"d\" \"a\") (list 11 6 2 8 5 7 5 8 9)) 64 0.001)\n    (check-within (candidate bbadbbabbb cbaaddaddc (list \"d\" \"a\" \"b\" \"c\" \"d\" \"c\" \"b\") (list \"b\" \"d\" \"c\" \"b\" \"c\" \"d\" \"d\") (list 4 10 1 11 7 1 11)) -1 0.001)\n    (check-within (candidate bbadcbcbbc aaaccbccbb (list \"b\" \"d\" \"b\" \"d\" \"a\" \"c\" \"c\" \"a\" \"b\") (list \"c\" \"a\" \"a\" \"b\" \"b\" \"a\" \"b\" \"c\" \"d\") (list 8 5 9 4 1 10 1 11 4)) 39 0.001)\n    (check-within (candidate bbbadaccbb dadcaccadb (list \"a\" \"d\" \"d\" \"d\" \"c\" \"b\" \"c\" \"b\" \"c\" \"b\") (list \"d\" \"b\" \"c\" \"a\" \"b\" \"d\" \"d\" \"c\" \"a\" \"a\") (list 10 1 4 6 4 1 10 3 1 6)) 41 0.001)\n    (check-within (candidate bbbadcbadb aacbdcddcd (list \"a\" \"d\" \"d\" \"c\" \"a\" \"b\" \"c\" \"b\") (list \"d\" \"b\" \"a\" \"a\" \"c\" \"c\" \"b\" \"d\") (list 3 1 1 9 1 2 1 2)) 19 0.001)\n    (check-within (candidate bbbbabbcbc adacababac (list \"a\" \"c\" \"a\" \"b\" \"b\" \"d\" \"d\" \"a\" \"d\" \"b\" \"c\") (list \"d\" \"b\" \"c\" \"c\" \"d\" \"a\" \"b\" \"b\" \"c\" \"a\" \"d\") (list 7 9 9 7 3 2 6 8 11 5 8)) 39 0.001)\n    (check-within (candidate bbbbdacbcd cbadccdaaa (list \"d\" \"a\" \"c\" \"b\" \"d\" \"c\" \"a\" \"d\" \"b\" \"a\") (list \"c\" \"c\" \"b\" \"c\" \"a\" \"d\" \"d\" \"b\" \"d\" \"b\") (list 2 9 11 3 6 11 6 4 5 5)) 74 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3236_missingInteger", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of integers nums.\n;; A prefix nums[0..i] is sequential if, for all 1 <= j <= i, nums[j] = nums[j - 1] + 1. In particular, the prefix consisting only of nums[0] is sequential.\n;; Return the smallest integer x missing from nums such that x is greater than or equal to the sum of the longest sequential prefix.\n;; Example 1:\n;; Input: nums = [1,2,3,2,5]\n;; Output: 6\n;; Explanation: The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n;; Example 2:\n;; Input: nums = [3,4,5,1,12,14,13]\n;; Output: 15\n;; Explanation: The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n;; Constraints:\n;; 1 <= nums.length <= 50\n;; 1 <= nums[i] <= 50\n(define (missingInteger nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3236_missingInteger.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate missingInteger))\n    (check-within (candidate (list 1 2 3 2 5)) 6 0.001)\n    (check-within (candidate (list 3 4 5 1 12 14 13)) 15 0.001)\n    (check-within (candidate (list 29 30 31 32 33 34 35 36 37)) 297 0.001)\n    (check-within (candidate (list 19 20 21 22)) 82 0.001)\n    (check-within (candidate (list 18 19 20 21 22 23 24 25 26 27 28 9)) 253 0.001)\n    (check-within (candidate (list 4 5 6 7 8 8 9 4 3 2 7)) 30 0.001)\n    (check-within (candidate (list 38)) 39 0.001)\n    (check-within (candidate (list 1)) 2 0.001)\n    (check-within (candidate (list 11 12 13)) 36 0.001)\n    (check-within (candidate (list 47 48 49 5 3)) 144 0.001)\n    (check-within (candidate (list 23 24 25 4 5 1)) 72 0.001)\n    (check-within (candidate (list 8 9 10 10 7 8)) 27 0.001)\n    (check-within (candidate (list 31 32 33 34 10 8 7 9 7 9 9 5 10 1)) 130 0.001)\n    (check-within (candidate (list 17 18 19 20 21 22 3 7 10 10)) 117 0.001)\n    (check-within (candidate (list 6 7 8 9 10 8 6 7 4 1)) 40 0.001)\n    (check-within (candidate (list 46 8 2 4 1 4 10 2 4 10 2 5 7 3 1)) 47 0.001)\n    (check-within (candidate (list 37 1 2 9 5 8 5 2 9 4)) 38 0.001)\n    (check-within (candidate (list 31 32 33 34 1)) 130 0.001)\n    (check-within (candidate (list 45 46 47 48 49 10 8 1 7 4 10 10 6 6 2)) 235 0.001)\n    (check-within (candidate (list 13 10 7 5 7 10 6 10 2)) 14 0.001)\n    (check-within (candidate (list 32 33 34 35 36 37 38 39 40 41 42 43 44 8 6)) 494 0.001)\n    (check-within (candidate (list 24 8 9)) 25 0.001)\n    (check-within (candidate (list 47 48 49 9 3 8 1 9 2 5 4 5 9)) 144 0.001)\n    (check-within (candidate (list 4 5 6 7 8 9 4 7 10 7 2)) 39 0.001)\n    (check-within (candidate (list 28 29)) 57 0.001)\n    (check-within (candidate (list 40 41 42 3 8 2 7 1 4)) 123 0.001)\n    (check-within (candidate (list 17 18 19 20 21 22 23 24 25 26 27 9 2 5)) 242 0.001)\n    (check-within (candidate (list 43 44)) 87 0.001)\n    (check-within (candidate (list 19 20 5 3 10)) 39 0.001)\n    (check-within (candidate (list 5)) 6 0.001)\n    (check-within (candidate (list 14 15)) 29 0.001)\n    (check-within (candidate (list 47 48 49)) 144 0.001)\n    (check-within (candidate (list 10)) 11 0.001)\n    (check-within (candidate (list 39)) 40 0.001)\n    (check-within (candidate (list 11 12 13 14 15 7 5 2 10 5 6)) 65 0.001)\n    (check-within (candidate (list 3 4 5 7 9 8 1 3 4 9)) 12 0.001)\n    (check-within (candidate (list 29 30 31 32 33 34 35 36 37 38 39 40 41)) 455 0.001)\n    (check-within (candidate (list 24 25 26 27 28 29 30 31 32 33 34 35 6 4 1)) 354 0.001)\n    (check-within (candidate (list 7 8 9 10 11 12 13 14 15)) 99 0.001)\n    (check-within (candidate (list 39 40 41 42 43 44 45 8 10 4)) 294 0.001)\n    (check-within (candidate (list 36 37 6 8)) 73 0.001)\n    (check-within (candidate (list 27 28 29 30)) 114 0.001)\n    (check-within (candidate (list 34 35 5 7)) 69 0.001)\n    (check-within (candidate (list 9 8 6 1)) 10 0.001)\n    (check-within (candidate (list 36 37 38 39 8 10 7)) 150 0.001)\n    (check-within (candidate (list 28 29 6)) 57 0.001)\n    (check-within (candidate (list 14 15 16 17 18 19 20 10 9 10 9 7 3 6)) 119 0.001)\n    (check-within (candidate (list 27 28 29 5)) 84 0.001)\n    (check-within (candidate (list 42 43 44 45 46 47 48)) 315 0.001)\n    (check-within (candidate (list 2 3 4 5 6 7 8 9 10 11 1 10 5 6)) 65 0.001)\n    (check-within (candidate (list 32 33 34 35 36 37 5 8 5 3 4 2 10 3 7)) 207 0.001)\n    (check-within (candidate (list 24 25 26 27 28 29 30 31 32 33 1 3 9)) 285 0.001)\n    (check-within (candidate (list 48 49)) 97 0.001)\n    (check-within (candidate (list 46 47 6 7 1)) 93 0.001)\n    (check-within (candidate (list 32 33 34 35 36 37 38 39 40)) 324 0.001)\n    (check-within (candidate (list 40 41 42 43 44 45 6)) 255 0.001)\n    (check-within (candidate (list 5 6 7 8 9 10 11 12 13 14 15 16 17 18 9)) 161 0.001)\n    (check-within (candidate (list 39 40 41 3 4 7 10 6 2 10 1 9)) 120 0.001)\n    (check-within (candidate (list 17 18)) 35 0.001)\n    (check-within (candidate (list 41 42 43 44 45 46 5 6)) 261 0.001)\n    (check-within (candidate (list 6)) 7 0.001)\n    (check-within (candidate (list 46 47 48 49 50 7)) 240 0.001)\n    (check-within (candidate (list 17 18 19 20 21 22 23 24 25 26 4 7 5 4 4)) 215 0.001)\n    (check-within (candidate (list 40 41 42 43 44 45 46 4 6)) 301 0.001)\n    (check-within (candidate (list 13 4 2 2 3 4 1 8 3 7 7 7 1 6 3)) 14 0.001)\n    (check-within (candidate (list 4 5 6 7 8 9 10 11 12 13 14 15 16 6 8)) 130 0.001)\n    (check-within (candidate (list 12 10)) 13 0.001)\n    (check-within (candidate (list 17 18 19 20 21 5 3 7 10 5 3 7 3 5 3)) 95 0.001)\n    (check-within (candidate (list 38 39 40 41 42 43 44 45 5 7 9 9 4 1)) 332 0.001)\n    (check-within (candidate (list 32 33 34 35)) 134 0.001)\n    (check-within (candidate (list 33 34 7 3 4 4)) 67 0.001)\n    (check-within (candidate (list 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47)) 600 0.001)\n    (check-within (candidate (list 14 9 6 9 7 9 10 4 9 9 4 4)) 15 0.001)\n    (check-within (candidate (list 18 19 20 21 22 23 24 25 26 6 8 2 1)) 198 0.001)\n    (check-within (candidate (list 19 20 21 7 9)) 60 0.001)\n    (check-within (candidate (list 19 20 21 10 1 8 2 1)) 60 0.001)\n    (check-within (candidate (list 1 2 3 9 2 10 8 3 10 2)) 6 0.001)\n    (check-within (candidate (list 48 10)) 49 0.001)\n    (check-within (candidate (list 20 21 22 23 24 25 5)) 135 0.001)\n    (check-within (candidate (list 40 41 42 43 3 4 10 3 7 8 9 1 5)) 166 0.001)\n    (check-within (candidate (list 21 22 23 24 25 26 27 8)) 168 0.001)\n    (check-within (candidate (list 2 3 4 5 6 4)) 20 0.001)\n    (check-within (candidate (list 9 10 11 12 13 14 15 16 17 4)) 117 0.001)\n    (check-within (candidate (list 25 26 27 28 29 6 8)) 135 0.001)\n    (check-within (candidate (list 16 17 18 19 20 21 22 23 24 25 6)) 205 0.001)\n    (check-within (candidate (list 7 8 9 10 11 12)) 57 0.001)\n    (check-within (candidate (list 32 9 2 6 4 1 4 3 5)) 33 0.001)\n    (check-within (candidate (list 1 4 3)) 2 0.001)\n    (check-within (candidate (list 34 35 36 37 38 39 1 9 3 3 10 7 1)) 219 0.001)\n    (check-within (candidate (list 37 7 6 4 3 1 10 8 7 2 6)) 38 0.001)\n    (check-within (candidate (list 32)) 33 0.001)\n    (check-within (candidate (list 25 26 27 4)) 78 0.001)\n    (check-within (candidate (list 31 32 33 8 5 3 7 2)) 96 0.001)\n    (check-within (candidate (list 38 39 40 41 42 43 44 45 1)) 332 0.001)\n    (check-within (candidate (list 35 36 3 10)) 71 0.001)\n    (check-within (candidate (list 31 32 33 34 35 7 6 1 9)) 165 0.001)\n    (check-within (candidate (list 47 48 49 2 2)) 144 0.001)\n    (check-within (candidate (list 3 4 5 6 7 8 9 10 11 10 1)) 63 0.001)\n    (check-within (candidate (list 50)) 51 0.001)\n    (check-within (candidate (list 14 15 16 17 7 10 3 10)) 62 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3239_minimumOperationsToMakeEqual", "language": "rkt", "prompt": "#lang racket\n;; You are given two positive integers x and y.\n;; In one operation, you can do one of the four following operations:\n;; Divide x by 11 if x is a multiple of 11.\n;; Divide x by 5 if x is a multiple of 5.\n;; Decrement x by 1.\n;; Increment x by 1.\n;; Return the minimum number of operations required to make  x and y equal.\n;; Example 1:\n;; Input: x = 26, y = 1\n;; Output: 3\n;; Explanation: We can make 26 equal to 1 by applying the following operations: \n;; 1. Decrement x by 1\n;; 2. Divide x by 5\n;; 3. Divide x by 5\n;; It can be shown that 3 is the minimum number of operations required to make 26 equal to 1.\n;; Example 2:\n;; Input: x = 54, y = 2\n;; Output: 4\n;; Explanation: We can make 54 equal to 2 by applying the following operations: \n;; 1. Increment x by 1\n;; 2. Divide x by 11 \n;; 3. Divide x by 5\n;; 4. Increment x by 1\n;; It can be shown that 4 is the minimum number of operations required to make 54 equal to 2.\n;; Example 3:\n;; Input: x = 25, y = 30\n;; Output: 5\n;; Explanation: We can make 25 equal to 30 by applying the following operations: \n;; 1. Increment x by 1\n;; 2. Increment x by 1\n;; 3. Increment x by 1\n;; 4. Increment x by 1\n;; 5. Increment x by 1\n;; It can be shown that 5 is the minimum number of operations required to make 25 equal to 30.\n;; Constraints:\n;; 1 <= x, y <= 104\n(define (minimumOperationsToMakeEqual x y)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3239_minimumOperationsToMakeEqual.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumOperationsToMakeEqual))\n    (check-within (candidate 26 1) 3 0.001)\n    (check-within (candidate 54 2) 4 0.001)\n    (check-within (candidate 25 30) 5 0.001)\n    (check-within (candidate 1 1) 0 0.001)\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate 1 3) 2 0.001)\n    (check-within (candidate 1 4) 3 0.001)\n    (check-within (candidate 1 5) 4 0.001)\n    (check-within (candidate 1 6) 5 0.001)\n    (check-within (candidate 1 7) 6 0.001)\n    (check-within (candidate 1 8) 7 0.001)\n    (check-within (candidate 1 9) 8 0.001)\n    (check-within (candidate 1 10) 9 0.001)\n    (check-within (candidate 1 11) 10 0.001)\n    (check-within (candidate 1 12) 11 0.001)\n    (check-within (candidate 1 13) 12 0.001)\n    (check-within (candidate 1 14) 13 0.001)\n    (check-within (candidate 1 15) 14 0.001)\n    (check-within (candidate 1 16) 15 0.001)\n    (check-within (candidate 1 17) 16 0.001)\n    (check-within (candidate 1 18) 17 0.001)\n    (check-within (candidate 1 19) 18 0.001)\n    (check-within (candidate 1 20) 19 0.001)\n    (check-within (candidate 1 21) 20 0.001)\n    (check-within (candidate 1 22) 21 0.001)\n    (check-within (candidate 1 23) 22 0.001)\n    (check-within (candidate 1 24) 23 0.001)\n    (check-within (candidate 1 25) 24 0.001)\n    (check-within (candidate 2 1) 1 0.001)\n    (check-within (candidate 2 2) 0 0.001)\n    (check-within (candidate 2 3) 1 0.001)\n    (check-within (candidate 2 4) 2 0.001)\n    (check-within (candidate 2 5) 3 0.001)\n    (check-within (candidate 2 6) 4 0.001)\n    (check-within (candidate 2 7) 5 0.001)\n    (check-within (candidate 2 8) 6 0.001)\n    (check-within (candidate 2 9) 7 0.001)\n    (check-within (candidate 2 10) 8 0.001)\n    (check-within (candidate 2 11) 9 0.001)\n    (check-within (candidate 2 12) 10 0.001)\n    (check-within (candidate 2 13) 11 0.001)\n    (check-within (candidate 2 14) 12 0.001)\n    (check-within (candidate 2 15) 13 0.001)\n    (check-within (candidate 2 16) 14 0.001)\n    (check-within (candidate 2 17) 15 0.001)\n    (check-within (candidate 2 18) 16 0.001)\n    (check-within (candidate 2 19) 17 0.001)\n    (check-within (candidate 2 20) 18 0.001)\n    (check-within (candidate 2 21) 19 0.001)\n    (check-within (candidate 2 22) 20 0.001)\n    (check-within (candidate 2 23) 21 0.001)\n    (check-within (candidate 2 24) 22 0.001)\n    (check-within (candidate 2 25) 23 0.001)\n    (check-within (candidate 3 1) 2 0.001)\n    (check-within (candidate 3 2) 1 0.001)\n    (check-within (candidate 3 3) 0 0.001)\n    (check-within (candidate 3 4) 1 0.001)\n    (check-within (candidate 3 5) 2 0.001)\n    (check-within (candidate 3 6) 3 0.001)\n    (check-within (candidate 3 7) 4 0.001)\n    (check-within (candidate 3 8) 5 0.001)\n    (check-within (candidate 3 9) 6 0.001)\n    (check-within (candidate 3 10) 7 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 3 12) 9 0.001)\n    (check-within (candidate 3 13) 10 0.001)\n    (check-within (candidate 3 14) 11 0.001)\n    (check-within (candidate 3 15) 12 0.001)\n    (check-within (candidate 3 16) 13 0.001)\n    (check-within (candidate 3 17) 14 0.001)\n    (check-within (candidate 3 18) 15 0.001)\n    (check-within (candidate 3 19) 16 0.001)\n    (check-within (candidate 3 20) 17 0.001)\n    (check-within (candidate 3 21) 18 0.001)\n    (check-within (candidate 3 22) 19 0.001)\n    (check-within (candidate 3 23) 20 0.001)\n    (check-within (candidate 3 24) 21 0.001)\n    (check-within (candidate 3 25) 22 0.001)\n    (check-within (candidate 4 1) 2 0.001)\n    (check-within (candidate 4 2) 2 0.001)\n    (check-within (candidate 4 3) 1 0.001)\n    (check-within (candidate 4 4) 0 0.001)\n    (check-within (candidate 4 5) 1 0.001)\n    (check-within (candidate 4 6) 2 0.001)\n    (check-within (candidate 4 7) 3 0.001)\n    (check-within (candidate 4 8) 4 0.001)\n    (check-within (candidate 4 9) 5 0.001)\n    (check-within (candidate 4 10) 6 0.001)\n    (check-within (candidate 4 11) 7 0.001)\n    (check-within (candidate 4 12) 8 0.001)\n    (check-within (candidate 4 13) 9 0.001)\n    (check-within (candidate 4 14) 10 0.001)\n    (check-within (candidate 4 15) 11 0.001)\n    (check-within (candidate 4 16) 12 0.001)\n    (check-within (candidate 4 17) 13 0.001)\n    (check-within (candidate 4 18) 14 0.001)\n    (check-within (candidate 4 19) 15 0.001)\n    (check-within (candidate 4 20) 16 0.001)\n    (check-within (candidate 4 21) 17 0.001)\n    (check-within (candidate 4 22) 18 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3240_findMaximumNumber", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer k and an integer x.\n;; Consider s is the 1-indexed binary representation of an integer num. The price of a number num is the number of i's such that i % x == 0 and s[i] is a set bit.\n;; Return the greatest integer num such that the sum of prices of all numbers from 1 to num is less than or equal to k.\n;; Note:\n;; In the binary representation of a number set bit is a bit of value 1.\n;; The binary representation of a number will be indexed from right to left. For example, if s == 11100, s[4] == 1 and s[2] == 0.\n;; Example 1:\n;; Input: k = 9, x = 1\n;; Output: 6\n;; Explanation: The numbers 1, 2, 3, 4, 5, and 6 can be written in binary representation as \"1\", \"10\", \"11\", \"100\", \"101\", and \"110\" respectively.\n;; Since x is equal to 1, the price of each number is the number of its set bits.\n;; The number of set bits in these numbers is 9. So the sum of the prices of the first 6 numbers is 9.\n;; So the answer is 6.\n;; Example 2:\n;; Input: k = 7, x = 2\n;; Output: 9\n;; Explanation: Since x is equal to 2, we should just check eventh bits.\n;; The second bit of binary representation of numbers 2 and 3 is a set bit. So the sum of their prices is 2.\n;; The second bit of binary representation of numbers 6 and 7 is a set bit. So the sum of their prices is 2.\n;; The fourth bit of binary representation of numbers 8 and 9 is a set bit but their second bit is not. So the sum of their prices is 2.\n;; Numbers 1, 4, and 5 don't have set bits in their eventh bits in their binary representation. So the sum of their prices is 0.\n;; The second and the fourth bit of the binary representation of the number 10 are a set bit. So its price is 2.\n;; The sum of the prices of the first 9 numbers is 6.\n;; Because the sum of the prices of the first 10 numbers is 8, the answer is 9.\n;; Constraints:\n;; 1 <= k <= 1015\n;; 1 <= x <= 8\n(define (findMaximumNumber k x)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3240_findMaximumNumber.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate findMaximumNumber))\n    (check-within (candidate 9 1) 6 0.001)\n    (check-within (candidate 7 2) 9 0.001)\n    (check-within (candidate 19 6) 50 0.001)\n    (check-within (candidate 57 4) 120 0.001)\n    (check-within (candidate 58 5) 121 0.001)\n    (check-within (candidate 60 8) 187 0.001)\n    (check-within (candidate 72 5) 151 0.001)\n    (check-within (candidate 81 6) 176 0.001)\n    (check-within (candidate 83 1) 33 0.001)\n    (check-within (candidate 83 7) 210 0.001)\n    (check-within (candidate 116 5) 243 0.001)\n    (check-within (candidate 157 6) 316 0.001)\n    (check-within (candidate 201 3) 212 0.001)\n    (check-within (candidate 268 6) 555 0.001)\n    (check-within (candidate 281 5) 531 0.001)\n    (check-within (candidate 283 3) 274 0.001)\n    (check-within (candidate 309 4) 364 0.001)\n    (check-within (candidate 363 7) 746 0.001)\n    (check-within (candidate 409 2) 220 0.001)\n    (check-within (candidate 456 7) 967 0.001)\n    (check-within (candidate 466 3) 365 0.001)\n    (check-within (candidate 500 3) 379 0.001)\n    (check-within (candidate 513 1) 148 0.001)\n    (check-within (candidate 521 8) 1160 0.001)\n    (check-within (candidate 540 4) 571 0.001)\n    (check-within (candidate 545 1) 156 0.001)\n    (check-within (candidate 579 1) 165 0.001)\n    (check-within (candidate 584 1) 166 0.001)\n    (check-within (candidate 589 3) 427 0.001)\n    (check-within (candidate 599 6) 1206 0.001)\n    (check-within (candidate 632 2) 346 0.001)\n    (check-within (candidate 692 3) 481 0.001)\n    (check-within (candidate 701 7) 1404 0.001)\n    (check-within (candidate 704 4) 727 0.001)\n    (check-within (candidate 731 7) 1498 0.001)\n    (check-within (candidate 781 1) 210 0.001)\n    (check-within (candidate 782 7) 1613 0.001)\n    (check-within (candidate 808 6) 1639 0.001)\n    (check-within (candidate 814 7) 1645 0.001)\n    (check-within (candidate 818 1) 218 0.001)\n    (check-within (candidate 821 2) 433 0.001)\n    (check-within (candidate 829 6) 1660 0.001)\n    (check-within (candidate 865 7) 1760 0.001)\n    (check-within (candidate 874 6) 1769 0.001)\n    (check-within (candidate 879 1) 230 0.001)\n    (check-within (candidate 879 3) 628 0.001)\n    (check-within (candidate 898 8) 1921 0.001)\n    (check-within (candidate 902 3) 653 0.001)\n    (check-within (candidate 905 8) 1928 0.001)\n    (check-within (candidate 937 8) 1960 0.001)\n    (check-within (candidate 957 3) 701 0.001)\n    (check-within (candidate 973 1) 247 0.001)\n    (check-within (candidate 978 3) 737 0.001)\n    (check-within (candidate 991 5) 1006 0.001)\n    (check-within (candidate 1029 3) 771 0.001)\n    (check-within (candidate 1065 6) 2083 0.001)\n    (check-within (candidate 1086 3) 805 0.001)\n    (check-within (candidate 1105 1) 280 0.001)\n    (check-within (candidate 1113 3) 815 0.001)\n    (check-within (candidate 1143 4) 1190 0.001)\n    (check-within (candidate 1148 2) 564 0.001)\n    (check-within (candidate 1150 7) 2301 0.001)\n    (check-within (candidate 1156 3) 835 0.001)\n    (check-within (candidate 1171 7) 2386 0.001)\n    (check-within (candidate 1172 1) 297 0.001)\n    (check-within (candidate 1227 7) 2506 0.001)\n    (check-within (candidate 1236 8) 2515 0.001)\n    (check-within (candidate 1270 5) 1525 0.001)\n    (check-within (candidate 1274 6) 2220 0.001)\n    (check-within (candidate 1281 6) 2223 0.001)\n    (check-within (candidate 1282 6) 2224 0.001)\n    (check-within (candidate 1288 5) 1543 0.001)\n    (check-within (candidate 1376 6) 2287 0.001)\n    (check-within (candidate 1393 7) 2800 0.001)\n    (check-within (candidate 1415 4) 1454 0.001)\n    (check-within (candidate 1446 7) 2917 0.001)\n    (check-within (candidate 1459 1) 358 0.001)\n    (check-within (candidate 1520 3) 1017 0.001)\n    (check-within (candidate 1539 6) 2400 0.001)\n    (check-within (candidate 1545 7) 3144 0.001)\n    (check-within (candidate 1573 5) 1732 0.001)\n    (check-within (candidate 1588 8) 3251 0.001)\n    (check-within (candidate 1590 7) 3189 0.001)\n    (check-within (candidate 1617 7) 3280 0.001)\n    (check-within (candidate 1633 6) 2463 0.001)\n    (check-within (candidate 1634 7) 3297 0.001)\n    (check-within (candidate 1687 2) 741 0.001)\n    (check-within (candidate 1731 6) 2528 0.001)\n    (check-within (candidate 1750 5) 1850 0.001)\n    (check-within (candidate 1751 7) 3542 0.001)\n    (check-within (candidate 1760 8) 3551 0.001)\n    (check-within (candidate 1782 8) 3573 0.001)\n    (check-within (candidate 1787 2) 766 0.001)\n    (check-within (candidate 1851 2) 797 0.001)\n    (check-within (candidate 1856 2) 799 0.001)\n    (check-within (candidate 1874 8) 3793 0.001)\n    (check-within (candidate 1893 7) 3812 0.001)\n    (check-within (candidate 1900 1) 444 0.001)\n    (check-within (candidate 1900 7) 3819 0.001)\n    (check-within (candidate 1902 3) 1336 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3241_divideArray", "language": "rkt", "prompt": "#lang racket\n;; You are given an integer array nums of size n and a positive integer k.\n;; Divide the array into one or more arrays of size 3 satisfying the following conditions:\n;; Each element of nums should be in exactly one array.\n;; The difference between any two elements in one array is less than or equal to k.\n;; Return a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.\n;; Example 1:\n;; Input: nums = [1,3,4,8,7,9,3,5,1], k = 2\n;; Output: [[1,1,3],[3,4,5],[7,8,9]]\n;; Explanation: We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].\n;; The difference between any two elements in each array is less than or equal to 2.\n;; Note that the order of elements is not important.\n;; Example 2:\n;; Input: nums = [1,3,3,2,7,3], k = 3\n;; Output: []\n;; Explanation: It is not possible to divide the array satisfying all the conditions.\n;; Constraints:\n;; n == nums.length\n;; 1 <= n <= 105\n;; n is a multiple of 3.\n;; 1 <= nums[i] <= 105\n;; 1 <= k <= 105\n(define (divideArray nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3241_divideArray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divideArray))\n    (check-within (candidate (list 1 3 4 8 7 9 3 5 1) 2) (list (list 1 1 3) (list 3 4 5) (list 7 8 9)) 0.001)\n    (check-within (candidate (list 1 3 3 2 7 3) 3) (list ) 0.001)\n    (check-within (candidate (list 4 2 9 8 2 12 7 12 10 5 8 5 5 7 9 2 5 11) 14) (list (list 2 2 2) (list 4 5 5) (list 5 5 7) (list 7 8 8) (list 9 9 10) (list 11 12 12)) 0.001)\n    (check-within (candidate (list 33 26 4 18 16 24 24 15 8 18 34 20 24 16 3) 16) (list (list 3 4 8) (list 15 16 16) (list 18 18 20) (list 24 24 24) (list 26 33 34)) 0.001)\n    (check-within (candidate (list 6 1 8 8 5 8 5 9 8 9 5 8 3 4 6) 7) (list (list 1 3 4) (list 5 5 5) (list 6 6 8) (list 8 8 8) (list 8 9 9)) 0.001)\n    (check-within (candidate (list 20 21 34 3 19 2 23 32 20 17 14 13 19 20 6) 15) (list (list 2 3 6) (list 13 14 17) (list 19 19 20) (list 20 20 21) (list 23 32 34)) 0.001)\n    (check-within (candidate (list 6 10 5 12 7 11 6 6 12 12 11 7) 2) (list (list 5 6 6) (list 6 7 7) (list 10 11 11) (list 12 12 12)) 0.001)\n    (check-within (candidate (list 12 15 26 7 10 13 15 5 27 16 14 15) 18) (list (list 5 7 10) (list 12 13 14) (list 15 15 15) (list 16 26 27)) 0.001)\n    (check-within (candidate (list 12 7 13 10 7 19 11 23 3 3 7 9) 16) (list (list 3 3 7) (list 7 7 9) (list 10 11 12) (list 13 19 23)) 0.001)\n    (check-within (candidate (list 19 3 23 4 8 1 1 3 26) 7) (list (list 1 1 3) (list 3 4 8) (list 19 23 26)) 0.001)\n    (check-within (candidate (list 11 13 24 11 9 23 16 19 13) 8) (list (list 9 11 11) (list 13 13 16) (list 19 23 24)) 0.001)\n    (check-within (candidate (list 6 12 21 12 6 12 25 20 15 22 11 19 8 4 18 26 17 18 12 5 8) 11) (list (list 4 5 6) (list 6 8 8) (list 11 12 12) (list 12 12 15) (list 17 18 18) (list 19 20 21) (list 22 25 26)) 0.001)\n    (check-within (candidate (list 15 17 14 3 25 15 11 25 15 16 12 18) 10) (list (list 3 11 12) (list 14 15 15) (list 15 16 17) (list 18 25 25)) 0.001)\n    (check-within (candidate (list 16 20 16 19 20 13 14 20 14) 10) (list (list 13 14 14) (list 16 16 19) (list 20 20 20)) 0.001)\n    (check-within (candidate (list 2 13 15 14 18 15 3 13 2) 1) (list ) 0.001)\n    (check-within (candidate (list 1 14 20 7 17 2 14 1 8) 11) (list (list 1 1 2) (list 7 8 14) (list 14 17 20)) 0.001)\n    (check-within (candidate (list 8 12 19 8 9 19 9 19 9 8 6 9 6 6 12) 3) (list (list 6 6 6) (list 8 8 8) (list 9 9 9) (list 9 12 12) (list 19 19 19)) 0.001)\n    (check-within (candidate (list 18 16 17 19 12 25 11 27 11 32 32 17) 20) (list (list 11 11 12) (list 16 17 17) (list 18 19 25) (list 27 32 32)) 0.001)\n    (check-within (candidate (list 21 11 24 20 17 13 7 20 20 16 24 20 12 17 16 15 7 7 18 15 20) 6) (list (list 7 7 7) (list 11 12 13) (list 15 15 16) (list 16 17 17) (list 18 20 20) (list 20 20 20) (list 21 24 24)) 0.001)\n    (check-within (candidate (list 6 7 7 6 7 6) 13) (list (list 6 6 6) (list 7 7 7)) 0.001)\n    (check-within (candidate (list 11 12 12 5 6 5) 9) (list (list 5 5 6) (list 11 12 12)) 0.001)\n    (check-within (candidate (list 5 5 12 5 5 22 2 2 5 2 5 5 16 2 22 2 12 16 15 13 19) 3) (list (list 2 2 2) (list 2 2 5) (list 5 5 5) (list 5 5 5) (list 12 12 13) (list 15 16 16) (list 19 22 22)) 0.001)\n    (check-within (candidate (list 11 28 12 5 19 15 16 9 21 13 12 9 19 19 18) 9) (list (list 5 9 9) (list 11 12 12) (list 13 15 16) (list 18 19 19) (list 19 21 28)) 0.001)\n    (check-within (candidate (list 10 14 17) 15) (list (list 10 14 17)) 0.001)\n    (check-within (candidate (list 16 15 9 20 17 19 11 18 16) 9) (list (list 9 11 15) (list 16 16 17) (list 18 19 20)) 0.001)\n    (check-within (candidate (list 16 28 16 7 18 13 5 27 27 16 20 22 13 6 17) 11) (list (list 5 6 7) (list 13 13 16) (list 16 16 17) (list 18 20 22) (list 27 27 28)) 0.001)\n    (check-within (candidate (list 14 7 13 2 3 7 17 13 13 2 14 7) 3) (list (list 2 2 3) (list 7 7 7) (list 13 13 13) (list 14 14 17)) 0.001)\n    (check-within (candidate (list 20 8 6 5 10 5 10 2 20 6 12 13 13 20 4) 6) (list (list 2 4 5) (list 5 6 6) (list 8 10 10) (list 12 13 13) (list 20 20 20)) 0.001)\n    (check-within (candidate (list 12 14 16 9 20 18 16 4 24 14 16 30 1 17 30 16 30 6) 13) (list (list 1 4 6) (list 9 12 14) (list 14 16 16) (list 16 16 17) (list 18 20 24) (list 30 30 30)) 0.001)\n    (check-within (candidate (list 13 6 19 21 16 11 1 14 7) 20) (list (list 1 6 7) (list 11 13 14) (list 16 19 21)) 0.001)\n    (check-within (candidate (list 13 2 12 22 18 15 3 20 2 18 3 14 2 10 14 9 14 3 14 17 5) 9) (list (list 2 2 2) (list 3 3 3) (list 5 9 10) (list 12 13 14) (list 14 14 14) (list 15 17 18) (list 18 20 22)) 0.001)\n    (check-within (candidate (list 12 13 12 14 14 6 5 7 23 21 21 16 15 20 22 14 20 7) 10) (list (list 5 6 7) (list 7 12 12) (list 13 14 14) (list 14 15 16) (list 20 20 21) (list 21 22 23)) 0.001)\n    (check-within (candidate (list 15 14 3 19 17 18 19 23 2 16 19 3) 5) (list (list 2 3 3) (list 14 15 16) (list 17 18 19) (list 19 19 23)) 0.001)\n    (check-within (candidate (list 12 8 18 6 12 6 8 33 20 6 17 17 27 8 12) 16) (list (list 6 6 6) (list 8 8 8) (list 12 12 12) (list 17 17 18) (list 20 27 33)) 0.001)\n    (check-within (candidate (list 1 1 23 17 18 1) 12) (list (list 1 1 1) (list 17 18 23)) 0.001)\n    (check-within (candidate (list 13 13 3 7 6 13 6 4 3) 1) (list (list 3 3 4) (list 6 6 7) (list 13 13 13)) 0.001)\n    (check-within (candidate (list 19 10 9 20 29 28 29 9 18 27 23 4 16 8 11 19 10 12 10 10 21) 20) (list (list 4 8 9) (list 9 10 10) (list 10 10 11) (list 12 16 18) (list 19 19 20) (list 21 23 27) (list 28 29 29)) 0.001)\n    (check-within (candidate (list 13 12 12 11 22 10) 15) (list (list 10 11 12) (list 12 13 22)) 0.001)\n    (check-within (candidate (list 15 16 12 34 16 16 24 21 3 24 29 10) 20) (list (list 3 10 12) (list 15 16 16) (list 16 21 24) (list 24 29 34)) 0.001)\n    (check-within (candidate (list 17 16 17 11 13 6) 19) (list (list 6 11 13) (list 16 17 17)) 0.001)\n    (check-within (candidate (list 11 16 16 6 8 20 21 3 20 11 16 6 6 11 6) 3) (list (list 3 6 6) (list 6 6 8) (list 11 11 11) (list 16 16 16) (list 20 20 21)) 0.001)\n    (check-within (candidate (list 2 16 8 7 15 16) 9) (list (list 2 7 8) (list 15 16 16)) 0.001)\n    (check-within (candidate (list 15 17 22) 14) (list (list 15 17 22)) 0.001)\n    (check-within (candidate (list 8 4 9 18 18 5 10 11 19 18 19 23 4 15 25 20 20 6) 7) (list (list 4 4 5) (list 6 8 9) (list 10 11 15) (list 18 18 18) (list 19 19 20) (list 20 23 25)) 0.001)\n    (check-within (candidate (list 12 20 16 12 15 16 15 20 14 16 19 13) 1) (list (list 12 12 13) (list 14 15 15) (list 16 16 16) (list 19 20 20)) 0.001)\n    (check-within (candidate (list 20 19 8 21 13 18 21 12 12 18 9 9) 1) (list (list 8 9 9) (list 12 12 13) (list 18 18 19) (list 20 21 21)) 0.001)\n    (check-within (candidate (list 6 14 19 17 13 4 17 10 17) 19) (list (list 4 6 10) (list 13 14 17) (list 17 17 19)) 0.001)\n    (check-within (candidate (list 8 8 12) 4) (list (list 8 8 12)) 0.001)\n    (check-within (candidate (list 3 16 17 18 10 8 20 16 20 10 10 21) 16) (list (list 3 8 10) (list 10 10 16) (list 16 17 18) (list 20 20 21)) 0.001)\n    (check-within (candidate (list 19 14 17 20 16 16 7 10 18 8 16 15 15 13 12 14 17 11) 8) (list (list 7 8 10) (list 11 12 13) (list 14 14 15) (list 15 16 16) (list 16 17 17) (list 18 19 20)) 0.001)\n    (check-within (candidate (list 18 7 11 13 13 9 22 20 21 13 7 18 8 8 16) 4) (list (list 7 7 8) (list 8 9 11) (list 13 13 13) (list 16 18 18) (list 20 21 22)) 0.001)\n    (check-within (candidate (list 10 15 9 15 15 10) 1) (list (list 9 10 10) (list 15 15 15)) 0.001)\n    (check-within (candidate (list 16 17 16) 16) (list (list 16 16 17)) 0.001)\n    (check-within (candidate (list 15 1 15 14 18 17 1 18 12 16 6 6 7 1 12) 4) (list (list 1 1 1) (list 6 6 7) (list 12 12 14) (list 15 15 16) (list 17 18 18)) 0.001)\n    (check-within (candidate (list 6 11 6 18 11 13 13 8 11 4 4 11 12 17 11) 12) (list (list 4 4 6) (list 6 8 11) (list 11 11 11) (list 11 12 13) (list 13 17 18)) 0.001)\n    (check-within (candidate (list 5 13 4 14 11 18 9 10 20 5 17 11 5 8 20 5 14 4 18 17 17) 8) (list (list 4 4 5) (list 5 5 5) (list 8 9 10) (list 11 11 13) (list 14 14 17) (list 17 17 18) (list 18 20 20)) 0.001)\n    (check-within (candidate (list 13 6 20 13 12 8 7 12 22 16 13 7 12 17 5) 6) (list (list 5 6 7) (list 7 8 12) (list 12 12 13) (list 13 13 16) (list 17 20 22)) 0.001)\n    (check-within (candidate (list 23 2 15 20 18 14 20 7 2 22 4 14 7 9 15 14 2 7) 8) (list (list 2 2 2) (list 4 7 7) (list 7 9 14) (list 14 14 15) (list 15 18 20) (list 20 22 23)) 0.001)\n    (check-within (candidate (list 19 9 2 4 17 2 27 18 17) 18) (list (list 2 2 4) (list 9 17 17) (list 18 19 27)) 0.001)\n    (check-within (candidate (list 5 20 29 4 12 14 31 6 11 2 15 17 15 19 4) 20) (list (list 2 4 4) (list 5 6 11) (list 12 14 15) (list 15 17 19) (list 20 29 31)) 0.001)\n    (check-within (candidate (list 15 20 5 24 18 16 25 21 28 12 19 28 25 20 14 18 24 28) 17) (list (list 5 12 14) (list 15 16 18) (list 18 19 20) (list 20 21 24) (list 24 25 25) (list 28 28 28)) 0.001)\n    (check-within (candidate (list 9 6 23 17 7 17) 20) (list (list 6 7 9) (list 17 17 23)) 0.001)\n    (check-within (candidate (list 24 23 19) 6) (list (list 19 23 24)) 0.001)\n    (check-within (candidate (list 6 19 22 7 17 7 15 17 7 18 4 14 9 10 16) 9) (list (list 4 6 7) (list 7 7 9) (list 10 14 15) (list 16 17 17) (list 18 19 22)) 0.001)\n    (check-within (candidate (list 4 3 15 1 15 15) 4) (list (list 1 3 4) (list 15 15 15)) 0.001)\n    (check-within (candidate (list 10 22 18 15 7 21 6 7 11 9 7 6 7 10 18) 8) (list (list 6 6 7) (list 7 7 7) (list 9 10 10) (list 11 15 18) (list 18 21 22)) 0.001)\n    (check-within (candidate (list 16 17 2 17 9 7 22 17 12 4 14 17 4 19 12 18 19 8 17 5 6) 7) (list (list 2 4 4) (list 5 6 7) (list 8 9 12) (list 12 14 16) (list 17 17 17) (list 17 17 18) (list 19 19 22)) 0.001)\n    (check-within (candidate (list 20 18 18 22 7 9 9 10 16 4 18 18 11 9 18 11 11 21) 7) (list (list 4 7 9) (list 9 9 10) (list 11 11 11) (list 16 18 18) (list 18 18 18) (list 20 21 22)) 0.001)\n    (check-within (candidate (list 5 11 15 9 17 6 16 14 4 9 5 13 10 12 13 15 13 12 16 12 13) 5) (list (list 4 5 5) (list 6 9 9) (list 10 11 12) (list 12 12 13) (list 13 13 13) (list 14 15 15) (list 16 16 17)) 0.001)\n    (check-within (candidate (list 4 16 17) 20) (list (list 4 16 17)) 0.001)\n    (check-within (candidate (list 10 9 22 13 17 11 6 9 11) 10) (list (list 6 9 9) (list 10 11 11) (list 13 17 22)) 0.001)\n    (check-within (candidate (list 3 11 19 8 22 23 15 18 37 7 25 20 12 19 7) 18) (list (list 3 7 7) (list 8 11 12) (list 15 18 19) (list 19 20 22) (list 23 25 37)) 0.001)\n    (check-within (candidate (list 4 6 6 3 11 11) 16) (list (list 3 4 6) (list 6 11 11)) 0.001)\n    (check-within (candidate (list 10 17 10 15 16 8) 7) (list (list 8 10 10) (list 15 16 17)) 0.001)\n    (check-within (candidate (list 4 20 4 19 8 7 4 20 7) 3) (list (list 4 4 4) (list 7 7 8) (list 19 20 20)) 0.001)\n    (check-within (candidate (list 4 4 4) 17) (list (list 4 4 4)) 0.001)\n    (check-within (candidate (list 18 6 15 20 5 27 23 15 26 11 11 4 17 23 11) 15) (list (list 4 5 6) (list 11 11 11) (list 15 15 17) (list 18 20 23) (list 23 26 27)) 0.001)\n    (check-within (candidate (list 8 9 5) 15) (list (list 5 8 9)) 0.001)\n    (check-within (candidate (list 20 15 8 11 11 10 19 7 20) 7) (list (list 7 8 10) (list 11 11 15) (list 19 20 20)) 0.001)\n    (check-within (candidate (list 12 11 18 13 13 21) 11) (list (list 11 12 13) (list 13 18 21)) 0.001)\n    (check-within (candidate (list 19 29 11 18 19 17 29 19 7) 14) (list (list 7 11 17) (list 18 19 19) (list 19 29 29)) 0.001)\n    (check-within (candidate (list 14 1 25 1 14 19 2 2 4 16 17 11 26 29 12) 17) (list (list 1 1 2) (list 2 4 11) (list 12 14 14) (list 16 17 19) (list 25 26 29)) 0.001)\n    (check-within (candidate (list 14 25 16 11 7 13 12 16 24 19 5 17) 13) (list (list 5 7 11) (list 12 13 14) (list 16 16 17) (list 19 24 25)) 0.001)\n    (check-within (candidate (list 11 26 19 10 16 10 11 18 9) 11) (list (list 9 10 10) (list 11 11 16) (list 18 19 26)) 0.001)\n    (check-within (candidate (list 16 8 15) 16) (list (list 8 15 16)) 0.001)\n    (check-within (candidate (list 12 8 18 8 18 13 12 18 18 13 12 23 21 8 13) 5) (list (list 8 8 8) (list 12 12 12) (list 13 13 13) (list 18 18 18) (list 18 21 23)) 0.001)\n    (check-within (candidate (list 12 16 9 8 22 16) 16) (list (list 8 9 12) (list 16 16 22)) 0.001)\n    (check-within (candidate (list 15 16 18 8 12 7 5 17 23 17 18 13 5 4 13 18 7 20) 6) (list (list 4 5 5) (list 7 7 8) (list 12 13 13) (list 15 16 17) (list 17 18 18) (list 18 20 23)) 0.001)\n    (check-within (candidate (list 12 11 14 13 9 16 31 19 21 22 7 1 22 23 9 2 21 21) 15) (list (list 1 2 7) (list 9 9 11) (list 12 13 14) (list 16 19 21) (list 21 21 22) (list 22 23 31)) 0.001)\n    (check-within (candidate (list 7 15 18 20 6 21 18 17 11 1 14 15 18 8 17 13 11 8 5 12 11) 10) (list (list 1 5 6) (list 7 8 8) (list 11 11 11) (list 12 13 14) (list 15 15 17) (list 17 18 18) (list 18 20 21)) 0.001)\n    (check-within (candidate (list 13 16 17 16 6 12) 11) (list (list 6 12 13) (list 16 16 17)) 0.001)\n    (check-within (candidate (list 17 17 17 16 17 17) 1) (list (list 16 17 17) (list 17 17 17)) 0.001)\n    (check-within (candidate (list 6 14 6 15 14 6) 17) (list (list 6 6 6) (list 14 14 15)) 0.001)\n    (check-within (candidate (list 23 19 21 10 10 13 15 19 19 3 15 3) 12) (list (list 3 3 10) (list 10 13 15) (list 15 19 19) (list 19 21 23)) 0.001)\n    (check-within (candidate (list 11 4 3 11 3 27 19 10 6 12 11 24 27 1 31) 17) (list (list 1 3 3) (list 4 6 10) (list 11 11 11) (list 12 19 24) (list 27 27 31)) 0.001)\n    (check-within (candidate (list 8 18 18 20 20 19 20 31 7) 17) (list (list 7 8 18) (list 18 19 20) (list 20 20 31)) 0.001)\n    (check-within (candidate (list 4 22 8 12 1 4 4 17 22 4 10 1) 12) (list (list 1 1 4) (list 4 4 4) (list 8 10 12) (list 17 22 22)) 0.001)\n    (check-within (candidate (list 16 15 16 6 9 22 14 16 10 26 18 16 11 18 7) 10) (list (list 6 7 9) (list 10 11 14) (list 15 16 16) (list 16 16 18) (list 18 22 26)) 0.001)\n    (check-within (candidate (list 5 16 12 26 16 18 1 6 23 2 1 21 8 11 9) 14) (list (list 1 1 2) (list 5 6 8) (list 9 11 12) (list 16 16 18) (list 21 23 26)) 0.001)\n    (check-within (candidate (list 6 3 24 13 19 24 13 12 15 3 6 3) 17) (list (list 3 3 3) (list 6 6 12) (list 13 13 15) (list 19 24 24)) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3242_maxFrequencyElements", "language": "rkt", "prompt": "#lang racket\n;; You are given an array nums consisting of positive integers.\n;; Return the total frequencies of elements in numssuch that those elements all have the maximum frequency.\n;; The frequency of an element is the number of occurrences of that element in the array.\n;; Example 1:\n;; Input: nums = [1,2,2,3,1,4]\n;; Output: 4\n;; Explanation: The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\n;; So the number of elements in the array with maximum frequency is 4.\n;; Example 2:\n;; Input: nums = [1,2,3,4,5]\n;; Output: 5\n;; Explanation: All elements of the array have a frequency of 1 which is the maximum.\n;; So the number of elements in the array with maximum frequency is 5.\n;; Constraints:\n;; 1 <= nums.length <= 100\n;; 1 <= nums[i] <= 100\n(define (maxFrequencyElements nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3242_maxFrequencyElements.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxFrequencyElements))\n    (check-within (candidate (list 1 2 2 3 1 4)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) 5 0.001)\n    (check-within (candidate (list 15)) 1 0.001)\n    (check-within (candidate (list 10 12 11 9 6 19 11)) 2 0.001)\n    (check-within (candidate (list 2 12 17 18 11)) 5 0.001)\n    (check-within (candidate (list 19 19 19 20 19 8 19)) 5 0.001)\n    (check-within (candidate (list 1 1 1 1)) 4 0.001)\n    (check-within (candidate (list 10 1 12 10 10 19 10)) 4 0.001)\n    (check-within (candidate (list 1 1 1 20 6 1)) 4 0.001)\n    (check-within (candidate (list 17 17)) 2 0.001)\n    (check-within (candidate (list 6 13 15 15 11 6 7 12 4 11)) 6 0.001)\n    (check-within (candidate (list 1 2)) 2 0.001)\n    (check-within (candidate (list 14 14 17)) 2 0.001)\n    (check-within (candidate (list 17 17 2 12 20 17 12)) 3 0.001)\n    (check-within (candidate (list 3 9 11 11 20)) 2 0.001)\n    (check-within (candidate (list 8 15 8 11 8 13 12 11 8)) 4 0.001)\n    (check-within (candidate (list 17 8 17 19 17 13 17 17 17 5)) 6 0.001)\n    (check-within (candidate (list 11)) 1 0.001)\n    (check-within (candidate (list 5)) 1 0.001)\n    (check-within (candidate (list 4 4 10)) 2 0.001)\n    (check-within (candidate (list 15 13 2 16 2 5 1 18 8 16)) 4 0.001)\n    (check-within (candidate (list 1 17 12 7 17 3)) 2 0.001)\n    (check-within (candidate (list 8 2 8 6 1 1)) 4 0.001)\n    (check-within (candidate (list 3 9 7 9)) 2 0.001)\n    (check-within (candidate (list 20 20 20 5 12 20 9 16)) 4 0.001)\n    (check-within (candidate (list 2 14 3 8 16 4 4 3)) 4 0.001)\n    (check-within (candidate (list 6 12 3 3 11 2)) 2 0.001)\n    (check-within (candidate (list 5 2 13 19 15 20)) 6 0.001)\n    (check-within (candidate (list 2 13 13)) 2 0.001)\n    (check-within (candidate (list 4 5)) 2 0.001)\n    (check-within (candidate (list 20 20 15 20 20 20)) 5 0.001)\n    (check-within (candidate (list 16 16 16 16 1 10 16 9)) 5 0.001)\n    (check-within (candidate (list 5 3 5 8 5 3 5 15)) 4 0.001)\n    (check-within (candidate (list 17)) 1 0.001)\n    (check-within (candidate (list 2 2 3 3 9)) 4 0.001)\n    (check-within (candidate (list 5 11 4 2)) 4 0.001)\n    (check-within (candidate (list 13 13 7)) 2 0.001)\n    (check-within (candidate (list 2 15 10 10 10 4 13)) 3 0.001)\n    (check-within (candidate (list 3 7 1)) 3 0.001)\n    (check-within (candidate (list 19 6 19 19 19 19 19)) 6 0.001)\n    (check-within (candidate (list 15 3 12 4 9 14 10)) 7 0.001)\n    (check-within (candidate (list 1 19 12 1 12 12 1 6)) 6 0.001)\n    (check-within (candidate (list 17 7 3 3 6 5 6 2)) 4 0.001)\n    (check-within (candidate (list 12 4 2 9 17 14 1 12 6)) 2 0.001)\n    (check-within (candidate (list 16 11)) 2 0.001)\n    (check-within (candidate (list 11 11 11 11 10 11 3 11 11)) 7 0.001)\n    (check-within (candidate (list 16 4 20 10 12)) 5 0.001)\n    (check-within (candidate (list 3 11 3 11)) 4 0.001)\n    (check-within (candidate (list 13 9 13 13 13 13 2 13)) 6 0.001)\n    (check-within (candidate (list 2 8 9 4 3)) 5 0.001)\n    (check-within (candidate (list 19 6 9 12 12)) 2 0.001)\n    (check-within (candidate (list 20)) 1 0.001)\n    (check-within (candidate (list 1 11)) 2 0.001)\n    (check-within (candidate (list 6 4 7 19 20 10 13 14)) 8 0.001)\n    (check-within (candidate (list 16 8 5)) 3 0.001)\n    (check-within (candidate (list 15 15 4 7 15 15 15 15 15 7)) 7 0.001)\n    (check-within (candidate (list 5 20)) 2 0.001)\n    (check-within (candidate (list 13)) 1 0.001)\n    (check-within (candidate (list 7 15 13 18 3 11 13 7 1 13)) 3 0.001)\n    (check-within (candidate (list 17 5 17 5 5)) 3 0.001)\n    (check-within (candidate (list 4 5 3 5)) 2 0.001)\n    (check-within (candidate (list 11 2)) 2 0.001)\n    (check-within (candidate (list 1 17 17 20 2 2)) 4 0.001)\n    (check-within (candidate (list 2 5 2 2)) 3 0.001)\n    (check-within (candidate (list 1 1 1 3 8 1)) 4 0.001)\n    (check-within (candidate (list 1 19 19 5 14 13 1 20 6)) 4 0.001)\n    (check-within (candidate (list 19 12 8 20 3 1 12 17)) 2 0.001)\n    (check-within (candidate (list 7 15 1 1 6 3)) 2 0.001)\n    (check-within (candidate (list 8 8 8 3 8 8 3)) 5 0.001)\n    (check-within (candidate (list 5 1 2 2 2 1 1)) 6 0.001)\n    (check-within (candidate (list 12 13 6)) 3 0.001)\n    (check-within (candidate (list 18 12 8 2 16 19)) 6 0.001)\n    (check-within (candidate (list 15 10 2 18 11 14 9)) 7 0.001)\n    (check-within (candidate (list 19 17 9 13 1 13)) 2 0.001)\n    (check-within (candidate (list 4 12 15 1 4 4 2)) 3 0.001)\n    (check-within (candidate (list 16 16 16 8)) 3 0.001)\n    (check-within (candidate (list 2)) 1 0.001)\n    (check-within (candidate (list 13 15 1)) 3 0.001)\n    (check-within (candidate (list 10 10 5 16 17 6 18)) 2 0.001)\n    (check-within (candidate (list 3 2 14 2 18 7)) 2 0.001)\n    (check-within (candidate (list 16 16 3)) 2 0.001)\n    (check-within (candidate (list 1 8 10 11 8 15)) 2 0.001)\n    (check-within (candidate (list 8 19 2 7 5 6 3 4)) 8 0.001)\n    (check-within (candidate (list 9)) 1 0.001)\n    (check-within (candidate (list 13 6 13 10)) 2 0.001)\n    (check-within (candidate (list 14 13 14 4 4 14)) 3 0.001)\n    (check-within (candidate (list 9 9 1 9 9 1)) 4 0.001)\n    (check-within (candidate (list 14 4 11 14 14 4 4)) 6 0.001)\n    (check-within (candidate (list 4 20 20 4 1)) 4 0.001)\n    (check-within (candidate (list 5 11 8 3 11 11 11)) 4 0.001)\n    (check-within (candidate (list 3 2 18 5)) 4 0.001)\n    (check-within (candidate (list 3 8 20 7 16 20 18 13)) 2 0.001)\n    (check-within (candidate (list 19 9 16 4 10 3 18)) 7 0.001)\n    (check-within (candidate (list 11 2 2 3 19 3 11 2 14 1)) 3 0.001)\n    (check-within (candidate (list 19 14 11 7 19 1 11 2 16)) 4 0.001)\n    (check-within (candidate (list 18 15 3 2 8 12 19 14 12)) 2 0.001)\n    (check-within (candidate (list 5 6 11 9 5 5 5)) 4 0.001)\n    (check-within (candidate (list 8 4 4 12 8 1)) 4 0.001)\n    (check-within (candidate (list 9 1 9 9 3)) 3 0.001)\n    (check-within (candidate (list 18)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3243_numberOfPowerfulInt", "language": "rkt", "prompt": "#lang racket\n;; You are given three integers start, finish, and limit. You are also given a 0-indexed string s representing a positive integer.\n;; A positive integer x is called powerful if it ends with s (in other words, s is a suffix of x) and each digit in x is at most limit.\n;; Return the total number of powerful integers in the range [start..finish].\n;; A string x is a suffix of a string y if and only if x is a substring of y that starts from some index (including 0) in y and extends to the index y.length - 1. For example, 25 is a suffix of 5125 whereas 512 is not.\n;; Example 1:\n;; Input: start = 1, finish = 6000, limit = 4, s = \"124\"\n;; Output: 5\n;; Explanation: The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4.\n;; It can be shown that there are only 5 powerful integers in this range.\n;; Example 2:\n;; Input: start = 15, finish = 215, limit = 6, s = \"10\"\n;; Output: 2\n;; Explanation: The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix.\n;; It can be shown that there are only 2 powerful integers in this range.\n;; Example 3:\n;; Input: start = 1000, finish = 2000, limit = 4, s = \"3000\"\n;; Output: 0\n;; Explanation: All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range.\n;; Constraints:\n;; 1 <= start <= finish <= 1015\n;; 1 <= limit <= 9\n;; 1 <= s.length <= floor(log10(finish)) + 1\n;; s only consists of numeric digits which are at most limit.\n;; s does not have leading zeros.\n(define (numberOfPowerfulInt start finish limit s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3243_numberOfPowerfulInt.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numberOfPowerfulInt))\n    (check-within (candidate 1 6000 4 124) 5 0.001)\n    (check-within (candidate 15 215 6 10) 2 0.001)\n    (check-within (candidate 1000 2000 4 3000) 0 0.001)\n    (check-within (candidate 141 148 9 9) 0 0.001)\n    (check-within (candidate 1 971 9 17) 10 0.001)\n    (check-within (candidate 1 971 9 27) 10 0.001)\n    (check-within (candidate 1 971 9 41) 10 0.001)\n    (check-within (candidate 1 971 9 47) 10 0.001)\n    (check-within (candidate 1 971 9 61) 10 0.001)\n    (check-within (candidate 1 971 9 66) 10 0.001)\n    (check-within (candidate 1 971 9 71) 10 0.001)\n    (check-within (candidate 1 971 9 72) 9 0.001)\n    (check-within (candidate 20 1159 5 20) 8 0.001)\n    (check-within (candidate 20 1159 5 24) 8 0.001)\n    (check-within (candidate 20 1159 5 32) 8 0.001)\n    (check-within (candidate 20 1159 5 33) 8 0.001)\n    (check-within (candidate 20 1159 5 40) 8 0.001)\n    (check-within (candidate 20 1159 5 41) 8 0.001)\n    (check-within (candidate 20 1159 5 42) 8 0.001)\n    (check-within (candidate 20 1159 5 43) 8 0.001)\n    (check-within (candidate 20 1159 5 44) 8 0.001)\n    (check-within (candidate 1300 1400 5 245) 0 0.001)\n    (check-within (candidate 3 1429 5 11) 11 0.001)\n    (check-within (candidate 3 1429 5 12) 11 0.001)\n    (check-within (candidate 3 1429 5 13) 11 0.001)\n    (check-within (candidate 3 1429 5 14) 11 0.001)\n    (check-within (candidate 3 1429 5 20) 11 0.001)\n    (check-within (candidate 3 1429 5 21) 11 0.001)\n    (check-within (candidate 3 1429 5 34) 10 0.001)\n    (check-within (candidate 3 1429 5 40) 10 0.001)\n    (check-within (candidate 3 1429 5 43) 10 0.001)\n    (check-within (candidate 15 1440 5 11) 10 0.001)\n    (check-within (candidate 15 1440 5 12) 10 0.001)\n    (check-within (candidate 15 1440 5 14) 10 0.001)\n    (check-within (candidate 15 1440 5 21) 11 0.001)\n    (check-within (candidate 15 1440 5 23) 11 0.001)\n    (check-within (candidate 15 1440 5 31) 11 0.001)\n    (check-within (candidate 15 1440 5 34) 11 0.001)\n    (check-within (candidate 15 1440 5 42) 10 0.001)\n    (check-within (candidate 10 1844 5 12) 12 0.001)\n    (check-within (candidate 10 1844 5 20) 12 0.001)\n    (check-within (candidate 10 1844 5 24) 12 0.001)\n    (check-within (candidate 10 1844 5 30) 12 0.001)\n    (check-within (candidate 10 1844 5 33) 12 0.001)\n    (check-within (candidate 10 1844 5 40) 12 0.001)\n    (check-within (candidate 10 1844 5 42) 12 0.001)\n    (check-within (candidate 10 1844 5 44) 12 0.001)\n    (check-within (candidate 16 1848 5 11) 11 0.001)\n    (check-within (candidate 16 1848 5 13) 11 0.001)\n    (check-within (candidate 16 1848 5 14) 11 0.001)\n    (check-within (candidate 16 1848 5 22) 12 0.001)\n    (check-within (candidate 16 1848 5 30) 12 0.001)\n    (check-within (candidate 16 1848 5 33) 12 0.001)\n    (check-within (candidate 16 1848 5 43) 12 0.001)\n    (check-within (candidate 1 2000 8 1) 162 0.001)\n    (check-within (candidate 1 2000 8 10) 18 0.001)\n    (check-within (candidate 1 2000 8 100) 2 0.001)\n    (check-within (candidate 1 2000 8 11) 18 0.001)\n    (check-within (candidate 1 2000 8 12) 18 0.001)\n    (check-within (candidate 1 2000 8 13) 18 0.001)\n    (check-within (candidate 1 2000 8 14) 18 0.001)\n    (check-within (candidate 1 2000 8 15) 18 0.001)\n    (check-within (candidate 1 2000 8 16) 18 0.001)\n    (check-within (candidate 1 2000 8 17) 18 0.001)\n    (check-within (candidate 1 2000 8 18) 18 0.001)\n    (check-within (candidate 1 2000 8 2) 162 0.001)\n    (check-within (candidate 1 2000 8 20) 18 0.001)\n    (check-within (candidate 1 2000 8 21) 18 0.001)\n    (check-within (candidate 1 2000 8 22) 18 0.001)\n    (check-within (candidate 1 2000 8 23) 18 0.001)\n    (check-within (candidate 1 2000 8 24) 18 0.001)\n    (check-within (candidate 1 2000 8 25) 18 0.001)\n    (check-within (candidate 1 2000 8 26) 18 0.001)\n    (check-within (candidate 1 2000 8 27) 18 0.001)\n    (check-within (candidate 1 2000 8 28) 18 0.001)\n    (check-within (candidate 1 2000 8 3) 162 0.001)\n    (check-within (candidate 1 2000 8 30) 18 0.001)\n    (check-within (candidate 1 2000 8 31) 18 0.001)\n    (check-within (candidate 1 2000 8 32) 18 0.001)\n    (check-within (candidate 1 2000 8 33) 18 0.001)\n    (check-within (candidate 1 2000 8 34) 18 0.001)\n    (check-within (candidate 1 2000 8 35) 18 0.001)\n    (check-within (candidate 1 2000 8 36) 18 0.001)\n    (check-within (candidate 1 2000 8 37) 18 0.001)\n    (check-within (candidate 1 2000 8 38) 18 0.001)\n    (check-within (candidate 1 2000 8 4) 162 0.001)\n    (check-within (candidate 1 2000 8 40) 18 0.001)\n    (check-within (candidate 1 2000 8 41) 18 0.001)\n    (check-within (candidate 1 2000 8 42) 18 0.001)\n    (check-within (candidate 1 2000 8 43) 18 0.001)\n    (check-within (candidate 1 2000 8 44) 18 0.001)\n    (check-within (candidate 1 2000 8 45) 18 0.001)\n    (check-within (candidate 1 2000 8 46) 18 0.001)\n    (check-within (candidate 1 2000 8 47) 18 0.001)\n    (check-within (candidate 1 2000 8 48) 18 0.001)\n    (check-within (candidate 1 2000 8 5) 162 0.001)\n    (check-within (candidate 1 2000 8 50) 18 0.001)\n    (check-within (candidate 1 2000 8 51) 18 0.001)\n    (check-within (candidate 1 2000 8 52) 18 0.001)\n    (check-within (candidate 1 2000 8 53) 18 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3244_minimumArrayLength", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums containing positive integers.\n;; Your task is to minimize the length of nums by performing the following operations any number of times (including zero):\n;; Select two distinct indices i and j from nums, such that nums[i] > 0 and nums[j] > 0.\n;; Insert the result of nums[i] % nums[j] at the end of nums.\n;; Delete the elements at indices i and j from nums.\n;; Return an integer denoting the minimum length of nums after performing the operation any number of times.\n;; Example 1:\n;; Input: nums = [1,4,3,1]\n;; Output: 1\n;; Explanation: One way to minimize the length of the array is as follows:\n;; Operation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\n;; nums becomes [1,1,3].\n;; Operation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\n;; nums becomes [1,1].\n;; Operation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\n;; nums becomes [0].\n;; The length of nums cannot be reduced further. Hence, the answer is 1.\n;; It can be shown that 1 is the minimum achievable length. \n;; Example 2:\n;; Input: nums = [5,5,5,10,5]\n;; Output: 2\n;; Explanation: One way to minimize the length of the array is as follows:\n;; Operation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\n;; nums becomes [5,5,5,5]. \n;; Operation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \n;; nums becomes [5,5,0]. \n;; Operation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\n;; nums becomes [0,0].\n;; The length of nums cannot be reduced further. Hence, the answer is 2.\n;; It can be shown that 2 is the minimum achievable length. \n;; Example 3:\n;; Input: nums = [2,3,4]\n;; Output: 1\n;; Explanation: One way to minimize the length of the array is as follows: \n;; Operation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\n;; nums becomes [2,3].\n;; Operation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\n;; nums becomes [1].\n;; The length of nums cannot be reduced further. Hence, the answer is 1.\n;; It can be shown that 1 is the minimum achievable length.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 1 <= nums[i] <= 109\n(define (minimumArrayLength nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3244_minimumArrayLength.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumArrayLength))\n    (check-within (candidate (list 1 4 3 1)) 1 0.001)\n    (check-within (candidate (list 5 5 5 10 5)) 2 0.001)\n    (check-within (candidate (list 2 3 4)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 3)) 1 0.001)\n    (check-within (candidate (list 6)) 1 0.001)\n    (check-within (candidate (list 1 4)) 1 0.001)\n    (check-within (candidate (list 1 5)) 1 0.001)\n    (check-within (candidate (list 2 4)) 1 0.001)\n    (check-within (candidate (list 3 4)) 1 0.001)\n    (check-within (candidate (list 5 3)) 1 0.001)\n    (check-within (candidate (list 6 9)) 1 0.001)\n    (check-within (candidate (list 8 2)) 1 0.001)\n    (check-within (candidate (list 9 9)) 1 0.001)\n    (check-within (candidate (list 9 10)) 1 0.001)\n    (check-within (candidate (list 1 2 5)) 1 0.001)\n    (check-within (candidate (list 2 1 1)) 1 0.001)\n    (check-within (candidate (list 2 7 10)) 1 0.001)\n    (check-within (candidate (list 2 9 5)) 1 0.001)\n    (check-within (candidate (list 3 2 1)) 1 0.001)\n    (check-within (candidate (list 3 2 7)) 1 0.001)\n    (check-within (candidate (list 3 3 1)) 1 0.001)\n    (check-within (candidate (list 4 1 3)) 1 0.001)\n    (check-within (candidate (list 4 4 4)) 2 0.001)\n    (check-within (candidate (list 5 1 5)) 1 0.001)\n    (check-within (candidate (list 5 5 5)) 2 0.001)\n    (check-within (candidate (list 6 5 1)) 1 0.001)\n    (check-within (candidate (list 8 4 5)) 1 0.001)\n    (check-within (candidate (list 9 2 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2)) 1 0.001)\n    (check-within (candidate (list 1 3 1 7)) 1 0.001)\n    (check-within (candidate (list 1 5 5 4)) 1 0.001)\n    (check-within (candidate (list 1 8 7 2)) 1 0.001)\n    (check-within (candidate (list 2 2 1 1)) 1 0.001)\n    (check-within (candidate (list 2 7 10 1)) 1 0.001)\n    (check-within (candidate (list 2 10 1 7)) 1 0.001)\n    (check-within (candidate (list 4 2 3 5)) 1 0.001)\n    (check-within (candidate (list 4 4 1 1)) 1 0.001)\n    (check-within (candidate (list 5 3 10 10)) 1 0.001)\n    (check-within (candidate (list 6 3 4 4)) 1 0.001)\n    (check-within (candidate (list 6 5 2 10)) 1 0.001)\n    (check-within (candidate (list 7 2 5 9)) 1 0.001)\n    (check-within (candidate (list 1 3 4 4 3)) 1 0.001)\n    (check-within (candidate (list 4 1 7 10 1)) 1 0.001)\n    (check-within (candidate (list 4 3 1 4 3)) 1 0.001)\n    (check-within (candidate (list 4 6 2 6 4)) 1 0.001)\n    (check-within (candidate (list 6 10 6 3 3)) 1 0.001)\n    (check-within (candidate (list 1 4 5 4 5 1)) 1 0.001)\n    (check-within (candidate (list 1 6 6 9 5 7)) 1 0.001)\n    (check-within (candidate (list 2 1 2 5 3 1)) 1 0.001)\n    (check-within (candidate (list 2 2 4 4 2 1)) 1 0.001)\n    (check-within (candidate (list 3 5 2 5 5 2)) 1 0.001)\n    (check-within (candidate (list 4 1 4 4 5 1)) 1 0.001)\n    (check-within (candidate (list 4 3 1 2 5 2)) 1 0.001)\n    (check-within (candidate (list 4 8 8 7 6 8)) 1 0.001)\n    (check-within (candidate (list 5 2 2 2 9 10)) 1 0.001)\n    (check-within (candidate (list 7 3 2 4 3 10)) 1 0.001)\n    (check-within (candidate (list 7 5 6 6 7 3)) 1 0.001)\n    (check-within (candidate (list 8 3 9 4 5 8)) 1 0.001)\n    (check-within (candidate (list 2 5 4 3 5 5 4)) 1 0.001)\n    (check-within (candidate (list 4 5 5 1 2 5 2)) 1 0.001)\n    (check-within (candidate (list 4 8 7 4 9 3 9)) 1 0.001)\n    (check-within (candidate (list 5 3 5 7 9 10 10)) 1 0.001)\n    (check-within (candidate (list 7 1 9 3 9 2 6)) 1 0.001)\n    (check-within (candidate (list 7 10 1 8 6 1 2)) 1 0.001)\n    (check-within (candidate (list 9 1 10 7 3 9 7)) 1 0.001)\n    (check-within (candidate (list 10 10 3 9 8 3 5)) 1 0.001)\n    (check-within (candidate (list 10 10 4 8 5 2 6)) 1 0.001)\n    (check-within (candidate (list 1 5 2 10 4 5 10 1)) 1 0.001)\n    (check-within (candidate (list 2 1 3 3 3 3 1 4)) 1 0.001)\n    (check-within (candidate (list 2 2 7 4 5 5 1 2)) 1 0.001)\n    (check-within (candidate (list 2 4 5 5 3 5 2 4)) 1 0.001)\n    (check-within (candidate (list 2 10 6 7 7 2 3 4)) 1 0.001)\n    (check-within (candidate (list 3 3 2 2 4 2 3 3)) 1 0.001)\n    (check-within (candidate (list 3 4 3 4 1 1 1 2)) 2 0.001)\n    (check-within (candidate (list 3 4 4 3 5 4 5 5)) 1 0.001)\n    (check-within (candidate (list 3 6 7 7 6 9 1 6)) 1 0.001)\n    (check-within (candidate (list 5 1 1 1 1 5 5 5)) 2 0.001)\n    (check-within (candidate (list 6 7 5 5 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 8 5 4 5 4 7 6 10)) 1 0.001)\n    (check-within (candidate (list 8 10 4 6 7 9 2 1)) 1 0.001)\n    (check-within (candidate (list 2 6 3 8 9 10 9 3 10)) 1 0.001)\n    (check-within (candidate (list 4 2 2 1 3 1 5 3 3)) 1 0.001)\n    (check-within (candidate (list 4 4 5 1 2 1 1 1 2)) 2 0.001)\n    (check-within (candidate (list 4 5 3 5 5 4 4 2 1)) 1 0.001)\n    (check-within (candidate (list 5 1 5 1 1 5 4 3 3)) 2 0.001)\n    (check-within (candidate (list 5 1 5 3 3 2 2 4 4)) 1 0.001)\n    (check-within (candidate (list 6 4 5 7 9 10 10 6 9)) 1 0.001)\n    (check-within (candidate (list 6 5 6 4 9 8 8 3 7)) 1 0.001)\n    (check-within (candidate (list 9 7 6 10 1 8 5 4 2)) 1 0.001)\n    (check-within (candidate (list 9 10 1 6 4 10 1 3 4)) 1 0.001)\n    (check-within (candidate (list 10 5 4 8 4 3 7 10 3)) 1 0.001)\n    (check-within (candidate (list 1 1 1 2 2 2 5 5 1 3)) 2 0.001)\n    (check-within (candidate (list 4 5 1 8 2 7 2 7 7 6)) 1 0.001)\n    (check-within (candidate (list 7 1 3 10 1 4 5 2 9 7)) 1 0.001)\n    (check-within (candidate (list 7 2 2 9 5 6 6 10 2 3)) 1 0.001)\n    (check-within (candidate (list 7 7 3 6 8 10 3 7 6 9)) 1 0.001)\n    (check-within (candidate (list 1 4 5 8 9 3 1 4 7 4 5)) 1 0.001)\n    (check-within (candidate (list 4 10 3 8 9 5 7 6 9 10 10)) 1 0.001)\n    (check-within (candidate (list 5 9 3 9 3 10 1 1 6 3 10)) 1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3245_beautifulIndices", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed string s, a string a, a string b, and an integer k.\n;; An index i is beautiful if:\n;; 0 <= i <= s.length - a.length\n;; s[i..(i + a.length - 1)] == a\n;; There exists an index j such that:\n;; 0 <= j <= s.length - b.length\n;; s[j..(j + b.length - 1)] == b\n;; |j - i| <= k\n;; Return the array that contains beautiful indices in sorted order from smallest to largest.\n;; Example 1:\n;; Input: s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\n;; Output: [16,33]\n;; Explanation: There are 2 beautiful indices: [16,33].\n;; - The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n;; - The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\n;; Thus we return [16,33] as the result.\n;; Example 2:\n;; Input: s = \"abcd\", a = \"a\", b = \"a\", k = 4\n;; Output: [0]\n;; Explanation: There is 1 beautiful index: [0].\n;; - The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\n;; Thus we return [0] as the result.\n;; Constraints:\n;; 1 <= k <= s.length <= 105\n;; 1 <= a.length, b.length <= 10\n;; s, a, and b contain only lowercase English letters.\n(define (beautifulIndices s a b k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3245_beautifulIndices.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate beautifulIndices))\n    (check-within (candidate isawsquirrelnearmysquirrelhouseohmy my squirrel 15) (list 16 33) 0.001)\n    (check-within (candidate abcd a a 4) (list 0) 0.001)\n    (check-within (candidate sqgrt rt sq 3) (list 3) 0.001)\n    (check-within (candidate mquz tklr caz 4) (list ) 0.001)\n    (check-within (candidate wl xjigt wl 2) (list ) 0.001)\n    (check-within (candidate bavgoc ba c 6) (list 0) 0.001)\n    (check-within (candidate xpcp yxnod xpc 4) (list ) 0.001)\n    (check-within (candidate lahhnlwx hhnlw ty 6) (list ) 0.001)\n    (check-within (candidate dexgscgecd gscge d 6) (list 3) 0.001)\n    (check-within (candidate vjrao vjr yxpsw 5) (list ) 0.001)\n    (check-within (candidate oo swhup o 1) (list ) 0.001)\n    (check-within (candidate bxlzgxc ducf xlzgx 3) (list ) 0.001)\n    (check-within (candidate wetlgztzm box wetl 4) (list ) 0.001)\n    (check-within (candidate ocmm m oc 3) (list 2 3) 0.001)\n    (check-within (candidate goxmox gibs ox 6) (list ) 0.001)\n    (check-within (candidate kzlrqzldvy zl tfsr 9) (list ) 0.001)\n    (check-within (candidate qhd hd od 1) (list ) 0.001)\n    (check-within (candidate bozpeh bozp vrjn 2) (list ) 0.001)\n    (check-within (candidate ggfsg gfsg g 4) (list 1) 0.001)\n    (check-within (candidate fape vq ap 4) (list ) 0.001)\n    (check-within (candidate isitbenom pmng itben 5) (list ) 0.001)\n    (check-within (candidate gw ln gw 1) (list ) 0.001)\n    (check-within (candidate jhu sio xnx 3) (list ) 0.001)\n    (check-within (candidate elcklvcvdg lck e 5) (list 1) 0.001)\n    (check-within (candidate subsu tdo su 1) (list ) 0.001)\n    (check-within (candidate jqcdc c d 2) (list 2 4) 0.001)\n    (check-within (candidate hhvc gfwo hh 4) (list ) 0.001)\n    (check-within (candidate tyoq vhjit yoq 2) (list ) 0.001)\n    (check-within (candidate rtbp migjb es 2) (list ) 0.001)\n    (check-within (candidate gkkstqvl gkkst xszl 2) (list ) 0.001)\n    (check-within (candidate bc spzk wsick 1) (list ) 0.001)\n    (check-within (candidate gyalx neet rbhl 3) (list ) 0.001)\n    (check-within (candidate qo agt xrh 2) (list ) 0.001)\n    (check-within (candidate rinzbrrr nzb r 2) (list 2) 0.001)\n    (check-within (candidate tjly j n 2) (list ) 0.001)\n    (check-within (candidate frkxslnnn rkxsl n 2) (list ) 0.001)\n    (check-within (candidate cffczbccc ff c 9) (list 1) 0.001)\n    (check-within (candidate uiddqbeoaw iddq rlr 6) (list ) 0.001)\n    (check-within (candidate fh ywab qcjyl 2) (list ) 0.001)\n    (check-within (candidate gdbm gdbm uefwm 3) (list ) 0.001)\n    (check-within (candidate bpcwswu zi pcwsw 1) (list ) 0.001)\n    (check-within (candidate dh jmcds nytk 1) (list ) 0.001)\n    (check-within (candidate qjgckhiif hiif jgc 4) (list 5) 0.001)\n    (check-within (candidate qyixufgyk y ixuf 5) (list 1 7) 0.001)\n    (check-within (candidate wiwiwinwio hm wi 8) (list ) 0.001)\n    (check-within (candidate ffnlge bjt pavkr 6) (list ) 0.001)\n    (check-within (candidate rj m umg 2) (list ) 0.001)\n    (check-within (candidate bkgqxl yufy kgq 1) (list ) 0.001)\n    (check-within (candidate hhcwp sixek cwp 4) (list ) 0.001)\n    (check-within (candidate czr cz wxxql 3) (list ) 0.001)\n    (check-within (candidate tdbnme t dbnme 4) (list 0) 0.001)\n    (check-within (candidate px acgz jaxel 2) (list ) 0.001)\n    (check-within (candidate wfa fyntx a 1) (list ) 0.001)\n    (check-within (candidate ixfkxfld ixfk urkke 6) (list ) 0.001)\n    (check-within (candidate kmjvlkjy gll vlk 6) (list ) 0.001)\n    (check-within (candidate bsbsvnmvnm vnm bs 7) (list 4 7) 0.001)\n    (check-within (candidate uzqauzqw uzq psnso 2) (list ) 0.001)\n    (check-within (candidate fsvkche yot svkc 1) (list ) 0.001)\n    (check-within (candidate cwwzmfzz fnlgc cwwzm 6) (list ) 0.001)\n    (check-within (candidate profguo o oyzje 6) (list ) 0.001)\n    (check-within (candidate ckbdnw djpc ckbdn 5) (list ) 0.001)\n    (check-within (candidate ankfahcorr r kfah 7) (list 8 9) 0.001)\n    (check-within (candidate ahjzfg hjzf zs 6) (list ) 0.001)\n    (check-within (candidate eueuau u e 3) (list 1 3 5) 0.001)\n    (check-within (candidate etuwwhwljf uwwh efcuq 3) (list ) 0.001)\n    (check-within (candidate vvjhgg g kj 1) (list ) 0.001)\n    (check-within (candidate igytmsmsgx msmsg gyt 3) (list 4) 0.001)\n    (check-within (candidate cheoeo eo y 1) (list ) 0.001)\n    (check-within (candidate gqzf cgpdn zf 1) (list ) 0.001)\n    (check-within (candidate zapqwtmx apqwt m 1) (list ) 0.001)\n    (check-within (candidate klxtee e klx 2) (list ) 0.001)\n    (check-within (candidate xa gzsj oooq 2) (list ) 0.001)\n    (check-within (candidate gxoxqgxoxq gxoxq x 2) (list 0 5) 0.001)\n    (check-within (candidate lsuo d uo 3) (list ) 0.001)\n    (check-within (candidate yhi ph yhi 3) (list ) 0.001)\n    (check-within (candidate cj j em 2) (list ) 0.001)\n    (check-within (candidate clxzclxz ge clxz 5) (list ) 0.001)\n    (check-within (candidate gjtcpyiniv cpyi hjvtq 9) (list ) 0.001)\n    (check-within (candidate kyrvedszzo rve y 3) (list 2) 0.001)\n    (check-within (candidate makolbcrme qlhpf akol 9) (list ) 0.001)\n    (check-within (candidate vgxshd vgx en 2) (list ) 0.001)\n    (check-within (candidate wfvxfzut wfv ut 6) (list 0) 0.001)\n    (check-within (candidate xxtxxuftxt tx x 2) (list 2 7) 0.001)\n    (check-within (candidate cwtybs wgfez cwty 4) (list ) 0.001)\n    (check-within (candidate opnkctux op nkctu 5) (list 0) 0.001)\n    (check-within (candidate swswmcsksw mcsk sw 4) (list 4) 0.001)\n    (check-within (candidate qqnb q q 2) (list 0 1) 0.001)\n    (check-within (candidate tt t q 1) (list ) 0.001)\n    (check-within (candidate lllclbii l i 7) (list 0 1 2 4) 0.001)\n    (check-within (candidate oanyzue yzu oan 5) (list 3) 0.001)\n    (check-within (candidate opmfgzthj opmf g 9) (list 0) 0.001)\n    (check-within (candidate uiddidde idd sal 7) (list ) 0.001)\n    (check-within (candidate gzzau za rwu 2) (list ) 0.001)\n    (check-within (candidate srpxqurxx nsr x 3) (list ) 0.001)\n    (check-within (candidate sxaono jy xaon 6) (list ) 0.001)\n    (check-within (candidate acxtjiova acx tjiov 3) (list 0) 0.001)\n    (check-within (candidate iltazkww k z 6) (list 5) 0.001)\n    (check-within (candidate ltxbhpi cjfbb ltxb 5) (list ) 0.001)\n    (check-within (candidate gysgysh gys qzvae 5) (list ) 0.001)\n    (check-within (candidate zypvgt zypv ljxni 4) (list ) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3246_hasTrailingZeros", "language": "rkt", "prompt": "#lang racket\n;; You are given an array of positive integers nums.\n;; You have to check if it is possible to select two or more elements in the array such that the bitwise OR of the selected elements has at least one trailing zero in its binary representation.\n;; For example, the binary representation of 5, which is \"101\", does not have any trailing zeros, whereas the binary representation of 4, which is \"100\", has two trailing zeros.\n;; Return true if it is possible to select two or more elements whose bitwise OR has trailing zeros, return false otherwise.\n;; Example 1:\n;; Input: nums = [1,2,3,4,5]\n;; Output: true\n;; Explanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\n;; Example 2:\n;; Input: nums = [2,4,8,16]\n;; Output: true\n;; Explanation: If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\n;; Other possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16).\n;; Example 3:\n;; Input: nums = [1,3,5,7,9]\n;; Output: false\n;; Explanation: There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR.\n;; Constraints:\n;; 2 <= nums.length <= 100\n;; 1 <= nums[i] <= 100\n(define (hasTrailingZeros nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3246_hasTrailingZeros.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hasTrailingZeros))\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 3 5 7 9)) #f 0.001)\n    (check-within (candidate (list 1 2)) #f 0.001)\n    (check-within (candidate (list 2 4 8 16)) #t 0.001)\n    (check-within (candidate (list 1 3)) #f 0.001)\n    (check-within (candidate (list 1 7)) #f 0.001)\n    (check-within (candidate (list 3 3)) #f 0.001)\n    (check-within (candidate (list 3 4)) #f 0.001)\n    (check-within (candidate (list 2 2)) #t 0.001)\n    (check-within (candidate (list 4 8)) #t 0.001)\n    (check-within (candidate (list 4 32)) #t 0.001)\n    (check-within (candidate (list 6 2)) #t 0.001)\n    (check-within (candidate (list 6 8)) #t 0.001)\n    (check-within (candidate (list 3 9)) #f 0.001)\n    (check-within (candidate (list 4 3)) #f 0.001)\n    (check-within (candidate (list 5 6)) #f 0.001)\n    (check-within (candidate (list 7 9)) #f 0.001)\n    (check-within (candidate (list 8 2)) #t 0.001)\n    (check-within (candidate (list 8 4)) #t 0.001)\n    (check-within (candidate (list 7 10)) #f 0.001)\n    (check-within (candidate (list 9 73)) #f 0.001)\n    (check-within (candidate (list 8 8)) #t 0.001)\n    (check-within (candidate (list 10 5)) #f 0.001)\n    (check-within (candidate (list 11 17)) #f 0.001)\n    (check-within (candidate (list 19 11)) #f 0.001)\n    (check-within (candidate (list 19 35)) #f 0.001)\n    (check-within (candidate (list 19 51)) #f 0.001)\n    (check-within (candidate (list 21 61)) #f 0.001)\n    (check-within (candidate (list 23 21)) #f 0.001)\n    (check-within (candidate (list 25 25)) #f 0.001)\n    (check-within (candidate (list 10 2)) #t 0.001)\n    (check-within (candidate (list 12 8)) #t 0.001)\n    (check-within (candidate (list 27 77)) #f 0.001)\n    (check-within (candidate (list 16 4)) #t 0.001)\n    (check-within (candidate (list 16 8)) #t 0.001)\n    (check-within (candidate (list 16 16)) #t 0.001)\n    (check-within (candidate (list 16 32)) #t 0.001)\n    (check-within (candidate (list 29 13)) #f 0.001)\n    (check-within (candidate (list 37 69)) #f 0.001)\n    (check-within (candidate (list 39 53)) #f 0.001)\n    (check-within (candidate (list 24 32)) #t 0.001)\n    (check-within (candidate (list 32 32)) #t 0.001)\n    (check-within (candidate (list 42 9)) #f 0.001)\n    (check-within (candidate (list 45 24)) #f 0.001)\n    (check-within (candidate (list 64 16)) #t 0.001)\n    (check-within (candidate (list 49 23)) #f 0.001)\n    (check-within (candidate (list 4 6 4)) #t 0.001)\n    (check-within (candidate (list 8 16 4)) #t 0.001)\n    (check-within (candidate (list 57 27)) #f 0.001)\n    (check-within (candidate (list 8 16 16)) #t 0.001)\n    (check-within (candidate (list 10 4 6)) #t 0.001)\n    (check-within (candidate (list 12 8 8)) #t 0.001)\n    (check-within (candidate (list 63 47)) #f 0.001)\n    (check-within (candidate (list 67 69)) #f 0.001)\n    (check-within (candidate (list 69 87)) #f 0.001)\n    (check-within (candidate (list 16 8 4)) #t 0.001)\n    (check-within (candidate (list 77 49)) #f 0.001)\n    (check-within (candidate (list 89 31)) #f 0.001)\n    (check-within (candidate (list 1 3 4)) #f 0.001)\n    (check-within (candidate (list 1 5 3)) #f 0.001)\n    (check-within (candidate (list 1 7 9)) #f 0.001)\n    (check-within (candidate (list 3 69 59)) #f 0.001)\n    (check-within (candidate (list 16 16 16)) #t 0.001)\n    (check-within (candidate (list 6 5 5)) #f 0.001)\n    (check-within (candidate (list 7 77 9)) #f 0.001)\n    (check-within (candidate (list 9 77 51)) #f 0.001)\n    (check-within (candidate (list 16 32 8)) #t 0.001)\n    (check-within (candidate (list 16 32 16)) #t 0.001)\n    (check-within (candidate (list 10 1 9)) #f 0.001)\n    (check-within (candidate (list 10 7 5)) #f 0.001)\n    (check-within (candidate (list 11 23 27)) #f 0.001)\n    (check-within (candidate (list 15 13 63)) #f 0.001)\n    (check-within (candidate (list 21 27 79)) #f 0.001)\n    (check-within (candidate (list 23 23 47)) #f 0.001)\n    (check-within (candidate (list 35 91 15)) #f 0.001)\n    (check-within (candidate (list 32 4 16)) #t 0.001)\n    (check-within (candidate (list 32 8 48)) #t 0.001)\n    (check-within (candidate (list 33 40 84)) #t 0.001)\n    (check-within (candidate (list 41 83 53)) #f 0.001)\n    (check-within (candidate (list 64 48 6)) #t 0.001)\n    (check-within (candidate (list 75 34 58)) #t 0.001)\n    (check-within (candidate (list 3 8 2 3)) #t 0.001)\n    (check-within (candidate (list 43 15 41)) #f 0.001)\n    (check-within (candidate (list 43 65 79)) #f 0.001)\n    (check-within (candidate (list 47 7 19)) #f 0.001)\n    (check-within (candidate (list 4 6 1 1)) #t 0.001)\n    (check-within (candidate (list 4 10 1 7)) #t 0.001)\n    (check-within (candidate (list 49 73 81)) #f 0.001)\n    (check-within (candidate (list 6 3 10 6)) #t 0.001)\n    (check-within (candidate (list 6 4 2 8)) #t 0.001)\n    (check-within (candidate (list 6 12 12 24)) #t 0.001)\n    (check-within (candidate (list 7 2 4 4)) #t 0.001)\n    (check-within (candidate (list 8 6 4 32)) #t 0.001)\n    (check-within (candidate (list 8 12 16 2)) #t 0.001)\n    (check-within (candidate (list 12 64 16 8)) #t 0.001)\n    (check-within (candidate (list 16 4 8 16)) #t 0.001)\n    (check-within (candidate (list 51 33 25)) #f 0.001)\n    (check-within (candidate (list 16 8 64 4)) #t 0.001)\n    (check-within (candidate (list 16 16 12 8)) #t 0.001)\n    (check-within (candidate (list 51 43 9)) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3249_minOperations", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed integer array nums and a positive integer k.\n;; You can apply the following operation on the array any number of times:\n;; Choose any element of the array and flip a bit in its binary representation. Flipping a bit means changing a 0 to 1 or vice versa.\n;; Return the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k.\n;; Note that you can flip leading zero bits in the binary representation of elements. For example, for the number (101)2 you can flip the fourth bit and obtain (1101)2.\n;; Example 1:\n;; Input: nums = [2,1,3,4], k = 1\n;; Output: 2\n;; Explanation: We can do the following operations:\n;; - Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n;; - Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\n;; The XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\n;; It can be shown that we cannot make the XOR equal to k in less than 2 operations.\n;; Example 2:\n;; Input: nums = [2,0,2,0], k = 0\n;; Output: 0\n;; Explanation: The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed.\n;; Constraints:\n;; 1 <= nums.length <= 105\n;; 0 <= nums[i] <= 106\n;; 0 <= k <= 106\n(define (minOperations nums k)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3249_minOperations.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minOperations))\n    (check-within (candidate (list 2 1 3 4) 1) 2 0.001)\n    (check-within (candidate (list 2 0 2 0) 0) 0 0.001)\n    (check-within (candidate (list 4) 7) 2 0.001)\n    (check-within (candidate (list 3 13 9 8 5 18 11 10) 13) 2 0.001)\n    (check-within (candidate (list 9 7 9 14 8 6) 12) 3 0.001)\n    (check-within (candidate (list 13 9 10 16 11 8 1) 17) 3 0.001)\n    (check-within (candidate (list 12 14) 1) 2 0.001)\n    (check-within (candidate (list 18 18) 20) 2 0.001)\n    (check-within (candidate (list 3 5 1 1) 19) 3 0.001)\n    (check-within (candidate (list 7 0 0 0) 8) 4 0.001)\n    (check-within (candidate (list 13 15 19 18 2 9 18 11 0 7) 6) 1 0.001)\n    (check-within (candidate (list 9 15 19 15 10 15 14 0 2 5) 20) 1 0.001)\n    (check-within (candidate (list 19 4 19 6 3 19 14 4 16 12) 4) 0 0.001)\n    (check-within (candidate (list 2 10 5 5 12 3 14 6 11 14) 3) 2 0.001)\n    (check-within (candidate (list 11 20) 10) 3 0.001)\n    (check-within (candidate (list 10 12 5 3 16 0) 1) 2 0.001)\n    (check-within (candidate (list 0 4 4 7 14 13) 1) 2 0.001)\n    (check-within (candidate (list 16 2 20 13 15 20 13) 16) 3 0.001)\n    (check-within (candidate (list 19 11 11 0 16 2 2 0 9) 4) 3 0.001)\n    (check-within (candidate (list 10 17 19 8 15) 19) 3 0.001)\n    (check-within (candidate (list 8 17 7 18) 6) 2 0.001)\n    (check-within (candidate (list 10 20) 7) 3 0.001)\n    (check-within (candidate (list 11 14 5 9 19 3 1) 10) 2 0.001)\n    (check-within (candidate (list 19 13 16) 4) 2 0.001)\n    (check-within (candidate (list 12 18 13 2 1 5 8 5 8 6) 7) 2 0.001)\n    (check-within (candidate (list 15) 9) 2 0.001)\n    (check-within (candidate (list 8 5 4 5 13 18) 0) 3 0.001)\n    (check-within (candidate (list 9 18) 3) 2 0.001)\n    (check-within (candidate (list 6 9 15 17 16) 19) 2 0.001)\n    (check-within (candidate (list 14 0 17) 2) 4 0.001)\n    (check-within (candidate (list 12 1 14 13) 4) 2 0.001)\n    (check-within (candidate (list 4 10 6 10 10 16) 18) 2 0.001)\n    (check-within (candidate (list 2 11 6 12 2 15 4 8 11) 3) 2 0.001)\n    (check-within (candidate (list 7 3 12 5 1 12 8) 11) 2 0.001)\n    (check-within (candidate (list 11 14 18 14 6 18 4 16 20 5) 16) 2 0.001)\n    (check-within (candidate (list 20 2 6 0 7) 20) 2 0.001)\n    (check-within (candidate (list 9 18 19 16 8 11 15) 14) 3 0.001)\n    (check-within (candidate (list 0 3 20 0 15 7 17 4) 3) 2 0.001)\n    (check-within (candidate (list 15 6) 8) 1 0.001)\n    (check-within (candidate (list 2 7 13 16 2 2) 15) 4 0.001)\n    (check-within (candidate (list 2 12 11 11 2 12) 17) 2 0.001)\n    (check-within (candidate (list 10 8 10) 11) 2 0.001)\n    (check-within (candidate (list 1 10 2 13) 0) 1 0.001)\n    (check-within (candidate (list 1 20 4 19 12 18 5 3 11 8) 14) 4 0.001)\n    (check-within (candidate (list 16 12 12) 20) 1 0.001)\n    (check-within (candidate (list 2 1 7 3 4 9) 6) 2 0.001)\n    (check-within (candidate (list 20 0 19 14 7 0) 18) 3 0.001)\n    (check-within (candidate (list 0 15 9 1 15) 11) 2 0.001)\n    (check-within (candidate (list 9 11 8 20 10) 0) 2 0.001)\n    (check-within (candidate (list 2 10 2 14 7 13 4 9 2) 20) 3 0.001)\n    (check-within (candidate (list 7 12 8) 14) 3 0.001)\n    (check-within (candidate (list 20 11 5 8 1 8 4 16) 7) 1 0.001)\n    (check-within (candidate (list 8 2 19 9 8) 9) 2 0.001)\n    (check-within (candidate (list 17) 8) 3 0.001)\n    (check-within (candidate (list 19 6) 13) 2 0.001)\n    (check-within (candidate (list 12 3 20 19) 4) 2 0.001)\n    (check-within (candidate (list 4 10 18 17 20 6 4) 10) 2 0.001)\n    (check-within (candidate (list 8 6 12 6 6) 4) 2 0.001)\n    (check-within (candidate (list 18 12 9 18 12 12 1) 12) 1 0.001)\n    (check-within (candidate (list 14 4 0 18 18 8 4 9) 17) 4 0.001)\n    (check-within (candidate (list 7 16 16 6) 19) 2 0.001)\n    (check-within (candidate (list 7 16 2 13 0 17 16) 18) 3 0.001)\n    (check-within (candidate (list 3 17 4 2 3 9) 12) 2 0.001)\n    (check-within (candidate (list 13 14 9 19 5 13) 8) 3 0.001)\n    (check-within (candidate (list 4 15 10 15 11 1 3 5 18 13) 16) 3 0.001)\n    (check-within (candidate (list 9 7 8) 11) 3 0.001)\n    (check-within (candidate (list 7 4 6 20 9 9 6 6) 10) 4 0.001)\n    (check-within (candidate (list 1 9 13 19 19 0 16 20 4) 2) 3 0.001)\n    (check-within (candidate (list 20 3 9 6 5 8) 20) 1 0.001)\n    (check-within (candidate (list 11 20 5 16 15 11 8) 11) 3 0.001)\n    (check-within (candidate (list 12 10 16 18 17 4 2 19 17 2) 19) 0 0.001)\n    (check-within (candidate (list 15 2) 10) 3 0.001)\n    (check-within (candidate (list 13 3 10 2 9 13 5 11 5) 20) 4 0.001)\n    (check-within (candidate (list 20 12 9 3 2 11) 13) 3 0.001)\n    (check-within (candidate (list 3 19 0 18 6) 15) 3 0.001)\n    (check-within (candidate (list 12 6) 18) 2 0.001)\n    (check-within (candidate (list 10 11 12 6 10 1 15) 8) 3 0.001)\n    (check-within (candidate (list 12 8 1 16 6 12) 2) 4 0.001)\n    (check-within (candidate (list 11 5 9) 2) 2 0.001)\n    (check-within (candidate (list 2 7) 6) 2 0.001)\n    (check-within (candidate (list 20 1) 8) 4 0.001)\n    (check-within (candidate (list 9) 16) 3 0.001)\n    (check-within (candidate (list 9 5 7 11 8 18 5 1 4) 8) 2 0.001)\n    (check-within (candidate (list 1 8 7 19 3 20 13 9 10) 1) 2 0.001)\n    (check-within (candidate (list 19 18 6) 8) 4 0.001)\n    (check-within (candidate (list 19 12 3 18 12 19 5 20) 0) 0 0.001)\n    (check-within (candidate (list 6 18 12 9 20) 13) 1 0.001)\n    (check-within (candidate (list 19 5 5 7 4 7 15) 7) 5 0.001)\n    (check-within (candidate (list 17 7 19) 18) 4 0.001)\n    (check-within (candidate (list 14 13 3 15 18 20 2 9 3) 14) 4 0.001)\n    (check-within (candidate (list 16 10 3 2 3 19) 4) 4 0.001)\n    (check-within (candidate (list 2 0 8) 18) 2 0.001)\n    (check-within (candidate (list 19 5 5 12 20 2 10 17) 12) 4 0.001)\n    (check-within (candidate (list 6 0 0 1 15 9 19 12) 6) 2 0.001)\n    (check-within (candidate (list 8 16 13 8 18 9 16 16 19 11) 12) 2 0.001)\n    (check-within (candidate (list 3 7 6 7 4 3 2) 2) 1 0.001)\n    (check-within (candidate (list 0 2 9) 10) 1 0.001)\n    (check-within (candidate (list 14 10 16 9 6 13 11 13 11 16) 20) 5 0.001)\n    (check-within (candidate (list 13 19 0 12 11 10 11 2 6) 7) 4 0.001)\n    (check-within (candidate (list 6 1 4 9 1 7 11 15 15 0) 8) 4 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3250_maximizeSquareArea", "language": "rkt", "prompt": "#lang racket\n;; There is a large (m - 1) x (n - 1) rectangular field with corners at (1, 1) and (m, n) containing some horizontal and vertical fences given in arrays hFences and vFences respectively.\n;; Horizontal fences are from the coordinates (hFences[i], 1) to (hFences[i], n) and vertical fences are from the coordinates (1, vFences[i]) to (m, vFences[i]).\n;; Return the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field.\n;; Since the answer may be large, return it modulo 109 + 7.\n;; Note: The field is surrounded by two horizontal fences from the coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n). These fences cannot be removed.\n;; Example 1:\n;; Input: m = 4, n = 3, hFences = [2,3], vFences = [2]\n;; Output: 4\n;; Explanation: Removing the horizontal fence at 2 and the vertical fence at 2 will give a square field of area 4.\n;; Example 2:\n;; Input: m = 6, n = 7, hFences = [2], vFences = [4]\n;; Output: -1\n;; Explanation: It can be proved that there is no way to create a square field by removing fences.\n;; Constraints:\n;; 3 <= m, n <= 109\n;; 1 <= hFences.length, vFences.length <= 600\n;; 1 < hFences[i] < m\n;; 1 < vFences[i] < n\n;; hFences and vFences are unique.\n(define (maximizeSquareArea m n hFences vFences)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3250_maximizeSquareArea.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximizeSquareArea))\n    (check-within (candidate 4 3 (list 2 3) (list 2)) 4 0.001)\n    (check-within (candidate 6 7 (list 2) (list 4)) -1 0.001)\n    (check-within (candidate 4 4 (list 2) (list 2 3)) 9 0.001)\n    (check-within (candidate 8 5 (list 5 4) (list 4)) 16 0.001)\n    (check-within (candidate 4 5 (list 2) (list 4)) 9 0.001)\n    (check-within (candidate 5 6 (list 4 2 3) (list 4 5)) 16 0.001)\n    (check-within (candidate 3 9 (list 2) (list 8 6 5 4)) 4 0.001)\n    (check-within (candidate 6 4 (list 3) (list 3 2)) 9 0.001)\n    (check-within (candidate 7 4 (list 2 3 6 5) (list 3 2)) 9 0.001)\n    (check-within (candidate 8 8 (list 2 3 6 7) (list 6 5 7 4 2 3)) 49 0.001)\n    (check-within (candidate 9 9 (list 2 4) (list 6 4 2)) 64 0.001)\n    (check-within (candidate 7 7 (list 4 3) (list 2 6)) 36 0.001)\n    (check-within (candidate 4 6 (list 2) (list 3 4 2)) 9 0.001)\n    (check-within (candidate 8 6 (list 7 5 2 4 3) (list 5 3)) 25 0.001)\n    (check-within (candidate 9 3 (list 7 4 5) (list 2)) 4 0.001)\n    (check-within (candidate 4 3 (list 3) (list 2)) 4 0.001)\n    (check-within (candidate 4 3 (list 3 2) (list 2)) 4 0.001)\n    (check-within (candidate 8 6 (list 6 4 3 7 2 5) (list 5 3 4 2)) 25 0.001)\n    (check-within (candidate 8 8 (list 6 3 7 5) (list 6 2 7)) 49 0.001)\n    (check-within (candidate 5 5 (list 4 3) (list 4)) 16 0.001)\n    (check-within (candidate 5 3 (list 4) (list 2)) 1 0.001)\n    (check-within (candidate 7 9 (list 5) (list 2 7 6 8 3)) 36 0.001)\n    (check-within (candidate 8 6 (list 5 4 6 7 3) (list 5 3)) 25 0.001)\n    (check-within (candidate 9 7 (list 6 4 7 5 8) (list 6 4 2 3)) 36 0.001)\n    (check-within (candidate 6 7 (list 5) (list 5 3 6)) 25 0.001)\n    (check-within (candidate 3 3 (list 2) (list 2)) 4 0.001)\n    (check-within (candidate 7 8 (list 4 6 2 5 3) (list 3 5 2 4 7)) 36 0.001)\n    (check-within (candidate 3 5 (list 2) (list 4 2)) 4 0.001)\n    (check-within (candidate 4 3 (list 2) (list 2)) 4 0.001)\n    (check-within (candidate 9 3 (list 3) (list 2)) 4 0.001)\n    (check-within (candidate 6 7 (list 4 2 3 5) (list 3 5 6)) 25 0.001)\n    (check-within (candidate 8 4 (list 6 3 2 4 7 5) (list 2 3)) 9 0.001)\n    (check-within (candidate 4 4 (list 2) (list 2)) 9 0.001)\n    (check-within (candidate 3 6 (list 2) (list 4 3 5)) 4 0.001)\n    (check-within (candidate 8 6 (list 5) (list 4 2 5)) 16 0.001)\n    (check-within (candidate 9 9 (list 5 4 2) (list 8 4 3 5 6)) 64 0.001)\n    (check-within (candidate 5 9 (list 3 2 4) (list 7 6 5)) 16 0.001)\n    (check-within (candidate 5 5 (list 4 3 2) (list 3 4 2)) 16 0.001)\n    (check-within (candidate 7 4 (list 5 2 4) (list 3)) 9 0.001)\n    (check-within (candidate 8 5 (list 4 6 2 3) (list 4)) 16 0.001)\n    (check-within (candidate 9 5 (list 6) (list 3)) -1 0.001)\n    (check-within (candidate 9 4 (list 2 8 3 7 4 6 5) (list 2 3)) 9 0.001)\n    (check-within (candidate 5 8 (list 2 3 4) (list 3 5 6 4)) 16 0.001)\n    (check-within (candidate 9 6 (list 7 3 4 5 8 2) (list 5 3 2 4)) 25 0.001)\n    (check-within (candidate 5 4 (list 4) (list 2)) 9 0.001)\n    (check-within (candidate 9 6 (list 2 5) (list 5 2)) 16 0.001)\n    (check-within (candidate 6 9 (list 4 5 2) (list 5 7 8 2 3 6)) 25 0.001)\n    (check-within (candidate 4 5 (list 2) (list 2)) 9 0.001)\n    (check-within (candidate 9 6 (list 2 4) (list 5 3)) 25 0.001)\n    (check-within (candidate 4 7 (list 2) (list 4 3 6 2 5)) 9 0.001)\n    (check-within (candidate 8 3 (list 3 2 5) (list 2)) 4 0.001)\n    (check-within (candidate 6 8 (list 4 2 3 5) (list 7 4 5 6)) 25 0.001)\n    (check-within (candidate 3 5 (list 2) (list 3)) 4 0.001)\n    (check-within (candidate 8 8 (list 2 5 6) (list 3 7 4 2 5)) 49 0.001)\n    (check-within (candidate 8 7 (list 3 4 7) (list 2 6 3 4)) 36 0.001)\n    (check-within (candidate 7 4 (list 3 6 5) (list 2)) 9 0.001)\n    (check-within (candidate 5 6 (list 2 3) (list 3 2 5)) 16 0.001)\n    (check-within (candidate 6 7 (list 5) (list 4 2 5 6)) 25 0.001)\n    (check-within (candidate 8 8 (list 4 5 2 7) (list 5 3 4 2 7 6)) 49 0.001)\n    (check-within (candidate 7 9 (list 6 3 4) (list 8 6 2)) 36 0.001)\n    (check-within (candidate 7 4 (list 3 4 6) (list 3 2)) 9 0.001)\n    (check-within (candidate 6 8 (list 5 4 3) (list 5 7 3 2 6 4)) 25 0.001)\n    (check-within (candidate 8 9 (list 2 3 4 7 6 5) (list 3 7 8)) 49 0.001)\n    (check-within (candidate 3 4 (list 2) (list 2 3)) 4 0.001)\n    (check-within (candidate 9 9 (list 8 5 6 2 7) (list 8 6 4 2)) 64 0.001)\n    (check-within (candidate 7 6 (list 4 5) (list 5 3)) 16 0.001)\n    (check-within (candidate 5 4 (list 2) (list 3)) 9 0.001)\n    (check-within (candidate 5 5 (list 3) (list 3 4 2)) 16 0.001)\n    (check-within (candidate 9 7 (list 3) (list 3 2 5 4)) 36 0.001)\n    (check-within (candidate 8 6 (list 4) (list 5 2 3)) 16 0.001)\n    (check-within (candidate 6 9 (list 3 4 2) (list 3 2 8)) 25 0.001)\n    (check-within (candidate 7 6 (list 3 6 5 2 4) (list 2 3 5 4)) 25 0.001)\n    (check-within (candidate 7 3 (list 5 3 6 4) (list 2)) 4 0.001)\n    (check-within (candidate 4 7 (list 3) (list 2)) 1 0.001)\n    (check-within (candidate 3 7 (list 2) (list 4 3 2 6 5)) 4 0.001)\n    (check-within (candidate 5 9 (list 2 4) (list 4 7)) 9 0.001)\n    (check-within (candidate 5 9 (list 4 2) (list 8 7 3 2 6 4)) 16 0.001)\n    (check-within (candidate 3 8 (list 2) (list 3 7 2 5 4)) 4 0.001)\n    (check-within (candidate 4 7 (list 2 3) (list 4 2)) 9 0.001)\n    (check-within (candidate 8 9 (list 7 6 3 2 5 4) (list 3 2 6)) 49 0.001)\n    (check-within (candidate 7 8 (list 6) (list 5)) -1 0.001)\n    (check-within (candidate 9 7 (list 2 7 8 5) (list 6 3)) 36 0.001)\n    (check-within (candidate 9 9 (list 4 7 2 5 8 6) (list 7 6 4 5 8 2 3)) 64 0.001)\n    (check-within (candidate 7 7 (list 6 3 2 5) (list 6 3)) 36 0.001)\n    (check-within (candidate 7 7 (list 5) (list 2 3 6)) 36 0.001)\n    (check-within (candidate 4 9 (list 3) (list 4 3 7 6 8 5 2)) 9 0.001)\n    (check-within (candidate 4 5 (list 2 3) (list 3 4)) 9 0.001)\n    (check-within (candidate 3 7 (list 2) (list 3 6)) 4 0.001)\n    (check-within (candidate 4 9 (list 3 2) (list 4 6)) 9 0.001)\n    (check-within (candidate 9 9 (list 5) (list 6 5 2 7 3 8)) 64 0.001)\n    (check-within (candidate 5 6 (list 3 4 2) (list 5 3 2)) 16 0.001)\n    (check-within (candidate 5 6 (list 3 2) (list 5)) 16 0.001)\n    (check-within (candidate 5 5 (list 3 4) (list 3 2 4)) 16 0.001)\n    (check-within (candidate 9 5 (list 7 5 8) (list 4 2 3)) 16 0.001)\n    (check-within (candidate 3 6 (list 2) (list 2 5 4)) 4 0.001)\n    (check-within (candidate 5 9 (list 4 2 3) (list 8 3 5 6 4 2)) 16 0.001)\n    (check-within (candidate 4 7 (list 3 2) (list 5)) 4 0.001)\n    (check-within (candidate 6 9 (list 4 2) (list 3 4 7 2)) 25 0.001)\n    (check-within (candidate 6 5 (list 4) (list 3 2)) 9 0.001)\n    (check-within (candidate 8 5 (list 6 7 4 5 2) (list 4)) 16 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3251_areaOfMaxDiagonal", "language": "rkt", "prompt": "#lang racket\n;; You are given a 2D 0-indexed integer array dimensions.\n;; For all indices i, 0 <= i < dimensions.length, dimensions[i][0] represents the length and dimensions[i][1] represents the width of the rectangle i.\n;; Return the area of the rectangle having the longest diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the maximum area.\n;; Example 1:\n;; Input: dimensions = [[9,3],[8,6]]\n;; Output: 48\n;; Explanation: \n;; For index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) \u2248 9.487.\n;; For index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\n;; So, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n;; Example 2:\n;; Input: dimensions = [[3,4],[4,3]]\n;; Output: 12\n;; Explanation: Length of diagonal is the same for both which is 5, so maximum area = 12.\n;; Constraints:\n;; 1 <= dimensions.length <= 100\n;; dimensions[i].length == 2\n;; 1 <= dimensions[i][0], dimensions[i][1] <= 100\n(define (areaOfMaxDiagonal dimensions)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3251_areaOfMaxDiagonal.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate areaOfMaxDiagonal))\n    (check-within (candidate (list (list 9 3) (list 8 6))) 48 0.001)\n    (check-within (candidate (list (list 3 4) (list 4 3))) 12 0.001)\n    (check-within (candidate (list (list 4 10) (list 4 9) (list 9 3) (list 10 8))) 80 0.001)\n    (check-within (candidate (list (list 2 6) (list 5 1) (list 3 10) (list 8 4))) 30 0.001)\n    (check-within (candidate (list (list 3 7) (list 2 10) (list 3 4) (list 9 9) (list 5 10))) 81 0.001)\n    (check-within (candidate (list (list 10 4))) 40 0.001)\n    (check-within (candidate (list (list 9 9) (list 1 8) (list 10 5) (list 2 8) (list 6 3) (list 7 1))) 81 0.001)\n    (check-within (candidate (list (list 10 3) (list 5 9) (list 8 3))) 30 0.001)\n    (check-within (candidate (list (list 2 7) (list 3 2) (list 3 3) (list 10 4) (list 5 3) (list 8 10) (list 8 8) (list 4 7))) 80 0.001)\n    (check-within (candidate (list (list 1 10) (list 3 10) (list 4 4) (list 2 6) (list 6 3) (list 6 4) (list 9 1) (list 6 1) (list 2 3))) 30 0.001)\n    (check-within (candidate (list (list 4 7) (list 10 10) (list 3 7) (list 9 1) (list 5 7) (list 3 9) (list 10 4) (list 4 8))) 100 0.001)\n    (check-within (candidate (list (list 1 1) (list 6 8) (list 6 9) (list 7 2) (list 6 8) (list 1 3) (list 3 1) (list 1 9))) 54 0.001)\n    (check-within (candidate (list (list 6 6) (list 1 3) (list 8 10) (list 10 1) (list 3 10) (list 7 7) (list 10 8))) 80 0.001)\n    (check-within (candidate (list (list 6 5) (list 8 6) (list 2 10) (list 8 1) (list 9 2) (list 3 5) (list 3 5))) 20 0.001)\n    (check-within (candidate (list (list 5 1) (list 4 9) (list 9 1) (list 5 8) (list 2 9) (list 3 2) (list 10 10) (list 5 2))) 100 0.001)\n    (check-within (candidate (list (list 8 3) (list 9 10) (list 7 7) (list 6 5) (list 6 9) (list 9 10) (list 5 10))) 90 0.001)\n    (check-within (candidate (list (list 6 10) (list 8 6) (list 10 1) (list 7 10) (list 10 10) (list 9 5))) 100 0.001)\n    (check-within (candidate (list (list 9 5) (list 9 2) (list 2 2) (list 8 9) (list 5 7) (list 8 10) (list 3 5))) 80 0.001)\n    (check-within (candidate (list (list 3 9) (list 9 5))) 45 0.001)\n    (check-within (candidate (list (list 10 10) (list 5 5) (list 3 2) (list 2 6) (list 3 1) (list 10 7) (list 4 8) (list 7 9) (list 9 9) (list 1 2))) 100 0.001)\n    (check-within (candidate (list (list 2 3) (list 3 5) (list 2 1))) 15 0.001)\n    (check-within (candidate (list (list 4 4) (list 7 7))) 49 0.001)\n    (check-within (candidate (list (list 7 5) (list 9 6) (list 9 4) (list 5 7) (list 2 6) (list 10 3) (list 9 9) (list 9 4) (list 8 2))) 81 0.001)\n    (check-within (candidate (list (list 5 1) (list 9 1) (list 7 1) (list 7 1) (list 3 1) (list 10 7) (list 9 1) (list 7 2) (list 4 6) (list 3 6))) 70 0.001)\n    (check-within (candidate (list (list 8 4) (list 7 4) (list 1 5) (list 7 8) (list 5 6) (list 5 2))) 56 0.001)\n    (check-within (candidate (list (list 5 10) (list 3 7) (list 8 6) (list 8 6) (list 5 9) (list 10 5) (list 7 8) (list 1 9) (list 2 5) (list 6 6))) 50 0.001)\n    (check-within (candidate (list (list 9 4))) 36 0.001)\n    (check-within (candidate (list (list 7 6) (list 2 8) (list 9 6) (list 1 10) (list 5 1))) 54 0.001)\n    (check-within (candidate (list (list 4 2) (list 1 6) (list 2 1) (list 4 10) (list 10 1) (list 7 5) (list 8 3))) 40 0.001)\n    (check-within (candidate (list (list 1 4))) 4 0.001)\n    (check-within (candidate (list (list 9 4) (list 6 7))) 36 0.001)\n    (check-within (candidate (list (list 7 5))) 35 0.001)\n    (check-within (candidate (list (list 1 9) (list 9 7) (list 8 4) (list 6 6) (list 7 8) (list 4 6) (list 7 4) (list 9 9) (list 9 8) (list 8 8))) 81 0.001)\n    (check-within (candidate (list (list 3 8) (list 6 3) (list 5 2) (list 3 7) (list 1 3) (list 9 8) (list 4 2) (list 3 8))) 72 0.001)\n    (check-within (candidate (list (list 5 4) (list 2 4) (list 8 5) (list 8 4) (list 1 2) (list 6 4))) 40 0.001)\n    (check-within (candidate (list (list 7 2) (list 4 6))) 14 0.001)\n    (check-within (candidate (list (list 8 10) (list 5 2) (list 4 9))) 80 0.001)\n    (check-within (candidate (list (list 9 2) (list 5 6) (list 4 2))) 18 0.001)\n    (check-within (candidate (list (list 3 8) (list 2 9) (list 7 7) (list 1 5) (list 1 1))) 49 0.001)\n    (check-within (candidate (list (list 6 2) (list 8 2) (list 6 8) (list 7 6) (list 1 2) (list 6 8) (list 10 9) (list 2 8))) 90 0.001)\n    (check-within (candidate (list (list 3 8) (list 4 1) (list 5 2) (list 2 6) (list 4 9) (list 10 6) (list 6 10) (list 3 4) (list 6 6) (list 4 3))) 60 0.001)\n    (check-within (candidate (list (list 5 5) (list 3 8) (list 2 8))) 24 0.001)\n    (check-within (candidate (list (list 8 1) (list 5 8) (list 3 8))) 40 0.001)\n    (check-within (candidate (list (list 2 8) (list 8 1) (list 7 10) (list 5 7) (list 2 4) (list 3 10) (list 2 10) (list 7 10) (list 5 6))) 70 0.001)\n    (check-within (candidate (list (list 3 10) (list 1 3) (list 10 5) (list 5 9))) 50 0.001)\n    (check-within (candidate (list (list 10 6) (list 4 3))) 60 0.001)\n    (check-within (candidate (list (list 7 8) (list 8 6) (list 10 10) (list 6 7) (list 7 10))) 100 0.001)\n    (check-within (candidate (list (list 7 2) (list 7 3) (list 4 6) (list 4 4) (list 7 8) (list 2 4))) 56 0.001)\n    (check-within (candidate (list (list 4 7) (list 3 1) (list 1 10) (list 4 2) (list 4 10) (list 8 8))) 64 0.001)\n    (check-within (candidate (list (list 1 8) (list 4 3) (list 7 7) (list 10 6) (list 5 5) (list 1 3) (list 9 1) (list 8 3) (list 3 2) (list 5 8))) 60 0.001)\n    (check-within (candidate (list (list 6 7) (list 1 7) (list 5 10) (list 10 1) (list 8 3))) 50 0.001)\n    (check-within (candidate (list (list 3 5) (list 2 7) (list 4 4) (list 4 9) (list 7 6) (list 2 4) (list 5 2))) 36 0.001)\n    (check-within (candidate (list (list 8 8) (list 6 10) (list 6 6))) 60 0.001)\n    (check-within (candidate (list (list 10 2) (list 3 3) (list 5 9) (list 3 7))) 45 0.001)\n    (check-within (candidate (list (list 4 3) (list 4 1) (list 8 9) (list 10 1) (list 2 7) (list 7 7) (list 9 3) (list 8 6) (list 1 5) (list 8 3))) 72 0.001)\n    (check-within (candidate (list (list 6 8) (list 2 3) (list 4 9) (list 1 1))) 48 0.001)\n    (check-within (candidate (list (list 1 6) (list 2 10) (list 1 5) (list 9 3) (list 9 1) (list 2 2))) 20 0.001)\n    (check-within (candidate (list (list 6 5) (list 7 10) (list 1 2) (list 10 3) (list 4 2) (list 4 8) (list 5 10) (list 5 9))) 70 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 2) (list 2 4) (list 9 9) (list 3 8) (list 3 9) (list 2 3))) 81 0.001)\n    (check-within (candidate (list (list 4 4) (list 6 1) (list 1 10) (list 10 7) (list 10 5))) 70 0.001)\n    (check-within (candidate (list (list 3 2) (list 2 8) (list 10 9) (list 9 8) (list 2 2) (list 9 1))) 90 0.001)\n    (check-within (candidate (list (list 4 10) (list 9 6) (list 4 10) (list 6 7) (list 2 3) (list 7 9) (list 9 2) (list 1 9))) 63 0.001)\n    (check-within (candidate (list (list 7 4) (list 10 2) (list 10 8) (list 4 9) (list 4 9) (list 10 3) (list 5 4) (list 4 5) (list 10 6) (list 3 9))) 80 0.001)\n    (check-within (candidate (list (list 2 5) (list 7 4) (list 5 3) (list 2 4) (list 3 10) (list 3 5) (list 4 5) (list 4 4) (list 6 5))) 30 0.001)\n    (check-within (candidate (list (list 3 2) (list 7 10) (list 8 10) (list 7 4) (list 6 1))) 80 0.001)\n    (check-within (candidate (list (list 3 8) (list 4 5) (list 3 8))) 24 0.001)\n    (check-within (candidate (list (list 6 8) (list 9 9) (list 1 7))) 81 0.001)\n    (check-within (candidate (list (list 8 1) (list 7 5))) 35 0.001)\n    (check-within (candidate (list (list 10 6) (list 5 1) (list 9 5) (list 5 7) (list 5 8) (list 6 5) (list 8 3))) 60 0.001)\n    (check-within (candidate (list (list 8 6))) 48 0.001)\n    (check-within (candidate (list (list 5 2) (list 5 9) (list 9 5) (list 5 5) (list 8 6))) 45 0.001)\n    (check-within (candidate (list (list 7 8) (list 9 9) (list 3 5) (list 8 1) (list 1 3) (list 8 2) (list 8 6))) 81 0.001)\n    (check-within (candidate (list (list 3 10) (list 6 8) (list 4 5) (list 8 1) (list 7 2) (list 9 8) (list 3 7) (list 3 3) (list 9 10))) 90 0.001)\n    (check-within (candidate (list (list 1 1) (list 8 7) (list 4 6) (list 5 2) (list 5 9))) 56 0.001)\n    (check-within (candidate (list (list 6 2) (list 8 4) (list 8 6) (list 2 10) (list 6 1) (list 9 8) (list 10 8) (list 10 10) (list 5 9))) 100 0.001)\n    (check-within (candidate (list (list 10 2) (list 9 7) (list 4 2) (list 8 6) (list 9 10) (list 10 7) (list 7 5) (list 5 10) (list 5 9))) 90 0.001)\n    (check-within (candidate (list (list 1 4) (list 7 2) (list 2 6) (list 7 7))) 49 0.001)\n    (check-within (candidate (list (list 2 5) (list 10 10) (list 4 4))) 100 0.001)\n    (check-within (candidate (list (list 2 10) (list 10 4) (list 3 9) (list 6 10) (list 2 10) (list 10 1) (list 4 1))) 60 0.001)\n    (check-within (candidate (list (list 3 6) (list 5 4) (list 9 5) (list 6 2) (list 4 4) (list 7 2) (list 6 7))) 45 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 7))) 7 0.001)\n    (check-within (candidate (list (list 1 2) (list 8 8))) 64 0.001)\n    (check-within (candidate (list (list 3 7))) 21 0.001)\n    (check-within (candidate (list (list 6 7) (list 1 5) (list 10 9) (list 10 2))) 90 0.001)\n    (check-within (candidate (list (list 7 8))) 56 0.001)\n    (check-within (candidate (list (list 2 6) (list 10 3) (list 10 5) (list 1 9) (list 5 2) (list 9 10) (list 7 2) (list 7 7) (list 1 10))) 90 0.001)\n    (check-within (candidate (list (list 3 4) (list 8 2) (list 9 3) (list 2 9) (list 6 5) (list 10 5) (list 4 1) (list 8 7) (list 3 9))) 50 0.001)\n    (check-within (candidate (list (list 7 6) (list 6 8) (list 5 7) (list 1 1) (list 4 5) (list 6 10) (list 9 3) (list 4 4))) 60 0.001)\n    (check-within (candidate (list (list 1 3) (list 2 4) (list 4 9) (list 10 9) (list 3 9) (list 7 5) (list 2 3) (list 10 7) (list 2 3) (list 1 5))) 90 0.001)\n    (check-within (candidate (list (list 1 8) (list 6 10) (list 4 8) (list 3 8) (list 4 3))) 60 0.001)\n    (check-within (candidate (list (list 6 5) (list 3 10) (list 8 7) (list 10 10) (list 2 8) (list 5 8) (list 10 8) (list 9 10) (list 2 8) (list 8 9))) 100 0.001)\n    (check-within (candidate (list (list 1 6) (list 8 3) (list 6 1) (list 2 10) (list 2 5) (list 3 8))) 20 0.001)\n    (check-within (candidate (list (list 7 2) (list 3 8) (list 10 10) (list 7 1) (list 6 8) (list 6 7) (list 10 6) (list 4 6) (list 5 7) (list 10 4))) 100 0.001)\n    (check-within (candidate (list (list 9 6))) 54 0.001)\n    (check-within (candidate (list (list 8 2) (list 7 6) (list 1 4) (list 1 6) (list 4 8) (list 10 9) (list 9 4) (list 1 5))) 90 0.001)\n    (check-within (candidate (list (list 7 3) (list 2 5) (list 7 1) (list 10 7) (list 7 4) (list 8 1))) 70 0.001)\n    (check-within (candidate (list (list 9 2))) 18 0.001)\n    (check-within (candidate (list (list 9 2) (list 7 2) (list 2 7))) 18 0.001)\n    (check-within (candidate (list (list 2 8) (list 10 6) (list 8 10) (list 9 9))) 80 0.001)\n    (check-within (candidate (list (list 3 3))) 9 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3252_incremovableSubarrayCount", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of positive integers nums.\n;; A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.\n;; Return the total number of incremovable subarrays of nums.\n;; Note that an empty array is considered strictly increasing.\n;; A subarray is a contiguous non-empty sequence of elements within an array.\n;; Example 1:\n;; Input: nums = [1,2,3,4]\n;; Output: 10\n;; Explanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray.\n;; Example 2:\n;; Input: nums = [6,5,7,8]\n;; Output: 7\n;; Explanation: The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\n;; It can be shown that there are only 7 incremovable subarrays in nums.\n;; Example 3:\n;; Input: nums = [8,7,6,6]\n;; Output: 3\n;; Explanation: The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.\n;; Constraints:\n;; 1 <= nums.length <= 50\n;; 1 <= nums[i] <= 50\n(define (incremovableSubarrayCount nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3252_incremovableSubarrayCount.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incremovableSubarrayCount))\n    (check-within (candidate (list 1 2 3 4)) 10 0.001)\n    (check-within (candidate (list 6 5 7 8)) 7 0.001)\n    (check-within (candidate (list 8 7 6 6)) 3 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 2)) 1 0.001)\n    (check-within (candidate (list 3)) 1 0.001)\n    (check-within (candidate (list 4)) 1 0.001)\n    (check-within (candidate (list 5)) 1 0.001)\n    (check-within (candidate (list 6)) 1 0.001)\n    (check-within (candidate (list 7)) 1 0.001)\n    (check-within (candidate (list 8)) 1 0.001)\n    (check-within (candidate (list 9)) 1 0.001)\n    (check-within (candidate (list 10)) 1 0.001)\n    (check-within (candidate (list 1 2)) 3 0.001)\n    (check-within (candidate (list 1 4)) 3 0.001)\n    (check-within (candidate (list 1 8)) 3 0.001)\n    (check-within (candidate (list 2 10)) 3 0.001)\n    (check-within (candidate (list 3 4)) 3 0.001)\n    (check-within (candidate (list 3 8)) 3 0.001)\n    (check-within (candidate (list 3 10)) 3 0.001)\n    (check-within (candidate (list 4 2)) 3 0.001)\n    (check-within (candidate (list 4 3)) 3 0.001)\n    (check-within (candidate (list 4 5)) 3 0.001)\n    (check-within (candidate (list 5 1)) 3 0.001)\n    (check-within (candidate (list 5 4)) 3 0.001)\n    (check-within (candidate (list 5 6)) 3 0.001)\n    (check-within (candidate (list 5 7)) 3 0.001)\n    (check-within (candidate (list 5 9)) 3 0.001)\n    (check-within (candidate (list 6 4)) 3 0.001)\n    (check-within (candidate (list 6 5)) 3 0.001)\n    (check-within (candidate (list 6 9)) 3 0.001)\n    (check-within (candidate (list 9 3)) 3 0.001)\n    (check-within (candidate (list 9 4)) 3 0.001)\n    (check-within (candidate (list 9 7)) 3 0.001)\n    (check-within (candidate (list 9 8)) 3 0.001)\n    (check-within (candidate (list 10 5)) 3 0.001)\n    (check-within (candidate (list 10 10)) 3 0.001)\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 2 6)) 6 0.001)\n    (check-within (candidate (list 2 1 6)) 5 0.001)\n    (check-within (candidate (list 2 4 5)) 6 0.001)\n    (check-within (candidate (list 2 6 8)) 6 0.001)\n    (check-within (candidate (list 2 6 9)) 6 0.001)\n    (check-within (candidate (list 2 10 9)) 5 0.001)\n    (check-within (candidate (list 3 1 9)) 5 0.001)\n    (check-within (candidate (list 3 5 9)) 6 0.001)\n    (check-within (candidate (list 3 7 2)) 4 0.001)\n    (check-within (candidate (list 3 8 8)) 5 0.001)\n    (check-within (candidate (list 3 10 10)) 5 0.001)\n    (check-within (candidate (list 4 5 2)) 4 0.001)\n    (check-within (candidate (list 5 8 4)) 4 0.001)\n    (check-within (candidate (list 5 9 3)) 4 0.001)\n    (check-within (candidate (list 5 9 7)) 5 0.001)\n    (check-within (candidate (list 6 7 4)) 4 0.001)\n    (check-within (candidate (list 8 7 4)) 3 0.001)\n    (check-within (candidate (list 8 7 5)) 3 0.001)\n    (check-within (candidate (list 8 9 5)) 4 0.001)\n    (check-within (candidate (list 9 2 5)) 4 0.001)\n    (check-within (candidate (list 9 5 2)) 3 0.001)\n    (check-within (candidate (list 9 6 9)) 4 0.001)\n    (check-within (candidate (list 9 9 4)) 3 0.001)\n    (check-within (candidate (list 10 7 4)) 3 0.001)\n    (check-within (candidate (list 10 10 6)) 3 0.001)\n    (check-within (candidate (list 2 1 1 4)) 5 0.001)\n    (check-within (candidate (list 2 5 7 9)) 10 0.001)\n    (check-within (candidate (list 3 5 3 5)) 6 0.001)\n    (check-within (candidate (list 3 7 10 6)) 6 0.001)\n    (check-within (candidate (list 3 8 3 8)) 6 0.001)\n    (check-within (candidate (list 4 1 3 7)) 6 0.001)\n    (check-within (candidate (list 4 3 5 1)) 3 0.001)\n    (check-within (candidate (list 4 3 7 5)) 4 0.001)\n    (check-within (candidate (list 4 8 7 6)) 5 0.001)\n    (check-within (candidate (list 4 9 10 6)) 6 0.001)\n    (check-within (candidate (list 5 4 3 8)) 5 0.001)\n    (check-within (candidate (list 5 5 9 5)) 3 0.001)\n    (check-within (candidate (list 5 10 10 9)) 5 0.001)\n    (check-within (candidate (list 6 4 4 9)) 5 0.001)\n    (check-within (candidate (list 6 5 2 10)) 5 0.001)\n    (check-within (candidate (list 7 3 2 3)) 4 0.001)\n    (check-within (candidate (list 7 5 1 10)) 5 0.001)\n    (check-within (candidate (list 7 9 7 2)) 4 0.001)\n    (check-within (candidate (list 7 9 8 8)) 5 0.001)\n    (check-within (candidate (list 7 10 4 3)) 4 0.001)\n    (check-within (candidate (list 8 8 1 7)) 4 0.001)\n    (check-within (candidate (list 9 2 8 7)) 3 0.001)\n    (check-within (candidate (list 10 5 9 5)) 3 0.001)\n    (check-within (candidate (list 10 7 2 8)) 4 0.001)\n    (check-within (candidate (list 10 9 1 3)) 4 0.001)\n    (check-within (candidate (list 1 1 4 4 7)) 6 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) 15 0.001)\n    (check-within (candidate (list 1 2 8 9 2)) 7 0.001)\n    (check-within (candidate (list 1 7 4 9 2)) 5 0.001)\n    (check-within (candidate (list 2 2 4 6 3)) 4 0.001)\n    (check-within (candidate (list 2 7 1 3 9)) 9 0.001)\n    (check-within (candidate (list 3 1 9 6 5)) 4 0.001)\n    (check-within (candidate (list 3 3 3 6 1)) 3 0.001)\n    (check-within (candidate (list 3 7 1 8 1)) 4 0.001)\n    (check-within (candidate (list 4 1 6 10 2)) 3 0.001)\n    (check-within (candidate (list 5 4 8 4 2)) 3 0.001)\n    (check-within (candidate (list 6 1 1 8 10)) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3260_minimumCost", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist.\n;; The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\n;; You need to divide nums into k disjoint contiguous subarrays, such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist.\n;; Return the minimum possible sum of the cost of these subarrays.\n;; Example 1:\n;; Input: nums = [1,3,2,6,4,2], k = 3, dist = 3\n;; Output: 5\n;; Explanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\n;; It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n;; Example 2:\n;; Input: nums = [10,1,2,2,2,1], k = 4, dist = 3\n;; Output: 15\n;; Explanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\n;; The division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\n;; It can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n;; Example 3:\n;; Input: nums = [10,8,18,9], k = 3, dist = 1\n;; Output: 36\n;; Explanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\n;; The division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\n;; It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n;; Constraints:\n;; 3 <= n <= 105\n;; 1 <= nums[i] <= 109\n;; 3 <= k <= n\n;; k - 2 <= dist <= n - 2\n(define (minimumCost nums k dist)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3260_minimumCost.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumCost))\n    (check-within (candidate (list 1 3 2 6 4 2) 3 3) 5 0.001)\n    (check-within (candidate (list 10 1 2 2 2 1) 4 3) 15 0.001)\n    (check-within (candidate (list 10 8 18 9) 3 1) 36 0.001)\n    (check-within (candidate (list 1 1 1) 3 1) 3 0.001)\n    (check-within (candidate (list 1 1 3) 3 1) 5 0.001)\n    (check-within (candidate (list 1 2 2) 3 1) 5 0.001)\n    (check-within (candidate (list 1 2 5) 3 1) 8 0.001)\n    (check-within (candidate (list 1 4 4) 3 1) 9 0.001)\n    (check-within (candidate (list 2 2 1) 3 1) 5 0.001)\n    (check-within (candidate (list 2 3 2) 3 1) 7 0.001)\n    (check-within (candidate (list 2 5 4) 3 1) 11 0.001)\n    (check-within (candidate (list 3 1 2) 3 1) 6 0.001)\n    (check-within (candidate (list 3 1 3) 3 1) 7 0.001)\n    (check-within (candidate (list 3 2 2) 3 1) 7 0.001)\n    (check-within (candidate (list 3 3 2) 3 1) 8 0.001)\n    (check-within (candidate (list 3 4 1) 3 1) 8 0.001)\n    (check-within (candidate (list 3 5 3) 3 1) 11 0.001)\n    (check-within (candidate (list 4 1 4) 3 1) 9 0.001)\n    (check-within (candidate (list 4 1 5) 3 1) 10 0.001)\n    (check-within (candidate (list 4 2 1) 3 1) 7 0.001)\n    (check-within (candidate (list 4 2 2) 3 1) 8 0.001)\n    (check-within (candidate (list 4 2 4) 3 1) 10 0.001)\n    (check-within (candidate (list 4 2 5) 3 1) 11 0.001)\n    (check-within (candidate (list 4 3 1) 3 1) 8 0.001)\n    (check-within (candidate (list 4 3 2) 3 1) 9 0.001)\n    (check-within (candidate (list 4 5 3) 3 1) 12 0.001)\n    (check-within (candidate (list 5 2 1) 3 1) 8 0.001)\n    (check-within (candidate (list 5 3 5) 3 1) 13 0.001)\n    (check-within (candidate (list 50 50 50) 3 1) 150 0.001)\n    (check-within (candidate (list 1 5 3 6) 3 2) 9 0.001)\n    (check-within (candidate (list 1 5 3 7) 3 1) 9 0.001)\n    (check-within (candidate (list 1 5 3 7) 3 2) 9 0.001)\n    (check-within (candidate (list 1 5 3 8) 3 1) 9 0.001)\n    (check-within (candidate (list 1 5 3 8) 3 2) 9 0.001)\n    (check-within (candidate (list 1 5 4 6) 4 2) 16 0.001)\n    (check-within (candidate (list 1 6 3 5) 3 2) 9 0.001)\n    (check-within (candidate (list 1 6 3 8) 3 2) 10 0.001)\n    (check-within (candidate (list 1 6 4 5) 4 2) 16 0.001)\n    (check-within (candidate (list 1 7 4 6) 4 2) 18 0.001)\n    (check-within (candidate (list 1 7 4 8) 4 2) 20 0.001)\n    (check-within (candidate (list 1 8 3 8) 3 1) 12 0.001)\n    (check-within (candidate (list 1 8 4 7) 4 2) 20 0.001)\n    (check-within (candidate (list 2 5 3 8) 3 2) 10 0.001)\n    (check-within (candidate (list 2 5 4 7) 4 2) 18 0.001)\n    (check-within (candidate (list 2 5 4 8) 4 2) 19 0.001)\n    (check-within (candidate (list 2 6 3 5) 3 1) 10 0.001)\n    (check-within (candidate (list 2 6 3 6) 3 1) 11 0.001)\n    (check-within (candidate (list 2 6 4 5) 4 2) 17 0.001)\n    (check-within (candidate (list 2 6 4 7) 4 2) 19 0.001)\n    (check-within (candidate (list 2 6 4 8) 4 2) 20 0.001)\n    (check-within (candidate (list 2 7 3 5) 3 2) 10 0.001)\n    (check-within (candidate (list 2 7 3 8) 3 2) 12 0.001)\n    (check-within (candidate (list 2 7 4 6) 4 2) 19 0.001)\n    (check-within (candidate (list 2 8 3 5) 3 1) 10 0.001)\n    (check-within (candidate (list 2 8 4 5) 4 2) 19 0.001)\n    (check-within (candidate (list 3 5 3 5) 3 1) 11 0.001)\n    (check-within (candidate (list 3 5 3 5) 3 2) 11 0.001)\n    (check-within (candidate (list 3 5 3 8) 3 2) 11 0.001)\n    (check-within (candidate (list 3 5 4 7) 4 2) 19 0.001)\n    (check-within (candidate (list 3 6 3 5) 3 1) 11 0.001)\n    (check-within (candidate (list 3 6 3 7) 3 2) 12 0.001)\n    (check-within (candidate (list 3 6 3 8) 3 1) 12 0.001)\n    (check-within (candidate (list 3 6 4 5) 4 2) 18 0.001)\n    (check-within (candidate (list 3 7 3 5) 3 1) 11 0.001)\n    (check-within (candidate (list 3 7 3 5) 3 2) 11 0.001)\n    (check-within (candidate (list 3 7 3 6) 3 1) 12 0.001)\n    (check-within (candidate (list 3 7 3 8) 3 2) 13 0.001)\n    (check-within (candidate (list 3 7 4 7) 4 2) 21 0.001)\n    (check-within (candidate (list 3 8 3 5) 3 1) 11 0.001)\n    (check-within (candidate (list 3 8 4 6) 4 2) 21 0.001)\n    (check-within (candidate (list 4 5 3 5) 3 2) 12 0.001)\n    (check-within (candidate (list 4 5 3 6) 3 2) 12 0.001)\n    (check-within (candidate (list 4 5 3 8) 3 2) 12 0.001)\n    (check-within (candidate (list 4 5 4 5) 4 2) 18 0.001)\n    (check-within (candidate (list 4 6 3 6) 3 1) 13 0.001)\n    (check-within (candidate (list 4 6 3 7) 3 1) 13 0.001)\n    (check-within (candidate (list 4 6 4 5) 4 2) 19 0.001)\n    (check-within (candidate (list 4 6 4 8) 4 2) 22 0.001)\n    (check-within (candidate (list 4 7 3 6) 3 2) 13 0.001)\n    (check-within (candidate (list 4 7 4 5) 4 2) 20 0.001)\n    (check-within (candidate (list 4 7 4 7) 4 2) 22 0.001)\n    (check-within (candidate (list 4 8 3 5) 3 2) 12 0.001)\n    (check-within (candidate (list 4 8 3 6) 3 1) 13 0.001)\n    (check-within (candidate (list 4 8 3 7) 3 2) 14 0.001)\n    (check-within (candidate (list 4 8 4 6) 4 2) 22 0.001)\n    (check-within (candidate (list 4 8 4 8) 4 2) 24 0.001)\n    (check-within (candidate (list 1 5 6 6 3 7 2) 6 5) 23 0.001)\n    (check-within (candidate (list 1 6 4 6 2 9 11) 4 3) 13 0.001)\n    (check-within (candidate (list 1 6 4 7 9 6 1) 4 4) 12 0.001)\n    (check-within (candidate (list 1 6 5 6 4 9 11) 5 5) 22 0.001)\n    (check-within (candidate (list 1 6 5 7 8 7 5) 5 4) 25 0.001)\n    (check-within (candidate (list 1 6 5 8 11 10 6) 5 3) 31 0.001)\n    (check-within (candidate (list 1 6 6 8 4 8 7) 6 4) 33 0.001)\n    (check-within (candidate (list 1 7 6 8 5 10 10) 6 5) 37 0.001)\n    (check-within (candidate (list 1 8 3 8 11 11 10) 3 5) 12 0.001)\n    (check-within (candidate (list 1 8 4 7 11 1 8) 4 4) 13 0.001)\n    (check-within (candidate (list 1 8 6 5 6 12 12) 6 5) 38 0.001)\n    (check-within (candidate (list 1 8 6 6 12 5 2) 6 5) 28 0.001)\n    (check-within (candidate (list 2 5 3 5 7 4 3) 3 3) 9 0.001)\n    (check-within (candidate (list 2 5 4 6 6 1 3) 4 5) 10 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3262_largestPerimeter", "language": "rkt", "prompt": "#lang racket\n;; You are given an array of positive integers nums of length n.\n;; A polygon is a closed plane figure that has at least 3 sides. The longest side of a polygon is smaller than the sum of its other sides.\n;; Conversely, if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak.\n;; The perimeter of a polygon is the sum of lengths of its sides.\n;; Return the largest possible perimeter of a polygon whose sides can be formed from nums, or -1 if it is not possible to create a polygon.\n;; Example 1:\n;; Input: nums = [5,5,5]\n;; Output: 15\n;; Explanation: The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15.\n;; Example 2:\n;; Input: nums = [1,12,1,2,5,50,3]\n;; Output: 12\n;; Explanation: The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12.\n;; We cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them.\n;; It can be shown that the largest possible perimeter is 12.\n;; Example 3:\n;; Input: nums = [5,5,50]\n;; Output: -1\n;; Explanation: There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5.\n;; Constraints:\n;; 3 <= n <= 105\n;; 1 <= nums[i] <= 109\n(define (largestPerimeter nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3262_largestPerimeter.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largestPerimeter))\n    (check-within (candidate (list 5 5 5)) 15 0.001)\n    (check-within (candidate (list 1 12 1 2 5 50 3)) 12 0.001)\n    (check-within (candidate (list 5 5 50)) -1 0.001)\n    (check-within (candidate (list 1 1 1)) 3 0.001)\n    (check-within (candidate (list 1 1 2)) -1 0.001)\n    (check-within (candidate (list 1 1 3)) -1 0.001)\n    (check-within (candidate (list 1 1 4)) -1 0.001)\n    (check-within (candidate (list 1 1 5)) -1 0.001)\n    (check-within (candidate (list 1 2 1)) -1 0.001)\n    (check-within (candidate (list 1 2 2)) 5 0.001)\n    (check-within (candidate (list 1 2 3)) -1 0.001)\n    (check-within (candidate (list 1 2 4)) -1 0.001)\n    (check-within (candidate (list 1 2 5)) -1 0.001)\n    (check-within (candidate (list 1 3 1)) -1 0.001)\n    (check-within (candidate (list 1 3 2)) -1 0.001)\n    (check-within (candidate (list 1 3 3)) 7 0.001)\n    (check-within (candidate (list 1 3 4)) -1 0.001)\n    (check-within (candidate (list 1 3 5)) -1 0.001)\n    (check-within (candidate (list 1 4 1)) -1 0.001)\n    (check-within (candidate (list 1 4 2)) -1 0.001)\n    (check-within (candidate (list 1 4 3)) -1 0.001)\n    (check-within (candidate (list 1 4 4)) 9 0.001)\n    (check-within (candidate (list 1 4 5)) -1 0.001)\n    (check-within (candidate (list 1 5 1)) -1 0.001)\n    (check-within (candidate (list 1 5 2)) -1 0.001)\n    (check-within (candidate (list 1 5 3)) -1 0.001)\n    (check-within (candidate (list 1 5 4)) -1 0.001)\n    (check-within (candidate (list 1 5 5)) 11 0.001)\n    (check-within (candidate (list 2 1 1)) -1 0.001)\n    (check-within (candidate (list 2 1 2)) 5 0.001)\n    (check-within (candidate (list 2 1 3)) -1 0.001)\n    (check-within (candidate (list 2 1 4)) -1 0.001)\n    (check-within (candidate (list 2 1 5)) -1 0.001)\n    (check-within (candidate (list 2 2 1)) 5 0.001)\n    (check-within (candidate (list 2 2 2)) 6 0.001)\n    (check-within (candidate (list 2 2 3)) 7 0.001)\n    (check-within (candidate (list 2 2 4)) -1 0.001)\n    (check-within (candidate (list 2 2 5)) -1 0.001)\n    (check-within (candidate (list 2 3 1)) -1 0.001)\n    (check-within (candidate (list 2 3 2)) 7 0.001)\n    (check-within (candidate (list 2 3 3)) 8 0.001)\n    (check-within (candidate (list 2 3 4)) 9 0.001)\n    (check-within (candidate (list 2 3 5)) -1 0.001)\n    (check-within (candidate (list 2 4 1)) -1 0.001)\n    (check-within (candidate (list 2 4 2)) -1 0.001)\n    (check-within (candidate (list 2 4 3)) 9 0.001)\n    (check-within (candidate (list 2 4 4)) 10 0.001)\n    (check-within (candidate (list 2 4 5)) 11 0.001)\n    (check-within (candidate (list 2 5 1)) -1 0.001)\n    (check-within (candidate (list 2 5 2)) -1 0.001)\n    (check-within (candidate (list 2 5 3)) -1 0.001)\n    (check-within (candidate (list 2 5 4)) 11 0.001)\n    (check-within (candidate (list 2 5 5)) 12 0.001)\n    (check-within (candidate (list 3 1 1)) -1 0.001)\n    (check-within (candidate (list 3 1 2)) -1 0.001)\n    (check-within (candidate (list 3 1 3)) 7 0.001)\n    (check-within (candidate (list 3 1 4)) -1 0.001)\n    (check-within (candidate (list 3 1 5)) -1 0.001)\n    (check-within (candidate (list 3 2 1)) -1 0.001)\n    (check-within (candidate (list 3 2 2)) 7 0.001)\n    (check-within (candidate (list 3 2 3)) 8 0.001)\n    (check-within (candidate (list 3 2 4)) 9 0.001)\n    (check-within (candidate (list 3 2 5)) -1 0.001)\n    (check-within (candidate (list 3 3 1)) 7 0.001)\n    (check-within (candidate (list 3 3 2)) 8 0.001)\n    (check-within (candidate (list 3 3 3)) 9 0.001)\n    (check-within (candidate (list 3 3 4)) 10 0.001)\n    (check-within (candidate (list 3 3 5)) 11 0.001)\n    (check-within (candidate (list 3 4 1)) -1 0.001)\n    (check-within (candidate (list 3 4 2)) 9 0.001)\n    (check-within (candidate (list 3 4 3)) 10 0.001)\n    (check-within (candidate (list 3 4 4)) 11 0.001)\n    (check-within (candidate (list 3 4 5)) 12 0.001)\n    (check-within (candidate (list 3 5 1)) -1 0.001)\n    (check-within (candidate (list 3 5 2)) -1 0.001)\n    (check-within (candidate (list 3 5 3)) 11 0.001)\n    (check-within (candidate (list 3 5 4)) 12 0.001)\n    (check-within (candidate (list 3 5 5)) 13 0.001)\n    (check-within (candidate (list 4 1 1)) -1 0.001)\n    (check-within (candidate (list 4 1 2)) -1 0.001)\n    (check-within (candidate (list 4 1 3)) -1 0.001)\n    (check-within (candidate (list 4 1 4)) 9 0.001)\n    (check-within (candidate (list 4 1 5)) -1 0.001)\n    (check-within (candidate (list 4 2 1)) -1 0.001)\n    (check-within (candidate (list 4 2 2)) -1 0.001)\n    (check-within (candidate (list 4 2 3)) 9 0.001)\n    (check-within (candidate (list 4 2 4)) 10 0.001)\n    (check-within (candidate (list 4 2 5)) 11 0.001)\n    (check-within (candidate (list 4 3 1)) -1 0.001)\n    (check-within (candidate (list 4 3 2)) 9 0.001)\n    (check-within (candidate (list 4 3 3)) 10 0.001)\n    (check-within (candidate (list 4 3 4)) 11 0.001)\n    (check-within (candidate (list 4 3 5)) 12 0.001)\n    (check-within (candidate (list 4 4 1)) 9 0.001)\n    (check-within (candidate (list 4 4 2)) 10 0.001)\n    (check-within (candidate (list 4 4 3)) 11 0.001)\n    (check-within (candidate (list 4 4 4)) 12 0.001)\n    (check-within (candidate (list 4 4 5)) 13 0.001)\n    (check-within (candidate (list 4 5 1)) -1 0.001)\n    (check-within (candidate (list 4 5 2)) 11 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3263_minimumCost", "language": "rkt", "prompt": "#lang racket\n;; You are given an array of integers nums of length n.\n;; The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\n;; You need to divide nums into 3 disjoint contiguous subarrays.\n;; Return the minimum possible sum of the cost of these subarrays.\n;; Example 1:\n;; Input: nums = [1,2,3,12]\n;; Output: 6\n;; Explanation: The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\n;; The other possible ways to form 3 subarrays are:\n;; - [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n;; - [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16.\n;; Example 2:\n;; Input: nums = [5,4,3]\n;; Output: 12\n;; Explanation: The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\n;; It can be shown that 12 is the minimum cost achievable.\n;; Example 3:\n;; Input: nums = [10,3,1,1]\n;; Output: 12\n;; Explanation: The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\n;; It can be shown that 12 is the minimum cost achievable.\n;; Constraints:\n;; 3 <= n <= 50\n;; 1 <= nums[i] <= 50\n(define (minimumCost nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3263_minimumCost.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumCost))\n    (check-within (candidate (list 1 2 3 12)) 6 0.001)\n    (check-within (candidate (list 5 4 3)) 12 0.001)\n    (check-within (candidate (list 10 3 1 1)) 12 0.001)\n    (check-within (candidate (list 1 1 1)) 3 0.001)\n    (check-within (candidate (list 1 1 2)) 4 0.001)\n    (check-within (candidate (list 1 1 3)) 5 0.001)\n    (check-within (candidate (list 1 1 4)) 6 0.001)\n    (check-within (candidate (list 1 1 5)) 7 0.001)\n    (check-within (candidate (list 1 2 1)) 4 0.001)\n    (check-within (candidate (list 1 2 2)) 5 0.001)\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 2 4)) 7 0.001)\n    (check-within (candidate (list 1 2 5)) 8 0.001)\n    (check-within (candidate (list 1 3 1)) 5 0.001)\n    (check-within (candidate (list 1 3 2)) 6 0.001)\n    (check-within (candidate (list 1 3 3)) 7 0.001)\n    (check-within (candidate (list 1 3 4)) 8 0.001)\n    (check-within (candidate (list 1 3 5)) 9 0.001)\n    (check-within (candidate (list 1 4 1)) 6 0.001)\n    (check-within (candidate (list 1 4 2)) 7 0.001)\n    (check-within (candidate (list 1 4 3)) 8 0.001)\n    (check-within (candidate (list 1 4 4)) 9 0.001)\n    (check-within (candidate (list 1 4 5)) 10 0.001)\n    (check-within (candidate (list 1 5 1)) 7 0.001)\n    (check-within (candidate (list 1 5 2)) 8 0.001)\n    (check-within (candidate (list 1 5 3)) 9 0.001)\n    (check-within (candidate (list 1 5 4)) 10 0.001)\n    (check-within (candidate (list 1 5 5)) 11 0.001)\n    (check-within (candidate (list 2 1 1)) 4 0.001)\n    (check-within (candidate (list 2 1 2)) 5 0.001)\n    (check-within (candidate (list 2 1 3)) 6 0.001)\n    (check-within (candidate (list 2 1 4)) 7 0.001)\n    (check-within (candidate (list 2 1 5)) 8 0.001)\n    (check-within (candidate (list 2 2 1)) 5 0.001)\n    (check-within (candidate (list 2 2 2)) 6 0.001)\n    (check-within (candidate (list 2 2 3)) 7 0.001)\n    (check-within (candidate (list 2 2 4)) 8 0.001)\n    (check-within (candidate (list 2 2 5)) 9 0.001)\n    (check-within (candidate (list 2 3 1)) 6 0.001)\n    (check-within (candidate (list 2 3 2)) 7 0.001)\n    (check-within (candidate (list 2 3 3)) 8 0.001)\n    (check-within (candidate (list 2 3 4)) 9 0.001)\n    (check-within (candidate (list 2 3 5)) 10 0.001)\n    (check-within (candidate (list 2 4 1)) 7 0.001)\n    (check-within (candidate (list 2 4 2)) 8 0.001)\n    (check-within (candidate (list 2 4 3)) 9 0.001)\n    (check-within (candidate (list 2 4 4)) 10 0.001)\n    (check-within (candidate (list 2 4 5)) 11 0.001)\n    (check-within (candidate (list 2 5 1)) 8 0.001)\n    (check-within (candidate (list 2 5 2)) 9 0.001)\n    (check-within (candidate (list 2 5 3)) 10 0.001)\n    (check-within (candidate (list 2 5 4)) 11 0.001)\n    (check-within (candidate (list 2 5 5)) 12 0.001)\n    (check-within (candidate (list 3 1 1)) 5 0.001)\n    (check-within (candidate (list 3 1 2)) 6 0.001)\n    (check-within (candidate (list 3 1 3)) 7 0.001)\n    (check-within (candidate (list 3 1 4)) 8 0.001)\n    (check-within (candidate (list 3 1 5)) 9 0.001)\n    (check-within (candidate (list 3 2 1)) 6 0.001)\n    (check-within (candidate (list 3 2 2)) 7 0.001)\n    (check-within (candidate (list 3 2 3)) 8 0.001)\n    (check-within (candidate (list 3 2 4)) 9 0.001)\n    (check-within (candidate (list 3 2 5)) 10 0.001)\n    (check-within (candidate (list 3 3 1)) 7 0.001)\n    (check-within (candidate (list 3 3 2)) 8 0.001)\n    (check-within (candidate (list 3 3 3)) 9 0.001)\n    (check-within (candidate (list 3 3 4)) 10 0.001)\n    (check-within (candidate (list 3 3 5)) 11 0.001)\n    (check-within (candidate (list 3 4 1)) 8 0.001)\n    (check-within (candidate (list 3 4 2)) 9 0.001)\n    (check-within (candidate (list 3 4 3)) 10 0.001)\n    (check-within (candidate (list 3 4 4)) 11 0.001)\n    (check-within (candidate (list 3 4 5)) 12 0.001)\n    (check-within (candidate (list 3 5 1)) 9 0.001)\n    (check-within (candidate (list 3 5 2)) 10 0.001)\n    (check-within (candidate (list 3 5 3)) 11 0.001)\n    (check-within (candidate (list 3 5 4)) 12 0.001)\n    (check-within (candidate (list 3 5 5)) 13 0.001)\n    (check-within (candidate (list 4 1 1)) 6 0.001)\n    (check-within (candidate (list 4 1 2)) 7 0.001)\n    (check-within (candidate (list 4 1 3)) 8 0.001)\n    (check-within (candidate (list 4 1 4)) 9 0.001)\n    (check-within (candidate (list 4 1 5)) 10 0.001)\n    (check-within (candidate (list 4 2 1)) 7 0.001)\n    (check-within (candidate (list 4 2 2)) 8 0.001)\n    (check-within (candidate (list 4 2 3)) 9 0.001)\n    (check-within (candidate (list 4 2 4)) 10 0.001)\n    (check-within (candidate (list 4 2 5)) 11 0.001)\n    (check-within (candidate (list 4 3 1)) 8 0.001)\n    (check-within (candidate (list 4 3 2)) 9 0.001)\n    (check-within (candidate (list 4 3 3)) 10 0.001)\n    (check-within (candidate (list 4 3 4)) 11 0.001)\n    (check-within (candidate (list 4 3 5)) 12 0.001)\n    (check-within (candidate (list 4 4 1)) 9 0.001)\n    (check-within (candidate (list 4 4 2)) 10 0.001)\n    (check-within (candidate (list 4 4 3)) 11 0.001)\n    (check-within (candidate (list 4 4 4)) 12 0.001)\n    (check-within (candidate (list 4 4 5)) 13 0.001)\n    (check-within (candidate (list 4 5 1)) 10 0.001)\n    (check-within (candidate (list 4 5 2)) 11 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3267_maximumLength", "language": "rkt", "prompt": "#lang racket\n;; You are given a string s that consists of lowercase English letters.\n;; A string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special.\n;; Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.\n;; A substring is a contiguous non-empty sequence of characters within a string.\n;; Example 1:\n;; Input: s = \"aaaa\"\n;; Output: 2\n;; Explanation: The longest special substring which occurs thrice is \"aa\": substrings \"aaaa\", \"aaaa\", and \"aaaa\".\n;; It can be shown that the maximum length achievable is 2.\n;; Example 2:\n;; Input: s = \"abcdef\"\n;; Output: -1\n;; Explanation: There exists no special substring which occurs at least thrice. Hence return -1.\n;; Example 3:\n;; Input: s = \"abcaba\"\n;; Output: 1\n;; Explanation: The longest special substring which occurs thrice is \"a\": substrings \"abcaba\", \"abcaba\", and \"abcaba\".\n;; It can be shown that the maximum length achievable is 1.\n;; Constraints:\n;; 3 <= s.length <= 50\n;; s consists of only lowercase English letters.\n(define (maximumLength s)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3267_maximumLength.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximumLength))\n    (check-within (candidate aaaa) 2 0.001)\n    (check-within (candidate abcdef) -1 0.001)\n    (check-within (candidate abcaba) 1 0.001)\n    (check-within (candidate abcccccdddd) 3 0.001)\n    (check-within (candidate aaa) 1 0.001)\n    (check-within (candidate acc) -1 0.001)\n    (check-within (candidate cab) -1 0.001)\n    (check-within (candidate cad) -1 0.001)\n    (check-within (candidate cbc) -1 0.001)\n    (check-within (candidate ccc) 1 0.001)\n    (check-within (candidate dca) -1 0.001)\n    (check-within (candidate ddd) 1 0.001)\n    (check-within (candidate fff) 1 0.001)\n    (check-within (candidate ggg) 1 0.001)\n    (check-within (candidate hhh) 1 0.001)\n    (check-within (candidate kkk) 1 0.001)\n    (check-within (candidate lll) 1 0.001)\n    (check-within (candidate ooo) 1 0.001)\n    (check-within (candidate ppp) 1 0.001)\n    (check-within (candidate qqq) 1 0.001)\n    (check-within (candidate rrr) 1 0.001)\n    (check-within (candidate xxx) 1 0.001)\n    (check-within (candidate yyy) 1 0.001)\n    (check-within (candidate aaau) 1 0.001)\n    (check-within (candidate affe) -1 0.001)\n    (check-within (candidate agae) -1 0.001)\n    (check-within (candidate aiii) 1 0.001)\n    (check-within (candidate bbbb) 2 0.001)\n    (check-within (candidate bbbz) 1 0.001)\n    (check-within (candidate bddd) 1 0.001)\n    (check-within (candidate beee) 1 0.001)\n    (check-within (candidate bnnn) 1 0.001)\n    (check-within (candidate bsss) 1 0.001)\n    (check-within (candidate bxxx) 1 0.001)\n    (check-within (candidate cafc) -1 0.001)\n    (check-within (candidate ccag) -1 0.001)\n    (check-within (candidate cfff) 1 0.001)\n    (check-within (candidate dddd) 2 0.001)\n    (check-within (candidate dsss) 1 0.001)\n    (check-within (candidate eccc) 1 0.001)\n    (check-within (candidate eeew) 1 0.001)\n    (check-within (candidate gfdc) -1 0.001)\n    (check-within (candidate giii) 1 0.001)\n    (check-within (candidate hhhn) 1 0.001)\n    (check-within (candidate hyyy) 1 0.001)\n    (check-within (candidate iiii) 2 0.001)\n    (check-within (candidate jiii) 1 0.001)\n    (check-within (candidate jjjj) 2 0.001)\n    (check-within (candidate kbbb) 1 0.001)\n    (check-within (candidate kddd) 1 0.001)\n    (check-within (candidate looo) 1 0.001)\n    (check-within (candidate nnnn) 2 0.001)\n    (check-within (candidate oaaa) 1 0.001)\n    (check-within (candidate osss) 1 0.001)\n    (check-within (candidate pppp) 2 0.001)\n    (check-within (candidate pppw) 1 0.001)\n    (check-within (candidate qqqc) 1 0.001)\n    (check-within (candidate qqqo) 1 0.001)\n    (check-within (candidate qqqq) 2 0.001)\n    (check-within (candidate reee) 1 0.001)\n    (check-within (candidate rzzz) 1 0.001)\n    (check-within (candidate thhh) 1 0.001)\n    (check-within (candidate tttt) 2 0.001)\n    (check-within (candidate unnn) 1 0.001)\n    (check-within (candidate uuuu) 2 0.001)\n    (check-within (candidate uyyy) 1 0.001)\n    (check-within (candidate vddd) 1 0.001)\n    (check-within (candidate vfff) 1 0.001)\n    (check-within (candidate vvvv) 2 0.001)\n    (check-within (candidate wbbb) 1 0.001)\n    (check-within (candidate wqqq) 1 0.001)\n    (check-within (candidate wwwg) 1 0.001)\n    (check-within (candidate xxxk) 1 0.001)\n    (check-within (candidate xxxx) 2 0.001)\n    (check-within (candidate zfff) 1 0.001)\n    (check-within (candidate ammmm) 2 0.001)\n    (check-within (candidate aqqqu) 1 0.001)\n    (check-within (candidate axxxx) 2 0.001)\n    (check-within (candidate bahhh) 1 0.001)\n    (check-within (candidate bbbbz) 2 0.001)\n    (check-within (candidate bbccc) 1 0.001)\n    (check-within (candidate biaei) -1 0.001)\n    (check-within (candidate bjjjj) 2 0.001)\n    (check-within (candidate cccll) 1 0.001)\n    (check-within (candidate ceaaa) 1 0.001)\n    (check-within (candidate cjlll) 1 0.001)\n    (check-within (candidate crqqq) 1 0.001)\n    (check-within (candidate cyyyy) 2 0.001)\n    (check-within (candidate ddddj) 2 0.001)\n    (check-within (candidate ddddt) 2 0.001)\n    (check-within (candidate dkkkk) 2 0.001)\n    (check-within (candidate eefff) 1 0.001)\n    (check-within (candidate efage) -1 0.001)\n    (check-within (candidate epppp) 2 0.001)\n    (check-within (candidate fafff) 1 0.001)\n    (check-within (candidate ffbbb) 1 0.001)\n    (check-within (candidate ffffr) 2 0.001)\n    (check-within (candidate gcgbf) -1 0.001)\n    (check-within (candidate gcooo) 1 0.001)\n    (check-within (candidate gfgec) -1 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3270_minMovesToCaptureTheQueen", "language": "rkt", "prompt": "#lang racket\n;; There is a 1-indexed 8 x 8 chessboard containing 3 pieces.\n;; You are given 6 integers a, b, c, d, e, and f where:\n;; (a, b) denotes the position of the white rook.\n;; (c, d) denotes the position of the white bishop.\n;; (e, f) denotes the position of the black queen.\n;; Given that you can only move the white pieces, return the minimum number of moves required to capture the black queen.\n;; Note that:\n;; Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.\n;; Bishops can move any number of squares diagonally, but cannot jump over other pieces.\n;; A rook or a bishop can capture the queen if it is located in a square that they can move to.\n;; The queen does not move.\n;; Example 1:\n;; Input: a = 1, b = 1, c = 8, d = 8, e = 2, f = 3\n;; Output: 2\n;; Explanation: We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).\n;; It is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.\n;; Example 2:\n;; Input: a = 5, b = 3, c = 3, d = 4, e = 5, f = 2\n;; Output: 1\n;; Explanation: We can capture the black queen in a single move by doing one of the following: \n;; - Move the white rook to (5, 2).\n;; - Move the white bishop to (5, 2).\n;; Constraints:\n;; 1 <= a, b, c, d, e, f <= 8\n;; No two pieces are on the same square.\n(define (minMovesToCaptureTheQueen a b c d e f)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3270_minMovesToCaptureTheQueen.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minMovesToCaptureTheQueen))\n    (check-within (candidate 1 1 8 8 2 3) 2 0.001)\n    (check-within (candidate 5 3 3 4 5 2) 1 0.001)\n    (check-within (candidate 4 3 3 4 5 2) 2 0.001)\n    (check-within (candidate 1 1 1 4 1 8) 2 0.001)\n    (check-within (candidate 4 3 3 4 2 5) 1 0.001)\n    (check-within (candidate 8 4 7 5 5 5) 2 0.001)\n    (check-within (candidate 1 8 4 3 2 7) 2 0.001)\n    (check-within (candidate 1 6 3 3 5 6) 1 0.001)\n    (check-within (candidate 5 3 6 6 6 4) 2 0.001)\n    (check-within (candidate 5 1 6 6 2 7) 2 0.001)\n    (check-within (candidate 8 4 8 8 7 7) 1 0.001)\n    (check-within (candidate 5 1 6 5 3 7) 2 0.001)\n    (check-within (candidate 5 2 8 6 7 4) 2 0.001)\n    (check-within (candidate 1 1 8 2 4 1) 1 0.001)\n    (check-within (candidate 3 1 1 1 2 5) 2 0.001)\n    (check-within (candidate 8 5 2 4 5 7) 1 0.001)\n    (check-within (candidate 8 1 5 8 1 7) 2 0.001)\n    (check-within (candidate 4 6 6 2 1 4) 2 0.001)\n    (check-within (candidate 7 5 7 6 2 8) 2 0.001)\n    (check-within (candidate 8 6 3 2 6 8) 2 0.001)\n    (check-within (candidate 3 3 8 1 2 5) 2 0.001)\n    (check-within (candidate 4 5 6 1 4 7) 1 0.001)\n    (check-within (candidate 7 2 2 8 7 3) 1 0.001)\n    (check-within (candidate 3 8 2 7 1 4) 2 0.001)\n    (check-within (candidate 3 5 5 3 1 8) 2 0.001)\n    (check-within (candidate 2 2 7 4 3 1) 2 0.001)\n    (check-within (candidate 4 3 1 5 5 3) 1 0.001)\n    (check-within (candidate 7 5 2 5 6 3) 2 0.001)\n    (check-within (candidate 1 7 8 1 3 4) 2 0.001)\n    (check-within (candidate 8 6 6 4 1 2) 2 0.001)\n    (check-within (candidate 7 8 4 4 3 6) 2 0.001)\n    (check-within (candidate 8 4 7 7 4 4) 1 0.001)\n    (check-within (candidate 5 7 4 2 3 8) 2 0.001)\n    (check-within (candidate 6 1 7 8 8 7) 1 0.001)\n    (check-within (candidate 3 7 7 6 7 4) 2 0.001)\n    (check-within (candidate 7 3 6 4 6 7) 2 0.001)\n    (check-within (candidate 5 7 1 1 5 6) 1 0.001)\n    (check-within (candidate 6 8 5 8 5 3) 2 0.001)\n    (check-within (candidate 4 2 3 7 6 1) 2 0.001)\n    (check-within (candidate 3 2 6 1 6 2) 1 0.001)\n    (check-within (candidate 5 4 6 7 1 8) 2 0.001)\n    (check-within (candidate 7 6 2 3 3 4) 1 0.001)\n    (check-within (candidate 7 6 2 1 2 6) 1 0.001)\n    (check-within (candidate 5 8 6 5 6 1) 2 0.001)\n    (check-within (candidate 6 2 6 7 5 4) 2 0.001)\n    (check-within (candidate 7 5 4 4 7 4) 1 0.001)\n    (check-within (candidate 6 1 4 4 2 2) 1 0.001)\n    (check-within (candidate 3 4 1 8 3 7) 1 0.001)\n    (check-within (candidate 7 7 1 6 3 1) 2 0.001)\n    (check-within (candidate 6 8 2 2 3 5) 2 0.001)\n    (check-within (candidate 5 5 3 7 5 3) 1 0.001)\n    (check-within (candidate 7 3 5 3 8 5) 2 0.001)\n    (check-within (candidate 7 4 1 4 7 8) 1 0.001)\n    (check-within (candidate 6 3 7 3 4 4) 2 0.001)\n    (check-within (candidate 1 4 6 7 4 4) 1 0.001)\n    (check-within (candidate 4 5 6 8 2 1) 2 0.001)\n    (check-within (candidate 5 6 5 7 8 3) 2 0.001)\n    (check-within (candidate 5 1 8 2 1 3) 2 0.001)\n    (check-within (candidate 1 2 8 3 2 2) 1 0.001)\n    (check-within (candidate 1 7 5 5 4 3) 2 0.001)\n    (check-within (candidate 4 3 7 8 1 5) 2 0.001)\n    (check-within (candidate 8 7 6 8 6 1) 2 0.001)\n    (check-within (candidate 4 3 4 7 7 6) 2 0.001)\n    (check-within (candidate 8 4 6 6 2 1) 2 0.001)\n    (check-within (candidate 8 2 6 4 1 4) 2 0.001)\n    (check-within (candidate 3 5 3 2 1 4) 1 0.001)\n    (check-within (candidate 3 6 1 3 3 7) 1 0.001)\n    (check-within (candidate 1 1 7 6 4 3) 1 0.001)\n    (check-within (candidate 1 8 7 2 6 1) 1 0.001)\n    (check-within (candidate 5 8 4 5 7 4) 2 0.001)\n    (check-within (candidate 8 3 8 8 5 3) 1 0.001)\n    (check-within (candidate 7 2 8 1 4 3) 2 0.001)\n    (check-within (candidate 3 5 8 7 6 1) 2 0.001)\n    (check-within (candidate 5 5 2 2 1 1) 1 0.001)\n    (check-within (candidate 1 8 8 4 4 7) 2 0.001)\n    (check-within (candidate 3 6 7 6 8 8) 2 0.001)\n    (check-within (candidate 5 6 3 7 3 6) 1 0.001)\n    (check-within (candidate 1 5 3 4 7 4) 2 0.001)\n    (check-within (candidate 5 6 2 2 5 8) 1 0.001)\n    (check-within (candidate 7 3 2 6 3 4) 2 0.001)\n    (check-within (candidate 5 4 6 5 5 8) 1 0.001)\n    (check-within (candidate 1 1 2 4 5 4) 2 0.001)\n    (check-within (candidate 4 5 5 4 2 4) 2 0.001)\n    (check-within (candidate 6 5 6 2 2 2) 2 0.001)\n    (check-within (candidate 1 5 4 2 8 1) 2 0.001)\n    (check-within (candidate 1 1 2 5 8 1) 1 0.001)\n    (check-within (candidate 4 8 3 8 8 5) 2 0.001)\n    (check-within (candidate 1 8 4 7 5 6) 1 0.001)\n    (check-within (candidate 5 5 3 6 8 8) 2 0.001)\n    (check-within (candidate 1 2 3 1 2 4) 2 0.001)\n    (check-within (candidate 1 8 6 3 2 8) 1 0.001)\n    (check-within (candidate 6 1 8 8 7 3) 2 0.001)\n    (check-within (candidate 7 8 6 1 4 2) 2 0.001)\n    (check-within (candidate 1 6 4 2 8 5) 2 0.001)\n    (check-within (candidate 1 4 2 5 5 4) 1 0.001)\n    (check-within (candidate 4 4 3 2 6 7) 2 0.001)\n    (check-within (candidate 8 3 6 7 4 6) 2 0.001)\n    (check-within (candidate 2 5 1 1 8 4) 2 0.001)\n    (check-within (candidate 7 8 1 4 5 1) 2 0.001)\n    (check-within (candidate 5 5 2 1 1 1) 2 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3271_countOfPairs", "language": "rkt", "prompt": "#lang racket\n;; You are given three positive integers n, x, and y.\n;; In a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\n;; For each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\n;; Return a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\n;; Note that x and y can be equal.\n;; Example 1:\n;; Input: n = 3, x = 1, y = 3\n;; Output: [6,0,0]\n;; Explanation: Let's look at each pair of houses:\n;; - For the pair (1, 2), we can go from house 1 to house 2 directly.\n;; - For the pair (2, 1), we can go from house 2 to house 1 directly.\n;; - For the pair (1, 3), we can go from house 1 to house 3 directly.\n;; - For the pair (3, 1), we can go from house 3 to house 1 directly.\n;; - For the pair (2, 3), we can go from house 2 to house 3 directly.\n;; - For the pair (3, 2), we can go from house 3 to house 2 directly.\n;; Example 2:\n;; Input: n = 5, x = 2, y = 4\n;; Output: [10,8,2,0,0]\n;; Explanation: For each distance k the pairs are:\n;; - For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).\n;; - For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).\n;; - For k == 3, the pairs are (1, 5), and (5, 1).\n;; - For k == 4 and k == 5, there are no pairs.\n;; Example 3:\n;; Input: n = 4, x = 1, y = 1\n;; Output: [6,4,2,0]\n;; Explanation: For each distance k the pairs are:\n;; - For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).\n;; - For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).\n;; - For k == 3, the pairs are (1, 4), and (4, 1).\n;; - For k == 4, there are no pairs.\n;; Constraints:\n;; 2 <= n <= 100\n;; 1 <= x, y <= n\n(define (countOfPairs n x y)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3271_countOfPairs.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate countOfPairs))\n    (check-within (candidate 3 1 3) (list 6 0 0) 0.001)\n    (check-within (candidate 5 2 4) (list 10 8 2 0 0) 0.001)\n    (check-within (candidate 4 1 1) (list 6 4 2 0) 0.001)\n    (check-within (candidate 2 1 1) (list 2 0) 0.001)\n    (check-within (candidate 2 1 2) (list 2 0) 0.001)\n    (check-within (candidate 2 2 1) (list 2 0) 0.001)\n    (check-within (candidate 2 2 2) (list 2 0) 0.001)\n    (check-within (candidate 3 1 1) (list 4 2 0) 0.001)\n    (check-within (candidate 3 1 2) (list 4 2 0) 0.001)\n    (check-within (candidate 3 2 1) (list 4 2 0) 0.001)\n    (check-within (candidate 3 2 2) (list 4 2 0) 0.001)\n    (check-within (candidate 3 2 3) (list 4 2 0) 0.001)\n    (check-within (candidate 3 3 1) (list 6 0 0) 0.001)\n    (check-within (candidate 3 3 2) (list 4 2 0) 0.001)\n    (check-within (candidate 3 3 3) (list 4 2 0) 0.001)\n    (check-within (candidate 4 1 2) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 1 3) (list 8 4 0 0) 0.001)\n    (check-within (candidate 4 1 4) (list 8 4 0 0) 0.001)\n    (check-within (candidate 4 2 1) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 2 2) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 2 3) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 2 4) (list 8 4 0 0) 0.001)\n    (check-within (candidate 4 3 1) (list 8 4 0 0) 0.001)\n    (check-within (candidate 4 3 2) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 3 3) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 3 4) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 4 1) (list 8 4 0 0) 0.001)\n    (check-within (candidate 4 4 2) (list 8 4 0 0) 0.001)\n    (check-within (candidate 4 4 3) (list 6 4 2 0) 0.001)\n    (check-within (candidate 4 4 4) (list 6 4 2 0) 0.001)\n    (check-within (candidate 5 1 1) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 1 2) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 1 3) (list 10 6 4 0 0) 0.001)\n    (check-within (candidate 5 1 4) (list 10 8 2 0 0) 0.001)\n    (check-within (candidate 5 1 5) (list 10 10 0 0 0) 0.001)\n    (check-within (candidate 5 2 1) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 2 2) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 2 3) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 2 5) (list 10 8 2 0 0) 0.001)\n    (check-within (candidate 5 3 1) (list 10 6 4 0 0) 0.001)\n    (check-within (candidate 5 3 2) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 3 3) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 3 4) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 3 5) (list 10 6 4 0 0) 0.001)\n    (check-within (candidate 5 4 1) (list 10 8 2 0 0) 0.001)\n    (check-within (candidate 5 4 2) (list 10 8 2 0 0) 0.001)\n    (check-within (candidate 5 4 3) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 4 4) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 4 5) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 5 1) (list 10 10 0 0 0) 0.001)\n    (check-within (candidate 5 5 2) (list 10 8 2 0 0) 0.001)\n    (check-within (candidate 5 5 3) (list 10 6 4 0 0) 0.001)\n    (check-within (candidate 5 5 4) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 5 5 5) (list 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 1 1) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 1 2) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 1 3) (list 12 8 6 4 0 0) 0.001)\n    (check-within (candidate 6 1 4) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 1 5) (list 12 14 4 0 0 0) 0.001)\n    (check-within (candidate 6 1 6) (list 12 12 6 0 0 0) 0.001)\n    (check-within (candidate 6 2 1) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 2 2) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 2 5) (list 12 12 6 0 0 0) 0.001)\n    (check-within (candidate 6 2 6) (list 12 14 4 0 0 0) 0.001)\n    (check-within (candidate 6 3 1) (list 12 8 6 4 0 0) 0.001)\n    (check-within (candidate 6 3 2) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 3 3) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 3 4) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 3 5) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 3 6) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 4 1) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 4 2) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 4 3) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 4 4) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 4 6) (list 12 8 6 4 0 0) 0.001)\n    (check-within (candidate 6 5 1) (list 12 14 4 0 0 0) 0.001)\n    (check-within (candidate 6 5 2) (list 12 12 6 0 0 0) 0.001)\n    (check-within (candidate 6 5 3) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 5 4) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 5 5) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 5 6) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 6 1) (list 12 12 6 0 0 0) 0.001)\n    (check-within (candidate 6 6 2) (list 12 14 4 0 0 0) 0.001)\n    (check-within (candidate 6 6 3) (list 12 10 6 2 0 0) 0.001)\n    (check-within (candidate 6 6 4) (list 12 8 6 4 0 0) 0.001)\n    (check-within (candidate 6 6 5) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 6 6 6) (list 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 7 1 2) (list 12 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 7 1 3) (list 14 10 8 6 4 0 0) 0.001)\n    (check-within (candidate 7 1 4) (list 14 12 8 6 2 0 0) 0.001)\n    (check-within (candidate 7 1 5) (list 14 16 8 4 0 0 0) 0.001)\n    (check-within (candidate 7 1 6) (list 14 16 10 2 0 0 0) 0.001)\n    (check-within (candidate 7 1 7) (list 14 14 14 0 0 0 0) 0.001)\n    (check-within (candidate 7 2 1) (list 12 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 7 2 2) (list 12 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 7 2 3) (list 12 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 7 2 7) (list 14 16 10 2 0 0 0) 0.001)\n    (check-within (candidate 7 3 1) (list 14 10 8 6 4 0 0) 0.001)\n    (check-within (candidate 7 3 2) (list 12 10 8 6 4 2 0) 0.001)\n    (check-within (candidate 7 3 3) (list 12 10 8 6 4 2 0) 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3275_minimumPushes", "language": "rkt", "prompt": "#lang racket\n;; You are given a string word containing distinct lowercase English letters.\n;; Telephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" .\n;; It is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word.\n;; Return the minimum number of pushes needed to type word after remapping the keys.\n;; An example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.\n;; Example 1:\n;; Input: word = \"abcde\"\n;; Output: 5\n;; Explanation: The remapped keypad given in the image provides the minimum cost.\n;; \"a\" -> one push on key 2\n;; \"b\" -> one push on key 3\n;; \"c\" -> one push on key 4\n;; \"d\" -> one push on key 5\n;; \"e\" -> one push on key 6\n;; Total cost is 1 + 1 + 1 + 1 + 1 = 5.\n;; It can be shown that no other mapping can provide a lower cost.\n;; Example 2:\n;; Input: word = \"xycdefghij\"\n;; Output: 12\n;; Explanation: The remapped keypad given in the image provides the minimum cost.\n;; \"x\" -> one push on key 2\n;; \"y\" -> two pushes on key 2\n;; \"c\" -> one push on key 3\n;; \"d\" -> two pushes on key 3\n;; \"e\" -> one push on key 4\n;; \"f\" -> one push on key 5\n;; \"g\" -> one push on key 6\n;; \"h\" -> one push on key 7\n;; \"i\" -> one push on key 8\n;; \"j\" -> one push on key 9\n;; Total cost is 1 + 2 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = 12.\n;; It can be shown that no other mapping can provide a lower cost.\n;; Constraints:\n;; 1 <= word.length <= 26\n;; word consists of lowercase English letters.\n;; All letters in word are distinct.\n(define (minimumPushes word)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3275_minimumPushes.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimumPushes))\n    (check-within (candidate abcde) 5 0.001)\n    (check-within (candidate xycdefghij) 12 0.001)\n    (check-within (candidate b) 1 0.001)\n    (check-within (candidate d) 1 0.001)\n    (check-within (candidate e) 1 0.001)\n    (check-within (candidate f) 1 0.001)\n    (check-within (candidate g) 1 0.001)\n    (check-within (candidate h) 1 0.001)\n    (check-within (candidate i) 1 0.001)\n    (check-within (candidate k) 1 0.001)\n    (check-within (candidate n) 1 0.001)\n    (check-within (candidate o) 1 0.001)\n    (check-within (candidate q) 1 0.001)\n    (check-within (candidate u) 1 0.001)\n    (check-within (candidate v) 1 0.001)\n    (check-within (candidate w) 1 0.001)\n    (check-within (candidate x) 1 0.001)\n    (check-within (candidate bc) 2 0.001)\n    (check-within (candidate cu) 2 0.001)\n    (check-within (candidate dl) 2 0.001)\n    (check-within (candidate dn) 2 0.001)\n    (check-within (candidate ev) 2 0.001)\n    (check-within (candidate gn) 2 0.001)\n    (check-within (candidate gq) 2 0.001)\n    (check-within (candidate hu) 2 0.001)\n    (check-within (candidate jr) 2 0.001)\n    (check-within (candidate ln) 2 0.001)\n    (check-within (candidate lz) 2 0.001)\n    (check-within (candidate mv) 2 0.001)\n    (check-within (candidate mw) 2 0.001)\n    (check-within (candidate sw) 2 0.001)\n    (check-within (candidate wz) 2 0.001)\n    (check-within (candidate amw) 3 0.001)\n    (check-within (candidate bco) 3 0.001)\n    (check-within (candidate btx) 3 0.001)\n    (check-within (candidate cgp) 3 0.001)\n    (check-within (candidate cjq) 3 0.001)\n    (check-within (candidate clu) 3 0.001)\n    (check-within (candidate clx) 3 0.001)\n    (check-within (candidate crs) 3 0.001)\n    (check-within (candidate csz) 3 0.001)\n    (check-within (candidate dfp) 3 0.001)\n    (check-within (candidate htv) 3 0.001)\n    (check-within (candidate iwz) 3 0.001)\n    (check-within (candidate kux) 3 0.001)\n    (check-within (candidate nsv) 3 0.001)\n    (check-within (candidate svz) 3 0.001)\n    (check-within (candidate cfos) 4 0.001)\n    (check-within (candidate demr) 4 0.001)\n    (check-within (candidate dimo) 4 0.001)\n    (check-within (candidate dnpt) 4 0.001)\n    (check-within (candidate dorz) 4 0.001)\n    (check-within (candidate fgkn) 4 0.001)\n    (check-within (candidate fimn) 4 0.001)\n    (check-within (candidate hior) 4 0.001)\n    (check-within (candidate jkpy) 4 0.001)\n    (check-within (candidate jluv) 4 0.001)\n    (check-within (candidate knpv) 4 0.001)\n    (check-within (candidate kopu) 4 0.001)\n    (check-within (candidate lmpt) 4 0.001)\n    (check-within (candidate ltuw) 4 0.001)\n    (check-within (candidate qwxz) 4 0.001)\n    (check-within (candidate abhoz) 5 0.001)\n    (check-within (candidate aejwx) 5 0.001)\n    (check-within (candidate agjnr) 5 0.001)\n    (check-within (candidate aikmu) 5 0.001)\n    (check-within (candidate ajkmv) 5 0.001)\n    (check-within (candidate cflvx) 5 0.001)\n    (check-within (candidate dhstu) 5 0.001)\n    (check-within (candidate djmnx) 5 0.001)\n    (check-within (candidate dlovx) 5 0.001)\n    (check-within (candidate eglqy) 5 0.001)\n    (check-within (candidate ejntw) 5 0.001)\n    (check-within (candidate ekrsz) 5 0.001)\n    (check-within (candidate fopuz) 5 0.001)\n    (check-within (candidate jlnvz) 5 0.001)\n    (check-within (candidate jnstu) 5 0.001)\n    (check-within (candidate afikno) 6 0.001)\n    (check-within (candidate almsyz) 6 0.001)\n    (check-within (candidate bcehov) 6 0.001)\n    (check-within (candidate bdmprt) 6 0.001)\n    (check-within (candidate bfhmnu) 6 0.001)\n    (check-within (candidate bfhpty) 6 0.001)\n    (check-within (candidate bfjstu) 6 0.001)\n    (check-within (candidate cdfjmw) 6 0.001)\n    (check-within (candidate dfilps) 6 0.001)\n    (check-within (candidate dmswyz) 6 0.001)\n    (check-within (candidate dpqruw) 6 0.001)\n    (check-within (candidate fhmprz) 6 0.001)\n    (check-within (candidate gjqrvy) 6 0.001)\n    (check-within (candidate ijopsv) 6 0.001)\n    (check-within (candidate lmqrtz) 6 0.001)\n    (check-within (candidate bxnqpha) 7 0.001)\n    (check-within (candidate ekbfqat) 7 0.001)\n    (check-within (candidate esoizcx) 7 0.001)\n    (check-within (candidate fmteczo) 7 0.001)\n    (check-within (candidate lrywetm) 7 0.001)\n    (check-within (candidate lvbornx) 7 0.001)\n    (check-within (candidate pesmonc) 7 0.001)\n    (check-within (candidate pudymjw) 7 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
{"name": "LeetCodeContests_3291_canSortArray", "language": "rkt", "prompt": "#lang racket\n;; You are given a 0-indexed array of positive integers nums.\n;; In one operation, you can swap any two adjacent elements if they have the same number of set bits. You are allowed to do this operation any number of times (including zero).\n;; Return true if you can sort the array, else return false.\n;; Example 1:\n;; Input: nums = [8,4,2,30,15]\n;; Output: true\n;; Explanation: Let's look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \"10\", \"100\", and \"1000\" respectively. The numbers 15 and 30 have four set bits each with binary representation \"1111\" and \"11110\".\n;; We can sort the array using 4 operations:\n;; - Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n;; - Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n;; - Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n;; - Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\n;; The array has become sorted, hence we return true.\n;; Note that there may be other sequences of operations which also sort the array.\n;; Example 2:\n;; Input: nums = [1,2,3,4,5]\n;; Output: true\n;; Explanation: The array is already sorted, hence we return true.\n;; Example 3:\n;; Input: nums = [3,16,8,4,2]\n;; Output: false\n;; Explanation: It can be shown that it is not possible to sort the input array using any number of operations.\n;; Constraints:\n;; 1 <= nums.length <= 100\n;; 1 <= nums[i] <= 28\n(define (canSortArray nums)\n", "doctests": "keep", "original": "/home/elleven/code/MultiPL-E/datasets/../datasets/leetcode-all/LeetCodeContests_3291_canSortArray.py", "prompt_terminology": "verbatim", "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate canSortArray))\n    (check-within (candidate (list 8 4 2 30 15)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1)) #t 0.001)\n    (check-within (candidate (list 4)) #t 0.001)\n    (check-within (candidate (list 3 16 8 4 2)) #f 0.001)\n    (check-within (candidate (list 7)) #t 0.001)\n    (check-within (candidate (list 10)) #t 0.001)\n    (check-within (candidate (list 20 16)) #f 0.001)\n    (check-within (candidate (list 18)) #t 0.001)\n    (check-within (candidate (list 21 17)) #f 0.001)\n    (check-within (candidate (list 30)) #t 0.001)\n    (check-within (candidate (list 26 10)) #f 0.001)\n    (check-within (candidate (list 1 2)) #t 0.001)\n    (check-within (candidate (list 2 28 9)) #f 0.001)\n    (check-within (candidate (list 2 17)) #t 0.001)\n    (check-within (candidate (list 18 3 8)) #f 0.001)\n    (check-within (candidate (list 31 18 23)) #f 0.001)\n    (check-within (candidate (list 75 34 30)) #f 0.001)\n    (check-within (candidate (list 107 76 52)) #f 0.001)\n    (check-within (candidate (list 125 92 159)) #f 0.001)\n    (check-within (candidate (list 136 256 10)) #f 0.001)\n    (check-within (candidate (list 160 247 127)) #f 0.001)\n    (check-within (candidate (list 187 4 32)) #f 0.001)\n    (check-within (candidate (list 197 171 144)) #f 0.001)\n    (check-within (candidate (list 214 200 176)) #f 0.001)\n    (check-within (candidate (list 222 191 39)) #f 0.001)\n    (check-within (candidate (list 24 12)) #t 0.001)\n    (check-within (candidate (list 225 163 64)) #f 0.001)\n    (check-within (candidate (list 128 128)) #t 0.001)\n    (check-within (candidate (list 229 253 127)) #f 0.001)\n    (check-within (candidate (list 1 2 3)) #t 0.001)\n    (check-within (candidate (list 1 256 64)) #t 0.001)\n    (check-within (candidate (list 6 6 192)) #t 0.001)\n    (check-within (candidate (list 239 83 71)) #f 0.001)\n    (check-within (candidate (list 6 96 20)) #t 0.001)\n    (check-within (candidate (list 247 153 90)) #f 0.001)\n    (check-within (candidate (list 256 255 255)) #f 0.001)\n    (check-within (candidate (list 1 201 251 191)) #f 0.001)\n    (check-within (candidate (list 4 157 191 127)) #f 0.001)\n    (check-within (candidate (list 8 8 2)) #t 0.001)\n    (check-within (candidate (list 10 34 130)) #t 0.001)\n    (check-within (candidate (list 12 19 1 11)) #f 0.001)\n    (check-within (candidate (list 10 91 127)) #t 0.001)\n    (check-within (candidate (list 15 8 21 25)) #f 0.001)\n    (check-within (candidate (list 17 25 4 27)) #f 0.001)\n    (check-within (candidate (list 10 130 206)) #t 0.001)\n    (check-within (candidate (list 14 183 251)) #t 0.001)\n    (check-within (candidate (list 29 20 17 4)) #f 0.001)\n    (check-within (candidate (list 15 147 174)) #t 0.001)\n    (check-within (candidate (list 16 245 125)) #t 0.001)\n    (check-within (candidate (list 32 12 25 19)) #f 0.001)\n    (check-within (candidate (list 22 21 26)) #t 0.001)\n    (check-within (candidate (list 23 30 32)) #t 0.001)\n    (check-within (candidate (list 24 72 160)) #t 0.001)\n    (check-within (candidate (list 33 223 239)) #t 0.001)\n    (check-within (candidate (list 35 143 127 254)) #f 0.001)\n    (check-within (candidate (list 55 147 16 8)) #f 0.001)\n    (check-within (candidate (list 34 52 104)) #t 0.001)\n    (check-within (candidate (list 100 104 96 144)) #f 0.001)\n    (check-within (candidate (list 129 70 126 253)) #f 0.001)\n    (check-within (candidate (list 129 162 158 253)) #f 0.001)\n    (check-within (candidate (list 145 127 55 43)) #f 0.001)\n    (check-within (candidate (list 36 177 244)) #t 0.001)\n    (check-within (candidate (list 159 111 124 233)) #f 0.001)\n    (check-within (candidate (list 36 213 236)) #t 0.001)\n    (check-within (candidate (list 175 231 27 92)) #f 0.001)\n    (check-within (candidate (list 205 234 127 223)) #f 0.001)\n    (check-within (candidate (list 215 10 8 256)) #f 0.001)\n    (check-within (candidate (list 223 127 172 210)) #f 0.001)\n    (check-within (candidate (list 38 221 224)) #t 0.001)\n    (check-within (candidate (list 41 14 50)) #t 0.001)\n    (check-within (candidate (list 41 79 239)) #t 0.001)\n    (check-within (candidate (list 44 124 247)) #t 0.001)\n    (check-within (candidate (list 225 201 121 103)) #f 0.001)\n    (check-within (candidate (list 232 45 175 231)) #f 0.001)\n    (check-within (candidate (list 250 131 50 46)) #f 0.001)\n    (check-within (candidate (list 254 249 173 163)) #f 0.001)\n    (check-within (candidate (list 255 255 214 229)) #f 0.001)\n    (check-within (candidate (list 256 151 141 15)) #f 0.001)\n    (check-within (candidate (list 47 205 182)) #t 0.001)\n    (check-within (candidate (list 48 64 251)) #t 0.001)\n    (check-within (candidate (list 51 253 254)) #t 0.001)\n    (check-within (candidate (list 53 172 195)) #t 0.001)\n    (check-within (candidate (list 57 127 251)) #t 0.001)\n    (check-within (candidate (list 4 98 210 79 254)) #f 0.001)\n    (check-within (candidate (list 59 31 236)) #t 0.001)\n    (check-within (candidate (list 8 5 103 247 235)) #f 0.001)\n    (check-within (candidate (list 8 74 170 254 132)) #f 0.001)\n    (check-within (candidate (list 8 148 182 62 255)) #f 0.001)\n    (check-within (candidate (list 62 153 210)) #t 0.001)\n    (check-within (candidate (list 64 93 253)) #t 0.001)\n    (check-within (candidate (list 9 28 18 26 11)) #f 0.001)\n    (check-within (candidate (list 12 208 240 216 139)) #f 0.001)\n    (check-within (candidate (list 13 21 23 13 32)) #f 0.001)\n    (check-within (candidate (list 16 24 13 46 156)) #f 0.001)\n    (check-within (candidate (list 16 192 71 31 239)) #f 0.001)\n    (check-within (candidate (list 64 195 203)) #t 0.001)\n    (check-within (candidate (list 65 254 239)) #t 0.001)\n    (check-within (candidate (list 17 11 5 20 8)) #f 0.001)\n    (check-within (candidate (list 23 12 22 29 20)) #f 0.001)\n))\n\n(test-humaneval)", "stop_tokens": ["\n(define ", "\n#|", "\n;", "\n("]}
