{"name": "HumanEval_0_has_close_elements", "language": "elixir", "prompt": "# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# False\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# True\n\n\ndefmodule HumanEval do\n  def has_close_elements(n, u, m, b, e, r, s, ,,  , t, h, r, e, s, h, o, l, d) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_0_has_close_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"has_close_elements\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :has_close_elements end)\n    candidate = fn args -> apply(HumanEval, has_close_elements, args) end\n    assert true == candidate.([[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3])\n    assert false == candidate.([[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05])\n    assert true == candidate.([[1.0, 2.0, 5.9, 4.0, 5.0], 0.95])\n    assert false == candidate.([[1.0, 2.0, 5.9, 4.0, 5.0], 0.8])\n    assert true == candidate.([[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1])\n    assert true == candidate.([[1.1, 2.2, 3.1, 4.1, 5.1], 1.0])\n    assert false == candidate.([[1.1, 2.2, 3.1, 4.1, 5.1], 0.5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_100_make_a_pile", "language": "elixir", "prompt": "# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n\n\ndefmodule HumanEval do\n  def make_a_pile(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_100_make_a_pile.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"make_a_pile\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :make_a_pile end)\n    candidate = fn args -> apply(HumanEval, make_a_pile, args) end\n    assert [3, 5, 7] == candidate.([3])\n    assert [4, 6, 8, 10] == candidate.([4])\n    assert [5, 7, 9, 11, 13] == candidate.([5])\n    assert [6, 8, 10, 12, 14, 16] == candidate.([6])\n    assert [8, 10, 12, 14, 16, 18, 20, 22] == candidate.([8])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_101_words_string", "language": "elixir", "prompt": "# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n\ndefmodule HumanEval do\n  def words_string(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_101_words_string.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"words_string\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :words_string end)\n    candidate = fn args -> apply(HumanEval, words_string, args) end\n    assert [\"Hi\", \"my\", \"name\", \"is\", \"John\"] == candidate.([\"Hi, my name is John\"])\n    assert [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] == candidate.([\"One, two, three, four, five, six\"])\n    assert [\"Hi\", \"my\", \"name\"] == candidate.([\"Hi, my name\"])\n    assert [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] == candidate.([\"One,, two, three, four, five, six,\"])\n    assert [] == candidate.([\"\"])\n    assert [\"ahmed\", \"gamal\"] == candidate.([\"ahmed     , gamal\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_102_choose_num", "language": "elixir", "prompt": "# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# choose_num(12, 15) = 14\n# choose_num(13, 12) = -1\n\n\ndefmodule HumanEval do\n  def choose_num(x, ,,  , y) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_102_choose_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"choose_num\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :choose_num end)\n    candidate = fn args -> apply(HumanEval, choose_num, args) end\n    assert 14 == candidate.([12, 15])\n    assert -1 == candidate.([13, 12])\n    assert 12354 == candidate.([33, 12354])\n    assert -1 == candidate.([5234, 5233])\n    assert 28 == candidate.([6, 29])\n    assert -1 == candidate.([27, 10])\n    assert -1 == candidate.([7, 7])\n    assert 546 == candidate.([546, 546])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_103_rounded_avg", "language": "elixir", "prompt": "# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7, 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\n\n\ndefmodule HumanEval do\n  def rounded_avg(n, ,,  , m) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_103_rounded_avg.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"rounded_avg\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :rounded_avg end)\n    candidate = fn args -> apply(HumanEval, rounded_avg, args) end\n    assert \"0b11\" == candidate.([1, 5])\n    assert \"0b1010\" == candidate.([7, 13])\n    assert \"0b1111001010\" == candidate.([964, 977])\n    assert \"0b1111100100\" == candidate.([996, 997])\n    assert \"0b1011000010\" == candidate.([560, 851])\n    assert \"0b101101110\" == candidate.([185, 546])\n    assert \"0b110101101\" == candidate.([362, 496])\n    assert \"0b1001110010\" == candidate.([350, 902])\n    assert \"0b11010111\" == candidate.([197, 233])\n    assert -1 == candidate.([7, 5])\n    assert -1 == candidate.([5, 1])\n    assert \"0b101\" == candidate.([5, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_104_unique_digits", "language": "elixir", "prompt": "# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\n\ndefmodule HumanEval do\n  def unique_digits(x) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_104_unique_digits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"unique_digits\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :unique_digits end)\n    candidate = fn args -> apply(HumanEval, unique_digits, args) end\n    assert [1, 15, 33] == candidate.([[15, 33, 1422, 1]])\n    assert [] == candidate.([[152, 323, 1422, 10]])\n    assert [111, 151] == candidate.([[12345, 2033, 111, 151]])\n    assert [31, 135] == candidate.([[135, 103, 31]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_105_by_length", "language": "elixir", "prompt": "# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# arr = []\n# return []\n# If the array has any strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n# -> reverse arr -> [55, 1, -1]\n# return = ['One']\n\n\ndefmodule HumanEval do\n  def by_length(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_105_by_length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"by_length\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :by_length end)\n    candidate = fn args -> apply(HumanEval, by_length, args) end\n    assert [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] == candidate.([[2, 1, 1, 4, 5, 8, 2, 3]])\n    assert [] == candidate.([[]])\n    assert [\"One\"] == candidate.([[1, -1, 55]])\n    assert [\"Three\", \"Two\", \"One\"] == candidate.([[1, -1, 3, 2]])\n    assert [\"Nine\", \"Eight\", \"Four\"] == candidate.([[9, 4, 8]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_106_f", "language": "elixir", "prompt": "# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# f(5) == [1, 2, 6, 24, 15]\n\n\ndefmodule HumanEval do\n  def f(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_106_f.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"f\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :f end)\n    candidate = fn args -> apply(HumanEval, f, args) end\n    assert [1, 2, 6, 24, 15] == candidate.([5])\n    assert [1, 2, 6, 24, 15, 720, 28] == candidate.([7])\n    assert [1] == candidate.([1])\n    assert [1, 2, 6] == candidate.([3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_107_even_odd_palindrome", "language": "elixir", "prompt": "# Given a positive integer n, return a tuple that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# Input: 3\n# Output: (1, 2)\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# Input: 12\n# Output: (4, 6)\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned tuple has the number of even and odd integer palindromes respectively.\n\n\ndefmodule HumanEval do\n  def even_odd_palindrome(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"even_odd_palindrome\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :even_odd_palindrome end)\n    candidate = fn args -> apply(HumanEval, even_odd_palindrome, args) end\n    assert {8, 13} == candidate.([123])\n    assert {4, 6} == candidate.([12])\n    assert {1, 2} == candidate.([3])\n    assert {6, 8} == candidate.([63])\n    assert {5, 6} == candidate.([25])\n    assert {4, 6} == candidate.([19])\n    assert {4, 5} == candidate.([9])\n    assert {0, 1} == candidate.([1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_108_count_nums", "language": "elixir", "prompt": "# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n# >>> count_nums([1, 1, 2]) == 3\n\n\ndefmodule HumanEval do\n  def count_nums(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_108_count_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"count_nums\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :count_nums end)\n    candidate = fn args -> apply(HumanEval, count_nums, args) end\n    assert 0 == candidate.([[]])\n    assert 0 == candidate.([[-1, -2, 0]])\n    assert 6 == candidate.([[1, 1, 2, -2, 3, 4, 5]])\n    assert 5 == candidate.([[1, 6, 9, -6, 0, 1, 5]])\n    assert 4 == candidate.([[1, 100, 98, -7, 1, -1]])\n    assert 5 == candidate.([[12, 23, 34, -45, -56, 0]])\n    assert 1 == candidate.([[0, 1]])\n    assert 1 == candidate.([[1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_109_move_one_ball", "language": "elixir", "prompt": "# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return True else return False.\n# If the given array is empty then return True.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# move_one_ball([3, 4, 5, 1, 2])==>True\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# move_one_ball([3, 5, 4, 1, 2])==>False\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n\n\ndefmodule HumanEval do\n  def move_one_ball(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_109_move_one_ball.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"move_one_ball\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :move_one_ball end)\n    candidate = fn args -> apply(HumanEval, move_one_ball, args) end\n    assert true == candidate.([[3, 4, 5, 1, 2]])\n    assert true == candidate.([[3, 5, 10, 1, 2]])\n    assert false == candidate.([[4, 3, 1, 2]])\n    assert false == candidate.([[3, 5, 4, 1, 2]])\n    assert true == candidate.([[]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_10_make_palindrome", "language": "elixir", "prompt": "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n# 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\n\n\ndefmodule HumanEval do\n  def make_palindrome(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_10_make_palindrome.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"make_palindrome\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :make_palindrome end)\n    candidate = fn args -> apply(HumanEval, make_palindrome, args) end\n    assert \"\" == candidate.([\"\"])\n    assert \"x\" == candidate.([\"x\"])\n    assert \"xyzyx\" == candidate.([\"xyz\"])\n    assert \"xyx\" == candidate.([\"xyx\"])\n    assert \"jerryrrej\" == candidate.([\"jerry\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_110_exchange", "language": "elixir", "prompt": "# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n# exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n# It is assumed that the input lists will be non-empty.\n\n\ndefmodule HumanEval do\n  def exchange(l, s, t, 1, ,,  , l, s, t, 2) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_110_exchange.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"exchange\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :exchange end)\n    candidate = fn args -> apply(HumanEval, exchange, args) end\n    assert \"YES\" == candidate.([[1, 2, 3, 4], [1, 2, 3, 4]])\n    assert \"NO\" == candidate.([[1, 2, 3, 4], [1, 5, 3, 4]])\n    assert \"YES\" == candidate.([[1, 2, 3, 4], [2, 1, 4, 3]])\n    assert \"YES\" == candidate.([[5, 7, 3], [2, 6, 4]])\n    assert \"NO\" == candidate.([[5, 7, 3], [2, 6, 3]])\n    assert \"NO\" == candidate.([[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]])\n    assert \"YES\" == candidate.([[100, 200], [200, 200]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_111_histogram", "language": "elixir", "prompt": "# Given a string representing a space separated lowercase letters, return a dictionary\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n\n\ndefmodule HumanEval do\n  def histogram(t, e, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_111_histogram.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"histogram\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :histogram end)\n    candidate = fn args -> apply(HumanEval, histogram, args) end\n    assert %{\"a\" => 2, \"b\" => 2} == candidate.([\"a b b a\"])\n    assert %{\"a\" => 2, \"b\" => 2} == candidate.([\"a b c a b\"])\n    assert %{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1} == candidate.([\"a b c d g\"])\n    assert %{\"r\" => 1, \"t\" => 1, \"g\" => 1} == candidate.([\"r t g\"])\n    assert %{\"b\" => 4} == candidate.([\"b b b b a\"])\n    assert %{\"r\" => 1, \"t\" => 1, \"g\" => 1} == candidate.([\"r t g\"])\n    assert %{} == candidate.([\"\"])\n    assert %{\"a\" => 1} == candidate.([\"a\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_112_reverse_delete", "language": "elixir", "prompt": "# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a tuple containing the result string and True/False for the check.\n# Example\n# For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n# For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n# For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\n\ndefmodule HumanEval do\n  def reverse_delete(s, ,,  , c) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_112_reverse_delete.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"reverse_delete\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :reverse_delete end)\n    candidate = fn args -> apply(HumanEval, reverse_delete, args) end\n    assert {\"bcd\", false} == candidate.([\"abcde\", \"ae\"])\n    assert {\"acdef\", false} == candidate.([\"abcdef\", \"b\"])\n    assert {\"cdedc\", true} == candidate.([\"abcdedcba\", \"ab\"])\n    assert {\"dik\", false} == candidate.([\"dwik\", \"w\"])\n    assert {\"\", true} == candidate.([\"a\", \"a\"])\n    assert {\"abcdedcba\", true} == candidate.([\"abcdedcba\", \"\"])\n    assert {\"abcdedcba\", true} == candidate.([\"abcdedcba\", \"v\"])\n    assert {\"abba\", true} == candidate.([\"vabba\", \"v\"])\n    assert {\"\", true} == candidate.([\"mamma\", \"mia\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_113_odd_count", "language": "elixir", "prompt": "# Given a list of strings, where each string consists of only digits, return a list.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count(['1234567'])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count(['3',\"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n# \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\n\ndefmodule HumanEval do\n  def odd_count(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_113_odd_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"odd_count\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :odd_count end)\n    candidate = fn args -> apply(HumanEval, odd_count, args) end\n    assert [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"] == candidate.([[\"1234567\"]])\n    assert [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] == candidate.([[\"3\", \"11111111\"]])\n    assert [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"] == candidate.([[\"271\", \"137\", \"314\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_114_minSubArraySum", "language": "elixir", "prompt": "# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n# minSubArraySum([-1, -2, -3]) == -6\n\n\ndefmodule HumanEval do\n  def minSubArraySum(n, u, m, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"minSubArraySum\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :minSubArraySum end)\n    candidate = fn args -> apply(HumanEval, minSubArraySum, args) end\n    assert 1 == candidate.([[2, 3, 4, 1, 2, 4]])\n    assert -6 == candidate.([[-1, -2, -3]])\n    assert -14 == candidate.([[-1, -2, -3, 2, -10]])\n    assert -9999999999999999 == candidate.([[-9999999999999999]])\n    assert 0 == candidate.([[0, 10, 20, 1000000]])\n    assert -6 == candidate.([[-1, -2, -3, 10, -5]])\n    assert -6 == candidate.([[100, -1, -2, -3, 10, -5]])\n    assert 3 == candidate.([[10, 11, 13, 8, 3, 4]])\n    assert -33 == candidate.([[100, -33, 32, -1, 0, -2]])\n    assert -10 == candidate.([[-10]])\n    assert 7 == candidate.([[7]])\n    assert -1 == candidate.([[1, -1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_115_max_fill", "language": "elixir", "prompt": "# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# Input: \n# grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n# bucket_capacity : 1\n# Output: 6\n# Example 2:\n# Input: \n# grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n# bucket_capacity : 2\n# Output: 5\n# Example 3:\n# Input: \n# grid : [[0,0,0], [0,0,0]]\n# bucket_capacity : 5\n# Output: 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n\n\ndefmodule HumanEval do\n  def max_fill(g, r, i, d, ,,  , c, a, p, a, c, i, t, y) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_115_max_fill.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"max_fill\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :max_fill end)\n    candidate = fn args -> apply(HumanEval, max_fill, args) end\n    assert 6 == candidate.([[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1])\n    assert 5 == candidate.([[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2])\n    assert 0 == candidate.([[[0, 0, 0], [0, 0, 0]], 5])\n    assert 4 == candidate.([[[1, 1, 1, 1], [1, 1, 1, 1]], 2])\n    assert 2 == candidate.([[[1, 1, 1, 1], [1, 1, 1, 1]], 9])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_116_sort_array", "language": "elixir", "prompt": "# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\n\ndefmodule HumanEval do\n  def sort_array(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_116_sort_array.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sort_array\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sort_array end)\n    candidate = fn args -> apply(HumanEval, sort_array, args) end\n    assert [1, 2, 4, 3, 5] == candidate.([[1, 5, 2, 3, 4]])\n    assert [-4, -2, -6, -5, -3] == candidate.([[-2, -3, -4, -5, -6]])\n    assert [0, 1, 2, 4, 3] == candidate.([[1, 0, 2, 3, 4]])\n    assert [] == candidate.([[]])\n    assert [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77] == candidate.([[2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]])\n    assert [32, 3, 5, 6, 12, 44] == candidate.([[3, 6, 44, 12, 32, 5]])\n    assert [2, 4, 8, 16, 32] == candidate.([[2, 4, 8, 16, 32]])\n    assert [2, 4, 8, 16, 32] == candidate.([[2, 4, 8, 16, 32]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_117_select_words", "language": "elixir", "prompt": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\n\ndefmodule HumanEval do\n  def select_words(s, ,,  , n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_117_select_words.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"select_words\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :select_words end)\n    candidate = fn args -> apply(HumanEval, select_words, args) end\n    assert [\"little\"] == candidate.([\"Mary had a little lamb\", 4])\n    assert [\"Mary\", \"lamb\"] == candidate.([\"Mary had a little lamb\", 3])\n    assert [] == candidate.([\"simple white space\", 2])\n    assert [\"world\"] == candidate.([\"Hello world\", 4])\n    assert [\"Uncle\"] == candidate.([\"Uncle sam\", 3])\n    assert [] == candidate.([\"\", 4])\n    assert [\"b\", \"c\", \"d\", \"f\"] == candidate.([\"a b c d e f\", 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_118_get_closest_vowel", "language": "elixir", "prompt": "# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# get_closest_vowel(\"yogurt\") ==> \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\") ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\n\n\ndefmodule HumanEval do\n  def get_closest_vowel(w, o, r, d) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"get_closest_vowel\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :get_closest_vowel end)\n    candidate = fn args -> apply(HumanEval, get_closest_vowel, args) end\n    assert \"u\" == candidate.([\"yogurt\"])\n    assert \"u\" == candidate.([\"full\"])\n    assert \"\" == candidate.([\"easy\"])\n    assert \"\" == candidate.([\"eAsy\"])\n    assert \"\" == candidate.([\"ali\"])\n    assert \"a\" == candidate.([\"bad\"])\n    assert \"o\" == candidate.([\"most\"])\n    assert \"\" == candidate.([\"ab\"])\n    assert \"\" == candidate.([\"ba\"])\n    assert \"\" == candidate.([\"quick\"])\n    assert \"i\" == candidate.([\"anime\"])\n    assert \"\" == candidate.([\"Asia\"])\n    assert \"o\" == candidate.([\"Above\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_119_match_parens", "language": "elixir", "prompt": "# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# match_parens(['()(', ')']) == 'Yes'\n# match_parens([')', ')']) == 'No'\n\n\ndefmodule HumanEval do\n  def match_parens(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_119_match_parens.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"match_parens\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :match_parens end)\n    candidate = fn args -> apply(HumanEval, match_parens, args) end\n    assert \"Yes\" == candidate.([[\"()(\", \")\"]])\n    assert \"No\" == candidate.([[\")\", \")\"]])\n    assert \"No\" == candidate.([[\"(()(())\", \"())())\"]])\n    assert \"Yes\" == candidate.([[\")())\", \"(()()(\"]])\n    assert \"Yes\" == candidate.([[\"(())))\", \"(()())((\"]])\n    assert \"No\" == candidate.([[\"()\", \"())\"]])\n    assert \"Yes\" == candidate.([[\"(()(\", \"()))()\"]])\n    assert \"No\" == candidate.([[\"((((\", \"((())\"]])\n    assert \"No\" == candidate.([[\")(()\", \"(()(\"]])\n    assert \"No\" == candidate.([[\")(\", \")(\"]])\n    assert \"Yes\" == candidate.([[\"(\", \")\"]])\n    assert \"Yes\" == candidate.([[\")\", \"(\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_11_string_xor", "language": "elixir", "prompt": "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor('010', '110')\n# '100'\n\n\ndefmodule HumanEval do\n  def string_xor(a, ,,  , b) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_11_string_xor.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"string_xor\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :string_xor end)\n    candidate = fn args -> apply(HumanEval, string_xor, args) end\n    assert \"010010\" == candidate.([\"111000\", \"101010\"])\n    assert \"0\" == candidate.([\"1\", \"1\"])\n    assert \"0101\" == candidate.([\"0101\", \"0000\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_120_maximum", "language": "elixir", "prompt": "# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\n\ndefmodule HumanEval do\n  def maximum(a, r, r, ,,  , k) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_120_maximum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"maximum\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :maximum end)\n    candidate = fn args -> apply(HumanEval, maximum, args) end\n    assert [-4, -3, 5] == candidate.([[-3, -4, 5], 3])\n    assert [4, 4] == candidate.([[4, -4, 4], 2])\n    assert [2] == candidate.([[-3, 2, 1, 2, -1, -2, 1], 1])\n    assert [2, 20, 123] == candidate.([[123, -123, 20, 0, 1, 2, -3], 3])\n    assert [0, 1, 2, 20] == candidate.([[-123, 20, 0, 1, 2, -3], 4])\n    assert [-13, -8, 0, 0, 3, 5, 15] == candidate.([[5, 15, 0, 3, -13, -8, 0], 7])\n    assert [3, 5] == candidate.([[-1, 0, 2, 5, 3, -10], 2])\n    assert [5] == candidate.([[1, 0, 5, -7], 1])\n    assert [-4, 4] == candidate.([[4, -4], 2])\n    assert [-10, 10] == candidate.([[-10, 10], 2])\n    assert [] == candidate.([[1, 2, 3, -23, 243, -400, 0], 0])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_121_solution", "language": "elixir", "prompt": "# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==> 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\n\n\ndefmodule HumanEval do\n  def solution(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_121_solution.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"solution\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :solution end)\n    candidate = fn args -> apply(HumanEval, solution, args) end\n    assert 12 == candidate.([[5, 8, 7, 1]])\n    assert 9 == candidate.([[3, 3, 3, 3, 3]])\n    assert 0 == candidate.([[30, 13, 24, 321]])\n    assert 5 == candidate.([[5, 9]])\n    assert 0 == candidate.([[2, 4, 8]])\n    assert 23 == candidate.([[30, 13, 23, 32]])\n    assert 3 == candidate.([[3, 13, 2, 9]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_122_add_elements", "language": "elixir", "prompt": "# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output: 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n\n\ndefmodule HumanEval do\n  def add_elements(a, r, r, ,,  , k) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_122_add_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"add_elements\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :add_elements end)\n    candidate = fn args -> apply(HumanEval, add_elements, args) end\n    assert -4 == candidate.([[1, -2, -3, 41, 57, 76, 87, 88, 99], 3])\n    assert 0 == candidate.([[111, 121, 3, 4000, 5, 6], 2])\n    assert 125 == candidate.([[11, 21, 3, 90, 5, 6, 7, 8, 9], 4])\n    assert 24 == candidate.([[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4])\n    assert 1 == candidate.([[1], 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_123_get_odd_collatz", "language": "elixir", "prompt": "# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\n\ndefmodule HumanEval do\n  def get_odd_collatz(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"get_odd_collatz\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :get_odd_collatz end)\n    candidate = fn args -> apply(HumanEval, get_odd_collatz, args) end\n    assert [1, 5, 7, 11, 13, 17] == candidate.([14])\n    assert [1, 5] == candidate.([5])\n    assert [1, 3, 5] == candidate.([12])\n    assert [1] == candidate.([1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_124_valid_date", "language": "elixir", "prompt": "# You have to write a function which validates a given date string and\n# returns True if the date is valid otherwise False.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012') => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') => True\n# valid_date('06/04/2020') => False\n\n\ndefmodule HumanEval do\n  def valid_date(d, a, t, e) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_124_valid_date.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"valid_date\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :valid_date end)\n    candidate = fn args -> apply(HumanEval, valid_date, args) end\n    assert true == candidate.([\"03-11-2000\"])\n    assert false == candidate.([\"15-01-2012\"])\n    assert false == candidate.([\"04-0-2040\"])\n    assert true == candidate.([\"06-04-2020\"])\n    assert true == candidate.([\"01-01-2007\"])\n    assert false == candidate.([\"03-32-2011\"])\n    assert false == candidate.([\"\"])\n    assert false == candidate.([\"04-31-3000\"])\n    assert true == candidate.([\"06-06-2005\"])\n    assert false == candidate.([\"21-31-2000\"])\n    assert true == candidate.([\"04-12-2003\"])\n    assert false == candidate.([\"04122003\"])\n    assert false == candidate.([\"20030412\"])\n    assert false == candidate.([\"2003-04\"])\n    assert false == candidate.([\"2003-04-12\"])\n    assert false == candidate.([\"04-2003\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_125_split_words", "language": "elixir", "prompt": "# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"abcdef\") == 3\n\n\ndefmodule HumanEval do\n  def split_words(t, x, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_125_split_words.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"split_words\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :split_words end)\n    candidate = fn args -> apply(HumanEval, split_words, args) end\n    assert [\"Hello\", \"world!\"] == candidate.([\"Hello world!\"])\n    assert [\"Hello\", \"world!\"] == candidate.([\"Hello,world!\"])\n    assert [\"Hello\", \"world,!\"] == candidate.([\"Hello world,!\"])\n    assert [\"Hello,Hello,world\", \"!\"] == candidate.([\"Hello,Hello,world !\"])\n    assert 3 == candidate.([\"abcdef\"])\n    assert 2 == candidate.([\"aaabb\"])\n    assert 1 == candidate.([\"aaaBb\"])\n    assert 0 == candidate.([\"\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_126_is_sorted", "language": "elixir", "prompt": "# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return False. Assume no negative numbers and only integers.\n# Examples\n# is_sorted([5]) \u279e True\n# is_sorted([1, 2, 3, 4, 5]) \u279e True\n# is_sorted([1, 3, 2, 4, 5]) \u279e False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n# is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n# is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\n\ndefmodule HumanEval do\n  def is_sorted(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_126_is_sorted.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_sorted\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_sorted end)\n    candidate = fn args -> apply(HumanEval, is_sorted, args) end\n    assert true == candidate.([[5]])\n    assert true == candidate.([[1, 2, 3, 4, 5]])\n    assert false == candidate.([[1, 3, 2, 4, 5]])\n    assert true == candidate.([[1, 2, 3, 4, 5, 6]])\n    assert true == candidate.([[1, 2, 3, 4, 5, 6, 7]])\n    assert false == candidate.([[1, 3, 2, 4, 5, 6, 7]])\n    assert true == candidate.([[]])\n    assert true == candidate.([[1]])\n    assert false == candidate.([[3, 2, 1]])\n    assert false == candidate.([[1, 2, 2, 2, 3, 4]])\n    assert false == candidate.([[1, 2, 3, 3, 3, 4]])\n    assert true == candidate.([[1, 2, 2, 3, 3, 4]])\n    assert true == candidate.([[1, 2, 3, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_127_intersection", "language": "elixir", "prompt": "# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# intersection((1, 2), (2, 3)) ==> \"NO\"\n# intersection((-1, 1), (0, 4)) ==> \"NO\"\n# intersection((-3, -1), (-5, 5)) ==> \"YES\"\n\n\ndefmodule HumanEval do\n  def intersection(i, n, t, e, r, v, a, l, 1, ,,  , i, n, t, e, r, v, a, l, 2) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_127_intersection.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"intersection\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :intersection end)\n    candidate = fn args -> apply(HumanEval, intersection, args) end\n    assert \"NO\" == candidate.([{1, 2}, {2, 3}])\n    assert \"NO\" == candidate.([{-1, 1}, {0, 4}])\n    assert \"YES\" == candidate.([{-3, -1}, {-5, 5}])\n    assert \"YES\" == candidate.([{-2, 2}, {-4, 0}])\n    assert \"NO\" == candidate.([{-11, 2}, {-1, -1}])\n    assert \"NO\" == candidate.([{1, 2}, {3, 5}])\n    assert \"NO\" == candidate.([{1, 2}, {1, 2}])\n    assert \"NO\" == candidate.([{-2, -2}, {-3, -2}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_128_prod_signs", "language": "elixir", "prompt": "# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0, 1]) == 0\n# >>> prod_signs([]) == None\n\n\ndefmodule HumanEval do\n  def prod_signs(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_128_prod_signs.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"prod_signs\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :prod_signs end)\n    candidate = fn args -> apply(HumanEval, prod_signs, args) end\n    assert -9 == candidate.([[1, 2, 2, -4]])\n    assert 0 == candidate.([[0, 1]])\n    assert -10 == candidate.([[1, 1, 1, 2, 3, -1, 1]])\n    assert nil == candidate.([[]])\n    assert 20 == candidate.([[2, 4, 1, 2, -1, -1, 9]])\n    assert 4 == candidate.([[-1, 1, -1, 1]])\n    assert -4 == candidate.([[-1, 1, 1, 1]])\n    assert 0 == candidate.([[-1, 1, 1, 0]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_129_minPath", "language": "elixir", "prompt": "# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:\n# Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n# Output: [1, 2, 1]\n# Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n# Output: [1]\n\n\ndefmodule HumanEval do\n  def minPath(g, r, i, d, ,,  , k) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_129_minPath.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"minPath\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :minPath end)\n    candidate = fn args -> apply(HumanEval, minPath, args) end\n    assert [1, 2, 1] == candidate.([[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3])\n    assert [1] == candidate.([[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1])\n    assert [1, 2, 1, 2] == candidate.([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4])\n    assert [1, 10, 1, 10, 1, 10, 1] == candidate.([[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7])\n    assert [1, 7, 1, 7, 1] == candidate.([[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5])\n    assert [1, 6, 1, 6, 1, 6, 1, 6, 1] == candidate.([[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9])\n    assert [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6] == candidate.([[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12])\n    assert [1, 3, 1, 3, 1, 3, 1, 3] == candidate.([[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8])\n    assert [1, 5, 1, 5, 1, 5, 1, 5] == candidate.([[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8])\n    assert [1, 2, 1, 2, 1, 2, 1, 2, 1, 2] == candidate.([[[1, 2], [3, 4]], 10])\n    assert [1, 3, 1, 3, 1, 3, 1, 3, 1, 3] == candidate.([[[1, 3], [3, 2]], 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_12_longest", "language": "elixir", "prompt": "# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b', 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n\n\ndefmodule HumanEval do\n  def longest(s, t, r, i, n, g, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_12_longest.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"longest\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :longest end)\n    candidate = fn args -> apply(HumanEval, longest, args) end\n    assert nil == candidate.([[]])\n    assert \"x\" == candidate.([[\"x\", \"y\", \"z\"]])\n    assert \"zzzz\" == candidate.([[\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_130_tri", "language": "elixir", "prompt": "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1, 3, 2, 8]\n\n\ndefmodule HumanEval do\n  def tri(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_130_tri.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"tri\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :tri end)\n    candidate = fn args -> apply(HumanEval, tri, args) end\n    assert [1, 3, 2, 8] == candidate.([3])\n    assert [1, 3, 2, 8, 3] == candidate.([4])\n    assert [1, 3, 2, 8, 3, 15] == candidate.([5])\n    assert [1, 3, 2, 8, 3, 15, 4] == candidate.([6])\n    assert [1, 3, 2, 8, 3, 15, 4, 24] == candidate.([7])\n    assert [1, 3, 2, 8, 3, 15, 4, 24, 5] == candidate.([8])\n    assert [1, 3, 2, 8, 3, 15, 4, 24, 5, 35] == candidate.([9])\n    assert [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11] == candidate.([20])\n    assert [1] == candidate.([0])\n    assert [1, 3] == candidate.([1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_131_digits", "language": "elixir", "prompt": "# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  == 1\n# digits(4)  == 0\n# digits(235) == 15\n\n\ndefmodule HumanEval do\n  def digits(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_131_digits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"digits\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :digits end)\n    candidate = fn args -> apply(HumanEval, digits, args) end\n    assert 5 == candidate.([5])\n    assert 5 == candidate.([54])\n    assert 1 == candidate.([120])\n    assert 5 == candidate.([5014])\n    assert 315 == candidate.([98765])\n    assert 2625 == candidate.([5576543])\n    assert 0 == candidate.([2468])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_132_is_nested", "language": "elixir", "prompt": "# Create a function that takes a string as input which contains only square brackets.\n# The function should return True if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# is_nested('[[]]') \u279e True\n# is_nested('[]]]]]]][[[[[]') \u279e False\n# is_nested('[][]') \u279e False\n# is_nested('[]') \u279e False\n# is_nested('[[][]]') \u279e True\n# is_nested('[[]][[') \u279e True\n\n\ndefmodule HumanEval do\n  def is_nested(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_132_is_nested.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_nested\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_nested end)\n    candidate = fn args -> apply(HumanEval, is_nested, args) end\n    assert true == candidate.([\"[[]]\"])\n    assert false == candidate.([\"[]]]]]]][[[[[]\"])\n    assert false == candidate.([\"[][]\"])\n    assert false == candidate.([\"[]\"])\n    assert true == candidate.([\"[[[[]]]]\"])\n    assert false == candidate.([\"[]]]]]]]]]]\"])\n    assert true == candidate.([\"[][][[]]\"])\n    assert false == candidate.([\"[[]\"])\n    assert false == candidate.([\"[]]\"])\n    assert true == candidate.([\"[[]][[\"])\n    assert true == candidate.([\"[[][]]\"])\n    assert false == candidate.([\"\"])\n    assert false == candidate.([\"[[[[[[[[\"])\n    assert false == candidate.([\"]]]]]]]]\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_133_sum_squares", "language": "elixir", "prompt": "# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# For lst = [1,2,3] the output should be 14\n# For lst = [1,4,9] the output should be 98\n# For lst = [1,3,5,7] the output should be 84\n# For lst = [1.4,4.2,0] the output should be 29\n# For lst = [-2.4,1,1] the output should be 6\n\n\ndefmodule HumanEval do\n  def sum_squares(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_133_sum_squares.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sum_squares\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sum_squares end)\n    candidate = fn args -> apply(HumanEval, sum_squares, args) end\n    assert 14 == candidate.([[1.0, 2.0, 3.0]])\n    assert 14 == candidate.([[1.0, 2.0, 3.0]])\n    assert 84 == candidate.([[1.0, 3.0, 5.0, 7.0]])\n    assert 29 == candidate.([[1.4, 4.2, 0.0]])\n    assert 6 == candidate.([[-2.4, 1.0, 1.0]])\n    assert 10230 == candidate.([[100.0, 1.0, 15.0, 2.0]])\n    assert 200000000 == candidate.([[10000.0, 10000.0]])\n    assert 75 == candidate.([[-1.4, 4.6, 6.3]])\n    assert 1086 == candidate.([[-1.4, 17.9, 18.9, 19.9]])\n    assert 0 == candidate.([[0.0]])\n    assert 1 == candidate.([[-1.0]])\n    assert 2 == candidate.([[-1.0, 1.0, 0.0]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "elixir", "prompt": "# Create a function that returns True if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and False otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n# check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n# check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n# check_if_last_char_is_a_letter(\"\") \u279e False\n\n\ndefmodule HumanEval do\n  def check_if_last_char_is_a_letter(t, x, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"check_if_last_char_is_a_letter\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :check_if_last_char_is_a_letter end)\n    candidate = fn args -> apply(HumanEval, check_if_last_char_is_a_letter, args) end\n    assert false == candidate.([\"apple\"])\n    assert true == candidate.([\"apple pi e\"])\n    assert false == candidate.([\"eeeee\"])\n    assert true == candidate.([\"A\"])\n    assert false == candidate.([\"Pumpkin pie \"])\n    assert false == candidate.([\"Pumpkin pie 1\"])\n    assert false == candidate.([\"\"])\n    assert false == candidate.([\"eeeee e \"])\n    assert false == candidate.([\"apple pie\"])\n    assert false == candidate.([\"apple pi e \"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_135_can_arrange", "language": "elixir", "prompt": "# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# can_arrange([1,2,4,3,5]) = 3\n# can_arrange([1,2,3]) = -1\n\n\ndefmodule HumanEval do\n  def can_arrange(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_135_can_arrange.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"can_arrange\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :can_arrange end)\n    candidate = fn args -> apply(HumanEval, can_arrange, args) end\n    assert 3 == candidate.([[1, 2, 4, 3, 5]])\n    assert -1 == candidate.([[1, 2, 4, 5]])\n    assert 2 == candidate.([[1, 4, 2, 5, 6, 7, 8, 9, 10]])\n    assert 4 == candidate.([[4, 8, 5, 7, 3]])\n    assert -1 == candidate.([[]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_136_largest_smallest_integers", "language": "elixir", "prompt": "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# largest_smallest_integers([]) == (None, None)\n# largest_smallest_integers([0]) == (None, None)\n\n\ndefmodule HumanEval do\n  def largest_smallest_integers(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"largest_smallest_integers\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :largest_smallest_integers end)\n    candidate = fn args -> apply(HumanEval, largest_smallest_integers, args) end\n    assert {nil, 1} == candidate.([[2, 4, 1, 3, 5, 7]])\n    assert {nil, 1} == candidate.([[2, 4, 1, 3, 5, 7, 0]])\n    assert {-2, 1} == candidate.([[1, 3, 2, 4, 5, 6, -2]])\n    assert {-7, 2} == candidate.([[4, 5, 3, 6, 2, 7, -7]])\n    assert {-9, 2} == candidate.([[7, 3, 8, 4, 9, 2, 5, -9]])\n    assert {nil, nil} == candidate.([[]])\n    assert {nil, nil} == candidate.([[0]])\n    assert {-1, nil} == candidate.([[-1, -3, -5, -6]])\n    assert {-1, nil} == candidate.([[-1, -3, -5, -6, 0]])\n    assert {-3, 1} == candidate.([[-6, -4, -4, -3, 1]])\n    assert {-3, 1} == candidate.([[-6, -4, -4, -3, -100, 1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_137_compare_one", "language": "elixir", "prompt": "# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# compare_one(1, 2.5) \u279e 2.5\n# compare_one(1, \"2,3\") \u279e \"2,3\"\n# compare_one(\"5,1\", \"6\") \u279e \"6\"\n# compare_one(\"1\", 1) \u279e None\n\n\ndefmodule HumanEval do\n  def compare_one(a, ,,  , b) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_137_compare_one.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"compare_one\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :compare_one end)\n    candidate = fn args -> apply(HumanEval, compare_one, args) end\n    assert 2 == candidate.([1, 2])\n    assert 2.5 == candidate.([1, 2.5])\n    assert 3 == candidate.([2, 3])\n    assert 6 == candidate.([5, 6])\n    assert \"2,3\" == candidate.([1, \"2,3\"])\n    assert \"6\" == candidate.([\"5,1\", \"6\"])\n    assert \"2\" == candidate.([\"1\", \"2\"])\n    assert nil == candidate.([\"1\", 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_138_is_equal_to_sum_even", "language": "elixir", "prompt": "# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# is_equal_to_sum_even(4) == False\n# is_equal_to_sum_even(6) == False\n# is_equal_to_sum_even(8) == True\n\n\ndefmodule HumanEval do\n  def is_equal_to_sum_even(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_equal_to_sum_even\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_equal_to_sum_even end)\n    candidate = fn args -> apply(HumanEval, is_equal_to_sum_even, args) end\n    assert false == candidate.([4])\n    assert false == candidate.([6])\n    assert true == candidate.([8])\n    assert true == candidate.([10])\n    assert false == candidate.([11])\n    assert true == candidate.([12])\n    assert false == candidate.([13])\n    assert true == candidate.([16])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_139_special_factorial", "language": "elixir", "prompt": "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n\n\ndefmodule HumanEval do\n  def special_factorial(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_139_special_factorial.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"special_factorial\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :special_factorial end)\n    candidate = fn args -> apply(HumanEval, special_factorial, args) end\n    assert 288 == candidate.([4])\n    assert 34560 == candidate.([5])\n    assert 125411328000 == candidate.([7])\n    assert 1 == candidate.([1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_13_greatest_common_divisor", "language": "elixir", "prompt": "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\n\n\ndefmodule HumanEval do\n  def greatest_common_divisor(a, ,,  , b) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"greatest_common_divisor\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :greatest_common_divisor end)\n    candidate = fn args -> apply(HumanEval, greatest_common_divisor, args) end\n    assert 1 == candidate.([3, 7])\n    assert 5 == candidate.([10, 15])\n    assert 7 == candidate.([49, 14])\n    assert 12 == candidate.([144, 60])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_140_fix_spaces", "language": "elixir", "prompt": "# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# fix_spaces(\"Example\") == \"Example\"\n# fix_spaces(\"Example 1\") == \"Example_1\"\n# fix_spaces(\" Example 2\") == \"_Example_2\"\n# fix_spaces(\" Example   3\") == \"_Example-3\"\n\n\ndefmodule HumanEval do\n  def fix_spaces(t, e, x, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_140_fix_spaces.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"fix_spaces\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :fix_spaces end)\n    candidate = fn args -> apply(HumanEval, fix_spaces, args) end\n    assert \"Example\" == candidate.([\"Example\"])\n    assert \"Mudasir_Hanif_\" == candidate.([\"Mudasir Hanif \"])\n    assert \"Yellow_Yellow__Dirty__Fellow\" == candidate.([\"Yellow Yellow  Dirty  Fellow\"])\n    assert \"Exa-mple\" == candidate.([\"Exa   mple\"])\n    assert \"-Exa_1_2_2_mple\" == candidate.([\"   Exa 1 2 2 mple\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_141_file_name_check", "language": "elixir", "prompt": "# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n\ndefmodule HumanEval do\n  def file_name_check(f, i, l, e, _, n, a, m, e) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_141_file_name_check.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"file_name_check\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :file_name_check end)\n    candidate = fn args -> apply(HumanEval, file_name_check, args) end\n    assert \"Yes\" == candidate.([\"example.txt\"])\n    assert \"No\" == candidate.([\"1example.dll\"])\n    assert \"No\" == candidate.([\"s1sdf3.asd\"])\n    assert \"Yes\" == candidate.([\"K.dll\"])\n    assert \"Yes\" == candidate.([\"MY16FILE3.exe\"])\n    assert \"No\" == candidate.([\"His12FILE94.exe\"])\n    assert \"No\" == candidate.([\"_Y.txt\"])\n    assert \"No\" == candidate.([\"?aREYA.exe\"])\n    assert \"No\" == candidate.([\"/this_is_valid.dll\"])\n    assert \"No\" == candidate.([\"this_is_valid.wow\"])\n    assert \"Yes\" == candidate.([\"this_is_valid.txt\"])\n    assert \"No\" == candidate.([\"this_is_valid.txtexe\"])\n    assert \"No\" == candidate.([\"#this2_i4s_5valid.ten\"])\n    assert \"No\" == candidate.([\"@this1_is6_valid.exe\"])\n    assert \"No\" == candidate.([\"this_is_12valid.6exe4.txt\"])\n    assert \"No\" == candidate.([\"all.exe.txt\"])\n    assert \"Yes\" == candidate.([\"I563_No.exe\"])\n    assert \"Yes\" == candidate.([\"Is3youfault.txt\"])\n    assert \"Yes\" == candidate.([\"no_one#knows.dll\"])\n    assert \"No\" == candidate.([\"1I563_Yes3.exe\"])\n    assert \"No\" == candidate.([\"I563_Yes3.txtt\"])\n    assert \"No\" == candidate.([\"final..txt\"])\n    assert \"No\" == candidate.([\"final132\"])\n    assert \"No\" == candidate.([\"_f4indsartal132.\"])\n    assert \"No\" == candidate.([\".txt\"])\n    assert \"No\" == candidate.([\"s.\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_142_sum_squares", "language": "elixir", "prompt": "# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# For lst = [1,2,3] the output should be 6\n# For lst = []  the output should be 0\n# For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n\ndefmodule HumanEval do\n  def sum_squares(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_142_sum_squares.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sum_squares\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sum_squares end)\n    candidate = fn args -> apply(HumanEval, sum_squares, args) end\n    assert 6 == candidate.([[1, 2, 3]])\n    assert 14 == candidate.([[1, 4, 9]])\n    assert 0 == candidate.([[]])\n    assert 9 == candidate.([[1, 1, 1, 1, 1, 1, 1, 1, 1]])\n    assert -3 == candidate.([[-1, -1, -1, -1, -1, -1, -1, -1, -1]])\n    assert 0 == candidate.([[0]])\n    assert -126 == candidate.([[-1, -5, 2, -1, -5]])\n    assert 3030 == candidate.([[-56, -99, 1, 0, -2]])\n    assert 0 == candidate.([[-1, 0, 0, 0, 0, 0, 0, 0, -1]])\n    assert -14196 == candidate.([[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]])\n    assert -1448 == candidate.([[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_143_words_in_sentence", "language": "elixir", "prompt": "# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# Input: sentence = \"This is a test\"\n# Output: \"is\"\n# Example 2:\n# Input: sentence = \"lets go for swimming\"\n# Output: \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n\n\ndefmodule HumanEval do\n  def words_in_sentence(s, e, n, t, e, n, c, e) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"words_in_sentence\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :words_in_sentence end)\n    candidate = fn args -> apply(HumanEval, words_in_sentence, args) end\n    assert \"is\" == candidate.([\"This is a test\"])\n    assert \"go for\" == candidate.([\"lets go for swimming\"])\n    assert \"there is no place\" == candidate.([\"there is no place available here\"])\n    assert \"Hi am Hussein\" == candidate.([\"Hi I am Hussein\"])\n    assert \"go for it\" == candidate.([\"go for it\"])\n    assert \"\" == candidate.([\"here\"])\n    assert \"is\" == candidate.([\"here is\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_144_simplify", "language": "elixir", "prompt": "# Your task is to implement a function that will simplify the expression\n# x * n. The function returns True if x * n evaluates to a whole number and False\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# simplify(\"1/5\", \"5/1\") = True\n# simplify(\"1/6\", \"2/1\") = False\n# simplify(\"7/10\", \"10/2\") = False\n\n\ndefmodule HumanEval do\n  def simplify(x, ,,  , n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_144_simplify.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"simplify\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :simplify end)\n    candidate = fn args -> apply(HumanEval, simplify, args) end\n    assert true == candidate.([\"1/5\", \"5/1\"])\n    assert false == candidate.([\"1/6\", \"2/1\"])\n    assert true == candidate.([\"5/1\", \"3/1\"])\n    assert false == candidate.([\"7/10\", \"10/2\"])\n    assert true == candidate.([\"2/10\", \"50/10\"])\n    assert true == candidate.([\"7/2\", \"4/2\"])\n    assert true == candidate.([\"11/6\", \"6/1\"])\n    assert false == candidate.([\"2/3\", \"5/2\"])\n    assert false == candidate.([\"5/2\", \"3/5\"])\n    assert true == candidate.([\"2/4\", \"8/4\"])\n    assert true == candidate.([\"2/4\", \"4/2\"])\n    assert true == candidate.([\"1/5\", \"5/1\"])\n    assert false == candidate.([\"1/5\", \"1/5\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_145_order_by_points", "language": "elixir", "prompt": "# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n# >>> order_by_points([]) == []\n\n\ndefmodule HumanEval do\n  def order_by_points(n, u, m, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_145_order_by_points.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"order_by_points\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :order_by_points end)\n    candidate = fn args -> apply(HumanEval, order_by_points, args) end\n    assert [-1, -11, 1, -12, 11] == candidate.([[1, 11, -1, -11, -12]])\n    assert [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457] == candidate.([[1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]])\n    assert [] == candidate.([[]])\n    assert [-3, -32, -98, -11, 1, 2, 43, 54] == candidate.([[1, -11, -32, 43, 54, -98, 2, -3]])\n    assert [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9] == candidate.([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]])\n    assert [-76, -21, 0, 4, 23, 6, 6] == candidate.([[0, 6, 6, -76, -21, 23, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_146_specialFilter", "language": "elixir", "prompt": "# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# specialFilter([15, -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\n\ndefmodule HumanEval do\n  def specialFilter(n, u, m, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_146_specialFilter.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"specialFilter\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :specialFilter end)\n    candidate = fn args -> apply(HumanEval, specialFilter, args) end\n    assert 0 == candidate.([[5, -2, 1, -5]])\n    assert 1 == candidate.([[15, -73, 14, -15]])\n    assert 2 == candidate.([[33, -2, -3, 45, 21, 109]])\n    assert 4 == candidate.([[43, -12, 93, 125, 121, 109]])\n    assert 3 == candidate.([[71, -2, -33, 75, 21, 19]])\n    assert 0 == candidate.([[1]])\n    assert 0 == candidate.([[]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_147_get_max_triples", "language": "elixir", "prompt": "# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n\n\ndefmodule HumanEval do\n  def get_max_triples(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_147_get_max_triples.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"get_max_triples\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :get_max_triples end)\n    candidate = fn args -> apply(HumanEval, get_max_triples, args) end\n    assert 1 == candidate.([5])\n    assert 4 == candidate.([6])\n    assert 36 == candidate.([10])\n    assert 53361 == candidate.([100])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_148_bf", "language": "elixir", "prompt": "# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a tuple containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty tuple if planet1 or planet2\n# are not correct planet names. \n# Examples\n# bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n# bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n# bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n\ndefmodule HumanEval do\n  def bf(p, l, a, n, e, t, 1, ,,  , p, l, a, n, e, t, 2) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_148_bf.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"bf\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :bf end)\n    candidate = fn args -> apply(HumanEval, bf, args) end\n    assert {\"Saturn\", \"Uranus\"} == candidate.([\"Jupiter\", \"Neptune\"])\n    assert {\"Venus\"} == candidate.([\"Earth\", \"Mercury\"])\n    assert {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"} == candidate.([\"Mercury\", \"Uranus\"])\n    assert {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"} == candidate.([\"Neptune\", \"Venus\"])\n    assert {} == candidate.([\"Earth\", \"Earth\"])\n    assert {} == candidate.([\"Mars\", \"Earth\"])\n    assert {} == candidate.([\"Jupiter\", \"Makemake\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_149_sorted_list_sum", "language": "elixir", "prompt": "# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n# assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\n\ndefmodule HumanEval do\n  def sorted_list_sum(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sorted_list_sum\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sorted_list_sum end)\n    candidate = fn args -> apply(HumanEval, sorted_list_sum, args) end\n    assert [\"aa\"] == candidate.([[\"aa\", \"a\", \"aaa\"]])\n    assert [\"AI\", \"asdf\", \"school\"] == candidate.([[\"school\", \"AI\", \"asdf\", \"b\"]])\n    assert [] == candidate.([[\"d\", \"b\", \"c\", \"a\"]])\n    assert [\"abcd\", \"dcba\"] == candidate.([[\"d\", \"dcba\", \"abcd\", \"a\"]])\n    assert [\"AI\", \"ai\", \"au\"] == candidate.([[\"AI\", \"ai\", \"au\"]])\n    assert [] == candidate.([[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]])\n    assert [\"cc\", \"dd\", \"aaaa\", \"bbbb\"] == candidate.([[\"aaaa\", \"bbbb\", \"dd\", \"cc\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_14_all_prefixes", "language": "elixir", "prompt": "# Return list of all prefixes from shortest to longest of the input string\n# >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\n\n\ndefmodule HumanEval do\n  def all_prefixes(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_14_all_prefixes.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"all_prefixes\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :all_prefixes end)\n    candidate = fn args -> apply(HumanEval, all_prefixes, args) end\n    assert [] == candidate.([\"\"])\n    assert [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == candidate.([\"asdfgh\"])\n    assert [\"W\", \"WW\", \"WWW\"] == candidate.([\"WWW\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_150_x_or_y", "language": "elixir", "prompt": "# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# for x_or_y(7, 34, 12) == 34\n# for x_or_y(15, 8, 5) == 5\n\n\ndefmodule HumanEval do\n  def x_or_y(n, ,,  , x, ,,  , y) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_150_x_or_y.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"x_or_y\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :x_or_y end)\n    candidate = fn args -> apply(HumanEval, x_or_y, args) end\n    assert 34 == candidate.([7, 34, 12])\n    assert 5 == candidate.([15, 8, 5])\n    assert 33 == candidate.([3, 33, 5212])\n    assert 3 == candidate.([1259, 3, 52])\n    assert -1 == candidate.([7919, -1, 12])\n    assert 583 == candidate.([3609, 1245, 583])\n    assert 129 == candidate.([91, 56, 129])\n    assert 1234 == candidate.([6, 34, 1234])\n    assert 0 == candidate.([1, 2, 0])\n    assert 2 == candidate.([2, 2, 0])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_151_double_the_difference", "language": "elixir", "prompt": "# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1, -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0]) == 0  \n# If the input list is empty, return 0.\n\n\ndefmodule HumanEval do\n  def double_the_difference(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_151_double_the_difference.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"double_the_difference\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :double_the_difference end)\n    candidate = fn args -> apply(HumanEval, double_the_difference, args) end\n    assert 0 == candidate.([[]])\n    assert 25 == candidate.([[5.0, 4.0]])\n    assert 0 == candidate.([[0.1, 0.2, 0.3]])\n    assert 0 == candidate.([[-10.0, -20.0, -30.0]])\n    assert 0 == candidate.([[-1.0, -2.0, 8.0]])\n    assert 34 == candidate.([[0.2, 3.0, 5.0]])\n    assert 165 == candidate.([[-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_152_compare", "language": "elixir", "prompt": "# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\n\ndefmodule HumanEval do\n  def compare(g, a, m, e, ,,  , g, u, e, s, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_152_compare.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"compare\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :compare end)\n    candidate = fn args -> apply(HumanEval, compare, args) end\n    assert [0, 0, 0, 0, 3, 3] == candidate.([[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]])\n    assert [0, 0, 0, 0, 0, 0] == candidate.([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])\n    assert [2, 4, 6] == candidate.([[1, 2, 3], [-1, -2, -3]])\n    assert [2, 0, 0, 1] == candidate.([[1, 2, 3, 5], [-1, 2, 3, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_153_Strongest_Extension", "language": "elixir", "prompt": "# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\n\ndefmodule HumanEval do\n  def Strongest_Extension(c, l, a, s, s, _, n, a, m, e, ,,  , e, x, t, e, n, s, i, o, n, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"Strongest_Extension\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :Strongest_Extension end)\n    candidate = fn args -> apply(HumanEval, Strongest_Extension, args) end\n    assert \"Watashi.eIGHt8OKe\" == candidate.([\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]])\n    assert \"Boku123.YEs.WeCaNe\" == candidate.([\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]])\n    assert \"__YESIMHERE.NuLl__\" == candidate.([\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]])\n    assert \"K.TAR\" == candidate.([\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]])\n    assert \"__HAHA.123\" == candidate.([\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]])\n    assert \"YameRore.okIWILL123\" == candidate.([\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]])\n    assert \"finNNalLLly.WoW\" == candidate.([\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]])\n    assert \"_.Bb\" == candidate.([\"_\", [\"Bb\", \"91245\"]])\n    assert \"Sp.671235\" == candidate.([\"Sp\", [\"671235\", \"Bb\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_154_cycpattern_check", "language": "elixir", "prompt": "# You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n# cycpattern_check(\"abcd\",\"abd\") => False\n# cycpattern_check(\"hello\",\"ell\") => True\n# cycpattern_check(\"whassup\",\"psus\") => False\n# cycpattern_check(\"abab\",\"baa\") => True\n# cycpattern_check(\"efef\",\"eeff\") => False\n# cycpattern_check(\"himenss\",\"simen\") => True\n\n\ndefmodule HumanEval do\n  def cycpattern_check(a, ,,  , b) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"cycpattern_check\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :cycpattern_check end)\n    candidate = fn args -> apply(HumanEval, cycpattern_check, args) end\n    assert false == candidate.([\"xyzw\", \"xyw\"])\n    assert true == candidate.([\"yello\", \"ell\"])\n    assert false == candidate.([\"whattup\", \"ptut\"])\n    assert true == candidate.([\"efef\", \"fee\"])\n    assert false == candidate.([\"abab\", \"aabb\"])\n    assert true == candidate.([\"winemtt\", \"tinem\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_155_even_odd_count", "language": "elixir", "prompt": "# Given an integer. return a tuple that has the number of even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1, 1)\n# even_odd_count(123) ==> (1, 2)\n\n\ndefmodule HumanEval do\n  def even_odd_count(n, u, m) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_155_even_odd_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"even_odd_count\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :even_odd_count end)\n    candidate = fn args -> apply(HumanEval, even_odd_count, args) end\n    assert {0, 1} == candidate.([7])\n    assert {1, 1} == candidate.([-78])\n    assert {2, 2} == candidate.([3452])\n    assert {3, 3} == candidate.([346211])\n    assert {3, 3} == candidate.([-345821])\n    assert {1, 0} == candidate.([-2])\n    assert {2, 3} == candidate.([-45347])\n    assert {1, 0} == candidate.([0])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_156_int_to_mini_roman", "language": "elixir", "prompt": "# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n# >>> int_to_mini_roman(426) == 'cdxxvi'\n\n\ndefmodule HumanEval do\n  def int_to_mini_roman(n, u, m, b, e, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"int_to_mini_roman\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :int_to_mini_roman end)\n    candidate = fn args -> apply(HumanEval, int_to_mini_roman, args) end\n    assert \"xix\" == candidate.([19])\n    assert \"clii\" == candidate.([152])\n    assert \"ccli\" == candidate.([251])\n    assert \"cdxxvi\" == candidate.([426])\n    assert \"d\" == candidate.([500])\n    assert \"i\" == candidate.([1])\n    assert \"iv\" == candidate.([4])\n    assert \"xliii\" == candidate.([43])\n    assert \"xc\" == candidate.([90])\n    assert \"xciv\" == candidate.([94])\n    assert \"dxxxii\" == candidate.([532])\n    assert \"cm\" == candidate.([900])\n    assert \"cmxciv\" == candidate.([994])\n    assert \"m\" == candidate.([1000])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_157_right_angle_triangle", "language": "elixir", "prompt": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\n\n\ndefmodule HumanEval do\n  def right_angle_triangle(a, ,,  , b, ,,  , c) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"right_angle_triangle\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :right_angle_triangle end)\n    candidate = fn args -> apply(HumanEval, right_angle_triangle, args) end\n    assert true == candidate.([3, 4, 5])\n    assert false == candidate.([1, 2, 3])\n    assert true == candidate.([10, 6, 8])\n    assert false == candidate.([2, 2, 2])\n    assert true == candidate.([7, 24, 25])\n    assert false == candidate.([10, 5, 7])\n    assert true == candidate.([5, 12, 13])\n    assert true == candidate.([15, 8, 17])\n    assert true == candidate.([48, 55, 73])\n    assert false == candidate.([1, 1, 1])\n    assert false == candidate.([2, 2, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_158_find_max", "language": "elixir", "prompt": "# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# find_max([\"name\", \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\n\ndefmodule HumanEval do\n  def find_max(w, o, r, d, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_158_find_max.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"find_max\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :find_max end)\n    candidate = fn args -> apply(HumanEval, find_max, args) end\n    assert \"string\" == candidate.([[\"name\", \"of\", \"string\"]])\n    assert \"enam\" == candidate.([[\"name\", \"enam\", \"game\"]])\n    assert \"aaaaaaa\" == candidate.([[\"aaaaaaa\", \"bb\", \"cc\"]])\n    assert \"abc\" == candidate.([[\"abc\", \"cba\"]])\n    assert \"footbott\" == candidate.([[\"play\", \"this\", \"game\", \"of\", \"footbott\"]])\n    assert \"gonna\" == candidate.([[\"we\", \"are\", \"gonna\", \"rock\"]])\n    assert \"nation\" == candidate.([[\"we\", \"are\", \"a\", \"mad\", \"nation\"]])\n    assert \"this\" == candidate.([[\"this\", \"is\", \"a\", \"prrk\"]])\n    assert \"b\" == candidate.([[\"b\"]])\n    assert \"play\" == candidate.([[\"play\", \"play\", \"play\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_159_eat", "language": "elixir", "prompt": "# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n\n\ndefmodule HumanEval do\n  def eat(n, u, m, b, e, r, ,,  , n, e, e, d, ,,  , r, e, m, a, i, n, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_159_eat.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"eat\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :eat end)\n    candidate = fn args -> apply(HumanEval, eat, args) end\n    assert [11, 4] == candidate.([5, 6, 10])\n    assert [12, 1] == candidate.([4, 8, 9])\n    assert [11, 0] == candidate.([1, 10, 10])\n    assert [7, 0] == candidate.([2, 11, 5])\n    assert [9, 2] == candidate.([4, 5, 7])\n    assert [5, 0] == candidate.([4, 5, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_15_string_sequence", "language": "elixir", "prompt": "# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n# '0 1 2 3 4 5'\n\n\ndefmodule HumanEval do\n  def string_sequence(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_15_string_sequence.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"string_sequence\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :string_sequence end)\n    candidate = fn args -> apply(HumanEval, string_sequence, args) end\n    assert \"0\" == candidate.([0])\n    assert \"0 1 2 3\" == candidate.([3])\n    assert \"0 1 2 3 4 5 6 7 8 9 10\" == candidate.([10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_160_do_algebra", "language": "elixir", "prompt": "# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n\n\ndefmodule HumanEval do\n  def do_algebra(o, p, e, r, a, t, o, r, ,,  , o, p, e, r, a, n, d) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_160_do_algebra.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"do_algebra\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :do_algebra end)\n    candidate = fn args -> apply(HumanEval, do_algebra, args) end\n    assert 37 == candidate.([[\"**\", \"*\", \"+\"], [2, 3, 4, 5]])\n    assert 9 == candidate.([[\"+\", \"*\", \"-\"], [2, 3, 4, 5]])\n    assert 8 == candidate.([[\"//\", \"*\"], [7, 3, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_161_solve", "language": "elixir", "prompt": "# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n# solve(\"#a@C\") = \"#A@c\"\n\n\ndefmodule HumanEval do\n  def solve(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_161_solve.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"solve\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :solve end)\n    candidate = fn args -> apply(HumanEval, solve, args) end\n    assert \"aSdF\" == candidate.([\"AsDf\"])\n    assert \"4321\" == candidate.([\"1234\"])\n    assert \"AB\" == candidate.([\"ab\"])\n    assert \"#A@c\" == candidate.([\"#a@C\"])\n    assert \"#aSDFw^45\" == candidate.([\"#AsdfW^45\"])\n    assert \"2@6#\" == candidate.([\"#6@2\"])\n    assert \"#$A^d\" == candidate.([\"#$a^D\"])\n    assert \"#CCC\" == candidate.([\"#ccc\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_162_string_to_md5", "language": "elixir", "prompt": "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\n\ndefmodule HumanEval do\n  def string_to_md5(t, e, x, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_162_string_to_md5.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"string_to_md5\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :string_to_md5 end)\n    candidate = fn args -> apply(HumanEval, string_to_md5, args) end\n    assert \"3e25960a79dbc69b674cd4ec67a72c62\" == candidate.([\"Hello world\"])\n    assert nil == candidate.([\"\"])\n    assert \"0ef78513b0cb8cef12743f5aeb35f888\" == candidate.([\"A B C\"])\n    assert \"5f4dcc3b5aa765d61d8327deb882cf99\" == candidate.([\"password\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_163_generate_integers", "language": "elixir", "prompt": "# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# generate_integers(2, 8) => [2, 4, 6, 8]\n# generate_integers(8, 2) => [2, 4, 6, 8]\n# generate_integers(10, 14) => []\n\n\ndefmodule HumanEval do\n  def generate_integers(a, ,,  , b) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_163_generate_integers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"generate_integers\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :generate_integers end)\n    candidate = fn args -> apply(HumanEval, generate_integers, args) end\n    assert [2, 4, 6, 8] == candidate.([2, 10])\n    assert [2, 4, 6, 8] == candidate.([10, 2])\n    assert [2, 4, 6, 8] == candidate.([132, 2])\n    assert [] == candidate.([17, 89])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_16_count_distinct_characters", "language": "elixir", "prompt": "# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n# 4\n\n\ndefmodule HumanEval do\n  def count_distinct_characters(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"count_distinct_characters\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :count_distinct_characters end)\n    candidate = fn args -> apply(HumanEval, count_distinct_characters, args) end\n    assert 0 == candidate.([\"\"])\n    assert 5 == candidate.([\"abcde\"])\n    assert 5 == candidate.([\"abcdecadeCADE\"])\n    assert 1 == candidate.([\"aaaaAAAAaaaa\"])\n    assert 5 == candidate.([\"Jerry jERRY JeRRRY\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_17_parse_music", "language": "elixir", "prompt": "# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n\ndefmodule HumanEval do\n  def parse_music(m, u, s, i, c, _, s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_17_parse_music.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"parse_music\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :parse_music end)\n    candidate = fn args -> apply(HumanEval, parse_music, args) end\n    assert [] == candidate.([\"\"])\n    assert [4, 4, 4, 4] == candidate.([\"o o o o\"])\n    assert [1, 1, 1, 1] == candidate.([\".| .| .| .|\"])\n    assert [2, 2, 1, 1, 4, 4, 4, 4] == candidate.([\"o| o| .| .| o o o o\"])\n    assert [2, 1, 2, 1, 4, 2, 4, 2] == candidate.([\"o| .| o| .| o o| o o|\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_18_how_many_times", "language": "elixir", "prompt": "# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\n\ndefmodule HumanEval do\n  def how_many_times(s, t, r, i, n, g, ,,  , s, u, b, s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_18_how_many_times.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"how_many_times\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :how_many_times end)\n    candidate = fn args -> apply(HumanEval, how_many_times, args) end\n    assert 0 == candidate.([\"\", \"x\"])\n    assert 4 == candidate.([\"xyxyxyx\", \"x\"])\n    assert 4 == candidate.([\"cacacacac\", \"cac\"])\n    assert 1 == candidate.([\"john doe\", \"john\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_19_sort_numbers", "language": "elixir", "prompt": "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers('three one five')\n# 'one three five'\n\n\ndefmodule HumanEval do\n  def sort_numbers(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_19_sort_numbers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sort_numbers\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sort_numbers end)\n    candidate = fn args -> apply(HumanEval, sort_numbers, args) end\n    assert \"\" == candidate.([\"\"])\n    assert \"three\" == candidate.([\"three\"])\n    assert \"three five nine\" == candidate.([\"three five nine\"])\n    assert \"zero four five seven eight nine\" == candidate.([\"five zero four seven nine eight\"])\n    assert \"zero one two three four five six\" == candidate.([\"six five four three two one zero\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_1_separate_paren_groups", "language": "elixir", "prompt": "# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# ['()', '(())', '(()())']\n\n\ndefmodule HumanEval do\n  def separate_paren_groups(p, a, r, e, n, _, s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"separate_paren_groups\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :separate_paren_groups end)\n    candidate = fn args -> apply(HumanEval, separate_paren_groups, args) end\n    assert [\"(()())\", \"((()))\", \"()\", \"((())()())\"] == candidate.([\"(()()) ((())) () ((())()())\"])\n    assert [\"()\", \"(())\", \"((()))\", \"(((())))\"] == candidate.([\"() (()) ((())) (((())))\"])\n    assert [\"(()(())((())))\"] == candidate.([\"(()(())((())))\"])\n    assert [\"()\", \"(())\", \"(()())\"] == candidate.([\"( ) (( )) (( )( ))\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_20_find_closest_elements", "language": "elixir", "prompt": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# (2.0, 2.0)\n\n\ndefmodule HumanEval do\n  def find_closest_elements(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"find_closest_elements\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :find_closest_elements end)\n    candidate = fn args -> apply(HumanEval, find_closest_elements, args) end\n    assert {3.9, 4.0} == candidate.([[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]])\n    assert {5.0, 5.9} == candidate.([[1.0, 2.0, 5.9, 4.0, 5.0]])\n    assert {2.0, 2.2} == candidate.([[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]])\n    assert {2.0, 2.0} == candidate.([[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]])\n    assert {2.2, 3.1} == candidate.([[1.1, 2.2, 3.1, 4.1, 5.1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_21_rescale_to_unit", "language": "elixir", "prompt": "# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\n\n\ndefmodule HumanEval do\n  def rescale_to_unit(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"rescale_to_unit\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :rescale_to_unit end)\n    candidate = fn args -> apply(HumanEval, rescale_to_unit, args) end\n    assert [0.0, 1.0] == candidate.([[2.0, 49.9]])\n    assert [1.0, 0.0] == candidate.([[100.0, 49.9]])\n    assert [0.0, 0.25, 0.5, 0.75, 1.0] == candidate.([[1.0, 2.0, 3.0, 4.0, 5.0]])\n    assert [0.25, 0.0, 1.0, 0.5, 0.75] == candidate.([[2.0, 1.0, 5.0, 3.0, 4.0]])\n    assert [0.25, 0.0, 1.0, 0.5, 0.75] == candidate.([[12.0, 11.0, 15.0, 13.0, 14.0]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_22_filter_integers", "language": "elixir", "prompt": "# Filter given list of any python values only for integers\n# >>> filter_integers(['a', 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2, 3]\n\n\ndefmodule HumanEval do\n  def filter_integers(v, a, l, u, e, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_22_filter_integers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"filter_integers\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :filter_integers end)\n    candidate = fn args -> apply(HumanEval, filter_integers, args) end\n    assert [] == candidate.([[]])\n    assert [4, 9] == candidate.([[4, %{}, [], 23.2, 9, \"adasd\"]])\n    assert [3, 3, 3] == candidate.([[3, \"c\", 3, 3, \"a\", \"b\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_23_strlen", "language": "elixir", "prompt": "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n# 3\n\n\ndefmodule HumanEval do\n  def strlen(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_23_strlen.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"strlen\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :strlen end)\n    candidate = fn args -> apply(HumanEval, strlen, args) end\n    assert 0 == candidate.([\"\"])\n    assert 1 == candidate.([\"x\"])\n    assert 9 == candidate.([\"asdasnakj\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_24_largest_divisor", "language": "elixir", "prompt": "# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\n\n\ndefmodule HumanEval do\n  def largest_divisor(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_24_largest_divisor.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"largest_divisor\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :largest_divisor end)\n    candidate = fn args -> apply(HumanEval, largest_divisor, args) end\n    assert 1 == candidate.([3])\n    assert 1 == candidate.([7])\n    assert 5 == candidate.([10])\n    assert 50 == candidate.([100])\n    assert 7 == candidate.([49])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_25_factorize", "language": "elixir", "prompt": "# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\n\ndefmodule HumanEval do\n  def factorize(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_25_factorize.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"factorize\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :factorize end)\n    candidate = fn args -> apply(HumanEval, factorize, args) end\n    assert [2] == candidate.([2])\n    assert [2, 2] == candidate.([4])\n    assert [2, 2, 2] == candidate.([8])\n    assert [3, 19] == candidate.([57])\n    assert [3, 3, 19, 19] == candidate.([3249])\n    assert [3, 3, 3, 19, 19, 19] == candidate.([185193])\n    assert [3, 19, 19, 19] == candidate.([20577])\n    assert [2, 3, 3] == candidate.([18])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_26_remove_duplicates", "language": "elixir", "prompt": "# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n\n\ndefmodule HumanEval do\n  def remove_duplicates(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"remove_duplicates\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :remove_duplicates end)\n    candidate = fn args -> apply(HumanEval, remove_duplicates, args) end\n    assert [] == candidate.([[]])\n    assert [1, 2, 3, 4] == candidate.([[1, 2, 3, 4]])\n    assert [1, 4, 5] == candidate.([[1, 2, 3, 2, 4, 3, 5]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_27_flip_case", "language": "elixir", "prompt": "# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\n\n\ndefmodule HumanEval do\n  def flip_case(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_27_flip_case.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"flip_case\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :flip_case end)\n    candidate = fn args -> apply(HumanEval, flip_case, args) end\n    assert \"\" == candidate.([\"\"])\n    assert \"hELLO!\" == candidate.([\"Hello!\"])\n    assert \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" == candidate.([\"These violent delights have violent ends\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_28_concatenate", "language": "elixir", "prompt": "# Concatenate list of strings into a single string\n# >>> concatenate([])\n# ''\n# >>> concatenate(['a', 'b', 'c'])\n# 'abc'\n\n\ndefmodule HumanEval do\n  def concatenate(s, t, r, i, n, g, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_28_concatenate.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"concatenate\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :concatenate end)\n    candidate = fn args -> apply(HumanEval, concatenate, args) end\n    assert \"\" == candidate.([[]])\n    assert \"xyz\" == candidate.([[\"x\", \"y\", \"z\"]])\n    assert \"xyzwk\" == candidate.([[\"x\", \"y\", \"z\", \"w\", \"k\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_29_filter_by_prefix", "language": "elixir", "prompt": "# Filter an input list of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\n\n\ndefmodule HumanEval do\n  def filter_by_prefix(s, t, r, i, n, g, s, ,,  , p, r, e, f, i, x) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"filter_by_prefix\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :filter_by_prefix end)\n    candidate = fn args -> apply(HumanEval, filter_by_prefix, args) end\n    assert [] == candidate.([[], \"john\"])\n    assert [\"xxx\", \"xxxAAA\", \"xxx\"] == candidate.([[\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_2_truncate_number", "language": "elixir", "prompt": "# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number(3.5)\n# 0.5\n\n\ndefmodule HumanEval do\n  def truncate_number(n, u, m, b, e, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_2_truncate_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"truncate_number\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :truncate_number end)\n    candidate = fn args -> apply(HumanEval, truncate_number, args) end\n    assert 0.5 == candidate.([3.5])\n    assert 0.25 == candidate.([1.25])\n    assert 0.0 == candidate.([123.0])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_30_get_positive", "language": "elixir", "prompt": "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n\n\ndefmodule HumanEval do\n  def get_positive(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_30_get_positive.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"get_positive\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :get_positive end)\n    candidate = fn args -> apply(HumanEval, get_positive, args) end\n    assert [4, 5, 6] == candidate.([[-1, -2, 4, 5, 6]])\n    assert [5, 3, 2, 3, 3, 9, 123, 1] == candidate.([[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]])\n    assert [] == candidate.([[-1, -2]])\n    assert [] == candidate.([[]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_31_is_prime", "language": "elixir", "prompt": "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n# False\n\n\ndefmodule HumanEval do\n  def is_prime(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_31_is_prime.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_prime\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_prime end)\n    candidate = fn args -> apply(HumanEval, is_prime, args) end\n    assert false == candidate.([6])\n    assert true == candidate.([101])\n    assert true == candidate.([11])\n    assert true == candidate.([13441])\n    assert true == candidate.([61])\n    assert false == candidate.([4])\n    assert false == candidate.([1])\n    assert true == candidate.([5])\n    assert true == candidate.([11])\n    assert true == candidate.([17])\n    assert false == candidate.([85])\n    assert false == candidate.([77])\n    assert false == candidate.([255379])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_33_sort_third", "language": "elixir", "prompt": "# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\n\n\ndefmodule HumanEval do\n  def sort_third(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_33_sort_third.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sort_third\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sort_third end)\n    candidate = fn args -> apply(HumanEval, sort_third, args) end\n    assert [2, 6, 3, 4, 8, 9, 5] == candidate.([[5, 6, 3, 4, 8, 9, 2]])\n    assert [2, 8, 3, 4, 6, 9, 5] == candidate.([[5, 8, 3, 4, 6, 9, 2]])\n    assert [2, 6, 9, 4, 8, 3, 5] == candidate.([[5, 6, 9, 4, 8, 3, 2]])\n    assert [2, 6, 3, 4, 8, 9, 5, 1] == candidate.([[5, 6, 3, 4, 8, 9, 2, 1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_34_unique", "language": "elixir", "prompt": "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\n\n\ndefmodule HumanEval do\n  def unique(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_34_unique.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"unique\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :unique end)\n    candidate = fn args -> apply(HumanEval, unique, args) end\n    assert [0, 2, 3, 5, 9, 123] == candidate.([[5, 3, 5, 2, 3, 3, 9, 0, 123]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_35_max_element", "language": "elixir", "prompt": "# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\n\n\ndefmodule HumanEval do\n  def max_element(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_35_max_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"max_element\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :max_element end)\n    candidate = fn args -> apply(HumanEval, max_element, args) end\n    assert 3 == candidate.([[1, 2, 3]])\n    assert 124 == candidate.([[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_36_fizz_buzz", "language": "elixir", "prompt": "# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\n\n\ndefmodule HumanEval do\n  def fizz_buzz(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"fizz_buzz\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :fizz_buzz end)\n    candidate = fn args -> apply(HumanEval, fizz_buzz, args) end\n    assert 0 == candidate.([50])\n    assert 2 == candidate.([78])\n    assert 3 == candidate.([79])\n    assert 3 == candidate.([100])\n    assert 6 == candidate.([200])\n    assert 192 == candidate.([4000])\n    assert 639 == candidate.([10000])\n    assert 8026 == candidate.([100000])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_37_sort_even", "language": "elixir", "prompt": "# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\n\n\ndefmodule HumanEval do\n  def sort_even(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_37_sort_even.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sort_even\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sort_even end)\n    candidate = fn args -> apply(HumanEval, sort_even, args) end\n    assert [1, 2, 3] == candidate.([[1, 2, 3]])\n    assert [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123] == candidate.([[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]])\n    assert [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10] == candidate.([[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_39_prime_fib", "language": "elixir", "prompt": "# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\n\n\ndefmodule HumanEval do\n  def prime_fib(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_39_prime_fib.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"prime_fib\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :prime_fib end)\n    candidate = fn args -> apply(HumanEval, prime_fib, args) end\n    assert 2 == candidate.([1])\n    assert 3 == candidate.([2])\n    assert 5 == candidate.([3])\n    assert 13 == candidate.([4])\n    assert 89 == candidate.([5])\n    assert 233 == candidate.([6])\n    assert 1597 == candidate.([7])\n    assert 28657 == candidate.([8])\n    assert 514229 == candidate.([9])\n    assert 433494437 == candidate.([10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_3_below_zero", "language": "elixir", "prompt": "# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return True. Otherwise it should return False.\n# >>> below_zero([1, 2, 3])\n# False\n# >>> below_zero([1, 2, -4, 5])\n# True\n\n\ndefmodule HumanEval do\n  def below_zero(o, p, e, r, a, t, i, o, n, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_3_below_zero.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"below_zero\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :below_zero end)\n    candidate = fn args -> apply(HumanEval, below_zero, args) end\n    assert false == candidate.([[]])\n    assert false == candidate.([[1, 2, -3, 1, 2, -3]])\n    assert true == candidate.([[1, 2, -4, 5, 6]])\n    assert false == candidate.([[1, -1, 2, -2, 5, -5, 4, -4]])\n    assert true == candidate.([[1, -1, 2, -2, 5, -5, 4, -5]])\n    assert true == candidate.([[1, -2, 2, -2, 5, -5, 4, -4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "elixir", "prompt": "# triples_sum_to_zero takes a list of integers as an input.\n# it returns True if there are three distinct elements in the list that\n# sum to zero, and False otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# True\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# True\n# >>> triples_sum_to_zero([1])\n# False\n\n\ndefmodule HumanEval do\n  def triples_sum_to_zero(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"triples_sum_to_zero\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :triples_sum_to_zero end)\n    candidate = fn args -> apply(HumanEval, triples_sum_to_zero, args) end\n    assert false == candidate.([[1, 3, 5, 0]])\n    assert false == candidate.([[1, 3, 5, -1]])\n    assert true == candidate.([[1, 3, -2, 1]])\n    assert false == candidate.([[1, 2, 3, 7]])\n    assert false == candidate.([[1, 2, 5, 7]])\n    assert true == candidate.([[2, 4, -5, 3, 9, 7]])\n    assert false == candidate.([[1]])\n    assert false == candidate.([[1, 3, 5, -100]])\n    assert false == candidate.([[100, 3, 5, -100]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_41_car_race_collision", "language": "elixir", "prompt": "# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n\n\ndefmodule HumanEval do\n  def car_race_collision(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_41_car_race_collision.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"car_race_collision\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :car_race_collision end)\n    candidate = fn args -> apply(HumanEval, car_race_collision, args) end\n    assert 4 == candidate.([2])\n    assert 9 == candidate.([3])\n    assert 16 == candidate.([4])\n    assert 64 == candidate.([8])\n    assert 100 == candidate.([10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_42_incr_list", "language": "elixir", "prompt": "# Return list with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n\ndefmodule HumanEval do\n  def incr_list(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_42_incr_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"incr_list\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :incr_list end)\n    candidate = fn args -> apply(HumanEval, incr_list, args) end\n    assert [] == candidate.([[]])\n    assert [4, 3, 2] == candidate.([[3, 2, 1]])\n    assert [6, 3, 6, 3, 4, 4, 10, 1, 124] == candidate.([[5, 2, 5, 2, 3, 3, 9, 0, 123]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_43_pairs_sum_to_zero", "language": "elixir", "prompt": "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True if there are two distinct elements in the list that\n# sum to zero, and False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\n\n\ndefmodule HumanEval do\n  def pairs_sum_to_zero(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"pairs_sum_to_zero\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :pairs_sum_to_zero end)\n    candidate = fn args -> apply(HumanEval, pairs_sum_to_zero, args) end\n    assert false == candidate.([[1, 3, 5, 0]])\n    assert false == candidate.([[1, 3, -2, 1]])\n    assert false == candidate.([[1, 2, 3, 7]])\n    assert true == candidate.([[2, 4, -5, 3, 5, 7]])\n    assert false == candidate.([[1]])\n    assert true == candidate.([[-3, 9, -1, 3, 2, 30]])\n    assert true == candidate.([[-3, 9, -1, 3, 2, 31]])\n    assert false == candidate.([[-3, 9, -1, 4, 2, 30]])\n    assert false == candidate.([[-3, 9, -1, 4, 2, 31]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_44_change_base", "language": "elixir", "prompt": "# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8, 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7, 2)\n# '111'\n\n\ndefmodule HumanEval do\n  def change_base(x, ,,  , b, a, s, e) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_44_change_base.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"change_base\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :change_base end)\n    candidate = fn args -> apply(HumanEval, change_base, args) end\n    assert \"22\" == candidate.([8, 3])\n    assert \"100\" == candidate.([9, 3])\n    assert \"11101010\" == candidate.([234, 2])\n    assert \"10000\" == candidate.([16, 2])\n    assert \"1000\" == candidate.([8, 2])\n    assert \"111\" == candidate.([7, 2])\n    assert \"2\" == candidate.([2, 3])\n    assert \"3\" == candidate.([3, 4])\n    assert \"4\" == candidate.([4, 5])\n    assert \"5\" == candidate.([5, 6])\n    assert \"6\" == candidate.([6, 7])\n    assert \"7\" == candidate.([7, 8])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_45_triangle_area", "language": "elixir", "prompt": "# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5, 3)\n# 7.5\n\n\ndefmodule HumanEval do\n  def triangle_area(a, ,,  , h) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_45_triangle_area.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"triangle_area\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :triangle_area end)\n    candidate = fn args -> apply(HumanEval, triangle_area, args) end\n    assert 7.5 == candidate.([5, 3])\n    assert 2.0 == candidate.([2, 2])\n    assert 40.0 == candidate.([10, 8])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_46_fib4", "language": "elixir", "prompt": "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\n\n\ndefmodule HumanEval do\n  def fib4(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_46_fib4.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"fib4\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :fib4 end)\n    candidate = fn args -> apply(HumanEval, fib4, args) end\n    assert 4 == candidate.([5])\n    assert 28 == candidate.([8])\n    assert 104 == candidate.([10])\n    assert 386 == candidate.([12])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_47_median", "language": "elixir", "prompt": "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n\n\ndefmodule HumanEval do\n  def median(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_47_median.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"median\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :median end)\n    candidate = fn args -> apply(HumanEval, median, args) end\n    assert 3 == candidate.([[3, 1, 2, 4, 5]])\n    assert 8.0 == candidate.([[-10, 4, 6, 1000, 10, 20]])\n    assert 5 == candidate.([[5]])\n    assert 5.5 == candidate.([[6, 5]])\n    assert 7 == candidate.([[8, 1, 3, 9, 9, 2, 7]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_48_is_palindrome", "language": "elixir", "prompt": "# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# True\n# >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>> is_palindrome('zbcd')\n# False\n\n\ndefmodule HumanEval do\n  def is_palindrome(t, e, x, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_48_is_palindrome.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_palindrome\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_palindrome end)\n    candidate = fn args -> apply(HumanEval, is_palindrome, args) end\n    assert true == candidate.([\"\"])\n    assert true == candidate.([\"aba\"])\n    assert true == candidate.([\"aaaaa\"])\n    assert false == candidate.([\"zbcd\"])\n    assert true == candidate.([\"xywyx\"])\n    assert false == candidate.([\"xywyz\"])\n    assert false == candidate.([\"xywzx\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_49_modp", "language": "elixir", "prompt": "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\n\n\ndefmodule HumanEval do\n  def modp(n, ,,  , p) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_49_modp.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"modp\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :modp end)\n    candidate = fn args -> apply(HumanEval, modp, args) end\n    assert 3 == candidate.([3, 5])\n    assert 2 == candidate.([1101, 101])\n    assert 1 == candidate.([0, 101])\n    assert 8 == candidate.([3, 11])\n    assert 1 == candidate.([100, 101])\n    assert 4 == candidate.([30, 5])\n    assert 3 == candidate.([31, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_4_mean_absolute_deviation", "language": "elixir", "prompt": "# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\n\n\ndefmodule HumanEval do\n  def mean_absolute_deviation(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"mean_absolute_deviation\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :mean_absolute_deviation end)\n    candidate = fn args -> apply(HumanEval, mean_absolute_deviation, args) end\n    assert 0.5 == candidate.([[1.0, 2.0]])\n    assert 1.0 == candidate.([[1.0, 2.0, 3.0, 4.0]])\n    assert 1.2 == candidate.([[1.0, 2.0, 3.0, 4.0, 5.0]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_51_remove_vowels", "language": "elixir", "prompt": "# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n# >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n# 'zbcd'\n\n\ndefmodule HumanEval do\n  def remove_vowels(t, e, x, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_51_remove_vowels.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"remove_vowels\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :remove_vowels end)\n    candidate = fn args -> apply(HumanEval, remove_vowels, args) end\n    assert \"\" == candidate.([\"\"])\n    assert \"bcdf\nghjklm\" == candidate.([\"abcdef\nghijklm\"])\n    assert \"fdcb\" == candidate.([\"fedcba\"])\n    assert \"\" == candidate.([\"eeeee\"])\n    assert \"cB\" == candidate.([\"acBAA\"])\n    assert \"cB\" == candidate.([\"EcBOO\"])\n    assert \"ybcd\" == candidate.([\"ybcd\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_52_below_threshold", "language": "elixir", "prompt": "# Return True if all numbers in the list l are below threshold t.\n# >>> below_threshold([1, 2, 4, 10], 100)\n# True\n# >>> below_threshold([1, 20, 4, 10], 5)\n# False\n\n\ndefmodule HumanEval do\n  def below_threshold(l, ,,  , t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_52_below_threshold.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"below_threshold\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :below_threshold end)\n    candidate = fn args -> apply(HumanEval, below_threshold, args) end\n    assert true == candidate.([[1, 2, 4, 10], 100])\n    assert false == candidate.([[1, 20, 4, 10], 5])\n    assert true == candidate.([[1, 20, 4, 10], 21])\n    assert true == candidate.([[1, 20, 4, 10], 22])\n    assert true == candidate.([[1, 8, 4, 10], 11])\n    assert false == candidate.([[1, 8, 4, 10], 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_53_add", "language": "elixir", "prompt": "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\n\ndefmodule HumanEval do\n  def add(x, ,,  , y) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_53_add.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"add\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :add end)\n    candidate = fn args -> apply(HumanEval, add, args) end\n    assert 1 == candidate.([0, 1])\n    assert 1 == candidate.([1, 0])\n    assert 5 == candidate.([2, 3])\n    assert 12 == candidate.([5, 7])\n    assert 12 == candidate.([7, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_54_same_chars", "language": "elixir", "prompt": "# Check if two words have the same characters.\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n# True\n# >>> same_chars('abcd', 'dddddddabc')\n# True\n# >>> same_chars('dddddddabc', 'abcd')\n# True\n# >>> same_chars('eabcd', 'dddddddabc')\n# False\n# >>> same_chars('abcd', 'dddddddabce')\n# False\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n# False\n\n\ndefmodule HumanEval do\n  def same_chars(s, 0, ,,  , s, 1) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_54_same_chars.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"same_chars\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :same_chars end)\n    candidate = fn args -> apply(HumanEval, same_chars, args) end\n    assert true == candidate.([\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"])\n    assert true == candidate.([\"abcd\", \"dddddddabc\"])\n    assert true == candidate.([\"dddddddabc\", \"abcd\"])\n    assert false == candidate.([\"eabcd\", \"dddddddabc\"])\n    assert false == candidate.([\"abcd\", \"dddddddabcf\"])\n    assert false == candidate.([\"eabcdzzzz\", \"dddzzzzzzzddddabc\"])\n    assert false == candidate.([\"aabb\", \"aaccc\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_55_fib", "language": "elixir", "prompt": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\n\n\ndefmodule HumanEval do\n  def fib(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_55_fib.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"fib\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :fib end)\n    candidate = fn args -> apply(HumanEval, fib, args) end\n    assert 55 == candidate.([10])\n    assert 1 == candidate.([1])\n    assert 21 == candidate.([8])\n    assert 89 == candidate.([11])\n    assert 144 == candidate.([12])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_56_correct_bracketing", "language": "elixir", "prompt": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n\n\ndefmodule HumanEval do\n  def correct_bracketing(b, r, a, c, k, e, t, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"correct_bracketing\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :correct_bracketing end)\n    candidate = fn args -> apply(HumanEval, correct_bracketing, args) end\n    assert true == candidate.([\"<>\"])\n    assert true == candidate.([\"<<><>>\"])\n    assert true == candidate.([\"<><><<><>><>\"])\n    assert true == candidate.([\"<><><<<><><>><>><<><><<>>>\"])\n    assert false == candidate.([\"<<<><>>>>\"])\n    assert false == candidate.([\"><<>\"])\n    assert false == candidate.([\"<\"])\n    assert false == candidate.([\"<<<<\"])\n    assert false == candidate.([\">\"])\n    assert false == candidate.([\"<<>\"])\n    assert false == candidate.([\"<><><<><>><>><<>\"])\n    assert false == candidate.([\"<><><<><>><>>><>\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_57_monotonic", "language": "elixir", "prompt": "# Return True is list elements are monotonically increasing or decreasing.\n# >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n# >>> monotonic([4, 1, 0, -10])\n# True\n\n\ndefmodule HumanEval do\n  def monotonic(l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_57_monotonic.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"monotonic\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :monotonic end)\n    candidate = fn args -> apply(HumanEval, monotonic, args) end\n    assert true == candidate.([[1, 2, 4, 10]])\n    assert true == candidate.([[1, 2, 4, 20]])\n    assert false == candidate.([[1, 20, 4, 10]])\n    assert true == candidate.([[4, 1, 0, -10]])\n    assert true == candidate.([[4, 1, 1, 0]])\n    assert false == candidate.([[1, 2, 3, 2, 5, 60]])\n    assert true == candidate.([[1, 2, 3, 4, 5, 60]])\n    assert true == candidate.([[9, 9, 9, 9]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_58_common", "language": "elixir", "prompt": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\n\n\ndefmodule HumanEval do\n  def common(l, 1, ,,  , l, 2) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_58_common.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"common\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :common end)\n    candidate = fn args -> apply(HumanEval, common, args) end\n    assert [1, 5, 653] == candidate.([[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]])\n    assert [2, 3] == candidate.([[5, 3, 2, 8], [3, 2]])\n    assert [2, 3, 4] == candidate.([[4, 3, 2, 8], [3, 2, 4]])\n    assert [] == candidate.([[4, 3, 2, 8], []])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_59_largest_prime_factor", "language": "elixir", "prompt": "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\n\ndefmodule HumanEval do\n  def largest_prime_factor(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"largest_prime_factor\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :largest_prime_factor end)\n    candidate = fn args -> apply(HumanEval, largest_prime_factor, args) end\n    assert 5 == candidate.([15])\n    assert 3 == candidate.([27])\n    assert 7 == candidate.([63])\n    assert 11 == candidate.([330])\n    assert 29 == candidate.([13195])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_5_intersperse", "language": "elixir", "prompt": "# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\n\n\ndefmodule HumanEval do\n  def intersperse(n, u, m, b, e, r, s, ,,  , d, e, l, i, m, e, t, e, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_5_intersperse.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"intersperse\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :intersperse end)\n    candidate = fn args -> apply(HumanEval, intersperse, args) end\n    assert [] == candidate.([[], 7])\n    assert [5, 8, 6, 8, 3, 8, 2] == candidate.([[5, 6, 3, 2], 8])\n    assert [2, 2, 2, 2, 2] == candidate.([[2, 2, 2], 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_60_sum_to_n", "language": "elixir", "prompt": "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\n\n\ndefmodule HumanEval do\n  def sum_to_n(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_60_sum_to_n.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sum_to_n\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sum_to_n end)\n    candidate = fn args -> apply(HumanEval, sum_to_n, args) end\n    assert 1 == candidate.([1])\n    assert 21 == candidate.([6])\n    assert 66 == candidate.([11])\n    assert 465 == candidate.([30])\n    assert 5050 == candidate.([100])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_61_correct_bracketing", "language": "elixir", "prompt": "# brackets is a string of \"(\" and \")\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\n\n\ndefmodule HumanEval do\n  def correct_bracketing(b, r, a, c, k, e, t, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"correct_bracketing\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :correct_bracketing end)\n    candidate = fn args -> apply(HumanEval, correct_bracketing, args) end\n    assert true == candidate.([\"()\"])\n    assert true == candidate.([\"(()())\"])\n    assert true == candidate.([\"()()(()())()\"])\n    assert true == candidate.([\"()()((()()())())(()()(()))\"])\n    assert false == candidate.([\"((()())))\"])\n    assert false == candidate.([\")(()\"])\n    assert false == candidate.([\"(\"])\n    assert false == candidate.([\"((((\"])\n    assert false == candidate.([\")\"])\n    assert false == candidate.([\"(()\"])\n    assert false == candidate.([\"()()(()())())(()\"])\n    assert false == candidate.([\"()()(()())()))()\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_62_derivative", "language": "elixir", "prompt": "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\n\n\ndefmodule HumanEval do\n  def derivative(x, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_62_derivative.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"derivative\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :derivative end)\n    candidate = fn args -> apply(HumanEval, derivative, args) end\n    assert [1, 4, 12, 20] == candidate.([[3, 1, 2, 4, 5]])\n    assert [2, 6] == candidate.([[1, 2, 3]])\n    assert [2, 2] == candidate.([[3, 2, 1]])\n    assert [2, 2, 0, 16] == candidate.([[3, 2, 1, 0, 4]])\n    assert [] == candidate.([[1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_63_fibfib", "language": "elixir", "prompt": "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\n\n\ndefmodule HumanEval do\n  def fibfib(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_63_fibfib.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"fibfib\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :fibfib end)\n    candidate = fn args -> apply(HumanEval, fibfib, args) end\n    assert 1 == candidate.([2])\n    assert 0 == candidate.([1])\n    assert 4 == candidate.([5])\n    assert 24 == candidate.([8])\n    assert 81 == candidate.([10])\n    assert 274 == candidate.([12])\n    assert 927 == candidate.([14])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_64_vowels_count", "language": "elixir", "prompt": "# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\n\n\ndefmodule HumanEval do\n  def vowels_count(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_64_vowels_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"vowels_count\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :vowels_count end)\n    candidate = fn args -> apply(HumanEval, vowels_count, args) end\n    assert 2 == candidate.([\"abcde\"])\n    assert 3 == candidate.([\"Alone\"])\n    assert 2 == candidate.([\"key\"])\n    assert 1 == candidate.([\"bye\"])\n    assert 2 == candidate.([\"keY\"])\n    assert 1 == candidate.([\"bYe\"])\n    assert 3 == candidate.([\"ACEDY\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_65_circular_shift", "language": "elixir", "prompt": "# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\n\n\ndefmodule HumanEval do\n  def circular_shift(x, ,,  , s, h, i, f, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_65_circular_shift.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"circular_shift\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :circular_shift end)\n    candidate = fn args -> apply(HumanEval, circular_shift, args) end\n    assert \"001\" == candidate.([100, 2])\n    assert \"12\" == candidate.([12, 2])\n    assert \"79\" == candidate.([97, 8])\n    assert \"21\" == candidate.([12, 1])\n    assert \"11\" == candidate.([11, 101])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_66_digitSum", "language": "elixir", "prompt": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\n\ndefmodule HumanEval do\n  def digitSum(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_66_digitSum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"digitSum\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :digitSum end)\n    candidate = fn args -> apply(HumanEval, digitSum, args) end\n    assert 0 == candidate.([\"\"])\n    assert 131 == candidate.([\"abAB\"])\n    assert 67 == candidate.([\"abcCd\"])\n    assert 69 == candidate.([\"helloE\"])\n    assert 131 == candidate.([\"woArBld\"])\n    assert 153 == candidate.([\"aAaaaXa\"])\n    assert 151 == candidate.([\" How are yOu?\"])\n    assert 327 == candidate.([\"You arE Very Smart\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_67_fruit_distribution", "language": "elixir", "prompt": "# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\n\ndefmodule HumanEval do\n  def fruit_distribution(s, ,,  , n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"fruit_distribution\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :fruit_distribution end)\n    candidate = fn args -> apply(HumanEval, fruit_distribution, args) end\n    assert 8 == candidate.([\"5 apples and 6 oranges\", 19])\n    assert 10 == candidate.([\"5 apples and 6 oranges\", 21])\n    assert 2 == candidate.([\"0 apples and 1 oranges\", 3])\n    assert 2 == candidate.([\"1 apples and 0 oranges\", 3])\n    assert 95 == candidate.([\"2 apples and 3 oranges\", 100])\n    assert 0 == candidate.([\"2 apples and 3 oranges\", 5])\n    assert 19 == candidate.([\"1 apples and 100 oranges\", 120])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_68_pluck", "language": "elixir", "prompt": "# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n\n\ndefmodule HumanEval do\n  def pluck(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_68_pluck.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"pluck\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :pluck end)\n    candidate = fn args -> apply(HumanEval, pluck, args) end\n    assert [2, 1] == candidate.([[4, 2, 3]])\n    assert [2, 1] == candidate.([[1, 2, 3]])\n    assert [] == candidate.([[]])\n    assert [0, 1] == candidate.([[5, 0, 3, 0, 4, 2]])\n    assert [0, 3] == candidate.([[1, 2, 3, 0, 5, 3]])\n    assert [4, 1] == candidate.([[5, 4, 8, 4, 8]])\n    assert [6, 1] == candidate.([[7, 6, 7, 1]])\n    assert [] == candidate.([[7, 9, 7, 1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_69_search", "language": "elixir", "prompt": "# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# search([4, 1, 2, 2, 3, 1]) == 2\n# search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# search([5, 5, 4, 4, 4]) == -1\n\n\ndefmodule HumanEval do\n  def search(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_69_search.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"search\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :search end)\n    candidate = fn args -> apply(HumanEval, search, args) end\n    assert 1 == candidate.([[5, 5, 5, 5, 1]])\n    assert 4 == candidate.([[4, 1, 4, 1, 4, 4]])\n    assert -1 == candidate.([[3, 3]])\n    assert 8 == candidate.([[8, 8, 8, 8, 8, 8, 8, 8]])\n    assert 2 == candidate.([[2, 3, 3, 2, 2]])\n    assert 1 == candidate.([[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]])\n    assert 2 == candidate.([[3, 2, 8, 2]])\n    assert 1 == candidate.([[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]])\n    assert -1 == candidate.([[8, 8, 3, 6, 5, 6, 4]])\n    assert 1 == candidate.([[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]])\n    assert 1 == candidate.([[1, 9, 10, 1, 3]])\n    assert 5 == candidate.([[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]])\n    assert 1 == candidate.([[1]])\n    assert 4 == candidate.([[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]])\n    assert 2 == candidate.([[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]])\n    assert 1 == candidate.([[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]])\n    assert 4 == candidate.([[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]])\n    assert 4 == candidate.([[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]])\n    assert 2 == candidate.([[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]])\n    assert -1 == candidate.([[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]])\n    assert -1 == candidate.([[10]])\n    assert 2 == candidate.([[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]])\n    assert 1 == candidate.([[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]])\n    assert 1 == candidate.([[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]])\n    assert -1 == candidate.([[3, 10, 10, 9, 2]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_6_parse_nested_parens", "language": "elixir", "prompt": "# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n# [2, 3, 1, 3]\n\n\ndefmodule HumanEval do\n  def parse_nested_parens(p, a, r, e, n, _, s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"parse_nested_parens\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :parse_nested_parens end)\n    candidate = fn args -> apply(HumanEval, parse_nested_parens, args) end\n    assert [2, 3, 1, 3] == candidate.([\"(()()) ((())) () ((())()())\"])\n    assert [1, 2, 3, 4] == candidate.([\"() (()) ((())) (((())))\"])\n    assert [4] == candidate.([\"(()(())((())))\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_70_strange_sort_list", "language": "elixir", "prompt": "# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([]) == []\n\n\ndefmodule HumanEval do\n  def strange_sort_list(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"strange_sort_list\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :strange_sort_list end)\n    candidate = fn args -> apply(HumanEval, strange_sort_list, args) end\n    assert [1, 4, 2, 3] == candidate.([[1, 2, 3, 4]])\n    assert [5, 9, 6, 8, 7] == candidate.([[5, 6, 7, 8, 9]])\n    assert [1, 5, 2, 4, 3] == candidate.([[1, 2, 3, 4, 5]])\n    assert [1, 9, 5, 8, 6, 7] == candidate.([[5, 6, 7, 8, 9, 1]])\n    assert [5, 5, 5, 5] == candidate.([[5, 5, 5, 5]])\n    assert [] == candidate.([[]])\n    assert [1, 8, 2, 7, 3, 6, 4, 5] == candidate.([[1, 2, 3, 4, 5, 6, 7, 8]])\n    assert [-5, 5, -5, 5, 0, 2, 2, 2] == candidate.([[0, 2, 2, 2, 5, 5, -5, -5]])\n    assert [111111] == candidate.([[111111]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_71_triangle_area", "language": "elixir", "prompt": "# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\n\n\ndefmodule HumanEval do\n  def triangle_area(a, ,,  , b, ,,  , c) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_71_triangle_area.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"triangle_area\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :triangle_area end)\n    candidate = fn args -> apply(HumanEval, triangle_area, args) end\n    assert 6.0 == candidate.([3, 4, 5])\n    assert -1 == candidate.([1, 2, 10])\n    assert 8.18 == candidate.([4, 8, 5])\n    assert 1.73 == candidate.([2, 2, 2])\n    assert -1 == candidate.([1, 2, 3])\n    assert 16.25 == candidate.([10, 5, 7])\n    assert -1 == candidate.([2, 6, 3])\n    assert 0.43 == candidate.([1, 1, 1])\n    assert -1 == candidate.([2, 2, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_72_will_it_fly", "language": "elixir", "prompt": "# Write a function that returns True if the object q will fly, and False otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# will_it_fly([1, 2], 5) \u279e False \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# will_it_fly([3, 2, 3], 1) \u279e False\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# will_it_fly([3, 2, 3], 9) \u279e True\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# will_it_fly([3], 5) \u279e True\n# # 3 is less than the maximum possible weight, and it's balanced.\n\n\ndefmodule HumanEval do\n  def will_it_fly(q, ,,  , w) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_72_will_it_fly.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"will_it_fly\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :will_it_fly end)\n    candidate = fn args -> apply(HumanEval, will_it_fly, args) end\n    assert true == candidate.([[3, 2, 3], 9])\n    assert false == candidate.([[1, 2], 5])\n    assert true == candidate.([[3], 5])\n    assert false == candidate.([[3, 2, 3], 1])\n    assert false == candidate.([[1, 2, 3], 6])\n    assert true == candidate.([[5], 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_73_smallest_change", "language": "elixir", "prompt": "# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# smallest_change([1,2,3,5,4,7,9,6]) == 4\n# smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n# smallest_change([1, 2, 3, 2, 1]) == 0\n\n\ndefmodule HumanEval do\n  def smallest_change(a, r, r) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_73_smallest_change.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"smallest_change\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :smallest_change end)\n    candidate = fn args -> apply(HumanEval, smallest_change, args) end\n    assert 4 == candidate.([[1, 2, 3, 5, 4, 7, 9, 6]])\n    assert 1 == candidate.([[1, 2, 3, 4, 3, 2, 2]])\n    assert 1 == candidate.([[1, 4, 2]])\n    assert 1 == candidate.([[1, 4, 4, 2]])\n    assert 0 == candidate.([[1, 2, 3, 2, 1]])\n    assert 0 == candidate.([[3, 1, 1, 3]])\n    assert 0 == candidate.([[1]])\n    assert 1 == candidate.([[0, 1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_74_total_match", "language": "elixir", "prompt": "# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# total_match([], []) \u279e []\n# total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n# total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n# total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n# total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\n\ndefmodule HumanEval do\n  def total_match(l, s, t, 1, ,,  , l, s, t, 2) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_74_total_match.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"total_match\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :total_match end)\n    candidate = fn args -> apply(HumanEval, total_match, args) end\n    assert [] == candidate.([[], []])\n    assert [\"hi\", \"hi\"] == candidate.([[\"hi\", \"admin\"], [\"hi\", \"hi\"]])\n    assert [\"hi\", \"admin\"] == candidate.([[\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]])\n    assert [\"4\"] == candidate.([[\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]])\n    assert [\"hI\", \"Hi\"] == candidate.([[\"hi\", \"admin\"], [\"hI\", \"Hi\"]])\n    assert [\"hI\", \"hi\", \"hi\"] == candidate.([[\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]])\n    assert [\"hi\", \"admin\"] == candidate.([[\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]])\n    assert [] == candidate.([[], [\"this\"]])\n    assert [] == candidate.([[\"this\"], []])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_75_is_multiply_prime", "language": "elixir", "prompt": "# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# is_multiply_prime(30) == True\n# 30 = 2 * 3 * 5\n\n\ndefmodule HumanEval do\n  def is_multiply_prime(a) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_multiply_prime\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_multiply_prime end)\n    candidate = fn args -> apply(HumanEval, is_multiply_prime, args) end\n    assert false == candidate.([5])\n    assert true == candidate.([30])\n    assert true == candidate.([8])\n    assert false == candidate.([10])\n    assert true == candidate.([125])\n    assert true == candidate.([105])\n    assert false == candidate.([126])\n    assert false == candidate.([729])\n    assert false == candidate.([891])\n    assert true == candidate.([1001])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_76_is_simple_power", "language": "elixir", "prompt": "# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# is_simple_power(1, 4) => true\n# is_simple_power(2, 2) => true\n# is_simple_power(8, 2) => true\n# is_simple_power(3, 2) => false\n# is_simple_power(3, 1) => false\n# is_simple_power(5, 3) => false\n\n\ndefmodule HumanEval do\n  def is_simple_power(x, ,,  , n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_76_is_simple_power.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_simple_power\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_simple_power end)\n    candidate = fn args -> apply(HumanEval, is_simple_power, args) end\n    assert true == candidate.([16, 2])\n    assert false == candidate.([143214, 16])\n    assert true == candidate.([4, 2])\n    assert true == candidate.([9, 3])\n    assert true == candidate.([16, 4])\n    assert false == candidate.([24, 2])\n    assert false == candidate.([128, 4])\n    assert false == candidate.([12, 6])\n    assert true == candidate.([1, 1])\n    assert true == candidate.([1, 12])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_77_iscube", "language": "elixir", "prompt": "# Write a function that takes an integer a and returns True \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n\n\ndefmodule HumanEval do\n  def iscube(a) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_77_iscube.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"iscube\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :iscube end)\n    candidate = fn args -> apply(HumanEval, iscube, args) end\n    assert true == candidate.([1])\n    assert false == candidate.([2])\n    assert true == candidate.([-1])\n    assert true == candidate.([64])\n    assert false == candidate.([180])\n    assert true == candidate.([1000])\n    assert true == candidate.([0])\n    assert false == candidate.([1729])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_78_hex_key", "language": "elixir", "prompt": "# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n# For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For num = \"2020\" the output should be 2.\n\n\ndefmodule HumanEval do\n  def hex_key(n, u, m) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_78_hex_key.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"hex_key\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :hex_key end)\n    candidate = fn args -> apply(HumanEval, hex_key, args) end\n    assert 1 == candidate.([\"AB\"])\n    assert 2 == candidate.([\"1077E\"])\n    assert 4 == candidate.([\"ABED1A33\"])\n    assert 2 == candidate.([\"2020\"])\n    assert 6 == candidate.([\"123456789ABCDEF0\"])\n    assert 12 == candidate.([\"112233445566778899AABBCCDDEEFF00\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_79_decimal_to_binary", "language": "elixir", "prompt": "# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)   # returns \"db100000db\"\n\n\ndefmodule HumanEval do\n  def decimal_to_binary(d, e, c, i, m, a, l) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"decimal_to_binary\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :decimal_to_binary end)\n    candidate = fn args -> apply(HumanEval, decimal_to_binary, args) end\n    assert \"db0db\" == candidate.([0])\n    assert \"db100000db\" == candidate.([32])\n    assert \"db1100111db\" == candidate.([103])\n    assert \"db1111db\" == candidate.([15])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_7_filter_by_substring", "language": "elixir", "prompt": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\n\n\ndefmodule HumanEval do\n  def filter_by_substring(s, t, r, i, n, g, s, ,,  , s, u, b, s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"filter_by_substring\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :filter_by_substring end)\n    candidate = fn args -> apply(HumanEval, filter_by_substring, args) end\n    assert [] == candidate.([[], \"john\"])\n    assert [\"xxx\", \"xxxAAA\", \"xxx\"] == candidate.([[\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"])\n    assert [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"] == candidate.([[\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"])\n    assert [\"grunt\", \"prune\"] == candidate.([[\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_80_is_happy", "language": "elixir", "prompt": "# You are given a string s.\n# Your task is to check if the string is happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb) => True\n# is_happy(xyy) => False\n\n\ndefmodule HumanEval do\n  def is_happy(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_80_is_happy.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_happy\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_happy end)\n    candidate = fn args -> apply(HumanEval, is_happy, args) end\n    assert false == candidate.([\"a\"])\n    assert false == candidate.([\"aa\"])\n    assert true == candidate.([\"abcd\"])\n    assert false == candidate.([\"aabb\"])\n    assert true == candidate.([\"adb\"])\n    assert false == candidate.([\"xyy\"])\n    assert true == candidate.([\"iopaxpoi\"])\n    assert false == candidate.([\"iopaxioi\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_81_numerical_letter_grade", "language": "elixir", "prompt": "# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n\ndefmodule HumanEval do\n  def numerical_letter_grade(g, r, a, d, e, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"numerical_letter_grade\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :numerical_letter_grade end)\n    candidate = fn args -> apply(HumanEval, numerical_letter_grade, args) end\n    assert [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == candidate.([[4.0, 3, 1.7, 2, 3.5]])\n    assert [\"D+\"] == candidate.([[1.2]])\n    assert [\"D-\"] == candidate.([[0.5]])\n    assert [\"E\"] == candidate.([[0.0]])\n    assert [\"D\", \"D-\", \"C-\", \"B\", \"B+\"] == candidate.([[1.0, 0.3, 1.5, 2.8, 3.3]])\n    assert [\"E\", \"D-\"] == candidate.([[0.0, 0.7]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_82_prime_length", "language": "elixir", "prompt": "# Write a function that takes a string and returns True if the string\n# length is a prime number or False otherwise\n# Examples\n# prime_length('Hello') == True\n# prime_length('abcdcba') == True\n# prime_length('kittens') == True\n# prime_length('orange') == False\n\n\ndefmodule HumanEval do\n  def prime_length(s, t, r, i, n, g) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_82_prime_length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"prime_length\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :prime_length end)\n    candidate = fn args -> apply(HumanEval, prime_length, args) end\n    assert true == candidate.([\"Hello\"])\n    assert true == candidate.([\"abcdcba\"])\n    assert true == candidate.([\"kittens\"])\n    assert false == candidate.([\"orange\"])\n    assert true == candidate.([\"wow\"])\n    assert true == candidate.([\"world\"])\n    assert true == candidate.([\"MadaM\"])\n    assert true == candidate.([\"Wow\"])\n    assert false == candidate.([\"\"])\n    assert true == candidate.([\"HI\"])\n    assert true == candidate.([\"go\"])\n    assert false == candidate.([\"gogo\"])\n    assert false == candidate.([\"aaaaaaaaaaaaaaa\"])\n    assert true == candidate.([\"Madam\"])\n    assert false == candidate.([\"M\"])\n    assert false == candidate.([\"0\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_83_starts_one_ends", "language": "elixir", "prompt": "# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n\n\ndefmodule HumanEval do\n  def starts_one_ends(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"starts_one_ends\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :starts_one_ends end)\n    candidate = fn args -> apply(HumanEval, starts_one_ends, args) end\n    assert 1 == candidate.([1])\n    assert 18 == candidate.([2])\n    assert 180 == candidate.([3])\n    assert 1800 == candidate.([4])\n    assert 18000 == candidate.([5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_84_solve", "language": "elixir", "prompt": "# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# For N = 1000, the sum of digits will be 1 the output should be \"1\".\n# For N = 150, the sum of digits will be 6 the output should be \"110\".\n# For N = 147, the sum of digits will be 12 the output should be \"1100\".\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n\n\ndefmodule HumanEval do\n  def solve(N) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_84_solve.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"solve\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :solve end)\n    candidate = fn args -> apply(HumanEval, solve, args) end\n    assert \"1\" == candidate.([1000])\n    assert \"110\" == candidate.([150])\n    assert \"1100\" == candidate.([147])\n    assert \"1001\" == candidate.([333])\n    assert \"10010\" == candidate.([963])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_85_add", "language": "elixir", "prompt": "# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\n\n\ndefmodule HumanEval do\n  def add(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_85_add.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"add\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :add end)\n    candidate = fn args -> apply(HumanEval, add, args) end\n    assert 88 == candidate.([[4, 88]])\n    assert 122 == candidate.([[4, 5, 6, 7, 2, 122]])\n    assert 0 == candidate.([[4, 0, 6, 7]])\n    assert 12 == candidate.([[4, 4, 6, 8]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_86_anti_shuffle", "language": "elixir", "prompt": "# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi') returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\n\ndefmodule HumanEval do\n  def anti_shuffle(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"anti_shuffle\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :anti_shuffle end)\n    candidate = fn args -> apply(HumanEval, anti_shuffle, args) end\n    assert \"Hi\" == candidate.([\"Hi\"])\n    assert \"ehllo\" == candidate.([\"hello\"])\n    assert \"bemnru\" == candidate.([\"number\"])\n    assert \"abcd\" == candidate.([\"abcd\"])\n    assert \"Hello !!!Wdlor\" == candidate.([\"Hello World!!!\"])\n    assert \"\" == candidate.([\"\"])\n    assert \".Hi My aemn is Meirst .Rboot How aer ?ouy\" == candidate.([\"Hi. My name is Mister Robot. How are you?\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_87_get_row", "language": "elixir", "prompt": "# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n# [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([], 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n\ndefmodule HumanEval do\n  def get_row(l, s, t, ,,  , x) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_87_get_row.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"get_row\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :get_row end)\n    candidate = fn args -> apply(HumanEval, get_row, args) end\n    assert [{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}] == candidate.([[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1])\n    assert [{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}] == candidate.([[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2])\n    assert [{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}] == candidate.([[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1])\n    assert [] == candidate.([[], 1])\n    assert [] == candidate.([[[1]], 2])\n    assert [{2, 2}] == candidate.([[[], [1], [1, 2, 3]], 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_88_sort_array", "language": "elixir", "prompt": "# Given an array of non-negative integers, return a copy of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# * sort_array([]) => []\n# * sort_array([5]) => [5]\n# * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n# * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\n\ndefmodule HumanEval do\n  def sort_array(a, r, r, a, y) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_88_sort_array.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sort_array\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sort_array end)\n    candidate = fn args -> apply(HumanEval, sort_array, args) end\n    assert [] == candidate.([[]])\n    assert [5] == candidate.([[5]])\n    assert [0, 1, 2, 3, 4, 5] == candidate.([[2, 4, 3, 0, 1, 5]])\n    assert [6, 5, 4, 3, 2, 1, 0] == candidate.([[2, 4, 3, 0, 1, 5, 6]])\n    assert [1, 2] == candidate.([[2, 1]])\n    assert [0, 11, 15, 32, 42, 87] == candidate.([[15, 42, 87, 32, 11, 0]])\n    assert [23, 21, 14, 11] == candidate.([[21, 14, 23, 11]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_89_encrypt", "language": "elixir", "prompt": "# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# encrypt('hi') returns 'lm'\n# encrypt('asdfghjkl') returns 'ewhjklnop'\n# encrypt('gf') returns 'kj'\n# encrypt('et') returns 'ix'\n\n\ndefmodule HumanEval do\n  def encrypt(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_89_encrypt.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"encrypt\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :encrypt end)\n    candidate = fn args -> apply(HumanEval, encrypt, args) end\n    assert \"lm\" == candidate.([\"hi\"])\n    assert \"ewhjklnop\" == candidate.([\"asdfghjkl\"])\n    assert \"kj\" == candidate.([\"gf\"])\n    assert \"ix\" == candidate.([\"et\"])\n    assert \"jeiajeaijeiak\" == candidate.([\"faewfawefaewg\"])\n    assert \"lippsqcjvmirh\" == candidate.([\"hellomyfriend\"])\n    assert \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" == candidate.([\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"])\n    assert \"e\" == candidate.([\"a\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_8_sum_product", "language": "elixir", "prompt": "# For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product([])\n# (0, 1)\n# >>> sum_product([1, 2, 3, 4])\n# (10, 24)\n\n\ndefmodule HumanEval do\n  def sum_product(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_8_sum_product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"sum_product\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :sum_product end)\n    candidate = fn args -> apply(HumanEval, sum_product, args) end\n    assert {0, 1} == candidate.([[]])\n    assert {3, 1} == candidate.([[1, 1, 1]])\n    assert {100, 0} == candidate.([[100, 0]])\n    assert {15, 105} == candidate.([[3, 5, 7]])\n    assert {10, 10} == candidate.([[10]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_90_next_smallest", "language": "elixir", "prompt": "# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# next_smallest([1, 2, 3, 4, 5]) == 2\n# next_smallest([5, 1, 4, 3, 2]) == 2\n# next_smallest([]) == None\n# next_smallest([1, 1]) == None\n\n\ndefmodule HumanEval do\n  def next_smallest(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_90_next_smallest.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"next_smallest\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :next_smallest end)\n    candidate = fn args -> apply(HumanEval, next_smallest, args) end\n    assert 2 == candidate.([[1, 2, 3, 4, 5]])\n    assert 2 == candidate.([[5, 1, 4, 3, 2]])\n    assert nil == candidate.([[]])\n    assert nil == candidate.([[1, 1]])\n    assert 1 == candidate.([[1, 1, 1, 1, 0]])\n    assert nil == candidate.([[1, 1]])\n    assert -35 == candidate.([[-35, 34, 12, -45]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_91_is_bored", "language": "elixir", "prompt": "# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\n\n\ndefmodule HumanEval do\n  def is_bored(S) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_91_is_bored.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"is_bored\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :is_bored end)\n    candidate = fn args -> apply(HumanEval, is_bored, args) end\n    assert 0 == candidate.([\"Hello world\"])\n    assert 0 == candidate.([\"Is the sky blue?\"])\n    assert 1 == candidate.([\"I love It !\"])\n    assert 0 == candidate.([\"bIt\"])\n    assert 2 == candidate.([\"I feel good today. I will be productive. will kill It\"])\n    assert 0 == candidate.([\"You and I are going for a walk\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_92_any_int", "language": "elixir", "prompt": "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279e True\n# any_int(3, 2, 2) \u279e False\n# any_int(3, -2, 1) \u279e True\n# any_int(3.6, -2.2, 2) \u279e False\n\n\ndefmodule HumanEval do\n  def any_int(x, ,,  , y, ,,  , z) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_92_any_int.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"any_int\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :any_int end)\n    candidate = fn args -> apply(HumanEval, any_int, args) end\n    assert true == candidate.([2, 3, 1])\n    assert false == candidate.([2.5, 2, 3])\n    assert false == candidate.([1.5, 5, 3.5])\n    assert false == candidate.([2, 6, 2])\n    assert true == candidate.([4, 2, 2])\n    assert false == candidate.([2.2, 2.2, 2.2])\n    assert true == candidate.([-4, 6, 2])\n    assert true == candidate.([2, 1, 1])\n    assert true == candidate.([3, 4, 7])\n    assert false == candidate.([3.0, 4, 7])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_93_encode", "language": "elixir", "prompt": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>> encode('This is a message')\n# 'tHKS KS C MGSSCGG'\n\n\ndefmodule HumanEval do\n  def encode(m, e, s, s, a, g, e) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_93_encode.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"encode\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :encode end)\n    candidate = fn args -> apply(HumanEval, encode, args) end\n    assert \"tgst\" == candidate.([\"TEST\"])\n    assert \"mWDCSKR\" == candidate.([\"Mudasir\"])\n    assert \"ygs\" == candidate.([\"YES\"])\n    assert \"tHKS KS C MGSSCGG\" == candidate.([\"This is a message\"])\n    assert \"k dQnT kNqW wHcT Tq wRkTg\" == candidate.([\"I DoNt KnOw WhAt tO WrItE\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_94_skjkasdkd", "language": "elixir", "prompt": "# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n# For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n# For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n# For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n# For lst = [0,81,12,3,1,21] the output should be 3\n# For lst = [0,8,1,2,1,7] the output should be 7\n\n\ndefmodule HumanEval do\n  def skjkasdkd(l, s, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"skjkasdkd\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :skjkasdkd end)\n    candidate = fn args -> apply(HumanEval, skjkasdkd, args) end\n    assert 10 == candidate.([[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]])\n    assert 25 == candidate.([[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]])\n    assert 13 == candidate.([[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]])\n    assert 11 == candidate.([[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]])\n    assert 3 == candidate.([[0, 81, 12, 3, 1, 21]])\n    assert 7 == candidate.([[0, 8, 1, 2, 1, 7]])\n    assert 19 == candidate.([[8191]])\n    assert 19 == candidate.([[8191, 123456, 127, 7]])\n    assert 10 == candidate.([[127, 97, 8192]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_95_check_dict_case", "language": "elixir", "prompt": "# Given a dictionary, return True if all keys are strings in lower \n# case or all keys are strings in upper case, else return False.\n# The function should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\n\ndefmodule HumanEval do\n  def check_dict_case(d, i, c, t) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_95_check_dict_case.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"check_dict_case\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :check_dict_case end)\n    candidate = fn args -> apply(HumanEval, check_dict_case, args) end\n    assert true == candidate.([%{\"p\" => \"pineapple\", \"b\" => \"banana\"}])\n    assert false == candidate.([%{\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}])\n    assert false == candidate.([%{\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}])\n    assert false == candidate.([%{\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}])\n    assert true == candidate.([%{\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}])\n    assert true == candidate.([%{\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}])\n    assert false == candidate.([%{}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_96_count_up_to", "language": "elixir", "prompt": "# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# count_up_to(5) => [2,3]\n# count_up_to(11) => [2,3,5,7]\n# count_up_to(0) => []\n# count_up_to(20) => [2,3,5,7,11,13,17,19]\n# count_up_to(1) => []\n# count_up_to(18) => [2,3,5,7,11,13,17]\n\n\ndefmodule HumanEval do\n  def count_up_to(n) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_96_count_up_to.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"count_up_to\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :count_up_to end)\n    candidate = fn args -> apply(HumanEval, count_up_to, args) end\n    assert [2, 3] == candidate.([5])\n    assert [2, 3, 5] == candidate.([6])\n    assert [2, 3, 5] == candidate.([7])\n    assert [2, 3, 5, 7] == candidate.([10])\n    assert [] == candidate.([0])\n    assert [2, 3, 5, 7, 11, 13, 17, 19] == candidate.([22])\n    assert [] == candidate.([1])\n    assert [2, 3, 5, 7, 11, 13, 17] == candidate.([18])\n    assert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43] == candidate.([47])\n    assert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == candidate.([101])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_97_multiply", "language": "elixir", "prompt": "# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# multiply(148, 412) should return 16.\n# multiply(19, 28) should return 72.\n# multiply(2020, 1851) should return 0.\n# multiply(14,-15) should return 20.\n\n\ndefmodule HumanEval do\n  def multiply(a, ,,  , b) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_97_multiply.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"multiply\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :multiply end)\n    candidate = fn args -> apply(HumanEval, multiply, args) end\n    assert 16 == candidate.([148, 412])\n    assert 72 == candidate.([19, 28])\n    assert 0 == candidate.([2020, 1851])\n    assert 20 == candidate.([14, -15])\n    assert 42 == candidate.([76, 67])\n    assert 49 == candidate.([17, 27])\n    assert 0 == candidate.([0, 1])\n    assert 0 == candidate.([0, 0])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_98_count_upper", "language": "elixir", "prompt": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns 0\n# count_upper('dBBE') returns 0\n\n\ndefmodule HumanEval do\n  def count_upper(s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_98_count_upper.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"count_upper\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :count_upper end)\n    candidate = fn args -> apply(HumanEval, count_upper, args) end\n    assert 1 == candidate.([\"aBCdEf\"])\n    assert 0 == candidate.([\"abcdefg\"])\n    assert 0 == candidate.([\"dBBE\"])\n    assert 0 == candidate.([\"B\"])\n    assert 1 == candidate.([\"U\"])\n    assert 0 == candidate.([\"\"])\n    assert 2 == candidate.([\"EEEE\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_99_closest_integer", "language": "elixir", "prompt": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\n\ndefmodule HumanEval do\n  def closest_integer(v, a, l, u, e) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_99_closest_integer.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"closest_integer\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :closest_integer end)\n    candidate = fn args -> apply(HumanEval, closest_integer, args) end\n    assert 10 == candidate.([\"10\"])\n    assert 15 == candidate.([\"14.5\"])\n    assert -16 == candidate.([\"-15.5\"])\n    assert 15 == candidate.([\"15.3\"])\n    assert 0 == candidate.([\"0\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "HumanEval_9_rolling_max", "language": "elixir", "prompt": "# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n\n\ndefmodule HumanEval do\n  def rolling_max(n, u, m, b, e, r, s) do", "doctests": "keep", "original": "/Users/mvkvc/dev/MultiPL-E/datasets/../datasets/originals/HumanEval_9_rolling_max.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\n\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test \"rolling_max\" do\n    functions = HumanEval.__info__(:functions)\n    {function_name, arity} = Enum.find(functions, fn {name, _arity} -> name == :rolling_max end)\n    candidate = fn args -> apply(HumanEval, rolling_max, args) end\n    assert [] == candidate.([[]])\n    assert [1, 2, 3, 4] == candidate.([[1, 2, 3, 4]])\n    assert [4, 4, 4, 4] == candidate.([[4, 3, 2, 1]])\n    assert [3, 3, 3, 100, 100] == candidate.([[3, 2, 3, 100, 3]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
