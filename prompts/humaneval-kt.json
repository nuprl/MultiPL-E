[
    {
      "name": "HumanEval_60_sum_to_n",
      "language": "kt",
      "prompt": "// sumToN is a function that sums numbers from 1 to n.\n// >>> sumToN(30)\n// 465\n// >>> sumToN(100)\n// 5050\n// >>> sumToN(5)\n// 15\n// >>> sumToN(10)\n// 55\n// >>> sumToN(1)\n// 1\nfun sumToN(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == sumToN(1));\n  assert(21 == sumToN(6));\n  assert(66 == sumToN(11));\n  assert(465 == sumToN(30));\n  assert(5050 == sumToN(100));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_163_generate_integers",
      "language": "kt",
      "prompt": "// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generateIntegers(2, 8) => [2, 4, 6, 8]\n// generateIntegers(8, 2) => [2, 4, 6, 8]\n// generateIntegers(10, 14) => []\nfun generateIntegers(a: Int, b: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(2, 4, 6, 8) == generateIntegers(2, 10));\n  assert(mutableListOf(2, 4, 6, 8) == generateIntegers(10, 2));\n  assert(mutableListOf(2, 4, 6, 8) == generateIntegers(132, 2));\n  assert(mutableListOf<Any>() == generateIntegers(17, 89));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_4_mean_absolute_deviation",
      "language": "kt",
      "prompt": "// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfun meanAbsoluteDeviation(numbers: MutableList<Double>): Double {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0.5 == meanAbsoluteDeviation(mutableListOf(1.0, 2.0)));\n  assert(1.0 == meanAbsoluteDeviation(mutableListOf(1.0, 2.0, 3.0, 4.0)));\n  assert(1.2 == meanAbsoluteDeviation(mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_116_sort_array",
      "language": "kt",
      "prompt": "// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfun sortArray(arr: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_116_sort_array.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 2, 4, 3, 5) == sortArray(mutableListOf(1, 5, 2, 3, 4)));\n  assert(mutableListOf(-4, -2, -6, -5, -3) == sortArray(mutableListOf(-2, -3, -4, -5, -6)));\n  assert(mutableListOf(0, 1, 2, 4, 3) == sortArray(mutableListOf(1, 0, 2, 3, 4)));\n  assert(mutableListOf<Any>() == sortArray(mutableListOf<Any>()));\n  assert(mutableListOf(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77) == sortArray(mutableListOf(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)));\n  assert(mutableListOf(32, 3, 5, 6, 12, 44) == sortArray(mutableListOf(3, 6, 44, 12, 32, 5)));\n  assert(mutableListOf(2, 4, 8, 16, 32) == sortArray(mutableListOf(2, 4, 8, 16, 32)));\n  assert(mutableListOf(2, 4, 8, 16, 32) == sortArray(mutableListOf(2, 4, 8, 16, 32)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_36_fizz_buzz",
      "language": "kt",
      "prompt": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizzBuzz(50)\n// 0\n// >>> fizzBuzz(78)\n// 2\n// >>> fizzBuzz(79)\n// 3\nfun fizzBuzz(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == fizzBuzz(50));\n  assert(2 == fizzBuzz(78));\n  assert(3 == fizzBuzz(79));\n  assert(3 == fizzBuzz(100));\n  assert(6 == fizzBuzz(200));\n  assert(192 == fizzBuzz(4000));\n  assert(639 == fizzBuzz(10000));\n  assert(8026 == fizzBuzz(100000));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_26_remove_duplicates",
      "language": "kt",
      "prompt": "// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> removeDuplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfun removeDuplicates(numbers: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == removeDuplicates(mutableListOf<Any>()));\n  assert(mutableListOf(1, 2, 3, 4) == removeDuplicates(mutableListOf(1, 2, 3, 4)));\n  assert(mutableListOf(1, 4, 5) == removeDuplicates(mutableListOf(1, 2, 3, 2, 4, 3, 5)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_33_sort_third",
      "language": "kt",
      "prompt": "// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sortThird([1, 2, 3])\n// [1, 2, 3]\n// >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfun sortThird(l: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_33_sort_third.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(2, 6, 3, 4, 8, 9, 5) == sortThird(mutableListOf(5, 6, 3, 4, 8, 9, 2)));\n  assert(mutableListOf(2, 8, 3, 4, 6, 9, 5) == sortThird(mutableListOf(5, 8, 3, 4, 6, 9, 2)));\n  assert(mutableListOf(2, 6, 9, 4, 8, 3, 5) == sortThird(mutableListOf(5, 6, 9, 4, 8, 3, 2)));\n  assert(mutableListOf(2, 6, 3, 4, 8, 9, 5, 1) == sortThird(mutableListOf(5, 6, 3, 4, 8, 9, 2, 1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_117_select_words",
      "language": "kt",
      "prompt": "// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// selectWords(\"simple white space\", 2) ==> []\n// selectWords(\"Hello world\", 4) ==> [\"world\"]\n// selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfun selectWords(s: String, n: Int): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_117_select_words.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"little\") == selectWords(\"Mary had a little lamb\", 4));\n  assert(mutableListOf(\"Mary\", \"lamb\") == selectWords(\"Mary had a little lamb\", 3));\n  assert(mutableListOf<Any>() == selectWords(\"simple white space\", 2));\n  assert(mutableListOf(\"world\") == selectWords(\"Hello world\", 4));\n  assert(mutableListOf(\"Uncle\") == selectWords(\"Uncle sam\", 3));\n  assert(mutableListOf<Any>() == selectWords(\"\", 4));\n  assert(mutableListOf(\"b\", \"c\", \"d\", \"f\") == selectWords(\"a b c d e f\", 1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_67_fruit_distribution",
      "language": "kt",
      "prompt": "// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n// fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nfun fruitDistribution(s: String, n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(8 == fruitDistribution(\"5 apples and 6 oranges\", 19));\n  assert(10 == fruitDistribution(\"5 apples and 6 oranges\", 21));\n  assert(2 == fruitDistribution(\"0 apples and 1 oranges\", 3));\n  assert(2 == fruitDistribution(\"1 apples and 0 oranges\", 3));\n  assert(95 == fruitDistribution(\"2 apples and 3 oranges\", 100));\n  assert(0 == fruitDistribution(\"2 apples and 3 oranges\", 5));\n  assert(19 == fruitDistribution(\"1 apples and 100 oranges\", 120));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_153_Strongest_Extension",
      "language": "kt",
      "prompt": "// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nfun StrongestExtension(class_name: String, extensions: MutableList<String>): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"Watashi.eIGHt8OKe\" == StrongestExtension(\"Watashi\", mutableListOf(\"tEN\", \"niNE\", \"eIGHt8OKe\")));\n  assert(\"Boku123.YEs.WeCaNe\" == StrongestExtension(\"Boku123\", mutableListOf(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")));\n  assert(\"__YESIMHERE.NuLl__\" == StrongestExtension(\"__YESIMHERE\", mutableListOf(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")));\n  assert(\"K.TAR\" == StrongestExtension(\"K\", mutableListOf(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")));\n  assert(\"__HAHA.123\" == StrongestExtension(\"__HAHA\", mutableListOf(\"Tab\", \"123\", \"781345\", \"-_-\")));\n  assert(\"YameRore.okIWILL123\" == StrongestExtension(\"YameRore\", mutableListOf(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")));\n  assert(\"finNNalLLly.WoW\" == StrongestExtension(\"finNNalLLly\", mutableListOf(\"Die\", \"NowW\", \"Wow\", \"WoW\")));\n  assert(\"_.Bb\" == StrongestExtension(\"_\", mutableListOf(\"Bb\", \"91245\")));\n  assert(\"Sp.671235\" == StrongestExtension(\"Sp\", mutableListOf(\"671235\", \"Bb\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_21_rescale_to_unit",
      "language": "kt",
      "prompt": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfun rescaleToUnit(numbers: MutableList<Double>): MutableList<Double> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(0.0, 1.0) == rescaleToUnit(mutableListOf(2.0, 49.9)));\n  assert(mutableListOf(1.0, 0.0) == rescaleToUnit(mutableListOf(100.0, 49.9)));\n  assert(mutableListOf(0.0, 0.25, 0.5, 0.75, 1.0) == rescaleToUnit(mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0)));\n  assert(mutableListOf(0.25, 0.0, 1.0, 0.5, 0.75) == rescaleToUnit(mutableListOf(2.0, 1.0, 5.0, 3.0, 4.0)));\n  assert(mutableListOf(0.25, 0.0, 1.0, 0.5, 0.75) == rescaleToUnit(mutableListOf(12.0, 11.0, 15.0, 13.0, 14.0)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_96_count_up_to",
      "language": "kt",
      "prompt": "// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// countUpTo(5) => [2,3]\n// countUpTo(11) => [2,3,5,7]\n// countUpTo(0) => []\n// countUpTo(20) => [2,3,5,7,11,13,17,19]\n// countUpTo(1) => []\n// countUpTo(18) => [2,3,5,7,11,13,17]\nfun countUpTo(n: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(2, 3) == countUpTo(5));\n  assert(mutableListOf(2, 3, 5) == countUpTo(6));\n  assert(mutableListOf(2, 3, 5) == countUpTo(7));\n  assert(mutableListOf(2, 3, 5, 7) == countUpTo(10));\n  assert(mutableListOf<Any>() == countUpTo(0));\n  assert(mutableListOf(2, 3, 5, 7, 11, 13, 17, 19) == countUpTo(22));\n  assert(mutableListOf<Any>() == countUpTo(1));\n  assert(mutableListOf(2, 3, 5, 7, 11, 13, 17) == countUpTo(18));\n  assert(mutableListOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43) == countUpTo(47));\n  assert(mutableListOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97) == countUpTo(101));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_20_find_closest_elements",
      "language": "kt",
      "prompt": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfun findClosestElements(numbers: MutableList<Double>): Pair<Double, Double> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(Pair(3.9, 4.0) == findClosestElements(mutableListOf(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)));\n  assert(Pair(5.0, 5.9) == findClosestElements(mutableListOf(1.0, 2.0, 5.9, 4.0, 5.0)));\n  assert(Pair(2.0, 2.2) == findClosestElements(mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n  assert(Pair(2.0, 2.0) == findClosestElements(mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n  assert(Pair(2.2, 3.1) == findClosestElements(mutableListOf(1.1, 2.2, 3.1, 4.1, 5.1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_118_get_closest_vowel",
      "language": "kt",
      "prompt": "// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// getClosestVowel(\"yogurt\") ==> \"u\"\n// getClosestVowel(\"FULL\") ==> \"U\"\n// getClosestVowel(\"quick\") ==> \"\"\n// getClosestVowel(\"ab\") ==> \"\"\nfun getClosestVowel(word: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"u\" == getClosestVowel(\"yogurt\"));\n  assert(\"u\" == getClosestVowel(\"full\"));\n  assert(\"\" == getClosestVowel(\"easy\"));\n  assert(\"\" == getClosestVowel(\"eAsy\"));\n  assert(\"\" == getClosestVowel(\"ali\"));\n  assert(\"a\" == getClosestVowel(\"bad\"));\n  assert(\"o\" == getClosestVowel(\"most\"));\n  assert(\"\" == getClosestVowel(\"ab\"));\n  assert(\"\" == getClosestVowel(\"ba\"));\n  assert(\"\" == getClosestVowel(\"quick\"));\n  assert(\"i\" == getClosestVowel(\"anime\"));\n  assert(\"\" == getClosestVowel(\"Asia\"));\n  assert(\"o\" == getClosestVowel(\"Above\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_143_words_in_sentence",
      "language": "kt",
      "prompt": "// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfun wordsInSentence(sentence: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"is\" == wordsInSentence(\"This is a test\"));\n  assert(\"go for\" == wordsInSentence(\"lets go for swimming\"));\n  assert(\"there is no place\" == wordsInSentence(\"there is no place available here\"));\n  assert(\"Hi am Hussein\" == wordsInSentence(\"Hi I am Hussein\"));\n  assert(\"go for it\" == wordsInSentence(\"go for it\"));\n  assert(\"\" == wordsInSentence(\"here\"));\n  assert(\"is\" == wordsInSentence(\"here is\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_48_is_palindrome",
      "language": "kt",
      "prompt": "// Checks if given string is a palindrome\n// >>> isPalindrome('')\n// True\n// >>> isPalindrome('aba')\n// True\n// >>> isPalindrome('aaaaa')\n// True\n// >>> isPalindrome('zbcd')\n// False\nfun isPalindrome(text: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == isPalindrome(\"\"));\n  assert(true == isPalindrome(\"aba\"));\n  assert(true == isPalindrome(\"aaaaa\"));\n  assert(false == isPalindrome(\"zbcd\"));\n  assert(true == isPalindrome(\"xywyx\"));\n  assert(false == isPalindrome(\"xywyz\"));\n  assert(false == isPalindrome(\"xywzx\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_64_vowels_count",
      "language": "kt",
      "prompt": "// Write a function vowelsCount which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowelsCount(\"abcde\")\n// 2\n// >>> vowelsCount(\"ACEDY\")\n// 3\nfun vowelsCount(s: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(2 == vowelsCount(\"abcde\"));\n  assert(3 == vowelsCount(\"Alone\"));\n  assert(2 == vowelsCount(\"key\"));\n  assert(1 == vowelsCount(\"bye\"));\n  assert(2 == vowelsCount(\"keY\"));\n  assert(1 == vowelsCount(\"bYe\"));\n  assert(3 == vowelsCount(\"ACEDY\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_34_unique",
      "language": "kt",
      "prompt": "// Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfun unique(l: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_34_unique.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(0, 2, 3, 5, 9, 123) == unique(mutableListOf(5, 3, 5, 2, 3, 3, 9, 0, 123)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_94_skjkasdkd",
      "language": "kt",
      "prompt": "// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nfun skjkasdkd(lst: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(10 == skjkasdkd(mutableListOf(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)));\n  assert(25 == skjkasdkd(mutableListOf(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)));\n  assert(13 == skjkasdkd(mutableListOf(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)));\n  assert(11 == skjkasdkd(mutableListOf(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)));\n  assert(3 == skjkasdkd(mutableListOf(0, 81, 12, 3, 1, 21)));\n  assert(7 == skjkasdkd(mutableListOf(0, 8, 1, 2, 1, 7)));\n  assert(19 == skjkasdkd(mutableListOf(8191)));\n  assert(19 == skjkasdkd(mutableListOf(8191, 123456, 127, 7)));\n  assert(10 == skjkasdkd(mutableListOf(127, 97, 8192)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_52_below_threshold",
      "language": "kt",
      "prompt": "// Return True if all numbers in the list l are below threshold t.\n// >>> belowThreshold([1, 2, 4, 10], 100)\n// True\n// >>> belowThreshold([1, 20, 4, 10], 5)\n// False\nfun belowThreshold(l: MutableList<Int>, t: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == belowThreshold(mutableListOf(1, 2, 4, 10), 100));\n  assert(false == belowThreshold(mutableListOf(1, 20, 4, 10), 5));\n  assert(true == belowThreshold(mutableListOf(1, 20, 4, 10), 21));\n  assert(true == belowThreshold(mutableListOf(1, 20, 4, 10), 22));\n  assert(true == belowThreshold(mutableListOf(1, 8, 4, 10), 11));\n  assert(false == belowThreshold(mutableListOf(1, 8, 4, 10), 10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_58_common",
      "language": "kt",
      "prompt": "// Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfun common(l1: MutableList<Int>, l2: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_58_common.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 5, 653) == common(mutableListOf(1, 4, 3, 34, 653, 2, 5), mutableListOf(5, 7, 1, 5, 9, 653, 121)));\n  assert(mutableListOf(2, 3) == common(mutableListOf(5, 3, 2, 8), mutableListOf(3, 2)));\n  assert(mutableListOf(2, 3, 4) == common(mutableListOf(4, 3, 2, 8), mutableListOf(3, 2, 4)));\n  assert(mutableListOf<Any>() == common(mutableListOf(4, 3, 2, 8), mutableListOf<Any>()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_122_add_elements",
      "language": "kt",
      "prompt": "// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfun addElements(arr: MutableList<Int>, k: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_122_add_elements.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(-4 == addElements(mutableListOf(1, -2, -3, 41, 57, 76, 87, 88, 99), 3));\n  assert(0 == addElements(mutableListOf(111, 121, 3, 4000, 5, 6), 2));\n  assert(125 == addElements(mutableListOf(11, 21, 3, 90, 5, 6, 7, 8, 9), 4));\n  assert(24 == addElements(mutableListOf(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4));\n  assert(1 == addElements(mutableListOf(1), 1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_160_do_algebra",
      "language": "kt",
      "prompt": "// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfun doAlgebra(operator: MutableList<String>, operand: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_160_do_algebra.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(37 == doAlgebra(mutableListOf(\"**\", \"*\", \"+\"), mutableListOf(2, 3, 4, 5)));\n  assert(9 == doAlgebra(mutableListOf(\"+\", \"*\", \"-\"), mutableListOf(2, 3, 4, 5)));\n  assert(8 == doAlgebra(mutableListOf(\"//\", \"*\"), mutableListOf(7, 3, 4)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_66_digitSum",
      "language": "kt",
      "prompt": "// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nfun digitSum(s: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_66_digitSum.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == digitSum(\"\"));\n  assert(131 == digitSum(\"abAB\"));\n  assert(67 == digitSum(\"abcCd\"));\n  assert(69 == digitSum(\"helloE\"));\n  assert(131 == digitSum(\"woArBld\"));\n  assert(153 == digitSum(\"aAaaaXa\"));\n  assert(151 == digitSum(\" How are yOu?\"));\n  assert(327 == digitSum(\"You arE Very Smart\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_19_sort_numbers",
      "language": "kt",
      "prompt": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sortNumbers('three one five')\n// 'one three five'\nfun sortNumbers(numbers: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"\" == sortNumbers(\"\"));\n  assert(\"three\" == sortNumbers(\"three\"));\n  assert(\"three five nine\" == sortNumbers(\"three five nine\"));\n  assert(\"zero four five seven eight nine\" == sortNumbers(\"five zero four seven nine eight\"));\n  assert(\"zero one two three four five six\" == sortNumbers(\"six five four three two one zero\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_83_starts_one_ends",
      "language": "kt",
      "prompt": "// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfun startsOneEnds(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == startsOneEnds(1));\n  assert(18 == startsOneEnds(2));\n  assert(180 == startsOneEnds(3));\n  assert(1800 == startsOneEnds(4));\n  assert(18000 == startsOneEnds(5));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_107_even_odd_palindrome",
      "language": "kt",
      "prompt": "// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfun evenOddPalindrome(n: Int): Pair<Int, Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(Pair(8, 13) == evenOddPalindrome(123));\n  assert(Pair(4, 6) == evenOddPalindrome(12));\n  assert(Pair(1, 2) == evenOddPalindrome(3));\n  assert(Pair(6, 8) == evenOddPalindrome(63));\n  assert(Pair(5, 6) == evenOddPalindrome(25));\n  assert(Pair(4, 6) == evenOddPalindrome(19));\n  assert(Pair(4, 5) == evenOddPalindrome(9));\n  assert(Pair(0, 1) == evenOddPalindrome(1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_101_words_string",
      "language": "kt",
      "prompt": "// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfun wordsString(s: String): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_101_words_string.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"Hi\", \"my\", \"name\", \"is\", \"John\") == wordsString(\"Hi, my name is John\"));\n  assert(mutableListOf(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\") == wordsString(\"One, two, three, four, five, six\"));\n  assert(mutableListOf(\"Hi\", \"my\", \"name\") == wordsString(\"Hi, my name\"));\n  assert(mutableListOf(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\") == wordsString(\"One,, two, three, four, five, six,\"));\n  assert(mutableListOf<Any>() == wordsString(\"\"));\n  assert(mutableListOf(\"ahmed\", \"gamal\") == wordsString(\"ahmed     , gamal\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_115_max_fill",
      "language": "kt",
      "prompt": "// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfun maxFill(grid: MutableList<MutableList<Int>>, capacity: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_115_max_fill.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(6 == maxFill(mutableListOf(mutableListOf(0, 0, 1, 0), mutableListOf(0, 1, 0, 0), mutableListOf(1, 1, 1, 1)), 1));\n  assert(5 == maxFill(mutableListOf(mutableListOf(0, 0, 1, 1), mutableListOf(0, 0, 0, 0), mutableListOf(1, 1, 1, 1), mutableListOf(0, 1, 1, 1)), 2));\n  assert(0 == maxFill(mutableListOf(mutableListOf(0, 0, 0), mutableListOf(0, 0, 0)), 5));\n  assert(4 == maxFill(mutableListOf(mutableListOf(1, 1, 1, 1), mutableListOf(1, 1, 1, 1)), 2));\n  assert(2 == maxFill(mutableListOf(mutableListOf(1, 1, 1, 1), mutableListOf(1, 1, 1, 1)), 9));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_135_can_arrange",
      "language": "kt",
      "prompt": "// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// canArrange([1,2,4,3,5]) = 3\n// canArrange([1,2,3]) = -1\nfun canArrange(arr: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(3 == canArrange(mutableListOf(1, 2, 4, 3, 5)));\n  assert(-1 == canArrange(mutableListOf(1, 2, 4, 5)));\n  assert(2 == canArrange(mutableListOf(1, 4, 2, 5, 6, 7, 8, 9, 10)));\n  assert(4 == canArrange(mutableListOf(4, 8, 5, 7, 3)));\n  assert(-1 == canArrange(mutableListOf<Any>()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_37_sort_even",
      "language": "kt",
      "prompt": "// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sortEven([1, 2, 3])\n// [1, 2, 3]\n// >>> sortEven([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfun sortEven(l: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_37_sort_even.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 2, 3) == sortEven(mutableListOf(1, 2, 3)));\n  assert(mutableListOf(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123) == sortEven(mutableListOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\n  assert(mutableListOf(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10) == sortEven(mutableListOf(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_139_special_factorial",
      "language": "kt",
      "prompt": "// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> specialFactorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfun specialFactorial(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(288 == specialFactorial(4));\n  assert(34560 == specialFactorial(5));\n  assert(125411328000 == specialFactorial(7));\n  assert(1 == specialFactorial(1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_86_anti_shuffle",
      "language": "kt",
      "prompt": "// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// antiShuffle('Hi') returns 'Hi'\n// antiShuffle('hello') returns 'ehllo'\n// antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nfun antiShuffle(s: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"Hi\" == antiShuffle(\"Hi\"));\n  assert(\"ehllo\" == antiShuffle(\"hello\"));\n  assert(\"bemnru\" == antiShuffle(\"number\"));\n  assert(\"abcd\" == antiShuffle(\"abcd\"));\n  assert(\"Hello !!!Wdlor\" == antiShuffle(\"Hello World!!!\"));\n  assert(\"\" == antiShuffle(\"\"));\n  assert(\".Hi My aemn is Meirst .Rboot How aer ?ouy\" == antiShuffle(\"Hi. My name is Mister Robot. How are you?\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_84_solve",
      "language": "kt",
      "prompt": "// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfun solve(N: Int): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_84_solve.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"1\" == solve(1000));\n  assert(\"110\" == solve(150));\n  assert(\"1100\" == solve(147));\n  assert(\"1001\" == solve(333));\n  assert(\"10010\" == solve(963));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_12_longest",
      "language": "kt",
      "prompt": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfun longest(strings: MutableList<String>): String? {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_12_longest.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(undefined == longest(mutableListOf<Any>()));\n  assert(\"x\" == longest(mutableListOf(\"x\", \"y\", \"z\")));\n  assert(\"zzzz\" == longest(mutableListOf(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_161_solve",
      "language": "kt",
      "prompt": "// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfun solve(s: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_161_solve.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"aSdF\" == solve(\"AsDf\"));\n  assert(\"4321\" == solve(\"1234\"));\n  assert(\"AB\" == solve(\"ab\"));\n  assert(\"#A@c\" == solve(\"#a@C\"));\n  assert(\"#aSDFw^45\" == solve(\"#AsdfW^45\"));\n  assert(\"2@6#\" == solve(\"#6@2\"));\n  assert(\"#$A^d\" == solve(\"#$a^D\"));\n  assert(\"#CCC\" == solve(\"#ccc\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_8_sum_product",
      "language": "kt",
      "prompt": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sumProduct([])\n// (0, 1)\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\nfun sumProduct(numbers: MutableList<Int>): Pair<Int, Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_8_sum_product.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(Pair(0, 1) == sumProduct(mutableListOf<Any>()));\n  assert(Pair(3, 1) == sumProduct(mutableListOf(1, 1, 1)));\n  assert(Pair(100, 0) == sumProduct(mutableListOf(100, 0)));\n  assert(Pair(15, 105) == sumProduct(mutableListOf(3, 5, 7)));\n  assert(Pair(10, 10) == sumProduct(mutableListOf(10)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_6_parse_nested_parens",
      "language": "kt",
      "prompt": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parseNestedParens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfun parseNestedParens(paren_string: String): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(2, 3, 1, 3) == parseNestedParens(\"(()()) ((())) () ((())()())\"));\n  assert(mutableListOf(1, 2, 3, 4) == parseNestedParens(\"() (()) ((())) (((())))\"));\n  assert(mutableListOf(4) == parseNestedParens(\"(()(())((())))\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_95_check_dict_case",
      "language": "kt",
      "prompt": "// Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// checkDictCase({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfun checkDictCase(dict: Map<String, String>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == checkDictCase(mutableMapOf(\"p\" to \"pineapple\", \"b\" to \"banana\")));\n  assert(false == checkDictCase(mutableMapOf(\"p\" to \"pineapple\", \"A\" to \"banana\", \"B\" to \"banana\")));\n  assert(false == checkDictCase(mutableMapOf(\"p\" to \"pineapple\", \"5\" to \"banana\", \"a\" to \"apple\")));\n  assert(false == checkDictCase(mutableMapOf(\"Name\" to \"John\", \"Age\" to \"36\", \"City\" to \"Houston\")));\n  assert(true == checkDictCase(mutableMapOf(\"STATE\" to \"NC\", \"ZIP\" to \"12345\")));\n  assert(true == checkDictCase(mutableMapOf(\"fruit\" to \"Orange\", \"taste\" to \"Sweet\")));\n  assert(false == checkDictCase(mutableMapOf()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_17_parse_music",
      "language": "kt",
      "prompt": "// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfun parseMusic(music_string: String): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_17_parse_music.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == parseMusic(\"\"));\n  assert(mutableListOf(4, 4, 4, 4) == parseMusic(\"o o o o\"));\n  assert(mutableListOf(1, 1, 1, 1) == parseMusic(\".| .| .| .|\"));\n  assert(mutableListOf(2, 2, 1, 1, 4, 4, 4, 4) == parseMusic(\"o| o| .| .| o o o o\"));\n  assert(mutableListOf(2, 1, 2, 1, 4, 2, 4, 2) == parseMusic(\"o| .| o| .| o o| o o|\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_82_prime_length",
      "language": "kt",
      "prompt": "// Write a function that takes a string and returns True if the string\n// length is a prime number or False otherwise\n// Examples\n// primeLength('Hello') == True\n// primeLength('abcdcba') == True\n// primeLength('kittens') == True\n// primeLength('orange') == False\nfun primeLength(string: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_82_prime_length.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == primeLength(\"Hello\"));\n  assert(true == primeLength(\"abcdcba\"));\n  assert(true == primeLength(\"kittens\"));\n  assert(false == primeLength(\"orange\"));\n  assert(true == primeLength(\"wow\"));\n  assert(true == primeLength(\"world\"));\n  assert(true == primeLength(\"MadaM\"));\n  assert(true == primeLength(\"Wow\"));\n  assert(false == primeLength(\"\"));\n  assert(true == primeLength(\"HI\"));\n  assert(true == primeLength(\"go\"));\n  assert(false == primeLength(\"gogo\"));\n  assert(false == primeLength(\"aaaaaaaaaaaaaaa\"));\n  assert(true == primeLength(\"Madam\"));\n  assert(false == primeLength(\"M\"));\n  assert(false == primeLength(\"0\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_105_by_length",
      "language": "kt",
      "prompt": "// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfun byLength(arr: MutableList<Int>): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_105_by_length.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\") == byLength(mutableListOf(2, 1, 1, 4, 5, 8, 2, 3)));\n  assert(mutableListOf<Any>() == byLength(mutableListOf<Any>()));\n  assert(mutableListOf(\"One\") == byLength(mutableListOf(1, -1, 55)));\n  assert(mutableListOf(\"Three\", \"Two\", \"One\") == byLength(mutableListOf(1, -1, 3, 2)));\n  assert(mutableListOf(\"Nine\", \"Eight\", \"Four\") == byLength(mutableListOf(9, 4, 8)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_111_histogram",
      "language": "kt",
      "prompt": "// Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfun histogram(test: String): Map<String, Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_111_histogram.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableMapOf(\"a\" to 2, \"b\" to 2) == histogram(\"a b b a\"));\n  assert(mutableMapOf(\"a\" to 2, \"b\" to 2) == histogram(\"a b c a b\"));\n  assert(mutableMapOf(\"a\" to 1, \"b\" to 1, \"c\" to 1, \"d\" to 1, \"g\" to 1) == histogram(\"a b c d g\"));\n  assert(mutableMapOf(\"r\" to 1, \"t\" to 1, \"g\" to 1) == histogram(\"r t g\"));\n  assert(mutableMapOf(\"b\" to 4) == histogram(\"b b b b a\"));\n  assert(mutableMapOf(\"r\" to 1, \"t\" to 1, \"g\" to 1) == histogram(\"r t g\"));\n  assert(mutableMapOf() == histogram(\"\"));\n  assert(mutableMapOf(\"a\" to 1) == histogram(\"a\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_35_max_element",
      "language": "kt",
      "prompt": "// Return maximum element in the list.\n// >>> maxElement([1, 2, 3])\n// 3\n// >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfun maxElement(l: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_35_max_element.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(3 == maxElement(mutableListOf(1, 2, 3)));\n  assert(124 == maxElement(mutableListOf(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_57_monotonic",
      "language": "kt",
      "prompt": "// Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfun monotonic(l: MutableList<Int>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_57_monotonic.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == monotonic(mutableListOf(1, 2, 4, 10)));\n  assert(true == monotonic(mutableListOf(1, 2, 4, 20)));\n  assert(false == monotonic(mutableListOf(1, 20, 4, 10)));\n  assert(true == monotonic(mutableListOf(4, 1, 0, -10)));\n  assert(true == monotonic(mutableListOf(4, 1, 1, 0)));\n  assert(false == monotonic(mutableListOf(1, 2, 3, 2, 5, 60)));\n  assert(true == monotonic(mutableListOf(1, 2, 3, 4, 5, 60)));\n  assert(true == monotonic(mutableListOf(9, 9, 9, 9)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_154_cycpattern_check",
      "language": "kt",
      "prompt": "// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpatternCheck(\"abcd\",\"abd\") => False\n// cycpatternCheck(\"hello\",\"ell\") => True\n// cycpatternCheck(\"whassup\",\"psus\") => False\n// cycpatternCheck(\"abab\",\"baa\") => True\n// cycpatternCheck(\"efef\",\"eeff\") => False\n// cycpatternCheck(\"himenss\",\"simen\") => True\nfun cycpatternCheck(a: String, b: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == cycpatternCheck(\"xyzw\", \"xyw\"));\n  assert(true == cycpatternCheck(\"yello\", \"ell\"));\n  assert(false == cycpatternCheck(\"whattup\", \"ptut\"));\n  assert(true == cycpatternCheck(\"efef\", \"fee\"));\n  assert(false == cycpatternCheck(\"abab\", \"aabb\"));\n  assert(true == cycpatternCheck(\"winemtt\", \"tinem\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_27_flip_case",
      "language": "kt",
      "prompt": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flipCase('Hello')\n// 'hELLO'\nfun flipCase(string: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_27_flip_case.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"\" == flipCase(\"\"));\n  assert(\"hELLO!\" == flipCase(\"Hello!\"));\n  assert(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" == flipCase(\"These violent delights have violent ends\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_92_any_int",
      "language": "kt",
      "prompt": "// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyInt(5, 2, 7) \u279e True\n// anyInt(3, 2, 2) \u279e False\n// anyInt(3, -2, 1) \u279e True\n// anyInt(3.6, -2.2, 2) \u279e False\nfun anyInt(x: Double, y: Double, z: Double): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_92_any_int.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == anyInt(2, 3, 1));\n  assert(false == anyInt(2.5, 2, 3));\n  assert(false == anyInt(1.5, 5, 3.5));\n  assert(false == anyInt(2, 6, 2));\n  assert(true == anyInt(4, 2, 2));\n  assert(false == anyInt(2.2, 2.2, 2.2));\n  assert(true == anyInt(-4, 6, 2));\n  assert(true == anyInt(2, 1, 1));\n  assert(true == anyInt(3, 4, 7));\n  assert(false == anyInt(3.0, 4, 7));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_73_smallest_change",
      "language": "kt",
      "prompt": "// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// smallestChange([1,2,3,5,4,7,9,6]) == 4\n// smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallestChange([1, 2, 3, 2, 1]) == 0\nfun smallestChange(arr: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(4 == smallestChange(mutableListOf(1, 2, 3, 5, 4, 7, 9, 6)));\n  assert(1 == smallestChange(mutableListOf(1, 2, 3, 4, 3, 2, 2)));\n  assert(1 == smallestChange(mutableListOf(1, 4, 2)));\n  assert(1 == smallestChange(mutableListOf(1, 4, 4, 2)));\n  assert(0 == smallestChange(mutableListOf(1, 2, 3, 2, 1)));\n  assert(0 == smallestChange(mutableListOf(3, 1, 1, 3)));\n  assert(0 == smallestChange(mutableListOf(1)));\n  assert(1 == smallestChange(mutableListOf(0, 1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_65_circular_shift",
      "language": "kt",
      "prompt": "// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circularShift(12, 1)\n// \"21\"\n// >>> circularShift(12, 2)\n// \"12\"\nfun circularShift(x: Int, shift: Int): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"001\" == circularShift(100, 2));\n  assert(\"12\" == circularShift(12, 2));\n  assert(\"79\" == circularShift(97, 8));\n  assert(\"21\" == circularShift(12, 1));\n  assert(\"11\" == circularShift(11, 101));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_70_strange_sort_list",
      "language": "kt",
      "prompt": "// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strangeSortList([]) == []\nfun strangeSortList(lst: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 4, 2, 3) == strangeSortList(mutableListOf(1, 2, 3, 4)));\n  assert(mutableListOf(5, 9, 6, 8, 7) == strangeSortList(mutableListOf(5, 6, 7, 8, 9)));\n  assert(mutableListOf(1, 5, 2, 4, 3) == strangeSortList(mutableListOf(1, 2, 3, 4, 5)));\n  assert(mutableListOf(1, 9, 5, 8, 6, 7) == strangeSortList(mutableListOf(5, 6, 7, 8, 9, 1)));\n  assert(mutableListOf(5, 5, 5, 5) == strangeSortList(mutableListOf(5, 5, 5, 5)));\n  assert(mutableListOf<Any>() == strangeSortList(mutableListOf<Any>()));\n  assert(mutableListOf(1, 8, 2, 7, 3, 6, 4, 5) == strangeSortList(mutableListOf(1, 2, 3, 4, 5, 6, 7, 8)));\n  assert(mutableListOf(-5, 5, -5, 5, 0, 2, 2, 2) == strangeSortList(mutableListOf(0, 2, 2, 2, 5, 5, -5, -5)));\n  assert(mutableListOf(111111) == strangeSortList(mutableListOf(111111)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_61_correct_bracketing",
      "language": "kt",
      "prompt": "// brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correctBracketing(\"(\")\n// False\n// >>> correctBracketing(\"()\")\n// True\n// >>> correctBracketing(\"(()())\")\n// True\n// >>> correctBracketing(\")(()\")\n// False\nfun correctBracketing(brackets: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == correctBracketing(\"()\"));\n  assert(true == correctBracketing(\"(()())\"));\n  assert(true == correctBracketing(\"()()(()())()\"));\n  assert(true == correctBracketing(\"()()((()()())())(()()(()))\"));\n  assert(false == correctBracketing(\"((()())))\"));\n  assert(false == correctBracketing(\")(()\"));\n  assert(false == correctBracketing(\"(\"));\n  assert(false == correctBracketing(\"((((\"));\n  assert(false == correctBracketing(\")\"));\n  assert(false == correctBracketing(\"(()\"));\n  assert(false == correctBracketing(\"()()(()())())(()\"));\n  assert(false == correctBracketing(\"()()(()())()))()\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_106_f",
      "language": "kt",
      "prompt": "// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfun f(n: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_106_f.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 2, 6, 24, 15) == f(5));\n  assert(mutableListOf(1, 2, 6, 24, 15, 720, 28) == f(7));\n  assert(mutableListOf(1) == f(1));\n  assert(mutableListOf(1, 2, 6) == f(3));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_3_below_zero",
      "language": "kt",
      "prompt": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> belowZero([1, 2, 3])\n// False\n// >>> belowZero([1, 2, -4, 5])\n// True\nfun belowZero(operations: MutableList<Int>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_3_below_zero.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == belowZero(mutableListOf<Any>()));\n  assert(false == belowZero(mutableListOf(1, 2, -3, 1, 2, -3)));\n  assert(true == belowZero(mutableListOf(1, 2, -4, 5, 6)));\n  assert(false == belowZero(mutableListOf(1, -1, 2, -2, 5, -5, 4, -4)));\n  assert(true == belowZero(mutableListOf(1, -1, 2, -2, 5, -5, 4, -5)));\n  assert(true == belowZero(mutableListOf(1, -2, 2, -2, 5, -5, 4, -4)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_138_is_equal_to_sum_even",
      "language": "kt",
      "prompt": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// isEqualToSumEven(4) == False\n// isEqualToSumEven(6) == False\n// isEqualToSumEven(8) == True\nfun isEqualToSumEven(n: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == isEqualToSumEven(4));\n  assert(false == isEqualToSumEven(6));\n  assert(true == isEqualToSumEven(8));\n  assert(true == isEqualToSumEven(10));\n  assert(false == isEqualToSumEven(11));\n  assert(true == isEqualToSumEven(12));\n  assert(false == isEqualToSumEven(13));\n  assert(true == isEqualToSumEven(16));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_155_even_odd_count",
      "language": "kt",
      "prompt": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// evenOddCount(-12) ==> (1, 1)\n// evenOddCount(123) ==> (1, 2)\nfun evenOddCount(num: Int): Pair<Int, Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(Pair(0, 1) == evenOddCount(7));\n  assert(Pair(1, 1) == evenOddCount(-78));\n  assert(Pair(2, 2) == evenOddCount(3452));\n  assert(Pair(3, 3) == evenOddCount(346211));\n  assert(Pair(3, 3) == evenOddCount(-345821));\n  assert(Pair(1, 0) == evenOddCount(-2));\n  assert(Pair(2, 3) == evenOddCount(-45347));\n  assert(Pair(1, 0) == evenOddCount(0));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_149_sorted_list_sum",
      "language": "kt",
      "prompt": "// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfun sortedListSum(lst: MutableList<String>): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"aa\") == sortedListSum(mutableListOf(\"aa\", \"a\", \"aaa\")));\n  assert(mutableListOf(\"AI\", \"asdf\", \"school\") == sortedListSum(mutableListOf(\"school\", \"AI\", \"asdf\", \"b\")));\n  assert(mutableListOf<Any>() == sortedListSum(mutableListOf(\"d\", \"b\", \"c\", \"a\")));\n  assert(mutableListOf(\"abcd\", \"dcba\") == sortedListSum(mutableListOf(\"d\", \"dcba\", \"abcd\", \"a\")));\n  assert(mutableListOf(\"AI\", \"ai\", \"au\") == sortedListSum(mutableListOf(\"AI\", \"ai\", \"au\")));\n  assert(mutableListOf<Any>() == sortedListSum(mutableListOf(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\")));\n  assert(mutableListOf(\"cc\", \"dd\", \"aaaa\", \"bbbb\") == sortedListSum(mutableListOf(\"aaaa\", \"bbbb\", \"dd\", \"cc\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_13_greatest_common_divisor",
      "language": "kt",
      "prompt": "// Return a greatest common divisor of two integers a and b\n// >>> greatestCommonDivisor(3, 5)\n// 1\n// >>> greatestCommonDivisor(25, 15)\n// 5\nfun greatestCommonDivisor(a: Int, b: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == greatestCommonDivisor(3, 7));\n  assert(5 == greatestCommonDivisor(10, 15));\n  assert(7 == greatestCommonDivisor(49, 14));\n  assert(12 == greatestCommonDivisor(144, 60));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_55_fib",
      "language": "kt",
      "prompt": "// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfun fib(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_55_fib.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(55 == fib(10));\n  assert(1 == fib(1));\n  assert(21 == fib(8));\n  assert(89 == fib(11));\n  assert(144 == fib(12));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_74_total_match",
      "language": "kt",
      "prompt": "// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// totalMatch([], []) \u279e []\n// totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\nfun totalMatch(lst1: MutableList<String>, lst2: MutableList<String>): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_74_total_match.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == totalMatch(mutableListOf<Any>(), mutableListOf<Any>()));\n  assert(mutableListOf(\"hi\", \"hi\") == totalMatch(mutableListOf(\"hi\", \"admin\"), mutableListOf(\"hi\", \"hi\")));\n  assert(mutableListOf(\"hi\", \"admin\") == totalMatch(mutableListOf(\"hi\", \"admin\"), mutableListOf(\"hi\", \"hi\", \"admin\", \"project\")));\n  assert(mutableListOf(\"4\") == totalMatch(mutableListOf(\"4\"), mutableListOf(\"1\", \"2\", \"3\", \"4\", \"5\")));\n  assert(mutableListOf(\"hI\", \"Hi\") == totalMatch(mutableListOf(\"hi\", \"admin\"), mutableListOf(\"hI\", \"Hi\")));\n  assert(mutableListOf(\"hI\", \"hi\", \"hi\") == totalMatch(mutableListOf(\"hi\", \"admin\"), mutableListOf(\"hI\", \"hi\", \"hi\")));\n  assert(mutableListOf(\"hi\", \"admin\") == totalMatch(mutableListOf(\"hi\", \"admin\"), mutableListOf(\"hI\", \"hi\", \"hii\")));\n  assert(mutableListOf<Any>() == totalMatch(mutableListOf<Any>(), mutableListOf(\"this\")));\n  assert(mutableListOf<Any>() == totalMatch(mutableListOf(\"this\"), mutableListOf<Any>()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_114_minSubArraySum",
      "language": "kt",
      "prompt": "// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfun minSubArraySum(nums: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == minSubArraySum(mutableListOf(2, 3, 4, 1, 2, 4)));\n  assert(-6 == minSubArraySum(mutableListOf(-1, -2, -3)));\n  assert(-14 == minSubArraySum(mutableListOf(-1, -2, -3, 2, -10)));\n  assert(-9999999999999999 == minSubArraySum(mutableListOf(-9999999999999999)));\n  assert(0 == minSubArraySum(mutableListOf(0, 10, 20, 1000000)));\n  assert(-6 == minSubArraySum(mutableListOf(-1, -2, -3, 10, -5)));\n  assert(-6 == minSubArraySum(mutableListOf(100, -1, -2, -3, 10, -5)));\n  assert(3 == minSubArraySum(mutableListOf(10, 11, 13, 8, 3, 4)));\n  assert(-33 == minSubArraySum(mutableListOf(100, -33, 32, -1, 0, -2)));\n  assert(-10 == minSubArraySum(mutableListOf(-10)));\n  assert(7 == minSubArraySum(mutableListOf(7)));\n  assert(-1 == minSubArraySum(mutableListOf(1, -1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_44_change_base",
      "language": "kt",
      "prompt": "// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> changeBase(8, 3)\n// '22'\n// >>> changeBase(8, 2)\n// '1000'\n// >>> changeBase(7, 2)\n// '111'\nfun changeBase(x: Int, base: Int): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_44_change_base.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"22\" == changeBase(8, 3));\n  assert(\"100\" == changeBase(9, 3));\n  assert(\"11101010\" == changeBase(234, 2));\n  assert(\"10000\" == changeBase(16, 2));\n  assert(\"1000\" == changeBase(8, 2));\n  assert(\"111\" == changeBase(7, 2));\n  assert(\"2\" == changeBase(2, 3));\n  assert(\"3\" == changeBase(3, 4));\n  assert(\"4\" == changeBase(4, 5));\n  assert(\"5\" == changeBase(5, 6));\n  assert(\"6\" == changeBase(6, 7));\n  assert(\"7\" == changeBase(7, 8));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_40_triples_sum_to_zero",
      "language": "kt",
      "prompt": "// triplesSumToZero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triplesSumToZero([1, 3, 5, 0])\n// False\n// >>> triplesSumToZero([1, 3, -2, 1])\n// True\n// >>> triplesSumToZero([1, 2, 3, 7])\n// False\n// >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triplesSumToZero([1])\n// False\nfun triplesSumToZero(l: MutableList<Int>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == triplesSumToZero(mutableListOf(1, 3, 5, 0)));\n  assert(false == triplesSumToZero(mutableListOf(1, 3, 5, -1)));\n  assert(true == triplesSumToZero(mutableListOf(1, 3, -2, 1)));\n  assert(false == triplesSumToZero(mutableListOf(1, 2, 3, 7)));\n  assert(false == triplesSumToZero(mutableListOf(1, 2, 5, 7)));\n  assert(true == triplesSumToZero(mutableListOf(2, 4, -5, 3, 9, 7)));\n  assert(false == triplesSumToZero(mutableListOf(1)));\n  assert(false == triplesSumToZero(mutableListOf(1, 3, 5, -100)));\n  assert(false == triplesSumToZero(mutableListOf(100, 3, 5, -100)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_151_double_the_difference",
      "language": "kt",
      "prompt": "// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// doubleTheDifference([-1, -2, 0]) == 0\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0]) == 0  \n// If the input list is empty, return 0.\nfun doubleTheDifference(lst: MutableList<Double>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == doubleTheDifference(mutableListOf<Any>()));\n  assert(25 == doubleTheDifference(mutableListOf(5.0, 4.0)));\n  assert(0 == doubleTheDifference(mutableListOf(0.1, 0.2, 0.3)));\n  assert(0 == doubleTheDifference(mutableListOf(-10.0, -20.0, -30.0)));\n  assert(0 == doubleTheDifference(mutableListOf(-1.0, -2.0, 8.0)));\n  assert(34 == doubleTheDifference(mutableListOf(0.2, 3.0, 5.0)));\n  assert(165 == doubleTheDifference(mutableListOf(-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_159_eat",
      "language": "kt",
      "prompt": "// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfun eat(number: Int, need: Int, remaining: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_159_eat.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(11, 4) == eat(5, 6, 10));\n  assert(mutableListOf(12, 1) == eat(4, 8, 9));\n  assert(mutableListOf(11, 0) == eat(1, 10, 10));\n  assert(mutableListOf(7, 0) == eat(2, 11, 5));\n  assert(mutableListOf(9, 2) == eat(4, 5, 7));\n  assert(mutableListOf(5, 0) == eat(4, 5, 1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_41_car_race_collision",
      "language": "kt",
      "prompt": "// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfun carRaceCollision(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(4 == carRaceCollision(2));\n  assert(9 == carRaceCollision(3));\n  assert(16 == carRaceCollision(4));\n  assert(64 == carRaceCollision(8));\n  assert(100 == carRaceCollision(10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_42_incr_list",
      "language": "kt",
      "prompt": "// Return list with elements incremented by 1.\n// >>> incrList([1, 2, 3])\n// [2, 3, 4]\n// >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfun incrList(l: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_42_incr_list.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == incrList(mutableListOf<Any>()));\n  assert(mutableListOf(4, 3, 2) == incrList(mutableListOf(3, 2, 1)));\n  assert(mutableListOf(6, 3, 6, 3, 4, 4, 10, 1, 124) == incrList(mutableListOf(5, 2, 5, 2, 3, 3, 9, 0, 123)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_130_tri",
      "language": "kt",
      "prompt": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nfun tri(n: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_130_tri.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 3, 2, 8) == tri(3));\n  assert(mutableListOf(1, 3, 2, 8, 3) == tri(4));\n  assert(mutableListOf(1, 3, 2, 8, 3, 15) == tri(5));\n  assert(mutableListOf(1, 3, 2, 8, 3, 15, 4) == tri(6));\n  assert(mutableListOf(1, 3, 2, 8, 3, 15, 4, 24) == tri(7));\n  assert(mutableListOf(1, 3, 2, 8, 3, 15, 4, 24, 5) == tri(8));\n  assert(mutableListOf(1, 3, 2, 8, 3, 15, 4, 24, 5, 35) == tri(9));\n  assert(mutableListOf(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11) == tri(20));\n  assert(mutableListOf(1) == tri(0));\n  assert(mutableListOf(1, 3) == tri(1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_162_string_to_md5",
      "language": "kt",
      "prompt": "// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nfun stringToMd5(text: String): String? {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_162_string_to_md5.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"3e25960a79dbc69b674cd4ec67a72c62\" == stringToMd5(\"Hello world\"));\n  assert(undefined == stringToMd5(\"\"));\n  assert(\"0ef78513b0cb8cef12743f5aeb35f888\" == stringToMd5(\"A B C\"));\n  assert(\"5f4dcc3b5aa765d61d8327deb882cf99\" == stringToMd5(\"password\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_85_add",
      "language": "kt",
      "prompt": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfun add(lst: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_85_add.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(88 == add(mutableListOf(4, 88)));\n  assert(122 == add(mutableListOf(4, 5, 6, 7, 2, 122)));\n  assert(0 == add(mutableListOf(4, 0, 6, 7)));\n  assert(12 == add(mutableListOf(4, 4, 6, 8)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_80_is_happy",
      "language": "kt",
      "prompt": "// You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// isHappy(a) => False\n// isHappy(aa) => False\n// isHappy(abcd) => True\n// isHappy(aabb) => False\n// isHappy(adb) => True\n// isHappy(xyy) => False\nfun isHappy(s: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_80_is_happy.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == isHappy(\"a\"));\n  assert(false == isHappy(\"aa\"));\n  assert(true == isHappy(\"abcd\"));\n  assert(false == isHappy(\"aabb\"));\n  assert(true == isHappy(\"adb\"));\n  assert(false == isHappy(\"xyy\"));\n  assert(true == isHappy(\"iopaxpoi\"));\n  assert(false == isHappy(\"iopaxioi\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_98_count_upper",
      "language": "kt",
      "prompt": "// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// countUpper('aBCdEf') returns 1\n// countUpper('abcdefg') returns 0\n// countUpper('dBBE') returns 0\nfun countUpper(s: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_98_count_upper.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == countUpper(\"aBCdEf\"));\n  assert(0 == countUpper(\"abcdefg\"));\n  assert(0 == countUpper(\"dBBE\"));\n  assert(0 == countUpper(\"B\"));\n  assert(1 == countUpper(\"U\"));\n  assert(0 == countUpper(\"\"));\n  assert(2 == countUpper(\"EEEE\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_18_how_many_times",
      "language": "kt",
      "prompt": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> howManyTimes('', 'a')\n// 0\n// >>> howManyTimes('aaa', 'a')\n// 3\n// >>> howManyTimes('aaaa', 'aa')\n// 3\nfun howManyTimes(string: String, substring: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == howManyTimes(\"\", \"x\"));\n  assert(4 == howManyTimes(\"xyxyxyx\", \"x\"));\n  assert(4 == howManyTimes(\"cacacacac\", \"cac\"));\n  assert(1 == howManyTimes(\"john doe\", \"john\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_45_triangle_area",
      "language": "kt",
      "prompt": "// Given length of a side and high return area for a triangle.\n// >>> triangleArea(5, 3)\n// 7.5\nfun triangleArea(a: Int, h: Int): Double {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(7.5 == triangleArea(5, 3));\n  assert(2.0 == triangleArea(2, 2));\n  assert(40.0 == triangleArea(10, 8));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_76_is_simple_power",
      "language": "kt",
      "prompt": "// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// isSimplePower(1, 4) => true\n// isSimplePower(2, 2) => true\n// isSimplePower(8, 2) => true\n// isSimplePower(3, 2) => false\n// isSimplePower(3, 1) => false\n// isSimplePower(5, 3) => false\nfun isSimplePower(x: Int, n: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == isSimplePower(16, 2));\n  assert(false == isSimplePower(143214, 16));\n  assert(true == isSimplePower(4, 2));\n  assert(true == isSimplePower(9, 3));\n  assert(true == isSimplePower(16, 4));\n  assert(false == isSimplePower(24, 2));\n  assert(false == isSimplePower(128, 4));\n  assert(false == isSimplePower(12, 6));\n  assert(true == isSimplePower(1, 1));\n  assert(true == isSimplePower(1, 12));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_109_move_one_ball",
      "language": "kt",
      "prompt": "// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return True else return False.\n// If the given array is empty then return True.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// moveOneBall([3, 4, 5, 1, 2])==>True\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// moveOneBall([3, 5, 4, 1, 2])==>False\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfun moveOneBall(arr: MutableList<Int>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == moveOneBall(mutableListOf(3, 4, 5, 1, 2)));\n  assert(true == moveOneBall(mutableListOf(3, 5, 10, 1, 2)));\n  assert(false == moveOneBall(mutableListOf(4, 3, 1, 2)));\n  assert(false == moveOneBall(mutableListOf(3, 5, 4, 1, 2)));\n  assert(true == moveOneBall(mutableListOf<Any>()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_59_largest_prime_factor",
      "language": "kt",
      "prompt": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largestPrimeFactor(13195)\n// 29\n// >>> largestPrimeFactor(2048)\n// 2\nfun largestPrimeFactor(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(5 == largestPrimeFactor(15));\n  assert(3 == largestPrimeFactor(27));\n  assert(7 == largestPrimeFactor(63));\n  assert(11 == largestPrimeFactor(330));\n  assert(29 == largestPrimeFactor(13195));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_9_rolling_max",
      "language": "kt",
      "prompt": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfun rollingMax(numbers: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == rollingMax(mutableListOf<Any>()));\n  assert(mutableListOf(1, 2, 3, 4) == rollingMax(mutableListOf(1, 2, 3, 4)));\n  assert(mutableListOf(4, 4, 4, 4) == rollingMax(mutableListOf(4, 3, 2, 1)));\n  assert(mutableListOf(3, 3, 3, 100, 100) == rollingMax(mutableListOf(3, 2, 3, 100, 3)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_75_is_multiply_prime",
      "language": "kt",
      "prompt": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// isMultiplyPrime(30) == True\n// 30 = 2 * 3 * 5\nfun isMultiplyPrime(a: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == isMultiplyPrime(5));\n  assert(true == isMultiplyPrime(30));\n  assert(true == isMultiplyPrime(8));\n  assert(false == isMultiplyPrime(10));\n  assert(true == isMultiplyPrime(125));\n  assert(true == isMultiplyPrime(105));\n  assert(false == isMultiplyPrime(126));\n  assert(false == isMultiplyPrime(729));\n  assert(false == isMultiplyPrime(891));\n  assert(true == isMultiplyPrime(1001));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_30_get_positive",
      "language": "kt",
      "prompt": "// Return only positive numbers in the list.\n// >>> getPositive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfun getPositive(l: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_30_get_positive.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(4, 5, 6) == getPositive(mutableListOf(-1, -2, 4, 5, 6)));\n  assert(mutableListOf(5, 3, 2, 3, 3, 9, 123, 1) == getPositive(mutableListOf(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)));\n  assert(mutableListOf<Any>() == getPositive(mutableListOf(-1, -2)));\n  assert(mutableListOf<Any>() == getPositive(mutableListOf<Any>()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_97_multiply",
      "language": "kt",
      "prompt": "// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nfun multiply(a: Int, b: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_97_multiply.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(16 == multiply(148, 412));\n  assert(72 == multiply(19, 28));\n  assert(0 == multiply(2020, 1851));\n  assert(20 == multiply(14, -15));\n  assert(42 == multiply(76, 67));\n  assert(49 == multiply(17, 27));\n  assert(0 == multiply(0, 1));\n  assert(0 == multiply(0, 0));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_81_numerical_letter_grade",
      "language": "kt",
      "prompt": "// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfun numericalLetterGrade(grades: MutableList<Double>): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"A+\", \"B\", \"C-\", \"C\", \"A-\") == numericalLetterGrade(mutableListOf(4.0, 3, 1.7, 2, 3.5)));\n  assert(mutableListOf(\"D+\") == numericalLetterGrade(mutableListOf(1.2)));\n  assert(mutableListOf(\"D-\") == numericalLetterGrade(mutableListOf(0.5)));\n  assert(mutableListOf(\"E\") == numericalLetterGrade(mutableListOf(0.0)));\n  assert(mutableListOf(\"D\", \"D-\", \"C-\", \"B\", \"B+\") == numericalLetterGrade(mutableListOf(1.0, 0.3, 1.5, 2.8, 3.3)));\n  assert(mutableListOf(\"E\", \"D-\") == numericalLetterGrade(mutableListOf(0.0, 0.7)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_144_simplify",
      "language": "kt",
      "prompt": "// Your task is to implement a function that will simplify the expression\n// x * n. The function returns True if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\nfun simplify(x: String, n: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_144_simplify.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == simplify(\"1/5\", \"5/1\"));\n  assert(false == simplify(\"1/6\", \"2/1\"));\n  assert(true == simplify(\"5/1\", \"3/1\"));\n  assert(false == simplify(\"7/10\", \"10/2\"));\n  assert(true == simplify(\"2/10\", \"50/10\"));\n  assert(true == simplify(\"7/2\", \"4/2\"));\n  assert(true == simplify(\"11/6\", \"6/1\"));\n  assert(false == simplify(\"2/3\", \"5/2\"));\n  assert(false == simplify(\"5/2\", \"3/5\"));\n  assert(true == simplify(\"2/4\", \"8/4\"));\n  assert(true == simplify(\"2/4\", \"4/2\"));\n  assert(true == simplify(\"1/5\", \"5/1\"));\n  assert(false == simplify(\"1/5\", \"1/5\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_119_match_parens",
      "language": "kt",
      "prompt": "// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// matchParens(['()(', ')']) == 'Yes'\n// matchParens([')', ')']) == 'No'\nfun matchParens(lst: MutableList<String>): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_119_match_parens.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"Yes\" == matchParens(mutableListOf(\"()(\", \")\")));\n  assert(\"No\" == matchParens(mutableListOf(\")\", \")\")));\n  assert(\"No\" == matchParens(mutableListOf(\"(()(())\", \"())())\")));\n  assert(\"Yes\" == matchParens(mutableListOf(\")())\", \"(()()(\")));\n  assert(\"Yes\" == matchParens(mutableListOf(\"(())))\", \"(()())((\")));\n  assert(\"No\" == matchParens(mutableListOf(\"()\", \"())\")));\n  assert(\"Yes\" == matchParens(mutableListOf(\"(()(\", \"()))()\")));\n  assert(\"No\" == matchParens(mutableListOf(\"((((\", \"((())\")));\n  assert(\"No\" == matchParens(mutableListOf(\")(()\", \"(()(\")));\n  assert(\"No\" == matchParens(mutableListOf(\")(\", \")(\")));\n  assert(\"Yes\" == matchParens(mutableListOf(\"(\", \")\")));\n  assert(\"Yes\" == matchParens(mutableListOf(\")\", \"(\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_146_specialFilter",
      "language": "kt",
      "prompt": "// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfun specialFilter(nums: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == specialFilter(mutableListOf(5, -2, 1, -5)));\n  assert(1 == specialFilter(mutableListOf(15, -73, 14, -15)));\n  assert(2 == specialFilter(mutableListOf(33, -2, -3, 45, 21, 109)));\n  assert(4 == specialFilter(mutableListOf(43, -12, 93, 125, 121, 109)));\n  assert(3 == specialFilter(mutableListOf(71, -2, -33, 75, 21, 19)));\n  assert(0 == specialFilter(mutableListOf(1)));\n  assert(0 == specialFilter(mutableListOf<Any>()));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_28_concatenate",
      "language": "kt",
      "prompt": "// Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nfun concatenate(strings: MutableList<String>): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_28_concatenate.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"\" == concatenate(mutableListOf<Any>()));\n  assert(\"xyz\" == concatenate(mutableListOf(\"x\", \"y\", \"z\")));\n  assert(\"xyzwk\" == concatenate(mutableListOf(\"x\", \"y\", \"z\", \"w\", \"k\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_47_median",
      "language": "kt",
      "prompt": "// Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfun median(l: MutableList<Int>): Double {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_47_median.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(3 == median(mutableListOf(3, 1, 2, 4, 5)));\n  assert(8.0 == median(mutableListOf(-10, 4, 6, 1000, 10, 20)));\n  assert(5 == median(mutableListOf(5)));\n  assert(5.5 == median(mutableListOf(6, 5)));\n  assert(7 == median(mutableListOf(8, 1, 3, 9, 9, 2, 7)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_0_has_close_elements",
      "language": "kt",
      "prompt": "// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nfun hasCloseElements(numbers: MutableList<Double>, threshold: Double): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == hasCloseElements(mutableListOf(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3));\n  assert(false == hasCloseElements(mutableListOf(1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05));\n  assert(true == hasCloseElements(mutableListOf(1.0, 2.0, 5.9, 4.0, 5.0), 0.95));\n  assert(false == hasCloseElements(mutableListOf(1.0, 2.0, 5.9, 4.0, 5.0), 0.8));\n  assert(true == hasCloseElements(mutableListOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1));\n  assert(true == hasCloseElements(mutableListOf(1.1, 2.2, 3.1, 4.1, 5.1), 1.0));\n  assert(false == hasCloseElements(mutableListOf(1.1, 2.2, 3.1, 4.1, 5.1), 0.5));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_136_largest_smallest_integers",
      "language": "kt",
      "prompt": "// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largestSmallestIntegers([]) == (None, None)\n// largestSmallestIntegers([0]) == (None, None)\nfun largestSmallestIntegers(lst: MutableList<Int>): Pair<Int?, Int?> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(Pair(undefined, 1) == largestSmallestIntegers(mutableListOf(2, 4, 1, 3, 5, 7)));\n  assert(Pair(undefined, 1) == largestSmallestIntegers(mutableListOf(2, 4, 1, 3, 5, 7, 0)));\n  assert(Pair(-2, 1) == largestSmallestIntegers(mutableListOf(1, 3, 2, 4, 5, 6, -2)));\n  assert(Pair(-7, 2) == largestSmallestIntegers(mutableListOf(4, 5, 3, 6, 2, 7, -7)));\n  assert(Pair(-9, 2) == largestSmallestIntegers(mutableListOf(7, 3, 8, 4, 9, 2, 5, -9)));\n  assert(Pair(undefined, undefined) == largestSmallestIntegers(mutableListOf<Any>()));\n  assert(Pair(undefined, undefined) == largestSmallestIntegers(mutableListOf(0)));\n  assert(Pair(-1, undefined) == largestSmallestIntegers(mutableListOf(-1, -3, -5, -6)));\n  assert(Pair(-1, undefined) == largestSmallestIntegers(mutableListOf(-1, -3, -5, -6, 0)));\n  assert(Pair(-3, 1) == largestSmallestIntegers(mutableListOf(-6, -4, -4, -3, 1)));\n  assert(Pair(-3, 1) == largestSmallestIntegers(mutableListOf(-6, -4, -4, -3, -100, 1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_123_get_odd_collatz",
      "language": "kt",
      "prompt": "// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nfun getOddCollatz(n: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 5, 7, 11, 13, 17) == getOddCollatz(14));\n  assert(mutableListOf(1, 5) == getOddCollatz(5));\n  assert(mutableListOf(1, 3, 5) == getOddCollatz(12));\n  assert(mutableListOf(1) == getOddCollatz(1));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_132_is_nested",
      "language": "kt",
      "prompt": "// Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// isNested('[[]]') \u279e True\n// isNested('[]]]]]]][[[[[]') \u279e False\n// isNested('[][]') \u279e False\n// isNested('[]') \u279e False\n// isNested('[[][]]') \u279e True\n// isNested('[[]][[') \u279e True\nfun isNested(string: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_132_is_nested.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == isNested(\"[[]]\"));\n  assert(false == isNested(\"[]]]]]]][[[[[]\"));\n  assert(false == isNested(\"[][]\"));\n  assert(false == isNested(\"[]\"));\n  assert(true == isNested(\"[[[[]]]]\"));\n  assert(false == isNested(\"[]]]]]]]]]]\"));\n  assert(true == isNested(\"[][][[]]\"));\n  assert(false == isNested(\"[[]\"));\n  assert(false == isNested(\"[]]\"));\n  assert(true == isNested(\"[[]][[\"));\n  assert(true == isNested(\"[[][]]\"));\n  assert(false == isNested(\"\"));\n  assert(false == isNested(\"[[[[[[[[\"));\n  assert(false == isNested(\"]]]]]]]]\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_131_digits",
      "language": "kt",
      "prompt": "// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nfun digits(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_131_digits.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(5 == digits(5));\n  assert(5 == digits(54));\n  assert(1 == digits(120));\n  assert(5 == digits(5014));\n  assert(315 == digits(98765));\n  assert(2625 == digits(5576543));\n  assert(0 == digits(2468));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_72_will_it_fly",
      "language": "kt",
      "prompt": "// Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// willItFly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// willItFly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// willItFly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// willItFly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfun willItFly(q: MutableList<Int>, w: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == willItFly(mutableListOf(3, 2, 3), 9));\n  assert(false == willItFly(mutableListOf(1, 2), 5));\n  assert(true == willItFly(mutableListOf(3), 5));\n  assert(false == willItFly(mutableListOf(3, 2, 3), 1));\n  assert(false == willItFly(mutableListOf(1, 2, 3), 6));\n  assert(true == willItFly(mutableListOf(5), 5));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_7_filter_by_substring",
      "language": "kt",
      "prompt": "// Filter an input list of strings only for ones that contain given substring\n// >>> filterBySubstring([], 'a')\n// []\n// >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfun filterBySubstring(strings: MutableList<String>, substring: String): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == filterBySubstring(mutableListOf<Any>(), \"john\"));\n  assert(mutableListOf(\"xxx\", \"xxxAAA\", \"xxx\") == filterBySubstring(mutableListOf(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\"));\n  assert(mutableListOf(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\") == filterBySubstring(mutableListOf(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\"));\n  assert(mutableListOf(\"grunt\", \"prune\") == filterBySubstring(mutableListOf(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"), \"run\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_113_odd_count",
      "language": "kt",
      "prompt": "// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> oddCount(['1234567'])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> oddCount(['3',\"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfun oddCount(lst: MutableList<String>): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_113_odd_count.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"the number of odd elements 4n the str4ng 4 of the 4nput.\") == oddCount(mutableListOf(\"1234567\")));\n  assert(mutableListOf(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\") == oddCount(mutableListOf(\"3\", \"11111111\")));\n  assert(mutableListOf(\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\") == oddCount(mutableListOf(\"271\", \"137\", \"314\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_78_hex_key",
      "language": "kt",
      "prompt": "// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nfun hexKey(num: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_78_hex_key.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == hexKey(\"AB\"));\n  assert(2 == hexKey(\"1077E\"));\n  assert(4 == hexKey(\"ABED1A33\"));\n  assert(2 == hexKey(\"2020\"));\n  assert(6 == hexKey(\"123456789ABCDEF0\"));\n  assert(12 == hexKey(\"112233445566778899AABBCCDDEEFF00\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_112_reverse_delete",
      "language": "kt",
      "prompt": "// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfun reverseDelete(s: String, c: String): Pair<String, Boolean> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(Pair(\"bcd\", false) == reverseDelete(\"abcde\", \"ae\"));\n  assert(Pair(\"acdef\", false) == reverseDelete(\"abcdef\", \"b\"));\n  assert(Pair(\"cdedc\", true) == reverseDelete(\"abcdedcba\", \"ab\"));\n  assert(Pair(\"dik\", false) == reverseDelete(\"dwik\", \"w\"));\n  assert(Pair(\"\", true) == reverseDelete(\"a\", \"a\"));\n  assert(Pair(\"abcdedcba\", true) == reverseDelete(\"abcdedcba\", \"\"));\n  assert(Pair(\"abcdedcba\", true) == reverseDelete(\"abcdedcba\", \"v\"));\n  assert(Pair(\"abba\", true) == reverseDelete(\"vabba\", \"v\"));\n  assert(Pair(\"\", true) == reverseDelete(\"mamma\", \"mia\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_77_iscube",
      "language": "kt",
      "prompt": "// Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfun iscube(a: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_77_iscube.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == iscube(1));\n  assert(false == iscube(2));\n  assert(true == iscube(-1));\n  assert(true == iscube(64));\n  assert(false == iscube(180));\n  assert(true == iscube(1000));\n  assert(true == iscube(0));\n  assert(false == iscube(1729));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_68_pluck",
      "language": "kt",
      "prompt": "// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfun pluck(arr: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_68_pluck.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(2, 1) == pluck(mutableListOf(4, 2, 3)));\n  assert(mutableListOf(2, 1) == pluck(mutableListOf(1, 2, 3)));\n  assert(mutableListOf<Any>() == pluck(mutableListOf<Any>()));\n  assert(mutableListOf(0, 1) == pluck(mutableListOf(5, 0, 3, 0, 4, 2)));\n  assert(mutableListOf(0, 3) == pluck(mutableListOf(1, 2, 3, 0, 5, 3)));\n  assert(mutableListOf(4, 1) == pluck(mutableListOf(5, 4, 8, 4, 8)));\n  assert(mutableListOf(6, 1) == pluck(mutableListOf(7, 6, 7, 1)));\n  assert(mutableListOf<Any>() == pluck(mutableListOf(7, 9, 7, 1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_25_factorize",
      "language": "kt",
      "prompt": "// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfun factorize(n: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_25_factorize.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(2) == factorize(2));\n  assert(mutableListOf(2, 2) == factorize(4));\n  assert(mutableListOf(2, 2, 2) == factorize(8));\n  assert(mutableListOf(3, 19) == factorize(57));\n  assert(mutableListOf(3, 3, 19, 19) == factorize(3249));\n  assert(mutableListOf(3, 3, 3, 19, 19, 19) == factorize(185193));\n  assert(mutableListOf(3, 19, 19, 19) == factorize(20577));\n  assert(mutableListOf(2, 3, 3) == factorize(18));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_29_filter_by_prefix",
      "language": "kt",
      "prompt": "// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filterByPrefix([], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfun filterByPrefix(strings: MutableList<String>, prefix: String): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == filterByPrefix(mutableListOf<Any>(), \"john\"));\n  assert(mutableListOf(\"xxx\", \"xxxAAA\", \"xxx\") == filterByPrefix(mutableListOf(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_90_next_smallest",
      "language": "kt",
      "prompt": "// You are given a list of integers.\n// Write a function nextSmallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([5, 1, 4, 3, 2]) == 2\n// nextSmallest([]) == None\n// nextSmallest([1, 1]) == None\nfun nextSmallest(lst: MutableList<Int>): Int? {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(2 == nextSmallest(mutableListOf(1, 2, 3, 4, 5)));\n  assert(2 == nextSmallest(mutableListOf(5, 1, 4, 3, 2)));\n  assert(undefined == nextSmallest(mutableListOf<Any>()));\n  assert(undefined == nextSmallest(mutableListOf(1, 1)));\n  assert(1 == nextSmallest(mutableListOf(1, 1, 1, 1, 0)));\n  assert(undefined == nextSmallest(mutableListOf(1, 1)));\n  assert(-35 == nextSmallest(mutableListOf(-35, 34, 12, -45)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_145_order_by_points",
      "language": "kt",
      "prompt": "// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> orderByPoints([]) == []\nfun orderByPoints(nums: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(-1, -11, 1, -12, 11) == orderByPoints(mutableListOf(1, 11, -1, -11, -12)));\n  assert(mutableListOf(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457) == orderByPoints(mutableListOf(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)));\n  assert(mutableListOf<Any>() == orderByPoints(mutableListOf<Any>()));\n  assert(mutableListOf(-3, -32, -98, -11, 1, 2, 43, 54) == orderByPoints(mutableListOf(1, -11, -32, 43, 54, -98, 2, -3)));\n  assert(mutableListOf(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9) == orderByPoints(mutableListOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));\n  assert(mutableListOf(-76, -21, 0, 4, 23, 6, 6) == orderByPoints(mutableListOf(0, 6, 6, -76, -21, 23, 4)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_142_sum_squares",
      "language": "kt",
      "prompt": "// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nfun sumSquares(lst: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(6 == sumSquares(mutableListOf(1, 2, 3)));\n  assert(14 == sumSquares(mutableListOf(1, 4, 9)));\n  assert(0 == sumSquares(mutableListOf<Any>()));\n  assert(9 == sumSquares(mutableListOf(1, 1, 1, 1, 1, 1, 1, 1, 1)));\n  assert(-3 == sumSquares(mutableListOf(-1, -1, -1, -1, -1, -1, -1, -1, -1)));\n  assert(0 == sumSquares(mutableListOf(0)));\n  assert(-126 == sumSquares(mutableListOf(-1, -5, 2, -1, -5)));\n  assert(3030 == sumSquares(mutableListOf(-56, -99, 1, 0, -2)));\n  assert(0 == sumSquares(mutableListOf(-1, 0, 0, 0, 0, 0, 0, 0, -1)));\n  assert(-14196 == sumSquares(mutableListOf(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)));\n  assert(-1448 == sumSquares(mutableListOf(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_63_fibfib",
      "language": "kt",
      "prompt": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfun fibfib(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_63_fibfib.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == fibfib(2));\n  assert(0 == fibfib(1));\n  assert(4 == fibfib(5));\n  assert(24 == fibfib(8));\n  assert(81 == fibfib(10));\n  assert(274 == fibfib(12));\n  assert(927 == fibfib(14));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_23_strlen",
      "language": "kt",
      "prompt": "// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nfun strlen(string: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_23_strlen.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == strlen(\"\"));\n  assert(1 == strlen(\"x\"));\n  assert(9 == strlen(\"asdasnakj\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_51_remove_vowels",
      "language": "kt",
      "prompt": "// removeVowels is a function that takes string and returns string without vowels.\n// >>> removeVowels('')\n// ''\n// >>> removeVowels('abcdef')\n// 'bcdf'\n// >>> removeVowels('aaaaa')\n// ''\n// >>> removeVowels('aaBAA')\n// 'B'\n// >>> removeVowels('zbcd')\n// 'zbcd'\nfun removeVowels(text: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"\" == removeVowels(\"\"));\n  assert(\"bcdf\\nghjklm\" == removeVowels(\"abcdef\\nghijklm\"));\n  assert(\"fdcb\" == removeVowels(\"fedcba\"));\n  assert(\"\" == removeVowels(\"eeeee\"));\n  assert(\"cB\" == removeVowels(\"acBAA\"));\n  assert(\"cB\" == removeVowels(\"EcBOO\"));\n  assert(\"ybcd\" == removeVowels(\"ybcd\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_99_closest_integer",
      "language": "kt",
      "prompt": "// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closestInteger(\"10\")\n// 10\n// >>> closestInteger(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closestInteger(\"14.5\") should\n// return 15 and closestInteger(\"-14.5\") should return -15.\nfun closestInteger(value: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(10 == closestInteger(\"10\"));\n  assert(15 == closestInteger(\"14.5\"));\n  assert(-16 == closestInteger(\"-15.5\"));\n  assert(15 == closestInteger(\"15.3\"));\n  assert(0 == closestInteger(\"0\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_133_sum_squares",
      "language": "kt",
      "prompt": "// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nfun sumSquares(lst: MutableList<Double>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(14 == sumSquares(mutableListOf(1.0, 2.0, 3.0)));\n  assert(14 == sumSquares(mutableListOf(1.0, 2.0, 3.0)));\n  assert(84 == sumSquares(mutableListOf(1.0, 3.0, 5.0, 7.0)));\n  assert(29 == sumSquares(mutableListOf(1.4, 4.2, 0.0)));\n  assert(6 == sumSquares(mutableListOf(-2.4, 1.0, 1.0)));\n  assert(10230 == sumSquares(mutableListOf(100.0, 1.0, 15.0, 2.0)));\n  assert(200000000 == sumSquares(mutableListOf(10000.0, 10000.0)));\n  assert(75 == sumSquares(mutableListOf(-1.4, 4.6, 6.3)));\n  assert(1086 == sumSquares(mutableListOf(-1.4, 17.9, 18.9, 19.9)));\n  assert(0 == sumSquares(mutableListOf(0.0)));\n  assert(1 == sumSquares(mutableListOf(-1.0)));\n  assert(2 == sumSquares(mutableListOf(-1.0, 1.0, 0.0)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_31_is_prime",
      "language": "kt",
      "prompt": "// Return true if a given number is prime, and false otherwise.\n// >>> isPrime(6)\n// False\n// >>> isPrime(101)\n// True\n// >>> isPrime(11)\n// True\n// >>> isPrime(13441)\n// True\n// >>> isPrime(61)\n// True\n// >>> isPrime(4)\n// False\n// >>> isPrime(1)\n// False\nfun isPrime(n: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_31_is_prime.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == isPrime(6));\n  assert(true == isPrime(101));\n  assert(true == isPrime(11));\n  assert(true == isPrime(13441));\n  assert(true == isPrime(61));\n  assert(false == isPrime(4));\n  assert(false == isPrime(1));\n  assert(true == isPrime(5));\n  assert(true == isPrime(11));\n  assert(true == isPrime(17));\n  assert(false == isPrime(85));\n  assert(false == isPrime(77));\n  assert(false == isPrime(255379));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_62_derivative",
      "language": "kt",
      "prompt": "// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfun derivative(xs: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_62_derivative.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 4, 12, 20) == derivative(mutableListOf(3, 1, 2, 4, 5)));\n  assert(mutableListOf(2, 6) == derivative(mutableListOf(1, 2, 3)));\n  assert(mutableListOf(2, 2) == derivative(mutableListOf(3, 2, 1)));\n  assert(mutableListOf(2, 2, 0, 16) == derivative(mutableListOf(3, 2, 1, 0, 4)));\n  assert(mutableListOf<Any>() == derivative(mutableListOf(1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_158_find_max",
      "language": "kt",
      "prompt": "// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// findMax([\"name\", \"of\", \"string\"]) == \"string\"\n// findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n// findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfun findMax(words: MutableList<String>): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_158_find_max.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"string\" == findMax(mutableListOf(\"name\", \"of\", \"string\")));\n  assert(\"enam\" == findMax(mutableListOf(\"name\", \"enam\", \"game\")));\n  assert(\"aaaaaaa\" == findMax(mutableListOf(\"aaaaaaa\", \"bb\", \"cc\")));\n  assert(\"abc\" == findMax(mutableListOf(\"abc\", \"cba\")));\n  assert(\"footbott\" == findMax(mutableListOf(\"play\", \"this\", \"game\", \"of\", \"footbott\")));\n  assert(\"gonna\" == findMax(mutableListOf(\"we\", \"are\", \"gonna\", \"rock\")));\n  assert(\"nation\" == findMax(mutableListOf(\"we\", \"are\", \"a\", \"mad\", \"nation\")));\n  assert(\"this\" == findMax(mutableListOf(\"this\", \"is\", \"a\", \"prrk\")));\n  assert(\"b\" == findMax(mutableListOf(\"b\")));\n  assert(\"play\" == findMax(mutableListOf(\"play\", \"play\", \"play\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_108_count_nums",
      "language": "kt",
      "prompt": "// Write a function countNums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> countNums([]) == 0\n// >>> countNums([-1, 11, -11]) == 1\n// >>> countNums([1, 1, 2]) == 3\nfun countNums(arr: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_108_count_nums.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == countNums(mutableListOf<Any>()));\n  assert(0 == countNums(mutableListOf(-1, -2, 0)));\n  assert(6 == countNums(mutableListOf(1, 1, 2, -2, 3, 4, 5)));\n  assert(5 == countNums(mutableListOf(1, 6, 9, -6, 0, 1, 5)));\n  assert(4 == countNums(mutableListOf(1, 100, 98, -7, 1, -1)));\n  assert(5 == countNums(mutableListOf(12, 23, 34, -45, -56, 0)));\n  assert(1 == countNums(mutableListOf(0, 1)));\n  assert(1 == countNums(mutableListOf(1)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_22_filter_integers",
      "language": "kt",
      "prompt": "// Filter given list of any python values only for integers\n// >>> filterIntegers(['a', 3.14, 5])\n// [5]\n// >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nfun filterIntegers(values: MutableList<any>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == filterIntegers(mutableListOf<Any>()));\n  assert(mutableListOf(4, 9) == filterIntegers(mutableListOf(4, mutableMapOf(), mutableListOf<Any>(), 23.2, 9, \"adasd\")));\n  assert(mutableListOf(3, 3, 3) == filterIntegers(mutableListOf(3, \"c\", 3, 3, \"a\", \"b\")));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_2_truncate_number",
      "language": "kt",
      "prompt": "// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncateNumber(3.5)\n// 0.5\nfun truncateNumber(number: Double): Double {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0.5 == truncateNumber(3.5));\n  assert(0.25 == truncateNumber(1.25));\n  assert(0.0 == truncateNumber(123.0));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_1_separate_paren_groups",
      "language": "kt",
      "prompt": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separateParenGroups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nfun separateParenGroups(paren_string: String): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(\"(()())\", \"((()))\", \"()\", \"((())()())\") == separateParenGroups(\"(()()) ((())) () ((())()())\"));\n  assert(mutableListOf(\"()\", \"(())\", \"((()))\", \"(((())))\") == separateParenGroups(\"() (()) ((())) (((())))\"));\n  assert(mutableListOf(\"(()(())((())))\") == separateParenGroups(\"(()(())((())))\"));\n  assert(mutableListOf(\"()\", \"(())\", \"(()())\") == separateParenGroups(\"( ) (( )) (( )( ))\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_126_is_sorted",
      "language": "kt",
      "prompt": "// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// isSorted([5]) \u279e True\n// isSorted([1, 2, 3, 4, 5]) \u279e True\n// isSorted([1, 3, 2, 4, 5]) \u279e False\n// isSorted([1, 2, 3, 4, 5, 6]) \u279e True\n// isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n// isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n// isSorted([1, 2, 2, 3, 3, 4]) \u279e True\n// isSorted([1, 2, 2, 2, 3, 4]) \u279e False\nfun isSorted(lst: MutableList<Int>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == isSorted(mutableListOf(5)));\n  assert(true == isSorted(mutableListOf(1, 2, 3, 4, 5)));\n  assert(false == isSorted(mutableListOf(1, 3, 2, 4, 5)));\n  assert(true == isSorted(mutableListOf(1, 2, 3, 4, 5, 6)));\n  assert(true == isSorted(mutableListOf(1, 2, 3, 4, 5, 6, 7)));\n  assert(false == isSorted(mutableListOf(1, 3, 2, 4, 5, 6, 7)));\n  assert(true == isSorted(mutableListOf<Any>()));\n  assert(true == isSorted(mutableListOf(1)));\n  assert(false == isSorted(mutableListOf(3, 2, 1)));\n  assert(false == isSorted(mutableListOf(1, 2, 2, 2, 3, 4)));\n  assert(false == isSorted(mutableListOf(1, 2, 3, 3, 3, 4)));\n  assert(true == isSorted(mutableListOf(1, 2, 2, 3, 3, 4)));\n  assert(true == isSorted(mutableListOf(1, 2, 3, 4)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_128_prod_signs",
      "language": "kt",
      "prompt": "// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prodSigns([1, 2, 2, -4]) == -9\n// >>> prodSigns([0, 1]) == 0\n// >>> prodSigns([]) == None\nfun prodSigns(arr: MutableList<Int>): Int? {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(-9 == prodSigns(mutableListOf(1, 2, 2, -4)));\n  assert(0 == prodSigns(mutableListOf(0, 1)));\n  assert(-10 == prodSigns(mutableListOf(1, 1, 1, 2, 3, -1, 1)));\n  assert(undefined == prodSigns(mutableListOf<Any>()));\n  assert(20 == prodSigns(mutableListOf(2, 4, 1, 2, -1, -1, 9)));\n  assert(4 == prodSigns(mutableListOf(-1, 1, -1, 1)));\n  assert(-4 == prodSigns(mutableListOf(-1, 1, 1, 1)));\n  assert(0 == prodSigns(mutableListOf(-1, 1, 1, 0)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_16_count_distinct_characters",
      "language": "kt",
      "prompt": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> countDistinctCharacters('xyzXYZ')\n// 3\n// >>> countDistinctCharacters('Jerry')\n// 4\nfun countDistinctCharacters(string: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == countDistinctCharacters(\"\"));\n  assert(5 == countDistinctCharacters(\"abcde\"));\n  assert(5 == countDistinctCharacters(\"abcdecadeCADE\"));\n  assert(1 == countDistinctCharacters(\"aaaaAAAAaaaa\"));\n  assert(5 == countDistinctCharacters(\"Jerry jERRY JeRRRY\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_147_get_max_triples",
      "language": "kt",
      "prompt": "// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfun getMaxTriples(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == getMaxTriples(5));\n  assert(4 == getMaxTriples(6));\n  assert(36 == getMaxTriples(10));\n  assert(53361 == getMaxTriples(100));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_14_all_prefixes",
      "language": "kt",
      "prompt": "// Return list of all prefixes from shortest to longest of the input string\n// >>> allPrefixes('abc')\n// ['a', 'ab', 'abc']\nfun allPrefixes(string: String): MutableList<String> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == allPrefixes(\"\"));\n  assert(mutableListOf(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\") == allPrefixes(\"asdfgh\"));\n  assert(mutableListOf(\"W\", \"WW\", \"WWW\") == allPrefixes(\"WWW\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_93_encode",
      "language": "kt",
      "prompt": "// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfun encode(message: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_93_encode.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"tgst\" == encode(\"TEST\"));\n  assert(\"mWDCSKR\" == encode(\"Mudasir\"));\n  assert(\"ygs\" == encode(\"YES\"));\n  assert(\"tHKS KS C MGSSCGG\" == encode(\"This is a message\"));\n  assert(\"k dQnT kNqW wHcT Tq wRkTg\" == encode(\"I DoNt KnOw WhAt tO WrItE\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_53_add",
      "language": "kt",
      "prompt": "// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfun add(x: Int, y: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_53_add.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == add(0, 1));\n  assert(1 == add(1, 0));\n  assert(5 == add(2, 3));\n  assert(12 == add(5, 7));\n  assert(12 == add(7, 5));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_134_check_if_last_char_is_a_letter",
      "language": "kt",
      "prompt": "// Create a function that returns True if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// checkIfLastCharIsALetter(\"apple pie\") \u279e False\n// checkIfLastCharIsALetter(\"apple pi e\") \u279e True\n// checkIfLastCharIsALetter(\"apple pi e \") \u279e False\n// checkIfLastCharIsALetter(\"\") \u279e False\nfun checkIfLastCharIsALetter(txt: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == checkIfLastCharIsALetter(\"apple\"));\n  assert(true == checkIfLastCharIsALetter(\"apple pi e\"));\n  assert(false == checkIfLastCharIsALetter(\"eeeee\"));\n  assert(true == checkIfLastCharIsALetter(\"A\"));\n  assert(false == checkIfLastCharIsALetter(\"Pumpkin pie \"));\n  assert(false == checkIfLastCharIsALetter(\"Pumpkin pie 1\"));\n  assert(false == checkIfLastCharIsALetter(\"\"));\n  assert(false == checkIfLastCharIsALetter(\"eeeee e \"));\n  assert(false == checkIfLastCharIsALetter(\"apple pie\"));\n  assert(false == checkIfLastCharIsALetter(\"apple pi e \"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_43_pairs_sum_to_zero",
      "language": "kt",
      "prompt": "// pairsSumToZero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairsSumToZero([1, 3, 5, 0])\n// False\n// >>> pairsSumToZero([1, 3, -2, 1])\n// False\n// >>> pairsSumToZero([1, 2, 3, 7])\n// False\n// >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairsSumToZero([1])\n// False\nfun pairsSumToZero(l: MutableList<Int>): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(false == pairsSumToZero(mutableListOf(1, 3, 5, 0)));\n  assert(false == pairsSumToZero(mutableListOf(1, 3, -2, 1)));\n  assert(false == pairsSumToZero(mutableListOf(1, 2, 3, 7)));\n  assert(true == pairsSumToZero(mutableListOf(2, 4, -5, 3, 5, 7)));\n  assert(false == pairsSumToZero(mutableListOf(1)));\n  assert(true == pairsSumToZero(mutableListOf(-3, 9, -1, 3, 2, 30)));\n  assert(true == pairsSumToZero(mutableListOf(-3, 9, -1, 3, 2, 31)));\n  assert(false == pairsSumToZero(mutableListOf(-3, 9, -1, 4, 2, 30)));\n  assert(false == pairsSumToZero(mutableListOf(-3, 9, -1, 4, 2, 31)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_79_decimal_to_binary",
      "language": "kt",
      "prompt": "// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimalToBinary(15)   # returns \"db1111db\"\n// decimalToBinary(32)   # returns \"db100000db\"\nfun decimalToBinary(decimal: Int): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"db0db\" == decimalToBinary(0));\n  assert(\"db100000db\" == decimalToBinary(32));\n  assert(\"db1100111db\" == decimalToBinary(103));\n  assert(\"db1111db\" == decimalToBinary(15));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_152_compare",
      "language": "kt",
      "prompt": "// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nfun compare(game: MutableList<Int>, guess: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_152_compare.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(0, 0, 0, 0, 3, 3) == compare(mutableListOf(1, 2, 3, 4, 5, 1), mutableListOf(1, 2, 3, 4, 2, -2)));\n  assert(mutableListOf(0, 0, 0, 0, 0, 0) == compare(mutableListOf(0, 0, 0, 0, 0, 0), mutableListOf(0, 0, 0, 0, 0, 0)));\n  assert(mutableListOf(2, 4, 6) == compare(mutableListOf(1, 2, 3), mutableListOf(-1, -2, -3)));\n  assert(mutableListOf(2, 0, 0, 1) == compare(mutableListOf(1, 2, 3, 5), mutableListOf(-1, 2, 3, 4)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_127_intersection",
      "language": "kt",
      "prompt": "// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfun intersection(interval1: Pair<Int, Int>, interval2: Pair<Int, Int>): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_127_intersection.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"NO\" == intersection(Pair(1, 2), Pair(2, 3)));\n  assert(\"NO\" == intersection(Pair(-1, 1), Pair(0, 4)));\n  assert(\"YES\" == intersection(Pair(-3, -1), Pair(-5, 5)));\n  assert(\"YES\" == intersection(Pair(-2, 2), Pair(-4, 0)));\n  assert(\"NO\" == intersection(Pair(-11, 2), Pair(-1, -1)));\n  assert(\"NO\" == intersection(Pair(1, 2), Pair(3, 5)));\n  assert(\"NO\" == intersection(Pair(1, 2), Pair(1, 2)));\n  assert(\"NO\" == intersection(Pair(-2, -2), Pair(-3, -2)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_71_triangle_area",
      "language": "kt",
      "prompt": "// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == -1\nfun triangleArea(a: Int, b: Int, c: Int): Double {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(6.0 == triangleArea(3, 4, 5));\n  assert(-1 == triangleArea(1, 2, 10));\n  assert(8.18 == triangleArea(4, 8, 5));\n  assert(1.73 == triangleArea(2, 2, 2));\n  assert(-1 == triangleArea(1, 2, 3));\n  assert(16.25 == triangleArea(10, 5, 7));\n  assert(-1 == triangleArea(2, 6, 3));\n  assert(0.43 == triangleArea(1, 1, 1));\n  assert(-1 == triangleArea(2, 2, 10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_89_encrypt",
      "language": "kt",
      "prompt": "// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\nfun encrypt(s: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_89_encrypt.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"lm\" == encrypt(\"hi\"));\n  assert(\"ewhjklnop\" == encrypt(\"asdfghjkl\"));\n  assert(\"kj\" == encrypt(\"gf\"));\n  assert(\"ix\" == encrypt(\"et\"));\n  assert(\"jeiajeaijeiak\" == encrypt(\"faewfawefaewg\"));\n  assert(\"lippsqcjvmirh\" == encrypt(\"hellomyfriend\"));\n  assert(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" == encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"));\n  assert(\"e\" == encrypt(\"a\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_157_right_angle_triangle",
      "language": "kt",
      "prompt": "// Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// rightAngleTriangle(3, 4, 5) == True\n// rightAngleTriangle(1, 2, 3) == False\nfun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == rightAngleTriangle(3, 4, 5));\n  assert(false == rightAngleTriangle(1, 2, 3));\n  assert(true == rightAngleTriangle(10, 6, 8));\n  assert(false == rightAngleTriangle(2, 2, 2));\n  assert(true == rightAngleTriangle(7, 24, 25));\n  assert(false == rightAngleTriangle(10, 5, 7));\n  assert(true == rightAngleTriangle(5, 12, 13));\n  assert(true == rightAngleTriangle(15, 8, 17));\n  assert(true == rightAngleTriangle(48, 55, 73));\n  assert(false == rightAngleTriangle(1, 1, 1));\n  assert(false == rightAngleTriangle(2, 2, 10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_140_fix_spaces",
      "language": "kt",
      "prompt": "// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\" Example 2\") == \"_Example_2\"\n// fixSpaces(\" Example   3\") == \"_Example-3\"\nfun fixSpaces(text: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"Example\" == fixSpaces(\"Example\"));\n  assert(\"Mudasir_Hanif_\" == fixSpaces(\"Mudasir Hanif \"));\n  assert(\"Yellow_Yellow__Dirty__Fellow\" == fixSpaces(\"Yellow Yellow  Dirty  Fellow\"));\n  assert(\"Exa-mple\" == fixSpaces(\"Exa   mple\"));\n  assert(\"-Exa_1_2_2_mple\" == fixSpaces(\"   Exa 1 2 2 mple\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_56_correct_bracketing",
      "language": "kt",
      "prompt": "// brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correctBracketing(\"<\")\n// False\n// >>> correctBracketing(\"<>\")\n// True\n// >>> correctBracketing(\"<<><>>\")\n// True\n// >>> correctBracketing(\"><<>\")\n// False\nfun correctBracketing(brackets: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == correctBracketing(\"<>\"));\n  assert(true == correctBracketing(\"<<><>>\"));\n  assert(true == correctBracketing(\"<><><<><>><>\"));\n  assert(true == correctBracketing(\"<><><<<><><>><>><<><><<>>>\"));\n  assert(false == correctBracketing(\"<<<><>>>>\"));\n  assert(false == correctBracketing(\"><<>\"));\n  assert(false == correctBracketing(\"<\"));\n  assert(false == correctBracketing(\"<<<<\"));\n  assert(false == correctBracketing(\">\"));\n  assert(false == correctBracketing(\"<<>\"));\n  assert(false == correctBracketing(\"<><><<><>><>><<>\"));\n  assert(false == correctBracketing(\"<><><<><>><>>><>\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_5_intersperse",
      "language": "kt",
      "prompt": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfun intersperse(numbers: MutableList<Int>, delimeter: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_5_intersperse.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == intersperse(mutableListOf<Any>(), 7));\n  assert(mutableListOf(5, 8, 6, 8, 3, 8, 2) == intersperse(mutableListOf(5, 6, 3, 2), 8));\n  assert(mutableListOf(2, 2, 2, 2, 2) == intersperse(mutableListOf(2, 2, 2), 2));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_10_make_palindrome",
      "language": "kt",
      "prompt": "// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> makePalindrome('')\n// ''\n// >>> makePalindrome('cat')\n// 'catac'\n// >>> makePalindrome('cata')\n// 'catac'\nfun makePalindrome(string: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_10_make_palindrome.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"\" == makePalindrome(\"\"));\n  assert(\"x\" == makePalindrome(\"x\"));\n  assert(\"xyzyx\" == makePalindrome(\"xyz\"));\n  assert(\"xyx\" == makePalindrome(\"xyx\"));\n  assert(\"jerryrrej\" == makePalindrome(\"jerry\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_24_largest_divisor",
      "language": "kt",
      "prompt": "// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largestDivisor(15)\n// 5\nfun largestDivisor(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == largestDivisor(3));\n  assert(1 == largestDivisor(7));\n  assert(5 == largestDivisor(10));\n  assert(50 == largestDivisor(100));\n  assert(7 == largestDivisor(49));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_15_string_sequence",
      "language": "kt",
      "prompt": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> stringSequence(0)\n// '0'\n// >>> stringSequence(5)\n// '0 1 2 3 4 5'\nfun stringSequence(n: Int): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"0\" == stringSequence(0));\n  assert(\"0 1 2 3\" == stringSequence(3));\n  assert(\"0 1 2 3 4 5 6 7 8 9 10\" == stringSequence(10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_110_exchange",
      "language": "kt",
      "prompt": "// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nfun exchange(lst1: MutableList<Int>, lst2: MutableList<Int>): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_110_exchange.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"YES\" == exchange(mutableListOf(1, 2, 3, 4), mutableListOf(1, 2, 3, 4)));\n  assert(\"NO\" == exchange(mutableListOf(1, 2, 3, 4), mutableListOf(1, 5, 3, 4)));\n  assert(\"YES\" == exchange(mutableListOf(1, 2, 3, 4), mutableListOf(2, 1, 4, 3)));\n  assert(\"YES\" == exchange(mutableListOf(5, 7, 3), mutableListOf(2, 6, 4)));\n  assert(\"NO\" == exchange(mutableListOf(5, 7, 3), mutableListOf(2, 6, 3)));\n  assert(\"NO\" == exchange(mutableListOf(3, 2, 6, 1, 8, 9), mutableListOf(3, 5, 5, 1, 1, 1)));\n  assert(\"YES\" == exchange(mutableListOf(100, 200), mutableListOf(200, 200)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_91_is_bored",
      "language": "kt",
      "prompt": "// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> isBored(\"Hello world\")\n// 0\n// >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfun isBored(S: String): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_91_is_bored.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(0 == isBored(\"Hello world\"));\n  assert(0 == isBored(\"Is the sky blue?\"));\n  assert(1 == isBored(\"I love It !\"));\n  assert(0 == isBored(\"bIt\"));\n  assert(2 == isBored(\"I feel good today. I will be productive. will kill It\"));\n  assert(0 == isBored(\"You and I are going for a walk\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_156_int_to_mini_roman",
      "language": "kt",
      "prompt": "// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> intToMiniRoman(19) == 'xix'\n// >>> intToMiniRoman(152) == 'clii'\n// >>> intToMiniRoman(426) == 'cdxxvi'\nfun intToMiniRoman(number: Int): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"xix\" == intToMiniRoman(19));\n  assert(\"clii\" == intToMiniRoman(152));\n  assert(\"ccli\" == intToMiniRoman(251));\n  assert(\"cdxxvi\" == intToMiniRoman(426));\n  assert(\"d\" == intToMiniRoman(500));\n  assert(\"i\" == intToMiniRoman(1));\n  assert(\"iv\" == intToMiniRoman(4));\n  assert(\"xliii\" == intToMiniRoman(43));\n  assert(\"xc\" == intToMiniRoman(90));\n  assert(\"xciv\" == intToMiniRoman(94));\n  assert(\"dxxxii\" == intToMiniRoman(532));\n  assert(\"cm\" == intToMiniRoman(900));\n  assert(\"cmxciv\" == intToMiniRoman(994));\n  assert(\"m\" == intToMiniRoman(1000));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_46_fib4",
      "language": "kt",
      "prompt": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfun fib4(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_46_fib4.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(4 == fib4(5));\n  assert(28 == fib4(8));\n  assert(104 == fib4(10));\n  assert(386 == fib4(12));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_69_search",
      "language": "kt",
      "prompt": "// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfun search(lst: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_69_search.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(1 == search(mutableListOf(5, 5, 5, 5, 1)));\n  assert(4 == search(mutableListOf(4, 1, 4, 1, 4, 4)));\n  assert(-1 == search(mutableListOf(3, 3)));\n  assert(8 == search(mutableListOf(8, 8, 8, 8, 8, 8, 8, 8)));\n  assert(2 == search(mutableListOf(2, 3, 3, 2, 2)));\n  assert(1 == search(mutableListOf(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)));\n  assert(2 == search(mutableListOf(3, 2, 8, 2)));\n  assert(1 == search(mutableListOf(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)));\n  assert(-1 == search(mutableListOf(8, 8, 3, 6, 5, 6, 4)));\n  assert(1 == search(mutableListOf(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)));\n  assert(1 == search(mutableListOf(1, 9, 10, 1, 3)));\n  assert(5 == search(mutableListOf(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)));\n  assert(1 == search(mutableListOf(1)));\n  assert(4 == search(mutableListOf(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)));\n  assert(2 == search(mutableListOf(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)));\n  assert(1 == search(mutableListOf(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)));\n  assert(4 == search(mutableListOf(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)));\n  assert(4 == search(mutableListOf(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)));\n  assert(2 == search(mutableListOf(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)));\n  assert(-1 == search(mutableListOf(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)));\n  assert(-1 == search(mutableListOf(10)));\n  assert(2 == search(mutableListOf(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)));\n  assert(1 == search(mutableListOf(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)));\n  assert(1 == search(mutableListOf(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)));\n  assert(-1 == search(mutableListOf(3, 10, 10, 9, 2)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_87_get_row",
      "language": "kt",
      "prompt": "// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// getRow([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// getRow([], 1) == []\n// getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfun getRow(lst: MutableList<MutableList<Int>>, x: Int): MutableList<Pair<Int, Int>> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_87_get_row.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(Pair(0, 0), Pair(1, 4), Pair(1, 0), Pair(2, 5), Pair(2, 0)) == getRow(mutableListOf(mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 1, 6), mutableListOf(1, 2, 3, 4, 5, 1)), 1));\n  assert(mutableListOf(Pair(0, 1), Pair(1, 1), Pair(2, 1), Pair(3, 1), Pair(4, 1), Pair(5, 1)) == getRow(mutableListOf(mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 5, 6)), 2));\n  assert(mutableListOf(Pair(0, 0), Pair(1, 0), Pair(2, 1), Pair(2, 0), Pair(3, 2), Pair(3, 0), Pair(4, 3), Pair(4, 0), Pair(5, 4), Pair(5, 0), Pair(6, 5), Pair(6, 0)) == getRow(mutableListOf(mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 2, 3, 4, 5, 6), mutableListOf(1, 1, 3, 4, 5, 6), mutableListOf(1, 2, 1, 4, 5, 6), mutableListOf(1, 2, 3, 1, 5, 6), mutableListOf(1, 2, 3, 4, 1, 6), mutableListOf(1, 2, 3, 4, 5, 1)), 1));\n  assert(mutableListOf<Any>() == getRow(mutableListOf<Any>(), 1));\n  assert(mutableListOf<Any>() == getRow(mutableListOf(mutableListOf(1)), 2));\n  assert(mutableListOf(Pair(2, 2)) == getRow(mutableListOf(mutableListOf<Any>(), mutableListOf(1), mutableListOf(1, 2, 3)), 3));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_124_valid_date",
      "language": "kt",
      "prompt": "// You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// validDate('03-11-2000') => True\n// validDate('15-01-2012') => False\n// validDate('04-0-2040') => False\n// validDate('06-04-2020') => True\n// validDate('06/04/2020') => False\nfun validDate(date: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_124_valid_date.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == validDate(\"03-11-2000\"));\n  assert(false == validDate(\"15-01-2012\"));\n  assert(false == validDate(\"04-0-2040\"));\n  assert(true == validDate(\"06-04-2020\"));\n  assert(true == validDate(\"01-01-2007\"));\n  assert(false == validDate(\"03-32-2011\"));\n  assert(false == validDate(\"\"));\n  assert(false == validDate(\"04-31-3000\"));\n  assert(true == validDate(\"06-06-2005\"));\n  assert(false == validDate(\"21-31-2000\"));\n  assert(true == validDate(\"04-12-2003\"));\n  assert(false == validDate(\"04122003\"));\n  assert(false == validDate(\"20030412\"));\n  assert(false == validDate(\"2003-04\"));\n  assert(false == validDate(\"2003-04-12\"));\n  assert(false == validDate(\"04-2003\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_11_string_xor",
      "language": "kt",
      "prompt": "// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> stringXor('010', '110')\n// '100'\nfun stringXor(a: String, b: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_11_string_xor.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"010010\" == stringXor(\"111000\", \"101010\"));\n  assert(\"0\" == stringXor(\"1\", \"1\"));\n  assert(\"0101\" == stringXor(\"0101\", \"0000\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_49_modp",
      "language": "kt",
      "prompt": "// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfun modp(n: Int, p: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_49_modp.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(3 == modp(3, 5));\n  assert(2 == modp(1101, 101));\n  assert(1 == modp(0, 101));\n  assert(8 == modp(3, 11));\n  assert(1 == modp(100, 101));\n  assert(4 == modp(30, 5));\n  assert(3 == modp(31, 5));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_120_maximum",
      "language": "kt",
      "prompt": "// Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfun maximum(arr: MutableList<Int>, k: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_120_maximum.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(-4, -3, 5) == maximum(mutableListOf(-3, -4, 5), 3));\n  assert(mutableListOf(4, 4) == maximum(mutableListOf(4, -4, 4), 2));\n  assert(mutableListOf(2) == maximum(mutableListOf(-3, 2, 1, 2, -1, -2, 1), 1));\n  assert(mutableListOf(2, 20, 123) == maximum(mutableListOf(123, -123, 20, 0, 1, 2, -3), 3));\n  assert(mutableListOf(0, 1, 2, 20) == maximum(mutableListOf(-123, 20, 0, 1, 2, -3), 4));\n  assert(mutableListOf(-13, -8, 0, 0, 3, 5, 15) == maximum(mutableListOf(5, 15, 0, 3, -13, -8, 0), 7));\n  assert(mutableListOf(3, 5) == maximum(mutableListOf(-1, 0, 2, 5, 3, -10), 2));\n  assert(mutableListOf(5) == maximum(mutableListOf(1, 0, 5, -7), 1));\n  assert(mutableListOf(-4, 4) == maximum(mutableListOf(4, -4), 2));\n  assert(mutableListOf(-10, 10) == maximum(mutableListOf(-10, 10), 2));\n  assert(mutableListOf<Any>() == maximum(mutableListOf(1, 2, 3, -23, 243, -400, 0), 0));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_39_prime_fib",
      "language": "kt",
      "prompt": "// primeFib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> primeFib(1)\n// 2\n// >>> primeFib(2)\n// 3\n// >>> primeFib(3)\n// 5\n// >>> primeFib(4)\n// 13\n// >>> primeFib(5)\n// 89\nfun primeFib(n: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(2 == primeFib(1));\n  assert(3 == primeFib(2));\n  assert(5 == primeFib(3));\n  assert(13 == primeFib(4));\n  assert(89 == primeFib(5));\n  assert(233 == primeFib(6));\n  assert(1597 == primeFib(7));\n  assert(28657 == primeFib(8));\n  assert(514229 == primeFib(9));\n  assert(433494437 == primeFib(10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_150_x_or_y",
      "language": "kt",
      "prompt": "// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// for xOrY(7, 34, 12) == 34\n// for xOrY(15, 8, 5) == 5\nfun xOrY(n: Int, x: Int, y: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(34 == xOrY(7, 34, 12));\n  assert(5 == xOrY(15, 8, 5));\n  assert(33 == xOrY(3, 33, 5212));\n  assert(3 == xOrY(1259, 3, 52));\n  assert(-1 == xOrY(7919, -1, 12));\n  assert(583 == xOrY(3609, 1245, 583));\n  assert(129 == xOrY(91, 56, 129));\n  assert(1234 == xOrY(6, 34, 1234));\n  assert(0 == xOrY(1, 2, 0));\n  assert(2 == xOrY(2, 2, 0));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_141_file_name_check",
      "language": "kt",
      "prompt": "// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// fileNameCheck(\"example.txt\") # => 'Yes'\n// fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfun fileNameCheck(file_name: String): String {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(\"Yes\" == fileNameCheck(\"example.txt\"));\n  assert(\"No\" == fileNameCheck(\"1example.dll\"));\n  assert(\"No\" == fileNameCheck(\"s1sdf3.asd\"));\n  assert(\"Yes\" == fileNameCheck(\"K.dll\"));\n  assert(\"Yes\" == fileNameCheck(\"MY16FILE3.exe\"));\n  assert(\"No\" == fileNameCheck(\"His12FILE94.exe\"));\n  assert(\"No\" == fileNameCheck(\"_Y.txt\"));\n  assert(\"No\" == fileNameCheck(\"?aREYA.exe\"));\n  assert(\"No\" == fileNameCheck(\"/this_is_valid.dll\"));\n  assert(\"No\" == fileNameCheck(\"this_is_valid.wow\"));\n  assert(\"Yes\" == fileNameCheck(\"this_is_valid.txt\"));\n  assert(\"No\" == fileNameCheck(\"this_is_valid.txtexe\"));\n  assert(\"No\" == fileNameCheck(\"#this2_i4s_5valid.ten\"));\n  assert(\"No\" == fileNameCheck(\"@this1_is6_valid.exe\"));\n  assert(\"No\" == fileNameCheck(\"this_is_12valid.6exe4.txt\"));\n  assert(\"No\" == fileNameCheck(\"all.exe.txt\"));\n  assert(\"Yes\" == fileNameCheck(\"I563_No.exe\"));\n  assert(\"Yes\" == fileNameCheck(\"Is3youfault.txt\"));\n  assert(\"Yes\" == fileNameCheck(\"no_one#knows.dll\"));\n  assert(\"No\" == fileNameCheck(\"1I563_Yes3.exe\"));\n  assert(\"No\" == fileNameCheck(\"I563_Yes3.txtt\"));\n  assert(\"No\" == fileNameCheck(\"final..txt\"));\n  assert(\"No\" == fileNameCheck(\"final132\"));\n  assert(\"No\" == fileNameCheck(\"_f4indsartal132.\"));\n  assert(\"No\" == fileNameCheck(\".txt\"));\n  assert(\"No\" == fileNameCheck(\"s.\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_121_solution",
      "language": "kt",
      "prompt": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfun solution(lst: MutableList<Int>): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_121_solution.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(12 == solution(mutableListOf(5, 8, 7, 1)));\n  assert(9 == solution(mutableListOf(3, 3, 3, 3, 3)));\n  assert(0 == solution(mutableListOf(30, 13, 24, 321)));\n  assert(5 == solution(mutableListOf(5, 9)));\n  assert(0 == solution(mutableListOf(2, 4, 8)));\n  assert(23 == solution(mutableListOf(30, 13, 23, 32)));\n  assert(3 == solution(mutableListOf(3, 13, 2, 9)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_54_same_chars",
      "language": "kt",
      "prompt": "// Check if two words have the same characters.\n// >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// True\n// >>> sameChars('abcd', 'dddddddabc')\n// True\n// >>> sameChars('dddddddabc', 'abcd')\n// True\n// >>> sameChars('eabcd', 'dddddddabc')\n// False\n// >>> sameChars('abcd', 'dddddddabce')\n// False\n// >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfun sameChars(s0: String, s1: String): Boolean {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_54_same_chars.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(true == sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"));\n  assert(true == sameChars(\"abcd\", \"dddddddabc\"));\n  assert(true == sameChars(\"dddddddabc\", \"abcd\"));\n  assert(false == sameChars(\"eabcd\", \"dddddddabc\"));\n  assert(false == sameChars(\"abcd\", \"dddddddabcf\"));\n  assert(false == sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));\n  assert(false == sameChars(\"aabb\", \"aaccc\"));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_104_unique_digits",
      "language": "kt",
      "prompt": "// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> uniqueDigits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> uniqueDigits([152, 323, 1422, 10])\n// []\nfun uniqueDigits(x: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 15, 33) == uniqueDigits(mutableListOf(15, 33, 1422, 1)));\n  assert(mutableListOf<Any>() == uniqueDigits(mutableListOf(152, 323, 1422, 10)));\n  assert(mutableListOf(111, 151) == uniqueDigits(mutableListOf(12345, 2033, 111, 151)));\n  assert(mutableListOf(31, 135) == uniqueDigits(mutableListOf(135, 103, 31)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_88_sort_array",
      "language": "kt",
      "prompt": "// Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sortArray([]) => []\n// * sortArray([5]) => [5]\n// * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfun sortArray(array: MutableList<Int>): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_88_sort_array.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf<Any>() == sortArray(mutableListOf<Any>()));\n  assert(mutableListOf(5) == sortArray(mutableListOf(5)));\n  assert(mutableListOf(0, 1, 2, 3, 4, 5) == sortArray(mutableListOf(2, 4, 3, 0, 1, 5)));\n  assert(mutableListOf(6, 5, 4, 3, 2, 1, 0) == sortArray(mutableListOf(2, 4, 3, 0, 1, 5, 6)));\n  assert(mutableListOf(1, 2) == sortArray(mutableListOf(2, 1)));\n  assert(mutableListOf(0, 11, 15, 32, 42, 87) == sortArray(mutableListOf(15, 42, 87, 32, 11, 0)));\n  assert(mutableListOf(23, 21, 14, 11) == sortArray(mutableListOf(21, 14, 23, 11)));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_129_minPath",
      "language": "kt",
      "prompt": "// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nfun minPath(grid: MutableList<MutableList<Int>>, k: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_129_minPath.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(1, 2, 1) == minPath(mutableListOf(mutableListOf(1, 2, 3), mutableListOf(4, 5, 6), mutableListOf(7, 8, 9)), 3));\n  assert(mutableListOf(1) == minPath(mutableListOf(mutableListOf(5, 9, 3), mutableListOf(4, 1, 6), mutableListOf(7, 8, 2)), 1));\n  assert(mutableListOf(1, 2, 1, 2) == minPath(mutableListOf(mutableListOf(1, 2, 3, 4), mutableListOf(5, 6, 7, 8), mutableListOf(9, 10, 11, 12), mutableListOf(13, 14, 15, 16)), 4));\n  assert(mutableListOf(1, 10, 1, 10, 1, 10, 1) == minPath(mutableListOf(mutableListOf(6, 4, 13, 10), mutableListOf(5, 7, 12, 1), mutableListOf(3, 16, 11, 15), mutableListOf(8, 14, 9, 2)), 7));\n  assert(mutableListOf(1, 7, 1, 7, 1) == minPath(mutableListOf(mutableListOf(8, 14, 9, 2), mutableListOf(6, 4, 13, 15), mutableListOf(5, 7, 1, 12), mutableListOf(3, 10, 11, 16)), 5));\n  assert(mutableListOf(1, 6, 1, 6, 1, 6, 1, 6, 1) == minPath(mutableListOf(mutableListOf(11, 8, 7, 2), mutableListOf(5, 16, 14, 4), mutableListOf(9, 3, 15, 6), mutableListOf(12, 13, 10, 1)), 9));\n  assert(mutableListOf(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6) == minPath(mutableListOf(mutableListOf(12, 13, 10, 1), mutableListOf(9, 3, 15, 6), mutableListOf(5, 16, 14, 4), mutableListOf(11, 8, 7, 2)), 12));\n  assert(mutableListOf(1, 3, 1, 3, 1, 3, 1, 3) == minPath(mutableListOf(mutableListOf(2, 7, 4), mutableListOf(3, 1, 5), mutableListOf(6, 8, 9)), 8));\n  assert(mutableListOf(1, 5, 1, 5, 1, 5, 1, 5) == minPath(mutableListOf(mutableListOf(6, 1, 5), mutableListOf(3, 8, 9), mutableListOf(2, 7, 4)), 8));\n  assert(mutableListOf(1, 2, 1, 2, 1, 2, 1, 2, 1, 2) == minPath(mutableListOf(mutableListOf(1, 2), mutableListOf(3, 4)), 10));\n  assert(mutableListOf(1, 3, 1, 3, 1, 3, 1, 3, 1, 3) == minPath(mutableListOf(mutableListOf(1, 3), mutableListOf(3, 2)), 10));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_100_make_a_pile",
      "language": "kt",
      "prompt": "// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> makeAPile(3)\n// [3, 5, 7]\nfun makeAPile(n: Int): MutableList<Int> {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(mutableListOf(3, 5, 7) == makeAPile(3));\n  assert(mutableListOf(4, 6, 8, 10) == makeAPile(4));\n  assert(mutableListOf(5, 7, 9, 11, 13) == makeAPile(5));\n  assert(mutableListOf(6, 8, 10, 12, 14, 16) == makeAPile(6));\n  assert(mutableListOf(8, 10, 12, 14, 16, 18, 20, 22) == makeAPile(8));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    },
    {
      "name": "HumanEval_102_choose_num",
      "language": "kt",
      "prompt": "// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// chooseNum(12, 15) = 14\n// chooseNum(13, 12) = -1\nfun chooseNum(x: Int, y: Int): Int {\n",
      "doctests": "keep",
      "original": "/home/luisali/MultiPL-EKT/datasets/../datasets/originals/HumanEval_102_choose_num.py",
      "prompt_terminology": "verbatim",
      "tests": "fun main() {\n  assert(14 == chooseNum(12, 15));\n  assert(-1 == chooseNum(13, 12));\n  assert(12354 == chooseNum(33, 12354));\n  assert(-1 == chooseNum(5234, 5233));\n  assert(28 == chooseNum(6, 29));\n  assert(-1 == chooseNum(27, 10));\n  assert(-1 == chooseNum(7, 7));\n  assert(546 == chooseNum(546, 546));\n}",
      "stop_tokens": [
        "\nfun ",
        "\n/*",
        "\n//",
        "\nclass"
      ]
    }
  ]